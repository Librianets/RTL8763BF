
========================================================================

** ELF Header Information

    File Name: W:\git\RTL8763BF\project\keilproject\Objects\rtp8763_demo.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: 0x0080e409
    Flags: EF_ARM_HASENTRY + EF_ARM_ABI_FLOAT_HARD (0x05000402)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Hard float procedure-call standard

    Built with
    Component: ARM Compiler 5.06 update 4 (build 422) Tool: armasm [4d35cf]
    Component: ARM Compiler 5.06 update 4 (build 422) Tool: armlink [4d35d2]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 2
    Section header entries: 22

    Program header offset: 388344 (0x0005ecf8)
    Section header offset: 388408 (0x0005ed38)

    Section header string table index: 21

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_W + PF_R + PF_ARM_ENTRY]
    Size : 14240 bytes (13796 bytes in file)
    Virtual address: 0x0080e000 (Alignment 4)


====================================

** Program header #1 (PT_LOAD) [PF_R]
    Size : 4228 bytes
    Virtual address: 0x08800000 (Alignment 4)


========================================================================

** Section #1 'app.bin' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 1024 bytes (alignment 4)
    Address: 0x0080e000

    0x80e000:   05 00 01 01 93 27 00 00 00 01 00 00 6d 67 de f1    .....'......mg..
    0x80e010:   3e 33 e8 11 b1 02 4d 2d f4 0c de 01 00 e4 80 00    >3....M-........
    0x80e020:   00 e4 80 00 00 00 00 00 00 e0 80 00 00 00 00 00    ................
    0x80e030:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e040:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e050:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e060:   01 20 00 00 a8 ac 83 2a 73 64 6b 23 23 23 23 23    . .....*sdk#####
    0x80e070:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e080:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e090:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e100:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e110:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e120:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e130:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e140:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e150:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e160:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e170:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e180:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e190:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1d0:   00 00 00 00 00 00 00 00 01 d1 85 0e bc 08 81 00    ................
    0x80e1e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e200:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e210:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e220:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e230:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e240:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e250:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e260:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e270:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e280:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e290:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2e0:   ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
    0x80e2f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e300:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e310:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e320:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e330:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e340:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e350:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e360:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e370:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e380:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e390:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3f0:   ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................


** Section #2 'FLASH_START_ADDR' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 8 bytes (alignment 4)
    Address: 0x0080e400

    $t
    RESET
    $v0
    Reset_Handler
;;; ..\\include\\SDK\\src\\mcu\\rtl876x\\arm\\startup_rtl8762c.s
;;;96                     IMPORT SystemInit
;;;96                     LDR    R0, =SystemInit
        0x0080e400:    4800        .H      LDR      r0,[pc,#0] ; [0x80e404] = 0x80e527
;;;97                     BX     R0
        0x0080e402:    4700        .G      BX       r0
    $d
        0x0080e404:    0080e527    '...    DCD    8447271

** Section #3 'FLASH_TEXT' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 11520 bytes (alignment 4)
    Address: 0x0080e408

    $t
    !!!main
    __main
        0x0080e408:    f000f802    ....    BL       __scatterload ; 0x80e410
        0x0080e40c:    f000f83a    ..:.    BL       __rt_entry ; 0x80e484
    !!!scatter
    __scatterload
    __scatterload_rt2
    __scatterload_rt2_thumb_only
        0x0080e410:    a00a        ..      ADR      r0,{pc}+0x2c ; 0x80e43c
        0x0080e412:    e8900c00    ....    LDM      r0,{r10,r11}
        0x0080e416:    4482        .D      ADD      r10,r10,r0
        0x0080e418:    4483        .D      ADD      r11,r11,r0
        0x0080e41a:    f1aa0701    ....    SUB      r7,r10,#1
    __scatterload_null
        0x0080e41e:    45da        .E      CMP      r10,r11
        0x0080e420:    d101        ..      BNE      0x80e426 ; __scatterload_null + 8
        0x0080e422:    f000f82f    ../.    BL       __rt_entry ; 0x80e484
        0x0080e426:    f2af0e09    ....    ADR      lr,{pc}-7 ; 0x80e41f
        0x0080e42a:    e8ba000f    ....    LDM      r10!,{r0-r3}
        0x0080e42e:    f0130f01    ....    TST      r3,#1
        0x0080e432:    bf18        ..      IT       NE
        0x0080e434:    1afb        ..      SUBNE    r3,r7,r3
        0x0080e436:    f0430301    C...    ORR      r3,r3,#1
        0x0080e43a:    4718        .G      BX       r3
    $d
        0x0080e43c:    00002c8c    .,..    DCD    11404
        0x0080e440:    00002ccc    .,..    DCD    11468
    $t
    !!handler_copy
    __scatterload_copy
        0x0080e444:    3a10        .:      SUBS     r2,r2,#0x10
        0x0080e446:    bf24        $.      ITT      CS
        0x0080e448:    c878        x.      LDMCS    r0!,{r3-r6}
        0x0080e44a:    c178        x.      STMCS    r1!,{r3-r6}
        0x0080e44c:    d8fa        ..      BHI      __scatterload_copy ; 0x80e444
        0x0080e44e:    0752        R.      LSLS     r2,r2,#29
        0x0080e450:    bf24        $.      ITT      CS
        0x0080e452:    c830        0.      LDMCS    r0!,{r4,r5}
        0x0080e454:    c130        0.      STMCS    r1!,{r4,r5}
        0x0080e456:    bf44        D.      ITT      MI
        0x0080e458:    6804        .h      LDRMI    r4,[r0,#0]
        0x0080e45a:    600c        .`      STRMI    r4,[r1,#0]
        0x0080e45c:    4770        pG      BX       lr
        0x0080e45e:    0000        ..      MOVS     r0,r0
    !!handler_zi
    __scatterload_zeroinit
        0x0080e460:    2300        .#      MOVS     r3,#0
        0x0080e462:    2400        .$      MOVS     r4,#0
        0x0080e464:    2500        .%      MOVS     r5,#0
        0x0080e466:    2600        .&      MOVS     r6,#0
        0x0080e468:    3a10        .:      SUBS     r2,r2,#0x10
        0x0080e46a:    bf28        (.      IT       CS
        0x0080e46c:    c178        x.      STMCS    r1!,{r3-r6}
        0x0080e46e:    d8fb        ..      BHI      0x80e468 ; __scatterload_zeroinit + 8
        0x0080e470:    0752        R.      LSLS     r2,r2,#29
        0x0080e472:    bf28        (.      IT       CS
        0x0080e474:    c130        0.      STMCS    r1!,{r4,r5}
        0x0080e476:    bf48        H.      IT       MI
        0x0080e478:    600b        .`      STRMI    r3,[r1,#0]
        0x0080e47a:    4770        pG      BX       lr
    .ARM.Collect$$libinit$$00000000
    __rt_lib_init
        0x0080e47c:    b51f        ..      PUSH     {r0-r4,lr}
    .ARM.Collect$$libinit$$00000001
    __rt_lib_init_fp_1
        0x0080e47e:    f002fa17    ....    BL       _fp_init ; 0x8108b0
    .ARM.Collect$$libinit$$00000004
    .ARM.Collect$$libinit$$0000000A
    .ARM.Collect$$libinit$$0000000C
    .ARM.Collect$$libinit$$0000000E
    .ARM.Collect$$libinit$$00000011
    .ARM.Collect$$libinit$$00000013
    .ARM.Collect$$libinit$$00000015
    .ARM.Collect$$libinit$$00000017
    .ARM.Collect$$libinit$$00000019
    .ARM.Collect$$libinit$$0000001B
    .ARM.Collect$$libinit$$0000001D
    .ARM.Collect$$libinit$$0000001F
    .ARM.Collect$$libinit$$00000021
    .ARM.Collect$$libinit$$00000023
    .ARM.Collect$$libinit$$00000025
    .ARM.Collect$$libinit$$0000002C
    .ARM.Collect$$libinit$$0000002E
    .ARM.Collect$$libinit$$00000030
    .ARM.Collect$$libinit$$00000032
    .ARM.Collect$$libinit$$00000033
    __rt_lib_init_alloca_1
    __rt_lib_init_argv_1
    __rt_lib_init_atexit_1
    __rt_lib_init_clock_1
    __rt_lib_init_cpp_1
    __rt_lib_init_exceptions_1
    __rt_lib_init_fp_trap_1
    __rt_lib_init_getenv_1
    __rt_lib_init_heap_1
    __rt_lib_init_lc_collate_1
    __rt_lib_init_lc_ctype_1
    __rt_lib_init_lc_monetary_1
    __rt_lib_init_lc_numeric_1
    __rt_lib_init_lc_time_1
    __rt_lib_init_preinit_1
    __rt_lib_init_rand_1
    __rt_lib_init_return
    __rt_lib_init_signal_1
    __rt_lib_init_stdio_1
    __rt_lib_init_user_alloc_1
        0x0080e482:    bd1f        ..      POP      {r0-r4,pc}
    .ARM.Collect$$rtentry$$00000000
    .ARM.Collect$$rtentry$$00000002
    .ARM.Collect$$rtentry$$00000004
    __rt_entry
    __rt_entry_presh_1
    __rt_entry_sh
        0x0080e484:    f002f8ee    ....    BL       __user_setup_stackheap ; 0x810664
        0x0080e488:    4611        .F      MOV      r1,r2
    .ARM.Collect$$rtentry$$00000009
    .ARM.Collect$$rtentry$$0000000A
    __rt_entry_li
    __rt_entry_postsh_1
        0x0080e48a:    f7fffff7    ....    BL       __rt_lib_init ; 0x80e47c
    .ARM.Collect$$rtentry$$0000000C
    .ARM.Collect$$rtentry$$0000000D
    __rt_entry_main
    __rt_entry_postli_1
        0x0080e48e:    f000fd7d    ..}.    BL       main ; 0x80ef8c
        0x0080e492:    f44cf4c7    L...    BL       exit ; 0x5ae24
        0x0080e496:    0000        ..      MOVS     r0,r0
    .app.flash.text
    debug_monitor_enable
;;;1734           SCB->SHP[((uint32_t)(IRQn) & 0xF) - 4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);
        0x0080e498:    4945        EI      LDR      r1,[pc,#276] ; [0x80e5b0] = 0xe000e00c
        0x0080e49a:    2060        `       MOVS     r0,#0x60
        0x0080e49c:    f8810d14    ....    STRB     r0,[r1,#0xd14]
;;; .\..\include\SDK\src\mcu\rtl876x\system_rtl8762c.c
;;;298        CoreDebug->DEMCR |= CoreDebug_DEMCR_MON_EN_Msk | CoreDebug_DEMCR_TRCENA_Msk;
        0x0080e4a0:    4844        DH      LDR      r0,[pc,#272] ; [0x80e5b4] = 0xe000edfc
        0x0080e4a2:    6801        .h      LDR      r1,[r0,#0]
        0x0080e4a4:    4a44        DJ      LDR      r2,[pc,#272] ; [0x80e5b8] = 0x1010000
        0x0080e4a6:    4311        .C      ORRS     r1,r1,r2
        0x0080e4a8:    6001        .`      STR      r1,[r0,#0]
;;;299    
;;;300        //set DWT compare registers (max 4 comparators)
;;;301        //watch_point_0_setting(0x1000180C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_WRITE);
;;;302        //watch_point_1_setting(0x10000004, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;303        //watch_point_2_setting(0x10000008, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;304        //watch_point_3_setting(0x1000000C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;305    
;;;306        //enable DWT control register
;;;307        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
        0x0080e4aa:    4844        DH      LDR      r0,[pc,#272] ; [0x80e5bc] = 0xe0001000
        0x0080e4ac:    6801        .h      LDR      r1,[r0,#0]
        0x0080e4ae:    f0410101    A...    ORR      r1,r1,#1
        0x0080e4b2:    6001        .`      STR      r1,[r0,#0]
;;;308    
;;;309        return;
;;;310    }
        0x0080e4b4:    4770        pG      BX       lr
    ram_init
;;;311    
;;;312    APP_FLASH_TEXT_SECTION
;;;313    void ram_init(void)
;;;314    {
        0x0080e4b6:    b510        ..      PUSH     {r4,lr}
;;;315        //copy data on ro
;;;316        extern char Image$$RAM_DATA_ON$$RO$$Base[];
;;;317        extern char Load$$RAM_DATA_ON$$RO$$Base[];
;;;318        extern unsigned int Image$$RAM_DATA_ON$$RO$$Length;
;;;319    
;;;320        memcpy(Image$$RAM_DATA_ON$$RO$$Base,
        0x0080e4b8:    4a41        AJ      LDR      r2,[pc,#260] ; [0x80e5c0] = 0x25c
        0x0080e4ba:    4942        BI      LDR      r1,[pc,#264] ; [0x80e5c4] = 0x8111fc
        0x0080e4bc:    4842        BH      LDR      r0,[pc,#264] ; [0x80e5c8] = 0x207c00
        0x0080e4be:    f44bf4ec    K...    BL       __aeabi_memcpy ; 0x59e9a
;;;321               Load$$RAM_DATA_ON$$RO$$Base,
;;;322               (unsigned int)&Image$$RAM_DATA_ON$$RO$$Length);
;;;323    
;;;324        //copy data on rw
;;;325        extern char Image$$RAM_DATA_ON$$RW$$Base[];
;;;326        extern char Load$$RAM_DATA_ON$$RW$$Base[];
;;;327        extern unsigned int Image$$RAM_DATA_ON$$RW$$Length;
;;;328    
;;;329        memcpy(Image$$RAM_DATA_ON$$RW$$Base,
        0x0080e4c2:    4a42        BJ      LDR      r2,[pc,#264] ; [0x80e5cc] = 0xcc
        0x0080e4c4:    4942        BI      LDR      r1,[pc,#264] ; [0x80e5d0] = 0x811458
        0x0080e4c6:    4843        CH      LDR      r0,[pc,#268] ; [0x80e5d4] = 0x207e5c
        0x0080e4c8:    f44bf4e7    K...    BL       __aeabi_memcpy ; 0x59e9a
;;;330               Load$$RAM_DATA_ON$$RW$$Base,
;;;331               (unsigned int)&Image$$RAM_DATA_ON$$RW$$Length);
;;;332    
;;;333        //clear data on zi
;;;334        extern char Image$$RAM_DATA_ON$$ZI$$Base[];
;;;335        extern unsigned int Image$$RAM_DATA_ON$$ZI$$Length;
;;;336    
;;;337        memset(Image$$RAM_DATA_ON$$ZI$$Base,
        0x0080e4cc:    4942        BI      LDR      r1,[pc,#264] ; [0x80e5d8] = 0x1bc
        0x0080e4ce:    4843        CH      LDR      r0,[pc,#268] ; [0x80e5dc] = 0x207f28
        0x0080e4d0:    f44bf5a4    K...    BL       __aeabi_memclr ; 0x5a01c
;;;338               0,
;;;339               (unsigned int)&Image$$RAM_DATA_ON$$ZI$$Length);
;;;340    
;;;341        //copy cache ro
;;;342        extern char Image$$CACHE_DATA_ON$$RO$$Base[];
;;;343        extern char Load$$CACHE_DATA_ON$$RO$$Base[];
;;;344        extern unsigned int Image$$CACHE_DATA_ON$$RO$$Length;
;;;345    
;;;346        memcpy(Image$$CACHE_DATA_ON$$RO$$Base,
        0x0080e4d4:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e4d8:    4a41        AJ      LDR      r2,[pc,#260] ; [0x80e5e0] = 0
        0x0080e4da:    4942        BI      LDR      r1,[pc,#264] ; [0x80e5e4] = 0x8115e4
        0x0080e4dc:    4842        BH      LDR      r0,[pc,#264] ; [0x80e5e8] = 0x21c000
        0x0080e4de:    f44bb4dc    K...    B        __aeabi_memcpy ; 0x59e9a
    pre_main
;;;347               Load$$CACHE_DATA_ON$$RO$$Base,
;;;348               (unsigned int)&Image$$CACHE_DATA_ON$$RO$$Length);
;;;349    }
;;;350    
;;;351    APP_FLASH_TEXT_SECTION
;;;352    void SystemInit(void)
;;;353    {
;;;354        //init pre_main and main functions
;;;355        extern void pre_main(void);
;;;356        app_pre_main = (APP_MAIN_FUNC)pre_main;
;;;357        app_main = (APP_MAIN_FUNC)common_main;
;;;358    
;;;359        /******** update otp here**********/
;;;360        //ram config
;;;361        OTP->appDataSize = APP_GLOBAL_SIZE;
;;;362        OTP->heapDataONSize = HEAP_DATA_ON_SIZE;
;;;363        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;364    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;365        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
;;;366    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;367        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;368    #else
;;;369        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;370    #endif
;;;371    
;;;372    
;;;373        //flash config
;;;374        /*config enable flash block proect depending on flash layout and flash id*/
;;;375    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;376        OTP->bp_enable = 1;
;;;377    #else
;;;378        OTP->bp_enable = 0;
;;;379    #endif
;;;380        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
;;;381    
;;;382    
;;;383        //os config
;;;384        /*config enable check task stack overflow*/
;;;385    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;386        OTP->checkForStackOverflow = 1;
;;;387    #else
;;;388        OTP->checkForStackOverflow = 0;
;;;389    #endif
;;;390    
;;;391    
;;;392        //platform config
;;;393        /*config enable platform assert*/
;;;394    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;395        OTP->enableASSERT = 1;
;;;396    #else
;;;397        OTP->enableASSERT = 0;
;;;398    #endif
;;;399    
;;;400        /*Print all log in log buffer before entering DLPS */
;;;401    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;402        OTP->printAllLogBeforeEnterDLPS = 1;
;;;403    #else
;;;404        OTP->printAllLogBeforeEnterDLPS = 0;
;;;405    #endif
;;;406    
;;;407        /*config enable log or not*/
;;;408    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;409        OTP->logDisable = 0;
;;;410    #else
;;;411        OTP->logDisable = 1;
;;;412    #endif
;;;413    
;;;414        /*config enable swd pinmux*/
;;;415    #if (SWD_PINMUX_ENABLE == 1)
;;;416        OTP->SWD_ENABLE = 1;
;;;417    #else
;;;418        OTP->SWD_ENABLE = 0;
;;;419    #endif
;;;420    
;;;421        /*config enable watch dog in rom*/
;;;422    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;423        OTP->wdgEnableInRom = 1;
;;;424    #else
;;;425        OTP->wdgEnableInRom = 0;
;;;426    #endif
;;;427    
;;;428        /*config watch dog mode in rom, defualt reset all*/
;;;429        OTP->wdgMode = ROM_WATCH_DOG_MODE;
;;;430    
;;;431    
;;;432        //app config
;;;433        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
;;;434        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
;;;435        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
;;;436        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
;;;437    
;;;438        /*config bt stack parameters in rom*/
;;;439    #ifdef BT_STACK_CONFIG_ENABLE
;;;440        bt_stack_config_init();
;;;441    #endif
;;;442    
;;;443    //add more otp config here
;;;444    }
;;;445    
;;;446    APP_FLASH_TEXT_SECTION
;;;447    void pre_main(void)
;;;448    {
        0x0080e4e2:    b538        8.      PUSH     {r3-r5,lr}
;;;449        __disable_irq();
        0x0080e4e4:    b672        r.      CPSID    i
;;;450    
;;;451        ram_init();
        0x0080e4e6:    f7ffffe6    ....    BL       ram_init ; 0x80e4b6
;;;452    
;;;453        load_overlay(OVERLAY_SCENARIO_BOOT_ONCE);
        0x0080e4ea:    2000        .       MOVS     r0,#0
        0x0080e4ec:    f002f874    ..t.    BL       load_overlay ; 0x8105d8
;;;454    
;;;455        setlocale(LC_ALL, "C");
        0x0080e4f0:    a13e        >.      ADR      r1,{pc}+0xfc ; 0x80e5ec
        0x0080e4f2:    201f        .       MOVS     r0,#0x1f
        0x0080e4f4:    f44bf47e    K.~.    BL       setlocale ; 0x59df4
;;;456    
;;;457        BOOT_PRINT_ERROR2("SDK Ver: %s, Build Time: %s",
        0x0080e4f8:    f04f5505    O..U    MOV      r5,#0x21400000
        0x0080e4fc:    a13c        <.      ADR      r1,{pc}+0xf4 ; 0x80e5f0
        0x0080e4fe:    4628        (F      MOV      r0,r5
        0x0080e500:    f7f9dcb3    ....    BL       trace_string ; 0x7e6a
        0x0080e504:    4604        .F      MOV      r4,r0
        0x0080e506:    a141        A.      ADR      r1,{pc}+0x106 ; 0x80e60c
        0x0080e508:    4628        (F      MOV      r0,r5
        0x0080e50a:    f7f9dcae    ....    BL       trace_string ; 0x7e6a
        0x0080e50e:    4603        .F      MOV      r3,r0
        0x0080e510:    2202        ."      MOVS     r2,#2
        0x0080e512:    4940        @I      LDR      r1,[pc,#256] ; [0x80e614] = 0x8800000
        0x0080e514:    4840        @H      LDR      r0,[pc,#256] ; [0x80e618] = 0x21100300
        0x0080e516:    9400        ..      STR      r4,[sp,#0]
        0x0080e518:    f7f9daa1    ....    BL       log_buffer ; 0x7a5e
;;;458                          TRACE_STRING(VERSION_BUILD_STR),
;;;459                          TRACE_STRING(BUILDING_TIME));
;;;460    
;;;461        AppUpdateVectorTable();
        0x0080e51c:    f5f9f5e2    ....    BL       AppUpdateVectorTable ; 0x2080e4
;;;462    
;;;463        debug_monitor_enable();
        0x0080e520:    e8bd4038    ..8@    POP      {r3-r5,lr}
        0x0080e524:    e7b8        ..      B        debug_monitor_enable ; 0x80e498
    SystemInit
;;; .\..\include\SDK\src\mcu\rtl876x\system_rtl8762c.c (356)
        0x0080e526:    f2af0045    ..E.    ADR      r0,{pc}-0x43 ; 0x80e4e3
        0x0080e52a:    493c        <I      LDR      r1,[pc,#240] ; [0x80e61c] = 0x200c38
;;;357        app_main = (APP_MAIN_FUNC)common_main;
        0x0080e52c:    6008        .`      STR      r0,[r1,#0]
        0x0080e52e:    493d        =I      LDR      r1,[pc,#244] ; [0x80e624] = 0x200c3c
        0x0080e530:    483b        ;H      LDR      r0,[pc,#236] ; [0x80e620] = 0x80e62d
;;;358    
;;;359        /******** update otp here**********/
;;;360        //ram config
;;;361        OTP->appDataSize = APP_GLOBAL_SIZE;
        0x0080e532:    6008        .`      STR      r0,[r1,#0]
        0x0080e534:    f44f1000    O...    MOV      r0,#0x200000
        0x0080e538:    f44f410c    O..A    MOV      r1,#0x8c00
;;;362        OTP->heapDataONSize = HEAP_DATA_ON_SIZE;
        0x0080e53c:    f8c01384    ....    STR      r1,[r0,#0x384]
        0x0080e540:    f44f41f0    O..A    MOV      r1,#0x7800
;;;363        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;364    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;365        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
        0x0080e544:    f8c01388    ....    STR      r1,[r0,#0x388]
        0x0080e548:    4937        7I      LDR      r1,[pc,#220] ; [0x80e628] = 0xa2aa0003
;;;366    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;367        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;368    #else
;;;369        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;370    #endif
;;;371    
;;;372    
;;;373        //flash config
;;;374        /*config enable flash block proect depending on flash layout and flash id*/
;;;375    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;376        OTP->bp_enable = 1;
;;;377    #else
;;;378        OTP->bp_enable = 0;
        0x0080e54a:    f8c013cc    ....    STR      r1,[r0,#0x3cc]
        0x0080e54e:    f890134d    ..M.    LDRB     r1,[r0,#0x34d]
        0x0080e552:    f0210108    !...    BIC      r1,r1,#8
        0x0080e556:    f880134d    ..M.    STRB     r1,[r0,#0x34d]
;;;379    #endif
;;;380        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
        0x0080e55a:    2106        .!      MOVS     r1,#6
        0x0080e55c:    f880134f    ..O.    STRB     r1,[r0,#0x34f]
;;;381    
;;;382    
;;;383        //os config
;;;384        /*config enable check task stack overflow*/
;;;385    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;386        OTP->checkForStackOverflow = 1;
        0x0080e560:    f8901378    ..x.    LDRB     r1,[r0,#0x378]
;;;387    #else
;;;388        OTP->checkForStackOverflow = 0;
;;;389    #endif
;;;390    
;;;391    
;;;392        //platform config
;;;393        /*config enable platform assert*/
;;;394    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;395        OTP->enableASSERT = 1;
;;;396    #else
;;;397        OTP->enableASSERT = 0;
;;;398    #endif
;;;399    
;;;400        /*Print all log in log buffer before entering DLPS */
;;;401    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;402        OTP->printAllLogBeforeEnterDLPS = 1;
        0x0080e564:    f0410126    A.&.    ORR      r1,r1,#0x26
        0x0080e568:    f8801378    ..x.    STRB     r1,[r0,#0x378]
;;;403    #else
;;;404        OTP->printAllLogBeforeEnterDLPS = 0;
;;;405    #endif
;;;406    
;;;407        /*config enable log or not*/
;;;408    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;409        OTP->logDisable = 0;
        0x0080e56c:    f890139a    ....    LDRB     r1,[r0,#0x39a]
        0x0080e570:    f0210101    !...    BIC      r1,r1,#1
        0x0080e574:    f880139a    ....    STRB     r1,[r0,#0x39a]
;;;410    #else
;;;411        OTP->logDisable = 1;
;;;412    #endif
;;;413    
;;;414        /*config enable swd pinmux*/
;;;415    #if (SWD_PINMUX_ENABLE == 1)
;;;416        OTP->SWD_ENABLE = 1;
        0x0080e578:    f8901334    ..4.    LDRB     r1,[r0,#0x334]
        0x0080e57c:    f0410101    A...    ORR      r1,r1,#1
        0x0080e580:    f8801334    ..4.    STRB     r1,[r0,#0x334]
;;;417    #else
;;;418        OTP->SWD_ENABLE = 0;
;;;419    #endif
;;;420    
;;;421        /*config enable watch dog in rom*/
;;;422    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;423        OTP->wdgEnableInRom = 1;
;;;424    #else
;;;425        OTP->wdgEnableInRom = 0;
        0x0080e584:    f890137a    ..z.    LDRB     r1,[r0,#0x37a]
        0x0080e588:    f0210110    !...    BIC      r1,r1,#0x10
;;;426    #endif
;;;427    
;;;428        /*config watch dog mode in rom, defualt reset all*/
;;;429        OTP->wdgMode = ROM_WATCH_DOG_MODE;
        0x0080e58c:    f04101c0    A...    ORR      r1,r1,#0xc0
        0x0080e590:    f880137a    ..z.    STRB     r1,[r0,#0x37a]
;;;430    
;;;431    
;;;432        //app config
;;;433        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
        0x0080e594:    21b4        .!      MOVS     r1,#0xb4
        0x0080e596:    f8801320    .. .    STRB     r1,[r0,#0x320]
;;;434        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
        0x0080e59a:    213c        <!      MOVS     r1,#0x3c
        0x0080e59c:    f8801321    ..!.    STRB     r1,[r0,#0x321]
;;;435        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
        0x0080e5a0:    2164        d!      MOVS     r1,#0x64
        0x0080e5a2:    f8801322    ..".    STRB     r1,[r0,#0x322]
;;;436        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
        0x0080e5a6:    21ff        .!      MOVS     r1,#0xff
        0x0080e5a8:    f8801323    ..#.    STRB     r1,[r0,#0x323]
;;;437    
;;;438        /*config bt stack parameters in rom*/
;;;439    #ifdef BT_STACK_CONFIG_ENABLE
;;;440        bt_stack_config_init();
;;;441    #endif
;;;442    
;;;443    //add more otp config here
;;;444    }
        0x0080e5ac:    4770        pG      BX       lr
    $d
        0x0080e5ae:    0000        ..      DCW    0
        0x0080e5b0:    e000e00c    ....    DCD    3758153740
        0x0080e5b4:    e000edfc    ....    DCD    3758157308
        0x0080e5b8:    01010000    ....    DCD    16842752
        0x0080e5bc:    e0001000    ....    DCD    3758100480
        0x0080e5c0:    0000025c    \...    DCD    604
        0x0080e5c4:    008111fc    ....    DCD    8458748
        0x0080e5c8:    00207c00    .| .    DCD    2128896
        0x0080e5cc:    000000cc    ....    DCD    204
        0x0080e5d0:    00811458    X...    DCD    8459352
        0x0080e5d4:    00207e5c    \~ .    DCD    2129500
        0x0080e5d8:    000001bc    ....    DCD    444
        0x0080e5dc:    00207f28    (. .    DCD    2129704
        0x0080e5e0:    00000000    ....    DCD    0
        0x0080e5e4:    008115e4    ....    DCD    8459748
        0x0080e5e8:    0021c000    ..!.    DCD    2211840
        0x0080e5ec:    00000043    C...    DCD    67
        0x0080e5f0:    20697246    Fri     DCD    543781446
        0x0080e5f4:    20706553    Sep     DCD    544236883
        0x0080e5f8:    31203132    21 1    DCD    824193330
        0x0080e5fc:    31303a33    3:01    DCD    825244211
        0x0080e600:    2037313a    :17     DCD    540487994
        0x0080e604:    38313032    2018    DCD    942747698
        0x0080e608:    00000000    ....    DCD    0
        0x0080e60c:    2e302e31    1.0.    DCD    774909489
        0x0080e610:    00302e32    2.0.    DCD    3157554
        0x0080e614:    08800000    ....    DCD    142606336
        0x0080e618:    21100300    ...!    DCD    554697472
        0x0080e61c:    00200c38    8. .    DCD    2100280
        0x0080e620:    0080e62d    -...    DCD    8447533
        0x0080e624:    00200c3c    <. .    DCD    2100284
        0x0080e628:    a2aa0003    ....    DCD    2729050115
    $t
    .text
    common_main
;;; .\..\include\SDK\src\mcu\rtl876x\system_rtl8762c.c (253)
        0x0080e62c:    b510        ..      PUSH     {r4,lr}
;;;254    //add common system code here before enter user defined main function
;;;255        OTP->run_in_app = 1;
        0x0080e62e:    f44f1000    O...    MOV      r0,#0x200000
        0x0080e632:    f890139b    ....    LDRB     r1,[r0,#0x39b]
        0x0080e636:    f0410180    A...    ORR      r1,r1,#0x80
        0x0080e63a:    f880139b    ....    STRB     r1,[r0,#0x39b]
;;;256    
;;;257    #if (RUN_APP_IN_HCIMODE_ENABLE == 0)
;;;258        if (OTP->stack_en)
        0x0080e63e:    f89002dc    ....    LDRB     r0,[r0,#0x2dc]
        0x0080e642:    07c1        ..      LSLS     r1,r0,#31
;;;259        {
;;;260            DBG_DIRECT("In SoC Mode");
        0x0080e644:    f04f5004    O..P    MOV      r0,#0x21000000
        0x0080e648:    d003        ..      BEQ      0x80e652 ; common_main + 38
        0x0080e64a:    a119        ..      ADR      r1,{pc}+0x66 ; 0x80e6b0
        0x0080e64c:    f7f9d9b0    ....    BL       log_direct ; 0x79b0
        0x0080e650:    e006        ..      B        0x80e660 ; common_main + 52
;;;261        }
;;;262        else
;;;263        {
;;;264            DBG_DIRECT("WARNING: In HCI Mode, will not run APP Task");
        0x0080e652:    a11a        ..      ADR      r1,{pc}+0x6a ; 0x80e6bc
        0x0080e654:    f7f9d9ac    ....    BL       log_direct ; 0x79b0
;;;265    		WDG_Disable();
        0x0080e658:    f403f173    ..s.    BL       WDG_Disable ; 0x11942
;;;266            os_sched_start();
        0x0080e65c:    f418f0b1    ....    BL       os_sched_start ; 0x267c2
;;;267        }
;;;268    #endif
;;;269    
;;;270    #if (DEBUG_TASK_HANG_ENABLE == 1)
;;;271        extern void DebugTaskHang(void);  //defined in debug_platform.c
;;;272        DebugTaskHang();
;;;273    #endif
;;;274    
;;;275    #if (DEBUG_DLPS_ERROR_IN_APP_ENABLE == 1)
;;;276        void dlps_debug_swtimer_init(void);  //defined in debug_platform.c
;;;277        dlps_debug_swtimer_init();
;;;278    #endif
;;;279    
;;;280        extern int main(void);
;;;281        main();
        0x0080e660:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e664:    f000bc92    ....    B.W      main ; 0x80ef8c
    WDG_SystemReset
;;;282    }
;;;283    /**
;;;284     * @brief  Enable Debug Monitor Function (include NVIC Enable and DWT configuration)
;;;285     * @param  none
;;;286     * @return none
;;;287     */
;;;288    
;;;289    APP_FLASH_TEXT_SECTION
;;;290    void debug_monitor_enable(void)
;;;291    {
;;;292        //DBG_DIRECT("debug_monitor_enable");
;;;293    
;;;294        //set debug monitor priority
;;;295        NVIC_SetPriority(DebugMonitor_IRQn, 3);
;;;296    
;;;297        //enable exception and monitor control register
;;;298        CoreDebug->DEMCR |= CoreDebug_DEMCR_MON_EN_Msk | CoreDebug_DEMCR_TRCENA_Msk;
;;;299    
;;;300        //set DWT compare registers (max 4 comparators)
;;;301        //watch_point_0_setting(0x1000180C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_WRITE);
;;;302        //watch_point_1_setting(0x10000004, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;303        //watch_point_2_setting(0x10000008, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;304        //watch_point_3_setting(0x1000000C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;305    
;;;306        //enable DWT control register
;;;307        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
;;;308    
;;;309        return;
;;;310    }
;;;311    
;;;312    APP_FLASH_TEXT_SECTION
;;;313    void ram_init(void)
;;;314    {
;;;315        //copy data on ro
;;;316        extern char Image$$RAM_DATA_ON$$RO$$Base[];
;;;317        extern char Load$$RAM_DATA_ON$$RO$$Base[];
;;;318        extern unsigned int Image$$RAM_DATA_ON$$RO$$Length;
;;;319    
;;;320        memcpy(Image$$RAM_DATA_ON$$RO$$Base,
;;;321               Load$$RAM_DATA_ON$$RO$$Base,
;;;322               (unsigned int)&Image$$RAM_DATA_ON$$RO$$Length);
;;;323    
;;;324        //copy data on rw
;;;325        extern char Image$$RAM_DATA_ON$$RW$$Base[];
;;;326        extern char Load$$RAM_DATA_ON$$RW$$Base[];
;;;327        extern unsigned int Image$$RAM_DATA_ON$$RW$$Length;
;;;328    
;;;329        memcpy(Image$$RAM_DATA_ON$$RW$$Base,
;;;330               Load$$RAM_DATA_ON$$RW$$Base,
;;;331               (unsigned int)&Image$$RAM_DATA_ON$$RW$$Length);
;;;332    
;;;333        //clear data on zi
;;;334        extern char Image$$RAM_DATA_ON$$ZI$$Base[];
;;;335        extern unsigned int Image$$RAM_DATA_ON$$ZI$$Length;
;;;336    
;;;337        memset(Image$$RAM_DATA_ON$$ZI$$Base,
;;;338               0,
;;;339               (unsigned int)&Image$$RAM_DATA_ON$$ZI$$Length);
;;;340    
;;;341        //copy cache ro
;;;342        extern char Image$$CACHE_DATA_ON$$RO$$Base[];
;;;343        extern char Load$$CACHE_DATA_ON$$RO$$Base[];
;;;344        extern unsigned int Image$$CACHE_DATA_ON$$RO$$Length;
;;;345    
;;;346        memcpy(Image$$CACHE_DATA_ON$$RO$$Base,
;;;347               Load$$CACHE_DATA_ON$$RO$$Base,
;;;348               (unsigned int)&Image$$CACHE_DATA_ON$$RO$$Length);
;;;349    }
;;;350    
;;;351    APP_FLASH_TEXT_SECTION
;;;352    void SystemInit(void)
;;;353    {
;;;354        //init pre_main and main functions
;;;355        extern void pre_main(void);
;;;356        app_pre_main = (APP_MAIN_FUNC)pre_main;
;;;357        app_main = (APP_MAIN_FUNC)common_main;
;;;358    
;;;359        /******** update otp here**********/
;;;360        //ram config
;;;361        OTP->appDataSize = APP_GLOBAL_SIZE;
;;;362        OTP->heapDataONSize = HEAP_DATA_ON_SIZE;
;;;363        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;364    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;365        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
;;;366    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;367        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;368    #else
;;;369        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;370    #endif
;;;371    
;;;372    
;;;373        //flash config
;;;374        /*config enable flash block proect depending on flash layout and flash id*/
;;;375    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;376        OTP->bp_enable = 1;
;;;377    #else
;;;378        OTP->bp_enable = 0;
;;;379    #endif
;;;380        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
;;;381    
;;;382    
;;;383        //os config
;;;384        /*config enable check task stack overflow*/
;;;385    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;386        OTP->checkForStackOverflow = 1;
;;;387    #else
;;;388        OTP->checkForStackOverflow = 0;
;;;389    #endif
;;;390    
;;;391    
;;;392        //platform config
;;;393        /*config enable platform assert*/
;;;394    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;395        OTP->enableASSERT = 1;
;;;396    #else
;;;397        OTP->enableASSERT = 0;
;;;398    #endif
;;;399    
;;;400        /*Print all log in log buffer before entering DLPS */
;;;401    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;402        OTP->printAllLogBeforeEnterDLPS = 1;
;;;403    #else
;;;404        OTP->printAllLogBeforeEnterDLPS = 0;
;;;405    #endif
;;;406    
;;;407        /*config enable log or not*/
;;;408    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;409        OTP->logDisable = 0;
;;;410    #else
;;;411        OTP->logDisable = 1;
;;;412    #endif
;;;413    
;;;414        /*config enable swd pinmux*/
;;;415    #if (SWD_PINMUX_ENABLE == 1)
;;;416        OTP->SWD_ENABLE = 1;
;;;417    #else
;;;418        OTP->SWD_ENABLE = 0;
;;;419    #endif
;;;420    
;;;421        /*config enable watch dog in rom*/
;;;422    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;423        OTP->wdgEnableInRom = 1;
;;;424    #else
;;;425        OTP->wdgEnableInRom = 0;
;;;426    #endif
;;;427    
;;;428        /*config watch dog mode in rom, defualt reset all*/
;;;429        OTP->wdgMode = ROM_WATCH_DOG_MODE;
;;;430    
;;;431    
;;;432        //app config
;;;433        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
;;;434        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
;;;435        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
;;;436        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
;;;437    
;;;438        /*config bt stack parameters in rom*/
;;;439    #ifdef BT_STACK_CONFIG_ENABLE
;;;440        bt_stack_config_init();
;;;441    #endif
;;;442    
;;;443    //add more otp config here
;;;444    }
;;;445    
;;;446    APP_FLASH_TEXT_SECTION
;;;447    void pre_main(void)
;;;448    {
;;;449        __disable_irq();
;;;450    
;;;451        ram_init();
;;;452    
;;;453        load_overlay(OVERLAY_SCENARIO_BOOT_ONCE);
;;;454    
;;;455        setlocale(LC_ALL, "C");
;;;456    
;;;457        BOOT_PRINT_ERROR2("SDK Ver: %s, Build Time: %s",
;;;458                          TRACE_STRING(VERSION_BUILD_STR),
;;;459                          TRACE_STRING(BUILDING_TIME));
;;;460    
;;;461        AppUpdateVectorTable();
;;;462    
;;;463        debug_monitor_enable();
;;;464    
;;;465        return;
;;;466    }
;;;467    /**
;;;468     * @brief  update vector table in app
;;;469     * @param  none
;;;470     * @return none
;;;471      */
;;;472    OVERLAY_SECTION_BOOT_ONCE
;;;473    static void AppUpdateVectorTable(void)
;;;474    {
;;;475        extern uint32_t Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;476        extern uint32_t Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;477        extern void Default_Handler(void);
;;;478        const char *SysException[] =
;;;479        {
;;;480            "InitialSP", "Reset", "NMI", "HardFault", "MemManage", "BusFault", "UsageFault", "Rsvd",
;;;481            "Rsvd", "Rsvd", "Rsvd", "SVC", "DebugMon", "Rsvd", "PendSV", "SysTick"
;;;482        };
;;;483        const char *ExtIrq[] =
;;;484        {
;;;485            "System", "WDG", "BTMAC", "TIM3", "TIM2", "Platform", "I2S0_TX", "I2S0_RX", "Timer4-7",
;;;486            "GPIO4", "GPIO5", "UART1", "UART0", "RTC", "SPI0", "SPI1", "I2C0", "I2C1", "ADC",
;;;487            "Peripheral", "GDMA0 Channel0", "GDMA0 Channel1", "GDMA0 Channel2", "GDMA0 Channel3",
;;;488            "GDMA0 Channel4", "GDMA0 Channel5", "GPIO_Group3", "GPIO_Group2", "IR", "GPIO_Group1",
;;;489            "GPIO_Group0", "UART2", "TIM4", "TIM5", "TIM6", "TIM7", "SPI_Flash", "Qdecode",
;;;490            "Keyscan", "SPI2W", "LPCOMP", "PTA_Mailbox", "SPORT1 TX", "SPORT1 RX", "LCD"
;;;491        };
;;;492    
;;;493        IRQ_Fun *pRamVector    = (IRQ_Fun *)VTOR_RAM_ADDR;
;;;494        IRQ_Fun *pAppVector    = (IRQ_Fun *)&Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;495        uint32_t AppVectorSize = (uint32_t)&Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;496        uint32_t i             = 0;
;;;497    
;;;498        if (SCB->VTOR != VTOR_RAM_ADDR)
;;;499        {
;;;500            RamVectorTableInit(VTOR_RAM_ADDR);
;;;501        }
;;;502    
;;;503        /* Update APP defined handlers */
;;;504        for (i = 0; i < AppVectorSize / 4; ++i)
;;;505        {
;;;506            if (i == 1) //skip reset_handler remap
;;;507            {
;;;508                continue;
;;;509            }
;;;510    
;;;511            if ((pAppVector[i] != Default_Handler) && (pAppVector[i] != 0))
;;;512            {
;;;513                if (i < System_VECTORn)
;;;514                {
;;;515                    OS_PRINT_WARN1("Warning! %s is updated by APP!", TRACE_STRING(SysException[i]));
;;;516                }
;;;517                else
;;;518                {
;;;519                    OS_PRINT_WARN1("Warning! ISR %s is updated by APP!",
;;;520                                   TRACE_STRING(ExtIrq[i - System_VECTORn]));
;;;521                }
;;;522    
;;;523                pRamVector[i] = pAppVector[i];
;;;524            }
;;;525        }
;;;526    
;;;527        __DMB();
;;;528        __DSB();
;;;529    }
;;;530    /**
;;;531     * @brief  GPIO Group3 Handler
;;;532     * @param  none
;;;533     * @return none
;;;534      */
;;;535    DATA_RAM_FUNCTION void GPIO_Group3_Handler(void)
;;;536    {
;;;537        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;538    
;;;539        //Check exact IRQ function
;;;540        if (GPIOIrqStatus & BIT3)
;;;541        {
;;;542            GPIO3_Handler();
;;;543        }
;;;544        if (GPIOIrqStatus & BIT7)
;;;545        {
;;;546            GPIO7_Handler();
;;;547        }
;;;548        if (GPIOIrqStatus & BIT11)
;;;549        {
;;;550            GPIO11_Handler();
;;;551        }
;;;552        if (GPIOIrqStatus & BIT15)
;;;553        {
;;;554            GPIO15_Handler();
;;;555        }
;;;556        if (GPIOIrqStatus & BIT19)
;;;557        {
;;;558            GPIO19_Handler();
;;;559        }
;;;560        if (GPIOIrqStatus & BIT23)
;;;561        {
;;;562            GPIO23_Handler();
;;;563        }
;;;564        if (GPIOIrqStatus & BIT27)
;;;565        {
;;;566            GPIO27_Handler();
;;;567        }
;;;568        if (GPIOIrqStatus & BIT31)
;;;569        {
;;;570            GPIO31_Handler();
;;;571        }
;;;572    }
;;;573    /**
;;;574     * @brief  GPIO Group2 Handler
;;;575     * @param  none
;;;576     * @return none
;;;577      */
;;;578    DATA_RAM_FUNCTION void GPIO_Group2_Handler(void)
;;;579    {
;;;580        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;581    
;;;582        //Check exact IRQ function
;;;583        if (GPIOIrqStatus & BIT2)
;;;584        {
;;;585            GPIO2_Handler();
;;;586        }
;;;587        if (GPIOIrqStatus & BIT6)
;;;588        {
;;;589            GPIO6_Handler();
;;;590        }
;;;591        if (GPIOIrqStatus & BIT10)
;;;592        {
;;;593            GPIO10_Handler();
;;;594        }
;;;595        if (GPIOIrqStatus & BIT14)
;;;596        {
;;;597            GPIO14_Handler();
;;;598        }
;;;599        if (GPIOIrqStatus & BIT18)
;;;600        {
;;;601            GPIO18_Handler();
;;;602        }
;;;603        if (GPIOIrqStatus & BIT22)
;;;604        {
;;;605            GPIO22_Handler();
;;;606        }
;;;607        if (GPIOIrqStatus & BIT26)
;;;608        {
;;;609            GPIO26_Handler();
;;;610        }
;;;611        if (GPIOIrqStatus & BIT30)
;;;612        {
;;;613            GPIO30_Handler();
;;;614        }
;;;615    }
;;;616    /**
;;;617     * @brief  GPIO Group1 Handler
;;;618     * @param  none
;;;619     * @return none
;;;620      */
;;;621    DATA_RAM_FUNCTION void GPIO_Group1_Handler(void)
;;;622    {
;;;623        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;624    
;;;625        //Check exact IRQ function
;;;626        if (GPIOIrqStatus & BIT1)
;;;627        {
;;;628            GPIO1_Handler();
;;;629        }
;;;630        if (GPIOIrqStatus & BIT9)
;;;631        {
;;;632            GPIO9_Handler();
;;;633        }
;;;634        if (GPIOIrqStatus & BIT13)
;;;635        {
;;;636            GPIO13_Handler();
;;;637        }
;;;638        if (GPIOIrqStatus & BIT17)
;;;639        {
;;;640            GPIO17_Handler();
;;;641        }
;;;642        if (GPIOIrqStatus & BIT21)
;;;643        {
;;;644            GPIO21_Handler();
;;;645        }
;;;646        if (GPIOIrqStatus & BIT25)
;;;647        {
;;;648            GPIO25_Handler();
;;;649        }
;;;650        if (GPIOIrqStatus & BIT29)
;;;651        {
;;;652            GPIO29_Handler();
;;;653        }
;;;654    }
;;;655    /**
;;;656     * @brief  GPIO Group0 Handler
;;;657     * @param  none
;;;658     * @return none
;;;659      */
;;;660    DATA_RAM_FUNCTION void GPIO_Group0_Handler(void)
;;;661    {
;;;662        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;663    
;;;664        //Check exact IRQ function
;;;665        if (GPIOIrqStatus & BIT0)
;;;666        {
;;;667            GPIO0_Handler();
;;;668        }
;;;669        if (GPIOIrqStatus & BIT8)
;;;670        {
;;;671            GPIO8_Handler();
;;;672        }
;;;673        if (GPIOIrqStatus & BIT12)
;;;674        {
;;;675            GPIO12_Handler();
;;;676        }
;;;677        if (GPIOIrqStatus & BIT16)
;;;678        {
;;;679            GPIO16_Handler();
;;;680        }
;;;681        if (GPIOIrqStatus & BIT20)
;;;682        {
;;;683            GPIO20_Handler();
;;;684        }
;;;685        if (GPIOIrqStatus & BIT24)
;;;686        {
;;;687            GPIO24_Handler();
;;;688        }
;;;689        if (GPIOIrqStatus & BIT28)
;;;690        {
;;;691            GPIO28_Handler();
;;;692        }
;;;693    }
;;;694    
;;;695    void WDG_SystemReset(T_WDG_MODE wdg_mode, T_SW_RESET_REASON reset_reason)
;;;696    {
;;;697        uint32_t parm = wdg_mode | (reset_reason << 8);
        0x0080e668:    ea402101    @..!    ORR      r1,r0,r1,LSL #8
;;;698        SystemCall(SYSTEM_CALL_WDG_RESET, parm);
        0x0080e66c:    2001        .       MOVS     r0,#1
        0x0080e66e:    f7f89e17    ....    B        SystemCall ; 0x72a0
    flash_try_high_speed
;;;699    }
;;;700    
;;;701    /**
;;;702     * @brief  flash try to switch to high speed bit mode
;;;703     * @note  switch back to 1 bit mode, if flash switch to high speed bit mode fail
;;;704     * @param  bit_mode config bit mode @ref T_FLASH_MODE
;;;705     * @retval 0 fail
;;;706     * @retval 1 success
;;;707      */
;;;708    uint32_t flash_try_high_speed(T_FLASH_MODE bit_mode)
;;;709    {
        0x0080e672:    b510        ..      PUSH     {r4,lr}
;;;710        uint32_t result = 0;
;;;711        OTP->bit_mode = bit_mode;
        0x0080e674:    f44f1400    O...    MOV      r4,#0x200000
        0x0080e678:    2200        ."      MOVS     r2,#0
        0x0080e67a:    f894134c    ..L.    LDRB     r1,[r4,#0x34c]
        0x0080e67e:    f3600101    `...    BFI      r1,r0,#0,#2
        0x0080e682:    f884134c    ..L.    STRB     r1,[r4,#0x34c]
;;;712        result = flash_ioctl(flash_ioctrl_try_high_speed, 0, 0);
        0x0080e686:    4611        .F      MOV      r1,r2
        0x0080e688:    f2450002    E...    MOV      r0,#0x5002
        0x0080e68c:    f7fddcf1    ....    BL       flash_ioctl ; 0xc072
;;;713        //if try fail, set back OTP->bit_mode to one bit mode
;;;714        if (!result)
        0x0080e690:    2800        .(      CMP      r0,#0
        0x0080e692:    d105        ..      BNE      0x80e6a0 ; flash_try_high_speed + 46
;;;715        {
;;;716            OTP->bit_mode = FLASH_MODE_1BIT;
        0x0080e694:    f894134c    ..L.    LDRB     r1,[r4,#0x34c]
        0x0080e698:    f0210103    !...    BIC      r1,r1,#3
        0x0080e69c:    f884134c    ..L.    STRB     r1,[r4,#0x34c]
;;;717        }
;;;718        return result;
;;;719    }
        0x0080e6a0:    bd10        ..      POP      {r4,pc}
    app_cb0_wdg_reset
        0x0080e6a2:    4a11        .J      LDR      r2,[pc,#68] ; [0x80e6e8] = 0x207f28
        0x0080e6a4:    6812        .h      LDR      r2,[r2,#0]
;;;720    
;;;721    void app_cb0_wdg_reset(T_WDG_MODE wdg_mode, T_SW_RESET_REASON reset_reason)
;;;722    {
        0x0080e6a6:    2a00        .*      CMP      r2,#0
        0x0080e6a8:    d000        ..      BEQ      0x80e6ac ; app_cb0_wdg_reset + 10
;;;723        if (user_wdg_cb)
;;;724        {
;;;725            if (user_wdg_cb(wdg_mode, reset_reason))
        0x0080e6aa:    4710        .G      BX       r2
;;;726            {
;;;727                return;
;;;728            }
;;;729        }
;;;730    
;;;731        //do something necessary before watch dog reset
;;;732    }
        0x0080e6ac:    4770        pG      BX       lr
    $d
        0x0080e6ae:    0000        ..      DCW    0
        0x0080e6b0:    53206e49    In S    DCD    1394634313
        0x0080e6b4:    4d20436f    oC M    DCD    1293960047
        0x0080e6b8:    0065646f    ode.    DCD    6644847
        0x0080e6bc:    4e524157    WARN    DCD    1314013527
        0x0080e6c0:    3a474e49    ING:    DCD    977751625
        0x0080e6c4:    206e4920     In     DCD    544098592
        0x0080e6c8:    20494348    HCI     DCD    541672264
        0x0080e6cc:    65646f4d    Mode    DCD    1701080909
        0x0080e6d0:    6977202c    , wi    DCD    1769414700
        0x0080e6d4:    6e206c6c    ll n    DCD    1847618668
        0x0080e6d8:    7220746f    ot r    DCD    1914729583
        0x0080e6dc:    41206e75    un A    DCD    1092644469
        0x0080e6e0:    54205050    PP T    DCD    1411403856
        0x0080e6e4:    006b7361    ask.    DCD    7041889
        0x0080e6e8:    00207f28    (. .    DCD    2129704
    $t
    .text
    app_send_msg_to_apptask
;;; ..\include\SDK\src\app\pxp\app_task.c
;;;75     {
        0x0080e6ec:    b57c        |.      PUSH     {r2-r6,lr}
;;;76         uint8_t event = EVENT_IO_TO_APP;
        0x0080e6ee:    2202        ."      MOVS     r2,#2
        0x0080e6f0:    f88d2004    ...     STRB     r2,[sp,#4]
;;;77     
;;;78         if (os_msg_send(io_queue_handle, p_msg, 0) == false)
        0x0080e6f4:    224e        N"      MOVS     r2,#0x4e
        0x0080e6f6:    4c38        8L      LDR      r4,[pc,#224] ; [0x80e7d8] = 0x207f2c
        0x0080e6f8:    9200        ..      STR      r2,[sp,#0]
        0x0080e6fa:    4601        .F      MOV      r1,r0
        0x0080e6fc:    4b35        5K      LDR      r3,[pc,#212] ; [0x80e7d4] = 0x8109bc
        0x0080e6fe:    2200        ."      MOVS     r2,#0
        0x0080e700:    68a0        .h      LDR      r0,[r4,#8]
        0x0080e702:    f417f46f    ..o.    BL       os_msg_send_intern ; 0x25fe4
        0x0080e706:    4d35        5M      LDR      r5,[pc,#212] ; [0x80e7dc] = 0x21103000
        0x0080e708:    b150        P.      CBZ      r0,0x80e720 ; app_send_msg_to_apptask + 52
        0x0080e70a:    2053        S       MOVS     r0,#0x53
        0x0080e70c:    9000        ..      STR      r0,[sp,#0]
        0x0080e70e:    4b31        1K      LDR      r3,[pc,#196] ; [0x80e7d4] = 0x8109bc
        0x0080e710:    2200        ."      MOVS     r2,#0
        0x0080e712:    a901        ..      ADD      r1,sp,#4
        0x0080e714:    6860        `h      LDR      r0,[r4,#4]
        0x0080e716:    f417f465    ..e.    BL       os_msg_send_intern ; 0x25fe4
        0x0080e71a:    b120         .      CBZ      r0,0x80e726 ; app_send_msg_to_apptask + 58
        0x0080e71c:    2001        .       MOVS     r0,#1
        0x0080e71e:    bd7c        |.      POP      {r2-r6,pc}
;;;79         {
;;;80             APP_PRINT_ERROR0("send_io_msg_to_app fail");
        0x0080e720:    2200        ."      MOVS     r2,#0
        0x0080e722:    492f        /I      LDR      r1,[pc,#188] ; [0x80e7e0] = 0x880006c
;;;81             return false;
        0x0080e724:    e002        ..      B        0x80e72c ; app_send_msg_to_apptask + 64
;;;82         }
;;;83         if (os_msg_send(evt_queue_handle, &event, 0) == false)
;;;84         {
;;;85             APP_PRINT_ERROR0("send_evt_msg_to_app fail");
        0x0080e726:    492e        .I      LDR      r1,[pc,#184] ; [0x80e7e0] = 0x880006c
        0x0080e728:    2200        ."      MOVS     r2,#0
        0x0080e72a:    311c        .1      ADDS     r1,r1,#0x1c
        0x0080e72c:    4628        (F      MOV      r0,r5
        0x0080e72e:    f7f9d996    ....    BL       log_buffer ; 0x7a5e
;;;86             return false;
        0x0080e732:    2000        .       MOVS     r0,#0
;;;87         }
;;;88         return true;
;;;89     }
        0x0080e734:    bd7c        |.      POP      {r2-r6,pc}
    app_main_task
;;;90     /**
;;;91      * @brief  Initialize App task
;;;92      * @return void
;;;93      */
;;;94     void app_task_init()
;;;95     {
;;;96         os_task_create(&app_task_handle, "app", app_main_task, 0, APP_TASK_STACK_SIZE,
;;;97                        APP_TASK_PRIORITY);
;;;98     }
;;;99     
;;;100    /**
;;;101     * @brief        App task to handle events & messages
;;;102     * @param[in]    p_params    Parameters sending to the task
;;;103     * @return       void
;;;104     */
;;;105    void driver_init(void);
;;;106    void app_main_task(void *p_param)
;;;107    {
        0x0080e736:    b51f        ..      PUSH     {r0-r4,lr}
;;;108        uint8_t event;
;;;109    
;;;110        os_msg_queue_create(&io_queue_handle, MAX_NUMBER_OF_IO_MESSAGE, sizeof(T_IO_MSG));
        0x0080e738:    206e        n       MOVS     r0,#0x6e
        0x0080e73a:    9000        ..      STR      r0,[sp,#0]
        0x0080e73c:    4b25        %K      LDR      r3,[pc,#148] ; [0x80e7d4] = 0x8109bc
        0x0080e73e:    4826        &H      LDR      r0,[pc,#152] ; [0x80e7d8] = 0x207f2c
        0x0080e740:    3318        .3      ADDS     r3,r3,#0x18
        0x0080e742:    2208        ."      MOVS     r2,#8
        0x0080e744:    2120         !      MOVS     r1,#0x20
        0x0080e746:    3008        .0      ADDS     r0,r0,#8
        0x0080e748:    f417f3d4    ....    BL       os_msg_queue_create_intern ; 0x25ef4
;;;111        os_msg_queue_create(&evt_queue_handle, MAX_NUMBER_OF_EVENT_MESSAGE, sizeof(uint8_t));
        0x0080e74c:    206f        o       MOVS     r0,#0x6f
        0x0080e74e:    9000        ..      STR      r0,[sp,#0]
        0x0080e750:    4b20         K      LDR      r3,[pc,#128] ; [0x80e7d4] = 0x8109bc
        0x0080e752:    4821        !H      LDR      r0,[pc,#132] ; [0x80e7d8] = 0x207f2c
        0x0080e754:    3318        .3      ADDS     r3,r3,#0x18
        0x0080e756:    2201        ."      MOVS     r2,#1
        0x0080e758:    2140        @!      MOVS     r1,#0x40
        0x0080e75a:    1d00        ..      ADDS     r0,r0,#4
        0x0080e75c:    f417f3ca    ....    BL       os_msg_queue_create_intern ; 0x25ef4
;;;112    
;;;113        gap_start_bt_stack(evt_queue_handle, io_queue_handle, MAX_NUMBER_OF_GAP_MESSAGE);
        0x0080e760:    4c1d        .L      LDR      r4,[pc,#116] ; [0x80e7d8] = 0x207f2c
        0x0080e762:    2220         "      MOVS     r2,#0x20
        0x0080e764:    e9d40101    ....    LDRD     r0,r1,[r4,#4]
        0x0080e768:    f43df37f    =...    BL       gap_start_bt_stack ; 0x4be6a
;;;114    
;;;115    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;116        extern void reset_watch_dog_timer_enable(void);
;;;117        reset_watch_dog_timer_enable();
;;;118    #endif
;;;119    
;;;120        //data_uart_init(evt_queue_handle, io_queue_handle);
;;;121        //user_cmd_init(&user_cmd_if, "scatternet");
;;;122        driver_init();
        0x0080e76c:    f000f86d    ..m.    BL       driver_init ; 0x80e84a
;;;123        while (true)
;;;124        {
;;;125            if (os_msg_recv(evt_queue_handle, &event, 0xFFFFFFFF) == true)
        0x0080e770:    257d        }%      MOVS     r5,#0x7d
        0x0080e772:    f04f37ff    O..7    MOV      r7,#0xffffffff
        0x0080e776:    2682        .&      MOVS     r6,#0x82
        0x0080e778:    4b16        .K      LDR      r3,[pc,#88] ; [0x80e7d4] = 0x8109bc
        0x0080e77a:    9500        ..      STR      r5,[sp,#0]
        0x0080e77c:    3318        .3      ADDS     r3,r3,#0x18
        0x0080e77e:    463a        :F      MOV      r2,r7
        0x0080e780:    a903        ..      ADD      r1,sp,#0xc
        0x0080e782:    6860        `h      LDR      r0,[r4,#4]
        0x0080e784:    f417f45e    ..^.    BL       os_msg_recv_intern ; 0x26044
        0x0080e788:    2800        .(      CMP      r0,#0
        0x0080e78a:    d0f5        ..      BEQ      0x80e778 ; app_main_task + 66
;;;126            {
;;;127                if (event == EVENT_IO_TO_APP)
        0x0080e78c:    f89d000c    ....    LDRB     r0,[sp,#0xc]
        0x0080e790:    2802        .(      CMP      r0,#2
        0x0080e792:    d002        ..      BEQ      0x80e79a ; app_main_task + 100
        0x0080e794:    f43df3d6    =...    BL       gap_handle_msg ; 0x4bf44
        0x0080e798:    e7ee        ..      B        0x80e778 ; app_main_task + 66
;;;128                {
;;;129                    T_IO_MSG io_msg;
;;;130                    if (os_msg_recv(io_queue_handle, &io_msg, 0) == true)
        0x0080e79a:    4b0e        .K      LDR      r3,[pc,#56] ; [0x80e7d4] = 0x8109bc
        0x0080e79c:    9600        ..      STR      r6,[sp,#0]
        0x0080e79e:    3318        .3      ADDS     r3,r3,#0x18
        0x0080e7a0:    2200        ."      MOVS     r2,#0
        0x0080e7a2:    a901        ..      ADD      r1,sp,#4
        0x0080e7a4:    68a0        .h      LDR      r0,[r4,#8]
        0x0080e7a6:    f417f44d    ..M.    BL       os_msg_recv_intern ; 0x26044
        0x0080e7aa:    2800        .(      CMP      r0,#0
        0x0080e7ac:    d0e4        ..      BEQ      0x80e778 ; app_main_task + 66
        0x0080e7ae:    e9dd0101    ....    LDRD     r0,r1,[sp,#4]
;;;131                    {
;;;132                        app_handle_io_msg(io_msg);
        0x0080e7b2:    f001fd3f    ..?.    BL       app_handle_io_msg ; 0x810234
        0x0080e7b6:    e7df        ..      B        0x80e778 ; app_main_task + 66
    app_task_init
;;; ..\include\SDK\src\app\pxp\app_task.c (95)
        0x0080e7b8:    b51c        ..      PUSH     {r2-r4,lr}
;;;96         os_task_create(&app_task_handle, "app", app_main_task, 0, APP_TASK_STACK_SIZE,
        0x0080e7ba:    2101        .!      MOVS     r1,#1
        0x0080e7bc:    f44f60c0    O..`    MOV      r0,#0x600
        0x0080e7c0:    2300        .#      MOVS     r3,#0
        0x0080e7c2:    f2af028d    ....    ADR      r2,{pc}-0x8b ; 0x80e737
        0x0080e7c6:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x0080e7ca:    a106        ..      ADR      r1,{pc}+0x1a ; 0x80e7e4
        0x0080e7cc:    4802        .H      LDR      r0,[pc,#8] ; [0x80e7d8] = 0x207f2c
        0x0080e7ce:    f418f0ff    ....    BL       os_task_create ; 0x269d0
;;;97                        APP_TASK_PRIORITY);
;;;98     }
        0x0080e7d2:    bd1c        ..      POP      {r2-r4,pc}
    $d
        0x0080e7d4:    008109bc    ....    DCD    8456636
        0x0080e7d8:    00207f2c    ,. .    DCD    2129708
        0x0080e7dc:    21103000    .0.!    DCD    554708992
        0x0080e7e0:    0880006c    l...    DCD    142606444
        0x0080e7e4:    00707061    app.    DCD    7368801
    $t
    .text
    PINMUX_Configuration
;;; ..\include\SDK\src\app\pxp\iohandle.c
;;;32     {
        0x0080e7e8:    b510        ..      PUSH     {r4,lr}
;;;33         Pinmux_Config(LED, DWGPIO);
        0x0080e7ea:    215a        Z!      MOVS     r1,#0x5a
        0x0080e7ec:    2001        .       MOVS     r0,#1
        0x0080e7ee:    f402f5c1    ....    BL       Pinmux_Config ; 0x11374
;;;34         Pinmux_Config(BEEP, DWGPIO);
        0x0080e7f2:    215a        Z!      MOVS     r1,#0x5a
        0x0080e7f4:    2002        .       MOVS     r0,#2
        0x0080e7f6:    f402f5bd    ....    BL       Pinmux_Config ; 0x11374
;;;35         Pinmux_Config(KEY, DWGPIO);
        0x0080e7fa:    215a        Z!      MOVS     r1,#0x5a
        0x0080e7fc:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e800:    2014        .       MOVS     r0,#0x14
        0x0080e802:    f402b5b7    ....    B        Pinmux_Config ; 0x11374
    PAD_Configuration
;;;36     
;;;37         return;
;;;38     }
;;;39     /**
;;;40      * @brief    pad configuration
;;;41      * @return   void
;;;42      */
;;;43     void PAD_Configuration(void)
;;;44     {
        0x0080e806:    b57c        |.      PUSH     {r2-r6,lr}
;;;45         /* Keypad pad config */
;;;46         Pad_Config(LED, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_ENABLE, PAD_OUT_LOW);
        0x0080e808:    2501        .%      MOVS     r5,#1
        0x0080e80a:    2400        .$      MOVS     r4,#0
        0x0080e80c:    e9cd5400    ...T    STRD     r5,r4,[sp,#0]
        0x0080e810:    4623        #F      MOV      r3,r4
        0x0080e812:    462a        *F      MOV      r2,r5
        0x0080e814:    4629        )F      MOV      r1,r5
        0x0080e816:    4628        (F      MOV      r0,r5
        0x0080e818:    f402f5e0    ....    BL       Pad_Config ; 0x113dc
;;;47         Pad_Config(BEEP, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_ENABLE, PAD_OUT_LOW);
        0x0080e81c:    e9cd5400    ...T    STRD     r5,r4,[sp,#0]
        0x0080e820:    2201        ."      MOVS     r2,#1
        0x0080e822:    2300        .#      MOVS     r3,#0
        0x0080e824:    4611        .F      MOV      r1,r2
        0x0080e826:    2002        .       MOVS     r0,#2
        0x0080e828:    f402f5d8    ....    BL       Pad_Config ; 0x113dc
;;;48         Pad_Config(KEY, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0080e82c:    2301        .#      MOVS     r3,#1
        0x0080e82e:    9400        ..      STR      r4,[sp,#0]
        0x0080e830:    461a        .F      MOV      r2,r3
        0x0080e832:    4619        .F      MOV      r1,r3
        0x0080e834:    2014        .       MOVS     r0,#0x14
        0x0080e836:    9401        ..      STR      r4,[sp,#4]
        0x0080e838:    f402f5d0    ....    BL       Pad_Config ; 0x113dc
;;;49         return;
;;;50     }
        0x0080e83c:    bd7c        |.      POP      {r2-r6,pc}
    RCC_Configuration
;;;51     /**
;;;52      * @brief    rcc configuration
;;;53      * @return   void
;;;54      */
;;;55     void RCC_Configuration(void)
;;;56     {
;;;57         RCC_PeriphClockCmd(APBPeriph_GPIO, APBPeriph_GPIO_CLOCK, ENABLE);
        0x0080e83e:    2201        ."      MOVS     r2,#1
        0x0080e840:    f04f5104    O..Q    MOV      r1,#0x21000000
        0x0080e844:    48f7        .H      LDR      r0,[pc,#988] ; [0x80ec24] = 0xc000100
        0x0080e846:    f000bd41    ..A.    B.W      RCC_PeriphClockCmd ; 0x80f2cc
    driver_init
;;;58         return;
;;;59     }
;;;60     
;;;61     /**
;;;62      * @brief    Contains the initialization of peripherals
;;;63      * @note     Both new architecture driver and legacy driver initialization method can be used
;;;64      * @return   void
;;;65      */
;;;66     void driver_init(void)
;;;67     {
        0x0080e84a:    b530        0.      PUSH     {r4,r5,lr}
        0x0080e84c:    b087        ..      SUB      sp,sp,#0x1c
;;;68         GPIO_InitTypeDef Gpio_Struct;
;;;69         GPIO_StructInit(&Gpio_Struct);
        0x0080e84e:    4668        hF      MOV      r0,sp
        0x0080e850:    f000fcdf    ....    BL       GPIO_StructInit ; 0x80f212
;;;70         Gpio_Struct.GPIO_Pin = GPIO_GetPin(LED) | GPIO_GetPin(BEEP);
        0x0080e854:    2001        .       MOVS     r0,#1
        0x0080e856:    f000fcfe    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080e85a:    4604        .F      MOV      r4,r0
        0x0080e85c:    2002        .       MOVS     r0,#2
        0x0080e85e:    f000fcfa    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080e862:    4304        .C      ORRS     r4,r4,r0
;;;71         Gpio_Struct.GPIO_Mode = GPIO_Mode_OUT;
        0x0080e864:    9400        ..      STR      r4,[sp,#0]
        0x0080e866:    2401        .$      MOVS     r4,#1
        0x0080e868:    f88d4004    ...@    STRB     r4,[sp,#4]
;;;72         GPIO_Init(&Gpio_Struct);
        0x0080e86c:    4668        hF      MOV      r0,sp
        0x0080e86e:    f000fc71    ..q.    BL       GPIO_Init ; 0x80f154
;;;73         GPIO_ResetBits(GPIO_GetPin(LED) | GPIO_GetPin(BEEP));
        0x0080e872:    2001        .       MOVS     r0,#1
        0x0080e874:    f000fcef    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080e878:    4605        .F      MOV      r5,r0
        0x0080e87a:    2002        .       MOVS     r0,#2
        0x0080e87c:    f000fceb    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080e880:    4328        (C      ORRS     r0,r0,r5
        0x0080e882:    f000fa1b    ....    BL       GPIO_ResetBits ; 0x80ecbc
;;;74     
;;;75         Gpio_Struct.GPIO_Pin = GPIO_GetPin(KEY);
        0x0080e886:    2014        .       MOVS     r0,#0x14
        0x0080e888:    f000fce5    ....    BL       GPIO_GetPin ; 0x80f256
;;;76         Gpio_Struct.GPIO_Mode = GPIO_Mode_IN;
        0x0080e88c:    9000        ..      STR      r0,[sp,#0]
        0x0080e88e:    2000        .       MOVS     r0,#0
        0x0080e890:    f88d0004    ....    STRB     r0,[sp,#4]
;;;77         Gpio_Struct.GPIO_ITCmd = ENABLE;
        0x0080e894:    f88d4005    ...@    STRB     r4,[sp,#5]
;;;78         Gpio_Struct.GPIO_ITTrigger = GPIO_INT_Trigger_EDGE;
        0x0080e898:    f88d4006    ...@    STRB     r4,[sp,#6]
;;;79         Gpio_Struct.GPIO_ITPolarity = GPIO_INT_POLARITY_ACTIVE_LOW;
        0x0080e89c:    f88d0007    ....    STRB     r0,[sp,#7]
        0x0080e8a0:    2014        .       MOVS     r0,#0x14
        0x0080e8a2:    9003        ..      STR      r0,[sp,#0xc]
;;;80         Gpio_Struct.GPIO_ITDebounce = GPIO_INT_DEBOUNCE_ENABLE;
        0x0080e8a4:    f88d4008    ...@    STRB     r4,[sp,#8]
;;;81         Gpio_Struct.GPIO_DebounceTime = 20;
;;;82         GPIO_Init(&Gpio_Struct);
        0x0080e8a8:    4668        hF      MOV      r0,sp
        0x0080e8aa:    f000fc53    ..S.    BL       GPIO_Init ; 0x80f154
;;;83     
;;;84         keystatus = GPIO_ReadInputDataBit(GPIO_GetPin(KEY));
        0x0080e8ae:    2014        .       MOVS     r0,#0x14
        0x0080e8b0:    f000fcd1    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080e8b4:    f000f9ed    ....    BL       GPIO_ReadInputDataBit ; 0x80ec92
        0x0080e8b8:    49db        .I      LDR      r1,[pc,#876] ; [0x80ec28] = 0x207f38
        0x0080e8ba:    7088        .p      STRB     r0,[r1,#2]
;;;85         GPIO_MaskINTConfig(GPIO_GetPin(KEY), DISABLE);
        0x0080e8bc:    2014        .       MOVS     r0,#0x14
        0x0080e8be:    f000fcca    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080e8c2:    2100        .!      MOVS     r1,#0
        0x0080e8c4:    f000fcbe    ....    BL       GPIO_MaskINTConfig ; 0x80f244
;;;86         GPIO_INTConfig(GPIO_GetPin(KEY), ENABLE);
        0x0080e8c8:    2014        .       MOVS     r0,#0x14
        0x0080e8ca:    f000fcc4    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080e8ce:    2101        .!      MOVS     r1,#1
        0x0080e8d0:    f000fcac    ....    BL       GPIO_INTConfig ; 0x80f22c
;;;87     
;;;88         NVIC_InitTypeDef NVIC_InitStruct;
;;;89         //NVIC_InitStruct.NVIC_IRQChannel = GPIO5_IRQn;
;;;90         NVIC_InitStruct.NVIC_IRQChannel = KEY_IRQ;//P2_4
        0x0080e8d4:    201e        .       MOVS     r0,#0x1e
        0x0080e8d6:    f88d0010    ....    STRB     r0,[sp,#0x10]
;;;91         NVIC_InitStruct.NVIC_IRQChannelPriority = 3;
        0x0080e8da:    2003        .       MOVS     r0,#3
;;;92         NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
        0x0080e8dc:    9005        ..      STR      r0,[sp,#0x14]
        0x0080e8de:    f88d4018    ...@    STRB     r4,[sp,#0x18]
;;;93         NVIC_Init(&NVIC_InitStruct);
        0x0080e8e2:    a804        ..      ADD      r0,sp,#0x10
        0x0080e8e4:    f402f4ec    ....    BL       NVIC_Init ; 0x112c0
;;;94     }
        0x0080e8e8:    b007        ..      ADD      sp,sp,#0x1c
        0x0080e8ea:    bd30        0.      POP      {r4,r5,pc}
    GPIO20_Handler
;;;95     
;;;96     typedef enum _KeyStatus
;;;97     {
;;;98         keyIdle = 0,
;;;99         keyShortPress,
;;;100        keyLongPress,
;;;101    } KeyStatus;
;;;102    KeyStatus gKeyStatus = keyIdle;
;;;103    
;;;104    
;;;105    //void GPIO_Group0_Handler(void)
;;;106    //{
;;;107    //     APP_PRINT_ERROR0("Enter GPIO_Group0_Handler!");
;;;108    //}
;;;109    /**
;;;110    * @brief    KEY_INT_Handle for key interrupt/GPIO20/P2_4
;;;111     * @note     Send short press event when read correct gpio bit port
;;;112     * @return   void
;;;113     */
;;;114    //void GPIO5_Handler(void)
;;;115    void KEY_INT_Handle(void)//P2_4
;;;116    {
        0x0080e8ec:    b57c        |.      PUSH     {r2-r6,lr}
;;;117    
;;;118        T_IO_MSG bee_io_msg;
;;;119        APP_PRINT_ERROR0("Enter GPIO5_Handler!");
        0x0080e8ee:    2200        ."      MOVS     r2,#0
        0x0080e8f0:    49ce        .I      LDR      r1,[pc,#824] ; [0x80ec2c] = 0x88000a4
        0x0080e8f2:    48cf        .H      LDR      r0,[pc,#828] ; [0x80ec30] = 0x21103000
        0x0080e8f4:    f7f9d8b3    ....    BL       log_buffer ; 0x7a5e
;;;120        GPIO_MaskINTConfig(GPIO_GetPin(KEY), ENABLE);
        0x0080e8f8:    2014        .       MOVS     r0,#0x14
        0x0080e8fa:    f000fcac    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080e8fe:    2101        .!      MOVS     r1,#1
        0x0080e900:    f000fca0    ....    BL       GPIO_MaskINTConfig ; 0x80f244
        0x0080e904:    2014        .       MOVS     r0,#0x14
        0x0080e906:    f000fca6    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080e90a:    f000f9c2    ....    BL       GPIO_ReadInputDataBit ; 0x80ec92
        0x0080e90e:    4cc6        .L      LDR      r4,[pc,#792] ; [0x80ec28] = 0x207f38
        0x0080e910:    4dc8        .M      LDR      r5,[pc,#800] ; [0x80ec34] = 0x40001000
        0x0080e912:    2601        .&      MOVS     r6,#1
;;;121        keystatus = GPIO_ReadInputDataBit(GPIO_GetPin(KEY));
        0x0080e914:    70a0        .p      STRB     r0,[r4,#2]
;;;122    
;;;123        if (keystatus == 0)
        0x0080e916:    b148        H.      CBZ      r0,0x80e92c ; GPIO20_Handler + 64
        0x0080e918:    2014        .       MOVS     r0,#0x14
        0x0080e91a:    f000fc9c    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080e91e:    6be9        .k      LDR      r1,[r5,#0x3c]
        0x0080e920:    4381        .C      BICS     r1,r1,r0
        0x0080e922:    63e9        .c      STR      r1,[r5,#0x3c]
        0x0080e924:    7860        `x      LDRB     r0,[r4,#1]
        0x0080e926:    2801        .(      CMP      r0,#1
        0x0080e928:    d00c        ..      BEQ      0x80e944 ; GPIO20_Handler + 88
        0x0080e92a:    e017        ..      B        0x80e95c ; GPIO20_Handler + 112
;;;124        {
;;;125            gKeyStatus = keyShortPress;
        0x0080e92c:    7066        fp      STRB     r6,[r4,#1]
;;;126            GPIO->INTPOLARITY |= GPIO_GetPin(KEY);
        0x0080e92e:    2014        .       MOVS     r0,#0x14
        0x0080e930:    f000fc91    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080e934:    6be9        .k      LDR      r1,[r5,#0x3c]
        0x0080e936:    4308        .C      ORRS     r0,r0,r1
        0x0080e938:    63e8        .c      STR      r0,[r5,#0x3c]
;;;127            os_timer_start(&xTimerLongPress);
        0x0080e93a:    48bb        .H      LDR      r0,[pc,#748] ; [0x80ec28] = 0x207f38
        0x0080e93c:    3014        .0      ADDS     r0,r0,#0x14
        0x0080e93e:    f418f16d    ..m.    BL       os_timer_start ; 0x26c1c
        0x0080e942:    e00d        ..      B        0x80e960 ; GPIO20_Handler + 116
;;;128        }
;;;129        else
;;;130        {
;;;131            GPIO->INTPOLARITY &= ~GPIO_GetPin(KEY);
;;;132            if (gKeyStatus == keyShortPress)
;;;133            {
;;;134                os_timer_stop(&xTimerLongPress);
        0x0080e944:    48b8        .H      LDR      r0,[pc,#736] ; [0x80ec28] = 0x207f38
        0x0080e946:    3014        .0      ADDS     r0,r0,#0x14
        0x0080e948:    f418f18c    ....    BL       os_timer_stop ; 0x26c64
;;;135                bee_io_msg.type = IO_MSG_TYPE_GPIO;
        0x0080e94c:    200b        .       MOVS     r0,#0xb
        0x0080e94e:    f8ad0000    ....    STRH     r0,[sp,#0]
;;;136                bee_io_msg.subtype = MSG_SHORT_PRESS;
        0x0080e952:    f8ad6002    ...`    STRH     r6,[sp,#2]
;;;137                app_send_msg_to_apptask(&bee_io_msg);
        0x0080e956:    4668        hF      MOV      r0,sp
        0x0080e958:    f7fffec8    ....    BL       app_send_msg_to_apptask ; 0x80e6ec
;;;138            }
;;;139            gKeyStatus = keyIdle;
        0x0080e95c:    2000        .       MOVS     r0,#0
        0x0080e95e:    7060        `p      STRB     r0,[r4,#1]
;;;140        }
;;;141        GPIO_ClearINTPendingBit(GPIO_GetPin(KEY));
        0x0080e960:    2014        .       MOVS     r0,#0x14
        0x0080e962:    f000fc78    ..x.    BL       GPIO_GetPin ; 0x80f256
        0x0080e966:    f000fc6a    ..j.    BL       GPIO_ClearINTPendingBit ; 0x80f23e
;;;142        GPIO_MaskINTConfig(GPIO_GetPin(KEY), DISABLE);
        0x0080e96a:    2014        .       MOVS     r0,#0x14
        0x0080e96c:    f000fc73    ..s.    BL       GPIO_GetPin ; 0x80f256
        0x0080e970:    2100        .!      MOVS     r1,#0
        0x0080e972:    f000fc67    ..g.    BL       GPIO_MaskINTConfig ; 0x80f244
;;;143    }
        0x0080e976:    bd7c        |.      POP      {r2-r6,pc}
    StopPxpIO
;;;144    
;;;145    /**
;;;146     * @brief    Pxp_HandleButtonEvent for key io event
;;;147     * @note     Event for Gpio interrupt and long press timer.
;;;148     * @param[in] io_msg
;;;149     * @return   void
;;;150     */
;;;151    void Pxp_HandleButtonEvent(T_IO_MSG io_msg)
;;;152    {
;;;153        uint8_t value_to_send;
;;;154        uint8_t keytype = io_msg.subtype ;
;;;155        if (keytype == MSG_SHORT_PRESS)
;;;156        {
;;;157            APP_PRINT_ERROR0("MSG_SHORT_PRESS");
;;;158            switch (gPxpState)
;;;159            {
;;;160            case PxpStateIdle:
;;;161                if (gIoState == IoStateIdle)
;;;162                {
;;;163                    StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK,
;;;164                               1); /*low period 0.9s, high period 0.1s,  led blink,  1times(cnt)*/
;;;165                }
;;;166                break;
;;;167            case PxpStateAdv:
;;;168                if (gIoState == IoStateLlsAlert)
;;;169                {
;;;170                    gActCnt = 0;
;;;171                    allowedPxpEnterDlps = true;
;;;172                    os_timer_stop(&xTimerPxpIO);
;;;173                    gIoState = IoStateIdle;
;;;174                }
;;;175                break;
;;;176            case PxpStateLink:
;;;177                if (gIoState == IoStateImmAlert)
;;;178                {
;;;179                    gActCnt = 0;
;;;180                    allowedPxpEnterDlps = true;
;;;181                    os_timer_stop(&xTimerPxpIO);
;;;182                    gIoState = IoStateIdle;
;;;183                }
;;;184                else if (gIoState == IoStateIdle)
;;;185                {
;;;186                    value_to_send = 1;
;;;187                    server_send_data(0, kns_srv_id, KNS_KEY_VALUE_INDEX, \
;;;188                                     &value_to_send, sizeof(uint8_t), GATT_PDU_TYPE_NOTIFICATION);
;;;189                }
;;;190                else
;;;191                {
;;;192                    APP_PRINT_ERROR0("ERROR IO STATUS");//error status
;;;193                }
;;;194                break;
;;;195            default:
;;;196                break;
;;;197            }
;;;198        }
;;;199        else if (keytype == MSG_LONG_PRESS)
;;;200        {
;;;201            APP_PRINT_ERROR0("MSG_LONG_PRESS");
;;;202            switch (gPxpState)
;;;203            {
;;;204            case PxpStateIdle:
;;;205                if (gPowerFlg == false)
;;;206                {
;;;207                    gPowerFlg = true;
;;;208                    le_adv_start();
;;;209                }
;;;210                else
;;;211                {
;;;212                    APP_PRINT_ERROR0("ERROR POWER STATUS");//error status
;;;213                }
;;;214                break;
;;;215            case PxpStateAdv:
;;;216                if (gPowerFlg == true)
;;;217                {
;;;218                    gPowerFlg = false;
;;;219                    if (gIoState != IoStateIdle)
;;;220                    {
;;;221                        gIoState = IoStateIdle;
;;;222                        StopPxpIO();
;;;223                    }
;;;224                    le_adv_stop();
;;;225                }
;;;226                else
;;;227                {
;;;228                    APP_PRINT_ERROR0("ERROR POWER STATUS");//error status
;;;229                }
;;;230                break;
;;;231            case PxpStateLink:
;;;232                if (gPowerFlg == true)
;;;233                {
;;;234                    gPowerFlg = false;
;;;235                    if (gIoState != IoStateIdle)
;;;236                    {
;;;237                        gIoState = IoStateIdle;
;;;238                        StopPxpIO();
;;;239                    }
;;;240                    le_disconnect(0);
;;;241                }
;;;242                else
;;;243                {
;;;244                    APP_PRINT_ERROR0("ERROR POWER STATUS");//error status
;;;245                }
;;;246                break;
;;;247            default:
;;;248                break;
;;;249            }
;;;250        }
;;;251        else
;;;252        {
;;;253            //nothing to do
;;;254        }
;;;255    }
;;;256    
;;;257    /**
;;;258     * @brief    StartPxpIO for led blink and beep
;;;259     * @note     Set parameter and start swtimer xTimerPxpIO
;;;260     * @param[in] lowPeroid
;;;261     * @param[in] HighPeroid
;;;262     * @param[in] mode
;;;263     * @param[in] cnt
;;;264     * @return   void
;;;265     */
;;;266    void StartPxpIO(uint32_t lowPeroid, uint32_t HighPeroid, uint8_t mode, uint32_t cnt)
;;;267    {
;;;268        xPeriodLow = lowPeroid;
;;;269        xPeriodHigh = HighPeroid;
;;;270        gIoMode = mode;
;;;271        gActCnt = cnt;
;;;272        if (gIoMode)
;;;273        {
;;;274            if (gIoMode & 0x1)
;;;275            {
;;;276                GPIO_SetBits(GPIO_GetPin(LED));
;;;277            }
;;;278            if (gIoMode & 0x2)
;;;279            {
;;;280                GPIO_SetBits(GPIO_GetPin(BEEP));
;;;281            }
;;;282            allowedPxpEnterDlps = false;
;;;283            os_timer_restart(&xTimerPxpIO, HighPeroid);
;;;284        }
;;;285    }
;;;286    /**
;;;287     * @brief    StopPxpIO
;;;288     * @note     Stop pxp io action
;;;289     * @return   void
;;;290     */
;;;291    void StopPxpIO()
;;;292    {
;;;293        allowedPxpEnterDlps = true;
        0x0080e978:    49af        .I      LDR      r1,[pc,#700] ; [0x80ec38] = 0x207e5c
;;; ..\include\SDK\src\app\pxp\iohandle.c (292)
        0x0080e97a:    b510        ..      PUSH     {r4,lr}
;;;293        allowedPxpEnterDlps = true;
        0x0080e97c:    2001        .       MOVS     r0,#1
        0x0080e97e:    7008        .p      STRB     r0,[r1,#0]
;;;294        gActCnt = 0;
        0x0080e980:    49a9        .I      LDR      r1,[pc,#676] ; [0x80ec28] = 0x207f38
        0x0080e982:    2000        .       MOVS     r0,#0
;;;295        GPIO_ResetBits(GPIO_GetPin(LED));
        0x0080e984:    60c8        .`      STR      r0,[r1,#0xc]
        0x0080e986:    2001        .       MOVS     r0,#1
        0x0080e988:    f000fc65    ..e.    BL       GPIO_GetPin ; 0x80f256
        0x0080e98c:    f000f996    ....    BL       GPIO_ResetBits ; 0x80ecbc
;;;296        GPIO_ResetBits(GPIO_GetPin(BEEP));
        0x0080e990:    2002        .       MOVS     r0,#2
        0x0080e992:    f000fc60    ..`.    BL       GPIO_GetPin ; 0x80f256
        0x0080e996:    f000f991    ....    BL       GPIO_ResetBits ; 0x80ecbc
;;;297        os_timer_stop(&xTimerPxpIO);
        0x0080e99a:    48a3        .H      LDR      r0,[pc,#652] ; [0x80ec28] = 0x207f38
        0x0080e99c:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e9a0:    3010        .0      ADDS     r0,r0,#0x10
        0x0080e9a2:    f418b15f    .._.    B        os_timer_stop ; 0x26c64
    StartPxpIO
        0x0080e9a6:    b570        p.      PUSH     {r4-r6,lr}
        0x0080e9a8:    4c9f        .L      LDR      r4,[pc,#636] ; [0x80ec28] = 0x207f38
;;; ..\include\SDK\src\app\pxp\iohandle.c (267)
        0x0080e9aa:    460d        .F      MOV      r5,r1
        0x0080e9ac:    2a00        .*      CMP      r2,#0
        0x0080e9ae:    e9c40101    ....    STRD     r0,r1,[r4,#4]
        0x0080e9b2:    7022        "p      STRB     r2,[r4,#0]
        0x0080e9b4:    60e3        .`      STR      r3,[r4,#0xc]
        0x0080e9b6:    d018        ..      BEQ      0x80e9ea ; StartPxpIO + 68
;;;268        xPeriodLow = lowPeroid;
;;;269        xPeriodHigh = HighPeroid;
;;;270        gIoMode = mode;
;;;271        gActCnt = cnt;
;;;272        if (gIoMode)
;;;273        {
;;;274            if (gIoMode & 0x1)
        0x0080e9b8:    07d0        ..      LSLS     r0,r2,#31
        0x0080e9ba:    d004        ..      BEQ      0x80e9c6 ; StartPxpIO + 32
;;;275            {
;;;276                GPIO_SetBits(GPIO_GetPin(LED));
        0x0080e9bc:    2001        .       MOVS     r0,#1
        0x0080e9be:    f000fc4a    ..J.    BL       GPIO_GetPin ; 0x80f256
        0x0080e9c2:    f000f976    ..v.    BL       GPIO_SetBits ; 0x80ecb2
;;;277            }
;;;278            if (gIoMode & 0x2)
        0x0080e9c6:    7820         x      LDRB     r0,[r4,#0]
        0x0080e9c8:    0780        ..      LSLS     r0,r0,#30
        0x0080e9ca:    d504        ..      BPL      0x80e9d6 ; StartPxpIO + 48
;;;279            {
;;;280                GPIO_SetBits(GPIO_GetPin(BEEP));
        0x0080e9cc:    2002        .       MOVS     r0,#2
        0x0080e9ce:    f000fc42    ..B.    BL       GPIO_GetPin ; 0x80f256
        0x0080e9d2:    f000f96e    ..n.    BL       GPIO_SetBits ; 0x80ecb2
;;;281            }
;;;282            allowedPxpEnterDlps = false;
        0x0080e9d6:    4998        .I      LDR      r1,[pc,#608] ; [0x80ec38] = 0x207e5c
        0x0080e9d8:    2000        .       MOVS     r0,#0
        0x0080e9da:    7008        .p      STRB     r0,[r1,#0]
;;;283            os_timer_restart(&xTimerPxpIO, HighPeroid);
        0x0080e9dc:    4629        )F      MOV      r1,r5
        0x0080e9de:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080e9e2:    4891        .H      LDR      r0,[pc,#580] ; [0x80ec28] = 0x207f38
        0x0080e9e4:    3010        .0      ADDS     r0,r0,#0x10
        0x0080e9e6:    f418b12a    ..*.    B        os_timer_restart ; 0x26c3e
;;;284        }
;;;285    }
        0x0080e9ea:    bd70        p.      POP      {r4-r6,pc}
    Pxp_HandleButtonEvent
;;; ..\include\SDK\src\app\pxp\iohandle.c (152)
        0x0080e9ec:    e92d43fe    -..C    PUSH     {r1-r9,lr}
;;;153        uint8_t value_to_send;
;;;154        uint8_t keytype = io_msg.subtype ;
        0x0080e9f0:    f3c04007    ...@    UBFX     r0,r0,#16,#8
        0x0080e9f4:    2601        .&      MOVS     r6,#1
        0x0080e9f6:    4f91        .O      LDR      r7,[pc,#580] ; [0x80ec3c] = 0x2080d0
        0x0080e9f8:    4b8d        .K      LDR      r3,[pc,#564] ; [0x80ec30] = 0x21103000
        0x0080e9fa:    2500        .%      MOVS     r5,#0
        0x0080e9fc:    4c90        .L      LDR      r4,[pc,#576] ; [0x80ec40] = 0x2080d1
;;;155        if (keytype == MSG_SHORT_PRESS)
        0x0080e9fe:    2801        .(      CMP      r0,#1
        0x0080ea00:    d01d        ..      BEQ      0x80ea3e ; Pxp_HandleButtonEvent + 82
        0x0080ea02:    2803        .(      CMP      r0,#3
        0x0080ea04:    d119        ..      BNE      0x80ea3a ; Pxp_HandleButtonEvent + 78
        0x0080ea06:    4989        .I      LDR      r1,[pc,#548] ; [0x80ec2c] = 0x88000a4
        0x0080ea08:    2200        ."      MOVS     r2,#0
        0x0080ea0a:    3140        @1      ADDS     r1,r1,#0x40
        0x0080ea0c:    4698        .F      MOV      r8,r3
        0x0080ea0e:    4618        .F      MOV      r0,r3
        0x0080ea10:    f7f9d825    ..%.    BL       log_buffer ; 0x7a5e
        0x0080ea14:    7838        8x      LDRB     r0,[r7,#0]
        0x0080ea16:    498b        .I      LDR      r1,[pc,#556] ; [0x80ec44] = 0x2080d2
        0x0080ea18:    b398        ..      CBZ      r0,0x80ea82 ; Pxp_HandleButtonEvent + 150
        0x0080ea1a:    2801        .(      CMP      r0,#1
        0x0080ea1c:    d053        S.      BEQ      0x80eac6 ; Pxp_HandleButtonEvent + 218
        0x0080ea1e:    2802        .(      CMP      r0,#2
        0x0080ea20:    d10b        ..      BNE      0x80ea3a ; Pxp_HandleButtonEvent + 78
        0x0080ea22:    7808        .x      LDRB     r0,[r1,#0]
        0x0080ea24:    2800        .(      CMP      r0,#0
        0x0080ea26:    d05d        ].      BEQ      0x80eae4 ; Pxp_HandleButtonEvent + 248
        0x0080ea28:    700d        .p      STRB     r5,[r1,#0]
        0x0080ea2a:    7820         x      LDRB     r0,[r4,#0]
        0x0080ea2c:    b110        ..      CBZ      r0,0x80ea34 ; Pxp_HandleButtonEvent + 72
        0x0080ea2e:    7025        %p      STRB     r5,[r4,#0]
        0x0080ea30:    f7ffffa2    ....    BL       StopPxpIO ; 0x80e978
        0x0080ea34:    2000        .       MOVS     r0,#0
        0x0080ea36:    f43ff0f5    ?...    BL       le_disconnect ; 0x4dc24
        0x0080ea3a:    e8bd83fe    ....    POP      {r1-r9,pc}
;;;156        {
;;;157            APP_PRINT_ERROR0("MSG_SHORT_PRESS");
        0x0080ea3e:    497b        {I      LDR      r1,[pc,#492] ; [0x80ec2c] = 0x88000a4
        0x0080ea40:    2200        ."      MOVS     r2,#0
        0x0080ea42:    3118        .1      ADDS     r1,r1,#0x18
        0x0080ea44:    4698        .F      MOV      r8,r3
        0x0080ea46:    4618        .F      MOV      r0,r3
        0x0080ea48:    f7f9d809    ....    BL       log_buffer ; 0x7a5e
;;;158            switch (gPxpState)
        0x0080ea4c:    7838        8x      LDRB     r0,[r7,#0]
        0x0080ea4e:    b168        h.      CBZ      r0,0x80ea6c ; Pxp_HandleButtonEvent + 128
        0x0080ea50:    4975        uI      LDR      r1,[pc,#468] ; [0x80ec28] = 0x207f38
        0x0080ea52:    4a79        yJ      LDR      r2,[pc,#484] ; [0x80ec38] = 0x207e5c
        0x0080ea54:    2801        .(      CMP      r0,#1
        0x0080ea56:    d015        ..      BEQ      0x80ea84 ; Pxp_HandleButtonEvent + 152
        0x0080ea58:    2802        .(      CMP      r0,#2
        0x0080ea5a:    d1ee        ..      BNE      0x80ea3a ; Pxp_HandleButtonEvent + 78
        0x0080ea5c:    7820         x      LDRB     r0,[r4,#0]
        0x0080ea5e:    2802        .(      CMP      r0,#2
        0x0080ea60:    d013        ..      BEQ      0x80ea8a ; Pxp_HandleButtonEvent + 158
        0x0080ea62:    b1d0        ..      CBZ      r0,0x80ea9a ; Pxp_HandleButtonEvent + 174
        0x0080ea64:    4971        qI      LDR      r1,[pc,#452] ; [0x80ec2c] = 0x88000a4
        0x0080ea66:    2200        ."      MOVS     r2,#0
        0x0080ea68:    312c        ,1      ADDS     r1,r1,#0x2c
        0x0080ea6a:    e03e        >.      B        0x80eaea ; Pxp_HandleButtonEvent + 254
;;;159            {
;;;160            case PxpStateIdle:
;;;161                if (gIoState == IoStateIdle)
        0x0080ea6c:    7820         x      LDRB     r0,[r4,#0]
        0x0080ea6e:    2800        .(      CMP      r0,#0
        0x0080ea70:    d1e3        ..      BNE      0x80ea3a ; Pxp_HandleButtonEvent + 78
;;;162                {
;;;163                    StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK,
        0x0080ea72:    2301        .#      MOVS     r3,#1
        0x0080ea74:    461a        .F      MOV      r2,r3
        0x0080ea76:    2164        d!      MOVS     r1,#0x64
        0x0080ea78:    f44f7061    O.ap    MOV      r0,#0x384
        0x0080ea7c:    f7ffff93    ....    BL       StartPxpIO ; 0x80e9a6
        0x0080ea80:    e7db        ..      B        0x80ea3a ; Pxp_HandleButtonEvent + 78
        0x0080ea82:    e016        ..      B        0x80eab2 ; Pxp_HandleButtonEvent + 198
;;;164                               1); /*low period 0.9s, high period 0.1s,  led blink,  1times(cnt)*/
;;;165                }
;;;166                break;
;;;167            case PxpStateAdv:
;;;168                if (gIoState == IoStateLlsAlert)
        0x0080ea84:    7820         x      LDRB     r0,[r4,#0]
        0x0080ea86:    2803        .(      CMP      r0,#3
        0x0080ea88:    d1d7        ..      BNE      0x80ea3a ; Pxp_HandleButtonEvent + 78
        0x0080ea8a:    4867        gH      LDR      r0,[pc,#412] ; [0x80ec28] = 0x207f38
;;;169                {
;;;170                    gActCnt = 0;
;;;171                    allowedPxpEnterDlps = true;
;;;172                    os_timer_stop(&xTimerPxpIO);
;;;173                    gIoState = IoStateIdle;
;;;174                }
;;;175                break;
;;;176            case PxpStateLink:
;;;177                if (gIoState == IoStateImmAlert)
;;;178                {
;;;179                    gActCnt = 0;
;;;180                    allowedPxpEnterDlps = true;
        0x0080ea8c:    60cd        .`      STR      r5,[r1,#0xc]
        0x0080ea8e:    7016        .p      STRB     r6,[r2,#0]
;;;181                    os_timer_stop(&xTimerPxpIO);
        0x0080ea90:    3010        .0      ADDS     r0,r0,#0x10
        0x0080ea92:    f418f0e7    ....    BL       os_timer_stop ; 0x26c64
;;;182                    gIoState = IoStateIdle;
        0x0080ea96:    7025        %p      STRB     r5,[r4,#0]
        0x0080ea98:    e7cf        ..      B        0x80ea3a ; Pxp_HandleButtonEvent + 78
        0x0080ea9a:    486b        kH      LDR      r0,[pc,#428] ; [0x80ec48] = 0x2080d8
;;;183                }
;;;184                else if (gIoState == IoStateIdle)
;;;185                {
;;;186                    value_to_send = 1;
        0x0080ea9c:    f88d6008    ...`    STRB     r6,[sp,#8]
;;;187                    server_send_data(0, kns_srv_id, KNS_KEY_VALUE_INDEX, \
        0x0080eaa0:    9600        ..      STR      r6,[sp,#0]
        0x0080eaa2:    9601        ..      STR      r6,[sp,#4]
        0x0080eaa4:    7801        .x      LDRB     r1,[r0,#0]
        0x0080eaa6:    ab02        ..      ADD      r3,sp,#8
        0x0080eaa8:    2204        ."      MOVS     r2,#4
        0x0080eaaa:    2000        .       MOVS     r0,#0
        0x0080eaac:    f440f67a    @.z.    BL       server_send_data ; 0x4f7a4
        0x0080eab0:    e7c3        ..      B        0x80ea3a ; Pxp_HandleButtonEvent + 78
;;;188                                     &value_to_send, sizeof(uint8_t), GATT_PDU_TYPE_NOTIFICATION);
;;;189                }
;;;190                else
;;;191                {
;;;192                    APP_PRINT_ERROR0("ERROR IO STATUS");//error status
;;;193                }
;;;194                break;
;;;195            default:
;;;196                break;
;;;197            }
;;;198        }
;;;199        else if (keytype == MSG_LONG_PRESS)
;;;200        {
;;;201            APP_PRINT_ERROR0("MSG_LONG_PRESS");
;;;202            switch (gPxpState)
;;;203            {
;;;204            case PxpStateIdle:
;;;205                if (gPowerFlg == false)
        0x0080eab2:    7808        .x      LDRB     r0,[r1,#0]
        0x0080eab4:    b118        ..      CBZ      r0,0x80eabe ; Pxp_HandleButtonEvent + 210
        0x0080eab6:    495d        ]I      LDR      r1,[pc,#372] ; [0x80ec2c] = 0x88000a4
        0x0080eab8:    2200        ."      MOVS     r2,#0
        0x0080eaba:    3154        T1      ADDS     r1,r1,#0x54
        0x0080eabc:    e015        ..      B        0x80eaea ; Pxp_HandleButtonEvent + 254
;;;206                {
;;;207                    gPowerFlg = true;
        0x0080eabe:    700e        .p      STRB     r6,[r1,#0]
;;;208                    le_adv_start();
        0x0080eac0:    f443f301    C...    BL       le_adv_start ; 0x520c6
        0x0080eac4:    e7b9        ..      B        0x80ea3a ; Pxp_HandleButtonEvent + 78
;;;209                }
;;;210                else
;;;211                {
;;;212                    APP_PRINT_ERROR0("ERROR POWER STATUS");//error status
;;;213                }
;;;214                break;
;;;215            case PxpStateAdv:
;;;216                if (gPowerFlg == true)
        0x0080eac6:    7808        .x      LDRB     r0,[r1,#0]
        0x0080eac8:    b140        @.      CBZ      r0,0x80eadc ; Pxp_HandleButtonEvent + 240
;;;217                {
;;;218                    gPowerFlg = false;
        0x0080eaca:    700d        .p      STRB     r5,[r1,#0]
;;;219                    if (gIoState != IoStateIdle)
        0x0080eacc:    7820         x      LDRB     r0,[r4,#0]
        0x0080eace:    b110        ..      CBZ      r0,0x80ead6 ; Pxp_HandleButtonEvent + 234
;;;220                    {
;;;221                        gIoState = IoStateIdle;
        0x0080ead0:    7025        %p      STRB     r5,[r4,#0]
;;;222                        StopPxpIO();
        0x0080ead2:    f7ffff51    ..Q.    BL       StopPxpIO ; 0x80e978
;;;223                    }
;;;224                    le_adv_stop();
        0x0080ead6:    f443f358    C.X.    BL       le_adv_stop ; 0x5218a
        0x0080eada:    e7ae        ..      B        0x80ea3a ; Pxp_HandleButtonEvent + 78
;;;225                }
;;;226                else
;;;227                {
;;;228                    APP_PRINT_ERROR0("ERROR POWER STATUS");//error status
        0x0080eadc:    4953        SI      LDR      r1,[pc,#332] ; [0x80ec2c] = 0x88000a4
        0x0080eade:    2200        ."      MOVS     r2,#0
        0x0080eae0:    316c        l1      ADDS     r1,r1,#0x6c
        0x0080eae2:    e002        ..      B        0x80eaea ; Pxp_HandleButtonEvent + 254
;;;229                }
;;;230                break;
;;;231            case PxpStateLink:
;;;232                if (gPowerFlg == true)
;;;233                {
;;;234                    gPowerFlg = false;
;;;235                    if (gIoState != IoStateIdle)
;;;236                    {
;;;237                        gIoState = IoStateIdle;
;;;238                        StopPxpIO();
;;;239                    }
;;;240                    le_disconnect(0);
;;;241                }
;;;242                else
;;;243                {
;;;244                    APP_PRINT_ERROR0("ERROR POWER STATUS");//error status
        0x0080eae4:    4951        QI      LDR      r1,[pc,#324] ; [0x80ec2c] = 0x88000a4
        0x0080eae6:    2200        ."      MOVS     r2,#0
        0x0080eae8:    3184        .1      ADDS     r1,r1,#0x84
        0x0080eaea:    4640        @F      MOV      r0,r8
        0x0080eaec:    f7f8dfb7    ....    BL       log_buffer ; 0x7a5e
;;;245                }
;;;246                break;
;;;247            default:
;;;248                break;
;;;249            }
;;;250        }
;;;251        else
;;;252        {
;;;253            //nothing to do
;;;254        }
;;;255    }
        0x0080eaf0:    e7a3        ..      B        0x80ea3a ; Pxp_HandleButtonEvent + 78
    vTimerPxpIOCallback
;;;256    
;;;257    /**
;;;258     * @brief    StartPxpIO for led blink and beep
;;;259     * @note     Set parameter and start swtimer xTimerPxpIO
;;;260     * @param[in] lowPeroid
;;;261     * @param[in] HighPeroid
;;;262     * @param[in] mode
;;;263     * @param[in] cnt
;;;264     * @return   void
;;;265     */
;;;266    void StartPxpIO(uint32_t lowPeroid, uint32_t HighPeroid, uint8_t mode, uint32_t cnt)
;;;267    {
;;;268        xPeriodLow = lowPeroid;
;;;269        xPeriodHigh = HighPeroid;
;;;270        gIoMode = mode;
;;;271        gActCnt = cnt;
;;;272        if (gIoMode)
;;;273        {
;;;274            if (gIoMode & 0x1)
;;;275            {
;;;276                GPIO_SetBits(GPIO_GetPin(LED));
;;;277            }
;;;278            if (gIoMode & 0x2)
;;;279            {
;;;280                GPIO_SetBits(GPIO_GetPin(BEEP));
;;;281            }
;;;282            allowedPxpEnterDlps = false;
;;;283            os_timer_restart(&xTimerPxpIO, HighPeroid);
;;;284        }
;;;285    }
;;;286    /**
;;;287     * @brief    StopPxpIO
;;;288     * @note     Stop pxp io action
;;;289     * @return   void
;;;290     */
;;;291    void StopPxpIO()
;;;292    {
;;;293        allowedPxpEnterDlps = true;
;;;294        gActCnt = 0;
;;;295        GPIO_ResetBits(GPIO_GetPin(LED));
;;;296        GPIO_ResetBits(GPIO_GetPin(BEEP));
;;;297        os_timer_stop(&xTimerPxpIO);
;;;298    }
;;;299    
;;;300    /**
;;;301     * @brief    vTimerPxpIOCallback
;;;302     * @note     BEEP & LED act here
;;;303     * @param[in] pxTimer
;;;304     * @return   void
;;;305     */
;;;306    void vTimerPxpIOCallback(TimerHandle_t pxTimer)
;;;307    {
        0x0080eaf2:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0080eaf6:    4c4c        LL      LDR      r4,[pc,#304] ; [0x80ec28] = 0x207f38
        0x0080eaf8:    7820         x      LDRB     r0,[r4,#0]
        0x0080eafa:    07c1        ..      LSLS     r1,r0,#31
        0x0080eafc:    d001        ..      BEQ      0x80eb02 ; vTimerPxpIOCallback + 16
;;;308        uint8_t  status_value;
;;;309        uint32_t xNewPeriod;
;;;310        if (gIoMode & 0x1)
;;;311        {
;;;312            status_value = GPIO_ReadOutputDataBit(GPIO_GetPin(LED));
        0x0080eafe:    2001        .       MOVS     r0,#1
        0x0080eb00:    e002        ..      B        0x80eb08 ; vTimerPxpIOCallback + 22
;;;313        }
;;;314        else if (gIoMode & 0x2)
        0x0080eb02:    0780        ..      LSLS     r0,r0,#30
        0x0080eb04:    d51a        ..      BPL      0x80eb3c ; vTimerPxpIOCallback + 74
;;;315        {
;;;316            status_value = GPIO_ReadOutputDataBit(GPIO_GetPin(BEEP));
        0x0080eb06:    2002        .       MOVS     r0,#2
        0x0080eb08:    f000fba5    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080eb0c:    f000f8c9    ....    BL       GPIO_ReadOutputDataBit ; 0x80eca2
        0x0080eb10:    4d49        IM      LDR      r5,[pc,#292] ; [0x80ec38] = 0x207e5c
;;;317        }
;;;318        else
;;;319        {
;;;320            APP_PRINT_ERROR0("ERROR IO MODE");
;;;321            return;
;;;322        }
;;;323    
;;;324        if (status_value & 0x1)
        0x0080eb12:    07c0        ..      LSLS     r0,r0,#31
        0x0080eb14:    f04f0600    O...    MOV      r6,#0
        0x0080eb18:    d018        ..      BEQ      0x80eb4c ; vTimerPxpIOCallback + 90
;;;325        {
;;;326            xNewPeriod = xPeriodLow;
;;;327            GPIO_ResetBits(GPIO_GetPin(LED));
        0x0080eb1a:    2001        .       MOVS     r0,#1
        0x0080eb1c:    6867        gh      LDR      r7,[r4,#4]
        0x0080eb1e:    f000fb9a    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080eb22:    f000f8cb    ....    BL       GPIO_ResetBits ; 0x80ecbc
;;;328            GPIO_ResetBits(GPIO_GetPin(BEEP));
        0x0080eb26:    2002        .       MOVS     r0,#2
        0x0080eb28:    f000fb95    ....    BL       GPIO_GetPin ; 0x80f256
        0x0080eb2c:    f000f8c6    ....    BL       GPIO_ResetBits ; 0x80ecbc
;;;329            allowedPxpEnterDlps = true;
        0x0080eb30:    2001        .       MOVS     r0,#1
        0x0080eb32:    7028        (p      STRB     r0,[r5,#0]
;;;330            gActCnt--;
        0x0080eb34:    68e0        .h      LDR      r0,[r4,#0xc]
        0x0080eb36:    1e40        @.      SUBS     r0,r0,#1
        0x0080eb38:    60e0        .`      STR      r0,[r4,#0xc]
        0x0080eb3a:    e01a        ..      B        0x80eb72 ; vTimerPxpIOCallback + 128
        0x0080eb3c:    e8bd41f0    ...A    POP      {r4-r8,lr}
        0x0080eb40:    493a        :I      LDR      r1,[pc,#232] ; [0x80ec2c] = 0x88000a4
        0x0080eb42:    2200        ."      MOVS     r2,#0
        0x0080eb44:    319c        .1      ADDS     r1,r1,#0x9c
        0x0080eb46:    483a        :H      LDR      r0,[pc,#232] ; [0x80ec30] = 0x21103000
        0x0080eb48:    f7f89f89    ....    B        log_buffer ; 0x7a5e
;;;331        }
;;;332        else
;;;333        {
;;;334            xNewPeriod = xPeriodHigh;
;;;335            if (gIoMode & 0x1)
        0x0080eb4c:    7820         x      LDRB     r0,[r4,#0]
        0x0080eb4e:    68a7        .h      LDR      r7,[r4,#8]
        0x0080eb50:    07c0        ..      LSLS     r0,r0,#31
        0x0080eb52:    d005        ..      BEQ      0x80eb60 ; vTimerPxpIOCallback + 110
;;;336            {
;;;337                GPIO_SetBits(GPIO_GetPin(LED));
        0x0080eb54:    2001        .       MOVS     r0,#1
        0x0080eb56:    f000fb7e    ..~.    BL       GPIO_GetPin ; 0x80f256
        0x0080eb5a:    f000f8aa    ....    BL       GPIO_SetBits ; 0x80ecb2
;;;338                allowedPxpEnterDlps = false;
        0x0080eb5e:    702e        .p      STRB     r6,[r5,#0]
;;;339            }
;;;340            if (gIoMode & 0x2)
        0x0080eb60:    7820         x      LDRB     r0,[r4,#0]
        0x0080eb62:    0780        ..      LSLS     r0,r0,#30
        0x0080eb64:    d505        ..      BPL      0x80eb72 ; vTimerPxpIOCallback + 128
;;;341            {
;;;342                GPIO_SetBits(GPIO_GetPin(BEEP));
        0x0080eb66:    2002        .       MOVS     r0,#2
        0x0080eb68:    f000fb75    ..u.    BL       GPIO_GetPin ; 0x80f256
        0x0080eb6c:    f000f8a1    ....    BL       GPIO_SetBits ; 0x80ecb2
;;;343                allowedPxpEnterDlps = false;
        0x0080eb70:    702e        .p      STRB     r6,[r5,#0]
;;;344            }
;;;345        }
;;;346        if (gActCnt)
        0x0080eb72:    68e0        .h      LDR      r0,[r4,#0xc]
        0x0080eb74:    b168        h.      CBZ      r0,0x80eb92 ; vTimerPxpIOCallback + 160
;;;347        {
;;;348            APP_PRINT_INFO0("xTimerPxpIO os_timer_restart.");
        0x0080eb76:    492d        -I      LDR      r1,[pc,#180] ; [0x80ec2c] = 0x88000a4
        0x0080eb78:    482d        -H      LDR      r0,[pc,#180] ; [0x80ec30] = 0x21103000
        0x0080eb7a:    2200        ."      MOVS     r2,#0
        0x0080eb7c:    31b0        .1      ADDS     r1,r1,#0xb0
        0x0080eb7e:    1c80        ..      ADDS     r0,r0,#2
        0x0080eb80:    f7f8df6d    ..m.    BL       log_buffer ; 0x7a5e
;;;349            os_timer_restart(&xTimerPxpIO, xNewPeriod);
        0x0080eb84:    4639        9F      MOV      r1,r7
        0x0080eb86:    e8bd41f0    ...A    POP      {r4-r8,lr}
        0x0080eb8a:    4827        'H      LDR      r0,[pc,#156] ; [0x80ec28] = 0x207f38
        0x0080eb8c:    3010        .0      ADDS     r0,r0,#0x10
        0x0080eb8e:    f418b056    ..V.    B        os_timer_restart ; 0x26c3e
;;;350        }
;;;351        else
;;;352        {
;;;353            gIoState = IoStateIdle;
        0x0080eb92:    482b        +H      LDR      r0,[pc,#172] ; [0x80ec40] = 0x2080d1
        0x0080eb94:    7006        .p      STRB     r6,[r0,#0]
;;;354        }
;;;355    }
        0x0080eb96:    e8bd81f0    ....    POP      {r4-r8,pc}
    vTimerLongPressCallback
;;;356    
;;;357    /**
;;;358     * @brief    vTimerLongPressCallback
;;;359     * @note     if key still pressed , send long press message
;;;360     * @param[in] pxTimer
;;;361     * @return   void
;;;362     */
;;;363    void vTimerLongPressCallback(TimerHandle_t pxTimer)
;;;364    {
        0x0080eb9a:    b51c        ..      PUSH     {r2-r4,lr}
;;;365        T_IO_MSG bee_io_msg;
;;;366    
;;;367        gKeyStatus = keyLongPress;
        0x0080eb9c:    4c22        "L      LDR      r4,[pc,#136] ; [0x80ec28] = 0x207f38
        0x0080eb9e:    2002        .       MOVS     r0,#2
        0x0080eba0:    7060        `p      STRB     r0,[r4,#1]
;;;368    
;;;369        keystatus = GPIO_ReadInputDataBit(GPIO_GetPin(KEY));
        0x0080eba2:    2014        .       MOVS     r0,#0x14
        0x0080eba4:    f000fb57    ..W.    BL       GPIO_GetPin ; 0x80f256
        0x0080eba8:    f000f873    ..s.    BL       GPIO_ReadInputDataBit ; 0x80ec92
        0x0080ebac:    70a0        .p      STRB     r0,[r4,#2]
;;;370        if (keystatus == 0)
        0x0080ebae:    2800        .(      CMP      r0,#0
        0x0080ebb0:    d108        ..      BNE      0x80ebc4 ; vTimerLongPressCallback + 42
;;;371        {
;;;372            bee_io_msg.type = IO_MSG_TYPE_GPIO;
        0x0080ebb2:    200b        .       MOVS     r0,#0xb
        0x0080ebb4:    f8ad0000    ....    STRH     r0,[sp,#0]
;;;373            bee_io_msg.subtype = MSG_LONG_PRESS;
        0x0080ebb8:    2003        .       MOVS     r0,#3
        0x0080ebba:    f8ad0002    ....    STRH     r0,[sp,#2]
;;;374            app_send_msg_to_apptask(&bee_io_msg);
        0x0080ebbe:    4668        hF      MOV      r0,sp
        0x0080ebc0:    f7fffd94    ....    BL       app_send_msg_to_apptask ; 0x80e6ec
;;;375        }
;;;376    }
        0x0080ebc4:    bd1c        ..      POP      {r2-r4,pc}
    swTimerInit
;;;377    /**
;;;378     * @brief    swTimerInit
;;;379     * @note     creat sw timer
;;;380     * @return   void
;;;381     */
;;;382    void swTimerInit()
;;;383    {
        0x0080ebc6:    b57c        |.      PUSH     {r2-r6,lr}
;;;384        bool retval ;
;;;385        /* xTimersRmcPairBtn is used to start bt pair process after timeout */
;;;386    
;;;387        retval = os_timer_create(&xTimerPxpIO, "xTimerPxpIO",  1, \
        0x0080ebc8:    f2af00d9    ....    ADR      r0,{pc}-0xd5 ; 0x80eaf3
        0x0080ebcc:    2500        .%      MOVS     r5,#0
        0x0080ebce:    e9cd5000    ...P    STRD     r5,r0,[sp,#0]
        0x0080ebd2:    4815        .H      LDR      r0,[pc,#84] ; [0x80ec28] = 0x207f38
        0x0080ebd4:    2364        d#      MOVS     r3,#0x64
        0x0080ebd6:    2201        ."      MOVS     r2,#1
        0x0080ebd8:    a11c        ..      ADR      r1,{pc}+0x74 ; 0x80ec4c
        0x0080ebda:    3010        .0      ADDS     r0,r0,#0x10
        0x0080ebdc:    f417f7fb    ....    BL       os_timer_create ; 0x26bd6
        0x0080ebe0:    4c1d        .L      LDR      r4,[pc,#116] ; [0x80ec58] = 0x21103002
        0x0080ebe2:    0003        ..      MOVS     r3,r0
;;;388                                 100/*0.1s*/, false, vTimerPxpIOCallback);
;;;389        if (!retval)
        0x0080ebe4:    d105        ..      BNE      0x80ebf2 ; swTimerInit + 44
;;;390        {
;;;391            APP_PRINT_INFO1("xTimerAlert retval is %d", retval);
        0x0080ebe6:    4911        .I      LDR      r1,[pc,#68] ; [0x80ec2c] = 0x88000a4
        0x0080ebe8:    2201        ."      MOVS     r2,#1
        0x0080ebea:    31d4        .1      ADDS     r1,r1,#0xd4
        0x0080ebec:    4620         F      MOV      r0,r4
        0x0080ebee:    f7f8df36    ..6.    BL       log_buffer ; 0x7a5e
;;;392        }
;;;393        retval = os_timer_create(&xTimerLongPress, "xTimerLongPress",  1, \
        0x0080ebf2:    f2af0059    ..Y.    ADR      r0,{pc}-0x57 ; 0x80eb9b
        0x0080ebf6:    e9cd5000    ...P    STRD     r5,r0,[sp,#0]
        0x0080ebfa:    480b        .H      LDR      r0,[pc,#44] ; [0x80ec28] = 0x207f38
        0x0080ebfc:    f44f637a    O.zc    MOV      r3,#0xfa0
        0x0080ec00:    2201        ."      MOVS     r2,#1
        0x0080ec02:    a116        ..      ADR      r1,{pc}+0x5a ; 0x80ec5c
        0x0080ec04:    3014        .0      ADDS     r0,r0,#0x14
        0x0080ec06:    f417f7e6    ....    BL       os_timer_create ; 0x26bd6
        0x0080ec0a:    0003        ..      MOVS     r3,r0
;;;394                                 4000/*4s*/, false, vTimerLongPressCallback);
;;;395        if (!retval)
        0x0080ec0c:    d108        ..      BNE      0x80ec20 ; swTimerInit + 90
;;;396        {
;;;397            APP_PRINT_INFO1("xTimerLongPress retval is %d", retval);
        0x0080ec0e:    b002        ..      ADD      sp,sp,#8
        0x0080ec10:    4620         F      MOV      r0,r4
        0x0080ec12:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080ec16:    4905        .I      LDR      r1,[pc,#20] ; [0x80ec2c] = 0x88000a4
        0x0080ec18:    2201        ."      MOVS     r2,#1
        0x0080ec1a:    31f0        .1      ADDS     r1,r1,#0xf0
        0x0080ec1c:    f7f89f1f    ....    B        log_buffer ; 0x7a5e
;;;398        }
;;;399    }
        0x0080ec20:    bd7c        |.      POP      {r2-r6,pc}
    $d
        0x0080ec22:    0000        ..      DCW    0
        0x0080ec24:    0c000100    ....    DCD    201326848
        0x0080ec28:    00207f38    8. .    DCD    2129720
        0x0080ec2c:    088000a4    ....    DCD    142606500
        0x0080ec30:    21103000    .0.!    DCD    554708992
        0x0080ec34:    40001000    ...@    DCD    1073745920
        0x0080ec38:    00207e5c    \~ .    DCD    2129500
        0x0080ec3c:    002080d0    .. .    DCD    2130128
        0x0080ec40:    002080d1    .. .    DCD    2130129
        0x0080ec44:    002080d2    .. .    DCD    2130130
        0x0080ec48:    002080d8    .. .    DCD    2130136
        0x0080ec4c:    6d695478    xTim    DCD    1835619448
        0x0080ec50:    78507265    erPx    DCD    2018538085
        0x0080ec54:    004f4970    pIO.    DCD    5196144
        0x0080ec58:    21103002    .0.!    DCD    554708994
        0x0080ec5c:    6d695478    xTim    DCD    1835619448
        0x0080ec60:    6f4c7265    erLo    DCD    1867280997
        0x0080ec64:    7250676e    ngPr    DCD    1917871982
        0x0080ec68:    00737365    ess.    DCD    7566181
    $t
    ChangeConnectionParameter
;;;400    /**
;;;401     * @brief change peripheral interval and latency function
;;;402     * @param interval - connection interval;
;;;403     * @param latency - peripheral connection latency;
;;;404     * @param timeout - supervision time out;
;;;405     * @return none
;;;406     */
;;;407    void ChangeConnectionParameter(uint16_t interval, uint16_t latency, uint16_t timeout)
;;;408    {
        0x0080ec6c:    b50e        ..      PUSH     {r1-r3,lr}
        0x0080ec6e:    460b        .F      MOV      r3,r1
;;;409        le_update_conn_param(0, interval, interval, latency, timeout / 10, interval * 2 - 2,
        0x0080ec70:    210a        .!      MOVS     r1,#0xa
        0x0080ec72:    fbb2f2f1    ....    UDIV     r2,r2,r1
        0x0080ec76:    f06f0101    o...    MVN      r1,#1
        0x0080ec7a:    eb010140    ..@.    ADD      r1,r1,r0,LSL #1
        0x0080ec7e:    b289        ..      UXTH     r1,r1
        0x0080ec80:    e9cd2100    ...!    STRD     r2,r1,[sp,#0]
        0x0080ec84:    4602        .F      MOV      r2,r0
        0x0080ec86:    9102        ..      STR      r1,[sp,#8]
        0x0080ec88:    4611        .F      MOV      r1,r2
        0x0080ec8a:    2000        .       MOVS     r0,#0
        0x0080ec8c:    f43ef7fd    >...    BL       le_update_conn_param ; 0x4dc8a
;;;410                             interval * 2 - 2);
;;;411    }
        0x0080ec90:    bd0e        ..      POP      {r1-r3,pc}
    GPIO_ReadInputDataBit
        0x0080ec92:    4a0d        .J      LDR      r2,[pc,#52] ; [0x80ecc8] = 0x40001000
;;; ..\include\SDK\inc\peripheral\rtl876x_gpio.h
;;;385    {
        0x0080ec94:    4601        .F      MOV      r1,r0
        0x0080ec96:    2000        .       MOVS     r0,#0
        0x0080ec98:    6d12        .m      LDR      r2,[r2,#0x50]
        0x0080ec9a:    420a        .B      TST      r2,r1
        0x0080ec9c:    d000        ..      BEQ      0x80eca0 ; GPIO_ReadInputDataBit + 14
;;;386        uint8_t bitstatus = RESET;
;;;387    
;;;388        /* Check the parameters */
;;;389        assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;390    
;;;391        if (GPIO->DATAIN & GPIO_Pin)
;;;392        {
;;;393            bitstatus = (uint8_t)SET;
        0x0080ec9e:    2001        .       MOVS     r0,#1
;;;394        }
;;;395    
;;;396        return bitstatus;
;;;397    }
        0x0080eca0:    4770        pG      BX       lr
    GPIO_ReadOutputDataBit
        0x0080eca2:    4a09        .J      LDR      r2,[pc,#36] ; [0x80ecc8] = 0x40001000
;;;398    
;;;399    /**
;;;400      * @brief  Reads value of all  GPIO input data port.
;;;401      * @param  None
;;;402      * @retval GPIO input data port value.
;;;403      */
;;;404    __STATIC_INLINE uint32_t GPIO_ReadInputData(void)
;;;405    {
;;;406        return GPIO->DATAIN;
;;;407    }
;;;408    
;;;409    /**
;;;410      * @brief  Reads the specified output port pin.
;;;411      * @param  GPIO_Pin:  specifies the port bit to read.
;;;412      *   This parameter can be GPIO_Pin_x where x can be (0..31).
;;;413      * @retval The output port pin value.
;;;414      */
;;;415    __STATIC_INLINE uint8_t GPIO_ReadOutputDataBit(uint32_t GPIO_Pin)
;;;416    {
        0x0080eca4:    4601        .F      MOV      r1,r0
        0x0080eca6:    2000        .       MOVS     r0,#0
        0x0080eca8:    6812        .h      LDR      r2,[r2,#0]
        0x0080ecaa:    420a        .B      TST      r2,r1
        0x0080ecac:    d000        ..      BEQ      0x80ecb0 ; GPIO_ReadOutputDataBit + 14
;;;417        uint8_t bitstatus = RESET;
;;;418    
;;;419        /* Check the parameters */
;;;420        assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;421    
;;;422        if (GPIO->DATAOUT & GPIO_Pin)
;;;423        {
;;;424            bitstatus = (uint8_t)SET;
        0x0080ecae:    2001        .       MOVS     r0,#1
;;;425        }
;;;426    
;;;427        return bitstatus;
;;;428    }
        0x0080ecb0:    4770        pG      BX       lr
    GPIO_SetBits
;;;429    
;;;430    /**
;;;431      * @brief  Reads value of all  GPIO output data port.
;;;432      * @param  None
;;;433      * @retval GPIO output data port value.
;;;434      */
;;;435    __STATIC_INLINE uint32_t GPIO_ReadOutputData(void)
;;;436    {
;;;437        return ((uint32_t)GPIO->DATAOUT);
;;;438    }
;;;439    
;;;440    /**
;;;441      * @brief  Sets the selected data port bits.
;;;442      * @param  GPIO_Pin: specifies the port bits to be written.
;;;443      *   This parameter can be GPIO_Pin_x where x can be (0..31) or GPIO_Pin_All.
;;;444      * @retval None
;;;445      */
;;;446    __STATIC_INLINE void GPIO_SetBits(uint32_t GPIO_Pin)
;;;447    {
;;;448        /* Check the parameters */
;;;449        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;450    
;;;451        GPIO->DATAOUT |= GPIO_Pin;
        0x0080ecb2:    4905        .I      LDR      r1,[pc,#20] ; [0x80ecc8] = 0x40001000
        0x0080ecb4:    680a        .h      LDR      r2,[r1,#0]
        0x0080ecb6:    4302        .C      ORRS     r2,r2,r0
        0x0080ecb8:    600a        .`      STR      r2,[r1,#0]
;;;452    }
        0x0080ecba:    4770        pG      BX       lr
    GPIO_ResetBits
;;;453    
;;;454    /**
;;;455      * @brief  Resets the selected data port bits.
;;;456      * @param  GPIO_Pin: specifies the port bits to be written.
;;;457      *   This parameter can be GPIO_Pin_0 to GPIO_Pin_31 or GPIO_Pin_All.
;;;458      * @retval None
;;;459      */
;;;460    __STATIC_INLINE void GPIO_ResetBits(uint32_t GPIO_Pin)
;;;461    {
;;;462        /* Check the parameters */
;;;463        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;464    
;;;465        GPIO->DATAOUT &= ~(GPIO_Pin);
        0x0080ecbc:    4902        .I      LDR      r1,[pc,#8] ; [0x80ecc8] = 0x40001000
        0x0080ecbe:    680a        .h      LDR      r2,[r1,#0]
        0x0080ecc0:    4382        .C      BICS     r2,r2,r0
        0x0080ecc2:    600a        .`      STR      r2,[r1,#0]
;;;466    }
        0x0080ecc4:    4770        pG      BX       lr
    $d
        0x0080ecc6:    0000        ..      DCW    0
        0x0080ecc8:    40001000    ...@    DCD    1073745920
    $t
    .text
    app_le_gap_init
;;; ..\include\SDK\src\app\pxp\main.c
;;;145    {
        0x0080eccc:    b500        ..      PUSH     {lr}
        0x0080ecce:    b09d        ..      SUB      sp,sp,#0x74
;;;146        /* Device name and device appearance */
;;;147        uint8_t  device_name[GAP_DEVICE_NAME_LEN] = "REAL_PXP";
        0x0080ecd0:    2228        ("      MOVS     r2,#0x28
        0x0080ecd2:    49b9        .I      LDR      r1,[pc,#740] ; [0x80efb8] = 0x8109e4
        0x0080ecd4:    4668        hF      MOV      r0,sp
        0x0080ecd6:    f44bf167    K.g.    BL       __aeabi_memcpy4 ; 0x59fa8
;;;148        uint16_t appearance = GAP_GATT_APPEARANCE_GENERIC_KEYRING;
        0x0080ecda:    f44f7010    O..p    MOV      r0,#0x240
        0x0080ecde:    f8ad006c    ..l.    STRH     r0,[sp,#0x6c]
;;;149        uint8_t  slave_init_mtu_req = false;
        0x0080ece2:    2000        .       MOVS     r0,#0
        0x0080ece4:    2107        .!      MOVS     r1,#7
        0x0080ece6:    f88d1034    ..4.    STRB     r1,[sp,#0x34]
        0x0080ecea:    f44f71a0    O..q    MOV      r1,#0x140
        0x0080ecee:    f88d0044    ..D.    STRB     r0,[sp,#0x44]
        0x0080ecf2:    f8ad1048    ..H.    STRH     r1,[sp,#0x48]
        0x0080ecf6:    f8ad1030    ..0.    STRH     r1,[sp,#0x30]
        0x0080ecfa:    2101        .!      MOVS     r1,#1
        0x0080ecfc:    f88d0040    ..@.    STRB     r0,[sp,#0x40]
        0x0080ed00:    f88d003c    ..<.    STRB     r0,[sp,#0x3c]
        0x0080ed04:    900b        ..      STR      r0,[sp,#0x2c]
;;;150    
;;;151        /* Advertising parameters */
;;;152        uint8_t  adv_evt_type = GAP_ADTYPE_ADV_IND;
;;;153        uint8_t  adv_direct_type = GAP_REMOTE_ADDR_LE_PUBLIC;
;;;154        uint8_t  adv_direct_addr[GAP_BD_ADDR_LEN] = {0};
        0x0080ed06:    900a        ..      STR      r0,[sp,#0x28]
;;;155        uint8_t  adv_chann_map = GAP_ADVCHAN_ALL;
;;;156        uint8_t  adv_filter_policy = GAP_ADV_FILTER_ANY;
        0x0080ed08:    f88d0038    ..8.    STRB     r0,[sp,#0x38]
        0x0080ed0c:    2203        ."      MOVS     r2,#3
;;;157        uint16_t adv_int_min = DEFAULT_ADVERTISING_INTERVAL_MIN;
;;;158        uint16_t adv_int_max = DEFAULT_ADVERTISING_INTERVAL_MIN;
;;;159    
;;;160        /* GAP Bond Manager parameters */
;;;161        uint8_t  auth_pair_mode = GAP_PAIRING_MODE_PAIRABLE;
        0x0080ed0e:    f88d104c    ..L.    STRB     r1,[sp,#0x4c]
;;;162        uint16_t auth_flags = GAP_AUTHEN_BIT_BONDING_FLAG;
        0x0080ed12:    f8ad1050    ..P.    STRH     r1,[sp,#0x50]
;;;163        uint8_t  auth_io_cap = GAP_IO_CAP_NO_INPUT_NO_OUTPUT;
        0x0080ed16:    f88d2054    ..T     STRB     r2,[sp,#0x54]
;;;164        uint8_t  auth_oob = false;
        0x0080ed1a:    f88d0058    ..X.    STRB     r0,[sp,#0x58]
;;;165        uint8_t  auth_use_fix_passkey = false;
        0x0080ed1e:    f88d005c    ..\.    STRB     r0,[sp,#0x5c]
;;;166        uint32_t auth_fix_passkey = 0;
;;;167    
;;;168        uint8_t  auth_sec_req_enable = false;
        0x0080ed22:    9018        ..      STR      r0,[sp,#0x60]
        0x0080ed24:    f88d0064    ..d.    STRB     r0,[sp,#0x64]
;;;169    
;;;170        uint16_t auth_sec_req_flags = GAP_AUTHEN_BIT_BONDING_FLAG;
        0x0080ed28:    f8ad1068    ..h.    STRH     r1,[sp,#0x68]
;;;171    
;;;172        /* Set device name and device appearance */
;;;173        le_set_gap_param(GAP_PARAM_DEVICE_NAME, GAP_DEVICE_NAME_LEN, device_name);
        0x0080ed2c:    466a        jF      MOV      r2,sp
        0x0080ed2e:    2128        (!      MOVS     r1,#0x28
        0x0080ed30:    f2402022    @."     MOV      r0,#0x222
        0x0080ed34:    f43df788    =...    BL       le_set_gap_param ; 0x4cc48
;;;174        le_set_gap_param(GAP_PARAM_APPEARANCE, sizeof(appearance), &appearance);
        0x0080ed38:    aa1b        ..      ADD      r2,sp,#0x6c
        0x0080ed3a:    2102        .!      MOVS     r1,#2
        0x0080ed3c:    f2402021    @.!     MOV      r0,#0x221
        0x0080ed40:    f43df782    =...    BL       le_set_gap_param ; 0x4cc48
;;;175        le_set_gap_param(GAP_PARAM_SLAVE_INIT_GATT_MTU_REQ, sizeof(slave_init_mtu_req),
        0x0080ed44:    aa0f        ..      ADD      r2,sp,#0x3c
        0x0080ed46:    2101        .!      MOVS     r1,#1
        0x0080ed48:    f2402023    @.#     MOV      r0,#0x223
        0x0080ed4c:    f43df77c    =.|.    BL       le_set_gap_param ; 0x4cc48
;;;176                         &slave_init_mtu_req);
;;;177    
;;;178        /* Set advertising parameters */
;;;179        le_adv_set_param(GAP_PARAM_ADV_EVENT_TYPE, sizeof(adv_evt_type), &adv_evt_type);
        0x0080ed50:    aa10        ..      ADD      r2,sp,#0x40
        0x0080ed52:    2101        .!      MOVS     r1,#1
        0x0080ed54:    f2402063    @.c     MOV      r0,#0x263
        0x0080ed58:    f443f09a    C...    BL       le_adv_set_param ; 0x51e90
;;;180        le_adv_set_param(GAP_PARAM_ADV_DIRECT_ADDR_TYPE, sizeof(adv_direct_type), &adv_direct_type);
        0x0080ed5c:    aa11        ..      ADD      r2,sp,#0x44
        0x0080ed5e:    2101        .!      MOVS     r1,#1
        0x0080ed60:    f44f7019    O..p    MOV      r0,#0x264
        0x0080ed64:    f443f094    C...    BL       le_adv_set_param ; 0x51e90
;;;181        le_adv_set_param(GAP_PARAM_ADV_DIRECT_ADDR, sizeof(adv_direct_addr), adv_direct_addr);
        0x0080ed68:    aa0a        ..      ADD      r2,sp,#0x28
        0x0080ed6a:    2106        .!      MOVS     r1,#6
        0x0080ed6c:    f2402065    @.e     MOV      r0,#0x265
        0x0080ed70:    f443f08e    C...    BL       le_adv_set_param ; 0x51e90
;;;182        le_adv_set_param(GAP_PARAM_ADV_CHANNEL_MAP, sizeof(adv_chann_map), &adv_chann_map);
        0x0080ed74:    aa0d        ..      ADD      r2,sp,#0x34
        0x0080ed76:    2101        .!      MOVS     r1,#1
        0x0080ed78:    f2402066    @.f     MOV      r0,#0x266
        0x0080ed7c:    f443f088    C...    BL       le_adv_set_param ; 0x51e90
;;;183        le_adv_set_param(GAP_PARAM_ADV_FILTER_POLICY, sizeof(adv_filter_policy), &adv_filter_policy);
        0x0080ed80:    aa0e        ..      ADD      r2,sp,#0x38
        0x0080ed82:    2101        .!      MOVS     r1,#1
        0x0080ed84:    f2402067    @.g     MOV      r0,#0x267
        0x0080ed88:    f443f082    C...    BL       le_adv_set_param ; 0x51e90
;;;184        le_adv_set_param(GAP_PARAM_ADV_INTERVAL_MIN, sizeof(adv_int_min), &adv_int_min);
        0x0080ed8c:    aa12        ..      ADD      r2,sp,#0x48
        0x0080ed8e:    2102        .!      MOVS     r1,#2
        0x0080ed90:    f44f701a    O..p    MOV      r0,#0x268
        0x0080ed94:    f443f07c    C.|.    BL       le_adv_set_param ; 0x51e90
;;;185        le_adv_set_param(GAP_PARAM_ADV_INTERVAL_MAX, sizeof(adv_int_max), &adv_int_max);
        0x0080ed98:    aa0c        ..      ADD      r2,sp,#0x30
        0x0080ed9a:    2102        .!      MOVS     r1,#2
        0x0080ed9c:    f2402069    @.i     MOV      r0,#0x269
        0x0080eda0:    f443f076    C.v.    BL       le_adv_set_param ; 0x51e90
;;;186        le_adv_set_param(GAP_PARAM_ADV_DATA, sizeof(adv_data), (void *)adv_data);
        0x0080eda4:    4a85        .J      LDR      r2,[pc,#532] ; [0x80efbc] = 0x207e6b
        0x0080eda6:    2115        .!      MOVS     r1,#0x15
        0x0080eda8:    f2402061    @.a     MOV      r0,#0x261
        0x0080edac:    f443f070    C.p.    BL       le_adv_set_param ; 0x51e90
;;;187        le_adv_set_param(GAP_PARAM_SCAN_RSP_DATA, sizeof(scan_rsp_data), (void *)scan_rsp_data);
        0x0080edb0:    4a82        .J      LDR      r2,[pc,#520] ; [0x80efbc] = 0x207e6b
        0x0080edb2:    210e        .!      MOVS     r1,#0xe
        0x0080edb4:    3a0e        .:      SUBS     r2,r2,#0xe
        0x0080edb6:    f2402062    @.b     MOV      r0,#0x262
        0x0080edba:    f443f069    C.i.    BL       le_adv_set_param ; 0x51e90
;;;188    
;;;189        /* Setup the GAP Bond Manager */
;;;190        gap_set_param(GAP_PARAM_BOND_PAIRING_MODE, sizeof(auth_pair_mode), &auth_pair_mode);
        0x0080edbe:    aa13        ..      ADD      r2,sp,#0x4c
        0x0080edc0:    2101        .!      MOVS     r1,#1
        0x0080edc2:    f2402002    @..     MOV      r0,#0x202
        0x0080edc6:    f43df0f0    =...    BL       gap_set_param ; 0x4bfaa
;;;191        gap_set_param(GAP_PARAM_BOND_AUTHEN_REQUIREMENTS_FLAGS, sizeof(auth_flags), &auth_flags);
        0x0080edca:    aa14        ..      ADD      r2,sp,#0x50
        0x0080edcc:    2102        .!      MOVS     r1,#2
        0x0080edce:    f2402003    @..     MOV      r0,#0x203
        0x0080edd2:    f43df0ea    =...    BL       gap_set_param ; 0x4bfaa
;;;192        gap_set_param(GAP_PARAM_BOND_IO_CAPABILITIES, sizeof(auth_io_cap), &auth_io_cap);
        0x0080edd6:    aa15        ..      ADD      r2,sp,#0x54
        0x0080edd8:    2101        .!      MOVS     r1,#1
        0x0080edda:    f44f7001    O..p    MOV      r0,#0x204
        0x0080edde:    f43df0e4    =...    BL       gap_set_param ; 0x4bfaa
;;;193        gap_set_param(GAP_PARAM_BOND_OOB_ENABLED, sizeof(auth_oob), &auth_oob);
        0x0080ede2:    aa16        ..      ADD      r2,sp,#0x58
        0x0080ede4:    2101        .!      MOVS     r1,#1
        0x0080ede6:    f2402005    @..     MOV      r0,#0x205
        0x0080edea:    f43df0de    =...    BL       gap_set_param ; 0x4bfaa
;;;194        le_bond_set_param(GAP_PARAM_BOND_FIXED_PASSKEY, sizeof(auth_fix_passkey), &auth_fix_passkey);
        0x0080edee:    aa18        ..      ADD      r2,sp,#0x60
        0x0080edf0:    2104        .!      MOVS     r1,#4
        0x0080edf2:    f2402011    @..     MOV      r0,#0x211
        0x0080edf6:    f43df1fa    =...    BL       le_bond_set_param ; 0x4c1ee
;;;195        le_bond_set_param(GAP_PARAM_BOND_FIXED_PASSKEY_ENABLE, sizeof(auth_use_fix_passkey),
        0x0080edfa:    aa17        ..      ADD      r2,sp,#0x5c
        0x0080edfc:    2101        .!      MOVS     r1,#1
        0x0080edfe:    f2402012    @..     MOV      r0,#0x212
        0x0080ee02:    f43df1f4    =...    BL       le_bond_set_param ; 0x4c1ee
;;;196                          &auth_use_fix_passkey);
;;;197        le_bond_set_param(GAP_PARAM_BOND_SEC_REQ_ENABLE, sizeof(auth_sec_req_enable), &auth_sec_req_enable);
        0x0080ee06:    aa19        ..      ADD      r2,sp,#0x64
        0x0080ee08:    2101        .!      MOVS     r1,#1
        0x0080ee0a:    f2402013    @..     MOV      r0,#0x213
        0x0080ee0e:    f43df1ee    =...    BL       le_bond_set_param ; 0x4c1ee
;;;198        le_bond_set_param(GAP_PARAM_BOND_SEC_REQ_REQUIREMENT, sizeof(auth_sec_req_flags),
        0x0080ee12:    aa1a        ..      ADD      r2,sp,#0x68
        0x0080ee14:    2102        .!      MOVS     r1,#2
        0x0080ee16:    f44f7005    O..p    MOV      r0,#0x214
        0x0080ee1a:    f43df1e8    =...    BL       le_bond_set_param ; 0x4c1ee
;;;199                          &auth_sec_req_flags);
;;;200    
;;;201        /* register gap message callback */
;;;202        le_register_app_cb(app_gap_callback);
        0x0080ee1e:    4868        hH      LDR      r0,[pc,#416] ; [0x80efc0] = 0x810267
        0x0080ee20:    f43df70f    =...    BL       le_register_app_cb ; 0x4cc42
;;;203    }
        0x0080ee24:    b01d        ..      ADD      sp,sp,#0x74
        0x0080ee26:    bd00        ..      POP      {pc}
    app_le_profile_init
;;;204    
;;;205    /**
;;;206     * @brief  Add GATT services, clients and register callbacks
;;;207     * @return void
;;;208     */
;;;209    void app_le_profile_init(void)
;;;210    {
        0x0080ee28:    b510        ..      PUSH     {r4,lr}
;;;211        server_init(6);
        0x0080ee2a:    2006        .       MOVS     r0,#6
        0x0080ee2c:    f440f36a    @.j.    BL       server_init ; 0x4f504
;;;212        //simp_srv_id = simp_ble_service_add_service(app_profile_callback);
;;;213        ias_srv_id  = ias_add_service(app_profile_callback);
        0x0080ee30:    4864        dH      LDR      r0,[pc,#400] ; [0x80efc4] = 0x8102b5
        0x0080ee32:    f000fc22    ..".    BL       ias_add_service ; 0x80f67a
        0x0080ee36:    4964        dI      LDR      r1,[pc,#400] ; [0x80efc8] = 0x2080d5
        0x0080ee38:    7008        .p      STRB     r0,[r1,#0]
;;;214        lls_srv_id  = lls_add_service(app_profile_callback);
        0x0080ee3a:    4862        bH      LDR      r0,[pc,#392] ; [0x80efc4] = 0x8102b5
        0x0080ee3c:    f000fcb0    ....    BL       lls_add_service ; 0x80f7a0
        0x0080ee40:    4962        bI      LDR      r1,[pc,#392] ; [0x80efcc] = 0x2080d6
        0x0080ee42:    7008        .p      STRB     r0,[r1,#0]
;;;215        tps_srv_id  = tps_add_service(app_profile_callback);
        0x0080ee44:    485f        _H      LDR      r0,[pc,#380] ; [0x80efc4] = 0x8102b5
        0x0080ee46:    f000fd11    ....    BL       tps_add_service ; 0x80f86c
        0x0080ee4a:    4961        aI      LDR      r1,[pc,#388] ; [0x80efd0] = 0x2080d7
        0x0080ee4c:    7008        .p      STRB     r0,[r1,#0]
;;;216        kns_srv_id  = kns_add_service(app_profile_callback);
        0x0080ee4e:    485d        ]H      LDR      r0,[pc,#372] ; [0x80efc4] = 0x8102b5
        0x0080ee50:    f000fe7c    ..|.    BL       kns_add_service ; 0x80fb4c
        0x0080ee54:    495f        _I      LDR      r1,[pc,#380] ; [0x80efd4] = 0x2080d8
        0x0080ee56:    7008        .p      STRB     r0,[r1,#0]
;;;217        bas_srv_id  = bas_add_service(app_profile_callback);
        0x0080ee58:    485a        ZH      LDR      r0,[pc,#360] ; [0x80efc4] = 0x8102b5
        0x0080ee5a:    f000fdbd    ....    BL       bas_add_service ; 0x80f9d8
        0x0080ee5e:    495e        ^I      LDR      r1,[pc,#376] ; [0x80efd8] = 0x2080d9
        0x0080ee60:    7008        .p      STRB     r0,[r1,#0]
;;;218        dis_srv_id  = dis_add_service(app_profile_callback);
        0x0080ee62:    4858        XH      LDR      r0,[pc,#352] ; [0x80efc4] = 0x8102b5
        0x0080ee64:    f000ffb3    ....    BL       dis_add_service ; 0x80fdce
        0x0080ee68:    495c        \I      LDR      r1,[pc,#368] ; [0x80efdc] = 0x2080da
        0x0080ee6a:    7008        .p      STRB     r0,[r1,#0]
;;;219        server_register_app_cb(app_profile_callback);
        0x0080ee6c:    e8bd4010    ...@    POP      {r4,lr}
        0x0080ee70:    4854        TH      LDR      r0,[pc,#336] ; [0x80efc4] = 0x8102b5
        0x0080ee72:    f440b360    @.`.    B        server_register_app_cb ; 0x4f536
    board_init
;;;220    
;;;221    }
;;;222    
;;;223    
;;;224    /**
;;;225     * @brief    Contains the initialization of pinmux settings and pad settings
;;;226     * @note     All the pinmux settings and pad settings shall be initiated in this function,
;;;227     *           but if legacy driver is used, the initialization of pinmux setting and pad setting
;;;228     *           should be peformed with the IO initializing.
;;;229     * @return   void
;;;230     */
;;;231    void board_init(void)
;;;232    {
        0x0080ee76:    b510        ..      PUSH     {r4,lr}
;;;233        RCC_Configuration();
        0x0080ee78:    f7fffce1    ....    BL       RCC_Configuration ; 0x80e83e
;;;234        PINMUX_Configuration();
        0x0080ee7c:    f7fffcb4    ....    BL       PINMUX_Configuration ; 0x80e7e8
;;;235        PAD_Configuration();
        0x0080ee80:    e8bd4010    ...@    POP      {r4,lr}
        0x0080ee84:    f7ffbcbf    ....    B.W      PAD_Configuration ; 0x80e806
    System_Handler
;;;236    }
;;;237    /**
;;;238     * @brief    System_Handler
;;;239     * @note     system handle to judge which pin is wake source
;;;240     * @return   void
;;;241     */
;;;242    void System_Handler(void)
;;;243    {
        0x0080ee88:    b570        p.      PUSH     {r4-r6,lr}
;;;244        uint8_t tmpVal;
;;;245    
;;;246        APP_PRINT_INFO0("System_Handler");
        0x0080ee8a:    2200        ."      MOVS     r2,#0
        0x0080ee8c:    4954        TI      LDR      r1,[pc,#336] ; [0x80efe0] = 0x88001b4
        0x0080ee8e:    4855        UH      LDR      r0,[pc,#340] ; [0x80efe4] = 0x21103002
        0x0080ee90:    f7f8dde5    ....    BL       log_buffer ; 0x7a5e
;;; ..\include\SDK\inc\platform\cmsis\core_cm4.h
;;;1659       NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
        0x0080ee94:    f04f25e0    O..%    MOV      r5,#0xe000e000
        0x0080ee98:    2401        .$      MOVS     r4,#1
        0x0080ee9a:    f8c54180    ...A    STR      r4,[r5,#0x180]
        0x0080ee9e:    f50575c0    ...u    ADD      r5,r5,#0x180
;;; ..\include\SDK\src\app\pxp\main.c
;;;249        KEY_INT_Handle();//P2_4  edge triggle , can't interrupt after dlps
        0x0080eea2:    f7fffd23    ..#.    BL       GPIO20_Handler ; 0x80e8ec
;;;250    
;;;251        // need clear debounce bit here.
;;;252        tmpVal = btaon_fast_read_safe(0x2b);
        0x0080eea6:    202b        +       MOVS     r0,#0x2b
        0x0080eea8:    f42ff7ac    /...    BL       btaon_fast_read_safe ; 0x3ee04
;;;253        btaon_fast_write_safe(0x2b, (tmpVal | BIT7));
        0x0080eeac:    f0400180    @...    ORR      r1,r0,#0x80
        0x0080eeb0:    202b        +       MOVS     r0,#0x2b
        0x0080eeb2:    f42ff7c8    /...    BL       btaon_fast_write_safe ; 0x3ee46
;;; ..\include\SDK\inc\platform\cmsis\core_cm4.h
;;;1700       NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) &
        0x0080eeb6:    f8c54100    ...A    STR      r4,[r5,#0x100]
;;; ..\include\SDK\src\app\pxp\main.c
;;;265    }
        0x0080eeba:    bd70        p.      POP      {r4-r6,pc}
    PxpEnterDlpsSet
;;;266    /**
;;;267     * @brief    PxpEnterDlpsSet
;;;268     * @note     enter dlps to set pad&wake up pin
;;;269     * @return   void
;;;270     */
;;;271    void PxpEnterDlpsSet(void)
;;;272    {
        0x0080eebc:    b57c        |.      PUSH     {r2-r6,lr}
;;;273        Pad_Config(KEY, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0080eebe:    2400        .$      MOVS     r4,#0
        0x0080eec0:    2301        .#      MOVS     r3,#1
        0x0080eec2:    9400        ..      STR      r4,[sp,#0]
        0x0080eec4:    461a        .F      MOV      r2,r3
        0x0080eec6:    4621        !F      MOV      r1,r4
        0x0080eec8:    2014        .       MOVS     r0,#0x14
        0x0080eeca:    9401        ..      STR      r4,[sp,#4]
        0x0080eecc:    f402f286    ....    BL       Pad_Config ; 0x113dc
;;;274        Pad_Config(LED, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_ENABLE, PAD_OUT_LOW);
        0x0080eed0:    2501        .%      MOVS     r5,#1
        0x0080eed2:    e9cd5400    ...T    STRD     r5,r4,[sp,#0]
        0x0080eed6:    2300        .#      MOVS     r3,#0
        0x0080eed8:    462a        *F      MOV      r2,r5
        0x0080eeda:    4619        .F      MOV      r1,r3
        0x0080eedc:    4628        (F      MOV      r0,r5
        0x0080eede:    f402f27d    ..}.    BL       Pad_Config ; 0x113dc
;;;275        Pad_Config(BEEP, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_ENABLE, PAD_OUT_LOW);
        0x0080eee2:    e9cd5400    ...T    STRD     r5,r4,[sp,#0]
        0x0080eee6:    2300        .#      MOVS     r3,#0
        0x0080eee8:    2201        ."      MOVS     r2,#1
        0x0080eeea:    4619        .F      MOV      r1,r3
        0x0080eeec:    2002        .       MOVS     r0,#2
        0x0080eeee:    f402f275    ..u.    BL       Pad_Config ; 0x113dc
;;;276        System_WakeUpDebounceTime(0x8);
        0x0080eef2:    2008        .       MOVS     r0,#8
        0x0080eef4:    f402f2b9    ....    BL       System_WakeUpDebounceTime ; 0x1146a
;;;277        if (keystatus)
        0x0080eef8:    483b        ;H      LDR      r0,[pc,#236] ; [0x80efe8] = 0x207f3a
        0x0080eefa:    f04f0201    O...    MOV      r2,#1
        0x0080eefe:    7800        .x      LDRB     r0,[r0,#0]
        0x0080ef00:    b108        ..      CBZ      r0,0x80ef06 ; PxpEnterDlpsSet + 74
;;;278        {
;;;279            System_WakeUpPinEnable(KEY, PAD_WAKEUP_POL_LOW, PAD_WK_DEBOUNCE_ENABLE);
        0x0080ef02:    2101        .!      MOVS     r1,#1
        0x0080ef04:    e000        ..      B        0x80ef08 ; PxpEnterDlpsSet + 76
;;;280        }
;;;281        else
;;;282        {
;;;283            System_WakeUpPinEnable(KEY, PAD_WAKEUP_POL_HIGH, PAD_WK_DEBOUNCE_ENABLE);
        0x0080ef06:    2100        .!      MOVS     r1,#0
        0x0080ef08:    b002        ..      ADD      sp,sp,#8
        0x0080ef0a:    2014        .       MOVS     r0,#0x14
        0x0080ef0c:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080ef10:    f402b2f5    ....    B        System_WakeUpPinEnable ; 0x114fe
    PxpExitDlpsInit
;;;284        }
;;;285    }
;;;286    /**
;;;287     * @brief    PxpExitDlpsInit
;;;288     * @note     Exit dlps to configure pad
;;;289     * @return   void
;;;290     */
;;;291    void PxpExitDlpsInit(void)
;;;292    {
        0x0080ef14:    b57c        |.      PUSH     {r2-r6,lr}
;;;293        Pad_Config(LED, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_ENABLE, PAD_OUT_LOW);
        0x0080ef16:    2501        .%      MOVS     r5,#1
        0x0080ef18:    2400        .$      MOVS     r4,#0
        0x0080ef1a:    e9cd5400    ...T    STRD     r5,r4,[sp,#0]
        0x0080ef1e:    4623        #F      MOV      r3,r4
        0x0080ef20:    462a        *F      MOV      r2,r5
        0x0080ef22:    4629        )F      MOV      r1,r5
        0x0080ef24:    4628        (F      MOV      r0,r5
        0x0080ef26:    f402f259    ..Y.    BL       Pad_Config ; 0x113dc
;;;294        Pad_Config(BEEP, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_ENABLE, PAD_OUT_LOW);
        0x0080ef2a:    e9cd5400    ...T    STRD     r5,r4,[sp,#0]
        0x0080ef2e:    2201        ."      MOVS     r2,#1
        0x0080ef30:    2300        .#      MOVS     r3,#0
        0x0080ef32:    4611        .F      MOV      r1,r2
        0x0080ef34:    2002        .       MOVS     r0,#2
        0x0080ef36:    f402f251    ..Q.    BL       Pad_Config ; 0x113dc
;;;295        Pad_Config(KEY, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0080ef3a:    2301        .#      MOVS     r3,#1
        0x0080ef3c:    9400        ..      STR      r4,[sp,#0]
        0x0080ef3e:    461a        .F      MOV      r2,r3
        0x0080ef40:    4619        .F      MOV      r1,r3
        0x0080ef42:    2014        .       MOVS     r0,#0x14
        0x0080ef44:    9401        ..      STR      r4,[sp,#4]
        0x0080ef46:    f402f249    ..I.    BL       Pad_Config ; 0x113dc
;;;296    }
        0x0080ef4a:    bd7c        |.      POP      {r2-r6,pc}
    DLPS_PxpCheck
;;;297    /**
;;;298     * @brief    DLPS_PxpCheck
;;;299     * @note     check app enter dlps flg.
;;;300     * @return   bool
;;;301     */
;;;302    bool DLPS_PxpCheck(void)
;;;303    {
;;;304        return allowedPxpEnterDlps;
        0x0080ef4c:    481b        .H      LDR      r0,[pc,#108] ; [0x80efbc] = 0x207e6b
        0x0080ef4e:    380f        .8      SUBS     r0,r0,#0xf
        0x0080ef50:    7800        .x      LDRB     r0,[r0,#0]
;;;305    }
        0x0080ef52:    4770        pG      BX       lr
    pwr_mgr_init
;;;306    
;;;307    /**
;;;308     * @brief    Contains the power mode settings
;;;309     * @return   void
;;;310     */
;;;311    void pwr_mgr_init(void)
;;;312    {
        0x0080ef54:    b510        ..      PUSH     {r4,lr}
;;;313    #if DLPS_EN
;;;314        if (false == dlps_check_cb_reg(DLPS_PxpCheck))
        0x0080ef56:    f2af000b    ....    ADR      r0,{pc}-9 ; 0x80ef4d
        0x0080ef5a:    f7f9db50    ..P.    BL       dlps_check_cb_reg ; 0x85fe
        0x0080ef5e:    b920         .      CBNZ     r0,0x80ef6a ; pwr_mgr_init + 22
;;;315        {
;;;316            DBG_DIRECT("Error: dlps_check_cb_reg(DLPS_RcuCheck) failed!\n");
        0x0080ef60:    a122        ".      ADR      r1,{pc}+0x8c ; 0x80efec
        0x0080ef62:    f04f5004    O..P    MOV      r0,#0x21000000
        0x0080ef66:    f7f8dd23    ..#.    BL       log_direct ; 0x79b0
;;;317        }
;;;318        DLPS_IORegUserDlpsEnterCb(PxpEnterDlpsSet);
        0x0080ef6a:    f2af00af    ....    ADR      r0,{pc}-0xad ; 0x80eebd
;;; ..\include\SDK\inc\peripheral\rtl876x_io_dlps.h
;;;88         User_IO_EnterDlpsCB = func;
        0x0080ef6e:    492c        ,I      LDR      r1,[pc,#176] ; [0x80f020] = 0x207f58
;;; ..\include\SDK\src\app\pxp\main.c
;;;319        DLPS_IORegUserDlpsExitCb(PxpExitDlpsInit);
        0x0080ef70:    6008        .`      STR      r0,[r1,#0]
        0x0080ef72:    f2af005f    .._.    ADR      r0,{pc}-0x5d ; 0x80ef15
;;; ..\include\SDK\inc\peripheral\rtl876x_io_dlps.h
;;;72         User_IO_ExitDlpsCB = func;
        0x0080ef76:    492b        +I      LDR      r1,[pc,#172] ; [0x80f024] = 0x207f54
;;; ..\include\SDK\src\app\pxp\main.c
;;;320        DLPS_IORegister();
        0x0080ef78:    6008        .`      STR      r0,[r1,#0]
        0x0080ef7a:    f000f8cf    ....    BL       DLPS_IORegister ; 0x80f11c
;;;321        lps_mode_set(LPM_DLPS_MODE);
        0x0080ef7e:    e8bd4010    ...@    POP      {r4,lr}
        0x0080ef82:    2002        .       MOVS     r0,#2
        0x0080ef84:    f7f99c6b    ..k.    B        lps_mode_set ; 0x885e
    task_init
;;;322    #endif
;;;323    }
;;;324    
;;;325    /**
;;;326     * @brief    Contains the initialization of all tasks
;;;327     * @note     There is only one task in BLE Scatternet APP, thus only one APP task is init here
;;;328     * @return   void
;;;329     */
;;;330    void task_init(void)
;;;331    {
;;;332        app_task_init();
        0x0080ef88:    f7ffbc16    ....    B.W      app_task_init ; 0x80e7b8
    main
;;;333    }
;;;334    
;;;335    /**
;;;336     * @brief    Entry of APP code
;;;337     * @return   int (To avoid compile warning)
;;;338     */
;;;339    int main(void)
;;;340    {
        0x0080ef8c:    b510        ..      PUSH     {r4,lr}
;;;341        board_init();
        0x0080ef8e:    f7ffff72    ..r.    BL       board_init ; 0x80ee76
;;;342    
;;;343        le_gap_init(APP_MAX_LINKS);
        0x0080ef92:    2001        .       MOVS     r0,#1
        0x0080ef94:    f43df612    =...    BL       le_gap_init ; 0x4cbbc
;;;344        gap_lib_init();
        0x0080ef98:    f001fb90    ....    BL       gap_lib_init ; 0x8106bc
;;;345        app_le_gap_init();
        0x0080ef9c:    f7fffe96    ....    BL       app_le_gap_init ; 0x80eccc
;;;346        app_le_profile_init();
        0x0080efa0:    f7ffff42    ..B.    BL       app_le_profile_init ; 0x80ee28
;;;347        pwr_mgr_init();
        0x0080efa4:    f7ffffd6    ....    BL       pwr_mgr_init ; 0x80ef54
;;;348        swTimerInit();
        0x0080efa8:    f7fffe0d    ....    BL       swTimerInit ; 0x80ebc6
        0x0080efac:    f7fffc04    ....    BL       app_task_init ; 0x80e7b8
;;;349        task_init();
;;;350        os_sched_start();
        0x0080efb0:    f417f407    ....    BL       os_sched_start ; 0x267c2
;;;351    
;;;352        return 0;
        0x0080efb4:    2000        .       MOVS     r0,#0
;;;353    }
        0x0080efb6:    bd10        ..      POP      {r4,pc}
    $d
        0x0080efb8:    008109e4    ....    DCD    8456676
        0x0080efbc:    00207e6b    k~ .    DCD    2129515
        0x0080efc0:    00810267    g...    DCD    8454759
        0x0080efc4:    008102b5    ....    DCD    8454837
        0x0080efc8:    002080d5    .. .    DCD    2130133
        0x0080efcc:    002080d6    .. .    DCD    2130134
        0x0080efd0:    002080d7    .. .    DCD    2130135
        0x0080efd4:    002080d8    .. .    DCD    2130136
        0x0080efd8:    002080d9    .. .    DCD    2130137
        0x0080efdc:    002080da    .. .    DCD    2130138
        0x0080efe0:    088001b4    ....    DCD    142606772
        0x0080efe4:    21103002    .0.!    DCD    554708994
        0x0080efe8:    00207f3a    :. .    DCD    2129722
        0x0080efec:    6f727245    Erro    DCD    1869771333
        0x0080eff0:    64203a72    r: d    DCD    1679833714
        0x0080eff4:    5f73706c    lps_    DCD    1601400940
        0x0080eff8:    63656863    chec    DCD    1667590243
        0x0080effc:    62635f6b    k_cb    DCD    1650679659
        0x0080f000:    6765725f    _reg    DCD    1734701663
        0x0080f004:    504c4428    (DLP    DCD    1347175464
        0x0080f008:    63525f53    S_Rc    DCD    1666342739
        0x0080f00c:    65684375    uChe    DCD    1701331829
        0x0080f010:    20296b63    ck)     DCD    539585379
        0x0080f014:    6c696166    fail    DCD    1818845542
        0x0080f018:    0a216465    ed!.    DCD    169960549
        0x0080f01c:    00000000    ....    DCD    0
        0x0080f020:    00207f58    X. .    DCD    2129752
        0x0080f024:    00207f54    T. .    DCD    2129748
    $t
    .text
    DLPS_IO_EnterDlpsCb
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_io_dlps.c
;;;1832   {
        0x0080f028:    b57c        |.      PUSH     {r2-r6,lr}
;;; ..\include\SDK\inc\platform\cmsis\core_cm4.h
;;;1659       NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
        0x0080f02a:    2400        .$      MOVS     r4,#0
        0x0080f02c:    f04f20e0    O..     MOV      r0,#0xe000e000
        0x0080f030:    2101        .!      MOVS     r1,#1
        0x0080f032:    f8c01180    ....    STR      r1,[r0,#0x180]
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_io_dlps.c
;;;51         CPU_StoreReg[0] = NVIC->ISER[0];
        0x0080f036:    f8d02100    ...!    LDR      r2,[r0,#0x100]
        0x0080f03a:    493e        >I      LDR      r1,[pc,#248] ; [0x80f134] = 0x207f5c
;;;52         CPU_StoreReg[1] = NVIC->ISPR[0];
        0x0080f03c:    600a        .`      STR      r2,[r1,#0]
        0x0080f03e:    f8d02200    ..."    LDR      r2,[r0,#0x200]
;;;53         CPU_StoreReg[2] = NVIC->IABR[0];
        0x0080f042:    604a        J`      STR      r2,[r1,#4]
        0x0080f044:    f8d00300    ....    LDR      r0,[r0,#0x300]
;;;54     
;;;55         //The priority of system on interrupt is 0 at first DLPS ENTER CB, so store and restore is skipped
;;;56         for (i = 3; i < 32; ++i)  //skip System_IRQn, WDG_IRQn, BTMAC_IRQn which are handled in rom
        0x0080f048:    6088        .`      STR      r0,[r1,#8]
        0x0080f04a:    2003        .       MOVS     r0,#3
;;;57         {
;;;58             CPU_StoreReg[i] = NVIC->IP[i];
        0x0080f04c:    f10022e0    ..."    ADD      r2,r0,#0xe000e000
        0x0080f050:    f8922400    ...$    LDRB     r2,[r2,#0x400]
        0x0080f054:    f8412020    A.      STR      r2,[r1,r0,LSL #2]
        0x0080f058:    1c40        @.      ADDS     r0,r0,#1
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_io_dlps.c (56)
        0x0080f05a:    2820         (      CMP      r0,#0x20
        0x0080f05c:    d3f6        ..      BCC      0x80f04c ; DLPS_IO_EnterDlpsCb + 36
;;;57         {
;;;58             CPU_StoreReg[i] = NVIC->IP[i];
;;;59         }
;;;60     
;;;61         CPU_StoreReg[32] = SCB->VTOR;
        0x0080f05e:    4836        6H      LDR      r0,[pc,#216] ; [0x80f138] = 0xe000ed08
        0x0080f060:    6800        .h      LDR      r0,[r0,#0]
;;;62         /* Save Vendor register */
;;;63         PeriIntStoreReg = PERIPHINT->EN;
        0x0080f062:    f8c10080    ....    STR      r0,[r1,#0x80]
        0x0080f066:    4835        5H      LDR      r0,[pc,#212] ; [0x80f13c] = 0x40006000
        0x0080f068:    68c0        .h      LDR      r0,[r0,#0xc]
        0x0080f06a:    4b32        2K      LDR      r3,[pc,#200] ; [0x80f134] = 0x207f5c
        0x0080f06c:    3b0c        .;      SUBS     r3,r3,#0xc
;;;64     
;;;65         return;
;;;66     }
;;;67     
;;;68     /**
;;;69       * @brief  CPU exit dlps callback function(Resume CPU register values when system exit DLPS)
;;;70       * @param  None
;;;71       * @retval None
;;;72       */
;;;73     DATA_RAM_FUNCTION __STATIC_INLINE  void CPU_DLPS_Exit(void)
;;;74     {
;;;75         //NVIC restore
;;;76         uint32_t i;
;;;77     
;;;78         //Don't restore NVIC pending register, but report warning
;;;79         //NVIC->ISPR[0] = CPU_StoreReg[1];
;;;80         if (CPU_StoreReg[1])
;;;81         {
;;;82             DLPS_PRINT_WARN1("miss interrupt: pending register: 0x%x", CPU_StoreReg[1]);
;;;83         }
;;;84     //    NVIC->IABR[0] = CPU_StoreReg[2];
;;;85     
;;;86         //The priority of system on interrupt is 0 at first DLPS ENTER CB, so store and restore is skipped
;;;87         for (i = 3; i < 32; ++i) //skip System_IRQn, WDG_IRQn, BTMAC_IRQn which are handled in rom
;;;88         {
;;;89             NVIC->IP[i] = CPU_StoreReg[i];
;;;90         }
;;;91     
;;;92         SCB->VTOR = CPU_StoreReg[32];
;;;93         PERIPHINT->EN = PeriIntStoreReg;
;;;94         NVIC->ISER[0] = CPU_StoreReg[0];
;;;95     
;;;96         void debug_monitor_enable(void);
;;;97         debug_monitor_enable();
;;;98         return;
;;;99     }
;;;100    
;;;101    /**
;;;102      * @brief  PINMUX enter dlps callback function(Save PINMUX register values when system enter DLPS)
;;;103      * @param  None
;;;104      * @retval None
;;;105      */
;;;106    __STATIC_INLINE  void Pinmux_DLPS_Enter(void)
;;;107    {
;;;108        uint8_t i = 0;
;;;109    
;;;110        for (i = 0; i < 10; i++)
;;;111        {
;;;112            Pinmux_StoreReg[i] = PINMUX->CFG[i];
        0x0080f06e:    f1030190    ....    ADD      r1,r3,#0x90
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_io_dlps.c (108)
        0x0080f072:    6018        .`      STR      r0,[r3,#0]
        0x0080f074:    2000        .       MOVS     r0,#0
;;;109    
;;;110        for (i = 0; i < 10; i++)
;;;111        {
;;;112            Pinmux_StoreReg[i] = PINMUX->CFG[i];
        0x0080f076:    0082        ..      LSLS     r2,r0,#2
        0x0080f078:    f1024280    ...B    ADD      r2,r2,#0x40000000
        0x0080f07c:    f8d22280    ..."    LDR      r2,[r2,#0x280]
        0x0080f080:    f8412020    A.      STR      r2,[r1,r0,LSL #2]
        0x0080f084:    1c40        @.      ADDS     r0,r0,#1
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_io_dlps.c (110)
        0x0080f086:    b2c0        ..      UXTB     r0,r0
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_io_dlps.c (110)
        0x0080f088:    280a        .(      CMP      r0,#0xa
        0x0080f08a:    d3f4        ..      BCC      0x80f076 ; DLPS_IO_EnterDlpsCb + 78
;;;111        {
;;;112            Pinmux_StoreReg[i] = PINMUX->CFG[i];
;;;113        }
;;;114    
;;;115        return;
;;;116    }
;;;117    
;;;118    /**
;;;119      * @brief  PINMUX exit dlps callback function(Resume PINMUX register values when system exit DLPS)
;;;120      * @param  None
;;;121      * @retval None
;;;122      */
;;;123    DATA_RAM_FUNCTION __STATIC_INLINE  void Pinmux_DLPS_Exit(void)
;;;124    {
;;;125        uint8_t i;
;;;126    
;;;127        for (i = 0; i < 10; i++)
;;;128        {
;;;129            PINMUX->CFG[i] = Pinmux_StoreReg[i];
;;;130        }
;;;131    
;;;132        return;
;;;133    }
;;;134    #endif
;;;135    
;;;136    /********************************************** ********************************************************/
;;;137    /**************************************** [GPIO DLPS] **************************************************/
;;;138    /*******************************************************************************************************/
;;;139    /*******************************************************************************************************/
;;;140    #if USE_GPIO_DLPS
;;;141    
;;;142    __STATIC_INLINE void GPIO_DLPS_Enter(void);
;;;143    __STATIC_INLINE void GPIO_DLPS_Exit(void);
;;;144    
;;;145    uint32_t GPIO_StoreReg[9];         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;146    
;;;147    /**
;;;148      * @brief  GPIO enter dlps callback function(Save GPIO register values when system enter DLPS)
;;;149      * @param  None
;;;150      * @retval None
;;;151      */
;;;152    __STATIC_INLINE void GPIO_DLPS_Enter(void)
;;;153    {
;;;154        PERIPH->PERI_FUNC1_EN |= BIT_PERI_GPIO_EN;
;;;155        PERIPH->PERI_CLK_CTRL |= (BIT_SOC_ACTCK_GPIO_EN | SYSBLK_SLPCK_GPIO_EN_Msk);
;;;156    
;;;157        GPIO_StoreReg[0] = GPIO->DATAOUT;
;;;158        GPIO_StoreReg[1] = GPIO->DATADIR;
;;;159        GPIO_StoreReg[2] = GPIO->DATASRC;
;;;160        GPIO_StoreReg[3] = GPIO->INTEN;
;;;161        GPIO_StoreReg[4] = GPIO->INTMASK;
;;;162        GPIO_StoreReg[5] = GPIO->INTTYPE;
;;;163        GPIO_StoreReg[6] = GPIO->INTPOLARITY;
;;;164        GPIO_StoreReg[7] = GPIO->DEBOUNCE;
;;;165        GPIO_StoreReg[8] = *(__IO uint32_t *)(0x40000344UL);
;;;166    
;;;167        return;
;;;168    }
;;;169    
;;;170    /**
;;;171      * @brief  GPIO exit dlps callback function(Resume GPIO register values when system exit DLPS)
;;;172      * @param  None
;;;173      * @retval None
;;;174      */
;;;175    DATA_RAM_FUNCTION __STATIC_INLINE void GPIO_DLPS_Exit(void)
;;;176    {
;;;177        PERIPH->PERI_FUNC1_EN |= BIT_PERI_GPIO_EN;
;;;178        PERIPH->PERI_CLK_CTRL |= (BIT_SOC_ACTCK_GPIO_EN | SYSBLK_SLPCK_GPIO_EN_Msk);
;;;179    
;;;180        GPIO->DATADIR       = GPIO_StoreReg[1];
;;;181        GPIO->DATASRC       = GPIO_StoreReg[2];
;;;182        GPIO->INTMASK       = GPIO_StoreReg[4];
;;;183        GPIO->INTTYPE       = GPIO_StoreReg[5];
;;;184        GPIO->INTPOLARITY   = GPIO_StoreReg[6];
;;;185        GPIO->DEBOUNCE      = GPIO_StoreReg[7];
;;;186        GPIO->DATAOUT       = GPIO_StoreReg[0];
;;;187        GPIO->INTCLR        = ~(GPIO_StoreReg[1]);
;;;188        GPIO->INTEN         = GPIO_StoreReg[3];
;;;189        *(__IO uint32_t *)(0x40000344UL) = GPIO_StoreReg[8];
;;;190    
;;;191        return;
;;;192    }
;;;193    #endif  /* USE_GPIO_DLPS */
;;;194    
;;;195    
;;;196    /********************************************** ********************************************************/
;;;197    /**************************************** [KEYSCAN DLPS] ***********************************************/
;;;198    /*******************************************************************************************************/
;;;199    /*******************************************************************************************************/
;;;200    #if USE_KEYSCAN_DLPS
;;;201    __STATIC_INLINE void KeyScan_DLPS_Enter(void);
;;;202    __STATIC_INLINE void KeyScan_DLPS_Exit(void);
;;;203    
;;;204    uint32_t KeyScan_StoreReg[7];      /*  This array should be placed in RAM ON/Buffer ON.    */
;;;205    
;;;206    /**
;;;207      * @brief  KEYSCAN enter dlps callback function(Save KEYSCAN register values when system enter DLPS)
;;;208      * @param  None
;;;209      * @retval None
;;;210      */
;;;211    __STATIC_INLINE void KeyScan_DLPS_Enter(void)
;;;212    {
;;;213        /*Open 5M clock source*/
;;;214        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;215        SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
;;;216    
;;;217        PERIPH->PERI_FUNC0_EN |= BIT_PERI_KEYSCAN_EN;
;;;218        PERIPH->PERI_CLK_CTRL1 |= (BIT_SOC_ACTCK_KEYSCAN_EN | SYSBLK_SLPCK_KEYSCAN_EN_Msk);
;;;219    
;;;220        KeyScan_StoreReg[0] = KEYSCAN->CLKDIV;               /* 0x00 */
;;;221        KeyScan_StoreReg[1] = KEYSCAN->TIMERCR;              /* 0x04 */
;;;222        KeyScan_StoreReg[2] = KEYSCAN->CR;                   /* 0x08 */
;;;223        KeyScan_StoreReg[3] = KEYSCAN->COLCR;                /* 0x0C */
;;;224        KeyScan_StoreReg[4] = KEYSCAN->ROWCR;                /* 0x10 */
;;;225        KeyScan_StoreReg[6] = KEYSCAN->INTMASK;              /* 0x18 */
;;;226    
;;;227        return;
;;;228    }
;;;229    
;;;230    /**
;;;231      * @brief  KEYSCAN exit dlps callback function(Resume KEYSCAN register values when system exit DLPS)
;;;232      * @param  None
;;;233      * @retval None
;;;234      */
;;;235    DATA_RAM_FUNCTION __STATIC_INLINE void KeyScan_DLPS_Exit(void)
;;;236    {
;;;237        /*Open 5M clock source*/
;;;238        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;239        SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
;;;240    
;;;241        PERIPH->PERI_FUNC0_EN |= BIT_PERI_KEYSCAN_EN;
;;;242        PERIPH->PERI_CLK_CTRL1 |= (BIT_SOC_ACTCK_KEYSCAN_EN | SYSBLK_SLPCK_KEYSCAN_EN_Msk);
;;;243    
;;;244        /* Set FSM to idle state */
;;;245        KEYSCAN->CR &= ~BIT31;
;;;246        KEYSCAN->CLKDIV = KeyScan_StoreReg[0];
;;;247        KEYSCAN->CR = (KeyScan_StoreReg[2] & (~(BIT31)));
;;;248        KEYSCAN->TIMERCR = KeyScan_StoreReg[1];
;;;249        KEYSCAN->COLCR = KeyScan_StoreReg[3];
;;;250        KEYSCAN->ROWCR = KeyScan_StoreReg[4];
;;;251        KEYSCAN->INTMASK = KeyScan_StoreReg[6];
;;;252        KEYSCAN->CR |= (KeyScan_StoreReg[2] & ((BIT31)));
;;;253    
;;;254        return;
;;;255    }
;;;256    #endif /* USE_KEYSCAN_DLPS */
;;;257    
;;;258    
;;;259    /********************************************** ********************************************************/
;;;260    /**************************************** [QDEC DLPS] **************************************************/
;;;261    /*******************************************************************************************************/
;;;262    /*******************************************************************************************************/
;;;263    #if USE_QDECODER_DLPS
;;;264    __STATIC_INLINE void QuadDecoder_DLPS_Enter(void);
;;;265    __STATIC_INLINE void QuadDecoder_DLPS_Exit(void);
;;;266    
;;;267    uint32_t QuadDecoder_StoreReg[5];  /*  This array should be placed in RAM ON/Buffer ON.    */
;;;268    
;;;269    /**
;;;270      * @brief  QDEC enter dlps callback function(Save QDEC register values when system enter DLPS)
;;;271      * @param  None
;;;272      * @retval None
;;;273      */
;;;274    __STATIC_INLINE void QuadDecoder_DLPS_Enter(void)
;;;275    {
;;;276        /*Open 20M clock source*/
;;;277        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;278        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;279        SYSBLKCTRL->u_218.PERI_FUNC0_EN |= SYSBLK_QDECODE_EN_Msk;
;;;280        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_QDECODE_EN_Msk | SYSBLK_SLPCK_QDECODE_EN_Msk);
;;;281    
;;;282        QuadDecoder_StoreReg[0] = QDEC->REG_DIV;
;;;283        QuadDecoder_StoreReg[1] = QDEC->REG_CR_X;
;;;284        QuadDecoder_StoreReg[2] = QDEC->REG_CR_Y;
;;;285        QuadDecoder_StoreReg[3] = QDEC->REG_CR_Z;
;;;286        QuadDecoder_StoreReg[4] = QDEC->INT_MASK;
;;;287    
;;;288        return;
;;;289    }
;;;290    
;;;291    /**
;;;292      * @brief  QDEC exit dlps callback function(Resume QDEC register values when system exit DLPS)
;;;293      * @param  None
;;;294      * @retval None
;;;295      */
;;;296    DATA_RAM_FUNCTION __STATIC_INLINE void QuadDecoder_DLPS_Exit(void)
;;;297    {
;;;298        /*Open 20M clock source*/
;;;299        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;300        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;301        SYSBLKCTRL->u_218.PERI_FUNC0_EN |= SYSBLK_QDECODE_EN_Msk;
;;;302        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_QDECODE_EN_Msk | SYSBLK_SLPCK_QDECODE_EN_Msk);
;;;303    
;;;304        //clear flags
;;;305        QDEC->REG_DIV  = QuadDecoder_StoreReg[0];
;;;306        QDEC->REG_CR_X = QuadDecoder_StoreReg[1];
;;;307        QDEC->REG_CR_Y = QuadDecoder_StoreReg[2];
;;;308        QDEC->REG_CR_Z = QuadDecoder_StoreReg[3];
;;;309        QDEC->INT_MASK = QuadDecoder_StoreReg[4];
;;;310    
;;;311        return;
;;;312    }
;;;313    #endif
;;;314    
;;;315    /********************************************** ********************************************************/
;;;316    /**************************************** [SPI0 DLPS] **************************************************/
;;;317    /*******************************************************************************************************/
;;;318    /*******************************************************************************************************/
;;;319    #if USE_SPI0_DLPS
;;;320    __STATIC_INLINE void SPI0_DLPS_Enter(void);
;;;321    __STATIC_INLINE void SPI0_DLPS_Exit(void);
;;;322    
;;;323    uint32_t SPI0_StoreReg[13];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;324    
;;;325    /**
;;;326      * @brief  SPI0 enter dlps callback function(Save SPI0 register values when system enter DLPS)
;;;327      * @param  None
;;;328      * @retval None
;;;329      */
;;;330    __STATIC_INLINE void SPI0_DLPS_Enter(void)
;;;331    {
;;;332        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI0_EN_Msk;
;;;333        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI0_EN_Msk | SYSBLK_SLPCK_SPI0_EN_Msk);
;;;334    
;;;335        SPI0_StoreReg[0] = SPI0->CTRLR0;
;;;336        SPI0_StoreReg[1] = SPI0->CTRLR1;
;;;337        SPI0_StoreReg[2] = SPI0->SSIENR;
;;;338        SPI0_StoreReg[3] = SPI0->SER;
;;;339        SPI0_StoreReg[4] = SPI0->BAUDR;
;;;340        SPI0_StoreReg[5] = SPI0->TXFTLR;
;;;341        SPI0_StoreReg[6] = SPI0->RXFTLR;
;;;342        SPI0_StoreReg[7] = SPI0->IMR;
;;;343        SPI0_StoreReg[8] = SPI0->DMACR;
;;;344        SPI0_StoreReg[9] = SPI0->DMATDLR;
;;;345        SPI0_StoreReg[10] = SPI0->DMARDLR;
;;;346        SPI0_StoreReg[11] = SPI0->RX_SAMPLE_DLY;
;;;347        SPI0_StoreReg[12] = *(volatile uint32_t *)0x40000308;
;;;348    }
;;;349    
;;;350    /**
;;;351      * @brief  SPI0 exit dlps callback function(Resume SPI0 register values when system exit DLPS)
;;;352      * @param  None
;;;353      * @retval None
;;;354      */
;;;355    DATA_RAM_FUNCTION __STATIC_INLINE void SPI0_DLPS_Exit(void)
;;;356    {
;;;357        *(volatile uint32_t *)0x40000308 = SPI0_StoreReg[12];
;;;358        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI0_EN_Msk;
;;;359        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI0_EN_Msk | SYSBLK_SLPCK_SPI0_EN_Msk);
;;;360    
;;;361        SPI0->CTRLR0 = SPI0_StoreReg[0];
;;;362        SPI0->CTRLR1 = SPI0_StoreReg[1];
;;;363        SPI0->SER = SPI0_StoreReg[3];
;;;364        SPI0->BAUDR = SPI0_StoreReg[4];
;;;365        SPI0->TXFTLR = SPI0_StoreReg[5];
;;;366        SPI0->RXFTLR = SPI0_StoreReg[6];
;;;367        SPI0->IMR = SPI0_StoreReg[7];
;;;368        SPI0->DMACR = SPI0_StoreReg[8];
;;;369        SPI0->DMATDLR = SPI0_StoreReg[9];
;;;370        SPI0->DMARDLR = SPI0_StoreReg[10];
;;;371        SPI0->RX_SAMPLE_DLY = SPI0_StoreReg[11];
;;;372    
;;;373        /* Enable the selected SPI peripheral */
;;;374        SPI0->SSIENR = SPI0_StoreReg[2];
;;;375    }
;;;376    #endif
;;;377    
;;;378    
;;;379    /********************************************** ********************************************************/
;;;380    /**************************************** [SPI1 DLPS] **************************************************/
;;;381    /*******************************************************************************************************/
;;;382    /*******************************************************************************************************/
;;;383    #if USE_SPI1_DLPS
;;;384    __STATIC_INLINE void SPI1_DLPS_Enter(void);
;;;385    __STATIC_INLINE void SPI1_DLPS_Exit(void);
;;;386    
;;;387    uint32_t SPI1_StoreReg[13];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;388    
;;;389    /**
;;;390      * @brief  SPI1 enter dlps callback function(Save SPI1 register values when system enter DLPS)
;;;391      * @param  None
;;;392      * @retval None
;;;393      */
;;;394    __STATIC_INLINE void SPI1_DLPS_Enter(void)
;;;395    {
;;;396        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI1_EN_Msk;
;;;397        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI1_EN_Msk | SYSBLK_SLPCK_SPI1_EN_Msk);
;;;398    
;;;399        SPI1_StoreReg[0] = SPI1->CTRLR0;
;;;400        SPI1_StoreReg[1] = SPI1->CTRLR1;
;;;401        SPI1_StoreReg[2] = SPI1->SSIENR;
;;;402        SPI1_StoreReg[3] = SPI1->SER;
;;;403        SPI1_StoreReg[4] = SPI1->BAUDR;
;;;404        SPI1_StoreReg[5] = SPI1->TXFTLR;
;;;405        SPI1_StoreReg[6] = SPI1->RXFTLR;
;;;406        SPI1_StoreReg[7] = SPI1->IMR;
;;;407        SPI1_StoreReg[8] = SPI1->DMACR;
;;;408        SPI1_StoreReg[9] = SPI1->DMATDLR;
;;;409        SPI1_StoreReg[10] = SPI1->DMARDLR;
;;;410        SPI1_StoreReg[11] = SPI1->RX_SAMPLE_DLY;
;;;411        SPI1_StoreReg[12] = *(volatile uint32_t *)0x40000308;
;;;412    }
;;;413    
;;;414    /**
;;;415      * @brief  SPI1 exit dlps callback function(Resume SPI1 register values when system exit DLPS)
;;;416      * @param  None
;;;417      * @retval None
;;;418      */
;;;419    DATA_RAM_FUNCTION __STATIC_INLINE void SPI1_DLPS_Exit(void)
;;;420    {
;;;421        *(volatile uint32_t *)0x40000308 = SPI1_StoreReg[12];
;;;422        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI1_EN_Msk;
;;;423        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI1_EN_Msk | SYSBLK_SLPCK_SPI1_EN_Msk);
;;;424    
;;;425        SPI1->CTRLR0 = SPI1_StoreReg[0];
;;;426        SPI1->CTRLR1 = SPI1_StoreReg[1];
;;;427        SPI1->SER = SPI1_StoreReg[3];
;;;428        SPI1->BAUDR = SPI1_StoreReg[4];
;;;429        SPI1->TXFTLR = SPI1_StoreReg[5];
;;;430        SPI1->RXFTLR = SPI1_StoreReg[6];
;;;431        SPI1->IMR = SPI1_StoreReg[7];
;;;432        SPI1->DMACR = SPI1_StoreReg[8];
;;;433        SPI1->DMATDLR = SPI1_StoreReg[9];
;;;434        SPI1->DMARDLR = SPI1_StoreReg[10];
;;;435        SPI1->RX_SAMPLE_DLY = SPI1_StoreReg[11];
;;;436    
;;;437        /* Enable the selected SPI peripheral */
;;;438        SPI1->SSIENR = SPI1_StoreReg[2];
;;;439    }
;;;440    #endif
;;;441    
;;;442    /********************************************** ********************************************************/
;;;443    /**************************************** [SPI2W DLPS] **************************************************/
;;;444    /*******************************************************************************************************/
;;;445    /*******************************************************************************************************/
;;;446    #if USE_SPI2W_DLPS
;;;447    __STATIC_INLINE void SPI2W_DLPS_Enter(void);
;;;448    __STATIC_INLINE void SPI2W_DLPS_Exit(void);
;;;449    
;;;450    uint32_t SPI2W_StoreReg[1];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;451    
;;;452    /**
;;;453      * @brief  SPI2W enter dlps callback function(Save SPI2W register values when system enter DLPS)
;;;454      * @param  None
;;;455      * @retval None
;;;456      */
;;;457    __STATIC_INLINE void SPI2W_DLPS_Enter(void)
;;;458    {
;;;459        /*Open 20M clock source*/
;;;460        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;461        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;462    
;;;463        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI2W_EN_Msk;
;;;464        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_SPI2WIRE_EN_Msk | SYSBLK_SLPCK_SPI2WIRE_EN_Msk);
;;;465    
;;;466        SPI2W_StoreReg[0] = SPI3WIRE->CFGR;
;;;467    }
;;;468    
;;;469    /**
;;;470      * @brief  SPI2W exit dlps callback function(Resume SPI2W register values when system exit DLPS)
;;;471      * @param  None
;;;472      * @retval None
;;;473      */
;;;474    DATA_RAM_FUNCTION __STATIC_INLINE void SPI2W_DLPS_Exit(void)
;;;475    {
;;;476        /*Open 20M clock source*/
;;;477        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;478        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;479    
;;;480        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI2W_EN_Msk;
;;;481        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_SPI2WIRE_EN_Msk | SYSBLK_SLPCK_SPI2WIRE_EN_Msk);
;;;482    
;;;483        SPI3WIRE->CFGR = SPI2W_StoreReg[0];
;;;484    }
;;;485    #endif
;;;486    
;;;487    /********************************************** ********************************************************/
;;;488    /**************************************** [I2C0 DLPS] **************************************************/
;;;489    /*******************************************************************************************************/
;;;490    /*******************************************************************************************************/
;;;491    #if USE_I2C0_DLPS
;;;492    __STATIC_INLINE void I2C0_DLPS_Enter(void);
;;;493    __STATIC_INLINE void I2C0_DLPS_Exit(void);
;;;494    
;;;495    uint32_t I2C0_StoreReg[20];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;496    
;;;497    /**
;;;498      * @brief  I2C0 enter dlps callback function(Save I2C0 register values when system enter DLPS)
;;;499      * @param  None
;;;500      * @retval None
;;;501      */
;;;502    __STATIC_INLINE void I2C0_DLPS_Enter(void)
;;;503    {
;;;504        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C0_EN_Msk | SYSBLK_SLPCK_I2C0_EN_Msk);
;;;505        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C0_EN_Msk;
;;;506    
;;;507        I2C0_StoreReg[0] = I2C0->IC_CON;
;;;508        I2C0_StoreReg[1] = I2C0->IC_TAR;
;;;509        I2C0_StoreReg[2] = I2C0->IC_SAR;
;;;510        I2C0_StoreReg[3] = I2C0->IC_HS_MADDR;
;;;511    
;;;512        I2C0_StoreReg[4] = I2C0->IC_SS_SCL_HCNT;
;;;513        I2C0_StoreReg[5] = I2C0->IC_SS_SCL_LCNT;
;;;514        I2C0_StoreReg[6] = I2C0->IC_FS_SCL_HCNT;
;;;515        I2C0_StoreReg[7] = I2C0->IC_FS_SCL_LCNT;
;;;516        I2C0_StoreReg[8] = I2C0->IC_HS_SCL_HCNT;
;;;517        I2C0_StoreReg[9] = I2C0->IC_HS_SCL_LCNT;
;;;518    
;;;519        I2C0_StoreReg[10] = I2C0->IC_INTR_MASK;
;;;520        I2C0_StoreReg[11] = I2C0->IC_RX_TL;
;;;521        I2C0_StoreReg[12] = I2C0->IC_TX_TL;
;;;522        I2C0_StoreReg[13] = I2C0->IC_ENABLE;
;;;523        I2C0_StoreReg[14] = I2C0->IC_SDA_HOLD;
;;;524        I2C0_StoreReg[15] = I2C0->IC_SLV_DATA_NACK_ONLY;
;;;525        I2C0_StoreReg[16] = I2C0->IC_DMA_CR;
;;;526        I2C0_StoreReg[17] = I2C0->IC_DMA_TDLR;
;;;527        I2C0_StoreReg[18] = I2C0->IC_DMA_RDLR;
;;;528    
;;;529        I2C0_StoreReg[19] = I2C0->IC_SDA_SETUP;
;;;530    }
;;;531    
;;;532    /**
;;;533      * @brief  I2C0 exit dlps callback function(Resume I2C0 register values when system exit DLPS)
;;;534      * @param  None
;;;535      * @retval None
;;;536      */
;;;537    DATA_RAM_FUNCTION __STATIC_INLINE void I2C0_DLPS_Exit(void)
;;;538    {
;;;539        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C0_EN_Msk | SYSBLK_SLPCK_I2C0_EN_Msk);
;;;540        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C0_EN_Msk;
;;;541    
;;;542        I2C0->IC_CON = I2C0_StoreReg[0];
;;;543        I2C0->IC_TAR = I2C0_StoreReg[1];
;;;544        I2C0->IC_SAR = I2C0_StoreReg[2];
;;;545        I2C0->IC_HS_MADDR = I2C0_StoreReg[3];
;;;546    
;;;547        I2C0->IC_SS_SCL_HCNT = I2C0_StoreReg[4];
;;;548        I2C0->IC_SS_SCL_LCNT = I2C0_StoreReg[5];
;;;549        I2C0->IC_FS_SCL_HCNT = I2C0_StoreReg[6];
;;;550        I2C0->IC_FS_SCL_LCNT = I2C0_StoreReg[7];
;;;551        I2C0->IC_HS_SCL_HCNT = I2C0_StoreReg[8];
;;;552        I2C0->IC_HS_SCL_LCNT = I2C0_StoreReg[9];
;;;553    
;;;554        I2C0->IC_INTR_MASK = I2C0_StoreReg[10];
;;;555        I2C0->IC_RX_TL = I2C0_StoreReg[11];
;;;556        I2C0->IC_TX_TL = I2C0_StoreReg[12];
;;;557        I2C0->IC_SDA_HOLD = I2C0_StoreReg[14];
;;;558        I2C0->IC_SLV_DATA_NACK_ONLY = I2C0_StoreReg[15];
;;;559        I2C0->IC_DMA_CR = I2C0_StoreReg[16];
;;;560        I2C0->IC_DMA_TDLR = I2C0_StoreReg[17];
;;;561        I2C0->IC_DMA_RDLR = I2C0_StoreReg[18];
;;;562        I2C0->IC_SDA_SETUP = I2C0_StoreReg[19];
;;;563    
;;;564        I2C0->IC_ENABLE = I2C0_StoreReg[13];
;;;565    }
;;;566    #endif
;;;567    
;;;568    /********************************************** ********************************************************/
;;;569    /**************************************** [I2C1 DLPS] **************************************************/
;;;570    /*******************************************************************************************************/
;;;571    /*******************************************************************************************************/
;;;572    #if USE_I2C1_DLPS
;;;573    __STATIC_INLINE void I2C1_DLPS_Enter(void);
;;;574    __STATIC_INLINE void I2C1_DLPS_Exit(void);
;;;575    
;;;576    uint32_t I2C1_StoreReg[20];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;577    
;;;578    /**
;;;579      * @brief  I2C1 enter dlps callback function(Save I2C1 register values when system enter DLPS)
;;;580      * @param  None
;;;581      * @retval None
;;;582      */
;;;583    __STATIC_INLINE void I2C1_DLPS_Enter(void)
;;;584    {
;;;585        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C1_EN_Msk | SYSBLK_SLPCK_I2C1_EN_Msk);
;;;586        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C1_EN_Msk;
;;;587    
;;;588        I2C1_StoreReg[0] = I2C1->IC_CON;
;;;589        I2C1_StoreReg[1] = I2C1->IC_TAR;
;;;590        I2C1_StoreReg[2] = I2C1->IC_SAR;
;;;591        I2C1_StoreReg[3] = I2C1->IC_HS_MADDR;
;;;592    
;;;593        I2C1_StoreReg[4] = I2C1->IC_SS_SCL_HCNT;
;;;594        I2C1_StoreReg[5] = I2C1->IC_SS_SCL_LCNT;
;;;595        I2C1_StoreReg[6] = I2C1->IC_FS_SCL_HCNT;
;;;596        I2C1_StoreReg[7] = I2C1->IC_FS_SCL_LCNT;
;;;597        I2C1_StoreReg[8] = I2C1->IC_HS_SCL_HCNT;
;;;598        I2C1_StoreReg[9] = I2C1->IC_HS_SCL_LCNT;
;;;599    
;;;600        I2C1_StoreReg[10] = I2C1->IC_INTR_MASK;
;;;601        I2C1_StoreReg[11] = I2C1->IC_RX_TL;
;;;602        I2C1_StoreReg[12] = I2C1->IC_TX_TL;
;;;603        I2C1_StoreReg[13] = I2C1->IC_ENABLE;
;;;604        I2C1_StoreReg[14] = I2C1->IC_SDA_HOLD;
;;;605        I2C1_StoreReg[15] = I2C1->IC_SLV_DATA_NACK_ONLY;
;;;606        I2C1_StoreReg[16] = I2C1->IC_DMA_CR;
;;;607        I2C1_StoreReg[17] = I2C1->IC_DMA_TDLR;
;;;608        I2C1_StoreReg[18] = I2C1->IC_DMA_RDLR;
;;;609    
;;;610        I2C1_StoreReg[19] = I2C1->IC_SDA_SETUP;
;;;611    }
;;;612    
;;;613    /**
;;;614      * @brief  I2C1 exit dlps callback function(Resume I2C1 register values when system exit DLPS)
;;;615      * @param  None
;;;616      * @retval None
;;;617      */
;;;618    DATA_RAM_FUNCTION __STATIC_INLINE void I2C1_DLPS_Exit(void)
;;;619    {
;;;620        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C1_EN_Msk | SYSBLK_SLPCK_I2C1_EN_Msk);
;;;621        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C1_EN_Msk;
;;;622    
;;;623        I2C1->IC_CON = I2C1_StoreReg[0];
;;;624        I2C1->IC_TAR = I2C1_StoreReg[1];
;;;625        I2C1->IC_SAR = I2C1_StoreReg[2];
;;;626        I2C0->IC_HS_MADDR = I2C1_StoreReg[3];
;;;627    
;;;628        I2C1->IC_SS_SCL_HCNT = I2C1_StoreReg[4];
;;;629        I2C1->IC_SS_SCL_LCNT = I2C1_StoreReg[5];
;;;630        I2C1->IC_FS_SCL_HCNT = I2C1_StoreReg[6];
;;;631        I2C1->IC_FS_SCL_LCNT = I2C1_StoreReg[7];
;;;632        I2C1->IC_HS_SCL_HCNT = I2C1_StoreReg[8];
;;;633        I2C1->IC_HS_SCL_LCNT = I2C1_StoreReg[9];
;;;634    
;;;635        I2C1->IC_INTR_MASK = I2C1_StoreReg[10];
;;;636        I2C1->IC_RX_TL = I2C1_StoreReg[11];
;;;637        I2C1->IC_TX_TL = I2C1_StoreReg[12];
;;;638        I2C1->IC_SDA_HOLD = I2C1_StoreReg[14];
;;;639        I2C1->IC_SLV_DATA_NACK_ONLY = I2C1_StoreReg[15];
;;;640        I2C1->IC_DMA_CR = I2C1_StoreReg[16];
;;;641        I2C1->IC_DMA_TDLR = I2C1_StoreReg[17];
;;;642        I2C1->IC_DMA_RDLR = I2C1_StoreReg[18];
;;;643        I2C1->IC_SDA_SETUP = I2C1_StoreReg[19];
;;;644    
;;;645        I2C1->IC_ENABLE = I2C1_StoreReg[13];
;;;646    }
;;;647    #endif
;;;648    
;;;649    /********************************************** ********************************************************/
;;;650    /**************************************** [Timer & PWM DLPS] *******************************************/
;;;651    /*******************************************************************************************************/
;;;652    /*******************************************************************************************************/
;;;653    #if USE_TIM_DLPS
;;;654    #include "rtl876x_tim.h"
;;;655    __STATIC_INLINE void TIM_DLPS_Enter(void);
;;;656    __STATIC_INLINE void TIM_DLPS_Exit(void);
;;;657    
;;;658    uint32_t TIM_StoreReg[26];      /*  This array should be placed in RAM ON/Buffer ON.    */
;;;659    
;;;660    /* PWM, use with timer */
;;;661    uint32_t PWM0_StoreReg;         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;662    
;;;663    uint32_t PWM1_StoreReg;         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;664    
;;;665    /**
;;;666      * @brief  TIMER enter dlps callback function(Save TIMER register values when system enter DLPS)
;;;667      * @param  None
;;;668      * @retval None
;;;669      */
;;;670    __STATIC_INLINE void TIM_DLPS_Enter(void)
;;;671    {
;;;672        SYSBLKCTRL->u_210.SOC_FUNC_EN |= BIT(16);
;;;673        SYSBLKCTRL->u_230.CLK_CTRL |= (SYSBLK_ACTCK_TIMER_EN_Msk | SYSBLK_SLPCK_TIMER_EN_Msk);
;;;674    
;;;675        TIM_StoreReg[0] = TIM0->LoadCount;
;;;676        TIM_StoreReg[1] = TIM0->ControlReg;
;;;677        TIM_StoreReg[2] = TIMER0_LOAD_COUNT2;
;;;678    
;;;679        TIM_StoreReg[3] = TIM1->LoadCount;
;;;680        TIM_StoreReg[4] = TIM1->ControlReg;
;;;681        TIM_StoreReg[5] = TIMER1_LOAD_COUNT2;
;;;682    
;;;683        TIM_StoreReg[6] = TIM2->LoadCount;
;;;684        TIM_StoreReg[7] = TIM2->ControlReg;
;;;685        TIM_StoreReg[8] = TIMER2_LOAD_COUNT2;
;;;686    
;;;687        TIM_StoreReg[9] = TIM3->LoadCount;
;;;688        TIM_StoreReg[10] = TIM3->ControlReg;
;;;689        TIM_StoreReg[11] = TIMER3_LOAD_COUNT2;
;;;690    
;;;691        TIM_StoreReg[12] = TIM4->LoadCount;
;;;692        TIM_StoreReg[13] = TIM4->ControlReg;
;;;693        TIM_StoreReg[14] = TIMER4_LOAD_COUNT2;
;;;694    
;;;695        TIM_StoreReg[15] = TIM5->LoadCount;
;;;696        TIM_StoreReg[16] = TIM5->ControlReg;
;;;697        TIM_StoreReg[17] = TIMER5_LOAD_COUNT2;
;;;698    
;;;699        TIM_StoreReg[18] = TIM6->LoadCount;
;;;700        TIM_StoreReg[19] = TIM6->ControlReg;
;;;701        TIM_StoreReg[20] = TIMER6_LOAD_COUNT2;
;;;702    
;;;703        TIM_StoreReg[21] = TIM7->LoadCount;
;;;704        TIM_StoreReg[22] = TIM7->ControlReg;
;;;705        TIM_StoreReg[23] = TIMER7_LOAD_COUNT2;
;;;706    
;;;707        TIM_StoreReg[24] = *((volatile uint32_t *)0x4000035CUL);
;;;708        TIM_StoreReg[25] = *((volatile uint32_t *)0x40000360UL);
;;;709    
;;;710        PWM0_StoreReg = TIMER_PWM0_CR;
;;;711    
;;;712        PWM1_StoreReg = TIMER_PWM1_CR;
;;;713    }
;;;714    
;;;715    /**
;;;716      * @brief  TIMER exit dlps callback function(Resume TIMER register values when system exit DLPS)
;;;717      * @param  None
;;;718      * @retval None
;;;719      */
;;;720    DATA_RAM_FUNCTION __STATIC_INLINE void TIM_DLPS_Exit(void)
;;;721    {
;;;722        /* Enable timer IP clock and function */
;;;723        SYSBLKCTRL->u_210.SOC_FUNC_EN |= BIT(16);
;;;724        SYSBLKCTRL->u_230.CLK_CTRL |= (SYSBLK_ACTCK_TIMER_EN_Msk | SYSBLK_SLPCK_TIMER_EN_Msk);
;;;725    
;;;726        *((volatile uint32_t *)0x4000035CUL) = TIM_StoreReg[24];
;;;727        *((volatile uint32_t *)0x40000360UL) = TIM_StoreReg[25];
;;;728    
;;;729        TIM0->LoadCount = TIM_StoreReg[0];
;;;730        TIM0->ControlReg = TIM_StoreReg[1];
;;;731        TIMER0_LOAD_COUNT2 = TIM_StoreReg[2];
;;;732    
;;;733        TIM1->LoadCount = TIM_StoreReg[3];
;;;734        TIM1->ControlReg = TIM_StoreReg[4];
;;;735        TIMER1_LOAD_COUNT2 = TIM_StoreReg[5];
;;;736    
;;;737        TIM2->LoadCount = TIM_StoreReg[6];
;;;738        TIM2->ControlReg = TIM_StoreReg[7];
;;;739        TIMER2_LOAD_COUNT2 = TIM_StoreReg[8];
;;;740    
;;;741        TIM3->LoadCount = TIM_StoreReg[9];
;;;742        TIM3->ControlReg = TIM_StoreReg[10];
;;;743        TIMER3_LOAD_COUNT2 = TIM_StoreReg[11];
;;;744    
;;;745        TIM4->LoadCount = TIM_StoreReg[12];
;;;746        TIM4->ControlReg = TIM_StoreReg[13];
;;;747        TIMER4_LOAD_COUNT2 = TIM_StoreReg[14];
;;;748    
;;;749        TIM5->LoadCount = TIM_StoreReg[15];
;;;750        TIM5->ControlReg = TIM_StoreReg[16];
;;;751        TIMER5_LOAD_COUNT2 = TIM_StoreReg[17];
;;;752    
;;;753        TIM6->LoadCount = TIM_StoreReg[18];
;;;754        TIM6->ControlReg = TIM_StoreReg[19];
;;;755        TIMER6_LOAD_COUNT2 = TIM_StoreReg[20];
;;;756    
;;;757        TIM7->LoadCount = TIM_StoreReg[21];
;;;758        TIM7->ControlReg = TIM_StoreReg[22];
;;;759        TIMER7_LOAD_COUNT2 = TIM_StoreReg[23];
;;;760    
;;;761        TIMER_PWM0_CR = PWM0_StoreReg;
;;;762    
;;;763        TIMER_PWM1_CR = PWM1_StoreReg;
;;;764    }
;;;765    #endif  /* USE_TIM_DLPS */
;;;766    
;;;767    
;;;768    /********************************************** ********************************************************/
;;;769    /**************************************** [UART DLPS] **************************************************/
;;;770    /*******************************************************************************************************/
;;;771    /*******************************************************************************************************/
;;;772    #if USE_UART_DLPS
;;;773    #include "rtl876x_uart.h"
;;;774    
;;;775    __STATIC_INLINE void UART_DLPS_Enter(void);
;;;776    __STATIC_INLINE void UART_DLPS_Exit(void);
;;;777    
;;;778    uint32_t UART_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;779    
;;;780    /**
;;;781      * @brief  UART enter dlps callback function(Save UART register values when system enter DLPS)
;;;782      * @param  None
;;;783      * @retval None
;;;784      */
;;;785    __STATIC_INLINE void UART_DLPS_Enter(void)
;;;786    {
;;;787        PERIPH->PERI_FUNC0_EN |= (1 << 0);
;;;788        PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_UART0DATA_EN_Msk | SYSBLK_SLPCK_UART0DATA_EN_Msk);
;;;789    
;;;790        //access DLH and DLL
;;;791        UART->LCR |= (1 << 7);
;;;792        UART_StoreReg[0] = UART->DLL;
;;;793        UART_StoreReg[1] = UART->DLH_INTCR;
;;;794        UART->LCR &= (~(1 << 7));
;;;795    
;;;796        //save other registers
;;;797        UART_StoreReg[2] = UART->DLH_INTCR;
;;;798        UART_StoreReg[4] = UART->LCR;
;;;799        UART_StoreReg[5] = UART->MCR;
;;;800        UART_StoreReg[6] = UART->SPR;
;;;801        UART_StoreReg[7] = UART->STSR;
;;;802        UART_StoreReg[8] = UART->RX_IDLE_INTTCR;
;;;803        UART_StoreReg[9] = UART->RXIDLE_INTCR;
;;;804        UART_StoreReg[10] = UART->MISCR;
;;;805    
;;;806        return;
;;;807    }
;;;808    
;;;809    /**
;;;810      * @brief  UART exit dlps callback function(Resume UART register values when system exit DLPS)
;;;811      * @param  None
;;;812      * @retval None
;;;813      */
;;;814    DATA_RAM_FUNCTION __STATIC_INLINE void UART_DLPS_Exit(void)
;;;815    {
;;;816        PERIPH->PERI_FUNC0_EN |= (1 << 0);
;;;817        PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_UART0DATA_EN_Msk | SYSBLK_SLPCK_UART0DATA_EN_Msk);
;;;818    
;;;819        //access DLH and DLL
;;;820        UART->LCR |= (1 << 7);
;;;821        UART->DLL = UART_StoreReg[0];
;;;822        UART->DLH_INTCR =  UART_StoreReg[1];
;;;823        UART->LCR &= (~(1 << 7));
;;;824    
;;;825        //access other registers
;;;826        UART->INTID_FCR = (((UART_StoreReg[7] & BIT24) >> 21) | ((UART_StoreReg[7] & 0x7C000000) >> 18) |
;;;827                           (1));
;;;828        UART->LCR = UART_StoreReg[4];
;;;829        UART->MCR = UART_StoreReg[5];
;;;830        UART->SPR = UART_StoreReg[6];
;;;831        UART->STSR = UART_StoreReg[7];
;;;832        UART->DLH_INTCR = UART_StoreReg[2];
;;;833        UART->RX_IDLE_INTTCR = UART_StoreReg[8];
;;;834        UART->RXIDLE_INTCR = UART_StoreReg[9];
;;;835        UART->MISCR = UART_StoreReg[10];
;;;836    
;;;837        return;
;;;838    }
;;;839    #endif
;;;840    
;;;841    
;;;842    #if USE_UART1_DLPS
;;;843    
;;;844    __STATIC_INLINE void UART1_DLPS_Enter(void);
;;;845    __STATIC_INLINE void UART1_DLPS_Exit(void);
;;;846    
;;;847    uint32_t UART1_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;848    
;;;849    /**
;;;850      * @brief  UART1 enter dlps callback function(Save UART1 register values when system enter DLPS)
;;;851      * @param  None
;;;852      * @retval None
;;;853      */
;;;854    __STATIC_INLINE void UART1_DLPS_Enter(void)
;;;855    {
;;;856        //enable log uart peripheral & clock
;;;857        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;858        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;859    
;;;860        //access DLH and DLL
;;;861        UART1->LCR |= (1 << 7);
;;;862        UART1_StoreReg[0] = UART1->DLL;
;;;863        UART1_StoreReg[1] = UART1->DLH_INTCR;
;;;864        UART1->LCR &= (~(1 << 7));
;;;865    
;;;866        //save other registers
;;;867        UART1_StoreReg[2] = UART1->DLH_INTCR;
;;;868        UART1_StoreReg[4] = UART1->LCR;
;;;869        UART1_StoreReg[5] = UART1->MCR;
;;;870        UART1_StoreReg[6] = UART1->SPR;
;;;871        UART1_StoreReg[7] = UART1->STSR;
;;;872        UART1_StoreReg[8] = UART1->RX_IDLE_INTTCR;
;;;873        UART1_StoreReg[9] = UART1->RXIDLE_INTCR;
;;;874        UART1_StoreReg[10] = UART1->MISCR;
;;;875    
;;;876        return;
;;;877    }
;;;878    
;;;879    /**
;;;880      * @brief  UART1 exit dlps callback function(Resume UART1 register values when system exit DLPS)
;;;881      * @param  None
;;;882      * @retval None
;;;883      */
;;;884    DATA_RAM_FUNCTION __STATIC_INLINE void UART1_DLPS_Exit(void)
;;;885    {
;;;886        //enable log uart peripheral & clock
;;;887        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;888        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;889    
;;;890        //access DLH and DLL
;;;891        UART1->LCR |= (1 << 7);
;;;892        UART1->DLL = UART1_StoreReg[0];
;;;893        UART1->DLH_INTCR =  UART1_StoreReg[1];
;;;894        UART1->LCR &= (~(1 << 7));
;;;895    
;;;896        //access other registers
;;;897        UART1->INTID_FCR = (((UART1_StoreReg[7] & BIT24) >> 21) | ((UART1_StoreReg[7] & 0x7C000000)
;;;898                                                                   >> 18) | (1));
;;;899        UART1->LCR = UART1_StoreReg[4];
;;;900        UART1->MCR = UART1_StoreReg[5];
;;;901        UART1->SPR = UART1_StoreReg[6];
;;;902        UART1->STSR = UART1_StoreReg[7];
;;;903        UART1->DLH_INTCR = UART1_StoreReg[2];
;;;904        UART1->RX_IDLE_INTTCR = UART1_StoreReg[8];
;;;905        UART1->RXIDLE_INTCR = UART1_StoreReg[9];
;;;906        UART1->MISCR = UART1_StoreReg[10];
;;;907    
;;;908        return;
;;;909    }
;;;910    #endif
;;;911    
;;;912    #if USE_UART2_DLPS
;;;913    
;;;914    __STATIC_INLINE void UART2_DLPS_Enter(void);
;;;915    __STATIC_INLINE void UART2_DLPS_Exit(void);
;;;916    
;;;917    uint32_t UART2_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;918    
;;;919    /**
;;;920      * @brief  UART2 enter dlps callback function(Save UART2 register values when system enter DLPS)
;;;921      * @param  None
;;;922      * @retval None
;;;923      */
;;;924    __STATIC_INLINE void UART2_DLPS_Enter(void)
;;;925    {
;;;926        //enable log uart peripheral & clock
;;;927        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;928        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;929    
;;;930        //access DLH and DLL
;;;931        UART2->LCR |= (1 << 7);
;;;932        UART2_StoreReg[0] = UART2->DLL;
;;;933        UART2_StoreReg[1] = UART2->DLH_INTCR;
;;;934        UART2->LCR &= (~(1 << 7));
;;;935    
;;;936        //save other registers
;;;937        UART2_StoreReg[2] = UART2->DLH_INTCR;
;;;938        UART2_StoreReg[4] = UART2->LCR;
;;;939        UART2_StoreReg[5] = UART2->MCR;
;;;940        UART2_StoreReg[6] = UART2->SPR;
;;;941        UART2_StoreReg[7] = UART2->STSR;
;;;942        UART2_StoreReg[8] = UART2->RX_IDLE_INTTCR;
;;;943        UART2_StoreReg[9] = UART2->RXIDLE_INTCR;
;;;944        UART2_StoreReg[10] = UART2->MISCR;
;;;945    
;;;946        return;
;;;947    }
;;;948    
;;;949    /**
;;;950      * @brief  UART2 exit dlps callback function(Resume UART2 register values when system exit DLPS)
;;;951      * @param  None
;;;952      * @retval None
;;;953      */
;;;954    DATA_RAM_FUNCTION __STATIC_INLINE void UART2_DLPS_Exit(void)
;;;955    {
;;;956        //enable log uart peripheral & clock
;;;957        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;958        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;959    
;;;960        //access DLH and DLL
;;;961        UART2->LCR |= (1 << 7);
;;;962        UART2->DLL = UART2_StoreReg[0];
;;;963        UART2->DLH_INTCR =  UART2_StoreReg[1];
;;;964        UART2->LCR &= (~(1 << 7));
;;;965    
;;;966        //access other registers
;;;967        UART2->INTID_FCR = (((UART2_StoreReg[7] & BIT24) >> 21) | ((UART2_StoreReg[7] & 0x7C000000)
;;;968                                                                   >> 18) | (1));
;;;969        UART2->LCR = UART2_StoreReg[4];
;;;970        UART2->MCR = UART2_StoreReg[5];
;;;971        UART2->SPR = UART2_StoreReg[6];
;;;972        UART2->STSR = UART2_StoreReg[7];
;;;973        UART2->DLH_INTCR = UART2_StoreReg[2];
;;;974        UART2->RX_IDLE_INTTCR = UART2_StoreReg[8];
;;;975        UART2->RXIDLE_INTCR = UART2_StoreReg[9];
;;;976        UART2->MISCR = UART2_StoreReg[10];
;;;977    
;;;978        return;
;;;979    }
;;;980    #endif
;;;981    
;;;982    
;;;983    /********************************************** ********************************************************/
;;;984    /**************************************** [ADC DLPS] **************************************************/
;;;985    /*******************************************************************************************************/
;;;986    /*******************************************************************************************************/
;;;987    
;;;988    #if USE_ADC_DLPS
;;;989    __STATIC_INLINE void ADC_DLPS_Enter(void);
;;;990    __STATIC_INLINE void ADC_DLPS_Exit(void);
;;;991    
;;;992    uint32_t ADC_StoreReg[14];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;993    
;;;994    /**
;;;995      * @brief  ADC enter dlps callback function(Save ADC register values when system enter DLPS)
;;;996      * @param  None
;;;997      * @retval None
;;;998      */
;;;999    __STATIC_INLINE void ADC_DLPS_Enter(void)
;;;1000   {
;;;1001       /*Open 10M clock source*/
;;;1002       SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;1003       SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
;;;1004   
;;;1005       PERIPH->PERI_FUNC1_EN |= (1 << 0);
;;;1006       PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_ADC_EN_Msk | SYSBLK_SLPCK_ADC_EN_Msk);
;;;1007   
;;;1008       ADC_StoreReg[0] =  ADC->CR;          //0x04
;;;1009       ADC_StoreReg[1] =  ADC->SCHCR;       //0x08
;;;1010       ADC_StoreReg[2] =  ADC->INTCR;       //0x0C
;;;1011       ADC_StoreReg[3] =  ADC->SCHTAB0;     //0x10
;;;1012       ADC_StoreReg[4] =  ADC->SCHTAB1;     //0x14
;;;1013       ADC_StoreReg[5] =  ADC->SCHTAB2;     //0x18
;;;1014       ADC_StoreReg[6] =  ADC->SCHTAB3;     //0x1C
;;;1015       ADC_StoreReg[7] =  ADC->SCHTAB4;     //0x20
;;;1016       ADC_StoreReg[8] =  ADC->SCHTAB5;     //0x24
;;;1017       ADC_StoreReg[9] =  ADC->SCHTAB6;     //0x28
;;;1018       ADC_StoreReg[10] =  ADC->SCHTAB6;    //0x2C
;;;1019       ADC_StoreReg[11] =  ADC->PWRDLY;
;;;1020       ADC_StoreReg[12] =  ADC->DATCLK;
;;;1021       ADC_StoreReg[13] =  ADC->ANACTL;
;;;1022   
;;;1023       uint8_t reg_value = 0;
;;;1024       reg_value = btaon_fast_read_safe(0x110);
;;;1025       btaon_fast_write(0x110, reg_value & (~0x04));
;;;1026   
;;;1027       return;
;;;1028   }
;;;1029   
;;;1030   /**
;;;1031     * @brief  ADC exit dlps callback function(Resume ADC register values when system exit DLPS)
;;;1032     * @param  None
;;;1033     * @retval None
;;;1034     */
;;;1035   DATA_RAM_FUNCTION __STATIC_INLINE void ADC_DLPS_Exit(void)
;;;1036   {
;;;1037       /*Open 10M clock source*/
;;;1038       SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;1039       SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
;;;1040   
;;;1041       PERIPH->PERI_FUNC1_EN |= (1 << 0);
;;;1042       PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_ADC_EN_Msk | SYSBLK_SLPCK_ADC_EN_Msk);
;;;1043   
;;;1044   #if 0
;;;1045       //Todo
;;;1046       ADC->PWRDLY = ADC_StoreReg[10];
;;;1047       ADC->CR = (ADC_StoreReg[0] & (~((uint32_t)0x03)));
;;;1048       ADC->SCHTAB0 = ADC_StoreReg[3];
;;;1049       ADC->SCHTAB1 = ADC_StoreReg[4];
;;;1050       ADC->SCHTAB2 = ADC_StoreReg[5];
;;;1051       ADC->SCHTAB3 = ADC_StoreReg[6];
;;;1052       ADC->SCHTAB4 = ADC_StoreReg[7];
;;;1053       ADC->SCHTAB5 = ADC_StoreReg[8];
;;;1054       ADC->SCHTAB6 = ADC_StoreReg[9];
;;;1055       ADC->SCHCR = ADC_StoreReg[1];
;;;1056       ADC->INTCR = (ADC_StoreReg[2] & 0x1F);
;;;1057   #else
;;;1058       /*Disable all interrupt.*/
;;;1059       ADC->INTCR &= (~0x1f);
;;;1060   
;;;1061       /* Set power mode first */
;;;1062       ADC->PWRDLY = ADC_StoreReg[11];
;;;1063   
;;;1064       /* Disable schedule table */
;;;1065       ADC->SCHCR &= (~0xffff);
;;;1066   
;;;1067       ADC->SCHTAB0 = ADC_StoreReg[3];
;;;1068       ADC->SCHTAB1 = ADC_StoreReg[4];
;;;1069       ADC->SCHTAB2 = ADC_StoreReg[5];
;;;1070       ADC->SCHTAB3 = ADC_StoreReg[6];
;;;1071       ADC->SCHTAB4 = ADC_StoreReg[7];
;;;1072       ADC->SCHTAB5 = ADC_StoreReg[8];
;;;1073       ADC->SCHTAB6 = ADC_StoreReg[9];
;;;1074       ADC->SCHTAB7 = ADC_StoreReg[10];
;;;1075       ADC->SCHCR   = ADC_StoreReg[1];
;;;1076       ADC->CR = (ADC_StoreReg[0] & (~((uint32_t)0x03)));
;;;1077       ADC->DATCLK = ADC_StoreReg[12];
;;;1078       ADC->ANACTL = ADC_StoreReg[13];
;;;1079   
;;;1080       /*Clear ADC FIFO */
;;;1081       ADC->CR |= BIT26;
;;;1082       /* Clear all interrupt */
;;;1083       ADC->INTCR |= (0x1f << 8);
;;;1084   
;;;1085       /* Restore specify interrupt */
;;;1086       ADC->INTCR = ADC_StoreReg[2];
;;;1087   
;;;1088   #endif
;;;1089   
;;;1090       uint8_t reg_value = 0;
;;;1091       reg_value = btaon_fast_read_safe(0x110);
;;;1092       btaon_fast_write(0x110, reg_value | 0x04);
;;;1093   
;;;1094       return;
;;;1095   }
;;;1096   
;;;1097   #endif
;;;1098   
;;;1099   /********************************************** ********************************************************/
;;;1100   /**************************************** [IR DLPS] **************************************************/
;;;1101   /*******************************************************************************************************/
;;;1102   /*******************************************************************************************************/
;;;1103   
;;;1104   #if USE_IR_DLPS
;;;1105   __STATIC_INLINE void IR_DLPS_Enter(void);
;;;1106   __STATIC_INLINE void IR_DLPS_Exit(void);
;;;1107   
;;;1108   uint32_t IR_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1109   
;;;1110   /**
;;;1111     * @brief  IR enter dlps callback function(Save IR register values when system enter DLPS)
;;;1112     * @param  None
;;;1113     * @retval None
;;;1114     */
;;;1115   __STATIC_INLINE void IR_DLPS_Enter(void)
;;;1116   {
;;;1117       PERIPH->PERI_FUNC0_EN |= (1 << 10);
;;;1118       PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_IR_EN_Msk | SYSBLK_SLPCK_IR_EN_Msk);
;;;1119   
;;;1120       IR_StoreReg[0] = IR->CLK_DIV;
;;;1121       IR_StoreReg[1] = IR->TX_CONFIG;
;;;1122       IR_StoreReg[2] = IR->RX_CONFIG;
;;;1123       IR_StoreReg[3] = IR->RX_CNT_INT_SEL;
;;;1124   
;;;1125   
;;;1126       return;
;;;1127   }
;;;1128   
;;;1129   /**
;;;1130     * @brief  IR exit dlps callback function(Resume IR register values when system exit DLPS)
;;;1131     * @param  None
;;;1132     * @retval None
;;;1133     */
;;;1134   DATA_RAM_FUNCTION __STATIC_INLINE void IR_DLPS_Exit(void)
;;;1135   {
;;;1136       PERIPH->PERI_FUNC0_EN |= (1 << 10);
;;;1137       PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_IR_EN_Msk | SYSBLK_SLPCK_IR_EN_Msk);
;;;1138   
;;;1139       IR->CLK_DIV = IR_StoreReg[0];
;;;1140       if (IR_StoreReg[1] & BIT31)
;;;1141       {
;;;1142           /* RX MODE */
;;;1143           IR->TX_CONFIG  = IR_StoreReg[1];
;;;1144           IR->RX_CONFIG  = IR_StoreReg[2];
;;;1145           IR->RX_CNT_INT_SEL  = IR_StoreReg[3];
;;;1146       }
;;;1147       else
;;;1148       {
;;;1149           /* TX MODE */
;;;1150           IR->TX_CONFIG  = IR_StoreReg[1];
;;;1151           /* If IR TX mode is idle, must write one data firstly */
;;;1152           IR->TX_FIFO = 0;
;;;1153       }
;;;1154   
;;;1155       return;
;;;1156   }
;;;1157   
;;;1158   #endif
;;;1159   
;;;1160   /********************************************** ********************************************************/
;;;1161   /**************************************** [GDMA DLPS] **************************************************/
;;;1162   /*******************************************************************************************************/
;;;1163   /*******************************************************************************************************/
;;;1164   
;;;1165   #if USE_GDMA_DLPS
;;;1166   
;;;1167   __STATIC_INLINE void GDMA_DLPS_Enter(void);
;;;1168   __STATIC_INLINE void GDMA_DLPS_Exit(void);
;;;1169   uint32_t GDMA_StoreReg[7];         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1170   
;;;1171   #endif
;;;1172   
;;;1173   #if USE_GDMACHANNEL0_DLPS
;;;1174   uint32_t GDMAChannel0_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1175   #endif
;;;1176   
;;;1177   #if USE_GDMACHANNEL1_DLPS
;;;1178   uint32_t GDMAChannel1_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1179   #endif
;;;1180   
;;;1181   #if USE_GDMACHANNEL2_DLPS
;;;1182   uint32_t GDMAChannel2_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1183   #endif
;;;1184   
;;;1185   #if USE_GDMACHANNEL3_DLPS
;;;1186   uint32_t GDMAChannel3_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1187   #endif
;;;1188   
;;;1189   #if USE_GDMACHANNEL4_DLPS
;;;1190   uint32_t GDMAChannel4_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1191   #endif
;;;1192   
;;;1193   #if USE_GDMACHANNEL5_DLPS
;;;1194   uint32_t GDMAChannel5_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1195   #endif
;;;1196   
;;;1197   #if USE_GDMA_DLPS
;;;1198   /**
;;;1199     * @brief  GDMA enter dlps callback function(Save GDMA register values when system enter DLPS)
;;;1200     * @param  None
;;;1201     * @retval None
;;;1202     */
;;;1203   __STATIC_INLINE void GDMA_DLPS_Enter(void)
;;;1204   {
;;;1205       SYSBLKCTRL->u_210.SOC_FUNC_EN |= SYSBLK_GDMA0_EN_Msk;
;;;1206       PERIPH->PERI_CLK_CTRL |= (SYSBLK_ACTCK_GDMA0_EN_Msk | SYSBLK_SLPCK_GDMA0_EN_Msk);
;;;1207   
;;;1208       GDMA_StoreReg[0] = GDMA_BASE->DmaCfgReg;
;;;1209       GDMA_StoreReg[1] = GDMA_BASE->ChEnReg;
;;;1210       GDMA_StoreReg[2] = GDMA_BASE->MASK_TFR;
;;;1211       GDMA_StoreReg[3] = GDMA_BASE->MASK_BLOCK;
;;;1212       GDMA_StoreReg[4] = GDMA_BASE->MASK_SRC_TRAN;
;;;1213       GDMA_StoreReg[5] = GDMA_BASE->MASK_DST_TRAN;
;;;1214       GDMA_StoreReg[6] = GDMA_BASE->MASK_ERR;
;;;1215   
;;;1216   #if USE_GDMACHANNEL0_DLPS
;;;1217       GDMAChannel0_StoreReg[0] = GDMA_Channel0->SAR;
;;;1218       GDMAChannel0_StoreReg[1] = GDMA_Channel0->DAR;
;;;1219       GDMAChannel0_StoreReg[2] = GDMA_Channel0->CTL_LOW;
;;;1220       GDMAChannel0_StoreReg[3] = GDMA_Channel0->CTL_HIGH;
;;;1221       GDMAChannel0_StoreReg[4] = GDMA_Channel0->CFG_LOW;
;;;1222       GDMAChannel0_StoreReg[5] = GDMA_Channel0->CFG_HIGH;
;;;1223   #endif
;;;1224   #if USE_GDMACHANNEL1_DLPS
;;;1225       GDMAChannel1_StoreReg[0] = GDMA_Channel1->SAR;
;;;1226       GDMAChannel1_StoreReg[1] = GDMA_Channel1->DAR;
;;;1227       GDMAChannel1_StoreReg[2] = GDMA_Channel1->CTL_LOW;
;;;1228       GDMAChannel1_StoreReg[3] = GDMA_Channel1->CTL_HIGH;
;;;1229       GDMAChannel1_StoreReg[4] = GDMA_Channel1->CFG_LOW;
;;;1230       GDMAChannel1_StoreReg[5] = GDMA_Channel1->CFG_HIGH;
;;;1231   #endif
;;;1232   #if USE_GDMACHANNEL2_DLPS
;;;1233       GDMAChannel2_StoreReg[0] = GDMA_Channel2->SAR;
;;;1234       GDMAChannel2_StoreReg[1] = GDMA_Channel2->DAR;
;;;1235       GDMAChannel2_StoreReg[2] = GDMA_Channel2->CTL_LOW;
;;;1236       GDMAChannel2_StoreReg[3] = GDMA_Channel2->CTL_HIGH;
;;;1237       GDMAChannel2_StoreReg[4] = GDMA_Channel2->CFG_LOW;
;;;1238       GDMAChannel2_StoreReg[5] = GDMA_Channel2->CFG_HIGH;
;;;1239   #endif
;;;1240   #if USE_GDMACHANNEL3_DLPS
;;;1241       GDMAChannel3_StoreReg[0] = GDMA_Channel3->SAR;
;;;1242       GDMAChannel3_StoreReg[1] = GDMA_Channel3->DAR;
;;;1243       GDMAChannel3_StoreReg[2] = GDMA_Channel3->CTL_LOW;
;;;1244       GDMAChannel3_StoreReg[3] = GDMA_Channel3->CTL_HIGH;
;;;1245       GDMAChannel3_StoreReg[4] = GDMA_Channel3->CFG_LOW;
;;;1246       GDMAChannel3_StoreReg[5] = GDMA_Channel3->CFG_HIGH;
;;;1247   #endif
;;;1248   #if USE_GDMACHANNEL4_DLPS
;;;1249       GDMAChannel4_StoreReg[0] = GDMA_Channel4->SAR;
;;;1250       GDMAChannel4_StoreReg[1] = GDMA_Channel4->DAR;
;;;1251       GDMAChannel4_StoreReg[2] = GDMA_Channel4->CTL_LOW;
;;;1252       GDMAChannel4_StoreReg[3] = GDMA_Channel4->CTL_HIGH;
;;;1253       GDMAChannel4_StoreReg[4] = GDMA_Channel4->CFG_LOW;
;;;1254       GDMAChannel4_StoreReg[5] = GDMA_Channel4->CFG_HIGH;
;;;1255   #endif
;;;1256   #if USE_GDMACHANNEL5_DLPS
;;;1257       GDMAChannel5_StoreReg[0] = GDMA_Channel5->SAR;
;;;1258       GDMAChannel5_StoreReg[1] = GDMA_Channel5->DAR;
;;;1259       GDMAChannel5_StoreReg[2] = GDMA_Channel5->CTL_LOW;
;;;1260       GDMAChannel5_StoreReg[3] = GDMA_Channel5->CTL_HIGH;
;;;1261       GDMAChannel5_StoreReg[4] = GDMA_Channel5->CFG_LOW;
;;;1262       GDMAChannel5_StoreReg[5] = GDMA_Channel5->CFG_HIGH;
;;;1263   #endif
;;;1264   }
;;;1265   
;;;1266   /**
;;;1267     * @brief  GDMA exit dlps callback function(Resume GDMA register values when system exit DLPS)
;;;1268     * @param  None
;;;1269     * @retval None
;;;1270     */
;;;1271   DATA_RAM_FUNCTION __STATIC_INLINE void GDMA_DLPS_Exit(void)
;;;1272   {
;;;1273       SYSBLKCTRL->u_210.SOC_FUNC_EN |= SYSBLK_GDMA0_EN_Msk;
;;;1274       PERIPH->PERI_CLK_CTRL |= (SYSBLK_ACTCK_GDMA0_EN_Msk | SYSBLK_SLPCK_GDMA0_EN_Msk);
;;;1275   
;;;1276       /* Enable GDMA in DmaCfgReg*/
;;;1277       GDMA_BASE->DmaCfgReg = GDMA_StoreReg[0];
;;;1278   
;;;1279       /*----------clear pending all interrupts of GDMA channel-----------*/
;;;1280       GDMA_BASE->CLEAR_TFR = 0xff;
;;;1281       GDMA_BASE->CLEAR_BLOCK = 0xff;
;;;1282       GDMA_BASE->CLEAR_DST_TRAN = 0xff;
;;;1283       GDMA_BASE->CLEAR_SRC_TRAN = 0xff;
;;;1284       GDMA_BASE->CLEAR_ERR = 0xff;
;;;1285   
;;;1286       /*--------------------mask interrupt-------- -----------------*/
;;;1287       GDMA_BASE->MASK_TFR = (GDMA_StoreReg[2] | ((GDMA_StoreReg[2] & 0xff) << 8));
;;;1288       GDMA_BASE->MASK_BLOCK = (GDMA_StoreReg[3] | ((GDMA_StoreReg[3] & 0xff) << 8));
;;;1289       GDMA_BASE->MASK_SRC_TRAN = (GDMA_StoreReg[4] | ((GDMA_StoreReg[4] & 0xff) << 8));
;;;1290       GDMA_BASE->MASK_DST_TRAN = (GDMA_StoreReg[5] | ((GDMA_StoreReg[5] & 0xff) << 8));
;;;1291       GDMA_BASE->MASK_ERR = (GDMA_StoreReg[6] | ((GDMA_StoreReg[6] & 0xff) << 8));
;;;1292   
;;;1293   #if USE_GDMACHANNEL0_DLPS
;;;1294       GDMA_Channel0->SAR      = GDMAChannel0_StoreReg[0];
;;;1295       GDMA_Channel0->DAR      = GDMAChannel0_StoreReg[1];
;;;1296       GDMA_Channel0->CTL_LOW  = GDMAChannel0_StoreReg[2];
;;;1297       GDMA_Channel0->CTL_HIGH = GDMAChannel0_StoreReg[3];
;;;1298       GDMA_Channel0->CFG_LOW  = GDMAChannel0_StoreReg[4];
;;;1299       GDMA_Channel0->CFG_HIGH = GDMAChannel0_StoreReg[5];
;;;1300   #endif
;;;1301   #if USE_GDMACHANNEL1_DLPS
;;;1302       GDMA_Channel1->SAR      = GDMAChannel1_StoreReg[0];
;;;1303       GDMA_Channel1->DAR      = GDMAChannel1_StoreReg[1];
;;;1304       GDMA_Channel1->CTL_LOW  = GDMAChannel1_StoreReg[2];
;;;1305       GDMA_Channel1->CTL_HIGH = GDMAChannel1_StoreReg[3];
;;;1306       GDMA_Channel1->CFG_LOW  = GDMAChannel1_StoreReg[4];
;;;1307       GDMA_Channel1->CFG_HIGH = GDMAChannel1_StoreReg[5];
;;;1308   #endif
;;;1309   #if USE_GDMACHANNEL2_DLPS
;;;1310       GDMA_Channel2->SAR      = GDMAChannel2_StoreReg[0];
;;;1311       GDMA_Channel2->DAR      = GDMAChannel2_StoreReg[1];
;;;1312       GDMA_Channel2->CTL_LOW  = GDMAChannel2_StoreReg[2];
;;;1313       GDMA_Channel2->CTL_HIGH = GDMAChannel2_StoreReg[3];
;;;1314       GDMA_Channel2->CFG_LOW  = GDMAChannel2_StoreReg[4];
;;;1315       GDMA_Channel2->CFG_HIGH = GDMAChannel2_StoreReg[5];
;;;1316   #endif
;;;1317   #if USE_GDMACHANNEL3_DLPS
;;;1318       GDMA_Channel3->SAR      = GDMAChannel3_StoreReg[0];
;;;1319       GDMA_Channel3->DAR      = GDMAChannel3_StoreReg[1];
;;;1320       GDMA_Channel3->CTL_LOW  = GDMAChannel3_StoreReg[2];
;;;1321       GDMA_Channel3->CTL_HIGH = GDMAChannel3_StoreReg[3];
;;;1322       GDMA_Channel3->CFG_LOW  = GDMAChannel3_StoreReg[4];
;;;1323       GDMA_Channel3->CFG_HIGH = GDMAChannel3_StoreReg[5];
;;;1324   #endif
;;;1325   #if USE_GDMACHANNEL4_DLPS
;;;1326       GDMA_Channel4->SAR      = GDMAChannel4_StoreReg[0];
;;;1327       GDMA_Channel4->DAR      = GDMAChannel4_StoreReg[1];
;;;1328       GDMA_Channel4->CTL_LOW  = GDMAChannel4_StoreReg[2];
;;;1329       GDMA_Channel4->CTL_HIGH = GDMAChannel4_StoreReg[3];
;;;1330       GDMA_Channel4->CFG_LOW  = GDMAChannel4_StoreReg[4];
;;;1331       GDMA_Channel4->CFG_HIGH = GDMAChannel4_StoreReg[5];
;;;1332   #endif
;;;1333   #if USE_GDMACHANNEL5_DLPS
;;;1334       GDMA_Channel5->SAR      = GDMAChannel5_StoreReg[0];
;;;1335       GDMA_Channel5->DAR      = GDMAChannel5_StoreReg[1];
;;;1336       GDMA_Channel5->CTL_LOW  = GDMAChannel5_StoreReg[2];
;;;1337       GDMA_Channel5->CTL_HIGH = GDMAChannel5_StoreReg[3];
;;;1338       GDMA_Channel5->CFG_LOW  = GDMAChannel5_StoreReg[4];
;;;1339       GDMA_Channel5->CFG_HIGH = GDMAChannel5_StoreReg[5];
;;;1340   #endif
;;;1341   
;;;1342       /*----------clear pending all interrupts of GDMA channel before enable channel-----------*/
;;;1343       GDMA_BASE->CLEAR_TFR = 0x3f;
;;;1344       GDMA_BASE->CLEAR_BLOCK = 0x3f;
;;;1345       GDMA_BASE->CLEAR_DST_TRAN = 0x3f;
;;;1346       GDMA_BASE->CLEAR_SRC_TRAN = 0x3f;
;;;1347       GDMA_BASE->CLEAR_ERR = 0x3f;
;;;1348   
;;;1349       /* Enable the selected DMA Channelx */
;;;1350   //    GDMA_BASE->ChEnReg = GDMA_StoreReg[1];
;;;1351   }
;;;1352   #endif
;;;1353   
;;;1354   /********************************************** ********************************************************/
;;;1355   /**************************************** [LCD DLPS] ************************************************/
;;;1356   /*******************************************************************************************************/
;;;1357   /*******************************************************************************************************/
;;;1358   #if USE_LCD_DLPS
;;;1359   
;;;1360   uint32_t LCD_StoreReg[5];
;;;1361   
;;;1362   /**
;;;1363     * @brief  LCD enter dlps callback function(Save LCD register values when system enter DLPS)
;;;1364     * @param  None
;;;1365     * @retval None
;;;1366     */
;;;1367   __STATIC_INLINE void LCD_DLPS_Enter(void)
;;;1368   {
;;;1369       /* Enable LCD 8080 interface controller function */
;;;1370       PERIPH->PERI_FUNC0_EN |= BIT(25);
;;;1371       /* Enable LCD 8080 interface controller clock */
;;;1372       PERIPH->PERI_CLK_CTRL1 |= BIT(28) | BIT(29);
;;;1373   
;;;1374       LCD_StoreReg[0] = *((volatile uint32_t *)0x400002A8UL) & (0x03 << 28);
;;;1375       LCD_StoreReg[1] = LCD->IMR;
;;;1376       LCD_StoreReg[2] = LCD->CTRL0;
;;;1377       LCD_StoreReg[3] = LCD->CTRL1;
;;;1378       LCD_StoreReg[4] = LCD->CFG;
;;;1379   
;;;1380   }
;;;1381   
;;;1382   /**
;;;1383     * @brief  LCD exit dlps callback function(Resume LCD register values when system exit DLPS)
;;;1384     * @param  None
;;;1385     * @retval None
;;;1386     */
;;;1387   DATA_RAM_FUNCTION __STATIC_INLINE void LCD_DLPS_Exit(void)
;;;1388   {
;;;1389       /* Enable LCD 8080 interface controller function */
;;;1390       PERIPH->PERI_FUNC0_EN |= BIT(25);
;;;1391       /* Enable LCD 8080 interface controller clock */
;;;1392       PERIPH->PERI_CLK_CTRL1 |= BIT(28) | BIT(29);
;;;1393   
;;;1394       /* Restore Dedicated SDIO pin option */
;;;1395       *((volatile uint32_t *)0x400002A8UL) &= ~(0x03 << 28);
;;;1396       *((volatile uint32_t *)0x400002A8UL) |= LCD_StoreReg[0];
;;;1397   
;;;1398       /* Initialize LCD */
;;;1399   
;;;1400       LCD->IMR    = LCD_StoreReg[1];
;;;1401       LCD->CTRL1  = LCD_StoreReg[3];
;;;1402       LCD->CFG    = LCD_StoreReg[4];
;;;1403       LCD->CTRL0  = LCD_StoreReg[2];
;;;1404   }
;;;1405   #endif
;;;1406   
;;;1407   /********************************************** ********************************************************/
;;;1408   /**************************************** [I2S0 DLPS] **************************************************/
;;;1409   /*******************************************************************************************************/
;;;1410   /*******************************************************************************************************/
;;;1411   #if USE_I2S0_DLPS
;;;1412   
;;;1413   uint32_t I2S0_StoreReg[4];
;;;1414   
;;;1415   /**
;;;1416     * @brief  I2S0 enter dlps callback function(Save I2S0 register values when system enter DLPS)
;;;1417     * @param  None
;;;1418     * @retval None
;;;1419     */
;;;1420   __STATIC_INLINE void I2S0_DLPS_Enter(void)
;;;1421   {
;;;1422       PERIPH->PERI_BD_FUNC0_EN |= BIT(1) | BIT(5) | BIT(8);
;;;1423   
;;;1424       I2S0_StoreReg[0] = I2S0->BCLK_DIV;
;;;1425       I2S0_StoreReg[1] = I2S0->CTRL0;
;;;1426       I2S0_StoreReg[2] = I2S0->CTRL1;
;;;1427       I2S0_StoreReg[3] = I2S0->DMA_TRDLR;
;;;1428   }
;;;1429   
;;;1430   /**
;;;1431     * @brief  I2S0 exit dlps callback function(Resume I2S0 register values when system exit DLPS)
;;;1432     * @param  None
;;;1433     * @retval None
;;;1434     */
;;;1435   DATA_RAM_FUNCTION __STATIC_INLINE void I2S0_DLPS_Exit(void)
;;;1436   {
;;;1437       PERIPH->PERI_BD_FUNC0_EN |= BIT(1) | BIT(5) | BIT(8);
;;;1438   
;;;1439       /* Reset I2S0 module */
;;;1440       I2S0->CTRL0 |= 1 << 0;
;;;1441       I2S0->CTRL0 &= ~(1 << 0);
;;;1442   
;;;1443       /* Initialize I2S0 */
;;;1444       I2S0->BCLK_DIV  = I2S0_StoreReg[0];
;;;1445       I2S0->CTRL1     = I2S0_StoreReg[2];
;;;1446       I2S0->DMA_TRDLR = I2S0_StoreReg[3];
;;;1447       I2S0->CTRL0     = I2S0_StoreReg[1];
;;;1448   }
;;;1449   #endif
;;;1450   
;;;1451   /********************************************** ********************************************************/
;;;1452   /**************************************** [I2S1 DLPS] **************************************************/
;;;1453   /*******************************************************************************************************/
;;;1454   /*******************************************************************************************************/
;;;1455   #if USE_I2S1_DLPS
;;;1456   
;;;1457   uint32_t I2S1_StoreReg[4];
;;;1458   
;;;1459   /**
;;;1460     * @brief  I2S1 enter dlps callback function(Save I2S1 register values when system enter DLPS)
;;;1461     * @param  None
;;;1462     * @retval None
;;;1463     */
;;;1464   __STATIC_INLINE void I2S1_DLPS_Enter(void)
;;;1465   {
;;;1466       PERIPH->PERI_BD_FUNC0_EN |= BIT(2) | BIT(6) | BIT(8);
;;;1467   
;;;1468       I2S1_StoreReg[0] = I2S1->BCLK_DIV;
;;;1469       I2S1_StoreReg[1] = I2S1->CTRL0;
;;;1470       I2S1_StoreReg[2] = I2S1->CTRL1;
;;;1471       I2S1_StoreReg[3] = I2S1->DMA_TRDLR;
;;;1472   }
;;;1473   
;;;1474   /**
;;;1475     * @brief  I2S1 exit dlps callback function(Resume I2S1 register values when system exit DLPS)
;;;1476     * @param  None
;;;1477     * @retval None
;;;1478     */
;;;1479   DATA_RAM_FUNCTION __STATIC_INLINE void I2S1_DLPS_Exit(void)
;;;1480   {
;;;1481       PERIPH->PERI_BD_FUNC0_EN |= BIT(2) | BIT(6) | BIT(8);
;;;1482   
;;;1483       /* Reset I2S1 module */
;;;1484       I2S1->CTRL0 |= 1 << 0;
;;;1485       I2S1->CTRL0 &= ~(1 << 0);
;;;1486   
;;;1487       /* Initialize I2S1 */
;;;1488       I2S1->BCLK_DIV  = I2S1_StoreReg[0];
;;;1489       I2S1->CTRL1     = I2S1_StoreReg[2];
;;;1490       I2S1->DMA_TRDLR = I2S1_StoreReg[3];
;;;1491       I2S1->CTRL0     = I2S1_StoreReg[1];
;;;1492   }
;;;1493   #endif
;;;1494   
;;;1495   /********************************************** ********************************************************/
;;;1496   /**************************************** [CODEC DLPS] ************************************************/
;;;1497   /*******************************************************************************************************/
;;;1498   /*******************************************************************************************************/
;;;1499   #if USE_CODEC_DLPS
;;;1500   
;;;1501   uint32_t CODEC_StoreReg[7];
;;;1502   
;;;1503   /**
;;;1504     * @brief  CODEC enter dlps callback function(Save CODEC register values when system enter DLPS)
;;;1505     * @param  None
;;;1506     * @retval None
;;;1507     */
;;;1508   __STATIC_INLINE void CODEC_DLPS_Enter(void)
;;;1509   {
;;;1510       /* Enable codec function and clock */
;;;1511       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1512   
;;;1513       CODEC_StoreReg[0] = CODEC->CR0;
;;;1514       CODEC_StoreReg[1] = CODEC->CR1;
;;;1515       CODEC_StoreReg[2] = CODEC->CR2;
;;;1516       CODEC_StoreReg[3] = CODEC->CLK_CTRL;
;;;1517       CODEC_StoreReg[4] = CODEC->I2S_CTRL;
;;;1518       CODEC_StoreReg[5] = CODEC->ADC_CTRL;
;;;1519       CODEC_StoreReg[6] = CODEC->DAC_CTRL;
;;;1520   }
;;;1521   
;;;1522   /**
;;;1523     * @brief  CODEC exit dlps callback function(Resume CODEC register values when system exit DLPS)
;;;1524     * @param  None
;;;1525     * @retval None
;;;1526     */
;;;1527   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_DLPS_Exit(void)
;;;1528   {
;;;1529       /* Enable codec function and clock */
;;;1530       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1531   
;;;1532       /* Initialize CODEC */
;;;1533       if ((CODEC_StoreReg[3] & 0x900) == 0x900)
;;;1534       {
;;;1535           /* Configure AMIC parameters */
;;;1536           CODEC->CR0 = CODEC_StoreReg[0];
;;;1537           CODEC->CR1 = CODEC_StoreReg[1];
;;;1538           CODEC->CR2 = CODEC_StoreReg[2];
;;;1539       }
;;;1540   
;;;1541       /*  Reset audio digital IP */
;;;1542       CODEC->AUDIO_CTRL = 0;
;;;1543       CODEC->AUDIO_CTRL = 1;
;;;1544   
;;;1545       CODEC->CLK_CTRL = CODEC_StoreReg[3];
;;;1546       CODEC->I2S_CTRL = CODEC_StoreReg[4];
;;;1547       CODEC->ADC_CTRL = CODEC_StoreReg[5];
;;;1548       CODEC->DAC_CTRL = CODEC_StoreReg[6];
;;;1549   }
;;;1550   #endif
;;;1551   
;;;1552   /********************************************** ********************************************************/
;;;1553   /**************************************** [CODEC_EQ1 DLPS] ************************************************/
;;;1554   /*******************************************************************************************************/
;;;1555   /*******************************************************************************************************/
;;;1556   #if USE_CODEC_EQ1_DLPS
;;;1557   
;;;1558   uint32_t CODEC_EQ1_StoreReg[5];
;;;1559   
;;;1560   /**
;;;1561     * @brief  CODEC_EQ1 enter dlps callback function(Save CODEC_EQ1 register values when system enter DLPS)
;;;1562     * @param  None
;;;1563     * @retval None
;;;1564     */
;;;1565   __STATIC_INLINE void CODEC_EQ1_DLPS_Enter(void)
;;;1566   {
;;;1567       /* Enable codec function and clock */
;;;1568       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1569   
;;;1570       CODEC_EQ1_StoreReg[0] = CODEC_EQ1->EQ_H0;
;;;1571       CODEC_EQ1_StoreReg[1] = CODEC_EQ1->EQ_B1;
;;;1572       CODEC_EQ1_StoreReg[2] = CODEC_EQ1->EQ_B2;
;;;1573       CODEC_EQ1_StoreReg[3] = CODEC_EQ1->EQ_A1;
;;;1574       CODEC_EQ1_StoreReg[4] = CODEC_EQ1->EQ_A2;
;;;1575   }
;;;1576   
;;;1577   /**
;;;1578     * @brief  CODEC_EQ1 exit dlps callback function(Resume CODEC_EQ1 register values when system exit DLPS)
;;;1579     * @param  None
;;;1580     * @retval None
;;;1581     */
;;;1582   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ1_DLPS_Exit(void)
;;;1583   {
;;;1584       /* Enable codec function and clock */
;;;1585       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1586   
;;;1587       CODEC_EQ1->EQ_H0 = CODEC_EQ1_StoreReg[0];
;;;1588       CODEC_EQ1->EQ_B1 = CODEC_EQ1_StoreReg[1];
;;;1589       CODEC_EQ1->EQ_B2 = CODEC_EQ1_StoreReg[2];
;;;1590       CODEC_EQ1->EQ_A1 = CODEC_EQ1_StoreReg[3];
;;;1591       CODEC_EQ1->EQ_A2 = CODEC_EQ1_StoreReg[4];
;;;1592   }
;;;1593   #endif
;;;1594   
;;;1595   /********************************************** ********************************************************/
;;;1596   /**************************************** [CODEC_EQ2 DLPS] ************************************************/
;;;1597   /*******************************************************************************************************/
;;;1598   /*******************************************************************************************************/
;;;1599   #if USE_CODEC_EQ2_DLPS
;;;1600   
;;;1601   uint32_t CODEC_EQ2_StoreReg[5];
;;;1602   
;;;1603   /**
;;;1604     * @brief  CODEC_EQ2 enter dlps callback function(Save CODEC_EQ2 register values when system enter DLPS)
;;;1605     * @param  None
;;;1606     * @retval None
;;;1607     */
;;;1608   __STATIC_INLINE void CODEC_EQ2_DLPS_Enter(void)
;;;1609   {
;;;1610       /* Enable codec function and clock */
;;;1611       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1612   
;;;1613       CODEC_EQ2_StoreReg[0] = CODEC_EQ2->EQ_H0;
;;;1614       CODEC_EQ2_StoreReg[1] = CODEC_EQ2->EQ_B1;
;;;1615       CODEC_EQ2_StoreReg[2] = CODEC_EQ2->EQ_B2;
;;;1616       CODEC_EQ2_StoreReg[3] = CODEC_EQ2->EQ_A1;
;;;1617       CODEC_EQ2_StoreReg[4] = CODEC_EQ2->EQ_A2;
;;;1618   }
;;;1619   
;;;1620   /**
;;;1621     * @brief  CODEC_EQ2 exit dlps callback function(Resume CODEC_EQ2 register values when system exit DLPS)
;;;1622     * @param  None
;;;1623     * @retval None
;;;1624     */
;;;1625   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ2_DLPS_Exit(void)
;;;1626   {
;;;1627       /* Enable codec function and clock */
;;;1628       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1629   
;;;1630       CODEC_EQ2->EQ_H0 = CODEC_EQ2_StoreReg[0];
;;;1631       CODEC_EQ2->EQ_B1 = CODEC_EQ2_StoreReg[1];
;;;1632       CODEC_EQ2->EQ_B2 = CODEC_EQ2_StoreReg[2];
;;;1633       CODEC_EQ2->EQ_A1 = CODEC_EQ2_StoreReg[3];
;;;1634       CODEC_EQ2->EQ_A2 = CODEC_EQ2_StoreReg[4];
;;;1635   }
;;;1636   #endif
;;;1637   
;;;1638   /********************************************** ********************************************************/
;;;1639   /**************************************** [CODEC_EQ3 DLPS] ************************************************/
;;;1640   /*******************************************************************************************************/
;;;1641   /*******************************************************************************************************/
;;;1642   #if USE_CODEC_EQ3_DLPS
;;;1643   
;;;1644   uint32_t CODEC_EQ3_StoreReg[5];
;;;1645   
;;;1646   /**
;;;1647     * @brief  CODEC_EQ3 enter dlps callback function(Save CODEC_EQ3 register values when system enter DLPS)
;;;1648     * @param  None
;;;1649     * @retval None
;;;1650     */
;;;1651   __STATIC_INLINE void CODEC_EQ3_DLPS_Enter(void)
;;;1652   {
;;;1653       /* Enable codec function and clock */
;;;1654       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1655   
;;;1656       CODEC_EQ3_StoreReg[0] = CODEC_EQ3->EQ_H0;
;;;1657       CODEC_EQ3_StoreReg[1] = CODEC_EQ3->EQ_B1;
;;;1658       CODEC_EQ3_StoreReg[2] = CODEC_EQ3->EQ_B2;
;;;1659       CODEC_EQ3_StoreReg[3] = CODEC_EQ3->EQ_A1;
;;;1660       CODEC_EQ3_StoreReg[4] = CODEC_EQ3->EQ_A2;
;;;1661   }
;;;1662   
;;;1663   /**
;;;1664     * @brief  CODEC_EQ3 exit dlps callback function(Resume CODEC_EQ3 register values when system exit DLPS)
;;;1665     * @param  None
;;;1666     * @retval None
;;;1667     */
;;;1668   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ3_DLPS_Exit(void)
;;;1669   {
;;;1670       /* Enable codec function and clock */
;;;1671       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1672   
;;;1673       CODEC_EQ3->EQ_H0 = CODEC_EQ3_StoreReg[0];
;;;1674       CODEC_EQ3->EQ_B1 = CODEC_EQ3_StoreReg[1];
;;;1675       CODEC_EQ3->EQ_B2 = CODEC_EQ3_StoreReg[2];
;;;1676       CODEC_EQ3->EQ_A1 = CODEC_EQ3_StoreReg[3];
;;;1677       CODEC_EQ3->EQ_A2 = CODEC_EQ3_StoreReg[4];
;;;1678   }
;;;1679   #endif
;;;1680   
;;;1681   /********************************************** ********************************************************/
;;;1682   /**************************************** [CODEC_EQ4 DLPS] ************************************************/
;;;1683   /*******************************************************************************************************/
;;;1684   /*******************************************************************************************************/
;;;1685   #if USE_CODEC_EQ4_DLPS
;;;1686   
;;;1687   uint32_t CODEC_EQ4_StoreReg[5];
;;;1688   
;;;1689   /**
;;;1690     * @brief  CODEC_EQ4 enter dlps callback function(Save CODEC_EQ4 register values when system enter DLPS)
;;;1691     * @param  None
;;;1692     * @retval None
;;;1693     */
;;;1694   __STATIC_INLINE void CODEC_EQ4_DLPS_Enter(void)
;;;1695   {
;;;1696       /* Enable codec function and clock */
;;;1697       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1698   
;;;1699       CODEC_EQ4_StoreReg[0] = CODEC_EQ4->EQ_H0;
;;;1700       CODEC_EQ4_StoreReg[1] = CODEC_EQ4->EQ_B1;
;;;1701       CODEC_EQ4_StoreReg[2] = CODEC_EQ4->EQ_B2;
;;;1702       CODEC_EQ4_StoreReg[3] = CODEC_EQ4->EQ_A1;
;;;1703       CODEC_EQ4_StoreReg[4] = CODEC_EQ4->EQ_A2;
;;;1704   }
;;;1705   
;;;1706   /**
;;;1707     * @brief  CODEC_EQ4 exit dlps callback function(Resume CODEC_EQ4 register values when system exit DLPS)
;;;1708     * @param  None
;;;1709     * @retval None
;;;1710     */
;;;1711   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ4_DLPS_Exit(void)
;;;1712   {
;;;1713       /* Enable codec function and clock */
;;;1714       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1715   
;;;1716       CODEC_EQ4->EQ_H0 = CODEC_EQ4_StoreReg[0];
;;;1717       CODEC_EQ4->EQ_B1 = CODEC_EQ4_StoreReg[1];
;;;1718       CODEC_EQ4->EQ_B2 = CODEC_EQ4_StoreReg[2];
;;;1719       CODEC_EQ4->EQ_A1 = CODEC_EQ4_StoreReg[3];
;;;1720       CODEC_EQ4->EQ_A2 = CODEC_EQ4_StoreReg[4];
;;;1721   }
;;;1722   #endif
;;;1723   
;;;1724   /********************************************** ********************************************************/
;;;1725   /**************************************** [CODEC_EQ5 DLPS] ************************************************/
;;;1726   /*******************************************************************************************************/
;;;1727   /*******************************************************************************************************/
;;;1728   #if USE_CODEC_EQ5_DLPS
;;;1729   
;;;1730   uint32_t CODEC_EQ5_StoreReg[5];
;;;1731   
;;;1732   /**
;;;1733     * @brief  CODEC_EQ5 enter dlps callback function(Save CODEC_EQ5 register values when system enter DLPS)
;;;1734     * @param  None
;;;1735     * @retval None
;;;1736     */
;;;1737   __STATIC_INLINE void CODEC_EQ5_DLPS_Enter(void)
;;;1738   {
;;;1739       /* Enable codec function and clock */
;;;1740       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1741   
;;;1742       CODEC_EQ5_StoreReg[0] = CODEC_EQ5->EQ_H0;
;;;1743       CODEC_EQ5_StoreReg[1] = CODEC_EQ5->EQ_B1;
;;;1744       CODEC_EQ5_StoreReg[2] = CODEC_EQ5->EQ_B2;
;;;1745       CODEC_EQ5_StoreReg[3] = CODEC_EQ5->EQ_A1;
;;;1746       CODEC_EQ5_StoreReg[4] = CODEC_EQ5->EQ_A2;
;;;1747   }
;;;1748   
;;;1749   /**
;;;1750     * @brief  CODEC_EQ5 exit dlps callback function(Resume CODEC_EQ5 register values when system exit DLPS)
;;;1751     * @param  None
;;;1752     * @retval None
;;;1753     */
;;;1754   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ5_DLPS_Exit(void)
;;;1755   {
;;;1756       /* Enable codec function and clock */
;;;1757       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1758   
;;;1759       CODEC_EQ5->EQ_H0 = CODEC_EQ5_StoreReg[0];
;;;1760       CODEC_EQ5->EQ_B1 = CODEC_EQ5_StoreReg[1];
;;;1761       CODEC_EQ5->EQ_B2 = CODEC_EQ5_StoreReg[2];
;;;1762       CODEC_EQ5->EQ_A1 = CODEC_EQ5_StoreReg[3];
;;;1763       CODEC_EQ5->EQ_A2 = CODEC_EQ5_StoreReg[4];
;;;1764   }
;;;1765   #endif
;;;1766   
;;;1767   /**
;;;1768     * @brief  Set Log and SWD pins to SW mode.
;;;1769     * @param  void.
;;;1770     * @retval void.
;;;1771     */
;;;1772   __STATIC_INLINE void Log_SWD_DLPS_Enter(void)
;;;1773   {
;;;1774       if (OTP->SWD_ENABLE)
;;;1775       {
;;;1776           Pad_Config(P1_0, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_DOWN, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1777           Pad_Config(P1_1, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_DOWN, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1778       }
;;;1779   
;;;1780       Pad_Config(OTP->logPin, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1781   
;;;1782   }
;;;1783   
;;;1784   /**
;;;1785     * @brief  Set Log and SWD pins to PINMUX mode.
;;;1786     * @param  void.
;;;1787     * @retval void.
;;;1788     */
;;;1789   DATA_RAM_FUNCTION __STATIC_INLINE void Log_SWD_DLPS_Exit(void)
;;;1790   {
;;;1791       Pad_Config(OTP->logPin, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1792   
;;;1793       if (OTP->SWD_ENABLE)
;;;1794       {
;;;1795           Pad_Config(P1_0, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1796           Pad_Config(P1_1, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1797       }
;;;1798   }
;;;1799   
;;;1800   /********************************************** ********************************************************/
;;;1801   /*********************************** [USER Exit DLPS CALLBACK FUCN] *****************************************/
;;;1802   /*******************************************************************************************************/
;;;1803   /*******************************************************************************************************/
;;;1804   #if USE_USER_DEFINE_DLPS_EXIT_CB
;;;1805   
;;;1806   DLPS_IO_ExitDlpsCB User_IO_ExitDlpsCB = NULL;
;;;1807   
;;;1808   #endif /* USE_USER_DEFINE_DLPS_EXIT_CB */
;;;1809   
;;;1810   /********************************************** ********************************************************/
;;;1811   /*********************************** [USER Enter DLPS CALLBACK FUCN] *****************************************/
;;;1812   /*******************************************************************************************************/
;;;1813   /*******************************************************************************************************/
;;;1814   #if USE_USER_DEFINE_DLPS_ENTER_CB
;;;1815   
;;;1816   DLPS_IO_EnterDlpsCB User_IO_EnterDlpsCB = NULL;
;;;1817   
;;;1818   #endif /* USE_USER_DEFINE_DLPS_EXIT_CB */
;;;1819   
;;;1820   /********************************************** ********************************************************/
;;;1821   /*********************************** [Enter & Exit DLPS CALLBACK FUNC] *********************************/
;;;1822   /*******************************************************************************************************/
;;;1823   /*******************************************************************************************************/
;;;1824   #if USE_IO_DRIVER_DLPS
;;;1825   
;;;1826   /**
;;;1827     * @brief  IO enter dlps callback function
;;;1828     * @param  None
;;;1829     * @retval None
;;;1830     */
;;;1831   void DLPS_IO_EnterDlpsCb(void)
;;;1832   {
;;;1833       /* low stack do it instead */
;;;1834   //    Pad_ClearAllWakeupINT();
;;;1835   
;;;1836   //    DBG_DIRECT("DLPS_IO_EnterDlpsCb");
;;;1837       NVIC_DisableIRQ(System_IRQn);
;;;1838       CPU_DLPS_Enter();
;;;1839   
;;;1840       Pinmux_DLPS_Enter();
;;;1841   
;;;1842   #if USE_USER_DEFINE_DLPS_ENTER_CB
;;;1843       if (User_IO_EnterDlpsCB)
        0x0080f08c:    6898        .h      LDR      r0,[r3,#8]
        0x0080f08e:    b100        ..      CBZ      r0,0x80f092 ; DLPS_IO_EnterDlpsCb + 106
;;;1844       {
;;;1845           User_IO_EnterDlpsCB();
        0x0080f090:    4780        .G      BLX      r0
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_io_dlps.c (154)
        0x0080f092:    f04f4280    O..B    MOV      r2,#0x40000000
        0x0080f096:    f8d2021c    ....    LDR      r0,[r2,#0x21c]
        0x0080f09a:    f4407080    @..p    ORR      r0,r0,#0x100
        0x0080f09e:    f8c2021c    ....    STR      r0,[r2,#0x21c]
;;;155        PERIPH->PERI_CLK_CTRL |= (BIT_SOC_ACTCK_GPIO_EN | SYSBLK_SLPCK_GPIO_EN_Msk);
        0x0080f0a2:    f8d20230    ..0.    LDR      r0,[r2,#0x230]
        0x0080f0a6:    f0407040    @.@p    ORR      r0,r0,#0x3000000
        0x0080f0aa:    f8c20230    ..0.    STR      r0,[r2,#0x230]
;;;156    
;;;157        GPIO_StoreReg[0] = GPIO->DATAOUT;
        0x0080f0ae:    4924        $I      LDR      r1,[pc,#144] ; [0x80f140] = 0x40001000
        0x0080f0b0:    680b        .h      LDR      r3,[r1,#0]
        0x0080f0b2:    4820         H      LDR      r0,[pc,#128] ; [0x80f134] = 0x207f5c
        0x0080f0b4:    30ac        .0      ADDS     r0,r0,#0xac
;;;158        GPIO_StoreReg[1] = GPIO->DATADIR;
        0x0080f0b6:    6003        .`      STR      r3,[r0,#0]
        0x0080f0b8:    684b        Kh      LDR      r3,[r1,#4]
;;;159        GPIO_StoreReg[2] = GPIO->DATASRC;
        0x0080f0ba:    6043        C`      STR      r3,[r0,#4]
        0x0080f0bc:    688b        .h      LDR      r3,[r1,#8]
;;;160        GPIO_StoreReg[3] = GPIO->INTEN;
        0x0080f0be:    6083        .`      STR      r3,[r0,#8]
        0x0080f0c0:    6b0b        .k      LDR      r3,[r1,#0x30]
;;;161        GPIO_StoreReg[4] = GPIO->INTMASK;
        0x0080f0c2:    60c3        .`      STR      r3,[r0,#0xc]
        0x0080f0c4:    6b4b        Kk      LDR      r3,[r1,#0x34]
;;;162        GPIO_StoreReg[5] = GPIO->INTTYPE;
        0x0080f0c6:    6103        .a      STR      r3,[r0,#0x10]
        0x0080f0c8:    6b8b        .k      LDR      r3,[r1,#0x38]
;;;163        GPIO_StoreReg[6] = GPIO->INTPOLARITY;
        0x0080f0ca:    6143        Ca      STR      r3,[r0,#0x14]
        0x0080f0cc:    6bcb        .k      LDR      r3,[r1,#0x3c]
;;;164        GPIO_StoreReg[7] = GPIO->DEBOUNCE;
        0x0080f0ce:    6183        .a      STR      r3,[r0,#0x18]
        0x0080f0d0:    6c89        .l      LDR      r1,[r1,#0x48]
;;;165        GPIO_StoreReg[8] = *(__IO uint32_t *)(0x40000344UL);
        0x0080f0d2:    61c1        .a      STR      r1,[r0,#0x1c]
        0x0080f0d4:    f8d21344    ..D.    LDR      r1,[r2,#0x344]
;;;166    
;;;167        return;
;;;168    }
;;;169    
;;;170    /**
;;;171      * @brief  GPIO exit dlps callback function(Resume GPIO register values when system exit DLPS)
;;;172      * @param  None
;;;173      * @retval None
;;;174      */
;;;175    DATA_RAM_FUNCTION __STATIC_INLINE void GPIO_DLPS_Exit(void)
;;;176    {
;;;177        PERIPH->PERI_FUNC1_EN |= BIT_PERI_GPIO_EN;
;;;178        PERIPH->PERI_CLK_CTRL |= (BIT_SOC_ACTCK_GPIO_EN | SYSBLK_SLPCK_GPIO_EN_Msk);
;;;179    
;;;180        GPIO->DATADIR       = GPIO_StoreReg[1];
;;;181        GPIO->DATASRC       = GPIO_StoreReg[2];
;;;182        GPIO->INTMASK       = GPIO_StoreReg[4];
;;;183        GPIO->INTTYPE       = GPIO_StoreReg[5];
;;;184        GPIO->INTPOLARITY   = GPIO_StoreReg[6];
;;;185        GPIO->DEBOUNCE      = GPIO_StoreReg[7];
;;;186        GPIO->DATAOUT       = GPIO_StoreReg[0];
;;;187        GPIO->INTCLR        = ~(GPIO_StoreReg[1]);
;;;188        GPIO->INTEN         = GPIO_StoreReg[3];
;;;189        *(__IO uint32_t *)(0x40000344UL) = GPIO_StoreReg[8];
;;;190    
;;;191        return;
;;;192    }
;;;193    #endif  /* USE_GPIO_DLPS */
;;;194    
;;;195    
;;;196    /********************************************** ********************************************************/
;;;197    /**************************************** [KEYSCAN DLPS] ***********************************************/
;;;198    /*******************************************************************************************************/
;;;199    /*******************************************************************************************************/
;;;200    #if USE_KEYSCAN_DLPS
;;;201    __STATIC_INLINE void KeyScan_DLPS_Enter(void);
;;;202    __STATIC_INLINE void KeyScan_DLPS_Exit(void);
;;;203    
;;;204    uint32_t KeyScan_StoreReg[7];      /*  This array should be placed in RAM ON/Buffer ON.    */
;;;205    
;;;206    /**
;;;207      * @brief  KEYSCAN enter dlps callback function(Save KEYSCAN register values when system enter DLPS)
;;;208      * @param  None
;;;209      * @retval None
;;;210      */
;;;211    __STATIC_INLINE void KeyScan_DLPS_Enter(void)
;;;212    {
;;;213        /*Open 5M clock source*/
;;;214        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;215        SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
;;;216    
;;;217        PERIPH->PERI_FUNC0_EN |= BIT_PERI_KEYSCAN_EN;
;;;218        PERIPH->PERI_CLK_CTRL1 |= (BIT_SOC_ACTCK_KEYSCAN_EN | SYSBLK_SLPCK_KEYSCAN_EN_Msk);
;;;219    
;;;220        KeyScan_StoreReg[0] = KEYSCAN->CLKDIV;               /* 0x00 */
;;;221        KeyScan_StoreReg[1] = KEYSCAN->TIMERCR;              /* 0x04 */
;;;222        KeyScan_StoreReg[2] = KEYSCAN->CR;                   /* 0x08 */
;;;223        KeyScan_StoreReg[3] = KEYSCAN->COLCR;                /* 0x0C */
;;;224        KeyScan_StoreReg[4] = KEYSCAN->ROWCR;                /* 0x10 */
;;;225        KeyScan_StoreReg[6] = KEYSCAN->INTMASK;              /* 0x18 */
;;;226    
;;;227        return;
;;;228    }
;;;229    
;;;230    /**
;;;231      * @brief  KEYSCAN exit dlps callback function(Resume KEYSCAN register values when system exit DLPS)
;;;232      * @param  None
;;;233      * @retval None
;;;234      */
;;;235    DATA_RAM_FUNCTION __STATIC_INLINE void KeyScan_DLPS_Exit(void)
;;;236    {
;;;237        /*Open 5M clock source*/
;;;238        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;239        SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
;;;240    
;;;241        PERIPH->PERI_FUNC0_EN |= BIT_PERI_KEYSCAN_EN;
;;;242        PERIPH->PERI_CLK_CTRL1 |= (BIT_SOC_ACTCK_KEYSCAN_EN | SYSBLK_SLPCK_KEYSCAN_EN_Msk);
;;;243    
;;;244        /* Set FSM to idle state */
;;;245        KEYSCAN->CR &= ~BIT31;
;;;246        KEYSCAN->CLKDIV = KeyScan_StoreReg[0];
;;;247        KEYSCAN->CR = (KeyScan_StoreReg[2] & (~(BIT31)));
;;;248        KEYSCAN->TIMERCR = KeyScan_StoreReg[1];
;;;249        KEYSCAN->COLCR = KeyScan_StoreReg[3];
;;;250        KEYSCAN->ROWCR = KeyScan_StoreReg[4];
;;;251        KEYSCAN->INTMASK = KeyScan_StoreReg[6];
;;;252        KEYSCAN->CR |= (KeyScan_StoreReg[2] & ((BIT31)));
;;;253    
;;;254        return;
;;;255    }
;;;256    #endif /* USE_KEYSCAN_DLPS */
;;;257    
;;;258    
;;;259    /********************************************** ********************************************************/
;;;260    /**************************************** [QDEC DLPS] **************************************************/
;;;261    /*******************************************************************************************************/
;;;262    /*******************************************************************************************************/
;;;263    #if USE_QDECODER_DLPS
;;;264    __STATIC_INLINE void QuadDecoder_DLPS_Enter(void);
;;;265    __STATIC_INLINE void QuadDecoder_DLPS_Exit(void);
;;;266    
;;;267    uint32_t QuadDecoder_StoreReg[5];  /*  This array should be placed in RAM ON/Buffer ON.    */
;;;268    
;;;269    /**
;;;270      * @brief  QDEC enter dlps callback function(Save QDEC register values when system enter DLPS)
;;;271      * @param  None
;;;272      * @retval None
;;;273      */
;;;274    __STATIC_INLINE void QuadDecoder_DLPS_Enter(void)
;;;275    {
;;;276        /*Open 20M clock source*/
;;;277        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;278        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;279        SYSBLKCTRL->u_218.PERI_FUNC0_EN |= SYSBLK_QDECODE_EN_Msk;
;;;280        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_QDECODE_EN_Msk | SYSBLK_SLPCK_QDECODE_EN_Msk);
;;;281    
;;;282        QuadDecoder_StoreReg[0] = QDEC->REG_DIV;
;;;283        QuadDecoder_StoreReg[1] = QDEC->REG_CR_X;
;;;284        QuadDecoder_StoreReg[2] = QDEC->REG_CR_Y;
;;;285        QuadDecoder_StoreReg[3] = QDEC->REG_CR_Z;
;;;286        QuadDecoder_StoreReg[4] = QDEC->INT_MASK;
;;;287    
;;;288        return;
;;;289    }
;;;290    
;;;291    /**
;;;292      * @brief  QDEC exit dlps callback function(Resume QDEC register values when system exit DLPS)
;;;293      * @param  None
;;;294      * @retval None
;;;295      */
;;;296    DATA_RAM_FUNCTION __STATIC_INLINE void QuadDecoder_DLPS_Exit(void)
;;;297    {
;;;298        /*Open 20M clock source*/
;;;299        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;300        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;301        SYSBLKCTRL->u_218.PERI_FUNC0_EN |= SYSBLK_QDECODE_EN_Msk;
;;;302        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_QDECODE_EN_Msk | SYSBLK_SLPCK_QDECODE_EN_Msk);
;;;303    
;;;304        //clear flags
;;;305        QDEC->REG_DIV  = QuadDecoder_StoreReg[0];
;;;306        QDEC->REG_CR_X = QuadDecoder_StoreReg[1];
;;;307        QDEC->REG_CR_Y = QuadDecoder_StoreReg[2];
;;;308        QDEC->REG_CR_Z = QuadDecoder_StoreReg[3];
;;;309        QDEC->INT_MASK = QuadDecoder_StoreReg[4];
;;;310    
;;;311        return;
;;;312    }
;;;313    #endif
;;;314    
;;;315    /********************************************** ********************************************************/
;;;316    /**************************************** [SPI0 DLPS] **************************************************/
;;;317    /*******************************************************************************************************/
;;;318    /*******************************************************************************************************/
;;;319    #if USE_SPI0_DLPS
;;;320    __STATIC_INLINE void SPI0_DLPS_Enter(void);
;;;321    __STATIC_INLINE void SPI0_DLPS_Exit(void);
;;;322    
;;;323    uint32_t SPI0_StoreReg[13];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;324    
;;;325    /**
;;;326      * @brief  SPI0 enter dlps callback function(Save SPI0 register values when system enter DLPS)
;;;327      * @param  None
;;;328      * @retval None
;;;329      */
;;;330    __STATIC_INLINE void SPI0_DLPS_Enter(void)
;;;331    {
;;;332        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI0_EN_Msk;
;;;333        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI0_EN_Msk | SYSBLK_SLPCK_SPI0_EN_Msk);
;;;334    
;;;335        SPI0_StoreReg[0] = SPI0->CTRLR0;
;;;336        SPI0_StoreReg[1] = SPI0->CTRLR1;
;;;337        SPI0_StoreReg[2] = SPI0->SSIENR;
;;;338        SPI0_StoreReg[3] = SPI0->SER;
;;;339        SPI0_StoreReg[4] = SPI0->BAUDR;
;;;340        SPI0_StoreReg[5] = SPI0->TXFTLR;
;;;341        SPI0_StoreReg[6] = SPI0->RXFTLR;
;;;342        SPI0_StoreReg[7] = SPI0->IMR;
;;;343        SPI0_StoreReg[8] = SPI0->DMACR;
;;;344        SPI0_StoreReg[9] = SPI0->DMATDLR;
;;;345        SPI0_StoreReg[10] = SPI0->DMARDLR;
;;;346        SPI0_StoreReg[11] = SPI0->RX_SAMPLE_DLY;
;;;347        SPI0_StoreReg[12] = *(volatile uint32_t *)0x40000308;
;;;348    }
;;;349    
;;;350    /**
;;;351      * @brief  SPI0 exit dlps callback function(Resume SPI0 register values when system exit DLPS)
;;;352      * @param  None
;;;353      * @retval None
;;;354      */
;;;355    DATA_RAM_FUNCTION __STATIC_INLINE void SPI0_DLPS_Exit(void)
;;;356    {
;;;357        *(volatile uint32_t *)0x40000308 = SPI0_StoreReg[12];
;;;358        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI0_EN_Msk;
;;;359        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI0_EN_Msk | SYSBLK_SLPCK_SPI0_EN_Msk);
;;;360    
;;;361        SPI0->CTRLR0 = SPI0_StoreReg[0];
;;;362        SPI0->CTRLR1 = SPI0_StoreReg[1];
;;;363        SPI0->SER = SPI0_StoreReg[3];
;;;364        SPI0->BAUDR = SPI0_StoreReg[4];
;;;365        SPI0->TXFTLR = SPI0_StoreReg[5];
;;;366        SPI0->RXFTLR = SPI0_StoreReg[6];
;;;367        SPI0->IMR = SPI0_StoreReg[7];
;;;368        SPI0->DMACR = SPI0_StoreReg[8];
;;;369        SPI0->DMATDLR = SPI0_StoreReg[9];
;;;370        SPI0->DMARDLR = SPI0_StoreReg[10];
;;;371        SPI0->RX_SAMPLE_DLY = SPI0_StoreReg[11];
;;;372    
;;;373        /* Enable the selected SPI peripheral */
;;;374        SPI0->SSIENR = SPI0_StoreReg[2];
;;;375    }
;;;376    #endif
;;;377    
;;;378    
;;;379    /********************************************** ********************************************************/
;;;380    /**************************************** [SPI1 DLPS] **************************************************/
;;;381    /*******************************************************************************************************/
;;;382    /*******************************************************************************************************/
;;;383    #if USE_SPI1_DLPS
;;;384    __STATIC_INLINE void SPI1_DLPS_Enter(void);
;;;385    __STATIC_INLINE void SPI1_DLPS_Exit(void);
;;;386    
;;;387    uint32_t SPI1_StoreReg[13];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;388    
;;;389    /**
;;;390      * @brief  SPI1 enter dlps callback function(Save SPI1 register values when system enter DLPS)
;;;391      * @param  None
;;;392      * @retval None
;;;393      */
;;;394    __STATIC_INLINE void SPI1_DLPS_Enter(void)
;;;395    {
;;;396        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI1_EN_Msk;
;;;397        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI1_EN_Msk | SYSBLK_SLPCK_SPI1_EN_Msk);
;;;398    
;;;399        SPI1_StoreReg[0] = SPI1->CTRLR0;
;;;400        SPI1_StoreReg[1] = SPI1->CTRLR1;
;;;401        SPI1_StoreReg[2] = SPI1->SSIENR;
;;;402        SPI1_StoreReg[3] = SPI1->SER;
;;;403        SPI1_StoreReg[4] = SPI1->BAUDR;
;;;404        SPI1_StoreReg[5] = SPI1->TXFTLR;
;;;405        SPI1_StoreReg[6] = SPI1->RXFTLR;
;;;406        SPI1_StoreReg[7] = SPI1->IMR;
;;;407        SPI1_StoreReg[8] = SPI1->DMACR;
;;;408        SPI1_StoreReg[9] = SPI1->DMATDLR;
;;;409        SPI1_StoreReg[10] = SPI1->DMARDLR;
;;;410        SPI1_StoreReg[11] = SPI1->RX_SAMPLE_DLY;
;;;411        SPI1_StoreReg[12] = *(volatile uint32_t *)0x40000308;
;;;412    }
;;;413    
;;;414    /**
;;;415      * @brief  SPI1 exit dlps callback function(Resume SPI1 register values when system exit DLPS)
;;;416      * @param  None
;;;417      * @retval None
;;;418      */
;;;419    DATA_RAM_FUNCTION __STATIC_INLINE void SPI1_DLPS_Exit(void)
;;;420    {
;;;421        *(volatile uint32_t *)0x40000308 = SPI1_StoreReg[12];
;;;422        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI1_EN_Msk;
;;;423        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI1_EN_Msk | SYSBLK_SLPCK_SPI1_EN_Msk);
;;;424    
;;;425        SPI1->CTRLR0 = SPI1_StoreReg[0];
;;;426        SPI1->CTRLR1 = SPI1_StoreReg[1];
;;;427        SPI1->SER = SPI1_StoreReg[3];
;;;428        SPI1->BAUDR = SPI1_StoreReg[4];
;;;429        SPI1->TXFTLR = SPI1_StoreReg[5];
;;;430        SPI1->RXFTLR = SPI1_StoreReg[6];
;;;431        SPI1->IMR = SPI1_StoreReg[7];
;;;432        SPI1->DMACR = SPI1_StoreReg[8];
;;;433        SPI1->DMATDLR = SPI1_StoreReg[9];
;;;434        SPI1->DMARDLR = SPI1_StoreReg[10];
;;;435        SPI1->RX_SAMPLE_DLY = SPI1_StoreReg[11];
;;;436    
;;;437        /* Enable the selected SPI peripheral */
;;;438        SPI1->SSIENR = SPI1_StoreReg[2];
;;;439    }
;;;440    #endif
;;;441    
;;;442    /********************************************** ********************************************************/
;;;443    /**************************************** [SPI2W DLPS] **************************************************/
;;;444    /*******************************************************************************************************/
;;;445    /*******************************************************************************************************/
;;;446    #if USE_SPI2W_DLPS
;;;447    __STATIC_INLINE void SPI2W_DLPS_Enter(void);
;;;448    __STATIC_INLINE void SPI2W_DLPS_Exit(void);
;;;449    
;;;450    uint32_t SPI2W_StoreReg[1];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;451    
;;;452    /**
;;;453      * @brief  SPI2W enter dlps callback function(Save SPI2W register values when system enter DLPS)
;;;454      * @param  None
;;;455      * @retval None
;;;456      */
;;;457    __STATIC_INLINE void SPI2W_DLPS_Enter(void)
;;;458    {
;;;459        /*Open 20M clock source*/
;;;460        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;461        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;462    
;;;463        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI2W_EN_Msk;
;;;464        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_SPI2WIRE_EN_Msk | SYSBLK_SLPCK_SPI2WIRE_EN_Msk);
;;;465    
;;;466        SPI2W_StoreReg[0] = SPI3WIRE->CFGR;
;;;467    }
;;;468    
;;;469    /**
;;;470      * @brief  SPI2W exit dlps callback function(Resume SPI2W register values when system exit DLPS)
;;;471      * @param  None
;;;472      * @retval None
;;;473      */
;;;474    DATA_RAM_FUNCTION __STATIC_INLINE void SPI2W_DLPS_Exit(void)
;;;475    {
;;;476        /*Open 20M clock source*/
;;;477        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;478        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;479    
;;;480        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI2W_EN_Msk;
;;;481        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_SPI2WIRE_EN_Msk | SYSBLK_SLPCK_SPI2WIRE_EN_Msk);
;;;482    
;;;483        SPI3WIRE->CFGR = SPI2W_StoreReg[0];
;;;484    }
;;;485    #endif
;;;486    
;;;487    /********************************************** ********************************************************/
;;;488    /**************************************** [I2C0 DLPS] **************************************************/
;;;489    /*******************************************************************************************************/
;;;490    /*******************************************************************************************************/
;;;491    #if USE_I2C0_DLPS
;;;492    __STATIC_INLINE void I2C0_DLPS_Enter(void);
;;;493    __STATIC_INLINE void I2C0_DLPS_Exit(void);
;;;494    
;;;495    uint32_t I2C0_StoreReg[20];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;496    
;;;497    /**
;;;498      * @brief  I2C0 enter dlps callback function(Save I2C0 register values when system enter DLPS)
;;;499      * @param  None
;;;500      * @retval None
;;;501      */
;;;502    __STATIC_INLINE void I2C0_DLPS_Enter(void)
;;;503    {
;;;504        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C0_EN_Msk | SYSBLK_SLPCK_I2C0_EN_Msk);
;;;505        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C0_EN_Msk;
;;;506    
;;;507        I2C0_StoreReg[0] = I2C0->IC_CON;
;;;508        I2C0_StoreReg[1] = I2C0->IC_TAR;
;;;509        I2C0_StoreReg[2] = I2C0->IC_SAR;
;;;510        I2C0_StoreReg[3] = I2C0->IC_HS_MADDR;
;;;511    
;;;512        I2C0_StoreReg[4] = I2C0->IC_SS_SCL_HCNT;
;;;513        I2C0_StoreReg[5] = I2C0->IC_SS_SCL_LCNT;
;;;514        I2C0_StoreReg[6] = I2C0->IC_FS_SCL_HCNT;
;;;515        I2C0_StoreReg[7] = I2C0->IC_FS_SCL_LCNT;
;;;516        I2C0_StoreReg[8] = I2C0->IC_HS_SCL_HCNT;
;;;517        I2C0_StoreReg[9] = I2C0->IC_HS_SCL_LCNT;
;;;518    
;;;519        I2C0_StoreReg[10] = I2C0->IC_INTR_MASK;
;;;520        I2C0_StoreReg[11] = I2C0->IC_RX_TL;
;;;521        I2C0_StoreReg[12] = I2C0->IC_TX_TL;
;;;522        I2C0_StoreReg[13] = I2C0->IC_ENABLE;
;;;523        I2C0_StoreReg[14] = I2C0->IC_SDA_HOLD;
;;;524        I2C0_StoreReg[15] = I2C0->IC_SLV_DATA_NACK_ONLY;
;;;525        I2C0_StoreReg[16] = I2C0->IC_DMA_CR;
;;;526        I2C0_StoreReg[17] = I2C0->IC_DMA_TDLR;
;;;527        I2C0_StoreReg[18] = I2C0->IC_DMA_RDLR;
;;;528    
;;;529        I2C0_StoreReg[19] = I2C0->IC_SDA_SETUP;
;;;530    }
;;;531    
;;;532    /**
;;;533      * @brief  I2C0 exit dlps callback function(Resume I2C0 register values when system exit DLPS)
;;;534      * @param  None
;;;535      * @retval None
;;;536      */
;;;537    DATA_RAM_FUNCTION __STATIC_INLINE void I2C0_DLPS_Exit(void)
;;;538    {
;;;539        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C0_EN_Msk | SYSBLK_SLPCK_I2C0_EN_Msk);
;;;540        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C0_EN_Msk;
;;;541    
;;;542        I2C0->IC_CON = I2C0_StoreReg[0];
;;;543        I2C0->IC_TAR = I2C0_StoreReg[1];
;;;544        I2C0->IC_SAR = I2C0_StoreReg[2];
;;;545        I2C0->IC_HS_MADDR = I2C0_StoreReg[3];
;;;546    
;;;547        I2C0->IC_SS_SCL_HCNT = I2C0_StoreReg[4];
;;;548        I2C0->IC_SS_SCL_LCNT = I2C0_StoreReg[5];
;;;549        I2C0->IC_FS_SCL_HCNT = I2C0_StoreReg[6];
;;;550        I2C0->IC_FS_SCL_LCNT = I2C0_StoreReg[7];
;;;551        I2C0->IC_HS_SCL_HCNT = I2C0_StoreReg[8];
;;;552        I2C0->IC_HS_SCL_LCNT = I2C0_StoreReg[9];
;;;553    
;;;554        I2C0->IC_INTR_MASK = I2C0_StoreReg[10];
;;;555        I2C0->IC_RX_TL = I2C0_StoreReg[11];
;;;556        I2C0->IC_TX_TL = I2C0_StoreReg[12];
;;;557        I2C0->IC_SDA_HOLD = I2C0_StoreReg[14];
;;;558        I2C0->IC_SLV_DATA_NACK_ONLY = I2C0_StoreReg[15];
;;;559        I2C0->IC_DMA_CR = I2C0_StoreReg[16];
;;;560        I2C0->IC_DMA_TDLR = I2C0_StoreReg[17];
;;;561        I2C0->IC_DMA_RDLR = I2C0_StoreReg[18];
;;;562        I2C0->IC_SDA_SETUP = I2C0_StoreReg[19];
;;;563    
;;;564        I2C0->IC_ENABLE = I2C0_StoreReg[13];
;;;565    }
;;;566    #endif
;;;567    
;;;568    /********************************************** ********************************************************/
;;;569    /**************************************** [I2C1 DLPS] **************************************************/
;;;570    /*******************************************************************************************************/
;;;571    /*******************************************************************************************************/
;;;572    #if USE_I2C1_DLPS
;;;573    __STATIC_INLINE void I2C1_DLPS_Enter(void);
;;;574    __STATIC_INLINE void I2C1_DLPS_Exit(void);
;;;575    
;;;576    uint32_t I2C1_StoreReg[20];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;577    
;;;578    /**
;;;579      * @brief  I2C1 enter dlps callback function(Save I2C1 register values when system enter DLPS)
;;;580      * @param  None
;;;581      * @retval None
;;;582      */
;;;583    __STATIC_INLINE void I2C1_DLPS_Enter(void)
;;;584    {
;;;585        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C1_EN_Msk | SYSBLK_SLPCK_I2C1_EN_Msk);
;;;586        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C1_EN_Msk;
;;;587    
;;;588        I2C1_StoreReg[0] = I2C1->IC_CON;
;;;589        I2C1_StoreReg[1] = I2C1->IC_TAR;
;;;590        I2C1_StoreReg[2] = I2C1->IC_SAR;
;;;591        I2C1_StoreReg[3] = I2C1->IC_HS_MADDR;
;;;592    
;;;593        I2C1_StoreReg[4] = I2C1->IC_SS_SCL_HCNT;
;;;594        I2C1_StoreReg[5] = I2C1->IC_SS_SCL_LCNT;
;;;595        I2C1_StoreReg[6] = I2C1->IC_FS_SCL_HCNT;
;;;596        I2C1_StoreReg[7] = I2C1->IC_FS_SCL_LCNT;
;;;597        I2C1_StoreReg[8] = I2C1->IC_HS_SCL_HCNT;
;;;598        I2C1_StoreReg[9] = I2C1->IC_HS_SCL_LCNT;
;;;599    
;;;600        I2C1_StoreReg[10] = I2C1->IC_INTR_MASK;
;;;601        I2C1_StoreReg[11] = I2C1->IC_RX_TL;
;;;602        I2C1_StoreReg[12] = I2C1->IC_TX_TL;
;;;603        I2C1_StoreReg[13] = I2C1->IC_ENABLE;
;;;604        I2C1_StoreReg[14] = I2C1->IC_SDA_HOLD;
;;;605        I2C1_StoreReg[15] = I2C1->IC_SLV_DATA_NACK_ONLY;
;;;606        I2C1_StoreReg[16] = I2C1->IC_DMA_CR;
;;;607        I2C1_StoreReg[17] = I2C1->IC_DMA_TDLR;
;;;608        I2C1_StoreReg[18] = I2C1->IC_DMA_RDLR;
;;;609    
;;;610        I2C1_StoreReg[19] = I2C1->IC_SDA_SETUP;
;;;611    }
;;;612    
;;;613    /**
;;;614      * @brief  I2C1 exit dlps callback function(Resume I2C1 register values when system exit DLPS)
;;;615      * @param  None
;;;616      * @retval None
;;;617      */
;;;618    DATA_RAM_FUNCTION __STATIC_INLINE void I2C1_DLPS_Exit(void)
;;;619    {
;;;620        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C1_EN_Msk | SYSBLK_SLPCK_I2C1_EN_Msk);
;;;621        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C1_EN_Msk;
;;;622    
;;;623        I2C1->IC_CON = I2C1_StoreReg[0];
;;;624        I2C1->IC_TAR = I2C1_StoreReg[1];
;;;625        I2C1->IC_SAR = I2C1_StoreReg[2];
;;;626        I2C0->IC_HS_MADDR = I2C1_StoreReg[3];
;;;627    
;;;628        I2C1->IC_SS_SCL_HCNT = I2C1_StoreReg[4];
;;;629        I2C1->IC_SS_SCL_LCNT = I2C1_StoreReg[5];
;;;630        I2C1->IC_FS_SCL_HCNT = I2C1_StoreReg[6];
;;;631        I2C1->IC_FS_SCL_LCNT = I2C1_StoreReg[7];
;;;632        I2C1->IC_HS_SCL_HCNT = I2C1_StoreReg[8];
;;;633        I2C1->IC_HS_SCL_LCNT = I2C1_StoreReg[9];
;;;634    
;;;635        I2C1->IC_INTR_MASK = I2C1_StoreReg[10];
;;;636        I2C1->IC_RX_TL = I2C1_StoreReg[11];
;;;637        I2C1->IC_TX_TL = I2C1_StoreReg[12];
;;;638        I2C1->IC_SDA_HOLD = I2C1_StoreReg[14];
;;;639        I2C1->IC_SLV_DATA_NACK_ONLY = I2C1_StoreReg[15];
;;;640        I2C1->IC_DMA_CR = I2C1_StoreReg[16];
;;;641        I2C1->IC_DMA_TDLR = I2C1_StoreReg[17];
;;;642        I2C1->IC_DMA_RDLR = I2C1_StoreReg[18];
;;;643        I2C1->IC_SDA_SETUP = I2C1_StoreReg[19];
;;;644    
;;;645        I2C1->IC_ENABLE = I2C1_StoreReg[13];
;;;646    }
;;;647    #endif
;;;648    
;;;649    /********************************************** ********************************************************/
;;;650    /**************************************** [Timer & PWM DLPS] *******************************************/
;;;651    /*******************************************************************************************************/
;;;652    /*******************************************************************************************************/
;;;653    #if USE_TIM_DLPS
;;;654    #include "rtl876x_tim.h"
;;;655    __STATIC_INLINE void TIM_DLPS_Enter(void);
;;;656    __STATIC_INLINE void TIM_DLPS_Exit(void);
;;;657    
;;;658    uint32_t TIM_StoreReg[26];      /*  This array should be placed in RAM ON/Buffer ON.    */
;;;659    
;;;660    /* PWM, use with timer */
;;;661    uint32_t PWM0_StoreReg;         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;662    
;;;663    uint32_t PWM1_StoreReg;         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;664    
;;;665    /**
;;;666      * @brief  TIMER enter dlps callback function(Save TIMER register values when system enter DLPS)
;;;667      * @param  None
;;;668      * @retval None
;;;669      */
;;;670    __STATIC_INLINE void TIM_DLPS_Enter(void)
;;;671    {
;;;672        SYSBLKCTRL->u_210.SOC_FUNC_EN |= BIT(16);
;;;673        SYSBLKCTRL->u_230.CLK_CTRL |= (SYSBLK_ACTCK_TIMER_EN_Msk | SYSBLK_SLPCK_TIMER_EN_Msk);
;;;674    
;;;675        TIM_StoreReg[0] = TIM0->LoadCount;
;;;676        TIM_StoreReg[1] = TIM0->ControlReg;
;;;677        TIM_StoreReg[2] = TIMER0_LOAD_COUNT2;
;;;678    
;;;679        TIM_StoreReg[3] = TIM1->LoadCount;
;;;680        TIM_StoreReg[4] = TIM1->ControlReg;
;;;681        TIM_StoreReg[5] = TIMER1_LOAD_COUNT2;
;;;682    
;;;683        TIM_StoreReg[6] = TIM2->LoadCount;
;;;684        TIM_StoreReg[7] = TIM2->ControlReg;
;;;685        TIM_StoreReg[8] = TIMER2_LOAD_COUNT2;
;;;686    
;;;687        TIM_StoreReg[9] = TIM3->LoadCount;
;;;688        TIM_StoreReg[10] = TIM3->ControlReg;
;;;689        TIM_StoreReg[11] = TIMER3_LOAD_COUNT2;
;;;690    
;;;691        TIM_StoreReg[12] = TIM4->LoadCount;
;;;692        TIM_StoreReg[13] = TIM4->ControlReg;
;;;693        TIM_StoreReg[14] = TIMER4_LOAD_COUNT2;
;;;694    
;;;695        TIM_StoreReg[15] = TIM5->LoadCount;
;;;696        TIM_StoreReg[16] = TIM5->ControlReg;
;;;697        TIM_StoreReg[17] = TIMER5_LOAD_COUNT2;
;;;698    
;;;699        TIM_StoreReg[18] = TIM6->LoadCount;
;;;700        TIM_StoreReg[19] = TIM6->ControlReg;
;;;701        TIM_StoreReg[20] = TIMER6_LOAD_COUNT2;
;;;702    
;;;703        TIM_StoreReg[21] = TIM7->LoadCount;
;;;704        TIM_StoreReg[22] = TIM7->ControlReg;
;;;705        TIM_StoreReg[23] = TIMER7_LOAD_COUNT2;
;;;706    
;;;707        TIM_StoreReg[24] = *((volatile uint32_t *)0x4000035CUL);
;;;708        TIM_StoreReg[25] = *((volatile uint32_t *)0x40000360UL);
;;;709    
;;;710        PWM0_StoreReg = TIMER_PWM0_CR;
;;;711    
;;;712        PWM1_StoreReg = TIMER_PWM1_CR;
;;;713    }
;;;714    
;;;715    /**
;;;716      * @brief  TIMER exit dlps callback function(Resume TIMER register values when system exit DLPS)
;;;717      * @param  None
;;;718      * @retval None
;;;719      */
;;;720    DATA_RAM_FUNCTION __STATIC_INLINE void TIM_DLPS_Exit(void)
;;;721    {
;;;722        /* Enable timer IP clock and function */
;;;723        SYSBLKCTRL->u_210.SOC_FUNC_EN |= BIT(16);
;;;724        SYSBLKCTRL->u_230.CLK_CTRL |= (SYSBLK_ACTCK_TIMER_EN_Msk | SYSBLK_SLPCK_TIMER_EN_Msk);
;;;725    
;;;726        *((volatile uint32_t *)0x4000035CUL) = TIM_StoreReg[24];
;;;727        *((volatile uint32_t *)0x40000360UL) = TIM_StoreReg[25];
;;;728    
;;;729        TIM0->LoadCount = TIM_StoreReg[0];
;;;730        TIM0->ControlReg = TIM_StoreReg[1];
;;;731        TIMER0_LOAD_COUNT2 = TIM_StoreReg[2];
;;;732    
;;;733        TIM1->LoadCount = TIM_StoreReg[3];
;;;734        TIM1->ControlReg = TIM_StoreReg[4];
;;;735        TIMER1_LOAD_COUNT2 = TIM_StoreReg[5];
;;;736    
;;;737        TIM2->LoadCount = TIM_StoreReg[6];
;;;738        TIM2->ControlReg = TIM_StoreReg[7];
;;;739        TIMER2_LOAD_COUNT2 = TIM_StoreReg[8];
;;;740    
;;;741        TIM3->LoadCount = TIM_StoreReg[9];
;;;742        TIM3->ControlReg = TIM_StoreReg[10];
;;;743        TIMER3_LOAD_COUNT2 = TIM_StoreReg[11];
;;;744    
;;;745        TIM4->LoadCount = TIM_StoreReg[12];
;;;746        TIM4->ControlReg = TIM_StoreReg[13];
;;;747        TIMER4_LOAD_COUNT2 = TIM_StoreReg[14];
;;;748    
;;;749        TIM5->LoadCount = TIM_StoreReg[15];
;;;750        TIM5->ControlReg = TIM_StoreReg[16];
;;;751        TIMER5_LOAD_COUNT2 = TIM_StoreReg[17];
;;;752    
;;;753        TIM6->LoadCount = TIM_StoreReg[18];
;;;754        TIM6->ControlReg = TIM_StoreReg[19];
;;;755        TIMER6_LOAD_COUNT2 = TIM_StoreReg[20];
;;;756    
;;;757        TIM7->LoadCount = TIM_StoreReg[21];
;;;758        TIM7->ControlReg = TIM_StoreReg[22];
;;;759        TIMER7_LOAD_COUNT2 = TIM_StoreReg[23];
;;;760    
;;;761        TIMER_PWM0_CR = PWM0_StoreReg;
;;;762    
;;;763        TIMER_PWM1_CR = PWM1_StoreReg;
;;;764    }
;;;765    #endif  /* USE_TIM_DLPS */
;;;766    
;;;767    
;;;768    /********************************************** ********************************************************/
;;;769    /**************************************** [UART DLPS] **************************************************/
;;;770    /*******************************************************************************************************/
;;;771    /*******************************************************************************************************/
;;;772    #if USE_UART_DLPS
;;;773    #include "rtl876x_uart.h"
;;;774    
;;;775    __STATIC_INLINE void UART_DLPS_Enter(void);
;;;776    __STATIC_INLINE void UART_DLPS_Exit(void);
;;;777    
;;;778    uint32_t UART_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;779    
;;;780    /**
;;;781      * @brief  UART enter dlps callback function(Save UART register values when system enter DLPS)
;;;782      * @param  None
;;;783      * @retval None
;;;784      */
;;;785    __STATIC_INLINE void UART_DLPS_Enter(void)
;;;786    {
;;;787        PERIPH->PERI_FUNC0_EN |= (1 << 0);
;;;788        PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_UART0DATA_EN_Msk | SYSBLK_SLPCK_UART0DATA_EN_Msk);
;;;789    
;;;790        //access DLH and DLL
;;;791        UART->LCR |= (1 << 7);
;;;792        UART_StoreReg[0] = UART->DLL;
;;;793        UART_StoreReg[1] = UART->DLH_INTCR;
;;;794        UART->LCR &= (~(1 << 7));
;;;795    
;;;796        //save other registers
;;;797        UART_StoreReg[2] = UART->DLH_INTCR;
;;;798        UART_StoreReg[4] = UART->LCR;
;;;799        UART_StoreReg[5] = UART->MCR;
;;;800        UART_StoreReg[6] = UART->SPR;
;;;801        UART_StoreReg[7] = UART->STSR;
;;;802        UART_StoreReg[8] = UART->RX_IDLE_INTTCR;
;;;803        UART_StoreReg[9] = UART->RXIDLE_INTCR;
;;;804        UART_StoreReg[10] = UART->MISCR;
;;;805    
;;;806        return;
;;;807    }
;;;808    
;;;809    /**
;;;810      * @brief  UART exit dlps callback function(Resume UART register values when system exit DLPS)
;;;811      * @param  None
;;;812      * @retval None
;;;813      */
;;;814    DATA_RAM_FUNCTION __STATIC_INLINE void UART_DLPS_Exit(void)
;;;815    {
;;;816        PERIPH->PERI_FUNC0_EN |= (1 << 0);
;;;817        PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_UART0DATA_EN_Msk | SYSBLK_SLPCK_UART0DATA_EN_Msk);
;;;818    
;;;819        //access DLH and DLL
;;;820        UART->LCR |= (1 << 7);
;;;821        UART->DLL = UART_StoreReg[0];
;;;822        UART->DLH_INTCR =  UART_StoreReg[1];
;;;823        UART->LCR &= (~(1 << 7));
;;;824    
;;;825        //access other registers
;;;826        UART->INTID_FCR = (((UART_StoreReg[7] & BIT24) >> 21) | ((UART_StoreReg[7] & 0x7C000000) >> 18) |
;;;827                           (1));
;;;828        UART->LCR = UART_StoreReg[4];
;;;829        UART->MCR = UART_StoreReg[5];
;;;830        UART->SPR = UART_StoreReg[6];
;;;831        UART->STSR = UART_StoreReg[7];
;;;832        UART->DLH_INTCR = UART_StoreReg[2];
;;;833        UART->RX_IDLE_INTTCR = UART_StoreReg[8];
;;;834        UART->RXIDLE_INTCR = UART_StoreReg[9];
;;;835        UART->MISCR = UART_StoreReg[10];
;;;836    
;;;837        return;
;;;838    }
;;;839    #endif
;;;840    
;;;841    
;;;842    #if USE_UART1_DLPS
;;;843    
;;;844    __STATIC_INLINE void UART1_DLPS_Enter(void);
;;;845    __STATIC_INLINE void UART1_DLPS_Exit(void);
;;;846    
;;;847    uint32_t UART1_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;848    
;;;849    /**
;;;850      * @brief  UART1 enter dlps callback function(Save UART1 register values when system enter DLPS)
;;;851      * @param  None
;;;852      * @retval None
;;;853      */
;;;854    __STATIC_INLINE void UART1_DLPS_Enter(void)
;;;855    {
;;;856        //enable log uart peripheral & clock
;;;857        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;858        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;859    
;;;860        //access DLH and DLL
;;;861        UART1->LCR |= (1 << 7);
;;;862        UART1_StoreReg[0] = UART1->DLL;
;;;863        UART1_StoreReg[1] = UART1->DLH_INTCR;
;;;864        UART1->LCR &= (~(1 << 7));
;;;865    
;;;866        //save other registers
;;;867        UART1_StoreReg[2] = UART1->DLH_INTCR;
;;;868        UART1_StoreReg[4] = UART1->LCR;
;;;869        UART1_StoreReg[5] = UART1->MCR;
;;;870        UART1_StoreReg[6] = UART1->SPR;
;;;871        UART1_StoreReg[7] = UART1->STSR;
;;;872        UART1_StoreReg[8] = UART1->RX_IDLE_INTTCR;
;;;873        UART1_StoreReg[9] = UART1->RXIDLE_INTCR;
;;;874        UART1_StoreReg[10] = UART1->MISCR;
;;;875    
;;;876        return;
;;;877    }
;;;878    
;;;879    /**
;;;880      * @brief  UART1 exit dlps callback function(Resume UART1 register values when system exit DLPS)
;;;881      * @param  None
;;;882      * @retval None
;;;883      */
;;;884    DATA_RAM_FUNCTION __STATIC_INLINE void UART1_DLPS_Exit(void)
;;;885    {
;;;886        //enable log uart peripheral & clock
;;;887        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;888        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;889    
;;;890        //access DLH and DLL
;;;891        UART1->LCR |= (1 << 7);
;;;892        UART1->DLL = UART1_StoreReg[0];
;;;893        UART1->DLH_INTCR =  UART1_StoreReg[1];
;;;894        UART1->LCR &= (~(1 << 7));
;;;895    
;;;896        //access other registers
;;;897        UART1->INTID_FCR = (((UART1_StoreReg[7] & BIT24) >> 21) | ((UART1_StoreReg[7] & 0x7C000000)
;;;898                                                                   >> 18) | (1));
;;;899        UART1->LCR = UART1_StoreReg[4];
;;;900        UART1->MCR = UART1_StoreReg[5];
;;;901        UART1->SPR = UART1_StoreReg[6];
;;;902        UART1->STSR = UART1_StoreReg[7];
;;;903        UART1->DLH_INTCR = UART1_StoreReg[2];
;;;904        UART1->RX_IDLE_INTTCR = UART1_StoreReg[8];
;;;905        UART1->RXIDLE_INTCR = UART1_StoreReg[9];
;;;906        UART1->MISCR = UART1_StoreReg[10];
;;;907    
;;;908        return;
;;;909    }
;;;910    #endif
;;;911    
;;;912    #if USE_UART2_DLPS
;;;913    
;;;914    __STATIC_INLINE void UART2_DLPS_Enter(void);
;;;915    __STATIC_INLINE void UART2_DLPS_Exit(void);
;;;916    
;;;917    uint32_t UART2_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;918    
;;;919    /**
;;;920      * @brief  UART2 enter dlps callback function(Save UART2 register values when system enter DLPS)
;;;921      * @param  None
;;;922      * @retval None
;;;923      */
;;;924    __STATIC_INLINE void UART2_DLPS_Enter(void)
;;;925    {
;;;926        //enable log uart peripheral & clock
;;;927        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;928        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;929    
;;;930        //access DLH and DLL
;;;931        UART2->LCR |= (1 << 7);
;;;932        UART2_StoreReg[0] = UART2->DLL;
;;;933        UART2_StoreReg[1] = UART2->DLH_INTCR;
;;;934        UART2->LCR &= (~(1 << 7));
;;;935    
;;;936        //save other registers
;;;937        UART2_StoreReg[2] = UART2->DLH_INTCR;
;;;938        UART2_StoreReg[4] = UART2->LCR;
;;;939        UART2_StoreReg[5] = UART2->MCR;
;;;940        UART2_StoreReg[6] = UART2->SPR;
;;;941        UART2_StoreReg[7] = UART2->STSR;
;;;942        UART2_StoreReg[8] = UART2->RX_IDLE_INTTCR;
;;;943        UART2_StoreReg[9] = UART2->RXIDLE_INTCR;
;;;944        UART2_StoreReg[10] = UART2->MISCR;
;;;945    
;;;946        return;
;;;947    }
;;;948    
;;;949    /**
;;;950      * @brief  UART2 exit dlps callback function(Resume UART2 register values when system exit DLPS)
;;;951      * @param  None
;;;952      * @retval None
;;;953      */
;;;954    DATA_RAM_FUNCTION __STATIC_INLINE void UART2_DLPS_Exit(void)
;;;955    {
;;;956        //enable log uart peripheral & clock
;;;957        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;958        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;959    
;;;960        //access DLH and DLL
;;;961        UART2->LCR |= (1 << 7);
;;;962        UART2->DLL = UART2_StoreReg[0];
;;;963        UART2->DLH_INTCR =  UART2_StoreReg[1];
;;;964        UART2->LCR &= (~(1 << 7));
;;;965    
;;;966        //access other registers
;;;967        UART2->INTID_FCR = (((UART2_StoreReg[7] & BIT24) >> 21) | ((UART2_StoreReg[7] & 0x7C000000)
;;;968                                                                   >> 18) | (1));
;;;969        UART2->LCR = UART2_StoreReg[4];
;;;970        UART2->MCR = UART2_StoreReg[5];
;;;971        UART2->SPR = UART2_StoreReg[6];
;;;972        UART2->STSR = UART2_StoreReg[7];
;;;973        UART2->DLH_INTCR = UART2_StoreReg[2];
;;;974        UART2->RX_IDLE_INTTCR = UART2_StoreReg[8];
;;;975        UART2->RXIDLE_INTCR = UART2_StoreReg[9];
;;;976        UART2->MISCR = UART2_StoreReg[10];
;;;977    
;;;978        return;
;;;979    }
;;;980    #endif
;;;981    
;;;982    
;;;983    /********************************************** ********************************************************/
;;;984    /**************************************** [ADC DLPS] **************************************************/
;;;985    /*******************************************************************************************************/
;;;986    /*******************************************************************************************************/
;;;987    
;;;988    #if USE_ADC_DLPS
;;;989    __STATIC_INLINE void ADC_DLPS_Enter(void);
;;;990    __STATIC_INLINE void ADC_DLPS_Exit(void);
;;;991    
;;;992    uint32_t ADC_StoreReg[14];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;993    
;;;994    /**
;;;995      * @brief  ADC enter dlps callback function(Save ADC register values when system enter DLPS)
;;;996      * @param  None
;;;997      * @retval None
;;;998      */
;;;999    __STATIC_INLINE void ADC_DLPS_Enter(void)
;;;1000   {
;;;1001       /*Open 10M clock source*/
;;;1002       SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;1003       SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
;;;1004   
;;;1005       PERIPH->PERI_FUNC1_EN |= (1 << 0);
;;;1006       PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_ADC_EN_Msk | SYSBLK_SLPCK_ADC_EN_Msk);
;;;1007   
;;;1008       ADC_StoreReg[0] =  ADC->CR;          //0x04
;;;1009       ADC_StoreReg[1] =  ADC->SCHCR;       //0x08
;;;1010       ADC_StoreReg[2] =  ADC->INTCR;       //0x0C
;;;1011       ADC_StoreReg[3] =  ADC->SCHTAB0;     //0x10
;;;1012       ADC_StoreReg[4] =  ADC->SCHTAB1;     //0x14
;;;1013       ADC_StoreReg[5] =  ADC->SCHTAB2;     //0x18
;;;1014       ADC_StoreReg[6] =  ADC->SCHTAB3;     //0x1C
;;;1015       ADC_StoreReg[7] =  ADC->SCHTAB4;     //0x20
;;;1016       ADC_StoreReg[8] =  ADC->SCHTAB5;     //0x24
;;;1017       ADC_StoreReg[9] =  ADC->SCHTAB6;     //0x28
;;;1018       ADC_StoreReg[10] =  ADC->SCHTAB6;    //0x2C
;;;1019       ADC_StoreReg[11] =  ADC->PWRDLY;
;;;1020       ADC_StoreReg[12] =  ADC->DATCLK;
;;;1021       ADC_StoreReg[13] =  ADC->ANACTL;
;;;1022   
;;;1023       uint8_t reg_value = 0;
;;;1024       reg_value = btaon_fast_read_safe(0x110);
;;;1025       btaon_fast_write(0x110, reg_value & (~0x04));
;;;1026   
;;;1027       return;
;;;1028   }
;;;1029   
;;;1030   /**
;;;1031     * @brief  ADC exit dlps callback function(Resume ADC register values when system exit DLPS)
;;;1032     * @param  None
;;;1033     * @retval None
;;;1034     */
;;;1035   DATA_RAM_FUNCTION __STATIC_INLINE void ADC_DLPS_Exit(void)
;;;1036   {
;;;1037       /*Open 10M clock source*/
;;;1038       SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;1039       SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
;;;1040   
;;;1041       PERIPH->PERI_FUNC1_EN |= (1 << 0);
;;;1042       PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_ADC_EN_Msk | SYSBLK_SLPCK_ADC_EN_Msk);
;;;1043   
;;;1044   #if 0
;;;1045       //Todo
;;;1046       ADC->PWRDLY = ADC_StoreReg[10];
;;;1047       ADC->CR = (ADC_StoreReg[0] & (~((uint32_t)0x03)));
;;;1048       ADC->SCHTAB0 = ADC_StoreReg[3];
;;;1049       ADC->SCHTAB1 = ADC_StoreReg[4];
;;;1050       ADC->SCHTAB2 = ADC_StoreReg[5];
;;;1051       ADC->SCHTAB3 = ADC_StoreReg[6];
;;;1052       ADC->SCHTAB4 = ADC_StoreReg[7];
;;;1053       ADC->SCHTAB5 = ADC_StoreReg[8];
;;;1054       ADC->SCHTAB6 = ADC_StoreReg[9];
;;;1055       ADC->SCHCR = ADC_StoreReg[1];
;;;1056       ADC->INTCR = (ADC_StoreReg[2] & 0x1F);
;;;1057   #else
;;;1058       /*Disable all interrupt.*/
;;;1059       ADC->INTCR &= (~0x1f);
;;;1060   
;;;1061       /* Set power mode first */
;;;1062       ADC->PWRDLY = ADC_StoreReg[11];
;;;1063   
;;;1064       /* Disable schedule table */
;;;1065       ADC->SCHCR &= (~0xffff);
;;;1066   
;;;1067       ADC->SCHTAB0 = ADC_StoreReg[3];
;;;1068       ADC->SCHTAB1 = ADC_StoreReg[4];
;;;1069       ADC->SCHTAB2 = ADC_StoreReg[5];
;;;1070       ADC->SCHTAB3 = ADC_StoreReg[6];
;;;1071       ADC->SCHTAB4 = ADC_StoreReg[7];
;;;1072       ADC->SCHTAB5 = ADC_StoreReg[8];
;;;1073       ADC->SCHTAB6 = ADC_StoreReg[9];
;;;1074       ADC->SCHTAB7 = ADC_StoreReg[10];
;;;1075       ADC->SCHCR   = ADC_StoreReg[1];
;;;1076       ADC->CR = (ADC_StoreReg[0] & (~((uint32_t)0x03)));
;;;1077       ADC->DATCLK = ADC_StoreReg[12];
;;;1078       ADC->ANACTL = ADC_StoreReg[13];
;;;1079   
;;;1080       /*Clear ADC FIFO */
;;;1081       ADC->CR |= BIT26;
;;;1082       /* Clear all interrupt */
;;;1083       ADC->INTCR |= (0x1f << 8);
;;;1084   
;;;1085       /* Restore specify interrupt */
;;;1086       ADC->INTCR = ADC_StoreReg[2];
;;;1087   
;;;1088   #endif
;;;1089   
;;;1090       uint8_t reg_value = 0;
;;;1091       reg_value = btaon_fast_read_safe(0x110);
;;;1092       btaon_fast_write(0x110, reg_value | 0x04);
;;;1093   
;;;1094       return;
;;;1095   }
;;;1096   
;;;1097   #endif
;;;1098   
;;;1099   /********************************************** ********************************************************/
;;;1100   /**************************************** [IR DLPS] **************************************************/
;;;1101   /*******************************************************************************************************/
;;;1102   /*******************************************************************************************************/
;;;1103   
;;;1104   #if USE_IR_DLPS
;;;1105   __STATIC_INLINE void IR_DLPS_Enter(void);
;;;1106   __STATIC_INLINE void IR_DLPS_Exit(void);
;;;1107   
;;;1108   uint32_t IR_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1109   
;;;1110   /**
;;;1111     * @brief  IR enter dlps callback function(Save IR register values when system enter DLPS)
;;;1112     * @param  None
;;;1113     * @retval None
;;;1114     */
;;;1115   __STATIC_INLINE void IR_DLPS_Enter(void)
;;;1116   {
;;;1117       PERIPH->PERI_FUNC0_EN |= (1 << 10);
;;;1118       PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_IR_EN_Msk | SYSBLK_SLPCK_IR_EN_Msk);
;;;1119   
;;;1120       IR_StoreReg[0] = IR->CLK_DIV;
;;;1121       IR_StoreReg[1] = IR->TX_CONFIG;
;;;1122       IR_StoreReg[2] = IR->RX_CONFIG;
;;;1123       IR_StoreReg[3] = IR->RX_CNT_INT_SEL;
;;;1124   
;;;1125   
;;;1126       return;
;;;1127   }
;;;1128   
;;;1129   /**
;;;1130     * @brief  IR exit dlps callback function(Resume IR register values when system exit DLPS)
;;;1131     * @param  None
;;;1132     * @retval None
;;;1133     */
;;;1134   DATA_RAM_FUNCTION __STATIC_INLINE void IR_DLPS_Exit(void)
;;;1135   {
;;;1136       PERIPH->PERI_FUNC0_EN |= (1 << 10);
;;;1137       PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_IR_EN_Msk | SYSBLK_SLPCK_IR_EN_Msk);
;;;1138   
;;;1139       IR->CLK_DIV = IR_StoreReg[0];
;;;1140       if (IR_StoreReg[1] & BIT31)
;;;1141       {
;;;1142           /* RX MODE */
;;;1143           IR->TX_CONFIG  = IR_StoreReg[1];
;;;1144           IR->RX_CONFIG  = IR_StoreReg[2];
;;;1145           IR->RX_CNT_INT_SEL  = IR_StoreReg[3];
;;;1146       }
;;;1147       else
;;;1148       {
;;;1149           /* TX MODE */
;;;1150           IR->TX_CONFIG  = IR_StoreReg[1];
;;;1151           /* If IR TX mode is idle, must write one data firstly */
;;;1152           IR->TX_FIFO = 0;
;;;1153       }
;;;1154   
;;;1155       return;
;;;1156   }
;;;1157   
;;;1158   #endif
;;;1159   
;;;1160   /********************************************** ********************************************************/
;;;1161   /**************************************** [GDMA DLPS] **************************************************/
;;;1162   /*******************************************************************************************************/
;;;1163   /*******************************************************************************************************/
;;;1164   
;;;1165   #if USE_GDMA_DLPS
;;;1166   
;;;1167   __STATIC_INLINE void GDMA_DLPS_Enter(void);
;;;1168   __STATIC_INLINE void GDMA_DLPS_Exit(void);
;;;1169   uint32_t GDMA_StoreReg[7];         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1170   
;;;1171   #endif
;;;1172   
;;;1173   #if USE_GDMACHANNEL0_DLPS
;;;1174   uint32_t GDMAChannel0_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1175   #endif
;;;1176   
;;;1177   #if USE_GDMACHANNEL1_DLPS
;;;1178   uint32_t GDMAChannel1_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1179   #endif
;;;1180   
;;;1181   #if USE_GDMACHANNEL2_DLPS
;;;1182   uint32_t GDMAChannel2_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1183   #endif
;;;1184   
;;;1185   #if USE_GDMACHANNEL3_DLPS
;;;1186   uint32_t GDMAChannel3_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1187   #endif
;;;1188   
;;;1189   #if USE_GDMACHANNEL4_DLPS
;;;1190   uint32_t GDMAChannel4_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1191   #endif
;;;1192   
;;;1193   #if USE_GDMACHANNEL5_DLPS
;;;1194   uint32_t GDMAChannel5_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1195   #endif
;;;1196   
;;;1197   #if USE_GDMA_DLPS
;;;1198   /**
;;;1199     * @brief  GDMA enter dlps callback function(Save GDMA register values when system enter DLPS)
;;;1200     * @param  None
;;;1201     * @retval None
;;;1202     */
;;;1203   __STATIC_INLINE void GDMA_DLPS_Enter(void)
;;;1204   {
;;;1205       SYSBLKCTRL->u_210.SOC_FUNC_EN |= SYSBLK_GDMA0_EN_Msk;
;;;1206       PERIPH->PERI_CLK_CTRL |= (SYSBLK_ACTCK_GDMA0_EN_Msk | SYSBLK_SLPCK_GDMA0_EN_Msk);
;;;1207   
;;;1208       GDMA_StoreReg[0] = GDMA_BASE->DmaCfgReg;
;;;1209       GDMA_StoreReg[1] = GDMA_BASE->ChEnReg;
;;;1210       GDMA_StoreReg[2] = GDMA_BASE->MASK_TFR;
;;;1211       GDMA_StoreReg[3] = GDMA_BASE->MASK_BLOCK;
;;;1212       GDMA_StoreReg[4] = GDMA_BASE->MASK_SRC_TRAN;
;;;1213       GDMA_StoreReg[5] = GDMA_BASE->MASK_DST_TRAN;
;;;1214       GDMA_StoreReg[6] = GDMA_BASE->MASK_ERR;
;;;1215   
;;;1216   #if USE_GDMACHANNEL0_DLPS
;;;1217       GDMAChannel0_StoreReg[0] = GDMA_Channel0->SAR;
;;;1218       GDMAChannel0_StoreReg[1] = GDMA_Channel0->DAR;
;;;1219       GDMAChannel0_StoreReg[2] = GDMA_Channel0->CTL_LOW;
;;;1220       GDMAChannel0_StoreReg[3] = GDMA_Channel0->CTL_HIGH;
;;;1221       GDMAChannel0_StoreReg[4] = GDMA_Channel0->CFG_LOW;
;;;1222       GDMAChannel0_StoreReg[5] = GDMA_Channel0->CFG_HIGH;
;;;1223   #endif
;;;1224   #if USE_GDMACHANNEL1_DLPS
;;;1225       GDMAChannel1_StoreReg[0] = GDMA_Channel1->SAR;
;;;1226       GDMAChannel1_StoreReg[1] = GDMA_Channel1->DAR;
;;;1227       GDMAChannel1_StoreReg[2] = GDMA_Channel1->CTL_LOW;
;;;1228       GDMAChannel1_StoreReg[3] = GDMA_Channel1->CTL_HIGH;
;;;1229       GDMAChannel1_StoreReg[4] = GDMA_Channel1->CFG_LOW;
;;;1230       GDMAChannel1_StoreReg[5] = GDMA_Channel1->CFG_HIGH;
;;;1231   #endif
;;;1232   #if USE_GDMACHANNEL2_DLPS
;;;1233       GDMAChannel2_StoreReg[0] = GDMA_Channel2->SAR;
;;;1234       GDMAChannel2_StoreReg[1] = GDMA_Channel2->DAR;
;;;1235       GDMAChannel2_StoreReg[2] = GDMA_Channel2->CTL_LOW;
;;;1236       GDMAChannel2_StoreReg[3] = GDMA_Channel2->CTL_HIGH;
;;;1237       GDMAChannel2_StoreReg[4] = GDMA_Channel2->CFG_LOW;
;;;1238       GDMAChannel2_StoreReg[5] = GDMA_Channel2->CFG_HIGH;
;;;1239   #endif
;;;1240   #if USE_GDMACHANNEL3_DLPS
;;;1241       GDMAChannel3_StoreReg[0] = GDMA_Channel3->SAR;
;;;1242       GDMAChannel3_StoreReg[1] = GDMA_Channel3->DAR;
;;;1243       GDMAChannel3_StoreReg[2] = GDMA_Channel3->CTL_LOW;
;;;1244       GDMAChannel3_StoreReg[3] = GDMA_Channel3->CTL_HIGH;
;;;1245       GDMAChannel3_StoreReg[4] = GDMA_Channel3->CFG_LOW;
;;;1246       GDMAChannel3_StoreReg[5] = GDMA_Channel3->CFG_HIGH;
;;;1247   #endif
;;;1248   #if USE_GDMACHANNEL4_DLPS
;;;1249       GDMAChannel4_StoreReg[0] = GDMA_Channel4->SAR;
;;;1250       GDMAChannel4_StoreReg[1] = GDMA_Channel4->DAR;
;;;1251       GDMAChannel4_StoreReg[2] = GDMA_Channel4->CTL_LOW;
;;;1252       GDMAChannel4_StoreReg[3] = GDMA_Channel4->CTL_HIGH;
;;;1253       GDMAChannel4_StoreReg[4] = GDMA_Channel4->CFG_LOW;
;;;1254       GDMAChannel4_StoreReg[5] = GDMA_Channel4->CFG_HIGH;
;;;1255   #endif
;;;1256   #if USE_GDMACHANNEL5_DLPS
;;;1257       GDMAChannel5_StoreReg[0] = GDMA_Channel5->SAR;
;;;1258       GDMAChannel5_StoreReg[1] = GDMA_Channel5->DAR;
;;;1259       GDMAChannel5_StoreReg[2] = GDMA_Channel5->CTL_LOW;
;;;1260       GDMAChannel5_StoreReg[3] = GDMA_Channel5->CTL_HIGH;
;;;1261       GDMAChannel5_StoreReg[4] = GDMA_Channel5->CFG_LOW;
;;;1262       GDMAChannel5_StoreReg[5] = GDMA_Channel5->CFG_HIGH;
;;;1263   #endif
;;;1264   }
;;;1265   
;;;1266   /**
;;;1267     * @brief  GDMA exit dlps callback function(Resume GDMA register values when system exit DLPS)
;;;1268     * @param  None
;;;1269     * @retval None
;;;1270     */
;;;1271   DATA_RAM_FUNCTION __STATIC_INLINE void GDMA_DLPS_Exit(void)
;;;1272   {
;;;1273       SYSBLKCTRL->u_210.SOC_FUNC_EN |= SYSBLK_GDMA0_EN_Msk;
;;;1274       PERIPH->PERI_CLK_CTRL |= (SYSBLK_ACTCK_GDMA0_EN_Msk | SYSBLK_SLPCK_GDMA0_EN_Msk);
;;;1275   
;;;1276       /* Enable GDMA in DmaCfgReg*/
;;;1277       GDMA_BASE->DmaCfgReg = GDMA_StoreReg[0];
;;;1278   
;;;1279       /*----------clear pending all interrupts of GDMA channel-----------*/
;;;1280       GDMA_BASE->CLEAR_TFR = 0xff;
;;;1281       GDMA_BASE->CLEAR_BLOCK = 0xff;
;;;1282       GDMA_BASE->CLEAR_DST_TRAN = 0xff;
;;;1283       GDMA_BASE->CLEAR_SRC_TRAN = 0xff;
;;;1284       GDMA_BASE->CLEAR_ERR = 0xff;
;;;1285   
;;;1286       /*--------------------mask interrupt-------- -----------------*/
;;;1287       GDMA_BASE->MASK_TFR = (GDMA_StoreReg[2] | ((GDMA_StoreReg[2] & 0xff) << 8));
;;;1288       GDMA_BASE->MASK_BLOCK = (GDMA_StoreReg[3] | ((GDMA_StoreReg[3] & 0xff) << 8));
;;;1289       GDMA_BASE->MASK_SRC_TRAN = (GDMA_StoreReg[4] | ((GDMA_StoreReg[4] & 0xff) << 8));
;;;1290       GDMA_BASE->MASK_DST_TRAN = (GDMA_StoreReg[5] | ((GDMA_StoreReg[5] & 0xff) << 8));
;;;1291       GDMA_BASE->MASK_ERR = (GDMA_StoreReg[6] | ((GDMA_StoreReg[6] & 0xff) << 8));
;;;1292   
;;;1293   #if USE_GDMACHANNEL0_DLPS
;;;1294       GDMA_Channel0->SAR      = GDMAChannel0_StoreReg[0];
;;;1295       GDMA_Channel0->DAR      = GDMAChannel0_StoreReg[1];
;;;1296       GDMA_Channel0->CTL_LOW  = GDMAChannel0_StoreReg[2];
;;;1297       GDMA_Channel0->CTL_HIGH = GDMAChannel0_StoreReg[3];
;;;1298       GDMA_Channel0->CFG_LOW  = GDMAChannel0_StoreReg[4];
;;;1299       GDMA_Channel0->CFG_HIGH = GDMAChannel0_StoreReg[5];
;;;1300   #endif
;;;1301   #if USE_GDMACHANNEL1_DLPS
;;;1302       GDMA_Channel1->SAR      = GDMAChannel1_StoreReg[0];
;;;1303       GDMA_Channel1->DAR      = GDMAChannel1_StoreReg[1];
;;;1304       GDMA_Channel1->CTL_LOW  = GDMAChannel1_StoreReg[2];
;;;1305       GDMA_Channel1->CTL_HIGH = GDMAChannel1_StoreReg[3];
;;;1306       GDMA_Channel1->CFG_LOW  = GDMAChannel1_StoreReg[4];
;;;1307       GDMA_Channel1->CFG_HIGH = GDMAChannel1_StoreReg[5];
;;;1308   #endif
;;;1309   #if USE_GDMACHANNEL2_DLPS
;;;1310       GDMA_Channel2->SAR      = GDMAChannel2_StoreReg[0];
;;;1311       GDMA_Channel2->DAR      = GDMAChannel2_StoreReg[1];
;;;1312       GDMA_Channel2->CTL_LOW  = GDMAChannel2_StoreReg[2];
;;;1313       GDMA_Channel2->CTL_HIGH = GDMAChannel2_StoreReg[3];
;;;1314       GDMA_Channel2->CFG_LOW  = GDMAChannel2_StoreReg[4];
;;;1315       GDMA_Channel2->CFG_HIGH = GDMAChannel2_StoreReg[5];
;;;1316   #endif
;;;1317   #if USE_GDMACHANNEL3_DLPS
;;;1318       GDMA_Channel3->SAR      = GDMAChannel3_StoreReg[0];
;;;1319       GDMA_Channel3->DAR      = GDMAChannel3_StoreReg[1];
;;;1320       GDMA_Channel3->CTL_LOW  = GDMAChannel3_StoreReg[2];
;;;1321       GDMA_Channel3->CTL_HIGH = GDMAChannel3_StoreReg[3];
;;;1322       GDMA_Channel3->CFG_LOW  = GDMAChannel3_StoreReg[4];
;;;1323       GDMA_Channel3->CFG_HIGH = GDMAChannel3_StoreReg[5];
;;;1324   #endif
;;;1325   #if USE_GDMACHANNEL4_DLPS
;;;1326       GDMA_Channel4->SAR      = GDMAChannel4_StoreReg[0];
;;;1327       GDMA_Channel4->DAR      = GDMAChannel4_StoreReg[1];
;;;1328       GDMA_Channel4->CTL_LOW  = GDMAChannel4_StoreReg[2];
;;;1329       GDMA_Channel4->CTL_HIGH = GDMAChannel4_StoreReg[3];
;;;1330       GDMA_Channel4->CFG_LOW  = GDMAChannel4_StoreReg[4];
;;;1331       GDMA_Channel4->CFG_HIGH = GDMAChannel4_StoreReg[5];
;;;1332   #endif
;;;1333   #if USE_GDMACHANNEL5_DLPS
;;;1334       GDMA_Channel5->SAR      = GDMAChannel5_StoreReg[0];
;;;1335       GDMA_Channel5->DAR      = GDMAChannel5_StoreReg[1];
;;;1336       GDMA_Channel5->CTL_LOW  = GDMAChannel5_StoreReg[2];
;;;1337       GDMA_Channel5->CTL_HIGH = GDMAChannel5_StoreReg[3];
;;;1338       GDMA_Channel5->CFG_LOW  = GDMAChannel5_StoreReg[4];
;;;1339       GDMA_Channel5->CFG_HIGH = GDMAChannel5_StoreReg[5];
;;;1340   #endif
;;;1341   
;;;1342       /*----------clear pending all interrupts of GDMA channel before enable channel-----------*/
;;;1343       GDMA_BASE->CLEAR_TFR = 0x3f;
;;;1344       GDMA_BASE->CLEAR_BLOCK = 0x3f;
;;;1345       GDMA_BASE->CLEAR_DST_TRAN = 0x3f;
;;;1346       GDMA_BASE->CLEAR_SRC_TRAN = 0x3f;
;;;1347       GDMA_BASE->CLEAR_ERR = 0x3f;
;;;1348   
;;;1349       /* Enable the selected DMA Channelx */
;;;1350   //    GDMA_BASE->ChEnReg = GDMA_StoreReg[1];
;;;1351   }
;;;1352   #endif
;;;1353   
;;;1354   /********************************************** ********************************************************/
;;;1355   /**************************************** [LCD DLPS] ************************************************/
;;;1356   /*******************************************************************************************************/
;;;1357   /*******************************************************************************************************/
;;;1358   #if USE_LCD_DLPS
;;;1359   
;;;1360   uint32_t LCD_StoreReg[5];
;;;1361   
;;;1362   /**
;;;1363     * @brief  LCD enter dlps callback function(Save LCD register values when system enter DLPS)
;;;1364     * @param  None
;;;1365     * @retval None
;;;1366     */
;;;1367   __STATIC_INLINE void LCD_DLPS_Enter(void)
;;;1368   {
;;;1369       /* Enable LCD 8080 interface controller function */
;;;1370       PERIPH->PERI_FUNC0_EN |= BIT(25);
;;;1371       /* Enable LCD 8080 interface controller clock */
;;;1372       PERIPH->PERI_CLK_CTRL1 |= BIT(28) | BIT(29);
;;;1373   
;;;1374       LCD_StoreReg[0] = *((volatile uint32_t *)0x400002A8UL) & (0x03 << 28);
;;;1375       LCD_StoreReg[1] = LCD->IMR;
;;;1376       LCD_StoreReg[2] = LCD->CTRL0;
;;;1377       LCD_StoreReg[3] = LCD->CTRL1;
;;;1378       LCD_StoreReg[4] = LCD->CFG;
;;;1379   
;;;1380   }
;;;1381   
;;;1382   /**
;;;1383     * @brief  LCD exit dlps callback function(Resume LCD register values when system exit DLPS)
;;;1384     * @param  None
;;;1385     * @retval None
;;;1386     */
;;;1387   DATA_RAM_FUNCTION __STATIC_INLINE void LCD_DLPS_Exit(void)
;;;1388   {
;;;1389       /* Enable LCD 8080 interface controller function */
;;;1390       PERIPH->PERI_FUNC0_EN |= BIT(25);
;;;1391       /* Enable LCD 8080 interface controller clock */
;;;1392       PERIPH->PERI_CLK_CTRL1 |= BIT(28) | BIT(29);
;;;1393   
;;;1394       /* Restore Dedicated SDIO pin option */
;;;1395       *((volatile uint32_t *)0x400002A8UL) &= ~(0x03 << 28);
;;;1396       *((volatile uint32_t *)0x400002A8UL) |= LCD_StoreReg[0];
;;;1397   
;;;1398       /* Initialize LCD */
;;;1399   
;;;1400       LCD->IMR    = LCD_StoreReg[1];
;;;1401       LCD->CTRL1  = LCD_StoreReg[3];
;;;1402       LCD->CFG    = LCD_StoreReg[4];
;;;1403       LCD->CTRL0  = LCD_StoreReg[2];
;;;1404   }
;;;1405   #endif
;;;1406   
;;;1407   /********************************************** ********************************************************/
;;;1408   /**************************************** [I2S0 DLPS] **************************************************/
;;;1409   /*******************************************************************************************************/
;;;1410   /*******************************************************************************************************/
;;;1411   #if USE_I2S0_DLPS
;;;1412   
;;;1413   uint32_t I2S0_StoreReg[4];
;;;1414   
;;;1415   /**
;;;1416     * @brief  I2S0 enter dlps callback function(Save I2S0 register values when system enter DLPS)
;;;1417     * @param  None
;;;1418     * @retval None
;;;1419     */
;;;1420   __STATIC_INLINE void I2S0_DLPS_Enter(void)
;;;1421   {
;;;1422       PERIPH->PERI_BD_FUNC0_EN |= BIT(1) | BIT(5) | BIT(8);
;;;1423   
;;;1424       I2S0_StoreReg[0] = I2S0->BCLK_DIV;
;;;1425       I2S0_StoreReg[1] = I2S0->CTRL0;
;;;1426       I2S0_StoreReg[2] = I2S0->CTRL1;
;;;1427       I2S0_StoreReg[3] = I2S0->DMA_TRDLR;
;;;1428   }
;;;1429   
;;;1430   /**
;;;1431     * @brief  I2S0 exit dlps callback function(Resume I2S0 register values when system exit DLPS)
;;;1432     * @param  None
;;;1433     * @retval None
;;;1434     */
;;;1435   DATA_RAM_FUNCTION __STATIC_INLINE void I2S0_DLPS_Exit(void)
;;;1436   {
;;;1437       PERIPH->PERI_BD_FUNC0_EN |= BIT(1) | BIT(5) | BIT(8);
;;;1438   
;;;1439       /* Reset I2S0 module */
;;;1440       I2S0->CTRL0 |= 1 << 0;
;;;1441       I2S0->CTRL0 &= ~(1 << 0);
;;;1442   
;;;1443       /* Initialize I2S0 */
;;;1444       I2S0->BCLK_DIV  = I2S0_StoreReg[0];
;;;1445       I2S0->CTRL1     = I2S0_StoreReg[2];
;;;1446       I2S0->DMA_TRDLR = I2S0_StoreReg[3];
;;;1447       I2S0->CTRL0     = I2S0_StoreReg[1];
;;;1448   }
;;;1449   #endif
;;;1450   
;;;1451   /********************************************** ********************************************************/
;;;1452   /**************************************** [I2S1 DLPS] **************************************************/
;;;1453   /*******************************************************************************************************/
;;;1454   /*******************************************************************************************************/
;;;1455   #if USE_I2S1_DLPS
;;;1456   
;;;1457   uint32_t I2S1_StoreReg[4];
;;;1458   
;;;1459   /**
;;;1460     * @brief  I2S1 enter dlps callback function(Save I2S1 register values when system enter DLPS)
;;;1461     * @param  None
;;;1462     * @retval None
;;;1463     */
;;;1464   __STATIC_INLINE void I2S1_DLPS_Enter(void)
;;;1465   {
;;;1466       PERIPH->PERI_BD_FUNC0_EN |= BIT(2) | BIT(6) | BIT(8);
;;;1467   
;;;1468       I2S1_StoreReg[0] = I2S1->BCLK_DIV;
;;;1469       I2S1_StoreReg[1] = I2S1->CTRL0;
;;;1470       I2S1_StoreReg[2] = I2S1->CTRL1;
;;;1471       I2S1_StoreReg[3] = I2S1->DMA_TRDLR;
;;;1472   }
;;;1473   
;;;1474   /**
;;;1475     * @brief  I2S1 exit dlps callback function(Resume I2S1 register values when system exit DLPS)
;;;1476     * @param  None
;;;1477     * @retval None
;;;1478     */
;;;1479   DATA_RAM_FUNCTION __STATIC_INLINE void I2S1_DLPS_Exit(void)
;;;1480   {
;;;1481       PERIPH->PERI_BD_FUNC0_EN |= BIT(2) | BIT(6) | BIT(8);
;;;1482   
;;;1483       /* Reset I2S1 module */
;;;1484       I2S1->CTRL0 |= 1 << 0;
;;;1485       I2S1->CTRL0 &= ~(1 << 0);
;;;1486   
;;;1487       /* Initialize I2S1 */
;;;1488       I2S1->BCLK_DIV  = I2S1_StoreReg[0];
;;;1489       I2S1->CTRL1     = I2S1_StoreReg[2];
;;;1490       I2S1->DMA_TRDLR = I2S1_StoreReg[3];
;;;1491       I2S1->CTRL0     = I2S1_StoreReg[1];
;;;1492   }
;;;1493   #endif
;;;1494   
;;;1495   /********************************************** ********************************************************/
;;;1496   /**************************************** [CODEC DLPS] ************************************************/
;;;1497   /*******************************************************************************************************/
;;;1498   /*******************************************************************************************************/
;;;1499   #if USE_CODEC_DLPS
;;;1500   
;;;1501   uint32_t CODEC_StoreReg[7];
;;;1502   
;;;1503   /**
;;;1504     * @brief  CODEC enter dlps callback function(Save CODEC register values when system enter DLPS)
;;;1505     * @param  None
;;;1506     * @retval None
;;;1507     */
;;;1508   __STATIC_INLINE void CODEC_DLPS_Enter(void)
;;;1509   {
;;;1510       /* Enable codec function and clock */
;;;1511       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1512   
;;;1513       CODEC_StoreReg[0] = CODEC->CR0;
;;;1514       CODEC_StoreReg[1] = CODEC->CR1;
;;;1515       CODEC_StoreReg[2] = CODEC->CR2;
;;;1516       CODEC_StoreReg[3] = CODEC->CLK_CTRL;
;;;1517       CODEC_StoreReg[4] = CODEC->I2S_CTRL;
;;;1518       CODEC_StoreReg[5] = CODEC->ADC_CTRL;
;;;1519       CODEC_StoreReg[6] = CODEC->DAC_CTRL;
;;;1520   }
;;;1521   
;;;1522   /**
;;;1523     * @brief  CODEC exit dlps callback function(Resume CODEC register values when system exit DLPS)
;;;1524     * @param  None
;;;1525     * @retval None
;;;1526     */
;;;1527   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_DLPS_Exit(void)
;;;1528   {
;;;1529       /* Enable codec function and clock */
;;;1530       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1531   
;;;1532       /* Initialize CODEC */
;;;1533       if ((CODEC_StoreReg[3] & 0x900) == 0x900)
;;;1534       {
;;;1535           /* Configure AMIC parameters */
;;;1536           CODEC->CR0 = CODEC_StoreReg[0];
;;;1537           CODEC->CR1 = CODEC_StoreReg[1];
;;;1538           CODEC->CR2 = CODEC_StoreReg[2];
;;;1539       }
;;;1540   
;;;1541       /*  Reset audio digital IP */
;;;1542       CODEC->AUDIO_CTRL = 0;
;;;1543       CODEC->AUDIO_CTRL = 1;
;;;1544   
;;;1545       CODEC->CLK_CTRL = CODEC_StoreReg[3];
;;;1546       CODEC->I2S_CTRL = CODEC_StoreReg[4];
;;;1547       CODEC->ADC_CTRL = CODEC_StoreReg[5];
;;;1548       CODEC->DAC_CTRL = CODEC_StoreReg[6];
;;;1549   }
;;;1550   #endif
;;;1551   
;;;1552   /********************************************** ********************************************************/
;;;1553   /**************************************** [CODEC_EQ1 DLPS] ************************************************/
;;;1554   /*******************************************************************************************************/
;;;1555   /*******************************************************************************************************/
;;;1556   #if USE_CODEC_EQ1_DLPS
;;;1557   
;;;1558   uint32_t CODEC_EQ1_StoreReg[5];
;;;1559   
;;;1560   /**
;;;1561     * @brief  CODEC_EQ1 enter dlps callback function(Save CODEC_EQ1 register values when system enter DLPS)
;;;1562     * @param  None
;;;1563     * @retval None
;;;1564     */
;;;1565   __STATIC_INLINE void CODEC_EQ1_DLPS_Enter(void)
;;;1566   {
;;;1567       /* Enable codec function and clock */
;;;1568       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1569   
;;;1570       CODEC_EQ1_StoreReg[0] = CODEC_EQ1->EQ_H0;
;;;1571       CODEC_EQ1_StoreReg[1] = CODEC_EQ1->EQ_B1;
;;;1572       CODEC_EQ1_StoreReg[2] = CODEC_EQ1->EQ_B2;
;;;1573       CODEC_EQ1_StoreReg[3] = CODEC_EQ1->EQ_A1;
;;;1574       CODEC_EQ1_StoreReg[4] = CODEC_EQ1->EQ_A2;
;;;1575   }
;;;1576   
;;;1577   /**
;;;1578     * @brief  CODEC_EQ1 exit dlps callback function(Resume CODEC_EQ1 register values when system exit DLPS)
;;;1579     * @param  None
;;;1580     * @retval None
;;;1581     */
;;;1582   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ1_DLPS_Exit(void)
;;;1583   {
;;;1584       /* Enable codec function and clock */
;;;1585       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1586   
;;;1587       CODEC_EQ1->EQ_H0 = CODEC_EQ1_StoreReg[0];
;;;1588       CODEC_EQ1->EQ_B1 = CODEC_EQ1_StoreReg[1];
;;;1589       CODEC_EQ1->EQ_B2 = CODEC_EQ1_StoreReg[2];
;;;1590       CODEC_EQ1->EQ_A1 = CODEC_EQ1_StoreReg[3];
;;;1591       CODEC_EQ1->EQ_A2 = CODEC_EQ1_StoreReg[4];
;;;1592   }
;;;1593   #endif
;;;1594   
;;;1595   /********************************************** ********************************************************/
;;;1596   /**************************************** [CODEC_EQ2 DLPS] ************************************************/
;;;1597   /*******************************************************************************************************/
;;;1598   /*******************************************************************************************************/
;;;1599   #if USE_CODEC_EQ2_DLPS
;;;1600   
;;;1601   uint32_t CODEC_EQ2_StoreReg[5];
;;;1602   
;;;1603   /**
;;;1604     * @brief  CODEC_EQ2 enter dlps callback function(Save CODEC_EQ2 register values when system enter DLPS)
;;;1605     * @param  None
;;;1606     * @retval None
;;;1607     */
;;;1608   __STATIC_INLINE void CODEC_EQ2_DLPS_Enter(void)
;;;1609   {
;;;1610       /* Enable codec function and clock */
;;;1611       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1612   
;;;1613       CODEC_EQ2_StoreReg[0] = CODEC_EQ2->EQ_H0;
;;;1614       CODEC_EQ2_StoreReg[1] = CODEC_EQ2->EQ_B1;
;;;1615       CODEC_EQ2_StoreReg[2] = CODEC_EQ2->EQ_B2;
;;;1616       CODEC_EQ2_StoreReg[3] = CODEC_EQ2->EQ_A1;
;;;1617       CODEC_EQ2_StoreReg[4] = CODEC_EQ2->EQ_A2;
;;;1618   }
;;;1619   
;;;1620   /**
;;;1621     * @brief  CODEC_EQ2 exit dlps callback function(Resume CODEC_EQ2 register values when system exit DLPS)
;;;1622     * @param  None
;;;1623     * @retval None
;;;1624     */
;;;1625   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ2_DLPS_Exit(void)
;;;1626   {
;;;1627       /* Enable codec function and clock */
;;;1628       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1629   
;;;1630       CODEC_EQ2->EQ_H0 = CODEC_EQ2_StoreReg[0];
;;;1631       CODEC_EQ2->EQ_B1 = CODEC_EQ2_StoreReg[1];
;;;1632       CODEC_EQ2->EQ_B2 = CODEC_EQ2_StoreReg[2];
;;;1633       CODEC_EQ2->EQ_A1 = CODEC_EQ2_StoreReg[3];
;;;1634       CODEC_EQ2->EQ_A2 = CODEC_EQ2_StoreReg[4];
;;;1635   }
;;;1636   #endif
;;;1637   
;;;1638   /********************************************** ********************************************************/
;;;1639   /**************************************** [CODEC_EQ3 DLPS] ************************************************/
;;;1640   /*******************************************************************************************************/
;;;1641   /*******************************************************************************************************/
;;;1642   #if USE_CODEC_EQ3_DLPS
;;;1643   
;;;1644   uint32_t CODEC_EQ3_StoreReg[5];
;;;1645   
;;;1646   /**
;;;1647     * @brief  CODEC_EQ3 enter dlps callback function(Save CODEC_EQ3 register values when system enter DLPS)
;;;1648     * @param  None
;;;1649     * @retval None
;;;1650     */
;;;1651   __STATIC_INLINE void CODEC_EQ3_DLPS_Enter(void)
;;;1652   {
;;;1653       /* Enable codec function and clock */
;;;1654       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1655   
;;;1656       CODEC_EQ3_StoreReg[0] = CODEC_EQ3->EQ_H0;
;;;1657       CODEC_EQ3_StoreReg[1] = CODEC_EQ3->EQ_B1;
;;;1658       CODEC_EQ3_StoreReg[2] = CODEC_EQ3->EQ_B2;
;;;1659       CODEC_EQ3_StoreReg[3] = CODEC_EQ3->EQ_A1;
;;;1660       CODEC_EQ3_StoreReg[4] = CODEC_EQ3->EQ_A2;
;;;1661   }
;;;1662   
;;;1663   /**
;;;1664     * @brief  CODEC_EQ3 exit dlps callback function(Resume CODEC_EQ3 register values when system exit DLPS)
;;;1665     * @param  None
;;;1666     * @retval None
;;;1667     */
;;;1668   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ3_DLPS_Exit(void)
;;;1669   {
;;;1670       /* Enable codec function and clock */
;;;1671       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1672   
;;;1673       CODEC_EQ3->EQ_H0 = CODEC_EQ3_StoreReg[0];
;;;1674       CODEC_EQ3->EQ_B1 = CODEC_EQ3_StoreReg[1];
;;;1675       CODEC_EQ3->EQ_B2 = CODEC_EQ3_StoreReg[2];
;;;1676       CODEC_EQ3->EQ_A1 = CODEC_EQ3_StoreReg[3];
;;;1677       CODEC_EQ3->EQ_A2 = CODEC_EQ3_StoreReg[4];
;;;1678   }
;;;1679   #endif
;;;1680   
;;;1681   /********************************************** ********************************************************/
;;;1682   /**************************************** [CODEC_EQ4 DLPS] ************************************************/
;;;1683   /*******************************************************************************************************/
;;;1684   /*******************************************************************************************************/
;;;1685   #if USE_CODEC_EQ4_DLPS
;;;1686   
;;;1687   uint32_t CODEC_EQ4_StoreReg[5];
;;;1688   
;;;1689   /**
;;;1690     * @brief  CODEC_EQ4 enter dlps callback function(Save CODEC_EQ4 register values when system enter DLPS)
;;;1691     * @param  None
;;;1692     * @retval None
;;;1693     */
;;;1694   __STATIC_INLINE void CODEC_EQ4_DLPS_Enter(void)
;;;1695   {
;;;1696       /* Enable codec function and clock */
;;;1697       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1698   
;;;1699       CODEC_EQ4_StoreReg[0] = CODEC_EQ4->EQ_H0;
;;;1700       CODEC_EQ4_StoreReg[1] = CODEC_EQ4->EQ_B1;
;;;1701       CODEC_EQ4_StoreReg[2] = CODEC_EQ4->EQ_B2;
;;;1702       CODEC_EQ4_StoreReg[3] = CODEC_EQ4->EQ_A1;
;;;1703       CODEC_EQ4_StoreReg[4] = CODEC_EQ4->EQ_A2;
;;;1704   }
;;;1705   
;;;1706   /**
;;;1707     * @brief  CODEC_EQ4 exit dlps callback function(Resume CODEC_EQ4 register values when system exit DLPS)
;;;1708     * @param  None
;;;1709     * @retval None
;;;1710     */
;;;1711   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ4_DLPS_Exit(void)
;;;1712   {
;;;1713       /* Enable codec function and clock */
;;;1714       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1715   
;;;1716       CODEC_EQ4->EQ_H0 = CODEC_EQ4_StoreReg[0];
;;;1717       CODEC_EQ4->EQ_B1 = CODEC_EQ4_StoreReg[1];
;;;1718       CODEC_EQ4->EQ_B2 = CODEC_EQ4_StoreReg[2];
;;;1719       CODEC_EQ4->EQ_A1 = CODEC_EQ4_StoreReg[3];
;;;1720       CODEC_EQ4->EQ_A2 = CODEC_EQ4_StoreReg[4];
;;;1721   }
;;;1722   #endif
;;;1723   
;;;1724   /********************************************** ********************************************************/
;;;1725   /**************************************** [CODEC_EQ5 DLPS] ************************************************/
;;;1726   /*******************************************************************************************************/
;;;1727   /*******************************************************************************************************/
;;;1728   #if USE_CODEC_EQ5_DLPS
;;;1729   
;;;1730   uint32_t CODEC_EQ5_StoreReg[5];
;;;1731   
;;;1732   /**
;;;1733     * @brief  CODEC_EQ5 enter dlps callback function(Save CODEC_EQ5 register values when system enter DLPS)
;;;1734     * @param  None
;;;1735     * @retval None
;;;1736     */
;;;1737   __STATIC_INLINE void CODEC_EQ5_DLPS_Enter(void)
;;;1738   {
;;;1739       /* Enable codec function and clock */
;;;1740       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1741   
;;;1742       CODEC_EQ5_StoreReg[0] = CODEC_EQ5->EQ_H0;
;;;1743       CODEC_EQ5_StoreReg[1] = CODEC_EQ5->EQ_B1;
;;;1744       CODEC_EQ5_StoreReg[2] = CODEC_EQ5->EQ_B2;
;;;1745       CODEC_EQ5_StoreReg[3] = CODEC_EQ5->EQ_A1;
;;;1746       CODEC_EQ5_StoreReg[4] = CODEC_EQ5->EQ_A2;
;;;1747   }
;;;1748   
;;;1749   /**
;;;1750     * @brief  CODEC_EQ5 exit dlps callback function(Resume CODEC_EQ5 register values when system exit DLPS)
;;;1751     * @param  None
;;;1752     * @retval None
;;;1753     */
;;;1754   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ5_DLPS_Exit(void)
;;;1755   {
;;;1756       /* Enable codec function and clock */
;;;1757       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1758   
;;;1759       CODEC_EQ5->EQ_H0 = CODEC_EQ5_StoreReg[0];
;;;1760       CODEC_EQ5->EQ_B1 = CODEC_EQ5_StoreReg[1];
;;;1761       CODEC_EQ5->EQ_B2 = CODEC_EQ5_StoreReg[2];
;;;1762       CODEC_EQ5->EQ_A1 = CODEC_EQ5_StoreReg[3];
;;;1763       CODEC_EQ5->EQ_A2 = CODEC_EQ5_StoreReg[4];
;;;1764   }
;;;1765   #endif
;;;1766   
;;;1767   /**
;;;1768     * @brief  Set Log and SWD pins to SW mode.
;;;1769     * @param  void.
;;;1770     * @retval void.
;;;1771     */
;;;1772   __STATIC_INLINE void Log_SWD_DLPS_Enter(void)
;;;1773   {
;;;1774       if (OTP->SWD_ENABLE)
        0x0080f0d8:    1255        U.      ASRS     r5,r2,#9
        0x0080f0da:    6201        .b      STR      r1,[r0,#0x20]
        0x0080f0dc:    f8950334    ..4.    LDRB     r0,[r5,#0x334]
        0x0080f0e0:    07c0        ..      LSLS     r0,r0,#31
        0x0080f0e2:    d00f        ..      BEQ      0x80f104 ; DLPS_IO_EnterDlpsCb + 220
;;;1775       {
;;;1776           Pad_Config(P1_0, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_DOWN, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0080f0e4:    9400        ..      STR      r4,[sp,#0]
        0x0080f0e6:    2302        .#      MOVS     r3,#2
        0x0080f0e8:    2201        ."      MOVS     r2,#1
        0x0080f0ea:    2100        .!      MOVS     r1,#0
        0x0080f0ec:    2008        .       MOVS     r0,#8
        0x0080f0ee:    9401        ..      STR      r4,[sp,#4]
        0x0080f0f0:    f402f174    ..t.    BL       Pad_Config ; 0x113dc
;;;1777           Pad_Config(P1_1, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_DOWN, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0080f0f4:    9400        ..      STR      r4,[sp,#0]
        0x0080f0f6:    2302        .#      MOVS     r3,#2
        0x0080f0f8:    2201        ."      MOVS     r2,#1
        0x0080f0fa:    2100        .!      MOVS     r1,#0
        0x0080f0fc:    2009        .       MOVS     r0,#9
        0x0080f0fe:    9401        ..      STR      r4,[sp,#4]
        0x0080f100:    f402f16c    ..l.    BL       Pad_Config ; 0x113dc
;;;1778       }
;;;1779   
;;;1780       Pad_Config(OTP->logPin, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0080f104:    9400        ..      STR      r4,[sp,#0]
        0x0080f106:    9401        ..      STR      r4,[sp,#4]
        0x0080f108:    f8950398    ....    LDRB     r0,[r5,#0x398]
        0x0080f10c:    2301        .#      MOVS     r3,#1
        0x0080f10e:    f000003f    ..?.    AND      r0,r0,#0x3f
        0x0080f112:    461a        .F      MOV      r2,r3
        0x0080f114:    2100        .!      MOVS     r1,#0
        0x0080f116:    f402f161    ..a.    BL       Pad_Config ; 0x113dc
;;;1781   
;;;1782   }
;;;1783   
;;;1784   /**
;;;1785     * @brief  Set Log and SWD pins to PINMUX mode.
;;;1786     * @param  void.
;;;1787     * @retval void.
;;;1788     */
;;;1789   DATA_RAM_FUNCTION __STATIC_INLINE void Log_SWD_DLPS_Exit(void)
;;;1790   {
;;;1791       Pad_Config(OTP->logPin, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1792   
;;;1793       if (OTP->SWD_ENABLE)
;;;1794       {
;;;1795           Pad_Config(P1_0, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1796           Pad_Config(P1_1, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1797       }
;;;1798   }
;;;1799   
;;;1800   /********************************************** ********************************************************/
;;;1801   /*********************************** [USER Exit DLPS CALLBACK FUCN] *****************************************/
;;;1802   /*******************************************************************************************************/
;;;1803   /*******************************************************************************************************/
;;;1804   #if USE_USER_DEFINE_DLPS_EXIT_CB
;;;1805   
;;;1806   DLPS_IO_ExitDlpsCB User_IO_ExitDlpsCB = NULL;
;;;1807   
;;;1808   #endif /* USE_USER_DEFINE_DLPS_EXIT_CB */
;;;1809   
;;;1810   /********************************************** ********************************************************/
;;;1811   /*********************************** [USER Enter DLPS CALLBACK FUCN] *****************************************/
;;;1812   /*******************************************************************************************************/
;;;1813   /*******************************************************************************************************/
;;;1814   #if USE_USER_DEFINE_DLPS_ENTER_CB
;;;1815   
;;;1816   DLPS_IO_EnterDlpsCB User_IO_EnterDlpsCB = NULL;
;;;1817   
;;;1818   #endif /* USE_USER_DEFINE_DLPS_EXIT_CB */
;;;1819   
;;;1820   /********************************************** ********************************************************/
;;;1821   /*********************************** [Enter & Exit DLPS CALLBACK FUNC] *********************************/
;;;1822   /*******************************************************************************************************/
;;;1823   /*******************************************************************************************************/
;;;1824   #if USE_IO_DRIVER_DLPS
;;;1825   
;;;1826   /**
;;;1827     * @brief  IO enter dlps callback function
;;;1828     * @param  None
;;;1829     * @retval None
;;;1830     */
;;;1831   void DLPS_IO_EnterDlpsCb(void)
;;;1832   {
;;;1833       /* low stack do it instead */
;;;1834   //    Pad_ClearAllWakeupINT();
;;;1835   
;;;1836   //    DBG_DIRECT("DLPS_IO_EnterDlpsCb");
;;;1837       NVIC_DisableIRQ(System_IRQn);
;;;1838       CPU_DLPS_Enter();
;;;1839   
;;;1840       Pinmux_DLPS_Enter();
;;;1841   
;;;1842   #if USE_USER_DEFINE_DLPS_ENTER_CB
;;;1843       if (User_IO_EnterDlpsCB)
;;;1844       {
;;;1845           User_IO_EnterDlpsCB();
;;;1846       }
;;;1847   #endif
;;;1848   
;;;1849   #if USE_I2C0_DLPS
;;;1850       I2C0_DLPS_Enter();
;;;1851   #endif
;;;1852   
;;;1853   #if USE_I2C1_DLPS
;;;1854       I2C1_DLPS_Enter();
;;;1855   #endif
;;;1856   
;;;1857   #if USE_TIM_DLPS
;;;1858       TIM_DLPS_Enter();
;;;1859   #endif
;;;1860   
;;;1861   #if USE_QDECODER_DLPS
;;;1862       QuadDecoder_DLPS_Enter();
;;;1863   #endif
;;;1864   
;;;1865   #if USE_IR_DLPS
;;;1866       IR_DLPS_Enter();
;;;1867   #endif
;;;1868   
;;;1869   #if USE_UART_DLPS
;;;1870       UART_DLPS_Enter();
;;;1871   #endif
;;;1872   
;;;1873   #if USE_UART1_DLPS
;;;1874       UART1_DLPS_Enter();
;;;1875   #endif
;;;1876   
;;;1877   #if USE_UART2_DLPS
;;;1878       UART2_DLPS_Enter();
;;;1879   #endif
;;;1880   
;;;1881   #if USE_SPI0_DLPS
;;;1882       SPI0_DLPS_Enter();
;;;1883   #endif
;;;1884   
;;;1885   #if USE_SPI1_DLPS
;;;1886       SPI1_DLPS_Enter();
;;;1887   #endif
;;;1888   
;;;1889   #if USE_SPI2W_DLPS
;;;1890       SPI2W_DLPS_Enter();
;;;1891   #endif
;;;1892   
;;;1893   #if USE_KEYSCAN_DLPS
;;;1894       KeyScan_DLPS_Enter();
;;;1895   #endif
;;;1896   
;;;1897   #if USE_GPIO_DLPS
;;;1898       GPIO_DLPS_Enter();
;;;1899   #endif
;;;1900   
;;;1901   #if USE_ADC_DLPS
;;;1902       ADC_DLPS_Enter();
;;;1903   #endif
;;;1904   
;;;1905   #if USE_LCD_DLPS
;;;1906       LCD_DLPS_Enter();
;;;1907   #endif
;;;1908   
;;;1909   #if USE_I2S0_DLPS
;;;1910       I2S0_DLPS_Enter();
;;;1911   #endif
;;;1912   
;;;1913   #if USE_I2S1_DLPS
;;;1914       I2S1_DLPS_Enter();
;;;1915   #endif
;;;1916   
;;;1917   #if USE_CODEC_DLPS
;;;1918       CODEC_DLPS_Enter();
;;;1919   #endif
;;;1920   
;;;1921   #if USE_CODEC_EQ1_DLPS
;;;1922       CODEC_EQ1_DLPS_Enter();
;;;1923   #endif
;;;1924   
;;;1925   #if USE_CODEC_EQ2_DLPS
;;;1926       CODEC_EQ2_DLPS_Enter();
;;;1927   #endif
;;;1928   
;;;1929   #if USE_CODEC_EQ3_DLPS
;;;1930       CODEC_EQ3_DLPS_Enter();
;;;1931   #endif
;;;1932   
;;;1933   #if USE_CODEC_EQ4_DLPS
;;;1934       CODEC_EQ4_DLPS_Enter();
;;;1935   #endif
;;;1936   
;;;1937   #if USE_CODEC_EQ5_DLPS
;;;1938       CODEC_EQ5_DLPS_Enter();
;;;1939   #endif
;;;1940   
;;;1941   #if USE_GDMA_DLPS
;;;1942       GDMA_DLPS_Enter();
;;;1943   #endif
;;;1944   
;;;1945       Log_SWD_DLPS_Enter();
;;;1946   
;;;1947   }
        0x0080f11a:    bd7c        |.      POP      {r2-r6,pc}
    DLPS_IORegister
;;;1948   #endif  /* USE_IO_DRIVER_DLPS */
;;;1949   
;;;1950   #if USE_IO_DRIVER_DLPS
;;;1951   /**
;;;1952     * @brief  IO exit dlps callback function.
;;;1953     * @param  None
;;;1954     * @retval None
;;;1955     */
;;;1956   DATA_RAM_FUNCTION void DLPS_IO_ExitDlpsCb(void)
;;;1957   {
;;;1958   
;;;1959   //    DBG_BUFFER(TYPE_BUMBLEBEE3, SUBTYPE_FORMAT, MODULE_DLPS, LEVEL_INFO,
;;;1960   //               "DLPS_IO_ExitDlpsCb",0);
;;;1961   
;;;1962       Pinmux_DLPS_Exit();
;;;1963   
;;;1964       Log_SWD_DLPS_Exit();
;;;1965   
;;;1966   #if USE_I2C0_DLPS
;;;1967       I2C0_DLPS_Exit();
;;;1968   #endif
;;;1969   
;;;1970   #if USE_I2C1_DLPS
;;;1971       I2C1_DLPS_Exit();
;;;1972   #endif
;;;1973   
;;;1974   #if USE_TIM_DLPS
;;;1975       TIM_DLPS_Exit();
;;;1976   #endif
;;;1977   
;;;1978   #if USE_QDECODER_DLPS
;;;1979       QuadDecoder_DLPS_Exit();
;;;1980   #endif
;;;1981   
;;;1982   #if USE_IR_DLPS
;;;1983       IR_DLPS_Exit();
;;;1984   #endif
;;;1985   
;;;1986   #if USE_UART_DLPS
;;;1987       UART_DLPS_Exit();
;;;1988   #endif
;;;1989   
;;;1990   #if USE_UART1_DLPS
;;;1991       UART1_DLPS_Exit();
;;;1992   #endif
;;;1993   
;;;1994   #if USE_UART2_DLPS
;;;1995       UART2_DLPS_Exit();
;;;1996   #endif
;;;1997   
;;;1998   #if USE_SPI0_DLPS
;;;1999       SPI0_DLPS_Exit();
;;;2000   #endif
;;;2001   
;;;2002   #if USE_SPI1_DLPS
;;;2003       SPI1_DLPS_Exit();
;;;2004   #endif
;;;2005   
;;;2006   #if USE_SPI2W_DLPS
;;;2007       SPI2W_DLPS_Exit();
;;;2008   #endif
;;;2009   
;;;2010   #if USE_KEYSCAN_DLPS
;;;2011       KeyScan_DLPS_Exit();
;;;2012   #endif
;;;2013   
;;;2014   #if USE_GPIO_DLPS
;;;2015       GPIO_DLPS_Exit();
;;;2016   #endif
;;;2017   
;;;2018   #if USE_ADC_DLPS
;;;2019       ADC_DLPS_Exit();
;;;2020   #endif
;;;2021   
;;;2022   #if USE_LCD_DLPS
;;;2023       LCD_DLPS_Exit();
;;;2024   #endif
;;;2025   
;;;2026   #if USE_I2S0_DLPS
;;;2027       I2S0_DLPS_Exit();
;;;2028   #endif
;;;2029   
;;;2030   #if USE_I2S1_DLPS
;;;2031       I2S1_DLPS_Exit();
;;;2032   #endif
;;;2033   
;;;2034   #if USE_CODEC_DLPS
;;;2035       CODEC_DLPS_Exit();
;;;2036   #endif
;;;2037   
;;;2038   #if USE_CODEC_EQ1_DLPS
;;;2039       CODEC_EQ1_DLPS_Exit();
;;;2040   #endif
;;;2041   
;;;2042   #if USE_CODEC_EQ2_DLPS
;;;2043       CODEC_EQ2_DLPS_Exit();
;;;2044   #endif
;;;2045   
;;;2046   #if USE_CODEC_EQ3_DLPS
;;;2047       CODEC_EQ3_DLPS_Exit();
;;;2048   #endif
;;;2049   
;;;2050   #if USE_CODEC_EQ4_DLPS
;;;2051       CODEC_EQ4_DLPS_Exit();
;;;2052   #endif
;;;2053   
;;;2054   #if USE_CODEC_EQ5_DLPS
;;;2055       CODEC_EQ5_DLPS_Exit();
;;;2056   #endif
;;;2057   
;;;2058   #if USE_GDMA_DLPS
;;;2059       GDMA_DLPS_Exit();
;;;2060   #endif
;;;2061   
;;;2062   #if USE_USER_DEFINE_DLPS_EXIT_CB
;;;2063       if (User_IO_ExitDlpsCB)
;;;2064       {
;;;2065           User_IO_ExitDlpsCB();
;;;2066       }
;;;2067   #endif
;;;2068   
;;;2069       NVIC_InitTypeDef nvic_init_struct;
;;;2070       nvic_init_struct.NVIC_IRQChannel         = System_IRQn;
;;;2071       nvic_init_struct.NVIC_IRQChannelCmd      = (FunctionalState)ENABLE;
;;;2072       nvic_init_struct.NVIC_IRQChannelPriority = 3;
;;;2073       NVIC_Init(&nvic_init_struct); //Enable SYSTEM_ON Interrupt
;;;2074   
;;;2075       CPU_DLPS_Exit();
;;;2076   }
;;;2077   
;;;2078   /**
;;;2079     * @brief  register IO DLPS callback function
;;;2080     * @param  None
;;;2081     * @retval None
;;;2082     */
;;;2083   void DLPS_IORegister(void)
;;;2084   {
        0x0080f11c:    b510        ..      PUSH     {r4,lr}
;;;2085       dlps_hw_control_cb_reg(DLPS_IO_EnterDlpsCb, DLPS_ENTER);
        0x0080f11e:    2100        .!      MOVS     r1,#0
        0x0080f120:    f2af00fb    ....    ADR      r0,{pc}-0xf7 ; 0x80f029
        0x0080f124:    f7f9dae3    ....    BL       dlps_hw_control_cb_reg ; 0x86ee
;;;2086       dlps_hw_control_cb_reg(DLPS_IO_ExitDlpsCb, DLPS_EXIT4_BT_READY);
        0x0080f128:    e8bd4010    ...@    POP      {r4,lr}
        0x0080f12c:    2104        .!      MOVS     r1,#4
        0x0080f12e:    4805        .H      LDR      r0,[pc,#20] ; [0x80f144] = 0x207d25
        0x0080f130:    f7f99add    ....    B        dlps_hw_control_cb_reg ; 0x86ee
    $d
        0x0080f134:    00207f5c    \. .    DCD    2129756
        0x0080f138:    e000ed08    ....    DCD    3758157064
        0x0080f13c:    40006000    .`.@    DCD    1073766400
        0x0080f140:    40001000    ...@    DCD    1073745920
        0x0080f144:    00207d25    %} .    DCD    2129189
    $t
    .text
    GPIO_DeInit
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_gpio.c
;;;33         RCC_PeriphClockCmd(APBPeriph_GPIO, APBPeriph_GPIO_CLOCK, DISABLE);
        0x0080f148:    2200        ."      MOVS     r2,#0
        0x0080f14a:    f04f5104    O..Q    MOV      r1,#0x21000000
        0x0080f14e:    485d        ]H      LDR      r0,[pc,#372] ; [0x80f2c4] = 0xc000100
        0x0080f150:    f000b8bc    ....    B.W      RCC_PeriphClockCmd ; 0x80f2cc
    GPIO_Init
;;;34     }
;;;35     
;;;36     /**
;;;37       * @brief  Initializes the GPIO peripheral according to the specified
;;;38       *         parameters in the GPIO_InitStruct.
;;;39       * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
;;;40       *         contains the configuration information for the specified GPIO peripheral.
;;;41       * @retval None
;;;42       */
;;;43     void GPIO_Init(GPIO_InitTypeDef *GPIO_InitStruct)
;;;44     {
;;;45         /* Check the parameters */
;;;46         assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;47         assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;48         assert_param(IS_GPIOIT_LEVEL_TYPE(GPIO_InitStruct->GPIO_ITTrigger));
;;;49         assert_param(IS_GPIOIT_POLARITY_TYPE(GPIO_InitStruct->GPIO_ITPolarity));
;;;50         assert_param(IS_GPIOIT_DEBOUNCE_TYPE(GPIO_InitStruct->GPIO_ITDebounce));
;;;51     
;;;52         /* GPIO configure */
;;;53         if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
        0x0080f154:    7903        .y      LDRB     r3,[r0,#4]
        0x0080f156:    495c        \I      LDR      r1,[pc,#368] ; [0x80f2c8] = 0x40001000
        0x0080f158:    2b01        .+      CMP      r3,#1
        0x0080f15a:    6802        .h      LDR      r2,[r0,#0]
        0x0080f15c:    684b        Kh      LDR      r3,[r1,#4]
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_gpio.c (44)
        0x0080f15e:    d030        0.      BEQ      0x80f1c2 ; GPIO_Init + 110
;;;45         /* Check the parameters */
;;;46         assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;47         assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;48         assert_param(IS_GPIOIT_LEVEL_TYPE(GPIO_InitStruct->GPIO_ITTrigger));
;;;49         assert_param(IS_GPIOIT_POLARITY_TYPE(GPIO_InitStruct->GPIO_ITPolarity));
;;;50         assert_param(IS_GPIOIT_DEBOUNCE_TYPE(GPIO_InitStruct->GPIO_ITDebounce));
;;;51     
;;;52         /* GPIO configure */
;;;53         if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
;;;54         {
;;;55             GPIO->DATADIR |= GPIO_InitStruct->GPIO_Pin;
;;;56     
;;;57             if (GPIO_InitStruct->GPIO_ControlMode == GPIO_SOFTWARE_MODE)
;;;58             {
;;;59                 /* Config GPIO control software mode */
;;;60                 GPIO->DATASRC &= (~GPIO_InitStruct->GPIO_Pin);
;;;61             }
;;;62             else
;;;63             {
;;;64                 /* Config GPIO hardware control mode */
;;;65                 GPIO->DATASRC |= (GPIO_InitStruct->GPIO_Pin);
;;;66             }
;;;67     
;;;68         }
;;;69         else
;;;70         {
;;;71             /*Configure GPIO input mode */
;;;72             GPIO->DATADIR = GPIO->DATADIR & (~GPIO_InitStruct->GPIO_Pin);
        0x0080f160:    4393        .C      BICS     r3,r3,r2
        0x0080f162:    604b        K`      STR      r3,[r1,#4]
;;;73     
;;;74             if (GPIO_InitStruct->GPIO_ITCmd == ENABLE)
        0x0080f164:    7942        By      LDRB     r2,[r0,#5]
        0x0080f166:    2a01        .*      CMP      r2,#1
        0x0080f168:    d12a        *.      BNE      0x80f1c0 ; GPIO_Init + 108
;;;75             {
;;;76     
;;;77                 GPIO->INTMASK = ~GPIO_Pin_All;
        0x0080f16a:    2200        ."      MOVS     r2,#0
        0x0080f16c:    634a        Jc      STR      r2,[r1,#0x34]
;;;78     
;;;79                 /* configure GPIO interrupt trigger type */
;;;80                 if (GPIO_InitStruct->GPIO_ITTrigger == GPIO_INT_Trigger_LEVEL)
        0x0080f16e:    7982        .y      LDRB     r2,[r0,#6]
        0x0080f170:    b38a        ..      CBZ      r2,0x80f1d6 ; GPIO_Init + 130
;;;81                 {
;;;82                     GPIO->INTTYPE = GPIO->INTTYPE & (~GPIO_InitStruct->GPIO_Pin);
;;;83     
;;;84                     /* Level-sensitive synchronization enable register */
;;;85                     GPIO->LSSYNC |= GPIO_InitStruct->GPIO_Pin;
;;;86                 }
;;;87                 else if (GPIO_InitStruct->GPIO_ITTrigger == GPIO_INT_Trigger_EDGE)
        0x0080f172:    2a01        .*      CMP      r2,#1
        0x0080f174:    d03d        =.      BEQ      0x80f1f2 ; GPIO_Init + 158
;;;88                 {
;;;89                     GPIO->INTTYPE = (GPIO->INTTYPE & (~GPIO_InitStruct->GPIO_Pin))
;;;90                                     | GPIO_InitStruct->GPIO_Pin;
;;;91                 }
;;;92                 else
;;;93                 {
;;;94                     GPIO->INTBOTHEDGE |= GPIO_InitStruct->GPIO_Pin;
        0x0080f176:    6e8a        .n      LDR      r2,[r1,#0x68]
        0x0080f178:    6803        .h      LDR      r3,[r0,#0]
        0x0080f17a:    431a        .C      ORRS     r2,r2,r3
        0x0080f17c:    668a        .f      STR      r2,[r1,#0x68]
;;;95                 }
;;;96     
;;;97                 /* configure Interrupt polarity register */
;;;98                 if (GPIO_InitStruct->GPIO_ITPolarity == GPIO_INT_POLARITY_ACTIVE_LOW)
        0x0080f17e:    79c2        .y      LDRB     r2,[r0,#7]
        0x0080f180:    b352        R.      CBZ      r2,0x80f1d8 ; GPIO_Init + 132
;;;99                 {
;;;100                    GPIO->INTPOLARITY = GPIO->INTPOLARITY & (~GPIO_InitStruct->GPIO_Pin);
;;;101                }
;;;102                else
;;;103                {
;;;104                    GPIO->INTPOLARITY = (GPIO->INTPOLARITY & (~GPIO_InitStruct->GPIO_Pin))
        0x0080f182:    6bcb        .k      LDR      r3,[r1,#0x3c]
        0x0080f184:    6802        .h      LDR      r2,[r0,#0]
        0x0080f186:    4393        .C      BICS     r3,r3,r2
        0x0080f188:    4313        .C      ORRS     r3,r3,r2
        0x0080f18a:    63cb        .c      STR      r3,[r1,#0x3c]
;;;105                                        | GPIO_InitStruct->GPIO_Pin;
;;;106                }
;;;107                /* Configure Debounce enable register */
;;;108                if (GPIO_InitStruct->GPIO_ITDebounce == GPIO_INT_DEBOUNCE_DISABLE)
        0x0080f18c:    7a02        .z      LDRB     r2,[r0,#8]
        0x0080f18e:    b37a        z.      CBZ      r2,0x80f1f0 ; GPIO_Init + 156
;;;109                {
;;;110                    GPIO->DEBOUNCE = GPIO->DEBOUNCE & (~GPIO_InitStruct->GPIO_Pin);
;;;111                }
;;;112                else
;;;113                {
;;;114                    GPIO->DEBOUNCE = (GPIO->DEBOUNCE & (~GPIO_InitStruct->GPIO_Pin))
        0x0080f190:    6c8b        .l      LDR      r3,[r1,#0x48]
        0x0080f192:    6802        .h      LDR      r2,[r0,#0]
        0x0080f194:    4393        .C      BICS     r3,r3,r2
        0x0080f196:    4313        .C      ORRS     r3,r3,r2
        0x0080f198:    648b        .d      STR      r3,[r1,#0x48]
;;;115                                     | GPIO_InitStruct->GPIO_Pin;
;;;116    
;;;117    #ifdef _IS_ASIC_
;;;118                    /* Config debounce time , default debounce DIV is 14*/
;;;119                    GPIO_DBCLK_DIV = (((0xd) << 8) | (1 << 12));
;;;120                    GPIO_DBCLK_DIV |= ((((GPIO_InitStruct->GPIO_DebounceTime) * (GPIO_CLOCK_SOURCE_KHZ) >>
;;;121                                         (14)) - 1) & 0xff);
;;;122    #else
;;;123                    /* Config debounce time , default debounce DIV is 13*/
;;;124                    GPIO_DBCLK_DIV = (((0x3) << 10) | (1 << 12));
        0x0080f19a:    f04f4180    O..A    MOV      r1,#0x40000000
        0x0080f19e:    f44f52e0    O..R    MOV      r2,#0x1c00
        0x0080f1a2:    f8c12344    ..D#    STR      r2,[r1,#0x344]
;;;125                    GPIO_DBCLK_DIV |= ((((GPIO_InitStruct->GPIO_DebounceTime) * (GPIO_CLOCK_SOURCE_KHZ) >>
        0x0080f1a6:    f8d12344    ..D#    LDR      r2,[r1,#0x344]
        0x0080f1aa:    68c0        .h      LDR      r0,[r0,#0xc]
        0x0080f1ac:    f6446320    D. c    MOV      r3,#0x4e20
        0x0080f1b0:    4358        XC      MULS     r0,r3,r0
        0x0080f1b2:    23ff        .#      MOVS     r3,#0xff
        0x0080f1b4:    eb033050    ..P0    ADD      r0,r3,r0,LSR #13
        0x0080f1b8:    b2c0        ..      UXTB     r0,r0
        0x0080f1ba:    4302        .C      ORRS     r2,r2,r0
        0x0080f1bc:    f8c12344    ..D#    STR      r2,[r1,#0x344]
;;;126                                         (13)) - 1) & 0xff);
;;;127    #endif
;;;128                }
;;;129    
;;;130                /* Configure Interrupt enable register */
;;;131                //GPIO->INTEN |= GPIO_InitStruct->GPIO_Pin;
;;;132            }
;;;133        }
;;;134    }
        0x0080f1c0:    4770        pG      BX       lr
        0x0080f1c2:    4313        .C      ORRS     r3,r3,r2
        0x0080f1c4:    604b        K`      STR      r3,[r1,#4]
        0x0080f1c6:    7a42        Bz      LDRB     r2,[r0,#9]
        0x0080f1c8:    2a00        .*      CMP      r2,#0
        0x0080f1ca:    688a        .h      LDR      r2,[r1,#8]
        0x0080f1cc:    6800        .h      LDR      r0,[r0,#0]
        0x0080f1ce:    d004        ..      BEQ      0x80f1da ; GPIO_Init + 134
        0x0080f1d0:    4302        .C      ORRS     r2,r2,r0
        0x0080f1d2:    608a        .`      STR      r2,[r1,#8]
        0x0080f1d4:    4770        pG      BX       lr
        0x0080f1d6:    e002        ..      B        0x80f1de ; GPIO_Init + 138
        0x0080f1d8:    e011        ..      B        0x80f1fe ; GPIO_Init + 170
        0x0080f1da:    4382        .C      BICS     r2,r2,r0
        0x0080f1dc:    e7f9        ..      B        0x80f1d2 ; GPIO_Init + 126
        0x0080f1de:    6b8a        .k      LDR      r2,[r1,#0x38]
        0x0080f1e0:    6803        .h      LDR      r3,[r0,#0]
        0x0080f1e2:    439a        .C      BICS     r2,r2,r3
        0x0080f1e4:    638a        .c      STR      r2,[r1,#0x38]
        0x0080f1e6:    6e0a        .n      LDR      r2,[r1,#0x60]
        0x0080f1e8:    6803        .h      LDR      r3,[r0,#0]
        0x0080f1ea:    431a        .C      ORRS     r2,r2,r3
        0x0080f1ec:    660a        .f      STR      r2,[r1,#0x60]
        0x0080f1ee:    e7c6        ..      B        0x80f17e ; GPIO_Init + 42
        0x0080f1f0:    e00a        ..      B        0x80f208 ; GPIO_Init + 180
        0x0080f1f2:    6b8b        .k      LDR      r3,[r1,#0x38]
        0x0080f1f4:    6802        .h      LDR      r2,[r0,#0]
        0x0080f1f6:    4393        .C      BICS     r3,r3,r2
        0x0080f1f8:    4313        .C      ORRS     r3,r3,r2
        0x0080f1fa:    638b        .c      STR      r3,[r1,#0x38]
        0x0080f1fc:    e7bf        ..      B        0x80f17e ; GPIO_Init + 42
        0x0080f1fe:    6bca        .k      LDR      r2,[r1,#0x3c]
        0x0080f200:    6803        .h      LDR      r3,[r0,#0]
        0x0080f202:    439a        .C      BICS     r2,r2,r3
        0x0080f204:    63ca        .c      STR      r2,[r1,#0x3c]
        0x0080f206:    e7c1        ..      B        0x80f18c ; GPIO_Init + 56
        0x0080f208:    6c8a        .l      LDR      r2,[r1,#0x48]
        0x0080f20a:    6800        .h      LDR      r0,[r0,#0]
        0x0080f20c:    4382        .C      BICS     r2,r2,r0
        0x0080f20e:    648a        .d      STR      r2,[r1,#0x48]
        0x0080f210:    e7e0        ..      B        0x80f1d4 ; GPIO_Init + 128
    GPIO_StructInit
;;;135    
;;;136    /**
;;;137      * @brief    Fills each GPIO_InitStruct member with its default value.
;;;138      * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
;;;139      *    be initialized.
;;;140      * @retval None
;;;141      */
;;;142    void GPIO_StructInit(GPIO_InitTypeDef *GPIO_InitStruct)
;;;143    {
;;;144        /* Reset GPIO init structure parameters values */
;;;145        GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
        0x0080f212:    f04f31ff    O..1    MOV      r1,#0xffffffff
;;;146        GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
        0x0080f216:    6001        .`      STR      r1,[r0,#0]
        0x0080f218:    2100        .!      MOVS     r1,#0
        0x0080f21a:    7101        .q      STRB     r1,[r0,#4]
;;;147        GPIO_InitStruct->GPIO_ITCmd = DISABLE;
        0x0080f21c:    7141        Aq      STRB     r1,[r0,#5]
;;;148        GPIO_InitStruct->GPIO_ITTrigger = GPIO_INT_Trigger_LEVEL;
        0x0080f21e:    7181        .q      STRB     r1,[r0,#6]
;;;149        GPIO_InitStruct->GPIO_ITPolarity = GPIO_INT_POLARITY_ACTIVE_LOW;
        0x0080f220:    71c1        .q      STRB     r1,[r0,#7]
;;;150        GPIO_InitStruct->GPIO_ITDebounce = GPIO_INT_DEBOUNCE_DISABLE;
        0x0080f222:    7201        .r      STRB     r1,[r0,#8]
;;;151        GPIO_InitStruct->GPIO_ControlMode = GPIO_SOFTWARE_MODE;
        0x0080f224:    7241        Ar      STRB     r1,[r0,#9]
;;;152        GPIO_InitStruct->GPIO_DebounceTime = 20;                 /* ms , can be 1~64 ms */
        0x0080f226:    2114        .!      MOVS     r1,#0x14
        0x0080f228:    60c1        .`      STR      r1,[r0,#0xc]
;;;153    }
        0x0080f22a:    e7d3        ..      B        0x80f1d4 ; GPIO_Init + 128
    GPIO_INTConfig
;;;154    
;;;155    /**
;;;156      * @brief enable the specified GPIO interrupt.
;;;157      * @param  GPIO_Pin_x: where x can be 0 or 31.
;;;158      * @retval None
;;;159      */
;;;160    void GPIO_INTConfig(uint32_t GPIO_Pin, FunctionalState NewState)
;;;161    {
;;;162        /* Check the parameters */
;;;163        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;164        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;165    
;;;166        if (NewState != DISABLE)
;;;167        {
;;;168            /* Enable the selected GPIO pin interrupts */
;;;169            GPIO->INTEN |= GPIO_Pin;
        0x0080f22c:    4a26        &J      LDR      r2,[pc,#152] ; [0x80f2c8] = 0x40001000
        0x0080f22e:    2900        .)      CMP      r1,#0
        0x0080f230:    6b11        .k      LDR      r1,[r2,#0x30]
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_gpio.c (161)
        0x0080f232:    d001        ..      BEQ      0x80f238 ; GPIO_INTConfig + 12
;;;162        /* Check the parameters */
;;;163        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;164        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;165    
;;;166        if (NewState != DISABLE)
;;;167        {
;;;168            /* Enable the selected GPIO pin interrupts */
;;;169            GPIO->INTEN |= GPIO_Pin;
        0x0080f234:    4301        .C      ORRS     r1,r1,r0
        0x0080f236:    e000        ..      B        0x80f23a ; GPIO_INTConfig + 14
        0x0080f238:    4381        .C      BICS     r1,r1,r0
        0x0080f23a:    6311        .c      STR      r1,[r2,#0x30]
;;;170        }
;;;171        else
;;;172        {
;;;173            /* Disable the selected GPIO pin interrupts */
;;;174            GPIO->INTEN &= ~GPIO_Pin;
;;;175        }
;;;176    }
        0x0080f23c:    e7ca        ..      B        0x80f1d4 ; GPIO_Init + 128
    GPIO_ClearINTPendingBit
;;;177    
;;;178    /**
;;;179      * @brief clear the specified GPIO interrupt.
;;;180      * @param  GPIO_Pin_x: where x can be 0 or 31.
;;;181      * @retval None
;;;182      */
;;;183    void GPIO_ClearINTPendingBit(uint32_t GPIO_Pin)
;;;184    {
;;;185        /* Check the parameters */
;;;186        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;187    
;;;188        GPIO->INTCLR = GPIO_Pin;
        0x0080f23e:    4922        "I      LDR      r1,[pc,#136] ; [0x80f2c8] = 0x40001000
        0x0080f240:    64c8        .d      STR      r0,[r1,#0x4c]
;;;189    }
        0x0080f242:    e7c7        ..      B        0x80f1d4 ; GPIO_Init + 128
    GPIO_MaskINTConfig
;;;190    
;;;191    /**
;;;192      * @brief mask the specified GPIO interrupt.
;;;193      * @param  GPIO_Pin_x: where x can be 0 or 31.
;;;194      * @retval None
;;;195      */
;;;196    void GPIO_MaskINTConfig(uint32_t GPIO_Pin, FunctionalState NewState)
;;;197    {
;;;198        /* Check the parameters */
;;;199        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;200        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;201    
;;;202        if (NewState != DISABLE)
;;;203        {
;;;204            GPIO->INTMASK |= GPIO_Pin;
        0x0080f244:    4a20         J      LDR      r2,[pc,#128] ; [0x80f2c8] = 0x40001000
        0x0080f246:    2900        .)      CMP      r1,#0
        0x0080f248:    6b51        Qk      LDR      r1,[r2,#0x34]
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_gpio.c (197)
        0x0080f24a:    d001        ..      BEQ      0x80f250 ; GPIO_MaskINTConfig + 12
;;;198        /* Check the parameters */
;;;199        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;200        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;201    
;;;202        if (NewState != DISABLE)
;;;203        {
;;;204            GPIO->INTMASK |= GPIO_Pin;
        0x0080f24c:    4301        .C      ORRS     r1,r1,r0
        0x0080f24e:    e000        ..      B        0x80f252 ; GPIO_MaskINTConfig + 14
        0x0080f250:    4381        .C      BICS     r1,r1,r0
        0x0080f252:    6351        Qc      STR      r1,[r2,#0x34]
;;;205        }
;;;206        else
;;;207        {
;;;208            GPIO->INTMASK &= ~(GPIO_Pin);
;;;209        }
;;;210    }
        0x0080f254:    e7be        ..      B        0x80f1d4 ; GPIO_Init + 128
    GPIO_GetPin
        0x0080f256:    2101        .!      MOVS     r1,#1
        0x0080f258:    281e        .(      CMP      r0,#0x1e
;;;211    
;;;212    /**
;;;213      * @brief get the specified GPIO pin.
;;;214      * @param  Pin_num: This parameter is from ADC_0 to P4_1, please refer to rtl876x.h "Pin_Number" part.
;;;215      * @retval  GPIO pin for GPIO initialization.
;;;216      */
;;;217    uint32_t GPIO_GetPin(uint8_t Pin_num)
;;;218    {
        0x0080f25a:    d90e        ..      BLS      0x80f27a ; GPIO_GetPin + 36
;;;219        /* Check the parameters */
;;;220        assert_param(IS_PIN_NUM(Pin_num));
;;;221    
;;;222        if (Pin_num <= P3_6)
;;;223        {
;;;224            return  BIT(Pin_num);
;;;225        }
;;;226        else if ((Pin_num <= P4_3) && (Pin_num >= P4_0))
        0x0080f25c:    f1a00220    .. .    SUB      r2,r0,#0x20
        0x0080f260:    2a03        .*      CMP      r2,#3
        0x0080f262:    d801        ..      BHI      0x80f268 ; GPIO_GetPin + 18
        0x0080f264:    1f00        ..      SUBS     r0,r0,#4
;;;227        {
;;;228            return BIT(Pin_num - 4);
        0x0080f266:    e008        ..      B        0x80f27a ; GPIO_GetPin + 36
;;;229        }
;;;230        else if ((Pin_num == H_0) || (Pin_num == H_1) || (Pin_num == H_2))
        0x0080f268:    2824        $(      CMP      r0,#0x24
        0x0080f26a:    d005        ..      BEQ      0x80f278 ; GPIO_GetPin + 34
        0x0080f26c:    2825        %(      CMP      r0,#0x25
        0x0080f26e:    d003        ..      BEQ      0x80f278 ; GPIO_GetPin + 34
        0x0080f270:    2826        &(      CMP      r0,#0x26
        0x0080f272:    d001        ..      BEQ      0x80f278 ; GPIO_GetPin + 34
        0x0080f274:    20ff        .       MOVS     r0,#0xff
        0x0080f276:    e7ad        ..      B        0x80f1d4 ; GPIO_Init + 128
        0x0080f278:    380b        .8      SUBS     r0,r0,#0xb
;;;231        {
;;;232            return BIT(Pin_num - 11);
        0x0080f27a:    fa01f000    ....    LSL      r0,r1,r0
;;;233        }
;;;234    
;;;235        return 0xFF;
;;;236    }
        0x0080f27e:    e7a9        ..      B        0x80f1d4 ; GPIO_Init + 128
    GPIO_GetNum
;;;237    
;;;238    /**
;;;239      * @brief get the specified GPIO pin number.
;;;240      * @param  Pin_num: This parameter is from ADC_0 to P4_1, please refer to rtl876x.h "Pin_Number" part.
;;;241      * @retval  GPIO pin number.
;;;242      */
;;;243    uint8_t GPIO_GetNum(uint8_t Pin_num)
;;;244    {
;;;245        /* Check the parameters */
;;;246        assert_param(IS_PIN_NUM(Pin_num));
;;;247    
;;;248        if (Pin_num <= P3_6)
        0x0080f280:    281e        .(      CMP      r0,#0x1e
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_gpio.c (244)
        0x0080f282:    d9a7        ..      BLS      0x80f1d4 ; GPIO_Init + 128
;;;245        /* Check the parameters */
;;;246        assert_param(IS_PIN_NUM(Pin_num));
;;;247    
;;;248        if (Pin_num <= P3_6)
;;;249        {
;;;250            return (Pin_num);
;;;251        }
;;;252        else if ((Pin_num <= P4_3) && (Pin_num >= P4_0))
        0x0080f284:    f1a00120    .. .    SUB      r1,r0,#0x20
        0x0080f288:    2903        .)      CMP      r1,#3
        0x0080f28a:    d801        ..      BHI      0x80f290 ; GPIO_GetNum + 16
        0x0080f28c:    1f00        ..      SUBS     r0,r0,#4
;;;253        {
;;;254            return (Pin_num - 4);
        0x0080f28e:    e008        ..      B        0x80f2a2 ; GPIO_GetNum + 34
;;;255        }
;;;256        else if ((Pin_num == H_0) || (Pin_num == H_1) || (Pin_num == H_2))
        0x0080f290:    2824        $(      CMP      r0,#0x24
        0x0080f292:    d005        ..      BEQ      0x80f2a0 ; GPIO_GetNum + 32
        0x0080f294:    2825        %(      CMP      r0,#0x25
        0x0080f296:    d003        ..      BEQ      0x80f2a0 ; GPIO_GetNum + 32
        0x0080f298:    2826        &(      CMP      r0,#0x26
        0x0080f29a:    d001        ..      BEQ      0x80f2a0 ; GPIO_GetNum + 32
        0x0080f29c:    20ff        .       MOVS     r0,#0xff
        0x0080f29e:    e799        ..      B        0x80f1d4 ; GPIO_Init + 128
        0x0080f2a0:    380b        .8      SUBS     r0,r0,#0xb
;;;257        {
;;;258            return (Pin_num - 11);
        0x0080f2a2:    b2c0        ..      UXTB     r0,r0
;;;259        }
;;;260    
;;;261        return 0xFF;
;;;262    }
        0x0080f2a4:    e796        ..      B        0x80f1d4 ; GPIO_Init + 128
    GPIO_DBClkCmd
        0x0080f2a6:    f04f4180    O..A    MOV      r1,#0x40000000
        0x0080f2aa:    2800        .(      CMP      r0,#0
        0x0080f2ac:    f8d10344    ..D.    LDR      r0,[r1,#0x344]
;;;263    
;;;264    /**
;;;265      * @brief get the specified GPIO pin number.
;;;266      * @param  Pin_num: This parameter is from ADC_0 to P4_1, please refer to rtl876x.h "Pin_Number" part.
;;;267      * @retval  GPIO pin number.
;;;268      */
;;;269    void GPIO_DBClkCmd(FunctionalState NewState)
;;;270    {
        0x0080f2b0:    d002        ..      BEQ      0x80f2b8 ; GPIO_DBClkCmd + 18
;;;271        if (NewState != DISABLE)
;;;272        {
;;;273            GPIO_DBCLK_DIV |= BIT12;
        0x0080f2b2:    f4405080    @..P    ORR      r0,r0,#0x1000
        0x0080f2b6:    e001        ..      B        0x80f2bc ; GPIO_DBClkCmd + 22
        0x0080f2b8:    f4205080     ..P    BIC      r0,r0,#0x1000
        0x0080f2bc:    f8c10344    ..D.    STR      r0,[r1,#0x344]
;;;274        }
;;;275        else
;;;276        {
;;;277            GPIO_DBCLK_DIV &= ~BIT12;
;;;278        }
;;;279    }
        0x0080f2c0:    e788        ..      B        0x80f1d4 ; GPIO_Init + 128
    $d
        0x0080f2c2:    0000        ..      DCW    0
        0x0080f2c4:    0c000100    ....    DCD    201326848
        0x0080f2c8:    40001000    ...@    DCD    1073745920
    $t
    .text
    RCC_PeriphClockCmd
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_rcc.c
;;;66     {
        0x0080f2cc:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0080f2ce:    f44f7790    O..w    MOV      r7,#0x120
        0x0080f2d2:    067b        {.      LSLS     r3,r7,#25
;;;67         /* Check the parameters */
;;;68         assert_param(IS_APB_PERIPH(APBPeriph));
;;;69         assert_param(IS_APB_PERIPH_CLOCK(APBPeriph_Clock));
;;;70         assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;71     
;;;72         uint32_t apbRegOff = ((APBPeriph & (0x03 << 26)) >> 26);
        0x0080f2d4:    f3c06681    ...f    UBFX     r6,r0,#26,#2
;;;73         uint32_t clkRegOff = ((APBPeriph_Clock & (0x03 << 29)) >> 29);
        0x0080f2d8:    f3c17541    ..Au    UBFX     r5,r1,#29,#2
        0x0080f2dc:    f44f7ea0    O..~    MOV      lr,#0x140
        0x0080f2e0:    ea400401    @...    ORR      r4,r0,r1
;;;74     
;;;75         /*Open clock gating first*/
;;;76         if (NewState == ENABLE)
        0x0080f2e4:    2a01        .*      CMP      r2,#1
        0x0080f2e6:    d006        ..      BEQ      0x80f2f6 ; RCC_PeriphClockCmd + 42
        0x0080f2e8:    42b9        .B      CMP      r1,r7
        0x0080f2ea:    d06f        o.      BEQ      0x80f3cc ; RCC_PeriphClockCmd + 256
        0x0080f2ec:    4571        qE      CMP      r1,lr
        0x0080f2ee:    d06d        m.      BEQ      0x80f3cc ; RCC_PeriphClockCmd + 256
        0x0080f2f0:    2910        .)      CMP      r1,#0x10
        0x0080f2f2:    d06b        k.      BEQ      0x80f3cc ; RCC_PeriphClockCmd + 256
        0x0080f2f4:    e04b        K.      B        0x80f38e ; RCC_PeriphClockCmd + 194
;;;77         {
;;;78             if (APBPeriph_Clock == APBPeriph_KEYSCAN_CLOCK)
        0x0080f2f6:    f1a14cc0    ...L    SUB      r12,r1,#0x60000000
        0x0080f2fa:    f1bc0c40    ..@.    SUBS     r12,r12,#0x40
        0x0080f2fe:    d018        ..      BEQ      0x80f332 ; RCC_PeriphClockCmd + 102
        0x0080f300:    f1b14fc2    ...O    CMP      r1,#0x61000000
        0x0080f304:    d020         .      BEQ      0x80f348 ; RCC_PeriphClockCmd + 124
        0x0080f306:    f1a14cc0    ...L    SUB      r12,r1,#0x60000000
        0x0080f30a:    f1bc0c10    ....    SUBS     r12,r12,#0x10
        0x0080f30e:    d003        ..      BEQ      0x80f318 ; RCC_PeriphClockCmd + 76
        0x0080f310:    f8dfc2f0    ....    LDR      r12,[pc,#752] ; [0x80f604] = 0x60010000
        0x0080f314:    4561        aE      CMP      r1,r12
        0x0080f316:    d124        $.      BNE      0x80f362 ; RCC_PeriphClockCmd + 150
        0x0080f318:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x0080f31c:    f04c6c80    L..l    ORR      r12,r12,#0x4000000
        0x0080f320:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
        0x0080f324:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x0080f328:    f04c6c00    L..l    ORR      r12,r12,#0x8000000
        0x0080f32c:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
        0x0080f330:    e027        '.      B        0x80f382 ; RCC_PeriphClockCmd + 182
;;;79             {
;;;80                 /*Open 5M clock source*/
;;;81                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
        0x0080f332:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x0080f336:    f04c6c80    L..l    ORR      r12,r12,#0x4000000
        0x0080f33a:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
;;;82                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
        0x0080f33e:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x0080f342:    f04c5c00    L..\    ORR      r12,r12,#0x20000000
        0x0080f346:    e7f1        ..      B        0x80f32c ; RCC_PeriphClockCmd + 96
;;;83             }
;;;84             else if (APBPeriph_Clock == APBPeriph_ADC_CLOCK)
;;;85             {
;;;86                 /*Open 10M clock source*/
;;;87                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
        0x0080f348:    f8d3420c    ...B    LDR      r4,[r3,#0x20c]
        0x0080f34c:    f0446480    D..d    ORR      r4,r4,#0x4000000
        0x0080f350:    f8c3420c    ...B    STR      r4,[r3,#0x20c]
;;;88                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
        0x0080f354:    f8d3420c    ...B    LDR      r4,[r3,#0x20c]
        0x0080f358:    f0445480    D..T    ORR      r4,r4,#0x10000000
        0x0080f35c:    f8c3420c    ...B    STR      r4,[r3,#0x20c]
        0x0080f360:    e015        ..      B        0x80f38e ; RCC_PeriphClockCmd + 194
;;;89             }
;;;90             else if ((APBPeriph_Clock == APBPeriph_QDEC_CLOCK) || (APBPeriph_Clock == APBPeriph_SPI2W_CLOCK))
;;;91             {
;;;92                 /*Open 20M clock source*/
;;;93                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;94                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;95             }
;;;96             else if (APBPeriph_Clock == APBPeriph_TIMER_CLOCK)
        0x0080f362:    f8dfc2a4    ....    LDR      r12,[pc,#676] ; [0x80f608] = 0x20004000
        0x0080f366:    4561        aE      CMP      r1,r12
        0x0080f368:    d10b        ..      BNE      0x80f382 ; RCC_PeriphClockCmd + 182
;;;97             {
;;;98                 /* Enable TIM0~1 fixed 40M */
;;;99                 CLK_SOURCE_REG_2 |= BIT9;
        0x0080f36a:    f8d3c360    ..`.    LDR      r12,[r3,#0x360]
        0x0080f36e:    f44c7c00    L..|    ORR      r12,r12,#0x200
        0x0080f372:    f8c3c360    ..`.    STR      r12,[r3,#0x360]
;;;100                /* enable TIM2~7 ICG*/
;;;101                CLK_SOURCE_REG_0 |= BIT4;
        0x0080f376:    f8d3c348    ..H.    LDR      r12,[r3,#0x348]
        0x0080f37a:    f04c0c10    L...    ORR      r12,r12,#0x10
        0x0080f37e:    f8c3c348    ..H.    STR      r12,[r3,#0x348]
;;;102            }
;;;103        }
;;;104    
;;;105        /* Special register handle */
;;;106        if (NewState == ENABLE)
;;;107        {
;;;108            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
        0x0080f382:    42b9        .B      CMP      r1,r7
        0x0080f384:    d01d        ..      BEQ      0x80f3c2 ; RCC_PeriphClockCmd + 246
        0x0080f386:    4571        qE      CMP      r1,lr
        0x0080f388:    d01b        ..      BEQ      0x80f3c2 ; RCC_PeriphClockCmd + 246
;;;109                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
        0x0080f38a:    2910        .)      CMP      r1,#0x10
        0x0080f38c:    d019        ..      BEQ      0x80f3c2 ; RCC_PeriphClockCmd + 246
;;;110            {
;;;111                SYSBLKCTRL->u_220 |= APBPeriph | APBPeriph_Clock;
;;;112                return;
;;;113            }
;;;114        }
;;;115        else
;;;116        {
;;;117            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
;;;118                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
;;;119            {
;;;120                SYSBLKCTRL->u_220 &= ~(APBPeriph | APBPeriph_Clock);
;;;121                return;
;;;122            }
;;;123        }
;;;124    
;;;125        /* clear flag */
;;;126        APBPeriph &= (~(0x03 << 26));
        0x0080f38e:    f0206340     .@c    BIC      r3,r0,#0xc000000
;;;127        APBPeriph_Clock &= (~(0x03 << 29));
        0x0080f392:    f02140c0    !..@    BIC      r0,r1,#0x60000000
        0x0080f396:    ea4f0186    O...    LSL      r1,r6,#2
        0x0080f39a:    f1014180    ...A    ADD      r1,r1,#0x40000000
;;;128    
;;;129        if (NewState == ENABLE)
        0x0080f39e:    2a01        .*      CMP      r2,#1
        0x0080f3a0:    f8d12210    ..."    LDR      r2,[r1,#0x210]
        0x0080f3a4:    d018        ..      BEQ      0x80f3d8 ; RCC_PeriphClockCmd + 268
;;;130        {
;;;131            //enable peripheral
;;;132            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) |= APBPeriph;
;;;133            //enable peripheral clock
;;;134            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= APBPeriph_Clock;
;;;135            //enable peripheral clock in sleep mode
;;;136            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= (APBPeriph_Clock << 1);
;;;137        }
;;;138        else
;;;139        {
;;;140            //disable peripheral
;;;141            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) &= (~APBPeriph);
        0x0080f3a6:    439a        .C      BICS     r2,r2,r3
;;;142            //disable peripheral clock
;;;143            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~APBPeriph_Clock);
        0x0080f3a8:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x0080f3ac:    00a9        ..      LSLS     r1,r5,#2
        0x0080f3ae:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x0080f3b2:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x0080f3b6:    4382        .C      BICS     r2,r2,r0
;;;144            //disable peripheral clock in sleep mode
;;;145            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~(APBPeriph_Clock << 1));
        0x0080f3b8:    ea220040    ".@.    BIC      r0,r2,r0,LSL #1
        0x0080f3bc:    f8c1022c    ..,.    STR      r0,[r1,#0x22c]
;;;146        }
;;;147    
;;;148        return;
;;;149    }
        0x0080f3c0:    bdf0        ..      POP      {r4-r7,pc}
        0x0080f3c2:    f8d30220    .. .    LDR      r0,[r3,#0x220]
        0x0080f3c6:    4320         C      ORRS     r0,r0,r4
        0x0080f3c8:    e003        ..      B        0x80f3d2 ; RCC_PeriphClockCmd + 262
        0x0080f3ca:    e7ff        ..      B        0x80f3cc ; RCC_PeriphClockCmd + 256
        0x0080f3cc:    f8d30220    .. .    LDR      r0,[r3,#0x220]
        0x0080f3d0:    43a0        .C      BICS     r0,r0,r4
        0x0080f3d2:    f8c30220    .. .    STR      r0,[r3,#0x220]
        0x0080f3d6:    bdf0        ..      POP      {r4-r7,pc}
        0x0080f3d8:    431a        .C      ORRS     r2,r2,r3
        0x0080f3da:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x0080f3de:    00a9        ..      LSLS     r1,r5,#2
        0x0080f3e0:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x0080f3e4:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x0080f3e8:    4302        .C      ORRS     r2,r2,r0
        0x0080f3ea:    ea420040    B.@.    ORR      r0,r2,r0,LSL #1
        0x0080f3ee:    e7e5        ..      B        0x80f3bc ; RCC_PeriphClockCmd + 240
    RCC_SPIClkDivConfig
;;;150    
;;;151    /**
;;;152      * @brief  SPI clock divider config.
;;;153      * @param  SPIx: where x can be 0 or 1 to select the SPI peripheral.
;;;154      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;155      *      this parameter can be one of the following values:
;;;156      *     @arg SPI_CLOCK_DIV_1
;;;157      *     @arg SPI_CLOCK_DIV_2
;;;158      *     @arg SPI_CLOCK_DIV_4
;;;159      *     @arg SPI_CLOCK_DIV_8
;;;160      * @retval None
;;;161      */
;;;162    void RCC_SPIClkDivConfig(SPI_TypeDef *SPIx, uint16_t ClockDiv)
;;;163    {
;;;164        assert_param(IS_SPI_DIV(ClockDiv));
;;;165    
;;;166        /* Config I2C clock divider */
;;;167        if (SPIx == SPI0)
        0x0080f3f0:    4b86        .K      LDR      r3,[pc,#536] ; [0x80f60c] = 0x40013000
        0x0080f3f2:    f04f4280    O..B    MOV      r2,#0x40000000
        0x0080f3f6:    4298        .B      CMP      r0,r3
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_rcc.c (163)
        0x0080f3f8:    d116        ..      BNE      0x80f428 ; RCC_SPIClkDivConfig + 56
;;;164        assert_param(IS_SPI_DIV(ClockDiv));
;;;165    
;;;166        /* Config I2C clock divider */
;;;167        if (SPIx == SPI0)
;;;168        {
;;;169            /* disable clock first */
;;;170            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_SPI0_EN_Msk;
        0x0080f3fa:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0080f3fe:    f4203080     ..0    BIC      r0,r0,#0x10000
        0x0080f402:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;171            //platform_delay_us(1);
;;;172    
;;;173            CLK_SOURCE_REG_1 &= ~(0x03 << 19);
        0x0080f406:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080f40a:    f42010c0     ...    BIC      r0,r0,#0x180000
        0x0080f40e:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;174            CLK_SOURCE_REG_1 |= (ClockDiv << 19);
        0x0080f412:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080f416:    ea4040c1    @..@    ORR      r0,r0,r1,LSL #19
        0x0080f41a:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;175    
;;;176            //platform_delay_us(1);
;;;177            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_SPI0_EN_Msk;
        0x0080f41e:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0080f422:    f4403080    @..0    ORR      r0,r0,#0x10000
        0x0080f426:    e018        ..      B        0x80f45a ; RCC_SPIClkDivConfig + 106
;;;178        }
;;;179        else if (SPIx == SPI1)
        0x0080f428:    4b79        yK      LDR      r3,[pc,#484] ; [0x80f610] = 0x40013400
        0x0080f42a:    4298        .B      CMP      r0,r3
        0x0080f42c:    d117        ..      BNE      0x80f45e ; RCC_SPIClkDivConfig + 110
;;;180        {
;;;181            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_SPI1_EN_Msk;
        0x0080f42e:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0080f432:    f4202080     ..     BIC      r0,r0,#0x40000
        0x0080f436:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;182            //platform_delay_us(1);
;;;183    
;;;184            CLK_SOURCE_REG_1 &= ~(0x03 << 21);
        0x0080f43a:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080f43e:    f42000c0     ...    BIC      r0,r0,#0x600000
        0x0080f442:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;185            CLK_SOURCE_REG_1 |= (ClockDiv << 21);
        0x0080f446:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080f44a:    ea405041    @.AP    ORR      r0,r0,r1,LSL #21
        0x0080f44e:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;186    
;;;187            //platform_delay_us(1);
;;;188            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_SPI1_EN_Msk;
        0x0080f452:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0080f456:    f4402080    @..     ORR      r0,r0,#0x40000
        0x0080f45a:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;189        }
;;;190        return;
;;;191    }
        0x0080f45e:    4770        pG      BX       lr
    RCC_I2CClkDivConfig
;;;192    
;;;193    /**
;;;194      * @brief  I2C clock divider config.
;;;195      * @param  I2Cx: where x can be 0 or 1 to select the I2C peripheral.
;;;196      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;197      *      this parameter can be one of the following values:
;;;198      *     @arg I2C_CLOCK_DIV_1
;;;199      *     @arg I2C_CLOCK_DIV_2
;;;200      *     @arg I2C_CLOCK_DIV_4
;;;201      *     @arg I2C_CLOCK_DIV_8
;;;202      * @retval None
;;;203      */
;;;204    void RCC_I2CClkDivConfig(I2C_TypeDef *I2Cx, uint16_t ClockDiv)
;;;205    {
;;;206        assert_param(IS_I2C_DIV(ClockDiv));
;;;207    
;;;208        /* Config I2C clock divider */
;;;209        if (I2Cx == I2C0)
        0x0080f460:    4b6c        lK      LDR      r3,[pc,#432] ; [0x80f614] = 0x40015000
        0x0080f462:    049a        ..      LSLS     r2,r3,#18
        0x0080f464:    4298        .B      CMP      r0,r3
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_rcc.c (205)
        0x0080f466:    d116        ..      BNE      0x80f496 ; RCC_I2CClkDivConfig + 54
;;;206        assert_param(IS_I2C_DIV(ClockDiv));
;;;207    
;;;208        /* Config I2C clock divider */
;;;209        if (I2Cx == I2C0)
;;;210        {
;;;211            /* disable clock first */
;;;212            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 &= ~SYSBLK_ACTCK_I2C0_EN_Msk;
        0x0080f468:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x0080f46c:    f0200001     ...    BIC      r0,r0,#1
        0x0080f470:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;213            //platform_delay_us(1);
;;;214    
;;;215            CLK_SOURCE_REG_1 &= ~(0x03 << 15);
        0x0080f474:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080f478:    f42030c0     ..0    BIC      r0,r0,#0x18000
        0x0080f47c:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;216            CLK_SOURCE_REG_1 |= (ClockDiv << 15);
        0x0080f480:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080f484:    ea4030c1    @..0    ORR      r0,r0,r1,LSL #15
        0x0080f488:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;217    
;;;218            //platform_delay_us(1);
;;;219            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= SYSBLK_ACTCK_I2C0_EN_Msk;
        0x0080f48c:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x0080f490:    f0400001    @...    ORR      r0,r0,#1
        0x0080f494:    e018        ..      B        0x80f4c8 ; RCC_I2CClkDivConfig + 104
;;;220        }
;;;221        else if (I2Cx == I2C1)
        0x0080f496:    4b60        `K      LDR      r3,[pc,#384] ; [0x80f618] = 0x40015400
        0x0080f498:    4298        .B      CMP      r0,r3
        0x0080f49a:    d117        ..      BNE      0x80f4cc ; RCC_I2CClkDivConfig + 108
;;;222        {
;;;223            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 &= ~SYSBLK_ACTCK_I2C1_EN_Msk;
        0x0080f49c:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x0080f4a0:    f0200004     ...    BIC      r0,r0,#4
        0x0080f4a4:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;224            //platform_delay_us(1);
;;;225    
;;;226            CLK_SOURCE_REG_1 &= ~(0x03 << 17);
        0x0080f4a8:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080f4ac:    f42020c0     ..     BIC      r0,r0,#0x60000
        0x0080f4b0:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;227            CLK_SOURCE_REG_1 |= (ClockDiv << 17);
        0x0080f4b4:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080f4b8:    ea404041    @.A@    ORR      r0,r0,r1,LSL #17
        0x0080f4bc:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;228    
;;;229            //platform_delay_us(1);
;;;230            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= SYSBLK_ACTCK_I2C1_EN_Msk;
        0x0080f4c0:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x0080f4c4:    f0400004    @...    ORR      r0,r0,#4
        0x0080f4c8:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;231        }
;;;232    
;;;233        return;
;;;234    }
        0x0080f4cc:    4770        pG      BX       lr
    RCC_UARTClkDivConfig
        0x0080f4ce:    4b53        SK      LDR      r3,[pc,#332] ; [0x80f61c] = 0x40012000
        0x0080f4d0:    045a        Z.      LSLS     r2,r3,#17
        0x0080f4d2:    4298        .B      CMP      r0,r3
;;;235    
;;;236    /**
;;;237      * @brief  UART clock divider config.
;;;238      * @param  UARTx: selected UART peripheral.
;;;239      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;240      *      this parameter can be one of the following values:
;;;241      *     @arg UART_CLOCK_DIV_1
;;;242      *     @arg UART_CLOCK_DIV_2
;;;243      *     @arg UART_CLOCK_DIV_4
;;;244      *     @arg UART_CLOCK_DIV_16
;;;245      * @retval None
;;;246      */
;;;247    void RCC_UARTClkDivConfig(UART_TypeDef *UARTx, uint16_t ClockDiv)
;;;248    {
        0x0080f4d4:    d118        ..      BNE      0x80f508 ; RCC_UARTClkDivConfig + 58
;;;249        assert_param(IS_UART_DIV(ClockDiv));
;;;250    
;;;251        /* Config UART clock divider */
;;;252        if (UARTx == UART)
;;;253        {
;;;254            /* disable clock first */
;;;255            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_UART0DATA_EN_Msk;
        0x0080f4d6:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0080f4da:    f0200001     ...    BIC      r0,r0,#1
        0x0080f4de:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;256            //platform_delay_us(1);
;;;257    
;;;258            CLK_SOURCE_REG_1 &= ~(0x03 << 9);
        0x0080f4e2:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080f4e6:    f42060c0     ..`    BIC      r0,r0,#0x600
        0x0080f4ea:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;259            CLK_SOURCE_REG_1 |= (ClockDiv << 9);
        0x0080f4ee:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080f4f2:    ea402041    @.A     ORR      r0,r0,r1,LSL #9
        0x0080f4f6:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;260    
;;;261            //platform_delay_us(1);
;;;262            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_UART0DATA_EN_Msk;
        0x0080f4fa:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0080f4fe:    f0400001    @...    ORR      r0,r0,#1
        0x0080f502:    f8c20234    ..4.    STR      r0,[r2,#0x234]
        0x0080f506:    4770        pG      BX       lr
;;;263        }
;;;264        else if (UARTx == UART1)
        0x0080f508:    4b45        EK      LDR      r3,[pc,#276] ; [0x80f620] = 0x40011000
        0x0080f50a:    4298        .B      CMP      r0,r3
        0x0080f50c:    d1fb        ..      BNE      0x80f506 ; RCC_UARTClkDivConfig + 56
;;;265        {
;;;266            SYSBLKCTRL->u_230.CLK_CTRL &= ~SYSBLK_ACTCK_LOGUART_EN_Msk;
        0x0080f50e:    f8d20230    ..0.    LDR      r0,[r2,#0x230]
        0x0080f512:    f4205080     ..P    BIC      r0,r0,#0x1000
        0x0080f516:    f8c20230    ..0.    STR      r0,[r2,#0x230]
;;;267            //platform_delay_us(1);
;;;268    
;;;269            CLK_SOURCE_REG_1 &= ~(0x03 << 11);
        0x0080f51a:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080f51e:    f42050c0     ..P    BIC      r0,r0,#0x1800
        0x0080f522:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;270            CLK_SOURCE_REG_1 |= (ClockDiv << 11);
        0x0080f526:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0080f52a:    ea4020c1    @..     ORR      r0,r0,r1,LSL #11
        0x0080f52e:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;271    
;;;272            //platform_delay_us(1);
;;;273            SYSBLKCTRL->u_230.CLK_CTRL |= SYSBLK_ACTCK_LOGUART_EN_Msk;
        0x0080f532:    f8d20230    ..0.    LDR      r0,[r2,#0x230]
        0x0080f536:    f4405080    @..P    ORR      r0,r0,#0x1000
        0x0080f53a:    f8c20230    ..0.    STR      r0,[r2,#0x230]
;;;274        }
;;;275    
;;;276        return;
;;;277    }
        0x0080f53e:    4770        pG      BX       lr
    RCC_PeriClockConfig
;;;278    
;;;279    /**
;;;280      * @brief  Enables or disables the APB peripheral clock.
;;;281      * @param  APBPeriph_Clock: specifies the APB peripheral clock config.
;;;282      *      this parameter can be one of the following values(must be the same with APBPeriph):
;;;283      *     @arg APBPeriph_TIMER_CLOCK
;;;284      *     @arg APBPeriph_GDMA_CLOCK
;;;285      *     @arg APBPeriph_SPI2W_CLOCK
;;;286      *     @arg APBPeriph_KEYSCAN_CLOCK
;;;287      *     @arg APBPeriph_QDEC_CLOCK
;;;288      *     @arg APBPeriph_I2C1_CLOCK
;;;289      *     @arg APBPeriph_I2C0_CLOCK
;;;290      *     @arg APBPeriph_IR_CLOCK
;;;291      *     @arg APBPeriph_SPI1_CLOCK
;;;292      *     @arg APBPeriph_SPI0_CLOCK
;;;293      *     @arg APBPeriph_UART0_CLOCK
;;;294      *     @arg APBPeriph_UART1_CLOCK
;;;295      *     @arg APBPeriph_UART2_CLOCK
;;;296      *     @arg APBPeriph_GPIO_CLOCK
;;;297      *     @arg APBPeriph_ADC_CLOCK
;;;298      *     @arg APBPeriph_I2S0_CLOCK
;;;299      *     @arg APBPeriph_I2S1_CLOCK
;;;300      *     @arg APBPeriph_CODEC_CLOCK
;;;301      * @param  NewState: new state of the specified peripheral clock.
;;;302      *   This parameter can be: ENABLE or DISABLE.
;;;303      * @retval None
;;;304      */
;;;305    void RCC_PeriClockConfig(uint32_t APBPeriph_Clock, FunctionalState NewState)
;;;306    {
        0x0080f540:    b530        0.      PUSH     {r4,r5,lr}
        0x0080f542:    f44f74a0    O..t    MOV      r4,#0x140
        0x0080f546:    0623        #.      LSLS     r3,r4,#24
        0x0080f548:    f3c07241    ..Ar    UBFX     r2,r0,#29,#2
        0x0080f54c:    f44f7590    O..u    MOV      r5,#0x120
        0x0080f550:    2901        .)      CMP      r1,#1
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_rcc.c (306)
        0x0080f552:    d006        ..      BEQ      0x80f562 ; RCC_PeriClockConfig + 34
        0x0080f554:    42a8        .B      CMP      r0,r5
        0x0080f556:    d01e        ..      BEQ      0x80f596 ; RCC_PeriClockConfig + 86
        0x0080f558:    42a0        .B      CMP      r0,r4
        0x0080f55a:    d01c        ..      BEQ      0x80f596 ; RCC_PeriClockConfig + 86
        0x0080f55c:    2810        .(      CMP      r0,#0x10
        0x0080f55e:    d01a        ..      BEQ      0x80f596 ; RCC_PeriClockConfig + 86
        0x0080f560:    e005        ..      B        0x80f56e ; RCC_PeriClockConfig + 46
;;;307        /* Check the parameters */
;;;308        assert_param(IS_APB_PERIPH_CLOCK(APBPeriph_Clock));
;;;309        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;310    
;;;311        uint32_t clkRegOff = ((APBPeriph_Clock & (0x03 << 29)) >> 29);
;;;312    
;;;313        /* Special register handle */
;;;314        if (NewState == ENABLE)
;;;315        {
;;;316            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
        0x0080f562:    42a8        .B      CMP      r0,r5
        0x0080f564:    d013        ..      BEQ      0x80f58e ; RCC_PeriClockConfig + 78
        0x0080f566:    42a0        .B      CMP      r0,r4
        0x0080f568:    d011        ..      BEQ      0x80f58e ; RCC_PeriClockConfig + 78
;;;317                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
        0x0080f56a:    2810        .(      CMP      r0,#0x10
        0x0080f56c:    d00f        ..      BEQ      0x80f58e ; RCC_PeriClockConfig + 78
        0x0080f56e:    2901        .)      CMP      r1,#1
        0x0080f570:    ea4f0182    O...    LSL      r1,r2,#2
        0x0080f574:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x0080f578:    f02040c0     ..@    BIC      r0,r0,#0x60000000
        0x0080f57c:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x0080f580:    d00f        ..      BEQ      0x80f5a2 ; RCC_PeriClockConfig + 98
        0x0080f582:    4382        .C      BICS     r2,r2,r0
        0x0080f584:    ea220040    ".@.    BIC      r0,r2,r0,LSL #1
        0x0080f588:    f8c1022c    ..,.    STR      r0,[r1,#0x22c]
        0x0080f58c:    bd30        0.      POP      {r4,r5,pc}
;;;318            {
;;;319                SYSBLKCTRL->u_220 |= APBPeriph_Clock;
        0x0080f58e:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x0080f592:    4301        .C      ORRS     r1,r1,r0
;;;320                return;
        0x0080f594:    e002        ..      B        0x80f59c ; RCC_PeriClockConfig + 92
;;;321            }
;;;322        }
;;;323        else
;;;324        {
;;;325            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
;;;326                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
;;;327            {
;;;328                SYSBLKCTRL->u_220 &= ~(APBPeriph_Clock);
        0x0080f596:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x0080f59a:    4381        .C      BICS     r1,r1,r0
        0x0080f59c:    f8c31220    .. .    STR      r1,[r3,#0x220]
        0x0080f5a0:    bd30        0.      POP      {r4,r5,pc}
;;;329                return;
;;;330            }
;;;331        }
;;;332    
;;;333        APBPeriph_Clock &= (~(0x03 << 29));
;;;334    
;;;335        if (NewState == ENABLE)
;;;336        {
;;;337            //enable peripheral clock
;;;338            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= APBPeriph_Clock;
        0x0080f5a2:    4302        .C      ORRS     r2,r2,r0
;;;339            //enable peripheral clock in sleep mode
;;;340            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= (APBPeriph_Clock << 1);
        0x0080f5a4:    ea420040    B.@.    ORR      r0,r2,r0,LSL #1
        0x0080f5a8:    e7ee        ..      B        0x80f588 ; RCC_PeriClockConfig + 72
    RCC_PeriFunctionConfig
        0x0080f5aa:    f3c06281    ...b    UBFX     r2,r0,#26,#2
        0x0080f5ae:    f04f4380    O..C    MOV      r3,#0x40000000
        0x0080f5b2:    2901        .)      CMP      r1,#1
;;;341        }
;;;342        else
;;;343        {
;;;344            //disable peripheral clock
;;;345            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~APBPeriph_Clock);
;;;346            //disable peripheral clock in sleep mode
;;;347            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~(APBPeriph_Clock << 1));
;;;348        }
;;;349    
;;;350        return;
;;;351    }
;;;352    
;;;353    /**
;;;354      * @brief  Enables or disables the APB peripheral clock.
;;;355      * @param  APBPeriph: specifies the APB peripheral to gates its clock.
;;;356      *      this parameter can be one of the following values:
;;;357      *     @arg APBPeriph_TIMER
;;;358      *     @arg APBPeriph_GDMA
;;;359      *     @arg APBPeriph_LCD
;;;360      *     @arg APBPeriph_SPI2W
;;;361      *     @arg APBPeriph_KEYSCAN
;;;362      *     @arg APBPeriph_QDEC
;;;363      *     @arg APBPeriph_I2C1
;;;364      *     @arg APBPeriph_I2C0
;;;365      *     @arg APBPeriph_IR
;;;366      *     @arg APBPeriph_SPI1
;;;367      *     @arg APBPeriph_SPI0
;;;368      *     @arg APBPeriph_UART0
;;;369      *     @arg APBPeriph_UART1
;;;370      *     @arg APBPeriph_UART2
;;;371      *     @arg APBPeriph_GPIO
;;;372      *     @arg APBPeriph_ADC
;;;373      *     @arg APBPeriph_I2S0
;;;374      *     @arg APBPeriph_I2S1
;;;375      *     @arg APBPeriph_CODEC
;;;376      * @param  NewState: new state of the specified peripheral clock.
;;;377      *   This parameter can be: ENABLE or DISABLE.
;;;378      * @retval None
;;;379      */
;;;380    void RCC_PeriFunctionConfig(uint32_t APBPeriph, FunctionalState NewState)
;;;381    {
        0x0080f5b4:    d006        ..      BEQ      0x80f5c4 ; RCC_PeriFunctionConfig + 26
        0x0080f5b6:    2802        .(      CMP      r0,#2
        0x0080f5b8:    d01c        ..      BEQ      0x80f5f4 ; RCC_PeriFunctionConfig + 74
        0x0080f5ba:    2804        .(      CMP      r0,#4
        0x0080f5bc:    d01a        ..      BEQ      0x80f5f4 ; RCC_PeriFunctionConfig + 74
        0x0080f5be:    2801        .(      CMP      r0,#1
        0x0080f5c0:    d018        ..      BEQ      0x80f5f4 ; RCC_PeriFunctionConfig + 74
        0x0080f5c2:    e005        ..      B        0x80f5d0 ; RCC_PeriFunctionConfig + 38
;;;382        /* Check the parameters */
;;;383        assert_param(IS_APB_PERIPH(APBPeriph));
;;;384        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;385    
;;;386        uint32_t apbRegOff = ((APBPeriph & (0x03 << 26)) >> 26);
;;;387    
;;;388        /* Special register handle */
;;;389        if (NewState == ENABLE)
;;;390        {
;;;391            if ((APBPeriph == APBPeriph_I2S0) || ((APBPeriph == APBPeriph_I2S1)) ||
        0x0080f5c4:    2802        .(      CMP      r0,#2
        0x0080f5c6:    d011        ..      BEQ      0x80f5ec ; RCC_PeriFunctionConfig + 66
        0x0080f5c8:    2804        .(      CMP      r0,#4
        0x0080f5ca:    d00f        ..      BEQ      0x80f5ec ; RCC_PeriFunctionConfig + 66
;;;392                (APBPeriph == APBPeriph_CODEC))
        0x0080f5cc:    2801        .(      CMP      r0,#1
        0x0080f5ce:    d00d        ..      BEQ      0x80f5ec ; RCC_PeriFunctionConfig + 66
        0x0080f5d0:    2901        .)      CMP      r1,#1
        0x0080f5d2:    ea4f0182    O...    LSL      r1,r2,#2
        0x0080f5d6:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x0080f5da:    f0206040     .@`    BIC      r0,r0,#0xc000000
        0x0080f5de:    f8d12210    ..."    LDR      r2,[r1,#0x210]
        0x0080f5e2:    d00d        ..      BEQ      0x80f600 ; RCC_PeriFunctionConfig + 86
        0x0080f5e4:    4382        .C      BICS     r2,r2,r0
        0x0080f5e6:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x0080f5ea:    4770        pG      BX       lr
;;;393            {
;;;394                SYSBLKCTRL->u_220 |= APBPeriph;
        0x0080f5ec:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x0080f5f0:    4301        .C      ORRS     r1,r1,r0
;;;395                return;
        0x0080f5f2:    e002        ..      B        0x80f5fa ; RCC_PeriFunctionConfig + 80
;;;396            }
;;;397        }
;;;398        else
;;;399        {
;;;400            if ((APBPeriph == APBPeriph_I2S0) || ((APBPeriph == APBPeriph_I2S1)) ||
;;;401                (APBPeriph == APBPeriph_CODEC))
;;;402            {
;;;403                SYSBLKCTRL->u_220 &= ~(APBPeriph);
        0x0080f5f4:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x0080f5f8:    4381        .C      BICS     r1,r1,r0
        0x0080f5fa:    f8c31220    .. .    STR      r1,[r3,#0x220]
        0x0080f5fe:    4770        pG      BX       lr
;;;404                return;
;;;405            }
;;;406        }
;;;407    
;;;408        /* clear flag */
;;;409        APBPeriph &= (~(0x03 << 26));
;;;410    
;;;411        if (NewState == ENABLE)
;;;412        {
;;;413            //enable peripheral
;;;414            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) |= APBPeriph;
        0x0080f600:    4302        .C      ORRS     r2,r2,r0
        0x0080f602:    e7f0        ..      B        0x80f5e6 ; RCC_PeriFunctionConfig + 60
    $d
        0x0080f604:    60010000    ...`    DCD    1610678272
        0x0080f608:    20004000    .@.     DCD    536887296
        0x0080f60c:    40013000    .0.@    DCD    1073819648
        0x0080f610:    40013400    .4.@    DCD    1073820672
        0x0080f614:    40015000    .P.@    DCD    1073827840
        0x0080f618:    40015400    .T.@    DCD    1073828864
        0x0080f61c:    40012000    . .@    DCD    1073815552
        0x0080f620:    40011000    ...@    DCD    1073811456
    $t
    .text
    ias_attr_write_cb
;;; .\..\include\SDK\src\ble\profile\server\ias.c
;;;96     {
        0x0080f624:    b57c        |.      PUSH     {r2-r6,lr}
        0x0080f626:    460d        .F      MOV      r5,r1
        0x0080f628:    4601        .F      MOV      r1,r0
        0x0080f62a:    e9dd0306    ....    LDRD     r0,r3,[sp,#0x18]
        0x0080f62e:    2400        .$      MOVS     r4,#0
;;; .\..\include\SDK\src\ble\profile\server\ias.c (96)
        0x0080f630:    b123        #.      CBZ      r3,0x80f63c ; ias_attr_write_cb + 24
        0x0080f632:    2a02        .*      CMP      r2,#2
        0x0080f634:    d00b        ..      BEQ      0x80f64e ; ias_attr_write_cb + 42
        0x0080f636:    f240440a    @..D    MOV      r4,#0x40a
        0x0080f63a:    e015        ..      B        0x80f668 ; ias_attr_write_cb + 68
;;;97         T_APP_RESULT cause  = APP_RESULT_SUCCESS;
;;;98         T_IAS_CALLBACK_DATA callback_data;
;;;99         if (!p_value)
;;;100        {
;;;101            PROFILE_PRINT_ERROR2("ias_attr_write_cb: p_value %p length= 0x%x", p_value, length);
        0x0080f63c:    9000        ..      STR      r0,[sp,#0]
        0x0080f63e:    2202        ."      MOVS     r2,#2
        0x0080f640:    491d        .I      LDR      r1,[pc,#116] ; [0x80f6b8] = 0x88001f4
        0x0080f642:    481e        .H      LDR      r0,[pc,#120] ; [0x80f6bc] = 0x21103300
        0x0080f644:    f7f8da0b    ....    BL       log_buffer ; 0x7a5e
;;;102            cause = APP_RESULT_INVALID_PDU;
        0x0080f648:    f2404004    @..@    MOV      r0,#0x404
        0x0080f64c:    bd7c        |.      POP      {r2-r6,pc}
;;;103            return cause;
;;;104        }
;;;105    
;;;106        switch (attrib_index)
;;;107        {
;;;108        default:
;;;109            cause = APP_RESULT_ATTR_NOT_FOUND;
;;;110            break;
;;;111    
;;;112        case GATT_SVC_PXP_IMMEDIATE_AlERT_VALUE_INDEX:
;;;113            if (length != sizeof(uint8_t))
        0x0080f64e:    2801        .(      CMP      r0,#1
        0x0080f650:    d002        ..      BEQ      0x80f658 ; ias_attr_write_cb + 52
;;;114            {
;;;115                cause = APP_RESULT_INVALID_VALUE_SIZE;
        0x0080f652:    f240440d    @..D    MOV      r4,#0x40d
        0x0080f656:    e007        ..      B        0x80f668 ; ias_attr_write_cb + 68
;;;116            }
;;;117            else
;;;118            {
;;;119                callback_data.conn_id = conn_id;
        0x0080f658:    f88d1004    ....    STRB     r1,[sp,#4]
;;;120                callback_data.msg_type = SERVICE_CALLBACK_TYPE_WRITE_CHAR_VALUE;
        0x0080f65c:    2003        .       MOVS     r0,#3
        0x0080f65e:    f88d0005    ....    STRB     r0,[sp,#5]
;;;121                callback_data.msg_data.write_alert_level = p_value[0];
        0x0080f662:    7818        .x      LDRB     r0,[r3,#0]
        0x0080f664:    f88d0006    ....    STRB     r0,[sp,#6]
;;;122            }
;;;123            break;
;;;124        }
;;;125        if (pfn_ias_cb && (cause == APP_RESULT_SUCCESS))
        0x0080f668:    4815        .H      LDR      r0,[pc,#84] ; [0x80f6c0] = 0x20802c
        0x0080f66a:    6802        .h      LDR      r2,[r0,#0]
        0x0080f66c:    b11a        ..      CBZ      r2,0x80f676 ; ias_attr_write_cb + 82
        0x0080f66e:    b914        ..      CBNZ     r4,0x80f676 ; ias_attr_write_cb + 82
;;;126        {
;;;127            pfn_ias_cb(service_id, (void *)&callback_data);
        0x0080f670:    a901        ..      ADD      r1,sp,#4
        0x0080f672:    4628        (F      MOV      r0,r5
        0x0080f674:    4790        .G      BLX      r2
;;;128        }
;;;129    
;;;130        return cause;
        0x0080f676:    4620         F      MOV      r0,r4
;;;131    }
        0x0080f678:    bd7c        |.      POP      {r2-r6,pc}
    ias_add_service
;;;132    
;;;133    /*********************************************************************
;;;134     * SERVICE CALLBACKS
;;;135     */
;;;136    // IAS related Service Callbacks
;;;137    const T_FUN_GATT_SERVICE_CBS ias_cbs =
;;;138    {
;;;139        NULL,  // Read callback function pointer
;;;140        ias_attr_write_cb, // Write callback function pointer
;;;141        NULL  // CCCD update callback function pointer
;;;142    };
;;;143    
;;;144    /**
;;;145      * @brief Add immediate alert service to the BLE stack database.
;;;146      *
;;;147      * @param[in]   p_func  Callback when service attribute was read, write or cccd update.
;;;148      * @return Service id generated by the BLE stack: @ref T_SERVER_ID.
;;;149      * @retval 0xFF Operation failure.
;;;150      * @retval others Service id assigned by stack.
;;;151      *
;;;152      * <b>Example usage</b>
;;;153      * \code{.c}
;;;154        void profile_init()
;;;155        {
;;;156            server_init(1);
;;;157            ias_id = ias_add_service(app_handle_profile_message);
;;;158        }
;;;159      * \endcode
;;;160      */
;;;161    T_SERVER_ID ias_add_service(void *p_func)
;;;162    {
        0x0080f67a:    b53e        >.      PUSH     {r1-r5,lr}
        0x0080f67c:    4604        .F      MOV      r4,r0
;;;163        T_SERVER_ID service_id;
;;;164        if (false == server_add_service(&service_id,
        0x0080f67e:    4811        .H      LDR      r0,[pc,#68] ; [0x80f6c4] = 0x810a0c
        0x0080f680:    e9d01216    ....    LDRD     r1,r2,[r0,#0x58]
        0x0080f684:    e9cd1200    ....    STRD     r1,r2,[sp,#0]
        0x0080f688:    4601        .F      MOV      r1,r0
        0x0080f68a:    6d43        Cm      LDR      r3,[r0,#0x54]
        0x0080f68c:    2254        T"      MOVS     r2,#0x54
        0x0080f68e:    a802        ..      ADD      r0,sp,#8
        0x0080f690:    f43ff7ed    ?...    BL       server_add_service ; 0x4f66e
        0x0080f694:    b950        P.      CBNZ     r0,0x80f6ac ; ias_add_service + 50
;;;165                                        (uint8_t *)ias_attr_tbl,
;;;166                                        ias_attr_tbl_size,
;;;167                                        ias_cbs))
;;;168        {
;;;169            PROFILE_PRINT_ERROR1("ias_add_service: service_id %d", service_id);
        0x0080f696:    4908        .I      LDR      r1,[pc,#32] ; [0x80f6b8] = 0x88001f4
        0x0080f698:    f89d3008    ...0    LDRB     r3,[sp,#8]
        0x0080f69c:    2201        ."      MOVS     r2,#1
        0x0080f69e:    3130        01      ADDS     r1,r1,#0x30
        0x0080f6a0:    4806        .H      LDR      r0,[pc,#24] ; [0x80f6bc] = 0x21103300
        0x0080f6a2:    f7f8d9dc    ....    BL       log_buffer ; 0x7a5e
;;;170            service_id = 0xff;
        0x0080f6a6:    20ff        .       MOVS     r0,#0xff
        0x0080f6a8:    f88d0008    ....    STRB     r0,[sp,#8]
;;;171        }
;;;172    
;;;173        pfn_ias_cb = (P_FUN_SERVER_GENERAL_CB)p_func;
        0x0080f6ac:    4804        .H      LDR      r0,[pc,#16] ; [0x80f6c0] = 0x20802c
;;;174        return service_id;
        0x0080f6ae:    6004        .`      STR      r4,[r0,#0]
        0x0080f6b0:    f89d0008    ....    LDRB     r0,[sp,#8]
;;;175    }
        0x0080f6b4:    bd3e        >.      POP      {r1-r5,pc}
    $d
        0x0080f6b6:    0000        ..      DCW    0
        0x0080f6b8:    088001f4    ....    DCD    142606836
        0x0080f6bc:    21103300    .3.!    DCD    554709760
        0x0080f6c0:    0020802c    ,. .    DCD    2129964
        0x0080f6c4:    00810a0c    ....    DCD    8456716
    $t
    .text
    lls_set_parameter
;;; .\..\include\SDK\src\ble\profile\server\lls.c
;;;102    {
        0x0080f6c8:    b510        ..      PUSH     {r4,lr}
        0x0080f6ca:    2401        .$      MOVS     r4,#1
;;; .\..\include\SDK\src\ble\profile\server\lls.c (102)
        0x0080f6cc:    b130        0.      CBZ      r0,0x80f6dc ; lls_set_parameter + 20
;;;103        bool ret = true;
;;;104    
;;;105        switch (param_type)
;;;106        {
;;;107        default:
;;;108            ret = false;
        0x0080f6ce:    2400        .$      MOVS     r4,#0
        0x0080f6d0:    4622        "F      MOV      r2,r4
        0x0080f6d2:    4942        BI      LDR      r1,[pc,#264] ; [0x80f7dc] = 0x8800248
        0x0080f6d4:    4842        BH      LDR      r0,[pc,#264] ; [0x80f7e0] = 0x21103300
        0x0080f6d6:    f7f8d9c2    ....    BL       log_buffer ; 0x7a5e
;;;109            break;
        0x0080f6da:    e002        ..      B        0x80f6e2 ; lls_set_parameter + 26
;;;110        case LLS_PARAM_LINK_LOSS_ALERT_LEVEL:
;;;111            lls_alert_level = *(uint8_t *)p_value;
        0x0080f6dc:    4941        AI      LDR      r1,[pc,#260] ; [0x80f7e4] = 0x208030
        0x0080f6de:    7810        .x      LDRB     r0,[r2,#0]
        0x0080f6e0:    7008        .p      STRB     r0,[r1,#0]
;;;112            break;
;;;113        }
;;;114    
;;;115        if (!ret)
;;;116        {
;;;117            PROFILE_PRINT_ERROR0("lls_set_parameter: lls alert level parameter set failed");
;;;118        }
;;;119    
;;;120        return ret;
        0x0080f6e2:    4620         F      MOV      r0,r4
;;;121    }
        0x0080f6e4:    bd10        ..      POP      {r4,pc}
    lls_attr_read_cb
;;;122    
;;;123    
;;;124    /**
;;;125     * @brief read characteristic data from service.
;;;126     *
;;;127     * @param conn_id           connection id.
;;;128     * @param service_id        ServiceID to be read.
;;;129     * @param attrib_index      Attribute index of getting characteristic data.
;;;130     * @param offset            offset of characteritic to be read.
;;;131     * @param p_length          length of getting characteristic data.
;;;132     * @param pp_value          pointer to pointer of characteristic value to be read.
;;;133     * @return T_APP_RESULT
;;;134    */
;;;135    T_APP_RESULT lls_attr_read_cb(uint8_t conn_id, uint8_t service_id, uint16_t attrib_index,
;;;136                                  uint16_t offset, uint16_t *p_length, uint8_t **pp_value)
;;;137    {
        0x0080f6e6:    e92d47fc    -..G    PUSH     {r2-r10,lr}
        0x0080f6ea:    2500        .%      MOVS     r5,#0
        0x0080f6ec:    e9dd690a    ...i    LDRD     r6,r9,[sp,#0x28]
        0x0080f6f0:    460b        .F      MOV      r3,r1
        0x0080f6f2:    8035        5.      STRH     r5,[r6,#0]
        0x0080f6f4:    2a02        .*      CMP      r2,#2
        0x0080f6f6:    d009        ..      BEQ      0x80f70c ; lls_attr_read_cb + 38
;;;138        T_APP_RESULT cause = APP_RESULT_SUCCESS;
;;;139        *p_length = 0;
;;;140        T_LLS_CALLBACK_DATA callback_data;
;;;141    
;;;142        switch (attrib_index)
;;;143        {
;;;144        default:
;;;145            PROFILE_PRINT_ERROR1("lls_attr_read_cb default:attrib_index %d", attrib_index);
        0x0080f6f8:    4938        8I      LDR      r1,[pc,#224] ; [0x80f7dc] = 0x8800248
        0x0080f6fa:    4613        .F      MOV      r3,r2
        0x0080f6fc:    2201        ."      MOVS     r2,#1
        0x0080f6fe:    313c        <1      ADDS     r1,r1,#0x3c
        0x0080f700:    4837        7H      LDR      r0,[pc,#220] ; [0x80f7e0] = 0x21103300
        0x0080f702:    f7f8d9ac    ....    BL       log_buffer ; 0x7a5e
;;;146            cause = APP_RESULT_ATTR_NOT_FOUND;
        0x0080f706:    f240450a    @..E    MOV      r5,#0x40a
;;;147            break;
        0x0080f70a:    e01a        ..      B        0x80f742 ; lls_attr_read_cb + 92
        0x0080f70c:    2702        .'      MOVS     r7,#2
;;;148    
;;;149        case GATT_SVC_PXP_LINK_LOSS_ALERT_LEVEL_INDEX:
;;;150            callback_data.conn_id = conn_id;
        0x0080f70e:    f88d0004    ....    STRB     r0,[sp,#4]
        0x0080f712:    f8df80d0    ....    LDR      r8,[pc,#208] ; [0x80f7e4] = 0x208030
;;;151            callback_data.msg_type = SERVICE_CALLBACK_TYPE_READ_CHAR_VALUE;
        0x0080f716:    f88d7005    ...p    STRB     r7,[sp,#5]
;;;152            callback_data.msg_data.read_value_index = LLS_READ_ALERT_LEVEL;
        0x0080f71a:    2401        .$      MOVS     r4,#1
        0x0080f71c:    f88d4006    ...@    STRB     r4,[sp,#6]
;;;153            pfn_lls_cb(service_id, (void *)&callback_data);
        0x0080f720:    f8d82004    ...     LDR      r2,[r8,#4]
        0x0080f724:    a901        ..      ADD      r1,sp,#4
        0x0080f726:    4618        .F      MOV      r0,r3
        0x0080f728:    4790        .G      BLX      r2
;;;154            *pp_value = (uint8_t *)&lls_alert_level;
;;;155            *p_length = sizeof(lls_alert_level);
        0x0080f72a:    f8c98000    ....    STR      r8,[r9,#0]
        0x0080f72e:    492b        +I      LDR      r1,[pc,#172] ; [0x80f7dc] = 0x8800248
        0x0080f730:    482b        +H      LDR      r0,[pc,#172] ; [0x80f7e0] = 0x21103300
        0x0080f732:    8034        4.      STRH     r4,[r6,#0]
;;;156            PROFILE_PRINT_INFO2("lls_attr_read_cb: attrib_index %d, length %d", attrib_index, *p_length);
        0x0080f734:    463b        ;F      MOV      r3,r7
        0x0080f736:    2202        ."      MOVS     r2,#2
        0x0080f738:    3168        h1      ADDS     r1,r1,#0x68
        0x0080f73a:    1c80        ..      ADDS     r0,r0,#2
        0x0080f73c:    9400        ..      STR      r4,[sp,#0]
        0x0080f73e:    f7f8d98e    ....    BL       log_buffer ; 0x7a5e
;;;157            break;
;;;158        }
;;;159    
;;;160        return (cause);
        0x0080f742:    4628        (F      MOV      r0,r5
;;;161    }
        0x0080f744:    e8bd87fc    ....    POP      {r2-r10,pc}
    lls_attr_write_cb
;;;162    
;;;163    /**
;;;164     * @brief write characteristic data from service.
;;;165     *
;;;166     * @param conn_id               connection id.
;;;167     * @param service_id            ServiceID to be written.
;;;168     * @param attrib_index          Attribute index of characteristic.
;;;169     * @param length                length of writing characteristic data.
;;;170     * @param p_value               pointer to characteristic data.
;;;171     * @param p_write_ind_post_proc function pointer called after lls_attr_write_cb.
;;;172     * @return T_APP_RESULT
;;;173    */
;;;174    T_APP_RESULT lls_attr_write_cb(uint8_t conn_id, uint8_t service_id, uint16_t attrib_index,
;;;175                                   T_WRITE_TYPE write_type,
;;;176                                   uint16_t length, uint8_t *p_value, P_FUN_WRITE_IND_POST_PROC *p_write_ind_post_proc)
;;;177    {
        0x0080f748:    b57c        |.      PUSH     {r2-r6,lr}
        0x0080f74a:    460d        .F      MOV      r5,r1
        0x0080f74c:    4601        .F      MOV      r1,r0
        0x0080f74e:    e9dd0306    ....    LDRD     r0,r3,[sp,#0x18]
        0x0080f752:    2400        .$      MOVS     r4,#0
;;; .\..\include\SDK\src\ble\profile\server\lls.c (177)
        0x0080f754:    b123        #.      CBZ      r3,0x80f760 ; lls_attr_write_cb + 24
        0x0080f756:    2a02        .*      CMP      r2,#2
        0x0080f758:    d00c        ..      BEQ      0x80f774 ; lls_attr_write_cb + 44
        0x0080f75a:    f240440a    @..D    MOV      r4,#0x40a
        0x0080f75e:    e016        ..      B        0x80f78e ; lls_attr_write_cb + 70
;;;178        T_APP_RESULT  cause = APP_RESULT_SUCCESS;
;;;179        T_LLS_CALLBACK_DATA callback_data;
;;;180        if (!p_value)
;;;181        {
;;;182            PROFILE_PRINT_ERROR2("lls_attr_write_cb: p_value %p, length 0x%x", p_value, length);
        0x0080f760:    491e        .I      LDR      r1,[pc,#120] ; [0x80f7dc] = 0x8800248
        0x0080f762:    9000        ..      STR      r0,[sp,#0]
        0x0080f764:    2202        ."      MOVS     r2,#2
        0x0080f766:    3198        .1      ADDS     r1,r1,#0x98
        0x0080f768:    481d        .H      LDR      r0,[pc,#116] ; [0x80f7e0] = 0x21103300
        0x0080f76a:    f7f8d978    ..x.    BL       log_buffer ; 0x7a5e
;;;183            cause = APP_RESULT_INVALID_PDU;
        0x0080f76e:    f2404004    @..@    MOV      r0,#0x404
        0x0080f772:    bd7c        |.      POP      {r2-r6,pc}
;;;184            return cause;
;;;185        }
;;;186    
;;;187        switch (attrib_index)
;;;188        {
;;;189        default:
;;;190            cause = APP_RESULT_ATTR_NOT_FOUND;
;;;191            break;
;;;192        case GATT_SVC_PXP_LINK_LOSS_ALERT_LEVEL_INDEX:
;;;193            if (length != sizeof(uint8_t))
        0x0080f774:    2801        .(      CMP      r0,#1
        0x0080f776:    d002        ..      BEQ      0x80f77e ; lls_attr_write_cb + 54
;;;194            {
;;;195                cause = APP_RESULT_INVALID_VALUE_SIZE;
        0x0080f778:    f240440d    @..D    MOV      r4,#0x40d
        0x0080f77c:    e007        ..      B        0x80f78e ; lls_attr_write_cb + 70
;;;196            }
;;;197            else
;;;198            {
;;;199                callback_data.conn_id = conn_id;
        0x0080f77e:    f88d1004    ....    STRB     r1,[sp,#4]
;;;200                callback_data.msg_type = SERVICE_CALLBACK_TYPE_WRITE_CHAR_VALUE;
        0x0080f782:    2003        .       MOVS     r0,#3
        0x0080f784:    f88d0005    ....    STRB     r0,[sp,#5]
;;;201                callback_data.msg_data.write_alert_level = p_value[0];
        0x0080f788:    7818        .x      LDRB     r0,[r3,#0]
        0x0080f78a:    f88d0006    ....    STRB     r0,[sp,#6]
;;;202            }
;;;203            break;
;;;204    
;;;205        }
;;;206        if (pfn_lls_cb && (cause == APP_RESULT_SUCCESS))
        0x0080f78e:    4815        .H      LDR      r0,[pc,#84] ; [0x80f7e4] = 0x208030
        0x0080f790:    6842        Bh      LDR      r2,[r0,#4]
        0x0080f792:    b11a        ..      CBZ      r2,0x80f79c ; lls_attr_write_cb + 84
        0x0080f794:    b914        ..      CBNZ     r4,0x80f79c ; lls_attr_write_cb + 84
;;;207        {
;;;208            pfn_lls_cb(service_id, (void *)&callback_data);
        0x0080f796:    a901        ..      ADD      r1,sp,#4
        0x0080f798:    4628        (F      MOV      r0,r5
        0x0080f79a:    4790        .G      BLX      r2
;;;209        }
;;;210    
;;;211        return cause;
        0x0080f79c:    4620         F      MOV      r0,r4
;;;212    
;;;213    }
        0x0080f79e:    bd7c        |.      POP      {r2-r6,pc}
    lls_add_service
;;;214    
;;;215    
;;;216    // LLS related Service Callbacks
;;;217    const T_FUN_GATT_SERVICE_CBS lls_cbs =
;;;218    {
;;;219        lls_attr_read_cb,   // Read callback function pointer
;;;220        lls_attr_write_cb,  // Write callback function pointer
;;;221        NULL                // CCCD update callback function pointer
;;;222    };
;;;223    
;;;224    /**
;;;225      * @brief Add link loss service to the BLE stack database.
;;;226      *
;;;227      * @param[in]   p_func  Callback when service attribute was read, write or cccd update.
;;;228      * @return Service id generated by the BLE stack: @ref T_SERVER_ID.
;;;229      * @retval 0xFF Operation failure.
;;;230      * @retval others Service id assigned by stack.
;;;231      *
;;;232      * <b>Example usage</b>
;;;233      * \code{.c}
;;;234        void profile_init()
;;;235        {
;;;236            server_init(1);
;;;237            lls_id = lls_add_service(app_handle_profile_message);
;;;238        }
;;;239      * \endcode
;;;240      */
;;;241    T_SERVER_ID lls_add_service(void *p_func)
;;;242    {
        0x0080f7a0:    b53e        >.      PUSH     {r1-r5,lr}
        0x0080f7a2:    4604        .F      MOV      r4,r0
;;;243        T_SERVER_ID service_id;
;;;244        if (false == server_add_service(&service_id,
        0x0080f7a4:    4810        .H      LDR      r0,[pc,#64] ; [0x80f7e8] = 0x810a6c
        0x0080f7a6:    e9d01216    ....    LDRD     r1,r2,[r0,#0x58]
        0x0080f7aa:    e9cd1200    ....    STRD     r1,r2,[sp,#0]
        0x0080f7ae:    4601        .F      MOV      r1,r0
        0x0080f7b0:    6d43        Cm      LDR      r3,[r0,#0x54]
        0x0080f7b2:    2254        T"      MOVS     r2,#0x54
        0x0080f7b4:    a802        ..      ADD      r0,sp,#8
        0x0080f7b6:    f43ff75a    ?.Z.    BL       server_add_service ; 0x4f66e
        0x0080f7ba:    b950        P.      CBNZ     r0,0x80f7d2 ; lls_add_service + 50
;;;245                                        (uint8_t *)lls_attr_tbl,
;;;246                                        lls_attr_tbl_size,
;;;247                                        lls_cbs))
;;;248        {
;;;249            PROFILE_PRINT_ERROR1("lls_add_service: service_id %d", service_id);
        0x0080f7bc:    4907        .I      LDR      r1,[pc,#28] ; [0x80f7dc] = 0x8800248
        0x0080f7be:    f89d3008    ...0    LDRB     r3,[sp,#8]
        0x0080f7c2:    2201        ."      MOVS     r2,#1
        0x0080f7c4:    31c8        .1      ADDS     r1,r1,#0xc8
        0x0080f7c6:    4806        .H      LDR      r0,[pc,#24] ; [0x80f7e0] = 0x21103300
        0x0080f7c8:    f7f8d949    ..I.    BL       log_buffer ; 0x7a5e
;;;250            service_id = 0xff;
        0x0080f7cc:    20ff        .       MOVS     r0,#0xff
        0x0080f7ce:    f88d0008    ....    STRB     r0,[sp,#8]
;;;251        }
;;;252    
;;;253        pfn_lls_cb = (P_FUN_SERVER_GENERAL_CB)p_func;
        0x0080f7d2:    4804        .H      LDR      r0,[pc,#16] ; [0x80f7e4] = 0x208030
;;;254        return service_id;
        0x0080f7d4:    6044        D`      STR      r4,[r0,#4]
        0x0080f7d6:    f89d0008    ....    LDRB     r0,[sp,#8]
;;;255    }
        0x0080f7da:    bd3e        >.      POP      {r1-r5,pc}
    $d
        0x0080f7dc:    08800248    H...    DCD    142606920
        0x0080f7e0:    21103300    .3.!    DCD    554709760
        0x0080f7e4:    00208030    0. .    DCD    2129968
        0x0080f7e8:    00810a6c    l...    DCD    8456812
    $t
    .text
    tps_set_parameter
;;; .\..\include\SDK\src\ble\profile\server\tps.c
;;;105    {
        0x0080f7ec:    b510        ..      PUSH     {r4,lr}
        0x0080f7ee:    2401        .$      MOVS     r4,#1
;;; .\..\include\SDK\src\ble\profile\server\tps.c (105)
        0x0080f7f0:    b130        0.      CBZ      r0,0x80f800 ; tps_set_parameter + 20
;;;106        bool ret = true;
;;;107    
;;;108        switch (param_type)
;;;109        {
;;;110        default:
;;;111            /* invalid param to set. */
;;;112            ret = false;
        0x0080f7f2:    2400        .$      MOVS     r4,#0
        0x0080f7f4:    4622        "F      MOV      r2,r4
        0x0080f7f6:    492c        ,I      LDR      r1,[pc,#176] ; [0x80f8a8] = 0x8800334
        0x0080f7f8:    482c        ,H      LDR      r0,[pc,#176] ; [0x80f8ac] = 0x21103300
        0x0080f7fa:    f7f8d930    ..0.    BL       log_buffer ; 0x7a5e
;;;113            break;
        0x0080f7fe:    e002        ..      B        0x80f806 ; tps_set_parameter + 26
;;;114    
;;;115        case TPS_PARAM_TX_POWER:
;;;116            tx_power_value = *(uint8_t *)p_value;
        0x0080f800:    492b        +I      LDR      r1,[pc,#172] ; [0x80f8b0] = 0x208038
        0x0080f802:    7810        .x      LDRB     r0,[r2,#0]
        0x0080f804:    7008        .p      STRB     r0,[r1,#0]
;;;117            break;
;;;118        }
;;;119    
;;;120        if (!ret)
;;;121        {
;;;122            PROFILE_PRINT_ERROR0("tps_set_parameter: TPS parameter set failed");
;;;123        }
;;;124    
;;;125        return ret;
        0x0080f806:    4620         F      MOV      r0,r4
;;;126    }
        0x0080f808:    bd10        ..      POP      {r4,pc}
    tps_attr_read_cb
;;;127    
;;;128    
;;;129    /**
;;;130     * @brief read characteristic data from service.
;;;131     *
;;;132     * @param[in] conn_id   Connection id.
;;;133     * @param[in] service_id          ServiceID to be read.
;;;134     * @param[in] attrib_index          Attribute index of getting characteristic data.
;;;135     * @param[in] offset                offset of characteritic to be read.
;;;136     * @param[in,out] length_ptr            length of getting characteristic data.
;;;137     * @param[in,out] pp_value            pointer to pointer of characteristic value to be read.
;;;138     * @return TProfileResult
;;;139    */
;;;140    T_APP_RESULT tps_attr_read_cb(uint8_t conn_id, uint8_t service_id, uint16_t attrib_index,
;;;141                                  uint16_t offset, uint16_t *length_ptr, uint8_t **pp_value)
;;;142    {
        0x0080f80a:    e92d47fc    -..G    PUSH     {r2-r10,lr}
        0x0080f80e:    2500        .%      MOVS     r5,#0
        0x0080f810:    e9dd490a    ...I    LDRD     r4,r9,[sp,#0x28]
        0x0080f814:    4690        .F      MOV      r8,r2
        0x0080f816:    460b        .F      MOV      r3,r1
        0x0080f818:    8025        %.      STRH     r5,[r4,#0]
        0x0080f81a:    2a02        .*      CMP      r2,#2
        0x0080f81c:    d009        ..      BEQ      0x80f832 ; tps_attr_read_cb + 40
;;;143        T_APP_RESULT  cause  = APP_RESULT_SUCCESS;
;;;144        *length_ptr = 0;
;;;145        T_TPS_CALLBACK_DATA callback_data;
;;;146        switch (attrib_index)
;;;147        {
;;;148        default:
;;;149            PROFILE_PRINT_ERROR1("tps_attr_read_cb: attrib_index %d", attrib_index);
        0x0080f81e:    4922        "I      LDR      r1,[pc,#136] ; [0x80f8a8] = 0x8800334
        0x0080f820:    4613        .F      MOV      r3,r2
        0x0080f822:    2201        ."      MOVS     r2,#1
        0x0080f824:    3130        01      ADDS     r1,r1,#0x30
        0x0080f826:    4821        !H      LDR      r0,[pc,#132] ; [0x80f8ac] = 0x21103300
        0x0080f828:    f7f8d919    ....    BL       log_buffer ; 0x7a5e
;;;150            cause = APP_RESULT_ATTR_NOT_FOUND;
        0x0080f82c:    f240450a    @..E    MOV      r5,#0x40a
;;;151            break;
        0x0080f830:    e00f        ..      B        0x80f852 ; tps_attr_read_cb + 72
;;;152    
;;;153        case TPS_TX_POWER_VALUE_INDEX:
;;;154            callback_data.conn_id = conn_id;
        0x0080f832:    f88d0004    ....    STRB     r0,[sp,#4]
;;;155            callback_data.msg_type = SERVICE_CALLBACK_TYPE_READ_CHAR_VALUE;
        0x0080f836:    2002        .       MOVS     r0,#2
        0x0080f838:    4e1d        .N      LDR      r6,[pc,#116] ; [0x80f8b0] = 0x208038
        0x0080f83a:    f88d0005    ....    STRB     r0,[sp,#5]
;;;156            callback_data.msg_data.read_value_index = TPS_READ_TX_POWER_VALUE;
        0x0080f83e:    2701        .'      MOVS     r7,#1
        0x0080f840:    f88d7006    ...p    STRB     r7,[sp,#6]
;;;157            pfn_tps_cb(service_id, (void *)&callback_data);
        0x0080f844:    6872        rh      LDR      r2,[r6,#4]
        0x0080f846:    a901        ..      ADD      r1,sp,#4
        0x0080f848:    4618        .F      MOV      r0,r3
        0x0080f84a:    4790        .G      BLX      r2
;;;158    
;;;159            *pp_value   = (uint8_t *)&tx_power_value;
;;;160            *length_ptr = sizeof(tx_power_value);
        0x0080f84c:    f8c96000    ...`    STR      r6,[r9,#0]
        0x0080f850:    8027        '.      STRH     r7,[r4,#0]
;;;161            break;
;;;162        }
;;;163    
;;;164        PROFILE_PRINT_INFO2("tps_attr_read_cb: attrib_index %d, *length_ptr %d", attrib_index, *length_ptr);
        0x0080f852:    8820         .      LDRH     r0,[r4,#0]
        0x0080f854:    9000        ..      STR      r0,[sp,#0]
        0x0080f856:    4914        .I      LDR      r1,[pc,#80] ; [0x80f8a8] = 0x8800334
        0x0080f858:    4814        .H      LDR      r0,[pc,#80] ; [0x80f8ac] = 0x21103300
        0x0080f85a:    4643        CF      MOV      r3,r8
        0x0080f85c:    2202        ."      MOVS     r2,#2
        0x0080f85e:    3158        X1      ADDS     r1,r1,#0x58
        0x0080f860:    1c80        ..      ADDS     r0,r0,#2
        0x0080f862:    f7f8d8fc    ....    BL       log_buffer ; 0x7a5e
;;;165    
;;;166        return (cause);
        0x0080f866:    4628        (F      MOV      r0,r5
;;;167    }
        0x0080f868:    e8bd87fc    ....    POP      {r2-r10,pc}
    tps_add_service
;;;168    
;;;169    
;;;170    // TPS related Service Callbacks
;;;171    const T_FUN_GATT_SERVICE_CBS tps_cbs =
;;;172    {
;;;173        tps_attr_read_cb,  // Read callback function pointer
;;;174        NULL,           // Write callback function pointer
;;;175        NULL            // CCCD update callback function pointer
;;;176    };
;;;177    
;;;178    /**
;;;179      * @brief Add tx power service to the BLE stack database.
;;;180      *
;;;181      * @param[in]   p_func  Callback when service attribute was read, write or cccd update.
;;;182      * @return Service id generated by the BLE stack: @ref T_SERVER_ID.
;;;183      * @retval 0xFF Operation failure.
;;;184      * @retval others Service id assigned by stack.
;;;185      *
;;;186      * <b>Example usage</b>
;;;187      * \code{.c}
;;;188         void profile_init()
;;;189         {
;;;190             server_init(1);
;;;191             tps_id = tps_add_service(app_handle_profile_message);
;;;192         }
;;;193      * \endcode
;;;194      */
;;;195    T_SERVER_ID tps_add_service(void *p_func)
;;;196    {
        0x0080f86c:    b53e        >.      PUSH     {r1-r5,lr}
        0x0080f86e:    4604        .F      MOV      r4,r0
;;;197        T_SERVER_ID service_id;
;;;198        if (false == server_add_service(&service_id,
        0x0080f870:    4810        .H      LDR      r0,[pc,#64] ; [0x80f8b4] = 0x810acc
        0x0080f872:    e9d01216    ....    LDRD     r1,r2,[r0,#0x58]
        0x0080f876:    e9cd1200    ....    STRD     r1,r2,[sp,#0]
        0x0080f87a:    4601        .F      MOV      r1,r0
        0x0080f87c:    6d43        Cm      LDR      r3,[r0,#0x54]
        0x0080f87e:    2254        T"      MOVS     r2,#0x54
        0x0080f880:    a802        ..      ADD      r0,sp,#8
        0x0080f882:    f43ff6f4    ?...    BL       server_add_service ; 0x4f66e
        0x0080f886:    b950        P.      CBNZ     r0,0x80f89e ; tps_add_service + 50
;;;199                                        (uint8_t *)tps_attr_tbl,
;;;200                                        tps_attr_tbl_size,
;;;201                                        tps_cbs))
;;;202        {
;;;203            PROFILE_PRINT_ERROR1("tps_add_service: service_id %d", service_id);
        0x0080f888:    4907        .I      LDR      r1,[pc,#28] ; [0x80f8a8] = 0x8800334
        0x0080f88a:    f89d3008    ...0    LDRB     r3,[sp,#8]
        0x0080f88e:    2201        ."      MOVS     r2,#1
        0x0080f890:    3190        .1      ADDS     r1,r1,#0x90
        0x0080f892:    4806        .H      LDR      r0,[pc,#24] ; [0x80f8ac] = 0x21103300
        0x0080f894:    f7f8d8e3    ....    BL       log_buffer ; 0x7a5e
;;;204            service_id = 0xff;
        0x0080f898:    20ff        .       MOVS     r0,#0xff
        0x0080f89a:    f88d0008    ....    STRB     r0,[sp,#8]
;;;205        }
;;;206    
;;;207        pfn_tps_cb = (P_FUN_SERVER_GENERAL_CB)p_func;
        0x0080f89e:    4804        .H      LDR      r0,[pc,#16] ; [0x80f8b0] = 0x208038
;;;208        return service_id;
        0x0080f8a0:    6044        D`      STR      r4,[r0,#4]
        0x0080f8a2:    f89d0008    ....    LDRB     r0,[sp,#8]
;;;209    }
        0x0080f8a6:    bd3e        >.      POP      {r1-r5,pc}
    $d
        0x0080f8a8:    08800334    4...    DCD    142607156
        0x0080f8ac:    21103300    .3.!    DCD    554709760
        0x0080f8b0:    00208038    8. .    DCD    2129976
        0x0080f8b4:    00810acc    ....    DCD    8456908
    $t
    .text
    bas_set_parameter
;;; .\..\include\SDK\src\ble\profile\server\bas.c
;;;137    {
        0x0080f8b8:    b510        ..      PUSH     {r4,lr}
        0x0080f8ba:    2401        .$      MOVS     r4,#1
        0x0080f8bc:    2801        .(      CMP      r0,#1
;;; .\..\include\SDK\src\ble\profile\server\bas.c (137)
        0x0080f8be:    d006        ..      BEQ      0x80f8ce ; bas_set_parameter + 22
;;;138        bool ret = true;
;;;139    
;;;140        switch (param_type)
;;;141        {
;;;142        default:
;;;143            {
;;;144                ret = false;
        0x0080f8c0:    2400        .$      MOVS     r4,#0
;;;145                PROFILE_PRINT_ERROR0("bas_set_parameter failed");
        0x0080f8c2:    4622        "F      MOV      r2,r4
        0x0080f8c4:    4953        SI      LDR      r1,[pc,#332] ; [0x80fa14] = 0x88003e8
        0x0080f8c6:    4854        TH      LDR      r0,[pc,#336] ; [0x80fa18] = 0x21103300
        0x0080f8c8:    f7f8d8c9    ....    BL       log_buffer ; 0x7a5e
;;;146            }
;;;147            break;
        0x0080f8cc:    e006        ..      B        0x80f8dc ; bas_set_parameter + 36
;;;148    
;;;149        case BAS_PARAM_BATTERY_LEVEL:
;;;150            {
;;;151                if (length != sizeof(uint8_t))
        0x0080f8ce:    2901        .)      CMP      r1,#1
        0x0080f8d0:    d001        ..      BEQ      0x80f8d6 ; bas_set_parameter + 30
;;;152                {
;;;153                    ret = false;
        0x0080f8d2:    2400        .$      MOVS     r4,#0
        0x0080f8d4:    e002        ..      B        0x80f8dc ; bas_set_parameter + 36
;;;154                }
;;;155                else
;;;156                {
;;;157                    battery_level = p_value[0];
        0x0080f8d6:    4951        QI      LDR      r1,[pc,#324] ; [0x80fa1c] = 0x208040
        0x0080f8d8:    7810        .x      LDRB     r0,[r2,#0]
        0x0080f8da:    7008        .p      STRB     r0,[r1,#0]
;;;158                }
;;;159            }
;;;160            break;
;;;161        }
;;;162    
;;;163        return ret;
        0x0080f8dc:    4620         F      MOV      r0,r4
;;;164    }
        0x0080f8de:    bd10        ..      POP      {r4,pc}
    bas_battery_level_value_notify
;;;165    
;;;166    /**
;;;167     * @brief       Send notify battery level notification data .
;;;168     *
;;;169     * @param[in]   conn_id  Connection id.
;;;170     * @param[in]   service_id  Service id.
;;;171     * @param[in]   battery_level  Battery level value.
;;;172     * @return Operation result.
;;;173     * @retval true Operation success.
;;;174     * @retval false Operation failure.
;;;175     *
;;;176     * <b>Example usage</b>
;;;177     * \code{.c}
;;;178        void test(void)
;;;179        {
;;;180            uint8_t battery_level = 90;
;;;181            bas_battery_level_value_notify(conn_id, bas_id, battery_level);
;;;182        }
;;;183     * \endcode
;;;184     */
;;;185    bool bas_battery_level_value_notify(uint8_t conn_id, uint8_t service_id, uint8_t battery_level)
;;;186    {
        0x0080f8e0:    b507        ..      PUSH     {r0-r2,lr}
        0x0080f8e2:    b082        ..      SUB      sp,sp,#8
;;;187        return server_send_data(conn_id, service_id, GATT_SVC_BAS_BATTERY_LEVEL_INDEX, &battery_level,
        0x0080f8e4:    2300        .#      MOVS     r3,#0
        0x0080f8e6:    2201        ."      MOVS     r2,#1
        0x0080f8e8:    e9cd2300    ...#    STRD     r2,r3,[sp,#0]
        0x0080f8ec:    ab04        ..      ADD      r3,sp,#0x10
        0x0080f8ee:    2202        ."      MOVS     r2,#2
        0x0080f8f0:    f43ff758    ?.X.    BL       server_send_data ; 0x4f7a4
;;;188                                sizeof(battery_level), GATT_PDU_TYPE_ANY);
;;;189    }
        0x0080f8f4:    b005        ..      ADD      sp,sp,#0x14
        0x0080f8f6:    bd00        ..      POP      {pc}
    bas_battery_level_value_read_confirm
;;;190    
;;;191    /**
;;;192     * @brief       Confirm for read battery level value request.
;;;193     *
;;;194     * @param[in]   conn_id  Callback when service attribute was read/write.
;;;195     * @param[in]   service_id  Callback when service attribute was read/write.
;;;196     * @param[in]   battery_level  Callback when service attribute was read/write.
;;;197     * @return Operation result.
;;;198     * @retval true Operation success.
;;;199     * @retval false Operation failure.
;;;200     *
;;;201     * <b>Example usage</b>
;;;202     * \code{.c}
;;;203        void test(void)
;;;204        {
;;;205            uint8_t battery_level = 90;
;;;206            bas_battery_level_value_read_confirm(conn_id, bas_id, battery_level);
;;;207        }
;;;208     * \endcode
;;;209     */
;;;210    bool bas_battery_level_value_read_confirm(uint8_t conn_id, uint8_t service_id,
;;;211                                              uint8_t battery_level)
;;;212    {
        0x0080f8f8:    b507        ..      PUSH     {r0-r2,lr}
        0x0080f8fa:    4b48        HK      LDR      r3,[pc,#288] ; [0x80fa1c] = 0x208040
;;; .\..\include\SDK\src\ble\profile\server\bas.c (212)
        0x0080f8fc:    b082        ..      SUB      sp,sp,#8
        0x0080f8fe:    785a        Zx      LDRB     r2,[r3,#1]
        0x0080f900:    b14a        J.      CBZ      r2,0x80f916 ; bas_battery_level_value_read_confirm + 30
;;;213        if (bas_read_battery_level_pending == true)
;;;214        {
;;;215            bas_read_battery_level_pending = false;
        0x0080f902:    2200        ."      MOVS     r2,#0
        0x0080f904:    705a        Zp      STRB     r2,[r3,#1]
;;;216            return server_attr_read_confirm(conn_id, service_id, GATT_SVC_BAS_BATTERY_LEVEL_INDEX,
        0x0080f906:    2301        .#      MOVS     r3,#1
        0x0080f908:    e9cd3200    ...2    STRD     r3,r2,[sp,#0]
        0x0080f90c:    ab04        ..      ADD      r3,sp,#0x10
        0x0080f90e:    2202        ."      MOVS     r2,#2
        0x0080f910:    f43ff6bf    ?...    BL       server_attr_read_confirm ; 0x4f692
        0x0080f914:    e7ee        ..      B        0x80f8f4 ; bas_battery_level_value_notify + 20
;;;217                                            &battery_level, sizeof(battery_level), APP_RESULT_SUCCESS);
;;;218        }
;;;219        else
;;;220        {
;;;221            return false;
        0x0080f916:    2000        .       MOVS     r0,#0
;;;222        }
;;;223    }
        0x0080f918:    e7ec        ..      B        0x80f8f4 ; bas_battery_level_value_notify + 20
    bas_attr_read_cb
;;;224    
;;;225    /**
;;;226     * @brief read characteristic data from service.
;;;227     *
;;;228     * @param conn_id           Connection ID.
;;;229     * @param service_id        ServiceID to be read.
;;;230     * @param attrib_index      Attribute index of getting characteristic data.
;;;231     * @param offset            Offset of characteritic to be read.
;;;232     * @param p_length          Length of getting characteristic data.
;;;233     * @param pp_value          Pointer to pointer of characteristic value to be read.
;;;234     * @return T_APP_RESULT
;;;235    */
;;;236    T_APP_RESULT bas_attr_read_cb(uint8_t conn_id, T_SERVER_ID service_id, uint16_t attrib_index,
;;;237                                  uint16_t offset, uint16_t *p_length, uint8_t **pp_value)
;;;238    {
        0x0080f91a:    e92d43f8    -..C    PUSH     {r3-r9,lr}
        0x0080f91e:    4605        .F      MOV      r5,r0
        0x0080f920:    e9dd6708    ...g    LDRD     r6,r7,[sp,#0x20]
        0x0080f924:    2000        .       MOVS     r0,#0
        0x0080f926:    8030        0.      STRH     r0,[r6,#0]
        0x0080f928:    4688        .F      MOV      r8,r1
        0x0080f92a:    9300        ..      STR      r3,[sp,#0]
        0x0080f92c:    4939        9I      LDR      r1,[pc,#228] ; [0x80fa14] = 0x88003e8
        0x0080f92e:    483a        :H      LDR      r0,[pc,#232] ; [0x80fa18] = 0x21103300
        0x0080f930:    4614        .F      MOV      r4,r2
;;;239        T_APP_RESULT cause = APP_RESULT_SUCCESS;
;;;240        *p_length = 0;
;;;241    
;;;242        PROFILE_PRINT_INFO2("bas_attr_read_cb attrib_index = %d offset %x", attrib_index, offset);
        0x0080f932:    4613        .F      MOV      r3,r2
        0x0080f934:    2202        ."      MOVS     r2,#2
        0x0080f936:    311c        .1      ADDS     r1,r1,#0x1c
        0x0080f938:    1c80        ..      ADDS     r0,r0,#2
        0x0080f93a:    f7f8d890    ....    BL       log_buffer ; 0x7a5e
;;;243    
;;;244        switch (attrib_index)
        0x0080f93e:    2c02        .,      CMP      r4,#2
        0x0080f940:    d00a        ..      BEQ      0x80f958 ; bas_attr_read_cb + 62
;;;245        {
;;;246        default:
;;;247            {
;;;248                PROFILE_PRINT_ERROR1("bas_attr_read_cb attrib_index = %d not found", attrib_index);
        0x0080f942:    4934        4I      LDR      r1,[pc,#208] ; [0x80fa14] = 0x88003e8
        0x0080f944:    4623        #F      MOV      r3,r4
        0x0080f946:    2201        ."      MOVS     r2,#1
        0x0080f948:    314c        L1      ADDS     r1,r1,#0x4c
        0x0080f94a:    4833        3H      LDR      r0,[pc,#204] ; [0x80fa18] = 0x21103300
        0x0080f94c:    f7f8d887    ....    BL       log_buffer ; 0x7a5e
;;;249                cause  = APP_RESULT_ATTR_NOT_FOUND;
        0x0080f950:    f240400a    @..@    MOV      r0,#0x40a
        0x0080f954:    e8bd83f8    ....    POP      {r3-r9,pc}
;;;250            }
;;;251            break;
;;;252    
;;;253        case GATT_SVC_BAS_BATTERY_LEVEL_INDEX:
;;;254            {
;;;255                T_BAS_CALLBACK_DATA callback_data;
;;;256                callback_data.msg_type = SERVICE_CALLBACK_TYPE_READ_CHAR_VALUE;
        0x0080f958:    2002        .       MOVS     r0,#2
        0x0080f95a:    f88d0001    ....    STRB     r0,[sp,#1]
;;;257                callback_data.conn_id = conn_id;
        0x0080f95e:    f88d5000    ...P    STRB     r5,[sp,#0]
        0x0080f962:    4d2e        .M      LDR      r5,[pc,#184] ; [0x80fa1c] = 0x208040
;;;258                callback_data.msg_data.read_value_index = BAS_READ_BATTERY_LEVEL;
        0x0080f964:    2401        .$      MOVS     r4,#1
        0x0080f966:    f88d4002    ...@    STRB     r4,[sp,#2]
;;;259                cause = pfn_bas_cb(service_id, (void *)&callback_data);
        0x0080f96a:    686a        jh      LDR      r2,[r5,#4]
        0x0080f96c:    4669        iF      MOV      r1,sp
        0x0080f96e:    4640        @F      MOV      r0,r8
        0x0080f970:    4790        .G      BLX      r2
;;;260                if (cause == APP_RESULT_PENDING)
        0x0080f972:    f5a06150    ..Pa    SUB      r1,r0,#0xd00
        0x0080f976:    3901        .9      SUBS     r1,#1
        0x0080f978:    d100        ..      BNE      0x80f97c ; bas_attr_read_cb + 98
;;;261                {
;;;262                    bas_read_battery_level_pending = true;
        0x0080f97a:    706c        lp      STRB     r4,[r5,#1]
;;;263                }
;;;264    
;;;265                *pp_value = &battery_level;
;;;266                *p_length = sizeof(battery_level);
        0x0080f97c:    603d        =`      STR      r5,[r7,#0]
        0x0080f97e:    8034        4.      STRH     r4,[r6,#0]
;;;267            }
;;;268            break;
;;;269        }
;;;270        return (cause);
;;;271    }
        0x0080f980:    e7e8        ..      B        0x80f954 ; bas_attr_read_cb + 58
    bas_cccd_update_cb
;;;272    
;;;273    /**
;;;274     * @brief update CCCD bits from stack.
;;;275     *
;;;276     * @param conn_id           Connection ID.
;;;277     * @param service_id        Service ID.
;;;278     * @param index             Attribute index of characteristic data.
;;;279     * @param ccc_bits          CCCD bits from stack.
;;;280     * @return None
;;;281    */
;;;282    void bas_cccd_update_cb(uint8_t conn_id, T_SERVER_ID service_id, uint16_t index, uint16_t ccc_bits)
;;;283    {
        0x0080f982:    e92d41fc    -..A    PUSH     {r2-r8,lr}
        0x0080f986:    2601        .&      MOVS     r6,#1
        0x0080f988:    f88d6005    ...`    STRB     r6,[sp,#5]
        0x0080f98c:    4688        .F      MOV      r8,r1
        0x0080f98e:    f88d0004    ....    STRB     r0,[sp,#4]
        0x0080f992:    461d        .F      MOV      r5,r3
        0x0080f994:    9300        ..      STR      r3,[sp,#0]
        0x0080f996:    491f        .I      LDR      r1,[pc,#124] ; [0x80fa14] = 0x88003e8
        0x0080f998:    481f        .H      LDR      r0,[pc,#124] ; [0x80fa18] = 0x21103300
        0x0080f99a:    4617        .F      MOV      r7,r2
        0x0080f99c:    4613        .F      MOV      r3,r2
;;;284        T_BAS_CALLBACK_DATA callback_data;
;;;285        callback_data.msg_type = SERVICE_CALLBACK_TYPE_INDIFICATION_NOTIFICATION;
;;;286        callback_data.conn_id = conn_id;
;;;287        bool handle = true;
        0x0080f99e:    4634        4F      MOV      r4,r6
;;;288        PROFILE_PRINT_INFO2("bas_cccd_update_cb index = %d ccc_bits %x", index, ccc_bits);
        0x0080f9a0:    2202        ."      MOVS     r2,#2
        0x0080f9a2:    317c        |1      ADDS     r1,r1,#0x7c
        0x0080f9a4:    1c80        ..      ADDS     r0,r0,#2
        0x0080f9a6:    f7f8d85a    ..Z.    BL       log_buffer ; 0x7a5e
;;;289    
;;;290        switch (index)
        0x0080f9aa:    2f03        ./      CMP      r7,#3
        0x0080f9ac:    d00b        ..      BEQ      0x80f9c6 ; bas_cccd_update_cb + 68
;;;291        {
;;;292        case GATT_SVC_BAS_CHAR_CCCD_INDEX:
;;;293            {
;;;294                if (ccc_bits & GATT_CLIENT_CHAR_CONFIG_NOTIFY)
;;;295                {
;;;296                    callback_data.msg_data.notification_indification_index = BAS_NOTIFY_BATTERY_LEVEL_ENABLE;
;;;297                }
;;;298                else
;;;299                {
;;;300                    callback_data.msg_data.notification_indification_index = BAS_NOTIFY_BATTERY_LEVEL_DISABLE;
;;;301                }
;;;302                break;
;;;303            }
;;;304        default:
;;;305            {
;;;306                handle = false;
        0x0080f9ae:    2400        .$      MOVS     r4,#0
;;;307                break;
;;;308            }
;;;309    
;;;310        }
;;;311    
;;;312        if (pfn_bas_cb && (handle == true))
        0x0080f9b0:    481a        .H      LDR      r0,[pc,#104] ; [0x80fa1c] = 0x208040
        0x0080f9b2:    6842        Bh      LDR      r2,[r0,#4]
        0x0080f9b4:    2a00        .*      CMP      r2,#0
        0x0080f9b6:    d004        ..      BEQ      0x80f9c2 ; bas_cccd_update_cb + 64
        0x0080f9b8:    2c00        .,      CMP      r4,#0
        0x0080f9ba:    d002        ..      BEQ      0x80f9c2 ; bas_cccd_update_cb + 64
;;;313        {
;;;314            pfn_bas_cb(service_id, (void *)&callback_data);
        0x0080f9bc:    a901        ..      ADD      r1,sp,#4
        0x0080f9be:    4640        @F      MOV      r0,r8
        0x0080f9c0:    4790        .G      BLX      r2
;;;315        }
;;;316    
;;;317        return;
;;;318    }
        0x0080f9c2:    e8bd81fc    ....    POP      {r2-r8,pc}
        0x0080f9c6:    07e8        ..      LSLS     r0,r5,#31
        0x0080f9c8:    d002        ..      BEQ      0x80f9d0 ; bas_cccd_update_cb + 78
        0x0080f9ca:    f88d6006    ...`    STRB     r6,[sp,#6]
        0x0080f9ce:    e7ef        ..      B        0x80f9b0 ; bas_cccd_update_cb + 46
        0x0080f9d0:    2002        .       MOVS     r0,#2
        0x0080f9d2:    f88d0006    ....    STRB     r0,[sp,#6]
        0x0080f9d6:    e7eb        ..      B        0x80f9b0 ; bas_cccd_update_cb + 46
    bas_add_service
;;;319    
;;;320    /**
;;;321     * @brief BAS Service Callbacks.
;;;322    */
;;;323    const T_FUN_GATT_SERVICE_CBS bas_cbs =
;;;324    {
;;;325        bas_attr_read_cb,  // Read callback function pointer
;;;326        NULL, // Write callback function pointer
;;;327        bas_cccd_update_cb  // CCCD update callback function pointer
;;;328    };
;;;329    
;;;330    /**
;;;331      * @brief       Add battery service to the BLE stack database.
;;;332      *
;;;333      *
;;;334      * @param[in]   p_func  Callback when service attribute was read, write or cccd update.
;;;335      * @return Service id generated by the BLE stack: @ref T_SERVER_ID.
;;;336      * @retval 0xFF Operation failure.
;;;337      * @retval Others Service id assigned by stack.
;;;338      *
;;;339      * <b>Example usage</b>
;;;340      * \code{.c}
;;;341         void profile_init()
;;;342         {
;;;343             server_init(1);
;;;344             bas_id = bas_add_service(app_handle_profile_message);
;;;345         }
;;;346      * \endcode
;;;347      */
;;;348    T_SERVER_ID bas_add_service(void *p_func)
;;;349    {
        0x0080f9d8:    b53e        >.      PUSH     {r1-r5,lr}
        0x0080f9da:    4604        .F      MOV      r4,r0
;;;350        T_SERVER_ID service_id;
;;;351        if (false == server_add_service(&service_id,
        0x0080f9dc:    4810        .H      LDR      r0,[pc,#64] ; [0x80fa20] = 0x810b2c
        0x0080f9de:    e9d0121d    ....    LDRD     r1,r2,[r0,#0x74]
        0x0080f9e2:    e9cd1200    ....    STRD     r1,r2,[sp,#0]
        0x0080f9e6:    4601        .F      MOV      r1,r0
        0x0080f9e8:    6f03        .o      LDR      r3,[r0,#0x70]
        0x0080f9ea:    2270        p"      MOVS     r2,#0x70
        0x0080f9ec:    a802        ..      ADD      r0,sp,#8
        0x0080f9ee:    f43ff63e    ?.>.    BL       server_add_service ; 0x4f66e
        0x0080f9f2:    b950        P.      CBNZ     r0,0x80fa0a ; bas_add_service + 50
;;;352                                        (uint8_t *)bas_attr_tbl,
;;;353                                        bas_attr_tbl_size,
;;;354                                        bas_cbs))
;;;355        {
;;;356            PROFILE_PRINT_ERROR1("bas_add_service: service_id %d", service_id);
        0x0080f9f4:    4907        .I      LDR      r1,[pc,#28] ; [0x80fa14] = 0x88003e8
        0x0080f9f6:    f89d3008    ...0    LDRB     r3,[sp,#8]
        0x0080f9fa:    2201        ."      MOVS     r2,#1
        0x0080f9fc:    31ac        .1      ADDS     r1,r1,#0xac
        0x0080f9fe:    4806        .H      LDR      r0,[pc,#24] ; [0x80fa18] = 0x21103300
        0x0080fa00:    f7f8d82d    ..-.    BL       log_buffer ; 0x7a5e
;;;357            service_id = 0xff;
        0x0080fa04:    20ff        .       MOVS     r0,#0xff
        0x0080fa06:    f88d0008    ....    STRB     r0,[sp,#8]
;;;358        }
;;;359        pfn_bas_cb = (P_FUN_SERVER_GENERAL_CB)p_func;
        0x0080fa0a:    4804        .H      LDR      r0,[pc,#16] ; [0x80fa1c] = 0x208040
;;;360        return service_id;
        0x0080fa0c:    6044        D`      STR      r4,[r0,#4]
        0x0080fa0e:    f89d0008    ....    LDRB     r0,[sp,#8]
;;;361    }
        0x0080fa12:    bd3e        >.      POP      {r1-r5,pc}
    $d
        0x0080fa14:    088003e8    ....    DCD    142607336
        0x0080fa18:    21103300    .3.!    DCD    554709760
        0x0080fa1c:    00208040    @. .    DCD    2129984
        0x0080fa20:    00810b2c    ,...    DCD    8457004
    $t
    .text
    kns_set_parameter
;;; ..\include\SDK\src\app\pxp\kns.c
;;;203    {
        0x0080fa24:    b510        ..      PUSH     {r4,lr}
        0x0080fa26:    2401        .$      MOVS     r4,#1
;;; ..\include\SDK\src\app\pxp\kns.c (203)
        0x0080fa28:    b130        0.      CBZ      r0,0x80fa38 ; kns_set_parameter + 20
;;;204        bool ret = true;
;;;205    
;;;206        switch (param_type)
;;;207        {
;;;208        default:
;;;209            {
;;;210                ret = false;
        0x0080fa2a:    2400        .$      MOVS     r4,#0
;;;211                PROFILE_PRINT_ERROR0("bas_set_parameter failed");
        0x0080fa2c:    4622        "F      MOV      r2,r4
        0x0080fa2e:    4957        WI      LDR      r1,[pc,#348] ; [0x80fb8c] = 0x88004b8
        0x0080fa30:    4857        WH      LDR      r0,[pc,#348] ; [0x80fb90] = 0x21103300
        0x0080fa32:    f7f8d814    ....    BL       log_buffer ; 0x7a5e
;;;212            }
;;;213            break;
        0x0080fa36:    e006        ..      B        0x80fa46 ; kns_set_parameter + 34
;;;214    
;;;215        case KNS_PARAM_VALUE:
;;;216            {
;;;217                if (length != sizeof(uint32_t))
        0x0080fa38:    2904        .)      CMP      r1,#4
        0x0080fa3a:    d001        ..      BEQ      0x80fa40 ; kns_set_parameter + 28
;;;218                {
;;;219                    ret = false;
        0x0080fa3c:    2400        .$      MOVS     r4,#0
        0x0080fa3e:    e002        ..      B        0x80fa46 ; kns_set_parameter + 34
;;;220                }
;;;221                else
;;;222                {
;;;223                    gParaValue = *p_value;
        0x0080fa40:    4954        TI      LDR      r1,[pc,#336] ; [0x80fb94] = 0x207e80
        0x0080fa42:    6810        .h      LDR      r0,[r2,#0]
        0x0080fa44:    6008        .`      STR      r0,[r1,#0]
;;;224                }
;;;225            }
;;;226            break;
;;;227        }
;;;228    
;;;229        return ret;
        0x0080fa46:    4620         F      MOV      r0,r4
;;;230    }
        0x0080fa48:    bd10        ..      POP      {r4,pc}
    kns_attr_read_cb
;;;231    /**
;;;232     * @brief read characteristic data from stack.
;;;233     *
;;;234     * @param ServiceId          ServiceId generated when register to upper stack.
;;;235     * @param attrib_index          Attribute index of getting characteristic data.
;;;236     * @param offset                Used for Blob Read.
;;;237     * @param length_ptr            length of getting characteristic data.
;;;238     * @param ppValue            pointer of getting characteristic data.
;;;239     * @return TProfileResult   profile procedure results.
;;;240    */
;;;241    T_APP_RESULT kns_attr_read_cb(uint8_t conn_id, T_SERVER_ID service_id, uint16_t attrib_index,
;;;242                                  uint16_t offset, uint16_t *p_length, uint8_t **pp_value)
;;;243    {
        0x0080fa4a:    e92d41fc    -..A    PUSH     {r2-r8,lr}
        0x0080fa4e:    2500        .%      MOVS     r5,#0
        0x0080fa50:    e9dd4708    ...G    LDRD     r4,r7,[sp,#0x20]
        0x0080fa54:    4616        .F      MOV      r6,r2
        0x0080fa56:    460b        .F      MOV      r3,r1
        0x0080fa58:    8025        %.      STRH     r5,[r4,#0]
        0x0080fa5a:    2a02        .*      CMP      r2,#2
        0x0080fa5c:    d009        ..      BEQ      0x80fa72 ; kns_attr_read_cb + 40
;;;244        T_APP_RESULT  cause  = APP_RESULT_SUCCESS;
;;;245        *p_length = 0;
;;;246    
;;;247        switch (attrib_index)
;;;248        {
;;;249        default:
;;;250            /* invalid attribute index. */
;;;251            PROFILE_PRINT_ERROR1("kns_attr_read_cb attrib_index = %d not found", attrib_index);
        0x0080fa5e:    494b        KI      LDR      r1,[pc,#300] ; [0x80fb8c] = 0x88004b8
        0x0080fa60:    4613        .F      MOV      r3,r2
        0x0080fa62:    2201        ."      MOVS     r2,#1
        0x0080fa64:    311c        .1      ADDS     r1,r1,#0x1c
        0x0080fa66:    484a        JH      LDR      r0,[pc,#296] ; [0x80fb90] = 0x21103300
        0x0080fa68:    f7f7dff9    ....    BL       log_buffer ; 0x7a5e
;;;252            cause  = APP_RESULT_ATTR_NOT_FOUND;
        0x0080fa6c:    f240450a    @..E    MOV      r5,#0x40a
;;;253            break;
        0x0080fa70:    e00e        ..      B        0x80fa90 ; kns_attr_read_cb + 70
;;;254        case KNS_PARAM_VALUE_INDEX:
;;;255            {
;;;256                T_KNS_CALLBACK_DATA callback_data;
;;;257    
;;;258                callback_data.msg_type = SERVICE_CALLBACK_TYPE_READ_CHAR_VALUE;
        0x0080fa72:    2002        .       MOVS     r0,#2
        0x0080fa74:    f88d0000    ....    STRB     r0,[sp,#0]
;;;259                //callback_data.conn_id = conn_id;
;;;260                callback_data.msg_data.read_index = KNS_READ_PARA;
        0x0080fa78:    f88d0004    ....    STRB     r0,[sp,#4]
;;;261                if (pfn_kns_cb)
        0x0080fa7c:    4846        FH      LDR      r0,[pc,#280] ; [0x80fb98] = 0x208048
        0x0080fa7e:    6802        .h      LDR      r2,[r0,#0]
        0x0080fa80:    b112        ..      CBZ      r2,0x80fa88 ; kns_attr_read_cb + 62
;;;262                {
;;;263                    pfn_kns_cb(service_id, (void *)&callback_data);
        0x0080fa82:    4669        iF      MOV      r1,sp
        0x0080fa84:    4618        .F      MOV      r0,r3
        0x0080fa86:    4790        .G      BLX      r2
;;;264                }
;;;265    
;;;266                *pp_value = (uint8_t *)&gParaValue;
        0x0080fa88:    4842        BH      LDR      r0,[pc,#264] ; [0x80fb94] = 0x207e80
;;;267                *p_length = sizeof(gParaValue);
        0x0080fa8a:    6038        8`      STR      r0,[r7,#0]
        0x0080fa8c:    2004        .       MOVS     r0,#4
        0x0080fa8e:    8020         .      STRH     r0,[r4,#0]
;;;268            }
;;;269            break;
;;;270        }
;;;271    
;;;272        PROFILE_PRINT_INFO2("<-- gatt get PxpExtended attribute value: AttribIndex--%d, length--%d",
        0x0080fa90:    8820         .      LDRH     r0,[r4,#0]
        0x0080fa92:    9000        ..      STR      r0,[sp,#0]
        0x0080fa94:    493d        =I      LDR      r1,[pc,#244] ; [0x80fb8c] = 0x88004b8
        0x0080fa96:    483e        >H      LDR      r0,[pc,#248] ; [0x80fb90] = 0x21103300
        0x0080fa98:    4633        3F      MOV      r3,r6
        0x0080fa9a:    2202        ."      MOVS     r2,#2
        0x0080fa9c:    314c        L1      ADDS     r1,r1,#0x4c
        0x0080fa9e:    1c80        ..      ADDS     r0,r0,#2
        0x0080faa0:    f7f7dfdd    ....    BL       log_buffer ; 0x7a5e
;;;273                            attrib_index,
;;;274                            *p_length);
;;;275        return (cause);
        0x0080faa4:    4628        (F      MOV      r0,r5
;;;276    }
        0x0080faa6:    e8bd81fc    ....    POP      {r2-r8,pc}
    kns_attr_write_cb
;;;277    
;;;278    /**
;;;279     * @brief write characteristic data from stack.
;;;280     *
;;;281     * @param ServiceId          ServiceId generated when register to upper stack.
;;;282     * @param iAttribIndex          Attribute index of getting characteristic data.
;;;283     * @param wLength                length of data to be written.
;;;284     * @param pValue            pointer of data to be written.
;;;285     * @return TProfileResult   profile procedure results.
;;;286    */
;;;287    
;;;288    static T_APP_RESULT kns_attr_write_cb(uint8_t conn_id, T_SERVER_ID service_id,
;;;289                                          uint16_t attr_index, T_WRITE_TYPE write_type, uint16_t length,
;;;290                                          uint8_t *p_value, P_FUN_WRITE_IND_POST_PROC *p_write_ind_post_proc)
;;;291    {
        0x0080faaa:    b53e        >.      PUSH     {r1-r5,lr}
        0x0080faac:    460d        .F      MOV      r5,r1
        0x0080faae:    e9dd0306    ....    LDRD     r0,r3,[sp,#0x18]
        0x0080fab2:    2400        .$      MOVS     r4,#0
        0x0080fab4:    b123        #.      CBZ      r3,0x80fac0 ; kns_attr_write_cb + 22
        0x0080fab6:    2a02        .*      CMP      r2,#2
        0x0080fab8:    d00c        ..      BEQ      0x80fad4 ; kns_attr_write_cb + 42
        0x0080faba:    f240440a    @..D    MOV      r4,#0x40a
        0x0080fabe:    e013        ..      B        0x80fae8 ; kns_attr_write_cb + 62
;;;292        T_APP_RESULT  cause = APP_RESULT_SUCCESS;
;;;293        T_KNS_CALLBACK_DATA callback_data;
;;;294        if (!p_value)
;;;295        {
;;;296            PROFILE_PRINT_ERROR2("kns_attr_write_cb: p_value %p, length 0x%x", p_value, length);
        0x0080fac0:    4932        2I      LDR      r1,[pc,#200] ; [0x80fb8c] = 0x88004b8
        0x0080fac2:    9000        ..      STR      r0,[sp,#0]
        0x0080fac4:    2202        ."      MOVS     r2,#2
        0x0080fac6:    3198        .1      ADDS     r1,r1,#0x98
        0x0080fac8:    4831        1H      LDR      r0,[pc,#196] ; [0x80fb90] = 0x21103300
        0x0080faca:    f7f7dfc8    ....    BL       log_buffer ; 0x7a5e
;;;297            cause = APP_RESULT_INVALID_PDU;
        0x0080face:    f2404004    @..@    MOV      r0,#0x404
        0x0080fad2:    bd3e        >.      POP      {r1-r5,pc}
;;;298            return cause;
;;;299        }
;;;300    
;;;301        switch (attr_index)
;;;302        {
;;;303        default:
;;;304            cause = APP_RESULT_ATTR_NOT_FOUND;
;;;305            break;
;;;306        case KNS_PARAM_VALUE_INDEX:
;;;307            if (length != sizeof(uint32_t))
        0x0080fad4:    2804        .(      CMP      r0,#4
        0x0080fad6:    d002        ..      BEQ      0x80fade ; kns_attr_write_cb + 52
;;;308            {
;;;309                cause = APP_RESULT_INVALID_VALUE_SIZE;
        0x0080fad8:    f240440d    @..D    MOV      r4,#0x40d
        0x0080fadc:    e004        ..      B        0x80fae8 ; kns_attr_write_cb + 62
;;;310            }
;;;311            else
;;;312            {
;;;313                //callback_data.conn_id = conn_id;
;;;314                callback_data.msg_type = SERVICE_CALLBACK_TYPE_WRITE_CHAR_VALUE;
        0x0080fade:    2003        .       MOVS     r0,#3
        0x0080fae0:    f88d0004    ....    STRB     r0,[sp,#4]
;;;315                callback_data.msg_data.write_value = *(uint32_t *)p_value;
        0x0080fae4:    6818        .h      LDR      r0,[r3,#0]
        0x0080fae6:    9002        ..      STR      r0,[sp,#8]
;;;316            }
;;;317            break;
;;;318    
;;;319        }
;;;320        if (pfn_kns_cb && (cause == APP_RESULT_SUCCESS))
        0x0080fae8:    482b        +H      LDR      r0,[pc,#172] ; [0x80fb98] = 0x208048
        0x0080faea:    6802        .h      LDR      r2,[r0,#0]
        0x0080faec:    b11a        ..      CBZ      r2,0x80faf6 ; kns_attr_write_cb + 76
        0x0080faee:    b914        ..      CBNZ     r4,0x80faf6 ; kns_attr_write_cb + 76
;;;321        {
;;;322            pfn_kns_cb(service_id, (void *)&callback_data);
        0x0080faf0:    a901        ..      ADD      r1,sp,#4
        0x0080faf2:    4628        (F      MOV      r0,r5
        0x0080faf4:    4790        .G      BLX      r2
;;;323        }
;;;324        return cause;
        0x0080faf6:    4620         F      MOV      r0,r4
;;;325    
;;;326    }
        0x0080faf8:    bd3e        >.      POP      {r1-r5,pc}
    kns_cccd_update_cb
;;;327    /**
;;;328     * @brief update CCCD bits from stack.
;;;329     *
;;;330     * @param ServiceId          ServiceId generated when register to upper stack.
;;;331     * @param Index          Attribute index of getting characteristic data.
;;;332     * @param wCCCBits                CCCD bits to be updated.
;;;333     * @return none.
;;;334    */
;;;335    
;;;336    void kns_cccd_update_cb(uint8_t conn_id, T_SERVER_ID service_id, uint16_t index, uint16_t ccc_bits)
;;;337    {
        0x0080fafa:    e92d43fe    -..C    PUSH     {r1-r9,lr}
        0x0080fafe:    4688        .F      MOV      r8,r1
        0x0080fb00:    461d        .F      MOV      r5,r3
        0x0080fb02:    2601        .&      MOVS     r6,#1
        0x0080fb04:    9300        ..      STR      r3,[sp,#0]
        0x0080fb06:    4921        !I      LDR      r1,[pc,#132] ; [0x80fb8c] = 0x88004b8
        0x0080fb08:    4821        !H      LDR      r0,[pc,#132] ; [0x80fb90] = 0x21103300
        0x0080fb0a:    4617        .F      MOV      r7,r2
        0x0080fb0c:    4613        .F      MOV      r3,r2
;;;338        T_KNS_CALLBACK_DATA callback_data;
;;;339        callback_data.msg_type = SERVICE_CALLBACK_TYPE_INDIFICATION_NOTIFICATION;
        0x0080fb0e:    f88d6004    ...`    STRB     r6,[sp,#4]
;;;340        //callback_data.conn_id = conn_id;
;;;341        bool handle = true;
        0x0080fb12:    4634        4F      MOV      r4,r6
;;;342        PROFILE_PRINT_INFO2("kns_cccd_update_cb index = %d ccc_bits %x", index, ccc_bits);
        0x0080fb14:    2202        ."      MOVS     r2,#2
        0x0080fb16:    31c8        .1      ADDS     r1,r1,#0xc8
        0x0080fb18:    1c80        ..      ADDS     r0,r0,#2
        0x0080fb1a:    f7f7dfa0    ....    BL       log_buffer ; 0x7a5e
;;;343    
;;;344        switch (index)
        0x0080fb1e:    2f05        ./      CMP      r7,#5
        0x0080fb20:    d00b        ..      BEQ      0x80fb3a ; kns_cccd_update_cb + 64
;;;345        {
;;;346        case KNS_KEY_VALUE_CCCD_INDEX:
;;;347            {
;;;348                if (ccc_bits & GATT_CLIENT_CHAR_CONFIG_NOTIFY)
;;;349                {
;;;350                    callback_data.msg_data.notification_indification_index = KNS_NOTIFY_ENABLE;
;;;351                }
;;;352                else
;;;353                {
;;;354                    callback_data.msg_data.notification_indification_index = KNS_NOTIFY_DISABLE;
;;;355                }
;;;356                break;
;;;357            }
;;;358        default:
;;;359            {
;;;360                handle = false;
        0x0080fb22:    2400        .$      MOVS     r4,#0
;;;361                break;
;;;362            }
;;;363    
;;;364        }
;;;365    
;;;366        if (pfn_kns_cb && (handle == true))
        0x0080fb24:    481c        .H      LDR      r0,[pc,#112] ; [0x80fb98] = 0x208048
        0x0080fb26:    6802        .h      LDR      r2,[r0,#0]
        0x0080fb28:    2a00        .*      CMP      r2,#0
        0x0080fb2a:    d004        ..      BEQ      0x80fb36 ; kns_cccd_update_cb + 60
        0x0080fb2c:    2c00        .,      CMP      r4,#0
        0x0080fb2e:    d002        ..      BEQ      0x80fb36 ; kns_cccd_update_cb + 60
;;;367        {
;;;368            pfn_kns_cb(service_id, (void *)&callback_data);
        0x0080fb30:    a901        ..      ADD      r1,sp,#4
        0x0080fb32:    4640        @F      MOV      r0,r8
        0x0080fb34:    4790        .G      BLX      r2
;;;369        }
;;;370    
;;;371        return;
;;;372    }
        0x0080fb36:    e8bd83fe    ....    POP      {r1-r9,pc}
        0x0080fb3a:    07e8        ..      LSLS     r0,r5,#31
        0x0080fb3c:    d002        ..      BEQ      0x80fb44 ; kns_cccd_update_cb + 74
        0x0080fb3e:    f88d6008    ...`    STRB     r6,[sp,#8]
        0x0080fb42:    e7ef        ..      B        0x80fb24 ; kns_cccd_update_cb + 42
        0x0080fb44:    2000        .       MOVS     r0,#0
        0x0080fb46:    f88d0008    ....    STRB     r0,[sp,#8]
        0x0080fb4a:    e7eb        ..      B        0x80fb24 ; kns_cccd_update_cb + 42
    kns_add_service
;;;373    
;;;374    /**
;;;375     * @brief KNS Service Callbacks.
;;;376    */
;;;377    const T_FUN_GATT_SERVICE_CBS kns_cbs =
;;;378    {
;;;379        kns_attr_read_cb,  // Read callback function pointer
;;;380        kns_attr_write_cb, // Write callback function pointer
;;;381        kns_cccd_update_cb  // CCCD update callback function pointer
;;;382    };
;;;383    
;;;384    /**
;;;385     * @brief Add PXP extended service to stack/profile.
;;;386     *
;;;387     * @param pFunc          pointer of function to send data to application from PXP extended service.
;;;388     * @return ServiceId.   the service ID auto generated by stack when register this service to stack
;;;389    */
;;;390    uint8_t kns_add_service(void *pFunc)
;;;391    {
        0x0080fb4c:    b53e        >.      PUSH     {r1-r5,lr}
        0x0080fb4e:    4604        .F      MOV      r4,r0
;;;392        T_SERVER_ID service_id;
;;;393        if (false == server_add_service(&service_id,
        0x0080fb50:    4812        .H      LDR      r0,[pc,#72] ; [0x80fb9c] = 0x810c38
        0x0080fb52:    e9d0120b    ....    LDRD     r1,r2,[r0,#0x2c]
        0x0080fb56:    e9cd1200    ....    STRD     r1,r2,[sp,#0]
        0x0080fb5a:    f1a00180    ....    SUB      r1,r0,#0x80
        0x0080fb5e:    6a83        .j      LDR      r3,[r0,#0x28]
        0x0080fb60:    22a8        ."      MOVS     r2,#0xa8
        0x0080fb62:    a802        ..      ADD      r0,sp,#8
        0x0080fb64:    f43ff583    ?...    BL       server_add_service ; 0x4f66e
        0x0080fb68:    b950        P.      CBNZ     r0,0x80fb80 ; kns_add_service + 52
;;;394                                        (uint8_t *)kns_attr_tbl,
;;;395                                        kns_attr_tbl_size,
;;;396                                        kns_cbs))
;;;397        {
;;;398            PROFILE_PRINT_ERROR1("kns_add_service: service_id %d", service_id);
        0x0080fb6a:    4908        .I      LDR      r1,[pc,#32] ; [0x80fb8c] = 0x88004b8
        0x0080fb6c:    f89d3008    ...0    LDRB     r3,[sp,#8]
        0x0080fb70:    2201        ."      MOVS     r2,#1
        0x0080fb72:    31f8        .1      ADDS     r1,r1,#0xf8
        0x0080fb74:    4806        .H      LDR      r0,[pc,#24] ; [0x80fb90] = 0x21103300
        0x0080fb76:    f7f7df72    ..r.    BL       log_buffer ; 0x7a5e
;;;399            service_id = 0xff;
        0x0080fb7a:    20ff        .       MOVS     r0,#0xff
        0x0080fb7c:    f88d0008    ....    STRB     r0,[sp,#8]
;;;400        }
;;;401    
;;;402        pfn_kns_cb = (P_FUN_SERVER_GENERAL_CB)pFunc;
        0x0080fb80:    4805        .H      LDR      r0,[pc,#20] ; [0x80fb98] = 0x208048
;;;403        return service_id;
        0x0080fb82:    6004        .`      STR      r4,[r0,#0]
        0x0080fb84:    f89d0008    ....    LDRB     r0,[sp,#8]
;;;404    }
        0x0080fb88:    bd3e        >.      POP      {r1-r5,pc}
    $d
        0x0080fb8a:    0000        ..      DCW    0
        0x0080fb8c:    088004b8    ....    DCD    142607544
        0x0080fb90:    21103300    .3.!    DCD    554709760
        0x0080fb94:    00207e80    .~ .    DCD    2129536
        0x0080fb98:    00208048    H. .    DCD    2129992
        0x0080fb9c:    00810c38    8...    DCD    8457272
    $t
    .text
    dis_set_parameter
;;; .\..\include\SDK\src\ble\profile\server\dis.c
;;;422    {
        0x0080fba0:    b570        p.      PUSH     {r4-r6,lr}
        0x0080fba2:    4613        .F      MOV      r3,r2
;;;423        bool ret = true;
        0x0080fba4:    2401        .$      MOVS     r4,#1
        0x0080fba6:    4a9a        .J      LDR      r2,[pc,#616] ; [0x80fe10] = 0x20804c
;;;424    
;;;425        switch (param_type)
        0x0080fba8:    2809        .(      CMP      r0,#9
        0x0080fbaa:    d206        ..      BCS      0x80fbba ; dis_set_parameter + 26
        0x0080fbac:    e8dff000    ....    TBB      [pc,r0]
    $d
        0x0080fbb0:    2a21150c    ..!*    DCD    706811148
        0x0080fbb4:    4c453c33    3<EL    DCD    1279605811
        0x0080fbb8:    0056        V.      DCW    86
    $t
;;;426        {
;;;427        default:
;;;428            ret = false;
        0x0080fbba:    2400        .$      MOVS     r4,#0
        0x0080fbbc:    4622        "F      MOV      r2,r4
        0x0080fbbe:    4995        .I      LDR      r1,[pc,#596] ; [0x80fe14] = 0x88005d4
        0x0080fbc0:    4895        .H      LDR      r0,[pc,#596] ; [0x80fe18] = 0x21103300
        0x0080fbc2:    f7f7df4c    ..L.    BL       log_buffer ; 0x7a5e
;;;429            break;
        0x0080fbc6:    e012        ..      B        0x80fbee ; dis_set_parameter + 78
;;;430    
;;;431    #if DIS_CHAR_MANUFACTURER_NAME_SUPPORT
;;;432        case DIS_PARAM_MANUFACTURER_NAME:
;;;433            if (length > DIS_CHAR_MANUFACTURER_NAME_STR_MAX_LENGTH)
        0x0080fbc8:    2914        .)      CMP      r1,#0x14
        0x0080fbca:    d900        ..      BLS      0x80fbce ; dis_set_parameter + 46
;;;434            {
;;;435                length = DIS_CHAR_MANUFACTURER_NAME_STR_MAX_LENGTH;
        0x0080fbcc:    2114        .!      MOVS     r1,#0x14
;;;436            }
;;;437            dis_manufacturer_name_len = length;
        0x0080fbce:    7011        .p      STRB     r1,[r2,#0]
;;;438            memcpy(dis_manufacturer_name, p_value, length);
        0x0080fbd0:    488f        .H      LDR      r0,[pc,#572] ; [0x80fe10] = 0x20804c
        0x0080fbd2:    460a        .F      MOV      r2,r1
        0x0080fbd4:    4619        .F      MOV      r1,r3
        0x0080fbd6:    300c        .0      ADDS     r0,r0,#0xc
;;;439            break;
        0x0080fbd8:    e007        ..      B        0x80fbea ; dis_set_parameter + 74
;;;440    #endif
;;;441    
;;;442    #if DIS_CHAR_MODEL_NUMBER_SUPPORT
;;;443        case DIS_PARAM_MODEL_NUMBER:
;;;444            if (length > DIS_CHAR_MODEL_NUMBER_STR_MAX_LENGTH)
        0x0080fbda:    2914        .)      CMP      r1,#0x14
        0x0080fbdc:    d900        ..      BLS      0x80fbe0 ; dis_set_parameter + 64
;;;445            {
;;;446                length = DIS_CHAR_MODEL_NUMBER_STR_MAX_LENGTH;
        0x0080fbde:    2114        .!      MOVS     r1,#0x14
;;;447            }
;;;448            dis_model_number_len = length;
        0x0080fbe0:    7051        Qp      STRB     r1,[r2,#1]
;;;449            memcpy(dis_model_number, p_value, length);
        0x0080fbe2:    488b        .H      LDR      r0,[pc,#556] ; [0x80fe10] = 0x20804c
        0x0080fbe4:    460a        .F      MOV      r2,r1
        0x0080fbe6:    4619        .F      MOV      r1,r3
        0x0080fbe8:    3020         0      ADDS     r0,r0,#0x20
        0x0080fbea:    f44af156    J.V.    BL       __aeabi_memcpy ; 0x59e9a
        0x0080fbee:    4620         F      MOV      r0,r4
        0x0080fbf0:    bd70        p.      POP      {r4-r6,pc}
;;;450            break;
;;;451    #endif
;;;452    
;;;453    #if DIS_CHAR_SERIAL_NUMBER_SUPPORT
;;;454        case DIS_PARAM_SERIAL_NUMBER:
;;;455            if (length > DIS_CHAR_SERIAL_NUMBER_STR_MAX_LENGTH)
        0x0080fbf2:    2914        .)      CMP      r1,#0x14
        0x0080fbf4:    d900        ..      BLS      0x80fbf8 ; dis_set_parameter + 88
;;;456            {
;;;457                length = DIS_CHAR_SERIAL_NUMBER_STR_MAX_LENGTH;
        0x0080fbf6:    2114        .!      MOVS     r1,#0x14
;;;458            }
;;;459            dis_serial_number_len = length;
        0x0080fbf8:    7091        .p      STRB     r1,[r2,#2]
;;;460            memcpy(dis_serial_number, p_value, length);
        0x0080fbfa:    4885        .H      LDR      r0,[pc,#532] ; [0x80fe10] = 0x20804c
        0x0080fbfc:    460a        .F      MOV      r2,r1
        0x0080fbfe:    4619        .F      MOV      r1,r3
        0x0080fc00:    3034        40      ADDS     r0,r0,#0x34
;;;461    
;;;462            break;
        0x0080fc02:    e7f2        ..      B        0x80fbea ; dis_set_parameter + 74
;;;463    #endif
;;;464    
;;;465    #if DIS_CHAR_HARDWARE_REVISION_SUPPORT
;;;466        case DIS_PARAM_HARDWARE_REVISION:
;;;467            if (length > DIS_CHAR_HARDWARE_REVISION_STR_MAX_LENGTH)
        0x0080fc04:    2914        .)      CMP      r1,#0x14
        0x0080fc06:    d900        ..      BLS      0x80fc0a ; dis_set_parameter + 106
;;;468            {
;;;469                length = DIS_CHAR_HARDWARE_REVISION_STR_MAX_LENGTH;
        0x0080fc08:    2114        .!      MOVS     r1,#0x14
;;;470            }
;;;471            dis_hardware_rev_len = length;
        0x0080fc0a:    70d1        .p      STRB     r1,[r2,#3]
;;;472            memcpy(dis_hardware_rev, p_value, length);
        0x0080fc0c:    4880        .H      LDR      r0,[pc,#512] ; [0x80fe10] = 0x20804c
        0x0080fc0e:    460a        .F      MOV      r2,r1
        0x0080fc10:    4619        .F      MOV      r1,r3
        0x0080fc12:    3048        H0      ADDS     r0,r0,#0x48
;;;473            break;
        0x0080fc14:    e7e9        ..      B        0x80fbea ; dis_set_parameter + 74
;;;474    #endif
;;;475    
;;;476    #if DIS_CHAR_FIRMWARE_REVISION_SUPPORT
;;;477        case DIS_PARAM_FIRMWARE_REVISION:
;;;478            if (length > DIS_CHAR_FIRMWARE_REVISION_STR_MAX_LENGTH)
        0x0080fc16:    2914        .)      CMP      r1,#0x14
        0x0080fc18:    d900        ..      BLS      0x80fc1c ; dis_set_parameter + 124
;;;479            {
;;;480                length = DIS_CHAR_FIRMWARE_REVISION_STR_MAX_LENGTH;
        0x0080fc1a:    2114        .!      MOVS     r1,#0x14
;;;481            }
;;;482            dis_firmware_rev_len = length;
        0x0080fc1c:    7111        .q      STRB     r1,[r2,#4]
;;;483            memcpy(dis_firmware_rev, p_value, length);
        0x0080fc1e:    487c        |H      LDR      r0,[pc,#496] ; [0x80fe10] = 0x20804c
        0x0080fc20:    460a        .F      MOV      r2,r1
        0x0080fc22:    4619        .F      MOV      r1,r3
        0x0080fc24:    305c        \0      ADDS     r0,r0,#0x5c
;;;484            break;
        0x0080fc26:    e7e0        ..      B        0x80fbea ; dis_set_parameter + 74
;;;485    #endif
;;;486    
;;;487    #if DIS_CHAR_SOFTWARE_REVISION_SUPPORT
;;;488        case DIS_PARAM_SOFTWARE_REVISION:
;;;489            if (length > DIS_CHAR_SOFTWARE_REVISION_STR_MAX_LENGTH)
        0x0080fc28:    2914        .)      CMP      r1,#0x14
        0x0080fc2a:    d900        ..      BLS      0x80fc2e ; dis_set_parameter + 142
;;;490            {
;;;491                length = DIS_CHAR_SOFTWARE_REVISION_STR_MAX_LENGTH;
        0x0080fc2c:    2114        .!      MOVS     r1,#0x14
;;;492            }
;;;493            dis_software_rev_len = length;
        0x0080fc2e:    7151        Qq      STRB     r1,[r2,#5]
;;;494            memcpy(dis_software_rev, p_value, length);
        0x0080fc30:    4877        wH      LDR      r0,[pc,#476] ; [0x80fe10] = 0x20804c
        0x0080fc32:    460a        .F      MOV      r2,r1
        0x0080fc34:    4619        .F      MOV      r1,r3
        0x0080fc36:    3070        p0      ADDS     r0,r0,#0x70
;;;495            break;
        0x0080fc38:    e7d7        ..      B        0x80fbea ; dis_set_parameter + 74
;;;496    #endif
;;;497    
;;;498    #if DIS_CHAR_SYSTEM_ID_SUPPORT
;;;499        case DIS_PARAM_SYSTEM_ID:
;;;500            if (length > DIS_SYSTEM_ID_LENGTH)
        0x0080fc3a:    2908        .)      CMP      r1,#8
        0x0080fc3c:    d900        ..      BLS      0x80fc40 ; dis_set_parameter + 160
;;;501            {
;;;502                length = DIS_SYSTEM_ID_LENGTH;
        0x0080fc3e:    2108        .!      MOVS     r1,#8
;;;503            }
;;;504            memcpy(dis_system_id, p_value, length);
        0x0080fc40:    460a        .F      MOV      r2,r1
        0x0080fc42:    4619        .F      MOV      r1,r3
        0x0080fc44:    4875        uH      LDR      r0,[pc,#468] ; [0x80fe1c] = 0x207e8c
;;;505            break;
        0x0080fc46:    e7d0        ..      B        0x80fbea ; dis_set_parameter + 74
;;;506    #endif
;;;507    
;;;508    #if DIS_CHAR_IEEE_CERTIF_DATA_LIST_SUPPORT
;;;509        case DIS_PARAM_IEEE_DATA_LIST:
;;;510            if (length > DIS_CHAR_IEEE_CERTIF_DATA_LIST_MAX_LENGTH)
        0x0080fc48:    291e        .)      CMP      r1,#0x1e
        0x0080fc4a:    d900        ..      BLS      0x80fc4e ; dis_set_parameter + 174
;;;511            {
;;;512                length = DIS_CHAR_IEEE_CERTIF_DATA_LIST_MAX_LENGTH;
        0x0080fc4c:    211e        .!      MOVS     r1,#0x1e
;;;513            }
;;;514            dis_ieee_data_list_len = length;
        0x0080fc4e:    4873        sH      LDR      r0,[pc,#460] ; [0x80fe1c] = 0x207e8c
        0x0080fc50:    460a        .F      MOV      r2,r1
        0x0080fc52:    3808        .8      SUBS     r0,r0,#8
        0x0080fc54:    7001        .p      STRB     r1,[r0,#0]
;;;515            memcpy(dis_ieee_data_list, p_value, length);
        0x0080fc56:    4619        .F      MOV      r1,r3
        0x0080fc58:    3010        .0      ADDS     r0,r0,#0x10
;;;516            break;
        0x0080fc5a:    e7c6        ..      B        0x80fbea ; dis_set_parameter + 74
;;;517    #endif
;;;518    
;;;519    #if DIS_CHAR_PNP_ID_SUPPORT
;;;520        case DIS_PARAM_PNP_ID:
;;;521            if (length > DIS_PNP_ID_LENGTH)
        0x0080fc5c:    2907        .)      CMP      r1,#7
        0x0080fc5e:    d900        ..      BLS      0x80fc62 ; dis_set_parameter + 194
;;;522            {
;;;523                length = DIS_PNP_ID_LENGTH;
        0x0080fc60:    2107        .!      MOVS     r1,#7
;;;524            }
;;;525            memcpy(dis_pnp_id, p_value, length);
        0x0080fc62:    486e        nH      LDR      r0,[pc,#440] ; [0x80fe1c] = 0x207e8c
        0x0080fc64:    460a        .F      MOV      r2,r1
        0x0080fc66:    4619        .F      MOV      r1,r3
        0x0080fc68:    1fc0        ..      SUBS     r0,r0,#7
;;;526            break;
        0x0080fc6a:    e7be        ..      B        0x80fbea ; dis_set_parameter + 74
    dis_attr_read_cb
;;;527    #endif
;;;528        }
;;;529    
;;;530        if (!ret)
;;;531        {
;;;532            PROFILE_PRINT_ERROR0("DIS parameter set failed");
;;;533        }
;;;534    
;;;535        return ret;
;;;536    }
;;;537    
;;;538    /**
;;;539     * @brief Read characteristic data from service.
;;;540     *
;;;541     * @param[in]   conn_id  Connection id.
;;;542     * @param[in] service_id            ServiceID to be read.
;;;543     * @param[in] attrib_index          Attribute index of getting characteristic data.
;;;544     * @param[in] offset                offset of characteritic to be read.
;;;545     * @param[in,out] length_ptr            length of getting characteristic data.
;;;546     * @param[in,out] pp_value              pointer to pointer of characteristic value to be read.
;;;547     * @return T_APP_RESULT
;;;548    */
;;;549    T_APP_RESULT dis_attr_read_cb(uint8_t conn_id, T_SERVER_ID service_id, uint16_t attrib_index,
;;;550                                  uint16_t offset, uint16_t *length_ptr, uint8_t **pp_value)
;;;551    {
        0x0080fc6c:    e92d47fc    -..G    PUSH     {r2-r10,lr}
        0x0080fc70:    4692        .F      MOV      r10,r2
        0x0080fc72:    e9dd450a    ...E    LDRD     r4,r5,[sp,#0x28]
        0x0080fc76:    460a        .F      MOV      r2,r1
;;;552        T_DIS_CALLBACK_DATA callback_data;
;;;553        T_APP_RESULT  cause  = APP_RESULT_SUCCESS;
        0x0080fc78:    2600        .&      MOVS     r6,#0
;;;554        *length_ptr = 0;
        0x0080fc7a:    8026        &.      STRH     r6,[r4,#0]
;;;555        callback_data.msg_type = SERVICE_CALLBACK_TYPE_READ_CHAR_VALUE;
        0x0080fc7c:    2102        .!      MOVS     r1,#2
        0x0080fc7e:    f88d1004    ....    STRB     r1,[sp,#4]
;;;556        callback_data.conn_id = conn_id;
        0x0080fc82:    f88d0005    ....    STRB     r0,[sp,#5]
;;;557    
;;;558        switch (attrib_index)
        0x0080fc86:    f1aa0002    ....    SUB      r0,r10,#2
        0x0080fc8a:    2708        .'      MOVS     r7,#8
        0x0080fc8c:    f8df8180    ....    LDR      r8,[pc,#384] ; [0x80fe10] = 0x20804c
        0x0080fc90:    f04f0907    O...    MOV      r9,#7
        0x0080fc94:    2811        .(      CMP      r0,#0x11
        0x0080fc96:    d20a        ..      BCS      0x80fcae ; dis_attr_read_cb + 66
        0x0080fc98:    e8dff000    ....    TBB      [pc,r0]
    $d
        0x0080fc9c:    098c091e    ....    DCD    160172318
        0x0080fca0:    0949092c    ,.I.    DCD    155781420
        0x0080fca4:    0957093b    ;.W.    DCD    156698939
        0x0080fca8:    09650913    ..e.    DCD    157616403
        0x0080fcac:    0072        r.      DCW    114
    $t
;;;559        {
;;;560        default:
;;;561            PROFILE_PRINT_ERROR1("dis_attr_read_cb: attrib_index %d", attrib_index);
        0x0080fcae:    4959        YI      LDR      r1,[pc,#356] ; [0x80fe14] = 0x88005d4
        0x0080fcb0:    4653        SF      MOV      r3,r10
        0x0080fcb2:    2201        ."      MOVS     r2,#1
        0x0080fcb4:    311c        .1      ADDS     r1,r1,#0x1c
        0x0080fcb6:    4858        XH      LDR      r0,[pc,#352] ; [0x80fe18] = 0x21103300
        0x0080fcb8:    f7f7ded1    ....    BL       log_buffer ; 0x7a5e
;;;562            cause = APP_RESULT_ATTR_NOT_FOUND;
        0x0080fcbc:    f240460a    @..F    MOV      r6,#0x40a
;;;563            break;
        0x0080fcc0:    e06b        k.      B        0x80fd9a ; dis_attr_read_cb + 302
;;;564    
;;;565    #if DIS_CHAR_SYSTEM_ID_SUPPORT
;;;566        case GATT_SVC_DIS_SYSTEM_ID_INDEX:
;;;567            callback_data.msg_data.read_value_index = DIS_READ_SYSTEM_ID_INDEX;
        0x0080fcc2:    f88d9006    ....    STRB     r9,[sp,#6]
;;;568            pfn_dis_cb(service_id, (void *)&callback_data);
        0x0080fcc6:    4610        .F      MOV      r0,r2
        0x0080fcc8:    f8d82008    ...     LDR      r2,[r8,#8]
        0x0080fccc:    a901        ..      ADD      r1,sp,#4
        0x0080fcce:    4790        .G      BLX      r2
;;;569            *pp_value    = (uint8_t *)&dis_system_id;
        0x0080fcd0:    4852        RH      LDR      r0,[pc,#328] ; [0x80fe1c] = 0x207e8c
;;;570            *length_ptr = sizeof(dis_system_id);
        0x0080fcd2:    6028        (`      STR      r0,[r5,#0]
        0x0080fcd4:    8027        '.      STRH     r7,[r4,#0]
;;;571            break;
        0x0080fcd6:    e060        `.      B        0x80fd9a ; dis_attr_read_cb + 302
;;;572    #endif
;;;573    
;;;574    #if DIS_CHAR_MANUFACTURER_NAME_SUPPORT
;;;575        case GATT_SVC_DIS_MANU_NAME_INDEX:
;;;576            callback_data.msg_data.read_value_index = DIS_READ_MANU_NAME_INDEX;
        0x0080fcd8:    2001        .       MOVS     r0,#1
        0x0080fcda:    f88d0006    ....    STRB     r0,[sp,#6]
;;;577            pfn_dis_cb(service_id, (void *)&callback_data);
        0x0080fcde:    4610        .F      MOV      r0,r2
        0x0080fce0:    f8d82008    ...     LDR      r2,[r8,#8]
        0x0080fce4:    a901        ..      ADD      r1,sp,#4
        0x0080fce6:    4790        .G      BLX      r2
;;;578            *pp_value    = (uint8_t *)&dis_manufacturer_name;
        0x0080fce8:    4849        IH      LDR      r0,[pc,#292] ; [0x80fe10] = 0x20804c
        0x0080fcea:    300c        .0      ADDS     r0,r0,#0xc
;;;579            *length_ptr = dis_manufacturer_name_len;
        0x0080fcec:    6028        (`      STR      r0,[r5,#0]
        0x0080fcee:    f8980000    ....    LDRB     r0,[r8,#0]
;;;580            break;
        0x0080fcf2:    e00c        ..      B        0x80fd0e ; dis_attr_read_cb + 162
;;;581    #endif
;;;582    
;;;583    #if DIS_CHAR_SERIAL_NUMBER_SUPPORT
;;;584        case GATT_SVC_DIS_SERIAL_NUM_INDEX:
;;;585            callback_data.msg_data.read_value_index = DIS_READ_SERIAL_NUM_INDEX;
        0x0080fcf4:    2003        .       MOVS     r0,#3
        0x0080fcf6:    f88d0006    ....    STRB     r0,[sp,#6]
;;;586            pfn_dis_cb(service_id, (void *)&callback_data);
        0x0080fcfa:    4610        .F      MOV      r0,r2
        0x0080fcfc:    f8d82008    ...     LDR      r2,[r8,#8]
        0x0080fd00:    a901        ..      ADD      r1,sp,#4
        0x0080fd02:    4790        .G      BLX      r2
;;;587            *pp_value    = (uint8_t *)&dis_serial_number;
        0x0080fd04:    4842        BH      LDR      r0,[pc,#264] ; [0x80fe10] = 0x20804c
        0x0080fd06:    3034        40      ADDS     r0,r0,#0x34
;;;588            *length_ptr = dis_serial_number_len;
        0x0080fd08:    6028        (`      STR      r0,[r5,#0]
        0x0080fd0a:    f8980002    ....    LDRB     r0,[r8,#2]
        0x0080fd0e:    8020         .      STRH     r0,[r4,#0]
        0x0080fd10:    e043        C.      B        0x80fd9a ; dis_attr_read_cb + 302
;;;589            break;
;;;590    #endif
;;;591    
;;;592    #if DIS_CHAR_FIRMWARE_REVISION_SUPPORT
;;;593        case GATT_SVC_DIS_FIRMWARE_REV_INDEX:
;;;594            callback_data.msg_data.read_value_index = DIS_READ_FIRMWARE_REV_INDEX;
        0x0080fd12:    2005        .       MOVS     r0,#5
        0x0080fd14:    f88d0006    ....    STRB     r0,[sp,#6]
;;;595            pfn_dis_cb(service_id, (void *)&callback_data);
        0x0080fd18:    4610        .F      MOV      r0,r2
        0x0080fd1a:    f8d82008    ...     LDR      r2,[r8,#8]
        0x0080fd1e:    a901        ..      ADD      r1,sp,#4
        0x0080fd20:    4790        .G      BLX      r2
;;;596            *pp_value    = (uint8_t *)&dis_firmware_rev;
        0x0080fd22:    483b        ;H      LDR      r0,[pc,#236] ; [0x80fe10] = 0x20804c
        0x0080fd24:    305c        \0      ADDS     r0,r0,#0x5c
;;;597            *length_ptr = dis_firmware_rev_len;
        0x0080fd26:    6028        (`      STR      r0,[r5,#0]
        0x0080fd28:    f8980004    ....    LDRB     r0,[r8,#4]
;;;598            break;
        0x0080fd2c:    e7ef        ..      B        0x80fd0e ; dis_attr_read_cb + 162
;;;599    #endif
;;;600    
;;;601    #if DIS_CHAR_HARDWARE_REVISION_SUPPORT
;;;602        case GATT_SVC_DIS_HARDWARE_REV_INDEX:
;;;603            callback_data.msg_data.read_value_index = DIS_READ_HARDWARE_REV_INDEX;
        0x0080fd2e:    2004        .       MOVS     r0,#4
        0x0080fd30:    f88d0006    ....    STRB     r0,[sp,#6]
;;;604            pfn_dis_cb(service_id, (void *)&callback_data);
        0x0080fd34:    4610        .F      MOV      r0,r2
        0x0080fd36:    f8d82008    ...     LDR      r2,[r8,#8]
        0x0080fd3a:    a901        ..      ADD      r1,sp,#4
        0x0080fd3c:    4790        .G      BLX      r2
;;;605            *pp_value    = (uint8_t *)&dis_hardware_rev;
        0x0080fd3e:    4834        4H      LDR      r0,[pc,#208] ; [0x80fe10] = 0x20804c
        0x0080fd40:    3048        H0      ADDS     r0,r0,#0x48
;;;606            *length_ptr = dis_hardware_rev_len;
        0x0080fd42:    6028        (`      STR      r0,[r5,#0]
        0x0080fd44:    f8980003    ....    LDRB     r0,[r8,#3]
;;;607            break;
        0x0080fd48:    e7e1        ..      B        0x80fd0e ; dis_attr_read_cb + 162
;;;608    #endif
;;;609    
;;;610    #if DIS_CHAR_SOFTWARE_REVISION_SUPPORT
;;;611        case GATT_SVC_DIS_SOFTWARE_REV_INDEX:
;;;612            callback_data.msg_data.read_value_index = DIS_READ_SOFTWARE_REV_INDEX;
        0x0080fd4a:    2006        .       MOVS     r0,#6
        0x0080fd4c:    f88d0006    ....    STRB     r0,[sp,#6]
;;;613            pfn_dis_cb(service_id, (void *)&callback_data);
        0x0080fd50:    4610        .F      MOV      r0,r2
        0x0080fd52:    f8d82008    ...     LDR      r2,[r8,#8]
        0x0080fd56:    a901        ..      ADD      r1,sp,#4
        0x0080fd58:    4790        .G      BLX      r2
;;;614            *pp_value    = (uint8_t *)&dis_software_rev;
        0x0080fd5a:    482d        -H      LDR      r0,[pc,#180] ; [0x80fe10] = 0x20804c
        0x0080fd5c:    3070        p0      ADDS     r0,r0,#0x70
;;;615            *length_ptr = dis_software_rev_len;
        0x0080fd5e:    6028        (`      STR      r0,[r5,#0]
        0x0080fd60:    f8980005    ....    LDRB     r0,[r8,#5]
;;;616            break;
        0x0080fd64:    e7d3        ..      B        0x80fd0e ; dis_attr_read_cb + 162
;;;617    #endif
;;;618    
;;;619    #if DIS_CHAR_IEEE_CERTIF_DATA_LIST_SUPPORT
;;;620        case GATT_SVC_DIS_IEEE_CERT_STR_INDEX:
;;;621            callback_data.msg_data.read_value_index = DIS_READ_IEEE_CERT_STR_INDEX;
        0x0080fd66:    f88d7006    ...p    STRB     r7,[sp,#6]
;;;622            pfn_dis_cb(service_id, (void *)&callback_data);
        0x0080fd6a:    4610        .F      MOV      r0,r2
        0x0080fd6c:    f8d82008    ...     LDR      r2,[r8,#8]
        0x0080fd70:    a901        ..      ADD      r1,sp,#4
        0x0080fd72:    4790        .G      BLX      r2
;;;623            *pp_value    = (uint8_t *)&dis_ieee_data_list;
        0x0080fd74:    4829        )H      LDR      r0,[pc,#164] ; [0x80fe1c] = 0x207e8c
        0x0080fd76:    3008        .0      ADDS     r0,r0,#8
;;;624            *length_ptr = dis_ieee_data_list_len;
        0x0080fd78:    6028        (`      STR      r0,[r5,#0]
        0x0080fd7a:    3810        .8      SUBS     r0,r0,#0x10
        0x0080fd7c:    7800        .x      LDRB     r0,[r0,#0]
;;;625            break;
        0x0080fd7e:    e7c6        ..      B        0x80fd0e ; dis_attr_read_cb + 162
;;;626    #endif
;;;627    
;;;628    #if DIS_CHAR_PNP_ID_SUPPORT
;;;629        case GATT_SVC_DIS_PNP_ID_INDEX:
;;;630            callback_data.msg_data.read_value_index = DIS_READ_PNP_ID_INDEX;
        0x0080fd80:    2009        .       MOVS     r0,#9
        0x0080fd82:    f88d0006    ....    STRB     r0,[sp,#6]
;;;631            pfn_dis_cb(service_id, (void *)&callback_data);
        0x0080fd86:    4610        .F      MOV      r0,r2
        0x0080fd88:    f8d82008    ...     LDR      r2,[r8,#8]
        0x0080fd8c:    a901        ..      ADD      r1,sp,#4
        0x0080fd8e:    4790        .G      BLX      r2
;;;632            *pp_value    = (uint8_t *)&dis_pnp_id;
        0x0080fd90:    4822        "H      LDR      r0,[pc,#136] ; [0x80fe1c] = 0x207e8c
        0x0080fd92:    1fc0        ..      SUBS     r0,r0,#7
;;;633            *length_ptr = sizeof(dis_pnp_id);
        0x0080fd94:    6028        (`      STR      r0,[r5,#0]
        0x0080fd96:    f8a49000    ....    STRH     r9,[r4,#0]
        0x0080fd9a:    8820         .      LDRH     r0,[r4,#0]
        0x0080fd9c:    9000        ..      STR      r0,[sp,#0]
        0x0080fd9e:    491d        .I      LDR      r1,[pc,#116] ; [0x80fe14] = 0x88005d4
        0x0080fda0:    481d        .H      LDR      r0,[pc,#116] ; [0x80fe18] = 0x21103300
        0x0080fda2:    4653        SF      MOV      r3,r10
        0x0080fda4:    2202        ."      MOVS     r2,#2
        0x0080fda6:    3144        D1      ADDS     r1,r1,#0x44
        0x0080fda8:    1c80        ..      ADDS     r0,r0,#2
        0x0080fdaa:    f7f7de58    ..X.    BL       log_buffer ; 0x7a5e
        0x0080fdae:    4630        0F      MOV      r0,r6
        0x0080fdb0:    e8bd87fc    ....    POP      {r2-r10,pc}
;;;634            break;
;;;635    #endif
;;;636    
;;;637    #if DIS_CHAR_MODEL_NUMBER_SUPPORT
;;;638        case GATT_SVC_DIS_MODEL_NUM_INDEX:
;;;639            callback_data.msg_data.read_value_index = DIS_READ_MODEL_NUM_INDEX;
        0x0080fdb4:    f88d1006    ....    STRB     r1,[sp,#6]
;;;640            pfn_dis_cb(service_id, (void *)&callback_data);
        0x0080fdb8:    4610        .F      MOV      r0,r2
        0x0080fdba:    f8d82008    ...     LDR      r2,[r8,#8]
        0x0080fdbe:    a901        ..      ADD      r1,sp,#4
        0x0080fdc0:    4790        .G      BLX      r2
;;;641            *pp_value    = (uint8_t *)&dis_model_number;
        0x0080fdc2:    4813        .H      LDR      r0,[pc,#76] ; [0x80fe10] = 0x20804c
        0x0080fdc4:    3020         0      ADDS     r0,r0,#0x20
;;;642            *length_ptr = dis_model_number_len;
        0x0080fdc6:    6028        (`      STR      r0,[r5,#0]
        0x0080fdc8:    f8980001    ....    LDRB     r0,[r8,#1]
;;;643            break;
        0x0080fdcc:    e79f        ..      B        0x80fd0e ; dis_attr_read_cb + 162
    dis_add_service
;;;644    #endif
;;;645    
;;;646        }
;;;647    
;;;648        PROFILE_PRINT_INFO2("dis_attr_read_cb: attrib_index %d, *length_ptr %d",
;;;649                            attrib_index,
;;;650                            *length_ptr);
;;;651        return (cause);
;;;652    }
;;;653    
;;;654    const T_FUN_GATT_SERVICE_CBS dis_cbs =
;;;655    {
;;;656        dis_attr_read_cb,  // Read callback function pointer
;;;657        NULL, // Write callback function pointer
;;;658        NULL  // Authorization callback function pointer
;;;659    };
;;;660    
;;;661    /**
;;;662      * @brief Add device information service to the BLE stack database.
;;;663      *
;;;664      * @param[in]   p_func  Callback when service attribute was read, write or cccd update.
;;;665      * @return Service id generated by the BLE stack: @ref T_SERVER_ID.
;;;666      * @retval 0xFF Operation failure.
;;;667      * @retval others Service id assigned by stack.
;;;668      *
;;;669      * <b>Example usage</b>
;;;670      * \code{.c}
;;;671        void profile_init()
;;;672        {
;;;673            server_init(1);
;;;674            dis_id = dis_add_service(app_handle_profile_message);
;;;675        }
;;;676      * \endcode
;;;677      */
;;;678    T_SERVER_ID dis_add_service(void *p_func)
;;;679    {
        0x0080fdce:    b53e        >.      PUSH     {r1-r5,lr}
        0x0080fdd0:    4604        .F      MOV      r4,r0
;;;680        T_SERVER_ID service_id;
;;;681        if (false == server_add_service(&service_id,
        0x0080fdd2:    4813        .H      LDR      r0,[pc,#76] ; [0x80fe20] = 0x810e6c
        0x0080fdd4:    e9d01206    ....    LDRD     r1,r2,[r0,#0x18]
        0x0080fdd8:    e9cd1200    ....    STRD     r1,r2,[sp,#0]
        0x0080fddc:    f5a07100    ...q    SUB      r1,r0,#0x200
        0x0080fde0:    6943        Ci      LDR      r3,[r0,#0x14]
        0x0080fde2:    f44f7205    O..r    MOV      r2,#0x214
        0x0080fde6:    a802        ..      ADD      r0,sp,#8
        0x0080fde8:    f43ff441    ?.A.    BL       server_add_service ; 0x4f66e
        0x0080fdec:    b950        P.      CBNZ     r0,0x80fe04 ; dis_add_service + 54
;;;682                                        (uint8_t *)dis_attr_tbl,
;;;683                                        dis_attr_tbl_size,
;;;684                                        dis_cbs))
;;;685        {
;;;686            PROFILE_PRINT_ERROR1("dis_add_service: service_id %d", service_id);
        0x0080fdee:    4909        .I      LDR      r1,[pc,#36] ; [0x80fe14] = 0x88005d4
        0x0080fdf0:    f89d3008    ...0    LDRB     r3,[sp,#8]
        0x0080fdf4:    2201        ."      MOVS     r2,#1
        0x0080fdf6:    317c        |1      ADDS     r1,r1,#0x7c
        0x0080fdf8:    4807        .H      LDR      r0,[pc,#28] ; [0x80fe18] = 0x21103300
        0x0080fdfa:    f7f7de30    ..0.    BL       log_buffer ; 0x7a5e
;;;687            service_id = 0xff;
        0x0080fdfe:    20ff        .       MOVS     r0,#0xff
        0x0080fe00:    f88d0008    ....    STRB     r0,[sp,#8]
;;;688        }
;;;689        pfn_dis_cb = (P_FUN_SERVER_GENERAL_CB)p_func;
        0x0080fe04:    4802        .H      LDR      r0,[pc,#8] ; [0x80fe10] = 0x20804c
;;;690        return service_id;
        0x0080fe06:    6084        .`      STR      r4,[r0,#8]
        0x0080fe08:    f89d0008    ....    LDRB     r0,[sp,#8]
;;;691    }
        0x0080fe0c:    bd3e        >.      POP      {r1-r5,pc}
    $d
        0x0080fe0e:    0000        ..      DCW    0
        0x0080fe10:    0020804c    L. .    DCD    2129996
        0x0080fe14:    088005d4    ....    DCD    142607828
        0x0080fe18:    21103300    .3.!    DCD    554709760
        0x0080fe1c:    00207e8c    .~ .    DCD    2129548
        0x0080fe20:    00810e6c    l...    DCD    8457836
    $t
    .text
    app_handle_authen_state_evt
;;; ..\include\SDK\src\app\pxp\pxp_app.c
;;;241    {
        0x0080fe24:    b5f8        ..      PUSH     {r3-r7,lr}
        0x0080fe26:    4efa        .N      LDR      r6,[pc,#1000] ; [0x810210] = 0x21103002
;;; ..\include\SDK\src\app\pxp\pxp_app.c (241)
        0x0080fe28:    4615        .F      MOV      r5,r2
        0x0080fe2a:    460c        .F      MOV      r4,r1
;;;242        APP_PRINT_INFO2("app_handle_authen_state_evt:conn_id %d, cause 0x%x", conn_id, cause);
        0x0080fe2c:    4603        .F      MOV      r3,r0
        0x0080fe2e:    9200        ..      STR      r2,[sp,#0]
        0x0080fe30:    2202        ."      MOVS     r2,#2
        0x0080fe32:    49f6        .I      LDR      r1,[pc,#984] ; [0x81020c] = 0x8800880
        0x0080fe34:    4630        0F      MOV      r0,r6
        0x0080fe36:    f7f7de12    ....    BL       log_buffer ; 0x7a5e
;;;243    
;;;244        switch (new_state)
        0x0080fe3a:    b154        T.      CBZ      r4,0x80fe52 ; app_handle_authen_state_evt + 46
        0x0080fe3c:    2c01        .,      CMP      r4,#1
        0x0080fe3e:    d00c        ..      BEQ      0x80fe5a ; app_handle_authen_state_evt + 54
        0x0080fe40:    2201        ."      MOVS     r2,#1
        0x0080fe42:    b001        ..      ADD      sp,sp,#4
        0x0080fe44:    4623        #F      MOV      r3,r4
        0x0080fe46:    1eb0        ..      SUBS     r0,r6,#2
        0x0080fe48:    e8bd40f0    ...@    POP      {r4-r7,lr}
        0x0080fe4c:    49f1        .I      LDR      r1,[pc,#964] ; [0x810214] = 0x8800984
        0x0080fe4e:    f7f79e06    ....    B        log_buffer ; 0x7a5e
;;;245        {
;;;246        case GAP_AUTHEN_STATE_STARTED:
;;;247            {
;;;248                APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_STARTED");
        0x0080fe52:    49ee        .I      LDR      r1,[pc,#952] ; [0x81020c] = 0x8800880
        0x0080fe54:    2200        ."      MOVS     r2,#0
        0x0080fe56:    3138        81      ADDS     r1,r1,#0x38
;;;249            }
;;;250            break;
        0x0080fe58:    e003        ..      B        0x80fe62 ; app_handle_authen_state_evt + 62
;;;251    
;;;252        case GAP_AUTHEN_STATE_COMPLETE:
;;;253            {
;;;254                if (cause == GAP_SUCCESS)
        0x0080fe5a:    b13d        =.      CBZ      r5,0x80fe6c ; app_handle_authen_state_evt + 72
        0x0080fe5c:    49ed        .I      LDR      r1,[pc,#948] ; [0x810214] = 0x8800984
        0x0080fe5e:    2200        ."      MOVS     r2,#0
        0x0080fe60:    3948        H9      SUBS     r1,r1,#0x48
        0x0080fe62:    4630        0F      MOV      r0,r6
        0x0080fe64:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x0080fe68:    f7f79df9    ....    B        log_buffer ; 0x7a5e
;;;255                {
;;;256                    StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK | BEEP_ALERT, 1);
        0x0080fe6c:    2301        .#      MOVS     r3,#1
        0x0080fe6e:    2203        ."      MOVS     r2,#3
        0x0080fe70:    2164        d!      MOVS     r1,#0x64
        0x0080fe72:    f44f7061    O.ap    MOV      r0,#0x384
        0x0080fe76:    f7fefd96    ....    BL       StartPxpIO ; 0x80e9a6
;;;257    
;;;258                    ChangeConnectionParameter(400, 0, 2000); //interval = 400*1.25ms
        0x0080fe7a:    f44f62fa    O..b    MOV      r2,#0x7d0
        0x0080fe7e:    2100        .!      MOVS     r1,#0
        0x0080fe80:    f44f70c8    O..p    MOV      r0,#0x190
        0x0080fe84:    f7fefef2    ....    BL       ChangeConnectionParameter ; 0x80ec6c
;;;259                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair success");
        0x0080fe88:    49e0        .I      LDR      r1,[pc,#896] ; [0x81020c] = 0x8800880
        0x0080fe8a:    2200        ."      MOVS     r2,#0
        0x0080fe8c:    3174        t1      ADDS     r1,r1,#0x74
        0x0080fe8e:    e7e8        ..      B        0x80fe62 ; app_handle_authen_state_evt + 62
    app_handle_conn_param_update_evt
;;;260    
;;;261                }
;;;262                else
;;;263                {
;;;264                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair failed");
;;;265                }
;;;266            }
;;;267            break;
;;;268    
;;;269        default:
;;;270            {
;;;271                APP_PRINT_ERROR1("app_handle_authen_state_evt: unknown newstate %d", new_state);
;;;272            }
;;;273            break;
;;;274        }
;;;275    }
;;;276    
;;;277    /**
;;;278     * @brief    Handle msg GAP_MSG_LE_CONN_MTU_INFO
;;;279     * @note     This msg is used to inform APP that exchange mtu procedure is completed.
;;;280     * @param[in] conn_id Connection ID
;;;281     * @param[in] mtu_size  New mtu size
;;;282     * @return   void
;;;283     */
;;;284    void app_handle_conn_mtu_info_evt(uint8_t conn_id, uint16_t mtu_size)
;;;285    {
;;;286        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
;;;287    }
;;;288    
;;;289    
;;;290    /**
;;;291     * @brief    Handle msg GAP_MSG_LE_CONN_PARAM_UPDATE
;;;292     * @note     All the connection parameter update change  events are pre-handled in this function.
;;;293     * @param[in] conn_id Connection ID
;;;294     * @param[in] status  New update state
;;;295     * @param[in] cause Use this cause when status is GAP_CONN_PARAM_UPDATE_STATUS_FAIL
;;;296     * @return   void
;;;297     */
;;;298    void app_handle_conn_param_update_evt(uint8_t conn_id, uint8_t status, uint16_t cause)
;;;299    {
        0x0080fe90:    b530        0.      PUSH     {r4,r5,lr}
        0x0080fe92:    4cdf        .L      LDR      r4,[pc,#892] ; [0x810210] = 0x21103002
;;; ..\include\SDK\src\app\pxp\pxp_app.c (299)
        0x0080fe94:    b085        ..      SUB      sp,sp,#0x14
        0x0080fe96:    4605        .F      MOV      r5,r0
        0x0080fe98:    b159        Y.      CBZ      r1,0x80feb2 ; app_handle_conn_param_update_evt + 34
;;;300        switch (status)
        0x0080fe9a:    2901        .)      CMP      r1,#1
        0x0080fe9c:    d02b        +.      BEQ      0x80fef6 ; app_handle_conn_param_update_evt + 102
        0x0080fe9e:    2902        .)      CMP      r1,#2
        0x0080fea0:    d127        '.      BNE      0x80fef2 ; app_handle_conn_param_update_evt + 98
        0x0080fea2:    b005        ..      ADD      sp,sp,#0x14
        0x0080fea4:    4620         F      MOV      r0,r4
        0x0080fea6:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x0080feaa:    2200        ."      MOVS     r2,#0
        0x0080feac:    49da        .I      LDR      r1,[pc,#872] ; [0x810218] = 0x8800ab4
        0x0080feae:    f7f79dd6    ....    B        log_buffer ; 0x7a5e
;;;301        {
;;;302        case GAP_CONN_PARAM_UPDATE_STATUS_SUCCESS:
;;;303            {
;;;304                uint16_t conn_interval;
;;;305                uint16_t conn_slave_latency;
;;;306                uint16_t conn_supervision_timeout;
;;;307    
;;;308                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
        0x0080feb2:    4602        .F      MOV      r2,r0
        0x0080feb4:    a904        ..      ADD      r1,sp,#0x10
        0x0080feb6:    f2402072    @.r     MOV      r0,#0x272
        0x0080feba:    f43df5e0    =...    BL       le_get_conn_param ; 0x4da7e
;;;309                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_slave_latency, conn_id);
        0x0080febe:    462a        *F      MOV      r2,r5
        0x0080fec0:    a903        ..      ADD      r1,sp,#0xc
        0x0080fec2:    f2402073    @.s     MOV      r0,#0x273
        0x0080fec6:    f43df5da    =...    BL       le_get_conn_param ; 0x4da7e
;;;310                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
        0x0080feca:    462a        *F      MOV      r2,r5
        0x0080fecc:    a902        ..      ADD      r1,sp,#8
        0x0080fece:    f44f701d    O..p    MOV      r0,#0x274
        0x0080fed2:    f43df5d4    =...    BL       le_get_conn_param ; 0x4da7e
;;;311                APP_PRINT_INFO3("app_handle_conn_param_update_evt update success:conn_interval 0x%x, conn_slave_latency 0x%x, conn_supervision_timeout 0x%x",
        0x0080fed6:    f8bd1008    ....    LDRH     r1,[sp,#8]
        0x0080feda:    f8bd000c    ....    LDRH     r0,[sp,#0xc]
        0x0080fede:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x0080fee2:    49cc        .I      LDR      r1,[pc,#816] ; [0x810214] = 0x8800984
        0x0080fee4:    f8bd3010    ...0    LDRH     r3,[sp,#0x10]
        0x0080fee8:    2203        ."      MOVS     r2,#3
        0x0080feea:    3170        p1      ADDS     r1,r1,#0x70
        0x0080feec:    4620         F      MOV      r0,r4
        0x0080feee:    f7f7ddb6    ....    BL       log_buffer ; 0x7a5e
        0x0080fef2:    b005        ..      ADD      sp,sp,#0x14
        0x0080fef4:    bd30        0.      POP      {r4,r5,pc}
;;;312                                conn_interval, conn_slave_latency, conn_supervision_timeout);
;;;313            }
;;;314            break;
;;;315    
;;;316        case GAP_CONN_PARAM_UPDATE_STATUS_FAIL:
;;;317            {
;;;318                APP_PRINT_ERROR1("app_handle_conn_param_update_evt update failed: cause 0x%x", cause);
        0x0080fef6:    b005        ..      ADD      sp,sp,#0x14
        0x0080fef8:    49c7        .I      LDR      r1,[pc,#796] ; [0x810218] = 0x8800ab4
        0x0080fefa:    4613        .F      MOV      r3,r2
        0x0080fefc:    48c4        .H      LDR      r0,[pc,#784] ; [0x810210] = 0x21103002
        0x0080fefe:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x0080ff02:    2201        ."      MOVS     r2,#1
        0x0080ff04:    3940        @9      SUBS     r1,r1,#0x40
        0x0080ff06:    1e80        ..      SUBS     r0,r0,#2
        0x0080ff08:    f7f79da9    ....    B        log_buffer ; 0x7a5e
    app_handle_conn_mtu_info_evt
        0x0080ff0c:    b508        ..      PUSH     {r3,lr}
        0x0080ff0e:    4603        .F      MOV      r3,r0
        0x0080ff10:    9100        ..      STR      r1,[sp,#0]
        0x0080ff12:    49c0        .I      LDR      r1,[pc,#768] ; [0x810214] = 0x8800984
        0x0080ff14:    2202        ."      MOVS     r2,#2
        0x0080ff16:    3134        41      ADDS     r1,r1,#0x34
        0x0080ff18:    48bd        .H      LDR      r0,[pc,#756] ; [0x810210] = 0x21103002
        0x0080ff1a:    f7f7dda0    ....    BL       log_buffer ; 0x7a5e
        0x0080ff1e:    bd08        ..      POP      {r3,pc}
    app_handle_conn_state_evt
;;; ..\include\SDK\src\app\pxp\pxp_app.c (170)
        0x0080ff20:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0080ff24:    4dbd        .M      LDR      r5,[pc,#756] ; [0x81021c] = 0x2080d0
;;; ..\include\SDK\src\app\pxp\pxp_app.c (170)
        0x0080ff26:    4680        .F      MOV      r8,r0
        0x0080ff28:    b08a        ..      SUB      sp,sp,#0x28
        0x0080ff2a:    4616        .F      MOV      r6,r2
        0x0080ff2c:    460c        .F      MOV      r4,r1
;;;171        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d old_state %d new_state %d, disc_cause 0x%x",
        0x0080ff2e:    7928        (y      LDRB     r0,[r5,#4]
        0x0080ff30:    4fb7        .O      LDR      r7,[pc,#732] ; [0x810210] = 0x21103002
        0x0080ff32:    e88d0051    ..Q.    STM      sp,{r0,r4,r6}
        0x0080ff36:    4643        CF      MOV      r3,r8
        0x0080ff38:    2204        ."      MOVS     r2,#4
        0x0080ff3a:    49b9        .I      LDR      r1,[pc,#740] ; [0x810220] = 0x8800748
        0x0080ff3c:    4638        8F      MOV      r0,r7
        0x0080ff3e:    f7f7dd8e    ....    BL       log_buffer ; 0x7a5e
;;;172                        conn_id, gap_conn_state, new_state, disc_cause);
;;;173        switch (new_state)
        0x0080ff42:    b114        ..      CBZ      r4,0x80ff4a ; app_handle_conn_state_evt + 42
        0x0080ff44:    2c02        .,      CMP      r4,#2
        0x0080ff46:    d163        c.      BNE      0x810010 ; app_handle_conn_state_evt + 240
        0x0080ff48:    e034        4.      B        0x80ffb4 ; app_handle_conn_state_evt + 148
        0x0080ff4a:    4fb1        .O      LDR      r7,[pc,#708] ; [0x810210] = 0x21103002
;;;174        {
;;;175        case GAP_CONN_STATE_DISCONNECTED:
;;;176            {
;;;177                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
        0x0080ff4c:    f5a67080    ...p    SUB      r0,r6,#0x100
        0x0080ff50:    1ebf        ..      SUBS     r7,r7,#2
        0x0080ff52:    3813        .8      SUBS     r0,r0,#0x13
        0x0080ff54:    d009        ..      BEQ      0x80ff6a ; app_handle_conn_state_evt + 74
;;;178                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
        0x0080ff56:    f5b67f8b    ....    CMP      r6,#0x116
        0x0080ff5a:    d006        ..      BEQ      0x80ff6a ; app_handle_conn_state_evt + 74
;;;179                {
;;;180                    APP_PRINT_ERROR1("app_handle_conn_state_evt: connection lost cause 0x%x", disc_cause);
        0x0080ff5c:    49b0        .I      LDR      r1,[pc,#704] ; [0x810220] = 0x8800748
        0x0080ff5e:    4633        3F      MOV      r3,r6
        0x0080ff60:    2201        ."      MOVS     r2,#1
        0x0080ff62:    3154        T1      ADDS     r1,r1,#0x54
        0x0080ff64:    4638        8F      MOV      r0,r7
        0x0080ff66:    f7f7dd7a    ..z.    BL       log_buffer ; 0x7a5e
;;;181                }
;;;182                gPxpState = PxpStateIdle;
        0x0080ff6a:    2000        .       MOVS     r0,#0
        0x0080ff6c:    7028        (p      STRB     r0,[r5,#0]
;;;183                if (gPowerFlg == true)
        0x0080ff6e:    78a8        .x      LDRB     r0,[r5,#2]
        0x0080ff70:    b1f8        ..      CBZ      r0,0x80ffb2 ; app_handle_conn_state_evt + 146
;;;184                {
;;;185                    le_adv_start();
        0x0080ff72:    f442f0a8    B...    BL       le_adv_start ; 0x520c6
;;;186                    APP_PRINT_ERROR1("g_pxp_linkloss_alert_level is %d", g_pxp_linkloss_alert_level);
        0x0080ff76:    4eab        .N      LDR      r6,[pc,#684] ; [0x810224] = 0x207eb4
        0x0080ff78:    49a9        .I      LDR      r1,[pc,#676] ; [0x810220] = 0x8800748
        0x0080ff7a:    2201        ."      MOVS     r2,#1
        0x0080ff7c:    7833        3x      LDRB     r3,[r6,#0]
        0x0080ff7e:    3190        .1      ADDS     r1,r1,#0x90
        0x0080ff80:    4638        8F      MOV      r0,r7
        0x0080ff82:    f7f7dd6c    ..l.    BL       log_buffer ; 0x7a5e
;;;187                    gIoState = IoStateLlsAlert;
        0x0080ff86:    2003        .       MOVS     r0,#3
        0x0080ff88:    7068        hp      STRB     r0,[r5,#1]
;;;188                    if (g_pxp_linkloss_alert_level == 1)
        0x0080ff8a:    7830        0x      LDRB     r0,[r6,#0]
        0x0080ff8c:    f44f7761    O.aw    MOV      r7,#0x384
        0x0080ff90:    2801        .(      CMP      r0,#1
        0x0080ff92:    d105        ..      BNE      0x80ffa0 ; app_handle_conn_state_evt + 128
;;;189                    {
;;;190                        StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK, LL_ASSERT_TIME);
        0x0080ff94:    2201        ."      MOVS     r2,#1
        0x0080ff96:    2164        d!      MOVS     r1,#0x64
        0x0080ff98:    4638        8F      MOV      r0,r7
        0x0080ff9a:    6873        sh      LDR      r3,[r6,#4]
        0x0080ff9c:    f7fefd03    ....    BL       StartPxpIO ; 0x80e9a6
;;;191                    }
;;;192                    if (g_pxp_linkloss_alert_level == 2)
        0x0080ffa0:    7830        0x      LDRB     r0,[r6,#0]
        0x0080ffa2:    2802        .(      CMP      r0,#2
        0x0080ffa4:    d134        4.      BNE      0x810010 ; app_handle_conn_state_evt + 240
;;;193                    {
;;;194                        StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK | BEEP_ALERT, LL_ASSERT_TIME);
        0x0080ffa6:    2203        ."      MOVS     r2,#3
        0x0080ffa8:    2164        d!      MOVS     r1,#0x64
        0x0080ffaa:    4638        8F      MOV      r0,r7
        0x0080ffac:    6873        sh      LDR      r3,[r6,#4]
        0x0080ffae:    f7fefcfa    ....    BL       StartPxpIO ; 0x80e9a6
        0x0080ffb2:    e02d        -.      B        0x810010 ; app_handle_conn_state_evt + 240
;;;195                    }
;;;196                    else
;;;197                    {
;;;198                        //nothing to do
;;;199                    }
;;;200                }
;;;201            }
;;;202            break;
;;;203    
;;;204        case GAP_CONN_STATE_CONNECTED:
;;;205            {
;;;206                uint16_t conn_interval;
;;;207                uint16_t conn_latency;
;;;208                uint16_t conn_supervision_timeout;
;;;209                uint8_t  remote_bd[6];
;;;210                T_GAP_REMOTE_ADDR_TYPE remote_bd_type;
;;;211    
;;;212                gPxpState = PxpStateLink;
        0x0080ffb4:    2002        .       MOVS     r0,#2
        0x0080ffb6:    7028        (p      STRB     r0,[r5,#0]
;;;213    
;;;214                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
        0x0080ffb8:    4642        BF      MOV      r2,r8
        0x0080ffba:    a906        ..      ADD      r1,sp,#0x18
        0x0080ffbc:    f2402072    @.r     MOV      r0,#0x272
        0x0080ffc0:    f43df55d    =.].    BL       le_get_conn_param ; 0x4da7e
;;;215                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_latency, conn_id);
        0x0080ffc4:    4642        BF      MOV      r2,r8
        0x0080ffc6:    a908        ..      ADD      r1,sp,#0x20
        0x0080ffc8:    f2402073    @.s     MOV      r0,#0x273
        0x0080ffcc:    f43df557    =.W.    BL       le_get_conn_param ; 0x4da7e
;;;216                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
        0x0080ffd0:    4642        BF      MOV      r2,r8
        0x0080ffd2:    a909        ..      ADD      r1,sp,#0x24
        0x0080ffd4:    f44f701d    O..p    MOV      r0,#0x274
        0x0080ffd8:    f43df551    =.Q.    BL       le_get_conn_param ; 0x4da7e
;;;217                le_get_conn_addr(conn_id, remote_bd, &remote_bd_type);
        0x0080ffdc:    aa07        ..      ADD      r2,sp,#0x1c
        0x0080ffde:    a904        ..      ADD      r1,sp,#0x10
        0x0080ffe0:    4640        @F      MOV      r0,r8
        0x0080ffe2:    f43df604    =...    BL       le_get_conn_addr ; 0x4dbee
;;;218                APP_PRINT_INFO5("GAP_CONN_STATE_CONNECTED:remote_bd %s, remote_addr_type %d, conn_interval 0x%x, conn_latency 0x%x, conn_supervision_timeout 0x%x",
        0x0080ffe6:    a904        ..      ADD      r1,sp,#0x10
        0x0080ffe8:    488f        .H      LDR      r0,[pc,#572] ; [0x810228] = 0x21300000
        0x0080ffea:    f7f7def5    ....    BL       trace_bdaddr ; 0x7dd8
        0x0080ffee:    4603        .F      MOV      r3,r0
        0x0080fff0:    f89d001c    ....    LDRB     r0,[sp,#0x1c]
        0x0080fff4:    f8bd6024    ..$`    LDRH     r6,[sp,#0x24]
        0x0080fff8:    f8bd2020    ..      LDRH     r2,[sp,#0x20]
        0x0080fffc:    f8bd1018    ....    LDRH     r1,[sp,#0x18]
        0x00810000:    e88d0047    ..G.    STM      sp,{r0-r2,r6}
        0x00810004:    4981        .I      LDR      r1,[pc,#516] ; [0x81020c] = 0x8800880
        0x00810006:    2205        ."      MOVS     r2,#5
        0x00810008:    3984        .9      SUBS     r1,r1,#0x84
        0x0081000a:    4638        8F      MOV      r0,r7
        0x0081000c:    f7f7dd27    ..'.    BL       log_buffer ; 0x7a5e
;;;219                                TRACE_BDADDR(remote_bd), remote_bd_type,
;;;220                                conn_interval, conn_latency, conn_supervision_timeout);
;;;221            }
;;;222            break;
;;;223    
;;;224        default:
;;;225            break;
;;;226        }
;;;227        gap_conn_state = new_state;
        0x00810010:    712c        ,q      STRB     r4,[r5,#4]
;;;228    }
        0x00810012:    b00a        ..      ADD      sp,sp,#0x28
        0x00810014:    e8bd81f0    ....    POP      {r4-r8,pc}
    app_handle_dev_state_evt
        0x00810018:    e92d47fc    -..G    PUSH     {r2-r10,lr}
        0x0081001c:    b2c4        ..      UXTB     r4,r0
;;; ..\include\SDK\src\app\pxp\pxp_app.c (119)
        0x0081001e:    f3c40581    ....    UBFX     r5,r4,#2,#2
        0x00810022:    e9cd5100    ...Q    STRD     r5,r1,[sp,#0]
        0x00810026:    497e        ~I      LDR      r1,[pc,#504] ; [0x810220] = 0x8800748
        0x00810028:    f8dfa1e4    ....    LDR      r10,[pc,#484] ; [0x810210] = 0x21103002
        0x0081002c:    f0040701    ....    AND      r7,r4,#1
        0x00810030:    463b        ;F      MOV      r3,r7
        0x00810032:    2203        ."      MOVS     r2,#3
        0x00810034:    39b4        .9      SUBS     r1,r1,#0xb4
        0x00810036:    4650        PF      MOV      r0,r10
        0x00810038:    f7f7dd11    ....    BL       log_buffer ; 0x7a5e
;;;120                        new_state.gap_init_state, new_state.gap_adv_state, cause);
;;;121        if (gap_dev_state.gap_init_state != new_state.gap_init_state)
        0x0081003c:    f8df91dc    ....    LDR      r9,[pc,#476] ; [0x81021c] = 0x2080d0
        0x00810040:    4e76        vN      LDR      r6,[pc,#472] ; [0x81021c] = 0x2080d0
        0x00810042:    f1090903    ....    ADD      r9,r9,#3
        0x00810046:    f04f0800    O...    MOV      r8,#0
        0x0081004a:    f8990000    ....    LDRB     r0,[r9,#0]
        0x0081004e:    f0000001    ....    AND      r0,r0,#1
        0x00810052:    42b8        .B      CMP      r0,r7
        0x00810054:    d009        ..      BEQ      0x81006a ; app_handle_dev_state_evt + 82
;;;122        {
;;;123            if (new_state.gap_init_state == GAP_INIT_STATE_STACK_READY)
        0x00810056:    07e0        ..      LSLS     r0,r4,#31
        0x00810058:    d007        ..      BEQ      0x81006a ; app_handle_dev_state_evt + 82
;;;124            {
;;;125                APP_PRINT_INFO0("GAP stack ready");
        0x0081005a:    4971        qI      LDR      r1,[pc,#452] ; [0x810220] = 0x8800748
        0x0081005c:    2200        ."      MOVS     r2,#0
        0x0081005e:    396c        l9      SUBS     r1,r1,#0x6c
        0x00810060:    4650        PF      MOV      r0,r10
        0x00810062:    f7f7dcfc    ....    BL       log_buffer ; 0x7a5e
;;;126                gPowerFlg = false;
        0x00810066:    f8868002    ....    STRB     r8,[r6,#2]
;;;127            }
;;;128        }
;;;129    
;;;130        if (gap_dev_state.gap_adv_state != new_state.gap_adv_state)
        0x0081006a:    f8990000    ....    LDRB     r0,[r9,#0]
        0x0081006e:    f3c00081    ....    UBFX     r0,r0,#2,#2
        0x00810072:    42a8        .B      CMP      r0,r5
        0x00810074:    d027        '.      BEQ      0x8100c6 ; app_handle_dev_state_evt + 174
;;;131        {
;;;132            if (new_state.gap_adv_state == GAP_ADV_STATE_IDLE)
        0x00810076:    f0140f0c    ....    TST      r4,#0xc
        0x0081007a:    d002        ..      BEQ      0x810082 ; app_handle_dev_state_evt + 106
        0x0081007c:    2d02        .-      CMP      r5,#2
        0x0081007e:    d00f        ..      BEQ      0x8100a0 ; app_handle_dev_state_evt + 136
        0x00810080:    e021        !.      B        0x8100c6 ; app_handle_dev_state_evt + 174
;;;133            {
;;;134                if (new_state.gap_adv_sub_state == GAP_ADV_TO_IDLE_CAUSE_CONN)
        0x00810082:    07a0        ..      LSLS     r0,r4,#30
        0x00810084:    d503        ..      BPL      0x81008e ; app_handle_dev_state_evt + 118
;;;135                {
;;;136                    APP_PRINT_INFO0("GAP adv stoped: because connection created");
        0x00810086:    4966        fI      LDR      r1,[pc,#408] ; [0x810220] = 0x8800748
        0x00810088:    2200        ."      MOVS     r2,#0
        0x0081008a:    3958        X9      SUBS     r1,r1,#0x58
        0x0081008c:    e004        ..      B        0x810098 ; app_handle_dev_state_evt + 128
        0x0081008e:    4964        dI      LDR      r1,[pc,#400] ; [0x810220] = 0x8800748
        0x00810090:    2200        ."      MOVS     r2,#0
;;;137                }
;;;138                else
;;;139                {
;;;140                    gPxpState = PxpStateIdle;
        0x00810092:    f8868000    ....    STRB     r8,[r6,#0]
;;;141                    APP_PRINT_INFO0("GAP adv stoped");
        0x00810096:    3928        (9      SUBS     r1,r1,#0x28
        0x00810098:    4650        PF      MOV      r0,r10
        0x0081009a:    f7f7dce0    ....    BL       log_buffer ; 0x7a5e
        0x0081009e:    e012        ..      B        0x8100c6 ; app_handle_dev_state_evt + 174
;;;142                }
;;;143            }
;;;144            else if (new_state.gap_adv_state == GAP_ADV_STATE_ADVERTISING)
;;;145            {
;;;146                APP_PRINT_INFO0("GAP adv start");
        0x008100a0:    495f        _I      LDR      r1,[pc,#380] ; [0x810220] = 0x8800748
        0x008100a2:    2200        ."      MOVS     r2,#0
        0x008100a4:    3914        .9      SUBS     r1,r1,#0x14
        0x008100a6:    4650        PF      MOV      r0,r10
        0x008100a8:    f7f7dcd9    ....    BL       log_buffer ; 0x7a5e
;;;147                gPxpState = PxpStateAdv;
        0x008100ac:    2501        .%      MOVS     r5,#1
        0x008100ae:    7035        5p      STRB     r5,[r6,#0]
;;;148                if (gIoState != IoStateLlsAlert)
        0x008100b0:    7870        px      LDRB     r0,[r6,#1]
        0x008100b2:    2803        .(      CMP      r0,#3
        0x008100b4:    d007        ..      BEQ      0x8100c6 ; app_handle_dev_state_evt + 174
;;;149                {
;;;150                    StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK,
        0x008100b6:    230a        .#      MOVS     r3,#0xa
        0x008100b8:    2201        ."      MOVS     r2,#1
        0x008100ba:    2164        d!      MOVS     r1,#0x64
        0x008100bc:    f44f7061    O.ap    MOV      r0,#0x384
        0x008100c0:    f7fefc71    ..q.    BL       StartPxpIO ; 0x80e9a6
;;;151                               10); /*low period 0.9s, high period 0.1s,  led blink,  10times(cnt)*/
;;;152                    gIoState = IoStateAdvBlink;
        0x008100c4:    7075        up      STRB     r5,[r6,#1]
;;;153                }
;;;154            }
;;;155        }
;;;156    
;;;157        gap_dev_state = new_state;
        0x008100c6:    70f4        .p      STRB     r4,[r6,#3]
;;;158    }
        0x008100c8:    e8bd87fc    ....    POP      {r2-r10,pc}
    app_handle_gap_msg
;;;159    
;;;160    /**
;;;161     * @brief    Handle msg GAP_MSG_LE_CONN_STATE_CHANGE
;;;162     * @note     All the gap conn state events are pre-handled in this function.
;;;163     *           Then the event handling function shall be called according to the new_state
;;;164     * @param[in] conn_id Connection ID
;;;165     * @param[in] new_state  New gap connection state
;;;166     * @param[in] disc_cause Use this cause when new_state is GAP_CONN_STATE_DISCONNECTED
;;;167     * @return   void
;;;168     */
;;;169    void app_handle_conn_state_evt(uint8_t conn_id, T_GAP_CONN_STATE new_state, uint16_t disc_cause)
;;;170    {
;;;171        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d old_state %d new_state %d, disc_cause 0x%x",
;;;172                        conn_id, gap_conn_state, new_state, disc_cause);
;;;173        switch (new_state)
;;;174        {
;;;175        case GAP_CONN_STATE_DISCONNECTED:
;;;176            {
;;;177                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
;;;178                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
;;;179                {
;;;180                    APP_PRINT_ERROR1("app_handle_conn_state_evt: connection lost cause 0x%x", disc_cause);
;;;181                }
;;;182                gPxpState = PxpStateIdle;
;;;183                if (gPowerFlg == true)
;;;184                {
;;;185                    le_adv_start();
;;;186                    APP_PRINT_ERROR1("g_pxp_linkloss_alert_level is %d", g_pxp_linkloss_alert_level);
;;;187                    gIoState = IoStateLlsAlert;
;;;188                    if (g_pxp_linkloss_alert_level == 1)
;;;189                    {
;;;190                        StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK, LL_ASSERT_TIME);
;;;191                    }
;;;192                    if (g_pxp_linkloss_alert_level == 2)
;;;193                    {
;;;194                        StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK | BEEP_ALERT, LL_ASSERT_TIME);
;;;195                    }
;;;196                    else
;;;197                    {
;;;198                        //nothing to do
;;;199                    }
;;;200                }
;;;201            }
;;;202            break;
;;;203    
;;;204        case GAP_CONN_STATE_CONNECTED:
;;;205            {
;;;206                uint16_t conn_interval;
;;;207                uint16_t conn_latency;
;;;208                uint16_t conn_supervision_timeout;
;;;209                uint8_t  remote_bd[6];
;;;210                T_GAP_REMOTE_ADDR_TYPE remote_bd_type;
;;;211    
;;;212                gPxpState = PxpStateLink;
;;;213    
;;;214                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;215                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_latency, conn_id);
;;;216                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;217                le_get_conn_addr(conn_id, remote_bd, &remote_bd_type);
;;;218                APP_PRINT_INFO5("GAP_CONN_STATE_CONNECTED:remote_bd %s, remote_addr_type %d, conn_interval 0x%x, conn_latency 0x%x, conn_supervision_timeout 0x%x",
;;;219                                TRACE_BDADDR(remote_bd), remote_bd_type,
;;;220                                conn_interval, conn_latency, conn_supervision_timeout);
;;;221            }
;;;222            break;
;;;223    
;;;224        default:
;;;225            break;
;;;226        }
;;;227        gap_conn_state = new_state;
;;;228    }
;;;229    
;;;230    
;;;231    /**
;;;232     * @brief    Handle msg GAP_MSG_LE_AUTHEN_STATE_CHANGE
;;;233     * @note     All the gap authentication state events are pre-handled in this function.
;;;234     *           Then the event handling function shall be called according to the new_state
;;;235     * @param[in] conn_id Connection ID
;;;236     * @param[in] new_state  New authentication state
;;;237     * @param[in] cause Use this cause when new_state is GAP_AUTHEN_STATE_COMPLETE
;;;238     * @return   void
;;;239     */
;;;240    void app_handle_authen_state_evt(uint8_t conn_id, uint8_t new_state, uint16_t cause)
;;;241    {
;;;242        APP_PRINT_INFO2("app_handle_authen_state_evt:conn_id %d, cause 0x%x", conn_id, cause);
;;;243    
;;;244        switch (new_state)
;;;245        {
;;;246        case GAP_AUTHEN_STATE_STARTED:
;;;247            {
;;;248                APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_STARTED");
;;;249            }
;;;250            break;
;;;251    
;;;252        case GAP_AUTHEN_STATE_COMPLETE:
;;;253            {
;;;254                if (cause == GAP_SUCCESS)
;;;255                {
;;;256                    StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK | BEEP_ALERT, 1);
;;;257    
;;;258                    ChangeConnectionParameter(400, 0, 2000); //interval = 400*1.25ms
;;;259                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair success");
;;;260    
;;;261                }
;;;262                else
;;;263                {
;;;264                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair failed");
;;;265                }
;;;266            }
;;;267            break;
;;;268    
;;;269        default:
;;;270            {
;;;271                APP_PRINT_ERROR1("app_handle_authen_state_evt: unknown newstate %d", new_state);
;;;272            }
;;;273            break;
;;;274        }
;;;275    }
;;;276    
;;;277    /**
;;;278     * @brief    Handle msg GAP_MSG_LE_CONN_MTU_INFO
;;;279     * @note     This msg is used to inform APP that exchange mtu procedure is completed.
;;;280     * @param[in] conn_id Connection ID
;;;281     * @param[in] mtu_size  New mtu size
;;;282     * @return   void
;;;283     */
;;;284    void app_handle_conn_mtu_info_evt(uint8_t conn_id, uint16_t mtu_size)
;;;285    {
;;;286        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
;;;287    }
;;;288    
;;;289    
;;;290    /**
;;;291     * @brief    Handle msg GAP_MSG_LE_CONN_PARAM_UPDATE
;;;292     * @note     All the connection parameter update change  events are pre-handled in this function.
;;;293     * @param[in] conn_id Connection ID
;;;294     * @param[in] status  New update state
;;;295     * @param[in] cause Use this cause when status is GAP_CONN_PARAM_UPDATE_STATUS_FAIL
;;;296     * @return   void
;;;297     */
;;;298    void app_handle_conn_param_update_evt(uint8_t conn_id, uint8_t status, uint16_t cause)
;;;299    {
;;;300        switch (status)
;;;301        {
;;;302        case GAP_CONN_PARAM_UPDATE_STATUS_SUCCESS:
;;;303            {
;;;304                uint16_t conn_interval;
;;;305                uint16_t conn_slave_latency;
;;;306                uint16_t conn_supervision_timeout;
;;;307    
;;;308                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;309                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_slave_latency, conn_id);
;;;310                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;311                APP_PRINT_INFO3("app_handle_conn_param_update_evt update success:conn_interval 0x%x, conn_slave_latency 0x%x, conn_supervision_timeout 0x%x",
;;;312                                conn_interval, conn_slave_latency, conn_supervision_timeout);
;;;313            }
;;;314            break;
;;;315    
;;;316        case GAP_CONN_PARAM_UPDATE_STATUS_FAIL:
;;;317            {
;;;318                APP_PRINT_ERROR1("app_handle_conn_param_update_evt update failed: cause 0x%x", cause);
;;;319            }
;;;320            break;
;;;321    
;;;322        case GAP_CONN_PARAM_UPDATE_STATUS_PENDING:
;;;323            {
;;;324                APP_PRINT_INFO0("app_handle_conn_param_update_evt update pending.");
;;;325            }
;;;326            break;
;;;327    
;;;328        default:
;;;329            break;
;;;330        }
;;;331    }
;;;332    
;;;333    
;;;334    /**
;;;335     * @brief    All the BT GAP MSG are pre-handled in this function.
;;;336     * @note     Then the event handling function shall be called according to the
;;;337     *           subtype of T_IO_MSG
;;;338     * @param[in] p_gap_msg Pointer to GAP msg
;;;339     * @return   void
;;;340     */
;;;341    void app_handle_gap_msg(T_IO_MSG *p_gap_msg)
;;;342    {
        0x008100cc:    b57f        ..      PUSH     {r0-r6,lr}
        0x008100ce:    4605        .F      MOV      r5,r0
;;;343        T_LE_GAP_MSG gap_msg;
;;;344        uint8_t conn_id;
;;;345        memcpy(&gap_msg, &p_gap_msg->u.param, sizeof(p_gap_msg->u.param));
;;;346    
;;;347        APP_PRINT_TRACE1("app_handle_gap_msg: subtype %d", p_gap_msg->subtype);
        0x008100d0:    8843        C.      LDRH     r3,[r0,#2]
        0x008100d2:    6844        Dh      LDR      r4,[r0,#4]
        0x008100d4:    4950        PI      LDR      r1,[pc,#320] ; [0x810218] = 0x8800ab4
        0x008100d6:    484e        NH      LDR      r0,[pc,#312] ; [0x810210] = 0x21103002
        0x008100d8:    2201        ."      MOVS     r2,#1
        0x008100da:    3134        41      ADDS     r1,r1,#0x34
        0x008100dc:    1c40        @.      ADDS     r0,r0,#1
        0x008100de:    f7f7dcbe    ....    BL       log_buffer ; 0x7a5e
;;;348        switch (p_gap_msg->subtype)
        0x008100e2:    886b        k.      LDRH     r3,[r5,#2]
        0x008100e4:    2000        .       MOVS     r0,#0
        0x008100e6:    4d4a        JM      LDR      r5,[pc,#296] ; [0x810210] = 0x21103002
        0x008100e8:    2b0b        .+      CMP      r3,#0xb
        0x008100ea:    d27c        |.      BCS      0x8101e6 ; app_handle_gap_msg + 282
        0x008100ec:    e8dff003    ....    TBB      [pc,r3]
    $d
        0x008100f0:    1a0c0683    ....    DCD    436995715
        0x008100f4:    5b372214    ."7[    DCD    1530339860
        0x008100f8:    002a496c    lI*.    DCD    2771308
    $t
;;;349        {
;;;350        case GAP_MSG_LE_DEV_STATE_CHANGE:
;;;351            {
;;;352                app_handle_dev_state_evt(gap_msg.msg_data.gap_dev_state_change.new_state,
        0x008100fc:    b004        ..      ADD      sp,sp,#0x10
        0x008100fe:    4620         F      MOV      r0,r4
        0x00810100:    0c21        !.      LSRS     r1,r4,#16
        0x00810102:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00810106:    e787        ..      B        app_handle_dev_state_evt ; 0x810018
        0x00810108:    b004        ..      ADD      sp,sp,#0x10
        0x0081010a:    0c22        ".      LSRS     r2,r4,#16
        0x0081010c:    f3c42107    ...!    UBFX     r1,r4,#8,#8
        0x00810110:    b2e0        ..      UXTB     r0,r4
;;;353                                         gap_msg.msg_data.gap_dev_state_change.cause);
;;;354            }
;;;355            break;
;;;356    
;;;357        case GAP_MSG_LE_CONN_STATE_CHANGE:
;;;358            {
;;;359                app_handle_conn_state_evt(gap_msg.msg_data.gap_conn_state_change.conn_id,
        0x00810112:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00810116:    e703        ..      B        app_handle_conn_state_evt ; 0x80ff20
        0x00810118:    b004        ..      ADD      sp,sp,#0x10
        0x0081011a:    0c21        !.      LSRS     r1,r4,#16
        0x0081011c:    b2e0        ..      UXTB     r0,r4
;;;360                                          (T_GAP_CONN_STATE)gap_msg.msg_data.gap_conn_state_change.new_state,
;;;361                                          gap_msg.msg_data.gap_conn_state_change.disc_cause);
;;;362            }
;;;363            break;
;;;364    
;;;365        case GAP_MSG_LE_CONN_MTU_INFO:
;;;366            {
;;;367                app_handle_conn_mtu_info_evt(gap_msg.msg_data.gap_conn_mtu_info.conn_id,
        0x0081011e:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00810122:    e6f3        ..      B        app_handle_conn_mtu_info_evt ; 0x80ff0c
        0x00810124:    b004        ..      ADD      sp,sp,#0x10
        0x00810126:    0c22        ".      LSRS     r2,r4,#16
        0x00810128:    f3c42107    ...!    UBFX     r1,r4,#8,#8
        0x0081012c:    b2e0        ..      UXTB     r0,r4
;;;368                                             gap_msg.msg_data.gap_conn_mtu_info.mtu_size);
;;;369            }
;;;370            break;
;;;371    
;;;372        case GAP_MSG_LE_CONN_PARAM_UPDATE:
;;;373            {
;;;374                app_handle_conn_param_update_evt(gap_msg.msg_data.gap_conn_param_update.conn_id,
        0x0081012e:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00810132:    e6ad        ..      B        app_handle_conn_param_update_evt ; 0x80fe90
        0x00810134:    b004        ..      ADD      sp,sp,#0x10
        0x00810136:    0c22        ".      LSRS     r2,r4,#16
        0x00810138:    f3c42107    ...!    UBFX     r1,r4,#8,#8
        0x0081013c:    b2e0        ..      UXTB     r0,r4
;;;375                                                 gap_msg.msg_data.gap_conn_param_update.status,
;;;376                                                 gap_msg.msg_data.gap_conn_param_update.cause);
;;;377            }
;;;378            break;
;;;379    
;;;380        case GAP_MSG_LE_AUTHEN_STATE_CHANGE:
;;;381            {
;;;382                app_handle_authen_state_evt(gap_msg.msg_data.gap_authen_state.conn_id,
        0x0081013e:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00810142:    e66f        o.      B        app_handle_authen_state_evt ; 0x80fe24
        0x00810144:    b2e0        ..      UXTB     r0,r4
;;;383                                            gap_msg.msg_data.gap_authen_state.new_state,
;;;384                                            gap_msg.msg_data.gap_authen_state.status);
;;;385            }
;;;386            break;
;;;387    
;;;388        case GAP_MSG_LE_BOND_JUST_WORK:
;;;389            {
;;;390                conn_id = gap_msg.msg_data.gap_bond_just_work_conf.conn_id;
;;;391                le_bond_just_work_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x00810146:    2101        .!      MOVS     r1,#1
        0x00810148:    f000fb15    ....    BL       le_bond_just_work_confirm ; 0x810776
;;;392                APP_PRINT_INFO0("GAP_MSG_LE_BOND_JUST_WORK");
        0x0081014c:    b004        ..      ADD      sp,sp,#0x10
        0x0081014e:    4628        (F      MOV      r0,r5
        0x00810150:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00810154:    4930        0I      LDR      r1,[pc,#192] ; [0x810218] = 0x8800ab4
        0x00810156:    2200        ."      MOVS     r2,#0
        0x00810158:    3154        T1      ADDS     r1,r1,#0x54
        0x0081015a:    f7f79c80    ....    B        log_buffer ; 0x7a5e
;;;393            }
;;;394            break;
;;;395    
;;;396        case GAP_MSG_LE_BOND_PASSKEY_DISPLAY:
;;;397            {
;;;398                uint32_t display_value = 0;
        0x0081015e:    b2e4        ..      UXTB     r4,r4
;;;399                conn_id = gap_msg.msg_data.gap_bond_passkey_display.conn_id;
;;;400                le_bond_get_display_key(conn_id, &display_value);
        0x00810160:    9000        ..      STR      r0,[sp,#0]
        0x00810162:    4669        iF      MOV      r1,sp
        0x00810164:    4620         F      MOV      r0,r4
        0x00810166:    f43cf140    <.@.    BL       le_bond_get_display_key ; 0x4c3ea
;;;401                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_DISPLAY:passkey %d", display_value);
        0x0081016a:    492b        +I      LDR      r1,[pc,#172] ; [0x810218] = 0x8800ab4
        0x0081016c:    2201        ."      MOVS     r2,#1
        0x0081016e:    3174        t1      ADDS     r1,r1,#0x74
        0x00810170:    4628        (F      MOV      r0,r5
        0x00810172:    9b00        ..      LDR      r3,[sp,#0]
        0x00810174:    f7f7dc73    ..s.    BL       log_buffer ; 0x7a5e
;;;402                le_bond_passkey_display_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x00810178:    2101        .!      MOVS     r1,#1
        0x0081017a:    4620         F      MOV      r0,r4
        0x0081017c:    f43cf17a    <.z.    BL       le_bond_passkey_display_confirm ; 0x4c474
        0x00810180:    bd7f        ..      POP      {r0-r6,pc}
;;;403            }
;;;404            break;
;;;405    
;;;406        case GAP_MSG_LE_BOND_USER_CONFIRMATION:
;;;407            {
;;;408                uint32_t display_value = 0;
        0x00810182:    b2e4        ..      UXTB     r4,r4
;;;409                conn_id = gap_msg.msg_data.gap_bond_user_conf.conn_id;
;;;410                le_bond_get_display_key(conn_id, &display_value);
        0x00810184:    9000        ..      STR      r0,[sp,#0]
        0x00810186:    4669        iF      MOV      r1,sp
        0x00810188:    4620         F      MOV      r0,r4
        0x0081018a:    f43cf12e    <...    BL       le_bond_get_display_key ; 0x4c3ea
;;;411                APP_PRINT_INFO1("GAP_MSG_LE_BOND_USER_CONFIRMATION: passkey %d", display_value);
        0x0081018e:    4922        "I      LDR      r1,[pc,#136] ; [0x810218] = 0x8800ab4
        0x00810190:    2201        ."      MOVS     r2,#1
        0x00810192:    31a4        .1      ADDS     r1,r1,#0xa4
        0x00810194:    4628        (F      MOV      r0,r5
        0x00810196:    9b00        ..      LDR      r3,[sp,#0]
        0x00810198:    f7f7dc61    ..a.    BL       log_buffer ; 0x7a5e
;;;412                le_bond_user_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x0081019c:    2101        .!      MOVS     r1,#1
        0x0081019e:    4620         F      MOV      r0,r4
        0x008101a0:    f43cf138    <.8.    BL       le_bond_user_confirm ; 0x4c414
        0x008101a4:    bd7f        ..      POP      {r0-r6,pc}
        0x008101a6:    491c        .I      LDR      r1,[pc,#112] ; [0x810218] = 0x8800ab4
;;;413            }
;;;414            break;
;;;415    
;;;416        case GAP_MSG_LE_BOND_PASSKEY_INPUT:
;;;417            {
;;;418                uint32_t passkey = 888888;
        0x008101a8:    b2e4        ..      UXTB     r4,r4
        0x008101aa:    4e20         N      LDR      r6,[pc,#128] ; [0x81022c] = 0xd9038
;;;419                conn_id = gap_msg.msg_data.gap_bond_passkey_input.conn_id;
;;;420                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d", conn_id);
        0x008101ac:    4623        #F      MOV      r3,r4
        0x008101ae:    2201        ."      MOVS     r2,#1
        0x008101b0:    31d8        .1      ADDS     r1,r1,#0xd8
        0x008101b2:    4628        (F      MOV      r0,r5
        0x008101b4:    f7f7dc53    ..S.    BL       log_buffer ; 0x7a5e
;;;421                le_bond_passkey_input_confirm(conn_id, passkey, GAP_CFM_CAUSE_ACCEPT);
        0x008101b8:    b004        ..      ADD      sp,sp,#0x10
        0x008101ba:    4631        1F      MOV      r1,r6
        0x008101bc:    4620         F      MOV      r0,r4
        0x008101be:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x008101c2:    2201        ."      MOVS     r2,#1
        0x008101c4:    f43cb0dd    <...    B        le_bond_passkey_input_confirm ; 0x4c382
;;;422            }
;;;423            break;
;;;424    
;;;425        case GAP_MSG_LE_BOND_OOB_INPUT:
;;;426            {
;;;427                uint8_t oob_data[GAP_OOB_LEN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        0x008101c8:    9000        ..      STR      r0,[sp,#0]
        0x008101ca:    9001        ..      STR      r0,[sp,#4]
        0x008101cc:    9002        ..      STR      r0,[sp,#8]
        0x008101ce:    9003        ..      STR      r0,[sp,#0xc]
        0x008101d0:    b2e4        ..      UXTB     r4,r4
;;;428                conn_id = gap_msg.msg_data.gap_bond_oob_input.conn_id;
;;;429                APP_PRINT_INFO0("GAP_MSG_LE_BOND_OOB_INPUT");
        0x008101d2:    2200        ."      MOVS     r2,#0
        0x008101d4:    4916        .I      LDR      r1,[pc,#88] ; [0x810230] = 0x8800bbc
        0x008101d6:    4628        (F      MOV      r0,r5
        0x008101d8:    f7f7dc41    ..A.    BL       log_buffer ; 0x7a5e
;;;430                le_bond_set_param(GAP_PARAM_BOND_OOB_DATA, GAP_OOB_LEN, oob_data);
        0x008101dc:    466a        jF      MOV      r2,sp
        0x008101de:    2110        .!      MOVS     r1,#0x10
        0x008101e0:    f44f7004    O..p    MOV      r0,#0x210
        0x008101e4:    e000        ..      B        0x8101e8 ; app_handle_gap_msg + 284
        0x008101e6:    e006        ..      B        0x8101f6 ; app_handle_gap_msg + 298
        0x008101e8:    f43cf001    <...    BL       le_bond_set_param ; 0x4c1ee
;;;431                le_bond_oob_input_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x008101ec:    2101        .!      MOVS     r1,#1
        0x008101ee:    4620         F      MOV      r0,r4
        0x008101f0:    f43cf0e1    <...    BL       le_bond_oob_input_confirm ; 0x4c3b6
        0x008101f4:    bd7f        ..      POP      {r0-r6,pc}
;;;432            }
;;;433            break;
;;;434    
;;;435        default:
;;;436            APP_PRINT_ERROR1("app_handle_gap_msg: unknown subtype %d", p_gap_msg->subtype);
        0x008101f6:    b004        ..      ADD      sp,sp,#0x10
        0x008101f8:    490d        .I      LDR      r1,[pc,#52] ; [0x810230] = 0x8800bbc
        0x008101fa:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x008101fe:    4804        .H      LDR      r0,[pc,#16] ; [0x810210] = 0x21103002
        0x00810200:    2201        ."      MOVS     r2,#1
        0x00810202:    3120         1      ADDS     r1,r1,#0x20
        0x00810204:    1e80        ..      SUBS     r0,r0,#2
        0x00810206:    f7f79c2a    ..*.    B        log_buffer ; 0x7a5e
    $d
        0x0081020a:    0000        ..      DCW    0
        0x0081020c:    08800880    ....    DCD    142608512
        0x00810210:    21103002    .0.!    DCD    554708994
        0x00810214:    08800984    ....    DCD    142608772
        0x00810218:    08800ab4    ....    DCD    142609076
        0x0081021c:    002080d0    .. .    DCD    2130128
        0x00810220:    08800748    H...    DCD    142608200
        0x00810224:    00207eb4    .~ .    DCD    2129588
        0x00810228:    21300000    ..0!    DCD    556793856
        0x0081022c:    000d9038    8...    DCD    888888
        0x00810230:    08800bbc    ....    DCD    142609340
    $t
    app_handle_io_msg
        0x00810234:    b513        ..      PUSH     {r0,r1,r4,lr}
        0x00810236:    f8bd0000    ....    LDRH     r0,[sp,#0]
;;; ..\include\SDK\src\app\pxp\pxp_app.c (84)
        0x0081023a:    b158        X.      CBZ      r0,0x810254 ; app_handle_io_msg + 32
;;;85         uint16_t msg_type = io_msg.type;
;;;86     
;;;87         switch (msg_type)
        0x0081023c:    280b        .(      CMP      r0,#0xb
        0x0081023e:    d00d        ..      BEQ      0x81025c ; app_handle_io_msg + 40
        0x00810240:    2819        .(      CMP      r0,#0x19
        0x00810242:    d106        ..      BNE      0x810252 ; app_handle_io_msg + 30
;;;88         {
;;;89         case IO_MSG_TYPE_BT_STATUS:
;;;90             {
;;;91                 app_handle_gap_msg(&io_msg);
;;;92             }
;;;93             break;
;;;94         case IO_MSG_TYPE_GPIO:
;;;95             Pxp_HandleButtonEvent(io_msg);
;;;96             break;
;;;97         case IO_MSG_TYPE_RESET_WDG_TIMER:
;;;98             {
;;;99                 APP_PRINT_INFO0("[WDG] Watch Dog Rset Timer");
        0x00810244:    2200        ."      MOVS     r2,#0
        0x00810246:    49bd        .I      LDR      r1,[pc,#756] ; [0x81053c] = 0x8800674
        0x00810248:    48bd        .H      LDR      r0,[pc,#756] ; [0x810540] = 0x21103002
        0x0081024a:    f7f7dc08    ....    BL       log_buffer ; 0x7a5e
;;;100                WDG_Restart();
        0x0081024e:    f401f381    ....    BL       WDG_Restart ; 0x11954
;;;101            }
;;;102            break;
;;;103        default:
;;;104            break;
;;;105        }
;;;106    }
        0x00810252:    bd1c        ..      POP      {r2-r4,pc}
        0x00810254:    4668        hF      MOV      r0,sp
        0x00810256:    f7ffff39    ..9.    BL       app_handle_gap_msg ; 0x8100cc
        0x0081025a:    bd1c        ..      POP      {r2-r4,pc}
        0x0081025c:    e9dd0100    ....    LDRD     r0,r1,[sp,#0]
        0x00810260:    f7fefbc4    ....    BL       Pxp_HandleButtonEvent ; 0x80e9ec
        0x00810264:    bd1c        ..      POP      {r2-r4,pc}
    app_gap_callback
;;;107    
;;;108    
;;;109    /**
;;;110     * @brief    Handle msg GAP_MSG_LE_DEV_STATE_CHANGE
;;;111     * @note     All the gap device state events are pre-handled in this function.
;;;112     *           Then the event handling function shall be called according to the new_state
;;;113     * @param[in] new_state  New gap device state
;;;114     * @param[in] cause GAP device state change cause
;;;115     * @return   void
;;;116     */
;;;117    void app_handle_dev_state_evt(T_GAP_DEV_STATE new_state, uint16_t cause)
;;;118    {
;;;119        APP_PRINT_INFO3("app_handle_dev_state_evt: init state %d, adv state %d, cause 0x%x",
;;;120                        new_state.gap_init_state, new_state.gap_adv_state, cause);
;;;121        if (gap_dev_state.gap_init_state != new_state.gap_init_state)
;;;122        {
;;;123            if (new_state.gap_init_state == GAP_INIT_STATE_STACK_READY)
;;;124            {
;;;125                APP_PRINT_INFO0("GAP stack ready");
;;;126                gPowerFlg = false;
;;;127            }
;;;128        }
;;;129    
;;;130        if (gap_dev_state.gap_adv_state != new_state.gap_adv_state)
;;;131        {
;;;132            if (new_state.gap_adv_state == GAP_ADV_STATE_IDLE)
;;;133            {
;;;134                if (new_state.gap_adv_sub_state == GAP_ADV_TO_IDLE_CAUSE_CONN)
;;;135                {
;;;136                    APP_PRINT_INFO0("GAP adv stoped: because connection created");
;;;137                }
;;;138                else
;;;139                {
;;;140                    gPxpState = PxpStateIdle;
;;;141                    APP_PRINT_INFO0("GAP adv stoped");
;;;142                }
;;;143            }
;;;144            else if (new_state.gap_adv_state == GAP_ADV_STATE_ADVERTISING)
;;;145            {
;;;146                APP_PRINT_INFO0("GAP adv start");
;;;147                gPxpState = PxpStateAdv;
;;;148                if (gIoState != IoStateLlsAlert)
;;;149                {
;;;150                    StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK,
;;;151                               10); /*low period 0.9s, high period 0.1s,  led blink,  10times(cnt)*/
;;;152                    gIoState = IoStateAdvBlink;
;;;153                }
;;;154            }
;;;155        }
;;;156    
;;;157        gap_dev_state = new_state;
;;;158    }
;;;159    
;;;160    /**
;;;161     * @brief    Handle msg GAP_MSG_LE_CONN_STATE_CHANGE
;;;162     * @note     All the gap conn state events are pre-handled in this function.
;;;163     *           Then the event handling function shall be called according to the new_state
;;;164     * @param[in] conn_id Connection ID
;;;165     * @param[in] new_state  New gap connection state
;;;166     * @param[in] disc_cause Use this cause when new_state is GAP_CONN_STATE_DISCONNECTED
;;;167     * @return   void
;;;168     */
;;;169    void app_handle_conn_state_evt(uint8_t conn_id, T_GAP_CONN_STATE new_state, uint16_t disc_cause)
;;;170    {
;;;171        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d old_state %d new_state %d, disc_cause 0x%x",
;;;172                        conn_id, gap_conn_state, new_state, disc_cause);
;;;173        switch (new_state)
;;;174        {
;;;175        case GAP_CONN_STATE_DISCONNECTED:
;;;176            {
;;;177                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
;;;178                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
;;;179                {
;;;180                    APP_PRINT_ERROR1("app_handle_conn_state_evt: connection lost cause 0x%x", disc_cause);
;;;181                }
;;;182                gPxpState = PxpStateIdle;
;;;183                if (gPowerFlg == true)
;;;184                {
;;;185                    le_adv_start();
;;;186                    APP_PRINT_ERROR1("g_pxp_linkloss_alert_level is %d", g_pxp_linkloss_alert_level);
;;;187                    gIoState = IoStateLlsAlert;
;;;188                    if (g_pxp_linkloss_alert_level == 1)
;;;189                    {
;;;190                        StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK, LL_ASSERT_TIME);
;;;191                    }
;;;192                    if (g_pxp_linkloss_alert_level == 2)
;;;193                    {
;;;194                        StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK | BEEP_ALERT, LL_ASSERT_TIME);
;;;195                    }
;;;196                    else
;;;197                    {
;;;198                        //nothing to do
;;;199                    }
;;;200                }
;;;201            }
;;;202            break;
;;;203    
;;;204        case GAP_CONN_STATE_CONNECTED:
;;;205            {
;;;206                uint16_t conn_interval;
;;;207                uint16_t conn_latency;
;;;208                uint16_t conn_supervision_timeout;
;;;209                uint8_t  remote_bd[6];
;;;210                T_GAP_REMOTE_ADDR_TYPE remote_bd_type;
;;;211    
;;;212                gPxpState = PxpStateLink;
;;;213    
;;;214                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;215                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_latency, conn_id);
;;;216                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;217                le_get_conn_addr(conn_id, remote_bd, &remote_bd_type);
;;;218                APP_PRINT_INFO5("GAP_CONN_STATE_CONNECTED:remote_bd %s, remote_addr_type %d, conn_interval 0x%x, conn_latency 0x%x, conn_supervision_timeout 0x%x",
;;;219                                TRACE_BDADDR(remote_bd), remote_bd_type,
;;;220                                conn_interval, conn_latency, conn_supervision_timeout);
;;;221            }
;;;222            break;
;;;223    
;;;224        default:
;;;225            break;
;;;226        }
;;;227        gap_conn_state = new_state;
;;;228    }
;;;229    
;;;230    
;;;231    /**
;;;232     * @brief    Handle msg GAP_MSG_LE_AUTHEN_STATE_CHANGE
;;;233     * @note     All the gap authentication state events are pre-handled in this function.
;;;234     *           Then the event handling function shall be called according to the new_state
;;;235     * @param[in] conn_id Connection ID
;;;236     * @param[in] new_state  New authentication state
;;;237     * @param[in] cause Use this cause when new_state is GAP_AUTHEN_STATE_COMPLETE
;;;238     * @return   void
;;;239     */
;;;240    void app_handle_authen_state_evt(uint8_t conn_id, uint8_t new_state, uint16_t cause)
;;;241    {
;;;242        APP_PRINT_INFO2("app_handle_authen_state_evt:conn_id %d, cause 0x%x", conn_id, cause);
;;;243    
;;;244        switch (new_state)
;;;245        {
;;;246        case GAP_AUTHEN_STATE_STARTED:
;;;247            {
;;;248                APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_STARTED");
;;;249            }
;;;250            break;
;;;251    
;;;252        case GAP_AUTHEN_STATE_COMPLETE:
;;;253            {
;;;254                if (cause == GAP_SUCCESS)
;;;255                {
;;;256                    StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK | BEEP_ALERT, 1);
;;;257    
;;;258                    ChangeConnectionParameter(400, 0, 2000); //interval = 400*1.25ms
;;;259                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair success");
;;;260    
;;;261                }
;;;262                else
;;;263                {
;;;264                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair failed");
;;;265                }
;;;266            }
;;;267            break;
;;;268    
;;;269        default:
;;;270            {
;;;271                APP_PRINT_ERROR1("app_handle_authen_state_evt: unknown newstate %d", new_state);
;;;272            }
;;;273            break;
;;;274        }
;;;275    }
;;;276    
;;;277    /**
;;;278     * @brief    Handle msg GAP_MSG_LE_CONN_MTU_INFO
;;;279     * @note     This msg is used to inform APP that exchange mtu procedure is completed.
;;;280     * @param[in] conn_id Connection ID
;;;281     * @param[in] mtu_size  New mtu size
;;;282     * @return   void
;;;283     */
;;;284    void app_handle_conn_mtu_info_evt(uint8_t conn_id, uint16_t mtu_size)
;;;285    {
;;;286        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
;;;287    }
;;;288    
;;;289    
;;;290    /**
;;;291     * @brief    Handle msg GAP_MSG_LE_CONN_PARAM_UPDATE
;;;292     * @note     All the connection parameter update change  events are pre-handled in this function.
;;;293     * @param[in] conn_id Connection ID
;;;294     * @param[in] status  New update state
;;;295     * @param[in] cause Use this cause when status is GAP_CONN_PARAM_UPDATE_STATUS_FAIL
;;;296     * @return   void
;;;297     */
;;;298    void app_handle_conn_param_update_evt(uint8_t conn_id, uint8_t status, uint16_t cause)
;;;299    {
;;;300        switch (status)
;;;301        {
;;;302        case GAP_CONN_PARAM_UPDATE_STATUS_SUCCESS:
;;;303            {
;;;304                uint16_t conn_interval;
;;;305                uint16_t conn_slave_latency;
;;;306                uint16_t conn_supervision_timeout;
;;;307    
;;;308                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;309                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_slave_latency, conn_id);
;;;310                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;311                APP_PRINT_INFO3("app_handle_conn_param_update_evt update success:conn_interval 0x%x, conn_slave_latency 0x%x, conn_supervision_timeout 0x%x",
;;;312                                conn_interval, conn_slave_latency, conn_supervision_timeout);
;;;313            }
;;;314            break;
;;;315    
;;;316        case GAP_CONN_PARAM_UPDATE_STATUS_FAIL:
;;;317            {
;;;318                APP_PRINT_ERROR1("app_handle_conn_param_update_evt update failed: cause 0x%x", cause);
;;;319            }
;;;320            break;
;;;321    
;;;322        case GAP_CONN_PARAM_UPDATE_STATUS_PENDING:
;;;323            {
;;;324                APP_PRINT_INFO0("app_handle_conn_param_update_evt update pending.");
;;;325            }
;;;326            break;
;;;327    
;;;328        default:
;;;329            break;
;;;330        }
;;;331    }
;;;332    
;;;333    
;;;334    /**
;;;335     * @brief    All the BT GAP MSG are pre-handled in this function.
;;;336     * @note     Then the event handling function shall be called according to the
;;;337     *           subtype of T_IO_MSG
;;;338     * @param[in] p_gap_msg Pointer to GAP msg
;;;339     * @return   void
;;;340     */
;;;341    void app_handle_gap_msg(T_IO_MSG *p_gap_msg)
;;;342    {
;;;343        T_LE_GAP_MSG gap_msg;
;;;344        uint8_t conn_id;
;;;345        memcpy(&gap_msg, &p_gap_msg->u.param, sizeof(p_gap_msg->u.param));
;;;346    
;;;347        APP_PRINT_TRACE1("app_handle_gap_msg: subtype %d", p_gap_msg->subtype);
;;;348        switch (p_gap_msg->subtype)
;;;349        {
;;;350        case GAP_MSG_LE_DEV_STATE_CHANGE:
;;;351            {
;;;352                app_handle_dev_state_evt(gap_msg.msg_data.gap_dev_state_change.new_state,
;;;353                                         gap_msg.msg_data.gap_dev_state_change.cause);
;;;354            }
;;;355            break;
;;;356    
;;;357        case GAP_MSG_LE_CONN_STATE_CHANGE:
;;;358            {
;;;359                app_handle_conn_state_evt(gap_msg.msg_data.gap_conn_state_change.conn_id,
;;;360                                          (T_GAP_CONN_STATE)gap_msg.msg_data.gap_conn_state_change.new_state,
;;;361                                          gap_msg.msg_data.gap_conn_state_change.disc_cause);
;;;362            }
;;;363            break;
;;;364    
;;;365        case GAP_MSG_LE_CONN_MTU_INFO:
;;;366            {
;;;367                app_handle_conn_mtu_info_evt(gap_msg.msg_data.gap_conn_mtu_info.conn_id,
;;;368                                             gap_msg.msg_data.gap_conn_mtu_info.mtu_size);
;;;369            }
;;;370            break;
;;;371    
;;;372        case GAP_MSG_LE_CONN_PARAM_UPDATE:
;;;373            {
;;;374                app_handle_conn_param_update_evt(gap_msg.msg_data.gap_conn_param_update.conn_id,
;;;375                                                 gap_msg.msg_data.gap_conn_param_update.status,
;;;376                                                 gap_msg.msg_data.gap_conn_param_update.cause);
;;;377            }
;;;378            break;
;;;379    
;;;380        case GAP_MSG_LE_AUTHEN_STATE_CHANGE:
;;;381            {
;;;382                app_handle_authen_state_evt(gap_msg.msg_data.gap_authen_state.conn_id,
;;;383                                            gap_msg.msg_data.gap_authen_state.new_state,
;;;384                                            gap_msg.msg_data.gap_authen_state.status);
;;;385            }
;;;386            break;
;;;387    
;;;388        case GAP_MSG_LE_BOND_JUST_WORK:
;;;389            {
;;;390                conn_id = gap_msg.msg_data.gap_bond_just_work_conf.conn_id;
;;;391                le_bond_just_work_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;392                APP_PRINT_INFO0("GAP_MSG_LE_BOND_JUST_WORK");
;;;393            }
;;;394            break;
;;;395    
;;;396        case GAP_MSG_LE_BOND_PASSKEY_DISPLAY:
;;;397            {
;;;398                uint32_t display_value = 0;
;;;399                conn_id = gap_msg.msg_data.gap_bond_passkey_display.conn_id;
;;;400                le_bond_get_display_key(conn_id, &display_value);
;;;401                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_DISPLAY:passkey %d", display_value);
;;;402                le_bond_passkey_display_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;403            }
;;;404            break;
;;;405    
;;;406        case GAP_MSG_LE_BOND_USER_CONFIRMATION:
;;;407            {
;;;408                uint32_t display_value = 0;
;;;409                conn_id = gap_msg.msg_data.gap_bond_user_conf.conn_id;
;;;410                le_bond_get_display_key(conn_id, &display_value);
;;;411                APP_PRINT_INFO1("GAP_MSG_LE_BOND_USER_CONFIRMATION: passkey %d", display_value);
;;;412                le_bond_user_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;413            }
;;;414            break;
;;;415    
;;;416        case GAP_MSG_LE_BOND_PASSKEY_INPUT:
;;;417            {
;;;418                uint32_t passkey = 888888;
;;;419                conn_id = gap_msg.msg_data.gap_bond_passkey_input.conn_id;
;;;420                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d", conn_id);
;;;421                le_bond_passkey_input_confirm(conn_id, passkey, GAP_CFM_CAUSE_ACCEPT);
;;;422            }
;;;423            break;
;;;424    
;;;425        case GAP_MSG_LE_BOND_OOB_INPUT:
;;;426            {
;;;427                uint8_t oob_data[GAP_OOB_LEN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
;;;428                conn_id = gap_msg.msg_data.gap_bond_oob_input.conn_id;
;;;429                APP_PRINT_INFO0("GAP_MSG_LE_BOND_OOB_INPUT");
;;;430                le_bond_set_param(GAP_PARAM_BOND_OOB_DATA, GAP_OOB_LEN, oob_data);
;;;431                le_bond_oob_input_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;432            }
;;;433            break;
;;;434    
;;;435        default:
;;;436            APP_PRINT_ERROR1("app_handle_gap_msg: unknown subtype %d", p_gap_msg->subtype);
;;;437            break;
;;;438        }
;;;439    }
;;;440    /** @} */ /* End of group PERIPH_GAP_MSG */
;;;441    
;;;442    
;;;443    
;;;444    /** @defgroup  PXP_SMART_GAP_CALLBACK GAP Callback Event Handler
;;;445        * @brief Handle GAP callback event
;;;446        * @{
;;;447        */
;;;448    /**
;;;449      * @brief Callback for gap le to notify app
;;;450      * @param[in] cb_type callback msy type @ref GAP_LE_MSG_Types.
;;;451      * @param[in] p_cb_data point to callback data @ref T_LE_CB_DATA.
;;;452      * @retval result @ref T_APP_RESULT
;;;453      */
;;;454    T_APP_RESULT app_gap_callback(uint8_t cb_type, void *p_cb_data)
;;;455    {
        0x00810266:    b57c        |.      PUSH     {r2-r6,lr}
        0x00810268:    2400        .$      MOVS     r4,#0
        0x0081026a:    4db5        .M      LDR      r5,[pc,#724] ; [0x810540] = 0x21103002
        0x0081026c:    2801        .(      CMP      r0,#1
        0x0081026e:    d016        ..      BEQ      0x81029e ; app_gap_callback + 56
;;;456        T_APP_RESULT result = APP_RESULT_SUCCESS;
;;;457        T_LE_CB_DATA *p_data = (T_LE_CB_DATA *)p_cb_data;
;;;458    
;;;459        switch (cb_type)
        0x00810270:    2814        .(      CMP      r0,#0x14
        0x00810272:    d007        ..      BEQ      0x810284 ; app_gap_callback + 30
        0x00810274:    4603        .F      MOV      r3,r0
        0x00810276:    2201        ."      MOVS     r2,#1
        0x00810278:    49b2        .I      LDR      r1,[pc,#712] ; [0x810544] = 0x8800c98
        0x0081027a:    1ea8        ..      SUBS     r0,r5,#2
        0x0081027c:    f7f7dbef    ....    BL       log_buffer ; 0x7a5e
        0x00810280:    4620         F      MOV      r0,r4
        0x00810282:    bd7c        |.      POP      {r2-r6,pc}
;;;460        {
;;;461        case GAP_MSG_LE_DATA_LEN_CHANGE_INFO:
;;;462            APP_PRINT_INFO3("GAP_MSG_LE_DATA_LEN_CHANGE_INFO: conn_id %d, tx octets 0x%x, max_tx_time 0x%x",
        0x00810284:    6808        .h      LDR      r0,[r1,#0]
        0x00810286:    8882        ..      LDRH     r2,[r0,#4]
        0x00810288:    8841        A.      LDRH     r1,[r0,#2]
        0x0081028a:    e9cd1200    ....    STRD     r1,r2,[sp,#0]
        0x0081028e:    49ad        .I      LDR      r1,[pc,#692] ; [0x810544] = 0x8800c98
        0x00810290:    7803        .x      LDRB     r3,[r0,#0]
        0x00810292:    2203        ."      MOVS     r2,#3
        0x00810294:    3990        .9      SUBS     r1,r1,#0x90
        0x00810296:    4628        (F      MOV      r0,r5
        0x00810298:    f7f7dbe1    ....    BL       log_buffer ; 0x7a5e
;;;463                            p_data->p_le_data_len_change_info->conn_id,
;;;464                            p_data->p_le_data_len_change_info->max_tx_octets,
;;;465                            p_data->p_le_data_len_change_info->max_tx_time);
;;;466            break;
        0x0081029c:    e7f0        ..      B        0x810280 ; app_gap_callback + 26
;;;467    
;;;468        case GAP_MSG_LE_MODIFY_WHITE_LIST:
;;;469            APP_PRINT_INFO2("GAP_MSG_LE_MODIFY_WHITE_LIST: operation %d, cause 0x%x",
        0x0081029e:    6808        .h      LDR      r0,[r1,#0]
        0x008102a0:    2202        ."      MOVS     r2,#2
        0x008102a2:    8841        A.      LDRH     r1,[r0,#2]
        0x008102a4:    9100        ..      STR      r1,[sp,#0]
        0x008102a6:    49a7        .I      LDR      r1,[pc,#668] ; [0x810544] = 0x8800c98
        0x008102a8:    7803        .x      LDRB     r3,[r0,#0]
        0x008102aa:    393c        <9      SUBS     r1,r1,#0x3c
        0x008102ac:    4628        (F      MOV      r0,r5
        0x008102ae:    f7f7dbd6    ....    BL       log_buffer ; 0x7a5e
;;;470                            p_data->p_le_modify_white_list_rsp->operation,
;;;471                            p_data->p_le_modify_white_list_rsp->cause);
;;;472            break;
        0x008102b2:    e7e5        ..      B        0x810280 ; app_gap_callback + 26
    app_profile_callback
;;;473    
;;;474        default:
;;;475            APP_PRINT_ERROR1("app_gap_callback: unhandled cb_type 0x%x", cb_type);
;;;476            break;
;;;477        }
;;;478        return result;
;;;479    }
;;;480    /** @} */ /* End of group PXP_GAP_CALLBACK */
;;;481    
;;;482    
;;;483    /** @defgroup  PXP_SEVER_CALLBACK Profile Server Callback Event Handler
;;;484        * @brief Handle profile server callback event
;;;485        * @{
;;;486        */
;;;487    /**
;;;488     * @brief    All the BT Profile service callback events are handled in this function
;;;489     * @note     Then the event handling function shall be called according to the
;;;490     *           service_id.
;;;491     * @param[in] service_id  Profile service ID
;;;492     * @param[in] p_data      Pointer to callback data
;;;493     * @return   Indicates the function call is successful or not
;;;494     * @retval   result @ref T_APP_RESULT
;;;495     */
;;;496    
;;;497    T_APP_RESULT app_profile_callback(T_SERVER_ID service_id, void *p_data)
;;;498    {
        0x008102b4:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x008102b8:    f8df8284    ....    LDR      r8,[pc,#644] ; [0x810540] = 0x21103002
        0x008102bc:    2500        .%      MOVS     r5,#0
        0x008102be:    4fa0        .O      LDR      r7,[pc,#640] ; [0x810540] = 0x21103002
;;; ..\include\SDK\src\app\pxp\pxp_app.c (498)
        0x008102c0:    b086        ..      SUB      sp,sp,#0x18
        0x008102c2:    f1a80802    ....    SUB      r8,r8,#2
        0x008102c6:    28ff        .(      CMP      r0,#0xff
        0x008102c8:    d00e        ..      BEQ      0x8102e8 ; app_profile_callback + 52
        0x008102ca:    4e9f        .N      LDR      r6,[pc,#636] ; [0x810548] = 0x2080d0
        0x008102cc:    4c9f        .L      LDR      r4,[pc,#636] ; [0x81054c] = 0x207eb4
        0x008102ce:    7972        ry      LDRB     r2,[r6,#5]
        0x008102d0:    4290        .B      CMP      r0,r2
        0x008102d2:    d149        I.      BNE      0x810368 ; app_profile_callback + 180
        0x008102d4:    460f        .F      MOV      r7,r1
        0x008102d6:    2200        ."      MOVS     r2,#0
        0x008102d8:    499d        .I      LDR      r1,[pc,#628] ; [0x810550] = 0x8800db0
        0x008102da:    4640        @F      MOV      r0,r8
        0x008102dc:    f7f7dbbf    ....    BL       log_buffer ; 0x7a5e
        0x008102e0:    7878        xx      LDRB     r0,[r7,#1]
        0x008102e2:    2803        .(      CMP      r0,#3
        0x008102e4:    d026        &.      BEQ      0x810334 ; app_profile_callback + 128
        0x008102e6:    e0eb        ..      B        0x8104c0 ; app_profile_callback + 524
        0x008102e8:    7808        .x      LDRB     r0,[r1,#0]
;;;499        T_APP_RESULT app_result = APP_RESULT_SUCCESS;
;;;500        if (service_id == SERVICE_PROFILE_GENERAL_ID)
;;;501        {
;;;502            T_SERVER_APP_CB_DATA *p_param = (T_SERVER_APP_CB_DATA *)p_data;
        0x008102ea:    460c        .F      MOV      r4,r1
;;;503            switch (p_param->eventId)
        0x008102ec:    b110        ..      CBZ      r0,0x8102f4 ; app_profile_callback + 64
        0x008102ee:    2801        .(      CMP      r0,#1
        0x008102f0:    d1f9        ..      BNE      0x8102e6 ; app_profile_callback + 50
        0x008102f2:    e007        ..      B        0x810304 ; app_profile_callback + 80
;;;504            {
;;;505            case PROFILE_EVT_SRV_REG_COMPLETE:// srv register result event.
;;;506                APP_PRINT_INFO1("PROFILE_EVT_SRV_REG_COMPLETE: result %d",
        0x008102f4:    788b        .x      LDRB     r3,[r1,#2]
        0x008102f6:    4993        .I      LDR      r1,[pc,#588] ; [0x810544] = 0x8800c98
        0x008102f8:    2201        ."      MOVS     r2,#1
        0x008102fa:    312c        ,1      ADDS     r1,r1,#0x2c
        0x008102fc:    4638        8F      MOV      r0,r7
        0x008102fe:    f7f7dbae    ....    BL       log_buffer ; 0x7a5e
;;;507                                p_param->event_data.service_reg_result);
;;;508                break;
        0x00810302:    e0dd        ..      B        0x8104c0 ; app_profile_callback + 524
;;;509    
;;;510            case PROFILE_EVT_SEND_DATA_COMPLETE:
;;;511                APP_PRINT_INFO5("PROFILE_EVT_SEND_DATA_COMPLETE: conn_id %d, cause 0x%x, service_id %d, attrib_idx 0x%x, credits %d",
        0x00810304:    8920         .      LDRH     r0,[r4,#8]
        0x00810306:    8863        c.      LDRH     r3,[r4,#2]
        0x00810308:    88e2        ..      LDRH     r2,[r4,#6]
        0x0081030a:    7961        ay      LDRB     r1,[r4,#5]
        0x0081030c:    e88d000f    ....    STM      sp,{r0-r3}
        0x00810310:    498c        .I      LDR      r1,[pc,#560] ; [0x810544] = 0x8800c98
        0x00810312:    7923        #y      LDRB     r3,[r4,#4]
        0x00810314:    2205        ."      MOVS     r2,#5
        0x00810316:    3158        X1      ADDS     r1,r1,#0x58
        0x00810318:    4638        8F      MOV      r0,r7
        0x0081031a:    f7f7dba0    ....    BL       log_buffer ; 0x7a5e
;;;512                                p_param->event_data.send_data_result.conn_id,
;;;513                                p_param->event_data.send_data_result.cause,
;;;514                                p_param->event_data.send_data_result.service_id,
;;;515                                p_param->event_data.send_data_result.attrib_idx,
;;;516                                p_param->event_data.send_data_result.credits);
;;;517                if (p_param->event_data.send_data_result.cause == GAP_SUCCESS)
        0x0081031e:    8920         .      LDRH     r0,[r4,#8]
        0x00810320:    f04f0200    O...    MOV      r2,#0
        0x00810324:    b118        ..      CBZ      r0,0x81032e ; app_profile_callback + 122
        0x00810326:    498a        .I      LDR      r1,[pc,#552] ; [0x810550] = 0x8800db0
        0x00810328:    4640        @F      MOV      r0,r8
        0x0081032a:    392c        ,9      SUBS     r1,r1,#0x2c
        0x0081032c:    e088        ..      B        0x810440 ; app_profile_callback + 396
;;;518                {
;;;519                    APP_PRINT_INFO0("PROFILE_EVT_SEND_DATA_COMPLETE success");
        0x0081032e:    4988        .I      LDR      r1,[pc,#544] ; [0x810550] = 0x8800db0
        0x00810330:    3958        X9      SUBS     r1,r1,#0x58
        0x00810332:    e084        ..      B        0x81043e ; app_profile_callback + 394
;;;520                }
;;;521                else
;;;522                {
;;;523                    APP_PRINT_ERROR0("PROFILE_EVT_SEND_DATA_COMPLETE failed");
;;;524                }
;;;525                break;
;;;526    
;;;527            default:
;;;528                break;
;;;529            }
;;;530        }
;;;531        else if (service_id == ias_srv_id)
;;;532        {
;;;533            T_IAS_CALLBACK_DATA *p_ias_cb_data = (T_IAS_CALLBACK_DATA *)p_data;
;;;534            APP_PRINT_ERROR0("IAS CallBack.");
;;;535            if (p_ias_cb_data->msg_type == SERVICE_CALLBACK_TYPE_WRITE_CHAR_VALUE)
;;;536            {
;;;537                g_pxp_immediate_alert_level = p_ias_cb_data->msg_data.write_alert_level;
        0x00810334:    78b8        .x      LDRB     r0,[r7,#2]
        0x00810336:    2102        .!      MOVS     r1,#2
        0x00810338:    72f0        .r      STRB     r0,[r6,#0xb]
        0x0081033a:    f44f7761    O.aw    MOV      r7,#0x384
;;;538                if (g_pxp_immediate_alert_level == 1)
        0x0081033e:    2801        .(      CMP      r0,#1
        0x00810340:    d004        ..      BEQ      0x81034c ; app_profile_callback + 152
        0x00810342:    2802        .(      CMP      r0,#2
        0x00810344:    d008        ..      BEQ      0x810358 ; app_profile_callback + 164
        0x00810346:    f7fefb17    ....    BL       StopPxpIO ; 0x80e978
        0x0081034a:    e0b9        ..      B        0x8104c0 ; app_profile_callback + 524
;;;539                {
;;;540                    gIoState = IoStateImmAlert;
        0x0081034c:    7071        qp      STRB     r1,[r6,#1]
;;;541                    StopPxpIO();
        0x0081034e:    f7fefb13    ....    BL       StopPxpIO ; 0x80e978
;;;542                    StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK, gTimeParaValue);
        0x00810352:    2201        ."      MOVS     r2,#1
        0x00810354:    6863        ch      LDR      r3,[r4,#4]
        0x00810356:    e002        ..      B        0x81035e ; app_profile_callback + 170
        0x00810358:    7071        qp      STRB     r1,[r6,#1]
        0x0081035a:    6863        ch      LDR      r3,[r4,#4]
        0x0081035c:    2203        ."      MOVS     r2,#3
        0x0081035e:    2164        d!      MOVS     r1,#0x64
        0x00810360:    4638        8F      MOV      r0,r7
        0x00810362:    f7fefb20    .. .    BL       StartPxpIO ; 0x80e9a6
        0x00810366:    e0ab        ..      B        0x8104c0 ; app_profile_callback + 524
;;;543                }
;;;544                else if (g_pxp_immediate_alert_level == 2)
;;;545                {
;;;546                    gIoState = IoStateImmAlert;
;;;547                    StartPxpIO(ALERT_LOW_PERIOD, ALERT_HIGH_PERIOD, LED_BLINK | BEEP_ALERT, gTimeParaValue);
;;;548                }
;;;549                else
;;;550                {
;;;551                    StopPxpIO();
;;;552                }
;;;553            }
;;;554        }
;;;555        else if (service_id == lls_srv_id)
        0x00810368:    79b2        .y      LDRB     r2,[r6,#6]
        0x0081036a:    4290        .B      CMP      r0,r2
        0x0081036c:    d10d        ..      BNE      0x81038a ; app_profile_callback + 214
;;;556        {
;;;557            T_LLS_CALLBACK_DATA *p_lls_cb_data = (T_LLS_CALLBACK_DATA *)p_data;
;;;558            switch (p_lls_cb_data->msg_type)
        0x0081036e:    7848        Hx      LDRB     r0,[r1,#1]
        0x00810370:    2802        .(      CMP      r0,#2
        0x00810372:    d004        ..      BEQ      0x81037e ; app_profile_callback + 202
        0x00810374:    2803        .(      CMP      r0,#3
        0x00810376:    d101        ..      BNE      0x81037c ; app_profile_callback + 200
;;;559            {
;;;560            case SERVICE_CALLBACK_TYPE_WRITE_CHAR_VALUE:
;;;561                g_pxp_linkloss_alert_level = p_lls_cb_data->msg_data.write_alert_level;
        0x00810378:    7888        .x      LDRB     r0,[r1,#2]
        0x0081037a:    7020         p      STRB     r0,[r4,#0]
;;;562                break;
        0x0081037c:    e0a0        ..      B        0x8104c0 ; app_profile_callback + 524
;;;563            case SERVICE_CALLBACK_TYPE_READ_CHAR_VALUE:
;;;564                lls_set_parameter(LLS_PARAM_LINK_LOSS_ALERT_LEVEL, 1, &g_pxp_linkloss_alert_level);
        0x0081037e:    4a73        sJ      LDR      r2,[pc,#460] ; [0x81054c] = 0x207eb4
        0x00810380:    2101        .!      MOVS     r1,#1
        0x00810382:    2000        .       MOVS     r0,#0
        0x00810384:    f7fff9a0    ....    BL       lls_set_parameter ; 0x80f6c8
;;;565                break;
        0x00810388:    e09a        ..      B        0x8104c0 ; app_profile_callback + 524
;;;566            default:
;;;567                break;
;;;568            }
;;;569        }
;;;570        else if (service_id == tps_srv_id)
        0x0081038a:    79f3        .y      LDRB     r3,[r6,#7]
        0x0081038c:    2200        ."      MOVS     r2,#0
        0x0081038e:    4298        .B      CMP      r0,r3
        0x00810390:    d10d        ..      BNE      0x8103ae ; app_profile_callback + 250
;;;571        {
;;;572            T_TPS_CALLBACK_DATA *p_tps_cb_data = (T_TPS_CALLBACK_DATA *)p_data;
;;;573            if (p_tps_cb_data->msg_type == SERVICE_CALLBACK_TYPE_READ_CHAR_VALUE)
        0x00810392:    7848        Hx      LDRB     r0,[r1,#1]
        0x00810394:    2802        .(      CMP      r0,#2
        0x00810396:    d109        ..      BNE      0x8103ac ; app_profile_callback + 248
;;;574            {
;;;575                if (p_tps_cb_data->msg_data.read_value_index == TPS_READ_TX_POWER_VALUE)
        0x00810398:    7888        .x      LDRB     r0,[r1,#2]
        0x0081039a:    2801        .(      CMP      r0,#1
        0x0081039c:    d106        ..      BNE      0x8103ac ; app_profile_callback + 248
;;;576                {
;;;577                    uint8_t tps_value = 0;
        0x0081039e:    f88d2000    ...     STRB     r2,[sp,#0]
;;;578                    tps_set_parameter(TPS_PARAM_TX_POWER, 1, &tps_value);
        0x008103a2:    466a        jF      MOV      r2,sp
        0x008103a4:    2101        .!      MOVS     r1,#1
        0x008103a6:    2000        .       MOVS     r0,#0
        0x008103a8:    f7fffa20    .. .    BL       tps_set_parameter ; 0x80f7ec
;;;579                }
        0x008103ac:    e088        ..      B        0x8104c0 ; app_profile_callback + 524
;;;580            }
;;;581        }
;;;582    
;;;583        else  if (service_id == kns_srv_id)
        0x008103ae:    7a33        3z      LDRB     r3,[r6,#8]
        0x008103b0:    4298        .B      CMP      r0,r3
        0x008103b2:    d12e        ..      BNE      0x810412 ; app_profile_callback + 350
        0x008103b4:    7808        .x      LDRB     r0,[r1,#0]
;;;584        {
;;;585            T_KNS_CALLBACK_DATA *p_kns_cb_data = (T_KNS_CALLBACK_DATA *)p_data;
        0x008103b6:    460e        .F      MOV      r6,r1
;;;586            switch (p_kns_cb_data->msg_type)
        0x008103b8:    2801        .(      CMP      r0,#1
        0x008103ba:    d004        ..      BEQ      0x8103c6 ; app_profile_callback + 274
        0x008103bc:    2802        .(      CMP      r0,#2
        0x008103be:    d00e        ..      BEQ      0x8103de ; app_profile_callback + 298
        0x008103c0:    2803        .(      CMP      r0,#3
        0x008103c2:    d17d        }.      BNE      0x8104c0 ; app_profile_callback + 524
        0x008103c4:    e01b        ..      B        0x8103fe ; app_profile_callback + 330
;;;587            {
;;;588            case SERVICE_CALLBACK_TYPE_INDIFICATION_NOTIFICATION:
;;;589                {
;;;590                    switch (p_kns_cb_data->msg_data.notification_indification_index)
        0x008103c6:    7908        .y      LDRB     r0,[r1,#4]
        0x008103c8:    b128        (.      CBZ      r0,0x8103d6 ; app_profile_callback + 290
        0x008103ca:    2801        .(      CMP      r0,#1
        0x008103cc:    d178        x.      BNE      0x8104c0 ; app_profile_callback + 524
;;;591                    {
;;;592                    case KNS_NOTIFY_ENABLE:
;;;593                        {
;;;594                            APP_PRINT_INFO0("KNS_NOTIFY_ENABLE");
        0x008103ce:    4960        `I      LDR      r1,[pc,#384] ; [0x810550] = 0x8800db0
        0x008103d0:    2200        ."      MOVS     r2,#0
        0x008103d2:    3114        .1      ADDS     r1,r1,#0x14
;;;595                        }
;;;596                        break;
        0x008103d4:    e033        3.      B        0x81043e ; app_profile_callback + 394
;;;597    
;;;598                    case KNS_NOTIFY_DISABLE:
;;;599                        {
;;;600                            APP_PRINT_INFO0("KNS_NOTIFY_DISABLE");
        0x008103d6:    495e        ^I      LDR      r1,[pc,#376] ; [0x810550] = 0x8800db0
        0x008103d8:    2200        ."      MOVS     r2,#0
        0x008103da:    312c        ,1      ADDS     r1,r1,#0x2c
;;;601                        }
;;;602                        break;
        0x008103dc:    e02f        /.      B        0x81043e ; app_profile_callback + 394
;;;603                    default:
;;;604                        break;
;;;605                    }
;;;606                }
;;;607                break;
;;;608    
;;;609            case SERVICE_CALLBACK_TYPE_READ_CHAR_VALUE:
;;;610                {
;;;611                    if (p_kns_cb_data->msg_data.read_index == KNS_READ_PARA)
        0x008103de:    7908        .y      LDRB     r0,[r1,#4]
        0x008103e0:    2802        .(      CMP      r0,#2
        0x008103e2:    d16d        m.      BNE      0x8104c0 ; app_profile_callback + 524
;;;612                    {
;;;613                        APP_PRINT_INFO0("KNS_READ_PARA");
        0x008103e4:    495a        ZI      LDR      r1,[pc,#360] ; [0x810550] = 0x8800db0
        0x008103e6:    2200        ."      MOVS     r2,#0
        0x008103e8:    3144        D1      ADDS     r1,r1,#0x44
        0x008103ea:    4638        8F      MOV      r0,r7
        0x008103ec:    f7f7db37    ..7.    BL       log_buffer ; 0x7a5e
;;;614                        kns_set_parameter(KNS_PARAM_VALUE, 4, &gTimeParaValue);
        0x008103f0:    4a56        VJ      LDR      r2,[pc,#344] ; [0x81054c] = 0x207eb4
        0x008103f2:    2104        .!      MOVS     r1,#4
        0x008103f4:    1d12        ..      ADDS     r2,r2,#4
        0x008103f6:    2000        .       MOVS     r0,#0
        0x008103f8:    f7fffb14    ....    BL       kns_set_parameter ; 0x80fa24
        0x008103fc:    e060        `.      B        0x8104c0 ; app_profile_callback + 524
;;;615                    }
;;;616                }
;;;617                break;
;;;618            case SERVICE_CALLBACK_TYPE_WRITE_CHAR_VALUE:
;;;619                {
;;;620                    APP_PRINT_INFO1("KNS_WRITE_PARA %x", p_kns_cb_data->msg_data.write_value);
        0x008103fe:    4954        TI      LDR      r1,[pc,#336] ; [0x810550] = 0x8800db0
        0x00810400:    2201        ."      MOVS     r2,#1
        0x00810402:    3158        X1      ADDS     r1,r1,#0x58
        0x00810404:    4638        8F      MOV      r0,r7
        0x00810406:    6873        sh      LDR      r3,[r6,#4]
        0x00810408:    f7f7db29    ..).    BL       log_buffer ; 0x7a5e
;;;621                    gTimeParaValue = p_kns_cb_data->msg_data.write_value;
        0x0081040c:    6870        ph      LDR      r0,[r6,#4]
;;;622                }
;;;623                break;
        0x0081040e:    6060        ``      STR      r0,[r4,#4]
        0x00810410:    e056        V.      B        0x8104c0 ; app_profile_callback + 524
;;;624    
;;;625            default:
;;;626                break;
;;;627            }
;;;628        }
;;;629        else if (service_id == bas_srv_id)
        0x00810412:    7a73        sz      LDRB     r3,[r6,#9]
        0x00810414:    4298        .B      CMP      r0,r3
        0x00810416:    d128        (.      BNE      0x81046a ; app_profile_callback + 438
;;;630        {
;;;631            T_BAS_CALLBACK_DATA *p_bas_cb_data = (T_BAS_CALLBACK_DATA *)p_data;
;;;632            switch (p_bas_cb_data->msg_type)
        0x00810418:    7848        Hx      LDRB     r0,[r1,#1]
        0x0081041a:    2801        .(      CMP      r0,#1
        0x0081041c:    d002        ..      BEQ      0x810424 ; app_profile_callback + 368
        0x0081041e:    2802        .(      CMP      r0,#2
        0x00810420:    d14e        N.      BNE      0x8104c0 ; app_profile_callback + 524
        0x00810422:    e010        ..      B        0x810446 ; app_profile_callback + 402
;;;633            {
;;;634            case SERVICE_CALLBACK_TYPE_INDIFICATION_NOTIFICATION:
;;;635                {
;;;636                    switch (p_bas_cb_data->msg_data.notification_indification_index)
        0x00810424:    7888        .x      LDRB     r0,[r1,#2]
        0x00810426:    2801        .(      CMP      r0,#1
        0x00810428:    d002        ..      BEQ      0x810430 ; app_profile_callback + 380
        0x0081042a:    2802        .(      CMP      r0,#2
        0x0081042c:    d148        H.      BNE      0x8104c0 ; app_profile_callback + 524
        0x0081042e:    e003        ..      B        0x810438 ; app_profile_callback + 388
;;;637                    {
;;;638                    case BAS_NOTIFY_BATTERY_LEVEL_ENABLE:
;;;639                        {
;;;640                            APP_PRINT_INFO0("BAS_NOTIFY_BATTERY_LEVEL_ENABLE");
        0x00810430:    4947        GI      LDR      r1,[pc,#284] ; [0x810550] = 0x8800db0
        0x00810432:    2200        ."      MOVS     r2,#0
        0x00810434:    3170        p1      ADDS     r1,r1,#0x70
        0x00810436:    e002        ..      B        0x81043e ; app_profile_callback + 394
        0x00810438:    4945        EI      LDR      r1,[pc,#276] ; [0x810550] = 0x8800db0
        0x0081043a:    2200        ."      MOVS     r2,#0
        0x0081043c:    3194        .1      ADDS     r1,r1,#0x94
        0x0081043e:    4638        8F      MOV      r0,r7
        0x00810440:    f7f7db0d    ....    BL       log_buffer ; 0x7a5e
        0x00810444:    e03c        <.      B        0x8104c0 ; app_profile_callback + 524
;;;641                        }
;;;642                        break;
;;;643    
;;;644                    case BAS_NOTIFY_BATTERY_LEVEL_DISABLE:
;;;645                        {
;;;646                            APP_PRINT_INFO0("BAS_NOTIFY_BATTERY_LEVEL_DISABLE");
;;;647                        }
;;;648                        break;
;;;649                    default:
;;;650                        break;
;;;651                    }
;;;652                }
;;;653                break;
;;;654    
;;;655            case SERVICE_CALLBACK_TYPE_READ_CHAR_VALUE:
;;;656                {
;;;657                    if (p_bas_cb_data->msg_data.read_value_index == BAS_READ_BATTERY_LEVEL)
        0x00810446:    7888        .x      LDRB     r0,[r1,#2]
        0x00810448:    2801        .(      CMP      r0,#1
        0x0081044a:    d139        9.      BNE      0x8104c0 ; app_profile_callback + 524
        0x0081044c:    4940        @I      LDR      r1,[pc,#256] ; [0x810550] = 0x8800db0
;;;658                    {
;;;659                        uint8_t battery_level = 90;
        0x0081044e:    235a        Z#      MOVS     r3,#0x5a
        0x00810450:    f88d3000    ...0    STRB     r3,[sp,#0]
;;;660                        APP_PRINT_INFO1("BAS_READ_BATTERY_LEVEL: battery_level %d", battery_level);
        0x00810454:    2201        ."      MOVS     r2,#1
        0x00810456:    31b8        .1      ADDS     r1,r1,#0xb8
        0x00810458:    4638        8F      MOV      r0,r7
        0x0081045a:    f7f7db00    ....    BL       log_buffer ; 0x7a5e
;;;661                        bas_set_parameter(BAS_PARAM_BATTERY_LEVEL, 1, &battery_level);
        0x0081045e:    2101        .!      MOVS     r1,#1
        0x00810460:    466a        jF      MOV      r2,sp
        0x00810462:    4608        .F      MOV      r0,r1
        0x00810464:    f7fffa28    ..(.    BL       bas_set_parameter ; 0x80f8b8
;;;662                    }
        0x00810468:    e02a        *.      B        0x8104c0 ; app_profile_callback + 524
;;;663                }
;;;664                break;
;;;665            default:
;;;666                break;
;;;667            }
;;;668        }
;;;669        else if (service_id == dis_srv_id)
        0x0081046a:    7ab3        .z      LDRB     r3,[r6,#0xa]
        0x0081046c:    4298        .B      CMP      r0,r3
        0x0081046e:    d127        '.      BNE      0x8104c0 ; app_profile_callback + 524
;;;670        {
;;;671            T_DIS_CALLBACK_DATA *p_dis_cb_data = (T_DIS_CALLBACK_DATA *)p_data;
;;;672            switch (p_dis_cb_data->msg_type)
        0x00810470:    7808        .x      LDRB     r0,[r1,#0]
        0x00810472:    2802        .(      CMP      r0,#2
        0x00810474:    d124        $.      BNE      0x8104c0 ; app_profile_callback + 524
;;;673            {
;;;674            case SERVICE_CALLBACK_TYPE_READ_CHAR_VALUE:
;;;675                {
;;;676                    if (p_dis_cb_data->msg_data.read_value_index == DIS_READ_MANU_NAME_INDEX)
        0x00810476:    7889        .x      LDRB     r1,[r1,#2]
        0x00810478:    2901        .)      CMP      r1,#1
        0x0081047a:    d010        ..      BEQ      0x81049e ; app_profile_callback + 490
;;;677                    {
;;;678                        const uint8_t DISManufacturerName[] = "Realtek BT";
;;;679                        dis_set_parameter(DIS_PARAM_MANUFACTURER_NAME,
;;;680                                          sizeof(DISManufacturerName),
;;;681                                          (void *)DISManufacturerName);
;;;682    
;;;683                    }
;;;684                    else if (p_dis_cb_data->msg_data.read_value_index == DIS_READ_MODEL_NUM_INDEX)
        0x0081047c:    2902        .)      CMP      r1,#2
        0x0081047e:    d016        ..      BEQ      0x8104ae ; app_profile_callback + 506
;;;685                    {
;;;686                        const uint8_t DISModelNumber[] = "Model Nbr 0.9";
;;;687                        dis_set_parameter(DIS_PARAM_MODEL_NUMBER,
;;;688                                          sizeof(DISModelNumber),
;;;689                                          (void *)DISModelNumber);
;;;690                    }
;;;691                    else if (p_dis_cb_data->msg_data.read_value_index == DIS_READ_SERIAL_NUM_INDEX)
        0x00810480:    2903        .)      CMP      r1,#3
        0x00810482:    d020         .      BEQ      0x8104c6 ; app_profile_callback + 530
        0x00810484:    2904        .)      CMP      r1,#4
        0x00810486:    d026        &.      BEQ      0x8104d6 ; app_profile_callback + 546
        0x00810488:    2905        .)      CMP      r1,#5
        0x0081048a:    d02d        -.      BEQ      0x8104e8 ; app_profile_callback + 564
        0x0081048c:    2906        .)      CMP      r1,#6
        0x0081048e:    d034        4.      BEQ      0x8104fa ; app_profile_callback + 582
        0x00810490:    2907        .)      CMP      r1,#7
        0x00810492:    d03b        ;.      BEQ      0x81050c ; app_profile_callback + 600
        0x00810494:    2908        .)      CMP      r1,#8
        0x00810496:    d042        B.      BEQ      0x81051e ; app_profile_callback + 618
        0x00810498:    2909        .)      CMP      r1,#9
        0x0081049a:    d049        I.      BEQ      0x810530 ; app_profile_callback + 636
        0x0081049c:    e010        ..      B        0x8104c0 ; app_profile_callback + 524
        0x0081049e:    a02d        -.      ADR      r0,{pc}+0xb6 ; 0x810554
        0x008104a0:    c807        ..      LDM      r0,{r0-r2}
        0x008104a2:    e88d0007    ....    STM      sp,{r0-r2}
        0x008104a6:    210b        .!      MOVS     r1,#0xb
        0x008104a8:    466a        jF      MOV      r2,sp
        0x008104aa:    2000        .       MOVS     r0,#0
        0x008104ac:    e006        ..      B        0x8104bc ; app_profile_callback + 520
        0x008104ae:    a02c        ,.      ADR      r0,{pc}+0xb2 ; 0x810560
        0x008104b0:    c80f        ..      LDM      r0,{r0-r3}
        0x008104b2:    e88d000f    ....    STM      sp,{r0-r3}
        0x008104b6:    466a        jF      MOV      r2,sp
        0x008104b8:    210e        .!      MOVS     r1,#0xe
        0x008104ba:    2001        .       MOVS     r0,#1
        0x008104bc:    f7fffb70    ..p.    BL       dis_set_parameter ; 0x80fba0
        0x008104c0:    4628        (F      MOV      r0,r5
        0x008104c2:    b006        ..      ADD      sp,sp,#0x18
        0x008104c4:    e5a6        ..      B        0x810014 ; app_handle_conn_state_evt + 244
;;;692                    {
;;;693                        const uint8_t DISSerialNumber[] = "RTKBeeSerialNum";
        0x008104c6:    a02a        *.      ADR      r0,{pc}+0xaa ; 0x810570
        0x008104c8:    c80f        ..      LDM      r0,{r0-r3}
        0x008104ca:    e88d000f    ....    STM      sp,{r0-r3}
;;;694                        dis_set_parameter(DIS_PARAM_SERIAL_NUMBER,
        0x008104ce:    2110        .!      MOVS     r1,#0x10
        0x008104d0:    466a        jF      MOV      r2,sp
        0x008104d2:    2002        .       MOVS     r0,#2
;;;695                                          sizeof(DISSerialNumber),
;;;696                                          (void *)DISSerialNumber);
;;;697    
;;;698                    }
        0x008104d4:    e7f2        ..      B        0x8104bc ; app_profile_callback + 520
;;;699                    else if (p_dis_cb_data->msg_data.read_value_index == DIS_READ_HARDWARE_REV_INDEX)
;;;700                    {
;;;701                        const uint8_t DISHardwareRev[] = "RTKBeeHardwareRev";
        0x008104d6:    2214        ."      MOVS     r2,#0x14
        0x008104d8:    a129        ).      ADR      r1,{pc}+0xa8 ; 0x810580
        0x008104da:    4668        hF      MOV      r0,sp
        0x008104dc:    f449f564    I.d.    BL       __aeabi_memcpy4 ; 0x59fa8
;;;702                        dis_set_parameter(DIS_PARAM_HARDWARE_REVISION,
        0x008104e0:    2112        .!      MOVS     r1,#0x12
        0x008104e2:    466a        jF      MOV      r2,sp
        0x008104e4:    2003        .       MOVS     r0,#3
;;;703                                          sizeof(DISHardwareRev),
;;;704                                          (void *)DISHardwareRev);
;;;705                    }
        0x008104e6:    e7e9        ..      B        0x8104bc ; app_profile_callback + 520
;;;706                    else if (p_dis_cb_data->msg_data.read_value_index == DIS_READ_FIRMWARE_REV_INDEX)
;;;707                    {
;;;708                        const uint8_t DISFirmwareRev[] = "RTKBeeFirmwareRev";
        0x008104e8:    2214        ."      MOVS     r2,#0x14
        0x008104ea:    a12a        *.      ADR      r1,{pc}+0xaa ; 0x810594
        0x008104ec:    4668        hF      MOV      r0,sp
        0x008104ee:    f449f55b    I.[.    BL       __aeabi_memcpy4 ; 0x59fa8
;;;709                        dis_set_parameter(DIS_PARAM_FIRMWARE_REVISION,
        0x008104f2:    2112        .!      MOVS     r1,#0x12
        0x008104f4:    466a        jF      MOV      r2,sp
        0x008104f6:    2004        .       MOVS     r0,#4
;;;710                                          sizeof(DISFirmwareRev),
;;;711                                          (void *)DISFirmwareRev);
;;;712                    }
        0x008104f8:    e7e0        ..      B        0x8104bc ; app_profile_callback + 520
;;;713                    else if (p_dis_cb_data->msg_data.read_value_index == DIS_READ_SOFTWARE_REV_INDEX)
;;;714                    {
;;;715                        const uint8_t DISSoftwareRev[] = "RTKBeeSoftwareRev";
        0x008104fa:    2214        ."      MOVS     r2,#0x14
        0x008104fc:    a12a        *.      ADR      r1,{pc}+0xac ; 0x8105a8
        0x008104fe:    4668        hF      MOV      r0,sp
        0x00810500:    f449f552    I.R.    BL       __aeabi_memcpy4 ; 0x59fa8
;;;716                        dis_set_parameter(DIS_PARAM_SOFTWARE_REVISION,
        0x00810504:    2112        .!      MOVS     r1,#0x12
        0x00810506:    466a        jF      MOV      r2,sp
        0x00810508:    2005        .       MOVS     r0,#5
;;;717                                          sizeof(DISSoftwareRev),
;;;718                                          (void *)DISSoftwareRev);
;;;719                    }
        0x0081050a:    e7d7        ..      B        0x8104bc ; app_profile_callback + 520
;;;720                    else if (p_dis_cb_data->msg_data.read_value_index == DIS_READ_SYSTEM_ID_INDEX)
;;;721                    {
;;;722                        const uint8_t DISSystemID[DIS_SYSTEM_ID_LENGTH] = {0, 1, 2, 0, 0, 3, 4, 5};
        0x0081050c:    a02b        +.      ADR      r0,{pc}+0xb0 ; 0x8105bc
        0x0081050e:    466a        jF      MOV      r2,sp
        0x00810510:    e9d01000    ....    LDRD     r1,r0,[r0,#0]
;;;723                        dis_set_parameter(DIS_PARAM_SYSTEM_ID,
        0x00810514:    e9cd1000    ....    STRD     r1,r0,[sp,#0]
        0x00810518:    2108        .!      MOVS     r1,#8
        0x0081051a:    2006        .       MOVS     r0,#6
;;;724                                          sizeof(DISSystemID),
;;;725                                          (void *)DISSystemID);
;;;726    
;;;727                    }
        0x0081051c:    e7ce        ..      B        0x8104bc ; app_profile_callback + 520
;;;728                    else if (p_dis_cb_data->msg_data.read_value_index == DIS_READ_IEEE_CERT_STR_INDEX)
;;;729                    {
;;;730                        const uint8_t DISIEEEDataList[] = "RTKBeeIEEEDatalist";
        0x0081051e:    2214        ."      MOVS     r2,#0x14
        0x00810520:    a128        (.      ADR      r1,{pc}+0xa4 ; 0x8105c4
        0x00810522:    4668        hF      MOV      r0,sp
        0x00810524:    f449f540    I.@.    BL       __aeabi_memcpy4 ; 0x59fa8
;;;731                        dis_set_parameter(DIS_PARAM_IEEE_DATA_LIST,
        0x00810528:    2113        .!      MOVS     r1,#0x13
        0x0081052a:    466a        jF      MOV      r2,sp
        0x0081052c:    2007        .       MOVS     r0,#7
;;;732                                          sizeof(DISIEEEDataList),
;;;733                                          (void *)DISIEEEDataList);
;;;734                    }
        0x0081052e:    e7c5        ..      B        0x8104bc ; app_profile_callback + 520
;;;735                    else if (p_dis_cb_data->msg_data.read_value_index == DIS_READ_PNP_ID_INDEX)
;;;736                    {
;;;737                        uint8_t DISPnpID[DIS_PNP_ID_LENGTH] = {0};
        0x00810530:    9200        ..      STR      r2,[sp,#0]
;;;738                        dis_set_parameter(DIS_PARAM_PNP_ID,
        0x00810532:    9201        ..      STR      r2,[sp,#4]
        0x00810534:    2107        .!      MOVS     r1,#7
        0x00810536:    466a        jF      MOV      r2,sp
        0x00810538:    2008        .       MOVS     r0,#8
;;;739                                          sizeof(DISPnpID),
;;;740                                          DISPnpID);
;;;741                    }
        0x0081053a:    e7bf        ..      B        0x8104bc ; app_profile_callback + 520
    $d
        0x0081053c:    08800674    t...    DCD    142607988
        0x00810540:    21103002    .0.!    DCD    554708994
        0x00810544:    08800c98    ....    DCD    142609560
        0x00810548:    002080d0    .. .    DCD    2130128
        0x0081054c:    00207eb4    .~ .    DCD    2129588
        0x00810550:    08800db0    ....    DCD    142609840
        0x00810554:    6c616552    Real    DCD    1818322258
        0x00810558:    206b6574    tek     DCD    543909236
        0x0081055c:    00005442    BT..    DCD    21570
        0x00810560:    65646f4d    Mode    DCD    1701080909
        0x00810564:    624e206c    l Nb    DCD    1649287276
        0x00810568:    2e302072    r 0.    DCD    774905970
        0x0081056c:    00000039    9...    DCD    57
        0x00810570:    424b5452    RTKB    DCD    1112233042
        0x00810574:    65536565    eeSe    DCD    1699964261
        0x00810578:    6c616972    rial    DCD    1818323314
        0x0081057c:    006d754e    Num.    DCD    7173454
        0x00810580:    424b5452    RTKB    DCD    1112233042
        0x00810584:    61486565    eeHa    DCD    1632134501
        0x00810588:    61776472    rdwa    DCD    1635214450
        0x0081058c:    65526572    reRe    DCD    1699898738
        0x00810590:    00000076    v...    DCD    118
        0x00810594:    424b5452    RTKB    DCD    1112233042
        0x00810598:    69466565    eeFi    DCD    1766221157
        0x0081059c:    61776d72    rmwa    DCD    1635216754
        0x008105a0:    65526572    reRe    DCD    1699898738
        0x008105a4:    00000076    v...    DCD    118
        0x008105a8:    424b5452    RTKB    DCD    1112233042
        0x008105ac:    6f536565    eeSo    DCD    1867736421
        0x008105b0:    61777466    ftwa    DCD    1635218534
        0x008105b4:    65526572    reRe    DCD    1699898738
        0x008105b8:    00000076    v...    DCD    118
        0x008105bc:    00020100    ....    DCD    131328
        0x008105c0:    05040300    ....    DCD    84148992
        0x008105c4:    424b5452    RTKB    DCD    1112233042
        0x008105c8:    45496565    eeIE    DCD    1162437989
        0x008105cc:    61444545    EEDa    DCD    1631864133
        0x008105d0:    696c6174    tali    DCD    1768710516
        0x008105d4:    00007473    st..    DCD    29811
    $t
    .text
    load_overlay
;;; .\..\include\SDK\src\mcu\rtl876x\overlay_mgr.c
;;;116    {
        0x008105d8:    b510        ..      PUSH     {r4,lr}
        0x008105da:    2803        .(      CMP      r0,#3
;;; .\..\include\SDK\src\mcu\rtl876x\overlay_mgr.c (116)
        0x008105dc:    d301        ..      BCC      0x8105e2 ; load_overlay + 10
;;;117        const T_OVERLAY_SECTION *selected_scenario;
;;;118    
;;;119        if (scenario_idx >= OVERLAY_SCENARIO_NUM)
;;;120        {
;;;121            return false;
        0x008105de:    2000        .       MOVS     r0,#0
        0x008105e0:    bd10        ..      POP      {r4,pc}
;;;122        }
;;;123    
;;;124        selected_scenario = &overlay_sections[scenario_idx];
        0x008105e2:    491a        .I      LDR      r1,[pc,#104] ; [0x81064c] = 0x207ebc
        0x008105e4:    eb0000c0    ....    ADD      r0,r0,r0,LSL #3
        0x008105e8:    eb010480    ....    ADD      r4,r1,r0,LSL #2
;;;125    
;;;126        if (memcmp(selected_scenario->signature, scenario_name, 8) == 0)
        0x008105ec:    2208        ."      MOVS     r2,#8
        0x008105ee:    4918        .I      LDR      r1,[pc,#96] ; [0x810650] = 0x2080dc
        0x008105f0:    6820         h      LDR      r0,[r4,#0]
        0x008105f2:    f449f407    I...    BL       memcmp ; 0x59e04
        0x008105f6:    b198        ..      CBZ      r0,0x810620 ; load_overlay + 72
;;;127        {
;;;128            return true;
;;;129        }
;;;130    
;;;131        /* load code */
;;;132        memcpy(selected_scenario->image_ro_base, selected_scenario->load_ro_base,
        0x008105f8:    69a2        .i      LDR      r2,[r4,#0x18]
        0x008105fa:    6861        ah      LDR      r1,[r4,#4]
        0x008105fc:    68e0        .h      LDR      r0,[r4,#0xc]
        0x008105fe:    f449f44c    I.L.    BL       __aeabi_memcpy ; 0x59e9a
;;;133               selected_scenario->ro_length);
;;;134        /* load rw data */
;;;135        memcpy(selected_scenario->image_rw_base, selected_scenario->load_rw_base,
        0x00810602:    69e2        .i      LDR      r2,[r4,#0x1c]
        0x00810604:    68a1        .h      LDR      r1,[r4,#8]
        0x00810606:    6920         i      LDR      r0,[r4,#0x10]
        0x00810608:    f449f447    I.G.    BL       __aeabi_memcpy ; 0x59e9a
;;;136               selected_scenario->rw_length);
;;;137        /* clear zi data */
;;;138        memset(selected_scenario->image_zi_base, 0x0, selected_scenario->zi_length);
        0x0081060c:    6a21        !j      LDR      r1,[r4,#0x20]
        0x0081060e:    6960        `i      LDR      r0,[r4,#0x14]
        0x00810610:    f449f504    I...    BL       __aeabi_memclr ; 0x5a01c
;;;139    
;;;140        memcpy(scenario_name, selected_scenario->signature, 8);
        0x00810614:    6820         h      LDR      r0,[r4,#0]
        0x00810616:    490e        .I      LDR      r1,[pc,#56] ; [0x810650] = 0x2080dc
        0x00810618:    6802        .h      LDR      r2,[r0,#0]
        0x0081061a:    600a        .`      STR      r2,[r1,#0]
        0x0081061c:    6840        @h      LDR      r0,[r0,#4]
        0x0081061e:    6048        H`      STR      r0,[r1,#4]
        0x00810620:    2001        .       MOVS     r0,#1
;;;141    
;;;142        return true;
;;;143    }
        0x00810622:    bd10        ..      POP      {r4,pc}
    get_current_scenario_index
;;;144    
;;;145    T_OVERLAY_SCENARIO_IDX get_current_scenario_index(void)
;;;146    {
        0x00810624:    b570        p.      PUSH     {r4-r6,lr}
        0x00810626:    4d09        .M      LDR      r5,[pc,#36] ; [0x81064c] = 0x207ebc
;;;147        const T_OVERLAY_SECTION *selected_scenario;
;;;148    
;;;149        for (int i = 0; i < (int)OVERLAY_SCENARIO_NUM; ++i)
        0x00810628:    2400        .$      MOVS     r4,#0
        0x0081062a:    eb0400c4    ....    ADD      r0,r4,r4,LSL #3
        0x0081062e:    2208        ."      MOVS     r2,#8
        0x00810630:    f8550020    U. .    LDR      r0,[r5,r0,LSL #2]
        0x00810634:    4906        .I      LDR      r1,[pc,#24] ; [0x810650] = 0x2080dc
        0x00810636:    f449f3e5    I...    BL       memcmp ; 0x59e04
        0x0081063a:    b120         .      CBZ      r0,0x810646 ; get_current_scenario_index + 34
        0x0081063c:    1c64        d.      ADDS     r4,r4,#1
        0x0081063e:    2c03        .,      CMP      r4,#3
        0x00810640:    dbf3        ..      BLT      0x81062a ; get_current_scenario_index + 6
        0x00810642:    2003        .       MOVS     r0,#3
        0x00810644:    bd70        p.      POP      {r4-r6,pc}
;;;150        {
;;;151            selected_scenario = &overlay_sections[i];
;;;152            if (memcmp(selected_scenario->signature, scenario_name, 8) == 0)
;;;153            {
;;;154                return (T_OVERLAY_SCENARIO_IDX)i;
        0x00810646:    b2e0        ..      UXTB     r0,r4
;;;155            }
;;;156        }
;;;157    
;;;158        return OVERLAY_SCENARIO_NUM; //not found valid scenario
;;;159    }
        0x00810648:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x0081064a:    0000        ..      DCW    0
        0x0081064c:    00207ebc    .~ .    DCD    2129596
        0x00810650:    002080dc    .. .    DCD    2130140
    $t
    .text
    $v0
    ADC_Handler
    BTMAC_Handler
    BusFault_Handler
    DebugMon_Handler
    Default_Handler
    GDMA0_Channel0_Handler
    GDMA0_Channel1_Handler
    GDMA0_Channel2_Handler
    GDMA0_Channel3_Handler
    GDMA0_Channel4_Handler
    GDMA0_Channel5_Handler
    GPIO0_Handler
    GPIO10_Handler
    GPIO11_Handler
    GPIO12_Handler
    GPIO13_Handler
    GPIO14_Handler
    GPIO15_Handler
    GPIO16_Handler
    GPIO17_Handler
    GPIO18_Handler
    GPIO19_Handler
    GPIO1_Handler
    GPIO21_Handler
    GPIO22_Handler
    GPIO23_Handler
    GPIO24_Handler
    GPIO25_Handler
    GPIO26_Handler
    GPIO27_Handler
    GPIO28_Handler
    GPIO29_Handler
    GPIO2_Handler
    GPIO30_Handler
    GPIO31_Handler
    GPIO3_Handler
    GPIO4_Handler
    GPIO5_Handler
    GPIO6_Handler
    GPIO7_Handler
    GPIO8_Handler
    GPIO9_Handler
    HardFault_Handler
    I2C0_Handler
    I2C1_Handler
    I2S0_RX_Handler
    I2S0_TX_Handler
    I2S1_RX_Handler
    I2S1_TX_Handler
    IR_Handler
    Keyscan_Handler
    LCD_Handler
    LPCOMP_Handler
    MemManage_Handler
    NMI_Handler
    PTA_Mailbox_Handler
    PendSV_Handler
    Peripheral_Handler
    Qdecode_Handler
    RTC_Handler
    SPI0_Handler
    SPI1_Handler
    SPI2W_Handler
    SPI_Flash_Handler
    SVC_Handler
    SysTick_Handler
    Timer2_Handler
    Timer3_Handler
    Timer4_7_Handler
    Timer4_Handler
    Timer5_Handler
    Timer6_Handler
    Timer7_Handler
    UART0_Handler
    UART1_Handler
    UART2_Handler
    UsageFault_Handler
    WDG_Handler
;;; ..\\include\\SDK\\src\\mcu\\rtl876x\\arm\\startup_rtl8762c.s
;;;276                    LDR    R0, =0x20000000
        0x00810654:    f04f5000    O..P    MOV      r0,#0x20000000
;;;277                    LDR    R1, =DEFAULT_HANDLER_TXT
        0x00810658:    4910        .I      LDR      r1,[pc,#64] ; [0x81069c] = 0x810666
;;;278                    MRS    R2, IPSR
        0x0081065a:    f3ef8205    ....    MRS      r2,IPSR
;;;279                    LDR    R3, =log_direct
        0x0081065e:    4b10        .K      LDR      r3,[pc,#64] ; [0x8106a0] = 0x79b1
;;;280                    BLX    R3
        0x00810660:    4798        .G      BLX      r3
;;;281                    B      .
        0x00810662:    e7fe        ..      B        0x810662 ; ADC_Handler + 14
    __user_setup_stackheap
;;;282    
;;;283                    ENDP
;;;284    
;;;285    
;;;286    ; User Initial Stack
;;;287                    EXPORT  __user_setup_stackheap
;;;288    __user_setup_stackheap PROC
;;;289                    BX      LR
        0x00810664:    4770        pG      BX       lr
    $d
    DEFAULT_HANDLER_TXT
        0x00810666:    7245        Er      DCW    29253
        0x00810668:    21726f72    ror!    DCD    561147762
        0x0081066c:    656c5020     Ple    DCD    1701597216
        0x00810670:    20657361    ase     DCD    543519585
        0x00810674:    6c706d69    impl    DCD    1819307369
        0x00810678:    6e656d65    emen    DCD    1852140901
        0x0081067c:    6f792074    t yo    DCD    1870209140
        0x00810680:    49207275    ur I    DCD    1226863221
        0x00810684:    48205253    SR H    DCD    1210077779
        0x00810688:    6c646e61    andl    DCD    1818521185
        0x0081068c:    66207265    er f    DCD    1713402469
        0x00810690:    4920726f    or I    DCD    1226863215
        0x00810694:    25205152    RQ %    DCD    622874962
        0x00810698:    000a2164    d!..    DCD    663908
        0x0081069c:    00810666    f...    DCD    8455782
        0x008106a0:    000079b1    .y..    DCD    31153
    $t
    .text
    gap_lib_handle_btif_msg
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (31)
        0x008106a4:    b510        ..      PUSH     {r4,lr}
        0x008106a6:    2201        ."      MOVS     r2,#1
        0x008106a8:    700a        .p      STRB     r2,[r1,#0]
        0x008106aa:    8841        A.      LDRH     r1,[r0,#2]
        0x008106ac:    2400        .$      MOVS     r4,#0
        0x008106ae:    290e        .)      CMP      r1,#0xe
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (31)
        0x008106b0:    d102        ..      BNE      0x8106b8 ; gap_lib_handle_btif_msg + 20
        0x008106b2:    1d00        ..      ADDS     r0,r0,#4
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (39)
        0x008106b4:    f000f8c1    ....    BL       le_handle_vendor_cmd_rsp ; 0x81083a
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (112)
        0x008106b8:    4620         F      MOV      r0,r4
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (113)
        0x008106ba:    bd10        ..      POP      {r4,pc}
    gap_lib_init
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (116)
        0x008106bc:    b570        p.      PUSH     {r4-r6,lr}
        0x008106be:    b088        ..      SUB      sp,sp,#0x20
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (117)
        0x008106c0:    2400        .$      MOVS     r4,#0
        0x008106c2:    9405        ..      STR      r4,[sp,#0x14]
        0x008106c4:    2501        .%      MOVS     r5,#1
        0x008106c6:    9406        ..      STR      r4,[sp,#0x18]
        0x008106c8:    e9cd5400    ...T    STRD     r5,r4,[sp,#0]
        0x008106cc:    4e0e        .N      LDR      r6,[pc,#56] ; [0x810708] = 0x21103500
        0x008106ce:    2308        .#      MOVS     r3,#8
        0x008106d0:    9403        ..      STR      r4,[sp,#0xc]
        0x008106d2:    9404        ..      STR      r4,[sp,#0x10]
        0x008106d4:    461a        .F      MOV      r2,r3
        0x008106d6:    490b        .I      LDR      r1,[pc,#44] ; [0x810704] = 0x8800e94
        0x008106d8:    4630        0F      MOV      r0,r6
        0x008106da:    9402        ..      STR      r4,[sp,#8]
        0x008106dc:    f7f7d9bf    ....    BL       log_buffer ; 0x7a5e
        0x008106e0:    4908        .I      LDR      r1,[pc,#32] ; [0x810704] = 0x8800e94
        0x008106e2:    e9cd4500    ...E    STRD     r4,r5,[sp,#0]
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (121)
        0x008106e6:    2300        .#      MOVS     r3,#0
        0x008106e8:    2204        ."      MOVS     r2,#4
        0x008106ea:    31ec        .1      ADDS     r1,r1,#0xec
        0x008106ec:    4630        0F      MOV      r0,r6
        0x008106ee:    9502        ..      STR      r5,[sp,#8]
        0x008106f0:    f7f7d9b5    ....    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (123)
        0x008106f4:    f2af0053    ..S.    ADR      r0,{pc}-0x4f ; 0x8106a5
        0x008106f8:    b008        ..      ADD      sp,sp,#0x20
        0x008106fa:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x008106fe:    f43bb387    ;...    B        gap_register_extend_cb ; 0x4be10
    $d
        0x00810702:    0000        ..      DCW    0
        0x00810704:    08800e94    ....    DCD    142610068
        0x00810708:    21103500    .5.!    DCD    554710272
    $t
    .text
    le_check_privacy_bond
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (163)
        0x0081070c:    b530        0.      PUSH     {r4,r5,lr}
        0x0081070e:    b08b        ..      SUB      sp,sp,#0x2c
        0x00810710:    f04f0100    O...    MOV      r1,#0
        0x00810714:    4d33        3M      LDR      r5,[pc,#204] ; [0x8107e4] = 0x21103502
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (163)
        0x00810716:    0004        ..      MOVS     r4,r0
        0x00810718:    9106        ..      STR      r1,[sp,#0x18]
        0x0081071a:    9107        ..      STR      r1,[sp,#0x1c]
        0x0081071c:    9108        ..      STR      r1,[sp,#0x20]
        0x0081071e:    9109        ..      STR      r1,[sp,#0x24]
        0x00810720:    d002        ..      BEQ      0x810728 ; le_check_privacy_bond + 28
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (166)
        0x00810722:    7820         x      LDRB     r0,[r4,#0]
        0x00810724:    2801        .(      CMP      r0,#1
        0x00810726:    d008        ..      BEQ      0x81073a ; le_check_privacy_bond + 46
        0x00810728:    2301        .#      MOVS     r3,#1
        0x0081072a:    2201        ."      MOVS     r2,#1
        0x0081072c:    492e        .I      LDR      r1,[pc,#184] ; [0x8107e8] = 0x880102c
        0x0081072e:    4628        (F      MOV      r0,r5
        0x00810730:    f7f7d995    ....    BL       log_buffer ; 0x7a5e
        0x00810734:    2000        .       MOVS     r0,#0
        0x00810736:    b00b        ..      ADD      sp,sp,#0x2c
        0x00810738:    bd30        0.      POP      {r4,r5,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (168)
        0x0081073a:    78a0        .x      LDRB     r0,[r4,#2]
        0x0081073c:    0700        ..      LSLS     r0,r0,#28
        0x0081073e:    d518        ..      BPL      0x810772 ; le_check_privacy_bond + 102
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (171)
        0x00810740:    466a        jF      MOV      r2,sp
        0x00810742:    2114        .!      MOVS     r1,#0x14
        0x00810744:    4620         F      MOV      r0,r4
        0x00810746:    f43ff60d    ?...    BL       le_get_key ; 0x50364
        0x0081074a:    b180        ..      CBZ      r0,0x81076e ; le_check_privacy_bond + 98
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (173)
        0x0081074c:    2210        ."      MOVS     r2,#0x10
        0x0081074e:    a906        ..      ADD      r1,sp,#0x18
        0x00810750:    4668        hF      MOV      r0,sp
        0x00810752:    f449f357    I.W.    BL       memcmp ; 0x59e04
        0x00810756:    b140        @.      CBZ      r0,0x81076a ; le_check_privacy_bond + 94
        0x00810758:    4923        #I      LDR      r1,[pc,#140] ; [0x8107e8] = 0x880102c
        0x0081075a:    7863        cx      LDRB     r3,[r4,#1]
        0x0081075c:    2201        ."      MOVS     r2,#1
        0x0081075e:    3930        09      SUBS     r1,r1,#0x30
        0x00810760:    4628        (F      MOV      r0,r5
        0x00810762:    f7f7d97c    ..|.    BL       log_buffer ; 0x7a5e
        0x00810766:    2001        .       MOVS     r0,#1
        0x00810768:    e7e5        ..      B        0x810736 ; le_check_privacy_bond + 42
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (175)
        0x0081076a:    2305        .#      MOVS     r3,#5
        0x0081076c:    e7dd        ..      B        0x81072a ; le_check_privacy_bond + 30
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (185)
        0x0081076e:    2304        .#      MOVS     r3,#4
        0x00810770:    e7db        ..      B        0x81072a ; le_check_privacy_bond + 30
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (190)
        0x00810772:    2302        .#      MOVS     r3,#2
        0x00810774:    e7d9        ..      B        0x81072a ; le_check_privacy_bond + 30
    le_bond_just_work_confirm
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (202)
        0x00810776:    460a        .F      MOV      r2,r1
        0x00810778:    eb000140    ..@.    ADD      r1,r0,r0,LSL #1
        0x0081077c:    481b        .H      LDR      r0,[pc,#108] ; [0x8107ec] = 0x202e64
        0x0081077e:    b510        ..      PUSH     {r4,lr}
        0x00810780:    6800        .h      LDR      r0,[r0,#0]
        0x00810782:    eb001001    ....    ADD      r0,r0,r1,LSL #4
        0x00810786:    7801        .x      LDRB     r1,[r0,#0]
        0x00810788:    b129        ).      CBZ      r1,0x810796 ; le_bond_just_work_confirm + 32
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (205)
        0x0081078a:    7981        .y      LDRB     r1,[r0,#6]
        0x0081078c:    1dc0        ..      ADDS     r0,r0,#7
        0x0081078e:    f410f764    ..d.    BL       btif_just_work_req_cfm ; 0x2165a
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (207)
        0x00810792:    2000        .       MOVS     r0,#0
        0x00810794:    bd10        ..      POP      {r4,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (211)
        0x00810796:    2004        .       MOVS     r0,#4
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (213)
        0x00810798:    bd10        ..      POP      {r4,pc}
    le_bond_get_sec_level
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (226)
        0x0081079a:    b510        ..      PUSH     {r4,lr}
        0x0081079c:    b08a        ..      SUB      sp,sp,#0x28
        0x0081079e:    460c        .F      MOV      r4,r1
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (229)
        0x008107a0:    2100        .!      MOVS     r1,#0
        0x008107a2:    7021        !p      STRB     r1,[r4,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (230)
        0x008107a4:    aa09        ..      ADD      r2,sp,#0x24
        0x008107a6:    a907        ..      ADD      r1,sp,#0x1c
        0x008107a8:    f43df221    =.!.    BL       le_get_conn_addr ; 0x4dbee
        0x008107ac:    b1c0        ..      CBZ      r0,0x8107e0 ; le_bond_get_sec_level + 70
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (233)
        0x008107ae:    f89d1024    ..$.    LDRB     r1,[sp,#0x24]
        0x008107b2:    a807        ..      ADD      r0,sp,#0x1c
        0x008107b4:    f43ff4eb    ?...    BL       le_find_key_entry ; 0x5018e
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (234)
        0x008107b8:    b190        ..      CBZ      r0,0x8107e0 ; le_bond_get_sec_level + 70
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (237)
        0x008107ba:    466a        jF      MOV      r2,sp
        0x008107bc:    2111        .!      MOVS     r1,#0x11
        0x008107be:    f43ff5d1    ?...    BL       le_get_key ; 0x50364
        0x008107c2:    b168        h.      CBZ      r0,0x8107e0 ; le_bond_get_sec_level + 70
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (239)
        0x008107c4:    4908        .I      LDR      r1,[pc,#32] ; [0x8107e8] = 0x880102c
        0x008107c6:    f89d301b    ...0    LDRB     r3,[sp,#0x1b]
        0x008107ca:    2201        ."      MOVS     r2,#1
        0x008107cc:    3138        81      ADDS     r1,r1,#0x38
        0x008107ce:    4805        .H      LDR      r0,[pc,#20] ; [0x8107e4] = 0x21103502
        0x008107d0:    f7f7d945    ..E.    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (240)
        0x008107d4:    f89d001b    ....    LDRB     r0,[sp,#0x1b]
        0x008107d8:    7020         p      STRB     r0,[r4,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (241)
        0x008107da:    2000        .       MOVS     r0,#0
        0x008107dc:    b00a        ..      ADD      sp,sp,#0x28
        0x008107de:    bd10        ..      POP      {r4,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (245)
        0x008107e0:    2003        .       MOVS     r0,#3
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (246)
        0x008107e2:    e7fb        ..      B        0x8107dc ; le_bond_get_sec_level + 66
    $d
        0x008107e4:    21103502    .5.!    DCD    554710274
        0x008107e8:    0880102c    ,...    DCD    142610476
        0x008107ec:    00202e64    d. .    DCD    2109028
    $t
    .text
    gap_set_lps_bootup_active_time
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (43)
        0x008107f0:    b508        ..      PUSH     {r3,lr}
        0x008107f2:    1ec1        ..      SUBS     r1,r0,#3
        0x008107f4:    f24072fe    @..r    MOV      r2,#0x7fe
        0x008107f8:    4291        .B      CMP      r1,r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (43)
        0x008107fa:    d301        ..      BCC      0x810800 ; gap_set_lps_bootup_active_time + 16
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (48)
        0x008107fc:    2000        .       MOVS     r0,#0
        0x008107fe:    bd08        ..      POP      {r3,pc}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (50)
        0x00810800:    2105        .!      MOVS     r1,#5
        0x00810802:    f88d1000    ....    STRB     r1,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (51)
        0x00810806:    f88d0001    ....    STRB     r0,[sp,#1]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (52)
        0x0081080a:    0a00        ..      LSRS     r0,r0,#8
        0x0081080c:    f88d0002    ....    STRB     r0,[sp,#2]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (54)
        0x00810810:    466a        jF      MOV      r2,sp
        0x00810812:    2103        .!      MOVS     r1,#3
        0x00810814:    f64f406e    O.n@    MOV      r0,#0xfc6e
        0x00810818:    f410f668    ..h.    BL       btif_vendor_cmd_req ; 0x214ec
        0x0081081c:    2800        .(      CMP      r0,#0
        0x0081081e:    d0ee        ..      BEQ      0x8107fe ; gap_set_lps_bootup_active_time + 14
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (56)
        0x00810820:    2001        .       MOVS     r0,#1
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (59)
        0x00810822:    bd08        ..      POP      {r3,pc}
    lps_get_wakeup_time
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (62)
        0x00810824:    b530        0.      PUSH     {r4,r5,lr}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (63)
        0x00810826:    4b20         K      LDR      r3,[pc,#128] ; [0x8108a8] = 0x201b1c
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (64)
        0x00810828:    681d        .h      LDR      r5,[r3,#0]
        0x0081082a:    1d1b        ..      ADDS     r3,r3,#4
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (65)
        0x0081082c:    681c        .h      LDR      r4,[r3,#0]
        0x0081082e:    1d1b        ..      ADDS     r3,r3,#4
        0x00810830:    681b        .h      LDR      r3,[r3,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (67)
        0x00810832:    6005        .`      STR      r5,[r0,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (68)
        0x00810834:    600c        .`      STR      r4,[r1,#0]
        0x00810836:    6013        .`      STR      r3,[r2,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (69)
        0x00810838:    bd30        0.      POP      {r4,r5,pc}
    le_handle_vendor_cmd_rsp
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (169)
        0x0081083a:    b508        ..      PUSH     {r3,lr}
        0x0081083c:    8801        ..      LDRH     r1,[r0,#0]
        0x0081083e:    f5a1427c    ..|B    SUB      r2,r1,#0xfc00
        0x00810842:    3a6e        n:      SUBS     r2,r2,#0x6e
        0x00810844:    d109        ..      BNE      0x81085a ; le_handle_vendor_cmd_rsp + 32
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (250)
        0x00810846:    8840        @.      LDRH     r0,[r0,#2]
        0x00810848:    f8ad0000    ....    STRH     r0,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (251)
        0x0081084c:    4817        .H      LDR      r0,[pc,#92] ; [0x8108ac] = 0x202e48
        0x0081084e:    6802        .h      LDR      r2,[r0,#0]
        0x00810850:    2a00        .*      CMP      r2,#0
        0x00810852:    d002        ..      BEQ      0x81085a ; le_handle_vendor_cmd_rsp + 32
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (253)
        0x00810854:    4669        iF      MOV      r1,sp
        0x00810856:    20a6        .       MOVS     r0,#0xa6
        0x00810858:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (258)
        0x0081085a:    bd08        ..      POP      {r3,pc}
    le_vendor_modify_bt_le_fw_policy
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (262)
        0x0081085c:    b50e        ..      PUSH     {r1-r3,lr}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (265)
        0x0081085e:    2210        ."      MOVS     r2,#0x10
        0x00810860:    f88d2000    ...     STRB     r2,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (266)
        0x00810864:    f88d0001    ....    STRB     r0,[sp,#1]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (267)
        0x00810868:    0a02        ..      LSRS     r2,r0,#8
        0x0081086a:    f88d2002    ...     STRB     r2,[sp,#2]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (268)
        0x0081086e:    0c02        ..      LSRS     r2,r0,#16
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (269)
        0x00810870:    0e00        ..      LSRS     r0,r0,#24
        0x00810872:    f88d0004    ....    STRB     r0,[sp,#4]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (270)
        0x00810876:    f88d1005    ....    STRB     r1,[sp,#5]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (271)
        0x0081087a:    0a08        ..      LSRS     r0,r1,#8
        0x0081087c:    f88d0006    ....    STRB     r0,[sp,#6]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (272)
        0x00810880:    0c08        ..      LSRS     r0,r1,#16
        0x00810882:    f88d0007    ....    STRB     r0,[sp,#7]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (273)
        0x00810886:    0e08        ..      LSRS     r0,r1,#24
        0x00810888:    f88d2003    ...     STRB     r2,[sp,#3]
        0x0081088c:    f88d0008    ....    STRB     r0,[sp,#8]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (275)
        0x00810890:    466a        jF      MOV      r2,sp
        0x00810892:    2109        .!      MOVS     r1,#9
        0x00810894:    f64f5080    O..P    MOV      r0,#0xfd80
        0x00810898:    f410f628    ..(.    BL       btif_vendor_cmd_req ; 0x214ec
        0x0081089c:    b108        ..      CBZ      r0,0x8108a2 ; le_vendor_modify_bt_le_fw_policy + 70
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (277)
        0x0081089e:    2000        .       MOVS     r0,#0
        0x008108a0:    bd0e        ..      POP      {r1-r3,pc}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (279)
        0x008108a2:    2007        .       MOVS     r0,#7
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (286)
        0x008108a4:    bd0e        ..      POP      {r1-r3,pc}
    $d
        0x008108a6:    0000        ..      DCW    0
        0x008108a8:    00201b1c    .. .    DCD    2104092
        0x008108ac:    00202e48    H. .    DCD    2109000
    $t
    x$fpl$fpinit
    $v0
    _fp_init
        0x008108b0:    f04f7040    O.@p    MOV      r0,#0x3000000
        0x008108b4:    eee10a10    ....    VMSR     FPSCR,r0
    __fplib_config_fpu_vfp
    __fplib_config_pureend_doubles
        0x008108b8:    4770        pG      BX       lr
        0x008108ba:    0000        ..      MOVS     r0,r0
    $d.realdata
    .constdata
    app_cb_table
        0x008108bc:    0e85d101    ....    DCD    243650817
        0x008108c0:    00000001    ....    DCD    1
        0x008108c4:    0080e6a3    ....    DCD    8447651
    .constdata
        0x008108c8:    00810fc8    ....    DCD    8458184
        0x008108cc:    00811074    t...    DCD    8458356
        0x008108d0:    00810fbc    ....    DCD    8458172
        0x008108d4:    0081107c    |...    DCD    8458364
        0x008108d8:    00811020     ...    DCD    8458272
        0x008108dc:    00811094    ....    DCD    8458388
        0x008108e0:    00811088    ....    DCD    8458376
        0x008108e4:    00811010    ....    DCD    8458256
        0x008108e8:    00811010    ....    DCD    8458256
        0x008108ec:    00811010    ....    DCD    8458256
        0x008108f0:    00811010    ....    DCD    8458256
        0x008108f4:    00810fb0    ....    DCD    8458160
        0x008108f8:    00811068    h...    DCD    8458344
        0x008108fc:    00811010    ....    DCD    8458256
        0x00810900:    00810fd8    ....    DCD    8458200
        0x00810904:    00811038    8...    DCD    8458296
        0x00810908:    0081104c    L...    DCD    8458316
        0x0081090c:    00810fb8    ....    DCD    8458168
        0x00810910:    00810fa0    ....    DCD    8458144
        0x00810914:    00810f20     ...    DCD    8458016
        0x00810918:    00810ef4    ....    DCD    8457972
        0x0081091c:    00811054    T...    DCD    8458324
        0x00810920:    00811008    ....    DCD    8458248
        0x00810924:    00810ff4    ....    DCD    8458228
        0x00810928:    00810f8c    ....    DCD    8458124
        0x0081092c:    00810f4c    L...    DCD    8458060
        0x00810930:    00810f6c    l...    DCD    8458092
        0x00810934:    00810ed0    ....    DCD    8457936
        0x00810938:    00810e9c    ....    DCD    8457884
        0x0081093c:    00810fac    ....    DCD    8458156
        0x00810940:    00810e94    ....    DCD    8457876
        0x00810944:    00810ec8    ....    DCD    8457928
        0x00810948:    00810e8c    ....    DCD    8457868
        0x0081094c:    00810ec0    ....    DCD    8457920
        0x00810950:    00810fa8    ....    DCD    8458152
        0x00810954:    00811040    @...    DCD    8458304
        0x00810958:    00810ea4    ....    DCD    8457892
        0x0081095c:    00810ed8    ....    DCD    8457944
        0x00810960:    00810f04    ....    DCD    8457988
        0x00810964:    00810f28    (...    DCD    8458024
        0x00810968:    00810f54    T...    DCD    8458068
        0x0081096c:    00810f74    t...    DCD    8458100
        0x00810970:    00810f38    8...    DCD    8458040
        0x00810974:    00810f14    ....    DCD    8458004
        0x00810978:    00810fd4    ....    DCD    8458196
        0x0081097c:    00810ee8    ....    DCD    8457960
        0x00810980:    00810eb4    ....    DCD    8457908
        0x00810984:    00810efc    ....    DCD    8457980
        0x00810988:    00810f44    D...    DCD    8458052
        0x0081098c:    00810f64    d...    DCD    8458084
        0x00810990:    00810f84    ....    DCD    8458116
        0x00810994:    00810f98    ....    DCD    8458136
        0x00810998:    0081102c    ,...    DCD    8458284
        0x0081099c:    00811018    ....    DCD    8458264
        0x008109a0:    00811060    `...    DCD    8458336
        0x008109a4:    00810fe0    ....    DCD    8458208
        0x008109a8:    00810fc0    ....    DCD    8458176
        0x008109ac:    008110a0    ....    DCD    8458400
        0x008109b0:    00810ffc    ....    DCD    8458236
        0x008109b4:    00810fe8    ....    DCD    8458216
        0x008109b8:    00810fb4    ....    DCD    8458164
    .constdata
    __func__
        0x008109bc:    5f707061    app_    DCD    1601204321
        0x008109c0:    646e6573    send    DCD    1684956531
        0x008109c4:    67736d5f    _msg    DCD    1735617887
        0x008109c8:    5f6f745f    _to_    DCD    1601139807
        0x008109cc:    74707061    appt    DCD    1953525857
        0x008109d0:    006b7361    ask.    DCD    7041889
    __func__
        0x008109d4:    5f707061    app_    DCD    1601204321
        0x008109d8:    6e69616d    main    DCD    1852399981
        0x008109dc:    7361745f    _tas    DCD    1935766623
        0x008109e0:    0000006b    k...    DCD    107
    .constdata
        0x008109e4:    4c414552    REAL    DCD    1279346002
        0x008109e8:    5058505f    _PXP    DCD    1347965023
        0x008109ec:    00000000    ....    DCD    0
        0x008109f0:    00000000    ....    DCD    0
        0x008109f4:    00000000    ....    DCD    0
        0x008109f8:    00000000    ....    DCD    0
        0x008109fc:    00000000    ....    DCD    0
        0x00810a00:    00000000    ....    DCD    0
        0x00810a04:    00000000    ....    DCD    0
        0x00810a08:    00000000    ....    DCD    0
    .constdata
    ias_attr_tbl
        0x00810a0c:    28000802    ...(    DCD    671090690
        0x00810a10:    00001802    ....    DCD    6146
        0x00810a14:    00000000    ....    DCD    0
        0x00810a18:    00000000    ....    DCD    0
        0x00810a1c:    00020000    ....    DCD    131072
        0x00810a20:    00000000    ....    DCD    0
        0x00810a24:    00000001    ....    DCD    1
        0x00810a28:    28030002    ...(    DCD    671285250
        0x00810a2c:    00000004    ....    DCD    4
        0x00810a30:    00000000    ....    DCD    0
        0x00810a34:    00000000    ....    DCD    0
        0x00810a38:    00010000    ....    DCD    65536
        0x00810a3c:    00000000    ....    DCD    0
        0x00810a40:    00000001    ....    DCD    1
        0x00810a44:    2a060004    ...*    DCD    705036292
        0x00810a48:    00000000    ....    DCD    0
        0x00810a4c:    00000000    ....    DCD    0
        0x00810a50:    00000000    ....    DCD    0
        0x00810a54:    00000000    ....    DCD    0
        0x00810a58:    00000000    ....    DCD    0
        0x00810a5c:    00000011    ....    DCD    17
    ias_cbs
        0x00810a60:    00000000    ....    DCD    0
        0x00810a64:    0080f625    %...    DCD    8451621
        0x00810a68:    00000000    ....    DCD    0
    .constdata
    lls_attr_tbl
        0x00810a6c:    28000802    ...(    DCD    671090690
        0x00810a70:    00001803    ....    DCD    6147
        0x00810a74:    00000000    ....    DCD    0
        0x00810a78:    00000000    ....    DCD    0
        0x00810a7c:    00020000    ....    DCD    131072
        0x00810a80:    00000000    ....    DCD    0
        0x00810a84:    00000001    ....    DCD    1
        0x00810a88:    28030002    ...(    DCD    671285250
        0x00810a8c:    0000000a    ....    DCD    10
        0x00810a90:    00000000    ....    DCD    0
        0x00810a94:    00000000    ....    DCD    0
        0x00810a98:    00010000    ....    DCD    65536
        0x00810a9c:    00000000    ....    DCD    0
        0x00810aa0:    00000001    ....    DCD    1
        0x00810aa4:    2a060004    ...*    DCD    705036292
        0x00810aa8:    00000000    ....    DCD    0
        0x00810aac:    00000000    ....    DCD    0
        0x00810ab0:    00000000    ....    DCD    0
        0x00810ab4:    00000000    ....    DCD    0
        0x00810ab8:    00000000    ....    DCD    0
        0x00810abc:    00000011    ....    DCD    17
    lls_cbs
        0x00810ac0:    0080f6e7    ....    DCD    8451815
        0x00810ac4:    0080f749    I...    DCD    8451913
        0x00810ac8:    00000000    ....    DCD    0
    .constdata
    tps_attr_tbl
        0x00810acc:    28000802    ...(    DCD    671090690
        0x00810ad0:    00001804    ....    DCD    6148
        0x00810ad4:    00000000    ....    DCD    0
        0x00810ad8:    00000000    ....    DCD    0
        0x00810adc:    00020000    ....    DCD    131072
        0x00810ae0:    00000000    ....    DCD    0
        0x00810ae4:    00000001    ....    DCD    1
        0x00810ae8:    28030002    ...(    DCD    671285250
        0x00810aec:    00000002    ....    DCD    2
        0x00810af0:    00000000    ....    DCD    0
        0x00810af4:    00000000    ....    DCD    0
        0x00810af8:    00010000    ....    DCD    65536
        0x00810afc:    00000000    ....    DCD    0
        0x00810b00:    00000001    ....    DCD    1
        0x00810b04:    2a070004    ...*    DCD    705101828
        0x00810b08:    00000000    ....    DCD    0
        0x00810b0c:    00000000    ....    DCD    0
        0x00810b10:    00000000    ....    DCD    0
        0x00810b14:    00000000    ....    DCD    0
        0x00810b18:    00000000    ....    DCD    0
        0x00810b1c:    00000001    ....    DCD    1
    tps_cbs
        0x00810b20:    0080f80b    ....    DCD    8452107
        0x00810b24:    00000000    ....    DCD    0
        0x00810b28:    00000000    ....    DCD    0
    .constdata
    bas_attr_tbl
        0x00810b2c:    28000802    ...(    DCD    671090690
        0x00810b30:    0000180f    ....    DCD    6159
        0x00810b34:    00000000    ....    DCD    0
        0x00810b38:    00000000    ....    DCD    0
        0x00810b3c:    00020000    ....    DCD    131072
        0x00810b40:    00000000    ....    DCD    0
        0x00810b44:    00000001    ....    DCD    1
        0x00810b48:    28030002    ...(    DCD    671285250
        0x00810b4c:    00000012    ....    DCD    18
        0x00810b50:    00000000    ....    DCD    0
        0x00810b54:    00000000    ....    DCD    0
        0x00810b58:    00010000    ....    DCD    65536
        0x00810b5c:    00000000    ....    DCD    0
        0x00810b60:    00000001    ....    DCD    1
        0x00810b64:    2a190004    ...*    DCD    706281476
        0x00810b68:    00000000    ....    DCD    0
        0x00810b6c:    00000000    ....    DCD    0
        0x00810b70:    00000000    ....    DCD    0
        0x00810b74:    00000000    ....    DCD    0
        0x00810b78:    00000000    ....    DCD    0
        0x00810b7c:    00000001    ....    DCD    1
        0x00810b80:    29020012    ...)    DCD    687996946
        0x00810b84:    00000000    ....    DCD    0
        0x00810b88:    00000000    ....    DCD    0
        0x00810b8c:    00000000    ....    DCD    0
        0x00810b90:    00020000    ....    DCD    131072
        0x00810b94:    00000000    ....    DCD    0
        0x00810b98:    00000011    ....    DCD    17
    bas_cbs
        0x00810b9c:    0080f91b    ....    DCD    8452379
        0x00810ba0:    00000000    ....    DCD    0
        0x00810ba4:    0080f983    ....    DCD    8452483
    .constdata
    GATT_UUID128_KNS_SERVICE
        0x00810ba8:    07f6f6a6    ....    DCD    133625510
        0x00810bac:    989dc44d    M...    DCD    2560476237
        0x00810bb0:    bb29456d    mE).    DCD    3140044141
        0x00810bb4:    0000ffd0    ....    DCD    65488
    .constdata
    kns_attr_tbl
        0x00810bb8:    28000800    ...(    DCD    671090688
        0x00810bbc:    00000000    ....    DCD    0
        0x00810bc0:    00000000    ....    DCD    0
        0x00810bc4:    00000000    ....    DCD    0
        0x00810bc8:    00100000    ....    DCD    1048576
        0x00810bcc:    00810ba8    ....    DCD    8457128
        0x00810bd0:    00000001    ....    DCD    1
        0x00810bd4:    28030002    ...(    DCD    671285250
        0x00810bd8:    0000000a    ....    DCD    10
        0x00810bdc:    00000000    ....    DCD    0
        0x00810be0:    00000000    ....    DCD    0
        0x00810be4:    00010000    ....    DCD    65536
        0x00810be8:    00000000    ....    DCD    0
        0x00810bec:    00000001    ....    DCD    1
        0x00810bf0:    f6a60005    ....    DCD    4138074117
        0x00810bf4:    c44d07f6    ..M.    DCD    3293382646
        0x00810bf8:    456d989d    ..mE    DCD    1164810397
        0x00810bfc:    ffd1bb29    )...    DCD    4291935017
        0x00810c00:    00000000    ....    DCD    0
        0x00810c04:    00000000    ....    DCD    0
        0x00810c08:    00000011    ....    DCD    17
        0x00810c0c:    28030002    ...(    DCD    671285250
        0x00810c10:    00000010    ....    DCD    16
        0x00810c14:    00000000    ....    DCD    0
        0x00810c18:    00000000    ....    DCD    0
        0x00810c1c:    00010000    ....    DCD    65536
        0x00810c20:    00000000    ....    DCD    0
        0x00810c24:    00000001    ....    DCD    1
        0x00810c28:    f6a60005    ....    DCD    4138074117
        0x00810c2c:    c44d07f6    ..M.    DCD    3293382646
        0x00810c30:    456d989d    ..mE    DCD    1164810397
        0x00810c34:    ffd2bb29    )...    DCD    4292000553
        0x00810c38:    00000000    ....    DCD    0
        0x00810c3c:    00000000    ....    DCD    0
        0x00810c40:    00000001    ....    DCD    1
        0x00810c44:    29020012    ...)    DCD    687996946
        0x00810c48:    00000000    ....    DCD    0
        0x00810c4c:    00000000    ....    DCD    0
        0x00810c50:    00000000    ....    DCD    0
        0x00810c54:    00020000    ....    DCD    131072
        0x00810c58:    00000000    ....    DCD    0
        0x00810c5c:    00000011    ....    DCD    17
    kns_cbs
        0x00810c60:    0080fa4b    K...    DCD    8452683
        0x00810c64:    0080faab    ....    DCD    8452779
        0x00810c68:    0080fafb    ....    DCD    8452859
    .constdata
    dis_attr_tbl
        0x00810c6c:    28000802    ...(    DCD    671090690
        0x00810c70:    0000180a    ....    DCD    6154
        0x00810c74:    00000000    ....    DCD    0
        0x00810c78:    00000000    ....    DCD    0
        0x00810c7c:    00020000    ....    DCD    131072
        0x00810c80:    00000000    ....    DCD    0
        0x00810c84:    00000001    ....    DCD    1
        0x00810c88:    28030002    ...(    DCD    671285250
        0x00810c8c:    00000002    ....    DCD    2
        0x00810c90:    00000000    ....    DCD    0
        0x00810c94:    00000000    ....    DCD    0
        0x00810c98:    00010000    ....    DCD    65536
        0x00810c9c:    00000000    ....    DCD    0
        0x00810ca0:    00000001    ....    DCD    1
        0x00810ca4:    2a290004    ..)*    DCD    707330052
        0x00810ca8:    00000000    ....    DCD    0
        0x00810cac:    00000000    ....    DCD    0
        0x00810cb0:    00000000    ....    DCD    0
        0x00810cb4:    00000000    ....    DCD    0
        0x00810cb8:    00000000    ....    DCD    0
        0x00810cbc:    00000001    ....    DCD    1
        0x00810cc0:    28030002    ...(    DCD    671285250
        0x00810cc4:    00000002    ....    DCD    2
        0x00810cc8:    00000000    ....    DCD    0
        0x00810ccc:    00000000    ....    DCD    0
        0x00810cd0:    00010000    ....    DCD    65536
        0x00810cd4:    00000000    ....    DCD    0
        0x00810cd8:    00000001    ....    DCD    1
        0x00810cdc:    2a240004    ..$*    DCD    707002372
        0x00810ce0:    00000000    ....    DCD    0
        0x00810ce4:    00000000    ....    DCD    0
        0x00810ce8:    00000000    ....    DCD    0
        0x00810cec:    00000000    ....    DCD    0
        0x00810cf0:    00000000    ....    DCD    0
        0x00810cf4:    00000001    ....    DCD    1
        0x00810cf8:    28030002    ...(    DCD    671285250
        0x00810cfc:    00000002    ....    DCD    2
        0x00810d00:    00000000    ....    DCD    0
        0x00810d04:    00000000    ....    DCD    0
        0x00810d08:    00010000    ....    DCD    65536
        0x00810d0c:    00000000    ....    DCD    0
        0x00810d10:    00000001    ....    DCD    1
        0x00810d14:    2a250004    ..%*    DCD    707067908
        0x00810d18:    00000000    ....    DCD    0
        0x00810d1c:    00000000    ....    DCD    0
        0x00810d20:    00000000    ....    DCD    0
        0x00810d24:    00000000    ....    DCD    0
        0x00810d28:    00000000    ....    DCD    0
        0x00810d2c:    00000001    ....    DCD    1
        0x00810d30:    28030002    ...(    DCD    671285250
        0x00810d34:    00000002    ....    DCD    2
        0x00810d38:    00000000    ....    DCD    0
        0x00810d3c:    00000000    ....    DCD    0
        0x00810d40:    00010000    ....    DCD    65536
        0x00810d44:    00000000    ....    DCD    0
        0x00810d48:    00000001    ....    DCD    1
        0x00810d4c:    2a270004    ..'*    DCD    707198980
        0x00810d50:    00000000    ....    DCD    0
        0x00810d54:    00000000    ....    DCD    0
        0x00810d58:    00000000    ....    DCD    0
        0x00810d5c:    00000000    ....    DCD    0
        0x00810d60:    00000000    ....    DCD    0
        0x00810d64:    00000001    ....    DCD    1
        0x00810d68:    28030002    ...(    DCD    671285250
        0x00810d6c:    00000002    ....    DCD    2
        0x00810d70:    00000000    ....    DCD    0
        0x00810d74:    00000000    ....    DCD    0
        0x00810d78:    00010000    ....    DCD    65536
        0x00810d7c:    00000000    ....    DCD    0
        0x00810d80:    00000001    ....    DCD    1
        0x00810d84:    2a260004    ..&*    DCD    707133444
        0x00810d88:    00000000    ....    DCD    0
        0x00810d8c:    00000000    ....    DCD    0
        0x00810d90:    00000000    ....    DCD    0
        0x00810d94:    00000000    ....    DCD    0
        0x00810d98:    00000000    ....    DCD    0
        0x00810d9c:    00000001    ....    DCD    1
        0x00810da0:    28030002    ...(    DCD    671285250
        0x00810da4:    00000002    ....    DCD    2
        0x00810da8:    00000000    ....    DCD    0
        0x00810dac:    00000000    ....    DCD    0
        0x00810db0:    00010000    ....    DCD    65536
        0x00810db4:    00000000    ....    DCD    0
        0x00810db8:    00000001    ....    DCD    1
        0x00810dbc:    2a280004    ..(*    DCD    707264516
        0x00810dc0:    00000000    ....    DCD    0
        0x00810dc4:    00000000    ....    DCD    0
        0x00810dc8:    00000000    ....    DCD    0
        0x00810dcc:    00000000    ....    DCD    0
        0x00810dd0:    00000000    ....    DCD    0
        0x00810dd4:    00000001    ....    DCD    1
        0x00810dd8:    28030002    ...(    DCD    671285250
        0x00810ddc:    00000002    ....    DCD    2
        0x00810de0:    00000000    ....    DCD    0
        0x00810de4:    00000000    ....    DCD    0
        0x00810de8:    00010000    ....    DCD    65536
        0x00810dec:    00000000    ....    DCD    0
        0x00810df0:    00000001    ....    DCD    1
        0x00810df4:    2a230004    ..#*    DCD    706936836
        0x00810df8:    00000000    ....    DCD    0
        0x00810dfc:    00000000    ....    DCD    0
        0x00810e00:    00000000    ....    DCD    0
        0x00810e04:    00000000    ....    DCD    0
        0x00810e08:    00000000    ....    DCD    0
        0x00810e0c:    00000001    ....    DCD    1
        0x00810e10:    28030002    ...(    DCD    671285250
        0x00810e14:    00000002    ....    DCD    2
        0x00810e18:    00000000    ....    DCD    0
        0x00810e1c:    00000000    ....    DCD    0
        0x00810e20:    00010000    ....    DCD    65536
        0x00810e24:    00000000    ....    DCD    0
        0x00810e28:    00000001    ....    DCD    1
        0x00810e2c:    2a2a0004    ..**    DCD    707395588
        0x00810e30:    00000000    ....    DCD    0
        0x00810e34:    00000000    ....    DCD    0
        0x00810e38:    00000000    ....    DCD    0
        0x00810e3c:    00000000    ....    DCD    0
        0x00810e40:    00000000    ....    DCD    0
        0x00810e44:    00000001    ....    DCD    1
        0x00810e48:    28030002    ...(    DCD    671285250
        0x00810e4c:    00000002    ....    DCD    2
        0x00810e50:    00000000    ....    DCD    0
        0x00810e54:    00000000    ....    DCD    0
        0x00810e58:    00010000    ....    DCD    65536
        0x00810e5c:    00000000    ....    DCD    0
        0x00810e60:    00000001    ....    DCD    1
        0x00810e64:    2a500004    ..P*    DCD    709885956
        0x00810e68:    00000000    ....    DCD    0
        0x00810e6c:    00000000    ....    DCD    0
        0x00810e70:    00000000    ....    DCD    0
        0x00810e74:    00000000    ....    DCD    0
        0x00810e78:    00000000    ....    DCD    0
        0x00810e7c:    00000001    ....    DCD    1
    dis_cbs
        0x00810e80:    0080fc6d    m...    DCD    8453229
        0x00810e84:    00000000    ....    DCD    0
        0x00810e88:    00000000    ....    DCD    0
    .conststring
        0x00810e8c:    30433249    I2C0    DCD    809710153
        0x00810e90:    00000000    ....    DCD    0
        0x00810e94:    30495053    SPI0    DCD    810111059
        0x00810e98:    00000000    ....    DCD    0
        0x00810e9c:    54524155    UART    DCD    1414676821
        0x00810ea0:    00000030    0...    DCD    48
        0x00810ea4:    414d4447    GDMA    DCD    1095582791
        0x00810ea8:    68432030    0 Ch    DCD    1749229616
        0x00810eac:    656e6e61    anne    DCD    1701736033
        0x00810eb0:    0000306c    l0..    DCD    12396
        0x00810eb4:    4f495047    GPIO    DCD    1330204743
        0x00810eb8:    6f72475f    _Gro    DCD    1869760351
        0x00810ebc:    00307075    up0.    DCD    3174517
        0x00810ec0:    31433249    I2C1    DCD    826487369
        0x00810ec4:    00000000    ....    DCD    0
        0x00810ec8:    31495053    SPI1    DCD    826888275
        0x00810ecc:    00000000    ....    DCD    0
        0x00810ed0:    54524155    UART    DCD    1414676821
        0x00810ed4:    00000031    1...    DCD    49
        0x00810ed8:    414d4447    GDMA    DCD    1095582791
        0x00810edc:    68432030    0 Ch    DCD    1749229616
        0x00810ee0:    656e6e61    anne    DCD    1701736033
        0x00810ee4:    0000316c    l1..    DCD    12652
        0x00810ee8:    4f495047    GPIO    DCD    1330204743
        0x00810eec:    6f72475f    _Gro    DCD    1869760351
        0x00810ef0:    00317075    up1.    DCD    3240053
        0x00810ef4:    324d4954    TIM2    DCD    843925844
        0x00810ef8:    00000000    ....    DCD    0
        0x00810efc:    54524155    UART    DCD    1414676821
        0x00810f00:    00000032    2...    DCD    50
        0x00810f04:    414d4447    GDMA    DCD    1095582791
        0x00810f08:    68432030    0 Ch    DCD    1749229616
        0x00810f0c:    656e6e61    anne    DCD    1701736033
        0x00810f10:    0000326c    l2..    DCD    12908
        0x00810f14:    4f495047    GPIO    DCD    1330204743
        0x00810f18:    6f72475f    _Gro    DCD    1869760351
        0x00810f1c:    00327075    up2.    DCD    3305589
        0x00810f20:    334d4954    TIM3    DCD    860703060
        0x00810f24:    00000000    ....    DCD    0
        0x00810f28:    414d4447    GDMA    DCD    1095582791
        0x00810f2c:    68432030    0 Ch    DCD    1749229616
        0x00810f30:    656e6e61    anne    DCD    1701736033
        0x00810f34:    0000336c    l3..    DCD    13164
        0x00810f38:    4f495047    GPIO    DCD    1330204743
        0x00810f3c:    6f72475f    _Gro    DCD    1869760351
        0x00810f40:    00337075    up3.    DCD    3371125
        0x00810f44:    344d4954    TIM4    DCD    877480276
        0x00810f48:    00000000    ....    DCD    0
        0x00810f4c:    4f495047    GPIO    DCD    1330204743
        0x00810f50:    00000034    4...    DCD    52
        0x00810f54:    414d4447    GDMA    DCD    1095582791
        0x00810f58:    68432030    0 Ch    DCD    1749229616
        0x00810f5c:    656e6e61    anne    DCD    1701736033
        0x00810f60:    0000346c    l4..    DCD    13420
        0x00810f64:    354d4954    TIM5    DCD    894257492
        0x00810f68:    00000000    ....    DCD    0
        0x00810f6c:    4f495047    GPIO    DCD    1330204743
        0x00810f70:    00000035    5...    DCD    53
        0x00810f74:    414d4447    GDMA    DCD    1095582791
        0x00810f78:    68432030    0 Ch    DCD    1749229616
        0x00810f7c:    656e6e61    anne    DCD    1701736033
        0x00810f80:    0000356c    l5..    DCD    13676
        0x00810f84:    364d4954    TIM6    DCD    911034708
        0x00810f88:    00000000    ....    DCD    0
        0x00810f8c:    656d6954    Time    DCD    1701669204
        0x00810f90:    372d3472    r4-7    DCD    925709426
        0x00810f94:    00000000    ....    DCD    0
        0x00810f98:    374d4954    TIM7    DCD    927811924
        0x00810f9c:    00000000    ....    DCD    0
        0x00810fa0:    414d5442    BTMA    DCD    1095586882
        0x00810fa4:    00000043    C...    DCD    67
        0x00810fa8:    00434441    ADC.    DCD    4408385
        0x00810fac:    00435452    RTC.    DCD    4412498
        0x00810fb0:    00435653    SVC.    DCD    4413011
        0x00810fb4:    0044434c    LCD.    DCD    4473676
        0x00810fb8:    00474457    WDG.    DCD    4670551
        0x00810fbc:    00494d4e    NMI.    DCD    4803918
        0x00810fc0:    4f43504c    LPCO    DCD    1329811532
        0x00810fc4:    0000504d    MP..    DCD    20557
        0x00810fc8:    74696e49    Init    DCD    1953066569
        0x00810fcc:    536c6169    ialS    DCD    1399611753
        0x00810fd0:    00000050    P...    DCD    80
        0x00810fd4:    00005249    IR..    DCD    21065
        0x00810fd8:    646e6550    Pend    DCD    1684956496
        0x00810fdc:    00005653    SV..    DCD    22099
        0x00810fe0:    32495053    SPI2    DCD    843665491
        0x00810fe4:    00000057    W...    DCD    87
        0x00810fe8:    524f5053    SPOR    DCD    1380929619
        0x00810fec:    52203154    T1 R    DCD    1377841492
        0x00810ff0:    00000058    X...    DCD    88
        0x00810ff4:    30533249    I2S0    DCD    810758729
        0x00810ff8:    0058525f    _RX.    DCD    5788255
        0x00810ffc:    524f5053    SPOR    DCD    1380929619
        0x00811000:    54203154    T1 T    DCD    1411395924
        0x00811004:    00000058    X...    DCD    88
        0x00811008:    30533249    I2S0    DCD    810758729
        0x0081100c:    0058545f    _TX.    DCD    5788767
        0x00811010:    64767352    Rsvd    DCD    1685484370
        0x00811014:    00000000    ....    DCD    0
        0x00811018:    63656451    Qdec    DCD    1667589201
        0x0081101c:    0065646f    ode.    DCD    6644847
        0x00811020:    4d6d654d    MemM    DCD    1299014989
        0x00811024:    67616e61    anag    DCD    1734438497
        0x00811028:    00000065    e...    DCD    101
        0x0081102c:    5f495053    SPI_    DCD    1598640211
        0x00811030:    73616c46    Flas    DCD    1935764550
        0x00811034:    00000068    h...    DCD    104
        0x00811038:    54737953    SysT    DCD    1416853843
        0x0081103c:    006b6369    ick.    DCD    7037801
        0x00811040:    69726550    Peri    DCD    1769104720
        0x00811044:    72656870    pher    DCD    1919248496
        0x00811048:    00006c61    al..    DCD    27745
        0x0081104c:    74737953    Syst    DCD    1953724755
        0x00811050:    00006d65    em..    DCD    28005
        0x00811054:    74616c50    Plat    DCD    1952541776
        0x00811058:    6d726f66    form    DCD    1836216166
        0x0081105c:    00000000    ....    DCD    0
        0x00811060:    7379654b    Keys    DCD    1937335627
        0x00811064:    006e6163    can.    DCD    7233891
        0x00811068:    75626544    Debu    DCD    1969382724
        0x0081106c:    6e6f4d67    gMon    DCD    1852788071
        0x00811070:    00000000    ....    DCD    0
        0x00811074:    65736552    Rese    DCD    1702061394
        0x00811078:    00000074    t...    DCD    116
        0x0081107c:    64726148    Hard    DCD    1685217608
        0x00811080:    6c756146    Faul    DCD    1819631942
        0x00811084:    00000074    t...    DCD    116
        0x00811088:    67617355    Usag    DCD    1734439765
        0x0081108c:    75614665    eFau    DCD    1969309285
        0x00811090:    0000746c    lt..    DCD    29804
        0x00811094:    46737542    BusF    DCD    1181971778
        0x00811098:    746c7561    ault    DCD    1953264993
        0x0081109c:    00000000    ....    DCD    0
        0x008110a0:    5f415450    PTA_    DCD    1598116944
        0x008110a4:    6c69614d    Mail    DCD    1818845517
        0x008110a8:    00786f62    box.    DCD    7892834
    .conststring
        0x008110ac:    6e656353    Scen    DCD    1852138323
        0x008110b0:    00425f65    e_B.    DCD    4349797
        0x008110b4:    6e656353    Scen    DCD    1852138323
        0x008110b8:    00435f65    e_C.    DCD    4415333
        0x008110bc:    746f6f42    Boot    DCD    1953460034
        0x008110c0:    65636e4f    Once    DCD    1701015119
        0x008110c4:    00000000    ....    DCD    0
    Region$$Table$$Base
        0x008110c8:    00811108    ....    DCD    8458504
        0x008110cc:    00200000    .. .    DCD    2097152
        0x008110d0:    000000f4    ....    DCD    244
        0x008110d4:    0080e444    D...    DCD    8447044
        0x008110d8:    008111fc    ....    DCD    8458748
        0x008110dc:    00207c00    .| .    DCD    2128896
        0x008110e0:    0000025c    \...    DCD    604
        0x008110e4:    0080e444    D...    DCD    8447044
        0x008110e8:    00811458    X...    DCD    8459352
        0x008110ec:    00207e5c    \~ .    DCD    2129500
        0x008110f0:    000000cc    ....    DCD    204
        0x008110f4:    0080e444    D...    DCD    8447044
        0x008110f8:    00811524    $...    DCD    8459556
        0x008110fc:    00207f28    (. .    DCD    2129704
        0x00811100:    000001bc    ....    DCD    444
        0x00811104:    0080e460    `...    DCD    8447072
    Region$$Table$$Limit

** Section #4 'RAM_VECTOR_TABLE' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 244 bytes (alignment 4)
    Address: 0x00200000

    0x200000:   00 38 20 00 01 e4 80 00 55 06 81 00 55 06 81 00    .8 .....U...U...
    0x200010:   55 06 81 00 55 06 81 00 55 06 81 00 00 00 00 00    U...U...U.......
    0x200020:   00 00 00 00 00 00 00 00 00 00 00 00 55 06 81 00    ............U...
    0x200030:   55 06 81 00 00 00 00 00 55 06 81 00 55 06 81 00    U.......U...U...
    0x200040:   89 ee 80 00 55 06 81 00 55 06 81 00 55 06 81 00    ....U...U...U...
    0x200050:   55 06 81 00 55 06 81 00 55 06 81 00 55 06 81 00    U...U...U...U...
    0x200060:   55 06 81 00 55 06 81 00 55 06 81 00 55 06 81 00    U...U...U...U...
    0x200070:   55 06 81 00 55 06 81 00 55 06 81 00 55 06 81 00    U...U...U...U...
    0x200080:   55 06 81 00 55 06 81 00 55 06 81 00 55 06 81 00    U...U...U...U...
    0x200090:   55 06 81 00 55 06 81 00 55 06 81 00 55 06 81 00    U...U...U...U...
    0x2000a0:   55 06 81 00 55 06 81 00 01 7c 20 00 4d 7c 20 00    U...U....| .M| .
    0x2000b0:   55 06 81 00 99 7c 20 00 dd 7c 20 00 55 06 81 00    U....| ..| .U...
    0x2000c0:   55 06 81 00 55 06 81 00 55 06 81 00 55 06 81 00    U...U...U...U...
    0x2000d0:   55 06 81 00 55 06 81 00 55 06 81 00 55 06 81 00    U...U...U...U...
    0x2000e0:   55 06 81 00 55 06 81 00 55 06 81 00 55 06 81 00    U...U...U...U...
    0x2000f0:   55 06 81 00                                        U...

    __Vectors_End

** Section #5 'RAM_DATA_ON' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 604 bytes (alignment 4)
    Address: 0x00207c00

    $t
    .ram.dataon.data
    GPIO_Group3_Handler
;;; .\..\include\SDK\src\mcu\rtl876x\system_rtl8762c.c
;;;537    DATA_RAM_FUNCTION void GPIO_Group3_Handler(void)
;;;537    {
;;;537        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207c00:    4847        GH      LDR      r0,[pc,#284] ; [0x207d20] = 0x40001000
;;; .\..\include\SDK\src\mcu\rtl876x\system_rtl8762c.c (536)
        0x00207c02:    b510        ..      PUSH     {r4,lr}
        0x00207c04:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207c06:    0720         .      LSLS     r0,r4,#28
        0x00207c08:    d501        ..      BPL      0x207c0e ; GPIO_Group3_Handler + 14
;;;537        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;538    
;;;539        //Check exact IRQ function
;;;540        if (GPIOIrqStatus & BIT3)
;;;541        {
;;;542            GPIO3_Handler();
        0x00207c0a:    f208f523    ..#.    BL       ADC_Handler ; 0x810654
;;;543        }
;;;544        if (GPIOIrqStatus & BIT7)
        0x00207c0e:    0620         .      LSLS     r0,r4,#24
        0x00207c10:    d501        ..      BPL      0x207c16 ; GPIO_Group3_Handler + 22
;;;545        {
;;;546            GPIO7_Handler();
        0x00207c12:    f208f51f    ....    BL       ADC_Handler ; 0x810654
;;;547        }
;;;548        if (GPIOIrqStatus & BIT11)
        0x00207c16:    0520         .      LSLS     r0,r4,#20
        0x00207c18:    d501        ..      BPL      0x207c1e ; GPIO_Group3_Handler + 30
;;;549        {
;;;550            GPIO11_Handler();
        0x00207c1a:    f208f51b    ....    BL       ADC_Handler ; 0x810654
;;;551        }
;;;552        if (GPIOIrqStatus & BIT15)
        0x00207c1e:    0420         .      LSLS     r0,r4,#16
        0x00207c20:    d501        ..      BPL      0x207c26 ; GPIO_Group3_Handler + 38
;;;553        {
;;;554            GPIO15_Handler();
        0x00207c22:    f208f517    ....    BL       ADC_Handler ; 0x810654
;;;555        }
;;;556        if (GPIOIrqStatus & BIT19)
        0x00207c26:    0320         .      LSLS     r0,r4,#12
        0x00207c28:    d501        ..      BPL      0x207c2e ; GPIO_Group3_Handler + 46
;;;557        {
;;;558            GPIO19_Handler();
        0x00207c2a:    f208f513    ....    BL       ADC_Handler ; 0x810654
;;;559        }
;;;560        if (GPIOIrqStatus & BIT23)
        0x00207c2e:    0220         .      LSLS     r0,r4,#8
        0x00207c30:    d501        ..      BPL      0x207c36 ; GPIO_Group3_Handler + 54
;;;561        {
;;;562            GPIO23_Handler();
        0x00207c32:    f208f50f    ....    BL       ADC_Handler ; 0x810654
;;;563        }
;;;564        if (GPIOIrqStatus & BIT27)
        0x00207c36:    0120         .      LSLS     r0,r4,#4
        0x00207c38:    d501        ..      BPL      0x207c3e ; GPIO_Group3_Handler + 62
;;;565        {
;;;566            GPIO27_Handler();
        0x00207c3a:    f208f50b    ....    BL       ADC_Handler ; 0x810654
;;;567        }
;;;568        if (GPIOIrqStatus & BIT31)
        0x00207c3e:    2c00        .,      CMP      r4,#0
        0x00207c40:    da03        ..      BGE      0x207c4a ; GPIO_Group3_Handler + 74
;;;569        {
;;;570            GPIO31_Handler();
        0x00207c42:    e8bd4010    ...@    POP      {r4,lr}
        0x00207c46:    f208b505    ....    B.W      ADC_Handler ; 0x810654
;;;571        }
;;;572    }
        0x00207c4a:    bd10        ..      POP      {r4,pc}
    GPIO_Group2_Handler
;;;573    /**
;;;574     * @brief  GPIO Group2 Handler
;;;575     * @param  none
;;;576     * @return none
;;;577      */
;;;578    DATA_RAM_FUNCTION void GPIO_Group2_Handler(void)
;;;579    {
;;;580        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207c4c:    4834        4H      LDR      r0,[pc,#208] ; [0x207d20] = 0x40001000
;;; .\..\include\SDK\src\mcu\rtl876x\system_rtl8762c.c (579)
        0x00207c4e:    b510        ..      PUSH     {r4,lr}
        0x00207c50:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207c52:    0760        `.      LSLS     r0,r4,#29
        0x00207c54:    d501        ..      BPL      0x207c5a ; GPIO_Group2_Handler + 14
;;;580        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;581    
;;;582        //Check exact IRQ function
;;;583        if (GPIOIrqStatus & BIT2)
;;;584        {
;;;585            GPIO2_Handler();
        0x00207c56:    f208f4fd    ....    BL       ADC_Handler ; 0x810654
;;;586        }
;;;587        if (GPIOIrqStatus & BIT6)
        0x00207c5a:    0660        `.      LSLS     r0,r4,#25
        0x00207c5c:    d501        ..      BPL      0x207c62 ; GPIO_Group2_Handler + 22
;;;588        {
;;;589            GPIO6_Handler();
        0x00207c5e:    f208f4f9    ....    BL       ADC_Handler ; 0x810654
;;;590        }
;;;591        if (GPIOIrqStatus & BIT10)
        0x00207c62:    0560        `.      LSLS     r0,r4,#21
        0x00207c64:    d501        ..      BPL      0x207c6a ; GPIO_Group2_Handler + 30
;;;592        {
;;;593            GPIO10_Handler();
        0x00207c66:    f208f4f5    ....    BL       ADC_Handler ; 0x810654
;;;594        }
;;;595        if (GPIOIrqStatus & BIT14)
        0x00207c6a:    0460        `.      LSLS     r0,r4,#17
        0x00207c6c:    d501        ..      BPL      0x207c72 ; GPIO_Group2_Handler + 38
;;;596        {
;;;597            GPIO14_Handler();
        0x00207c6e:    f208f4f1    ....    BL       ADC_Handler ; 0x810654
;;;598        }
;;;599        if (GPIOIrqStatus & BIT18)
        0x00207c72:    0360        `.      LSLS     r0,r4,#13
        0x00207c74:    d501        ..      BPL      0x207c7a ; GPIO_Group2_Handler + 46
;;;600        {
;;;601            GPIO18_Handler();
        0x00207c76:    f208f4ed    ....    BL       ADC_Handler ; 0x810654
;;;602        }
;;;603        if (GPIOIrqStatus & BIT22)
        0x00207c7a:    0260        `.      LSLS     r0,r4,#9
        0x00207c7c:    d501        ..      BPL      0x207c82 ; GPIO_Group2_Handler + 54
;;;604        {
;;;605            GPIO22_Handler();
        0x00207c7e:    f208f4e9    ....    BL       ADC_Handler ; 0x810654
;;;606        }
;;;607        if (GPIOIrqStatus & BIT26)
        0x00207c82:    0160        `.      LSLS     r0,r4,#5
        0x00207c84:    d501        ..      BPL      0x207c8a ; GPIO_Group2_Handler + 62
;;;608        {
;;;609            GPIO26_Handler();
        0x00207c86:    f208f4e5    ....    BL       ADC_Handler ; 0x810654
;;;610        }
;;;611        if (GPIOIrqStatus & BIT30)
        0x00207c8a:    0060        `.      LSLS     r0,r4,#1
        0x00207c8c:    d503        ..      BPL      0x207c96 ; GPIO_Group2_Handler + 74
;;;612        {
;;;613            GPIO30_Handler();
        0x00207c8e:    e8bd4010    ...@    POP      {r4,lr}
        0x00207c92:    f208b4df    ....    B.W      ADC_Handler ; 0x810654
;;;614        }
;;;615    }
        0x00207c96:    bd10        ..      POP      {r4,pc}
    GPIO_Group1_Handler
;;;616    /**
;;;617     * @brief  GPIO Group1 Handler
;;;618     * @param  none
;;;619     * @return none
;;;620      */
;;;621    DATA_RAM_FUNCTION void GPIO_Group1_Handler(void)
;;;622    {
;;;623        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207c98:    4821        !H      LDR      r0,[pc,#132] ; [0x207d20] = 0x40001000
;;; .\..\include\SDK\src\mcu\rtl876x\system_rtl8762c.c (622)
        0x00207c9a:    b510        ..      PUSH     {r4,lr}
        0x00207c9c:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207c9e:    07a0        ..      LSLS     r0,r4,#30
        0x00207ca0:    d501        ..      BPL      0x207ca6 ; GPIO_Group1_Handler + 14
;;;623        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;624    
;;;625        //Check exact IRQ function
;;;626        if (GPIOIrqStatus & BIT1)
;;;627        {
;;;628            GPIO1_Handler();
        0x00207ca2:    f208f4d7    ....    BL       ADC_Handler ; 0x810654
;;;629        }
;;;630        if (GPIOIrqStatus & BIT9)
        0x00207ca6:    05a0        ..      LSLS     r0,r4,#22
        0x00207ca8:    d501        ..      BPL      0x207cae ; GPIO_Group1_Handler + 22
;;;631        {
;;;632            GPIO9_Handler();
        0x00207caa:    f208f4d3    ....    BL       ADC_Handler ; 0x810654
;;;633        }
;;;634        if (GPIOIrqStatus & BIT13)
        0x00207cae:    04a0        ..      LSLS     r0,r4,#18
        0x00207cb0:    d501        ..      BPL      0x207cb6 ; GPIO_Group1_Handler + 30
;;;635        {
;;;636            GPIO13_Handler();
        0x00207cb2:    f208f4cf    ....    BL       ADC_Handler ; 0x810654
;;;637        }
;;;638        if (GPIOIrqStatus & BIT17)
        0x00207cb6:    03a0        ..      LSLS     r0,r4,#14
        0x00207cb8:    d501        ..      BPL      0x207cbe ; GPIO_Group1_Handler + 38
;;;639        {
;;;640            GPIO17_Handler();
        0x00207cba:    f208f4cb    ....    BL       ADC_Handler ; 0x810654
;;;641        }
;;;642        if (GPIOIrqStatus & BIT21)
        0x00207cbe:    02a0        ..      LSLS     r0,r4,#10
        0x00207cc0:    d501        ..      BPL      0x207cc6 ; GPIO_Group1_Handler + 46
;;;643        {
;;;644            GPIO21_Handler();
        0x00207cc2:    f208f4c7    ....    BL       ADC_Handler ; 0x810654
;;;645        }
;;;646        if (GPIOIrqStatus & BIT25)
        0x00207cc6:    01a0        ..      LSLS     r0,r4,#6
        0x00207cc8:    d501        ..      BPL      0x207cce ; GPIO_Group1_Handler + 54
;;;647        {
;;;648            GPIO25_Handler();
        0x00207cca:    f208f4c3    ....    BL       ADC_Handler ; 0x810654
;;;649        }
;;;650        if (GPIOIrqStatus & BIT29)
        0x00207cce:    00a0        ..      LSLS     r0,r4,#2
        0x00207cd0:    d503        ..      BPL      0x207cda ; GPIO_Group1_Handler + 66
;;;651        {
;;;652            GPIO29_Handler();
        0x00207cd2:    e8bd4010    ...@    POP      {r4,lr}
        0x00207cd6:    f208b4bd    ....    B.W      ADC_Handler ; 0x810654
;;;653        }
;;;654    }
        0x00207cda:    bd10        ..      POP      {r4,pc}
    GPIO_Group0_Handler
;;;655    /**
;;;656     * @brief  GPIO Group0 Handler
;;;657     * @param  none
;;;658     * @return none
;;;659      */
;;;660    DATA_RAM_FUNCTION void GPIO_Group0_Handler(void)
;;;661    {
;;;662        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207cdc:    4810        .H      LDR      r0,[pc,#64] ; [0x207d20] = 0x40001000
;;; .\..\include\SDK\src\mcu\rtl876x\system_rtl8762c.c (661)
        0x00207cde:    b510        ..      PUSH     {r4,lr}
        0x00207ce0:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207ce2:    07e0        ..      LSLS     r0,r4,#31
        0x00207ce4:    d001        ..      BEQ      0x207cea ; GPIO_Group0_Handler + 14
;;;662        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;663    
;;;664        //Check exact IRQ function
;;;665        if (GPIOIrqStatus & BIT0)
;;;666        {
;;;667            GPIO0_Handler();
        0x00207ce6:    f208f4b5    ....    BL       ADC_Handler ; 0x810654
;;;668        }
;;;669        if (GPIOIrqStatus & BIT8)
        0x00207cea:    05e0        ..      LSLS     r0,r4,#23
        0x00207cec:    d501        ..      BPL      0x207cf2 ; GPIO_Group0_Handler + 22
;;;670        {
;;;671            GPIO8_Handler();
        0x00207cee:    f208f4b1    ....    BL       ADC_Handler ; 0x810654
;;;672        }
;;;673        if (GPIOIrqStatus & BIT12)
        0x00207cf2:    04e0        ..      LSLS     r0,r4,#19
        0x00207cf4:    d501        ..      BPL      0x207cfa ; GPIO_Group0_Handler + 30
;;;674        {
;;;675            GPIO12_Handler();
        0x00207cf6:    f208f4ad    ....    BL       ADC_Handler ; 0x810654
;;;676        }
;;;677        if (GPIOIrqStatus & BIT16)
        0x00207cfa:    03e0        ..      LSLS     r0,r4,#15
        0x00207cfc:    d501        ..      BPL      0x207d02 ; GPIO_Group0_Handler + 38
;;;678        {
;;;679            GPIO16_Handler();
        0x00207cfe:    f208f4a9    ....    BL       ADC_Handler ; 0x810654
;;;680        }
;;;681        if (GPIOIrqStatus & BIT20)
        0x00207d02:    02e0        ..      LSLS     r0,r4,#11
        0x00207d04:    d501        ..      BPL      0x207d0a ; GPIO_Group0_Handler + 46
;;;682        {
;;;683            GPIO20_Handler();
        0x00207d06:    f206f5f1    ....    BL       GPIO20_Handler ; 0x80e8ec
;;;684        }
;;;685        if (GPIOIrqStatus & BIT24)
        0x00207d0a:    01e0        ..      LSLS     r0,r4,#7
        0x00207d0c:    d501        ..      BPL      0x207d12 ; GPIO_Group0_Handler + 54
;;;686        {
;;;687            GPIO24_Handler();
        0x00207d0e:    f208f4a1    ....    BL       ADC_Handler ; 0x810654
;;;688        }
;;;689        if (GPIOIrqStatus & BIT28)
        0x00207d12:    00e0        ..      LSLS     r0,r4,#3
        0x00207d14:    d503        ..      BPL      0x207d1e ; GPIO_Group0_Handler + 66
;;;690        {
;;;691            GPIO28_Handler();
        0x00207d16:    e8bd4010    ...@    POP      {r4,lr}
        0x00207d1a:    f208b49b    ....    B.W      ADC_Handler ; 0x810654
;;;692        }
;;;693    }
        0x00207d1e:    bd10        ..      POP      {r4,pc}
    $d
        0x00207d20:    40001000    ...@    DCD    1073745920
    $t
    .ram.dataon.data
    DLPS_IO_ExitDlpsCb
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_io_dlps.c
;;;1957   {
        0x00207d24:    b530        0.      PUSH     {r4,r5,lr}
        0x00207d26:    4947        GI      LDR      r1,[pc,#284] ; [0x207e44] = 0x207fe0
        0x00207d28:    b085        ..      SUB      sp,sp,#0x14
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_io_dlps.c (127)
        0x00207d2a:    2000        .       MOVS     r0,#0
        0x00207d2c:    0082        ..      LSLS     r2,r0,#2
        0x00207d2e:    f1024280    ...B    ADD      r2,r2,#0x40000000
        0x00207d32:    f8513020    Q. 0    LDR      r3,[r1,r0,LSL #2]
        0x00207d36:    f8c23280    ...2    STR      r3,[r2,#0x280]
        0x00207d3a:    1c40        @.      ADDS     r0,r0,#1
        0x00207d3c:    b2c0        ..      UXTB     r0,r0
        0x00207d3e:    280a        .(      CMP      r0,#0xa
        0x00207d40:    d3f4        ..      BCC      0x207d2c ; DLPS_IO_ExitDlpsCb + 8
;;;128        {
;;;129            PINMUX->CFG[i] = Pinmux_StoreReg[i];
;;;130        }
;;;131    
;;;132        return;
;;;133    }
;;;134    #endif
;;;135    
;;;136    /********************************************** ********************************************************/
;;;137    /**************************************** [GPIO DLPS] **************************************************/
;;;138    /*******************************************************************************************************/
;;;139    /*******************************************************************************************************/
;;;140    #if USE_GPIO_DLPS
;;;141    
;;;142    __STATIC_INLINE void GPIO_DLPS_Enter(void);
;;;143    __STATIC_INLINE void GPIO_DLPS_Exit(void);
;;;144    
;;;145    uint32_t GPIO_StoreReg[9];         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;146    
;;;147    /**
;;;148      * @brief  GPIO enter dlps callback function(Save GPIO register values when system enter DLPS)
;;;149      * @param  None
;;;150      * @retval None
;;;151      */
;;;152    __STATIC_INLINE void GPIO_DLPS_Enter(void)
;;;153    {
;;;154        PERIPH->PERI_FUNC1_EN |= BIT_PERI_GPIO_EN;
;;;155        PERIPH->PERI_CLK_CTRL |= (BIT_SOC_ACTCK_GPIO_EN | SYSBLK_SLPCK_GPIO_EN_Msk);
;;;156    
;;;157        GPIO_StoreReg[0] = GPIO->DATAOUT;
;;;158        GPIO_StoreReg[1] = GPIO->DATADIR;
;;;159        GPIO_StoreReg[2] = GPIO->DATASRC;
;;;160        GPIO_StoreReg[3] = GPIO->INTEN;
;;;161        GPIO_StoreReg[4] = GPIO->INTMASK;
;;;162        GPIO_StoreReg[5] = GPIO->INTTYPE;
;;;163        GPIO_StoreReg[6] = GPIO->INTPOLARITY;
;;;164        GPIO_StoreReg[7] = GPIO->DEBOUNCE;
;;;165        GPIO_StoreReg[8] = *(__IO uint32_t *)(0x40000344UL);
;;;166    
;;;167        return;
;;;168    }
;;;169    
;;;170    /**
;;;171      * @brief  GPIO exit dlps callback function(Resume GPIO register values when system exit DLPS)
;;;172      * @param  None
;;;173      * @retval None
;;;174      */
;;;175    DATA_RAM_FUNCTION __STATIC_INLINE void GPIO_DLPS_Exit(void)
;;;176    {
;;;177        PERIPH->PERI_FUNC1_EN |= BIT_PERI_GPIO_EN;
;;;178        PERIPH->PERI_CLK_CTRL |= (BIT_SOC_ACTCK_GPIO_EN | SYSBLK_SLPCK_GPIO_EN_Msk);
;;;179    
;;;180        GPIO->DATADIR       = GPIO_StoreReg[1];
;;;181        GPIO->DATASRC       = GPIO_StoreReg[2];
;;;182        GPIO->INTMASK       = GPIO_StoreReg[4];
;;;183        GPIO->INTTYPE       = GPIO_StoreReg[5];
;;;184        GPIO->INTPOLARITY   = GPIO_StoreReg[6];
;;;185        GPIO->DEBOUNCE      = GPIO_StoreReg[7];
;;;186        GPIO->DATAOUT       = GPIO_StoreReg[0];
;;;187        GPIO->INTCLR        = ~(GPIO_StoreReg[1]);
;;;188        GPIO->INTEN         = GPIO_StoreReg[3];
;;;189        *(__IO uint32_t *)(0x40000344UL) = GPIO_StoreReg[8];
;;;190    
;;;191        return;
;;;192    }
;;;193    #endif  /* USE_GPIO_DLPS */
;;;194    
;;;195    
;;;196    /********************************************** ********************************************************/
;;;197    /**************************************** [KEYSCAN DLPS] ***********************************************/
;;;198    /*******************************************************************************************************/
;;;199    /*******************************************************************************************************/
;;;200    #if USE_KEYSCAN_DLPS
;;;201    __STATIC_INLINE void KeyScan_DLPS_Enter(void);
;;;202    __STATIC_INLINE void KeyScan_DLPS_Exit(void);
;;;203    
;;;204    uint32_t KeyScan_StoreReg[7];      /*  This array should be placed in RAM ON/Buffer ON.    */
;;;205    
;;;206    /**
;;;207      * @brief  KEYSCAN enter dlps callback function(Save KEYSCAN register values when system enter DLPS)
;;;208      * @param  None
;;;209      * @retval None
;;;210      */
;;;211    __STATIC_INLINE void KeyScan_DLPS_Enter(void)
;;;212    {
;;;213        /*Open 5M clock source*/
;;;214        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;215        SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
;;;216    
;;;217        PERIPH->PERI_FUNC0_EN |= BIT_PERI_KEYSCAN_EN;
;;;218        PERIPH->PERI_CLK_CTRL1 |= (BIT_SOC_ACTCK_KEYSCAN_EN | SYSBLK_SLPCK_KEYSCAN_EN_Msk);
;;;219    
;;;220        KeyScan_StoreReg[0] = KEYSCAN->CLKDIV;               /* 0x00 */
;;;221        KeyScan_StoreReg[1] = KEYSCAN->TIMERCR;              /* 0x04 */
;;;222        KeyScan_StoreReg[2] = KEYSCAN->CR;                   /* 0x08 */
;;;223        KeyScan_StoreReg[3] = KEYSCAN->COLCR;                /* 0x0C */
;;;224        KeyScan_StoreReg[4] = KEYSCAN->ROWCR;                /* 0x10 */
;;;225        KeyScan_StoreReg[6] = KEYSCAN->INTMASK;              /* 0x18 */
;;;226    
;;;227        return;
;;;228    }
;;;229    
;;;230    /**
;;;231      * @brief  KEYSCAN exit dlps callback function(Resume KEYSCAN register values when system exit DLPS)
;;;232      * @param  None
;;;233      * @retval None
;;;234      */
;;;235    DATA_RAM_FUNCTION __STATIC_INLINE void KeyScan_DLPS_Exit(void)
;;;236    {
;;;237        /*Open 5M clock source*/
;;;238        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;239        SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
;;;240    
;;;241        PERIPH->PERI_FUNC0_EN |= BIT_PERI_KEYSCAN_EN;
;;;242        PERIPH->PERI_CLK_CTRL1 |= (BIT_SOC_ACTCK_KEYSCAN_EN | SYSBLK_SLPCK_KEYSCAN_EN_Msk);
;;;243    
;;;244        /* Set FSM to idle state */
;;;245        KEYSCAN->CR &= ~BIT31;
;;;246        KEYSCAN->CLKDIV = KeyScan_StoreReg[0];
;;;247        KEYSCAN->CR = (KeyScan_StoreReg[2] & (~(BIT31)));
;;;248        KEYSCAN->TIMERCR = KeyScan_StoreReg[1];
;;;249        KEYSCAN->COLCR = KeyScan_StoreReg[3];
;;;250        KEYSCAN->ROWCR = KeyScan_StoreReg[4];
;;;251        KEYSCAN->INTMASK = KeyScan_StoreReg[6];
;;;252        KEYSCAN->CR |= (KeyScan_StoreReg[2] & ((BIT31)));
;;;253    
;;;254        return;
;;;255    }
;;;256    #endif /* USE_KEYSCAN_DLPS */
;;;257    
;;;258    
;;;259    /********************************************** ********************************************************/
;;;260    /**************************************** [QDEC DLPS] **************************************************/
;;;261    /*******************************************************************************************************/
;;;262    /*******************************************************************************************************/
;;;263    #if USE_QDECODER_DLPS
;;;264    __STATIC_INLINE void QuadDecoder_DLPS_Enter(void);
;;;265    __STATIC_INLINE void QuadDecoder_DLPS_Exit(void);
;;;266    
;;;267    uint32_t QuadDecoder_StoreReg[5];  /*  This array should be placed in RAM ON/Buffer ON.    */
;;;268    
;;;269    /**
;;;270      * @brief  QDEC enter dlps callback function(Save QDEC register values when system enter DLPS)
;;;271      * @param  None
;;;272      * @retval None
;;;273      */
;;;274    __STATIC_INLINE void QuadDecoder_DLPS_Enter(void)
;;;275    {
;;;276        /*Open 20M clock source*/
;;;277        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;278        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;279        SYSBLKCTRL->u_218.PERI_FUNC0_EN |= SYSBLK_QDECODE_EN_Msk;
;;;280        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_QDECODE_EN_Msk | SYSBLK_SLPCK_QDECODE_EN_Msk);
;;;281    
;;;282        QuadDecoder_StoreReg[0] = QDEC->REG_DIV;
;;;283        QuadDecoder_StoreReg[1] = QDEC->REG_CR_X;
;;;284        QuadDecoder_StoreReg[2] = QDEC->REG_CR_Y;
;;;285        QuadDecoder_StoreReg[3] = QDEC->REG_CR_Z;
;;;286        QuadDecoder_StoreReg[4] = QDEC->INT_MASK;
;;;287    
;;;288        return;
;;;289    }
;;;290    
;;;291    /**
;;;292      * @brief  QDEC exit dlps callback function(Resume QDEC register values when system exit DLPS)
;;;293      * @param  None
;;;294      * @retval None
;;;295      */
;;;296    DATA_RAM_FUNCTION __STATIC_INLINE void QuadDecoder_DLPS_Exit(void)
;;;297    {
;;;298        /*Open 20M clock source*/
;;;299        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;300        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;301        SYSBLKCTRL->u_218.PERI_FUNC0_EN |= SYSBLK_QDECODE_EN_Msk;
;;;302        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_QDECODE_EN_Msk | SYSBLK_SLPCK_QDECODE_EN_Msk);
;;;303    
;;;304        //clear flags
;;;305        QDEC->REG_DIV  = QuadDecoder_StoreReg[0];
;;;306        QDEC->REG_CR_X = QuadDecoder_StoreReg[1];
;;;307        QDEC->REG_CR_Y = QuadDecoder_StoreReg[2];
;;;308        QDEC->REG_CR_Z = QuadDecoder_StoreReg[3];
;;;309        QDEC->INT_MASK = QuadDecoder_StoreReg[4];
;;;310    
;;;311        return;
;;;312    }
;;;313    #endif
;;;314    
;;;315    /********************************************** ********************************************************/
;;;316    /**************************************** [SPI0 DLPS] **************************************************/
;;;317    /*******************************************************************************************************/
;;;318    /*******************************************************************************************************/
;;;319    #if USE_SPI0_DLPS
;;;320    __STATIC_INLINE void SPI0_DLPS_Enter(void);
;;;321    __STATIC_INLINE void SPI0_DLPS_Exit(void);
;;;322    
;;;323    uint32_t SPI0_StoreReg[13];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;324    
;;;325    /**
;;;326      * @brief  SPI0 enter dlps callback function(Save SPI0 register values when system enter DLPS)
;;;327      * @param  None
;;;328      * @retval None
;;;329      */
;;;330    __STATIC_INLINE void SPI0_DLPS_Enter(void)
;;;331    {
;;;332        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI0_EN_Msk;
;;;333        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI0_EN_Msk | SYSBLK_SLPCK_SPI0_EN_Msk);
;;;334    
;;;335        SPI0_StoreReg[0] = SPI0->CTRLR0;
;;;336        SPI0_StoreReg[1] = SPI0->CTRLR1;
;;;337        SPI0_StoreReg[2] = SPI0->SSIENR;
;;;338        SPI0_StoreReg[3] = SPI0->SER;
;;;339        SPI0_StoreReg[4] = SPI0->BAUDR;
;;;340        SPI0_StoreReg[5] = SPI0->TXFTLR;
;;;341        SPI0_StoreReg[6] = SPI0->RXFTLR;
;;;342        SPI0_StoreReg[7] = SPI0->IMR;
;;;343        SPI0_StoreReg[8] = SPI0->DMACR;
;;;344        SPI0_StoreReg[9] = SPI0->DMATDLR;
;;;345        SPI0_StoreReg[10] = SPI0->DMARDLR;
;;;346        SPI0_StoreReg[11] = SPI0->RX_SAMPLE_DLY;
;;;347        SPI0_StoreReg[12] = *(volatile uint32_t *)0x40000308;
;;;348    }
;;;349    
;;;350    /**
;;;351      * @brief  SPI0 exit dlps callback function(Resume SPI0 register values when system exit DLPS)
;;;352      * @param  None
;;;353      * @retval None
;;;354      */
;;;355    DATA_RAM_FUNCTION __STATIC_INLINE void SPI0_DLPS_Exit(void)
;;;356    {
;;;357        *(volatile uint32_t *)0x40000308 = SPI0_StoreReg[12];
;;;358        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI0_EN_Msk;
;;;359        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI0_EN_Msk | SYSBLK_SLPCK_SPI0_EN_Msk);
;;;360    
;;;361        SPI0->CTRLR0 = SPI0_StoreReg[0];
;;;362        SPI0->CTRLR1 = SPI0_StoreReg[1];
;;;363        SPI0->SER = SPI0_StoreReg[3];
;;;364        SPI0->BAUDR = SPI0_StoreReg[4];
;;;365        SPI0->TXFTLR = SPI0_StoreReg[5];
;;;366        SPI0->RXFTLR = SPI0_StoreReg[6];
;;;367        SPI0->IMR = SPI0_StoreReg[7];
;;;368        SPI0->DMACR = SPI0_StoreReg[8];
;;;369        SPI0->DMATDLR = SPI0_StoreReg[9];
;;;370        SPI0->DMARDLR = SPI0_StoreReg[10];
;;;371        SPI0->RX_SAMPLE_DLY = SPI0_StoreReg[11];
;;;372    
;;;373        /* Enable the selected SPI peripheral */
;;;374        SPI0->SSIENR = SPI0_StoreReg[2];
;;;375    }
;;;376    #endif
;;;377    
;;;378    
;;;379    /********************************************** ********************************************************/
;;;380    /**************************************** [SPI1 DLPS] **************************************************/
;;;381    /*******************************************************************************************************/
;;;382    /*******************************************************************************************************/
;;;383    #if USE_SPI1_DLPS
;;;384    __STATIC_INLINE void SPI1_DLPS_Enter(void);
;;;385    __STATIC_INLINE void SPI1_DLPS_Exit(void);
;;;386    
;;;387    uint32_t SPI1_StoreReg[13];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;388    
;;;389    /**
;;;390      * @brief  SPI1 enter dlps callback function(Save SPI1 register values when system enter DLPS)
;;;391      * @param  None
;;;392      * @retval None
;;;393      */
;;;394    __STATIC_INLINE void SPI1_DLPS_Enter(void)
;;;395    {
;;;396        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI1_EN_Msk;
;;;397        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI1_EN_Msk | SYSBLK_SLPCK_SPI1_EN_Msk);
;;;398    
;;;399        SPI1_StoreReg[0] = SPI1->CTRLR0;
;;;400        SPI1_StoreReg[1] = SPI1->CTRLR1;
;;;401        SPI1_StoreReg[2] = SPI1->SSIENR;
;;;402        SPI1_StoreReg[3] = SPI1->SER;
;;;403        SPI1_StoreReg[4] = SPI1->BAUDR;
;;;404        SPI1_StoreReg[5] = SPI1->TXFTLR;
;;;405        SPI1_StoreReg[6] = SPI1->RXFTLR;
;;;406        SPI1_StoreReg[7] = SPI1->IMR;
;;;407        SPI1_StoreReg[8] = SPI1->DMACR;
;;;408        SPI1_StoreReg[9] = SPI1->DMATDLR;
;;;409        SPI1_StoreReg[10] = SPI1->DMARDLR;
;;;410        SPI1_StoreReg[11] = SPI1->RX_SAMPLE_DLY;
;;;411        SPI1_StoreReg[12] = *(volatile uint32_t *)0x40000308;
;;;412    }
;;;413    
;;;414    /**
;;;415      * @brief  SPI1 exit dlps callback function(Resume SPI1 register values when system exit DLPS)
;;;416      * @param  None
;;;417      * @retval None
;;;418      */
;;;419    DATA_RAM_FUNCTION __STATIC_INLINE void SPI1_DLPS_Exit(void)
;;;420    {
;;;421        *(volatile uint32_t *)0x40000308 = SPI1_StoreReg[12];
;;;422        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI1_EN_Msk;
;;;423        SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_SPI1_EN_Msk | SYSBLK_SLPCK_SPI1_EN_Msk);
;;;424    
;;;425        SPI1->CTRLR0 = SPI1_StoreReg[0];
;;;426        SPI1->CTRLR1 = SPI1_StoreReg[1];
;;;427        SPI1->SER = SPI1_StoreReg[3];
;;;428        SPI1->BAUDR = SPI1_StoreReg[4];
;;;429        SPI1->TXFTLR = SPI1_StoreReg[5];
;;;430        SPI1->RXFTLR = SPI1_StoreReg[6];
;;;431        SPI1->IMR = SPI1_StoreReg[7];
;;;432        SPI1->DMACR = SPI1_StoreReg[8];
;;;433        SPI1->DMATDLR = SPI1_StoreReg[9];
;;;434        SPI1->DMARDLR = SPI1_StoreReg[10];
;;;435        SPI1->RX_SAMPLE_DLY = SPI1_StoreReg[11];
;;;436    
;;;437        /* Enable the selected SPI peripheral */
;;;438        SPI1->SSIENR = SPI1_StoreReg[2];
;;;439    }
;;;440    #endif
;;;441    
;;;442    /********************************************** ********************************************************/
;;;443    /**************************************** [SPI2W DLPS] **************************************************/
;;;444    /*******************************************************************************************************/
;;;445    /*******************************************************************************************************/
;;;446    #if USE_SPI2W_DLPS
;;;447    __STATIC_INLINE void SPI2W_DLPS_Enter(void);
;;;448    __STATIC_INLINE void SPI2W_DLPS_Exit(void);
;;;449    
;;;450    uint32_t SPI2W_StoreReg[1];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;451    
;;;452    /**
;;;453      * @brief  SPI2W enter dlps callback function(Save SPI2W register values when system enter DLPS)
;;;454      * @param  None
;;;455      * @retval None
;;;456      */
;;;457    __STATIC_INLINE void SPI2W_DLPS_Enter(void)
;;;458    {
;;;459        /*Open 20M clock source*/
;;;460        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;461        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;462    
;;;463        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI2W_EN_Msk;
;;;464        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_SPI2WIRE_EN_Msk | SYSBLK_SLPCK_SPI2WIRE_EN_Msk);
;;;465    
;;;466        SPI2W_StoreReg[0] = SPI3WIRE->CFGR;
;;;467    }
;;;468    
;;;469    /**
;;;470      * @brief  SPI2W exit dlps callback function(Resume SPI2W register values when system exit DLPS)
;;;471      * @param  None
;;;472      * @retval None
;;;473      */
;;;474    DATA_RAM_FUNCTION __STATIC_INLINE void SPI2W_DLPS_Exit(void)
;;;475    {
;;;476        /*Open 20M clock source*/
;;;477        SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;478        SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;479    
;;;480        SYSBLKCTRL->u_218.PERI_FUNC0_EN |=  SYSBLK_SPI2W_EN_Msk;
;;;481        SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_SPI2WIRE_EN_Msk | SYSBLK_SLPCK_SPI2WIRE_EN_Msk);
;;;482    
;;;483        SPI3WIRE->CFGR = SPI2W_StoreReg[0];
;;;484    }
;;;485    #endif
;;;486    
;;;487    /********************************************** ********************************************************/
;;;488    /**************************************** [I2C0 DLPS] **************************************************/
;;;489    /*******************************************************************************************************/
;;;490    /*******************************************************************************************************/
;;;491    #if USE_I2C0_DLPS
;;;492    __STATIC_INLINE void I2C0_DLPS_Enter(void);
;;;493    __STATIC_INLINE void I2C0_DLPS_Exit(void);
;;;494    
;;;495    uint32_t I2C0_StoreReg[20];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;496    
;;;497    /**
;;;498      * @brief  I2C0 enter dlps callback function(Save I2C0 register values when system enter DLPS)
;;;499      * @param  None
;;;500      * @retval None
;;;501      */
;;;502    __STATIC_INLINE void I2C0_DLPS_Enter(void)
;;;503    {
;;;504        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C0_EN_Msk | SYSBLK_SLPCK_I2C0_EN_Msk);
;;;505        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C0_EN_Msk;
;;;506    
;;;507        I2C0_StoreReg[0] = I2C0->IC_CON;
;;;508        I2C0_StoreReg[1] = I2C0->IC_TAR;
;;;509        I2C0_StoreReg[2] = I2C0->IC_SAR;
;;;510        I2C0_StoreReg[3] = I2C0->IC_HS_MADDR;
;;;511    
;;;512        I2C0_StoreReg[4] = I2C0->IC_SS_SCL_HCNT;
;;;513        I2C0_StoreReg[5] = I2C0->IC_SS_SCL_LCNT;
;;;514        I2C0_StoreReg[6] = I2C0->IC_FS_SCL_HCNT;
;;;515        I2C0_StoreReg[7] = I2C0->IC_FS_SCL_LCNT;
;;;516        I2C0_StoreReg[8] = I2C0->IC_HS_SCL_HCNT;
;;;517        I2C0_StoreReg[9] = I2C0->IC_HS_SCL_LCNT;
;;;518    
;;;519        I2C0_StoreReg[10] = I2C0->IC_INTR_MASK;
;;;520        I2C0_StoreReg[11] = I2C0->IC_RX_TL;
;;;521        I2C0_StoreReg[12] = I2C0->IC_TX_TL;
;;;522        I2C0_StoreReg[13] = I2C0->IC_ENABLE;
;;;523        I2C0_StoreReg[14] = I2C0->IC_SDA_HOLD;
;;;524        I2C0_StoreReg[15] = I2C0->IC_SLV_DATA_NACK_ONLY;
;;;525        I2C0_StoreReg[16] = I2C0->IC_DMA_CR;
;;;526        I2C0_StoreReg[17] = I2C0->IC_DMA_TDLR;
;;;527        I2C0_StoreReg[18] = I2C0->IC_DMA_RDLR;
;;;528    
;;;529        I2C0_StoreReg[19] = I2C0->IC_SDA_SETUP;
;;;530    }
;;;531    
;;;532    /**
;;;533      * @brief  I2C0 exit dlps callback function(Resume I2C0 register values when system exit DLPS)
;;;534      * @param  None
;;;535      * @retval None
;;;536      */
;;;537    DATA_RAM_FUNCTION __STATIC_INLINE void I2C0_DLPS_Exit(void)
;;;538    {
;;;539        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C0_EN_Msk | SYSBLK_SLPCK_I2C0_EN_Msk);
;;;540        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C0_EN_Msk;
;;;541    
;;;542        I2C0->IC_CON = I2C0_StoreReg[0];
;;;543        I2C0->IC_TAR = I2C0_StoreReg[1];
;;;544        I2C0->IC_SAR = I2C0_StoreReg[2];
;;;545        I2C0->IC_HS_MADDR = I2C0_StoreReg[3];
;;;546    
;;;547        I2C0->IC_SS_SCL_HCNT = I2C0_StoreReg[4];
;;;548        I2C0->IC_SS_SCL_LCNT = I2C0_StoreReg[5];
;;;549        I2C0->IC_FS_SCL_HCNT = I2C0_StoreReg[6];
;;;550        I2C0->IC_FS_SCL_LCNT = I2C0_StoreReg[7];
;;;551        I2C0->IC_HS_SCL_HCNT = I2C0_StoreReg[8];
;;;552        I2C0->IC_HS_SCL_LCNT = I2C0_StoreReg[9];
;;;553    
;;;554        I2C0->IC_INTR_MASK = I2C0_StoreReg[10];
;;;555        I2C0->IC_RX_TL = I2C0_StoreReg[11];
;;;556        I2C0->IC_TX_TL = I2C0_StoreReg[12];
;;;557        I2C0->IC_SDA_HOLD = I2C0_StoreReg[14];
;;;558        I2C0->IC_SLV_DATA_NACK_ONLY = I2C0_StoreReg[15];
;;;559        I2C0->IC_DMA_CR = I2C0_StoreReg[16];
;;;560        I2C0->IC_DMA_TDLR = I2C0_StoreReg[17];
;;;561        I2C0->IC_DMA_RDLR = I2C0_StoreReg[18];
;;;562        I2C0->IC_SDA_SETUP = I2C0_StoreReg[19];
;;;563    
;;;564        I2C0->IC_ENABLE = I2C0_StoreReg[13];
;;;565    }
;;;566    #endif
;;;567    
;;;568    /********************************************** ********************************************************/
;;;569    /**************************************** [I2C1 DLPS] **************************************************/
;;;570    /*******************************************************************************************************/
;;;571    /*******************************************************************************************************/
;;;572    #if USE_I2C1_DLPS
;;;573    __STATIC_INLINE void I2C1_DLPS_Enter(void);
;;;574    __STATIC_INLINE void I2C1_DLPS_Exit(void);
;;;575    
;;;576    uint32_t I2C1_StoreReg[20];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;577    
;;;578    /**
;;;579      * @brief  I2C1 enter dlps callback function(Save I2C1 register values when system enter DLPS)
;;;580      * @param  None
;;;581      * @retval None
;;;582      */
;;;583    __STATIC_INLINE void I2C1_DLPS_Enter(void)
;;;584    {
;;;585        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C1_EN_Msk | SYSBLK_SLPCK_I2C1_EN_Msk);
;;;586        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C1_EN_Msk;
;;;587    
;;;588        I2C1_StoreReg[0] = I2C1->IC_CON;
;;;589        I2C1_StoreReg[1] = I2C1->IC_TAR;
;;;590        I2C1_StoreReg[2] = I2C1->IC_SAR;
;;;591        I2C1_StoreReg[3] = I2C1->IC_HS_MADDR;
;;;592    
;;;593        I2C1_StoreReg[4] = I2C1->IC_SS_SCL_HCNT;
;;;594        I2C1_StoreReg[5] = I2C1->IC_SS_SCL_LCNT;
;;;595        I2C1_StoreReg[6] = I2C1->IC_FS_SCL_HCNT;
;;;596        I2C1_StoreReg[7] = I2C1->IC_FS_SCL_LCNT;
;;;597        I2C1_StoreReg[8] = I2C1->IC_HS_SCL_HCNT;
;;;598        I2C1_StoreReg[9] = I2C1->IC_HS_SCL_LCNT;
;;;599    
;;;600        I2C1_StoreReg[10] = I2C1->IC_INTR_MASK;
;;;601        I2C1_StoreReg[11] = I2C1->IC_RX_TL;
;;;602        I2C1_StoreReg[12] = I2C1->IC_TX_TL;
;;;603        I2C1_StoreReg[13] = I2C1->IC_ENABLE;
;;;604        I2C1_StoreReg[14] = I2C1->IC_SDA_HOLD;
;;;605        I2C1_StoreReg[15] = I2C1->IC_SLV_DATA_NACK_ONLY;
;;;606        I2C1_StoreReg[16] = I2C1->IC_DMA_CR;
;;;607        I2C1_StoreReg[17] = I2C1->IC_DMA_TDLR;
;;;608        I2C1_StoreReg[18] = I2C1->IC_DMA_RDLR;
;;;609    
;;;610        I2C1_StoreReg[19] = I2C1->IC_SDA_SETUP;
;;;611    }
;;;612    
;;;613    /**
;;;614      * @brief  I2C1 exit dlps callback function(Resume I2C1 register values when system exit DLPS)
;;;615      * @param  None
;;;616      * @retval None
;;;617      */
;;;618    DATA_RAM_FUNCTION __STATIC_INLINE void I2C1_DLPS_Exit(void)
;;;619    {
;;;620        PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_I2C1_EN_Msk | SYSBLK_SLPCK_I2C1_EN_Msk);
;;;621        PERIPH->PERI_FUNC0_EN |= SYSBLK_I2C1_EN_Msk;
;;;622    
;;;623        I2C1->IC_CON = I2C1_StoreReg[0];
;;;624        I2C1->IC_TAR = I2C1_StoreReg[1];
;;;625        I2C1->IC_SAR = I2C1_StoreReg[2];
;;;626        I2C0->IC_HS_MADDR = I2C1_StoreReg[3];
;;;627    
;;;628        I2C1->IC_SS_SCL_HCNT = I2C1_StoreReg[4];
;;;629        I2C1->IC_SS_SCL_LCNT = I2C1_StoreReg[5];
;;;630        I2C1->IC_FS_SCL_HCNT = I2C1_StoreReg[6];
;;;631        I2C1->IC_FS_SCL_LCNT = I2C1_StoreReg[7];
;;;632        I2C1->IC_HS_SCL_HCNT = I2C1_StoreReg[8];
;;;633        I2C1->IC_HS_SCL_LCNT = I2C1_StoreReg[9];
;;;634    
;;;635        I2C1->IC_INTR_MASK = I2C1_StoreReg[10];
;;;636        I2C1->IC_RX_TL = I2C1_StoreReg[11];
;;;637        I2C1->IC_TX_TL = I2C1_StoreReg[12];
;;;638        I2C1->IC_SDA_HOLD = I2C1_StoreReg[14];
;;;639        I2C1->IC_SLV_DATA_NACK_ONLY = I2C1_StoreReg[15];
;;;640        I2C1->IC_DMA_CR = I2C1_StoreReg[16];
;;;641        I2C1->IC_DMA_TDLR = I2C1_StoreReg[17];
;;;642        I2C1->IC_DMA_RDLR = I2C1_StoreReg[18];
;;;643        I2C1->IC_SDA_SETUP = I2C1_StoreReg[19];
;;;644    
;;;645        I2C1->IC_ENABLE = I2C1_StoreReg[13];
;;;646    }
;;;647    #endif
;;;648    
;;;649    /********************************************** ********************************************************/
;;;650    /**************************************** [Timer & PWM DLPS] *******************************************/
;;;651    /*******************************************************************************************************/
;;;652    /*******************************************************************************************************/
;;;653    #if USE_TIM_DLPS
;;;654    #include "rtl876x_tim.h"
;;;655    __STATIC_INLINE void TIM_DLPS_Enter(void);
;;;656    __STATIC_INLINE void TIM_DLPS_Exit(void);
;;;657    
;;;658    uint32_t TIM_StoreReg[26];      /*  This array should be placed in RAM ON/Buffer ON.    */
;;;659    
;;;660    /* PWM, use with timer */
;;;661    uint32_t PWM0_StoreReg;         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;662    
;;;663    uint32_t PWM1_StoreReg;         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;664    
;;;665    /**
;;;666      * @brief  TIMER enter dlps callback function(Save TIMER register values when system enter DLPS)
;;;667      * @param  None
;;;668      * @retval None
;;;669      */
;;;670    __STATIC_INLINE void TIM_DLPS_Enter(void)
;;;671    {
;;;672        SYSBLKCTRL->u_210.SOC_FUNC_EN |= BIT(16);
;;;673        SYSBLKCTRL->u_230.CLK_CTRL |= (SYSBLK_ACTCK_TIMER_EN_Msk | SYSBLK_SLPCK_TIMER_EN_Msk);
;;;674    
;;;675        TIM_StoreReg[0] = TIM0->LoadCount;
;;;676        TIM_StoreReg[1] = TIM0->ControlReg;
;;;677        TIM_StoreReg[2] = TIMER0_LOAD_COUNT2;
;;;678    
;;;679        TIM_StoreReg[3] = TIM1->LoadCount;
;;;680        TIM_StoreReg[4] = TIM1->ControlReg;
;;;681        TIM_StoreReg[5] = TIMER1_LOAD_COUNT2;
;;;682    
;;;683        TIM_StoreReg[6] = TIM2->LoadCount;
;;;684        TIM_StoreReg[7] = TIM2->ControlReg;
;;;685        TIM_StoreReg[8] = TIMER2_LOAD_COUNT2;
;;;686    
;;;687        TIM_StoreReg[9] = TIM3->LoadCount;
;;;688        TIM_StoreReg[10] = TIM3->ControlReg;
;;;689        TIM_StoreReg[11] = TIMER3_LOAD_COUNT2;
;;;690    
;;;691        TIM_StoreReg[12] = TIM4->LoadCount;
;;;692        TIM_StoreReg[13] = TIM4->ControlReg;
;;;693        TIM_StoreReg[14] = TIMER4_LOAD_COUNT2;
;;;694    
;;;695        TIM_StoreReg[15] = TIM5->LoadCount;
;;;696        TIM_StoreReg[16] = TIM5->ControlReg;
;;;697        TIM_StoreReg[17] = TIMER5_LOAD_COUNT2;
;;;698    
;;;699        TIM_StoreReg[18] = TIM6->LoadCount;
;;;700        TIM_StoreReg[19] = TIM6->ControlReg;
;;;701        TIM_StoreReg[20] = TIMER6_LOAD_COUNT2;
;;;702    
;;;703        TIM_StoreReg[21] = TIM7->LoadCount;
;;;704        TIM_StoreReg[22] = TIM7->ControlReg;
;;;705        TIM_StoreReg[23] = TIMER7_LOAD_COUNT2;
;;;706    
;;;707        TIM_StoreReg[24] = *((volatile uint32_t *)0x4000035CUL);
;;;708        TIM_StoreReg[25] = *((volatile uint32_t *)0x40000360UL);
;;;709    
;;;710        PWM0_StoreReg = TIMER_PWM0_CR;
;;;711    
;;;712        PWM1_StoreReg = TIMER_PWM1_CR;
;;;713    }
;;;714    
;;;715    /**
;;;716      * @brief  TIMER exit dlps callback function(Resume TIMER register values when system exit DLPS)
;;;717      * @param  None
;;;718      * @retval None
;;;719      */
;;;720    DATA_RAM_FUNCTION __STATIC_INLINE void TIM_DLPS_Exit(void)
;;;721    {
;;;722        /* Enable timer IP clock and function */
;;;723        SYSBLKCTRL->u_210.SOC_FUNC_EN |= BIT(16);
;;;724        SYSBLKCTRL->u_230.CLK_CTRL |= (SYSBLK_ACTCK_TIMER_EN_Msk | SYSBLK_SLPCK_TIMER_EN_Msk);
;;;725    
;;;726        *((volatile uint32_t *)0x4000035CUL) = TIM_StoreReg[24];
;;;727        *((volatile uint32_t *)0x40000360UL) = TIM_StoreReg[25];
;;;728    
;;;729        TIM0->LoadCount = TIM_StoreReg[0];
;;;730        TIM0->ControlReg = TIM_StoreReg[1];
;;;731        TIMER0_LOAD_COUNT2 = TIM_StoreReg[2];
;;;732    
;;;733        TIM1->LoadCount = TIM_StoreReg[3];
;;;734        TIM1->ControlReg = TIM_StoreReg[4];
;;;735        TIMER1_LOAD_COUNT2 = TIM_StoreReg[5];
;;;736    
;;;737        TIM2->LoadCount = TIM_StoreReg[6];
;;;738        TIM2->ControlReg = TIM_StoreReg[7];
;;;739        TIMER2_LOAD_COUNT2 = TIM_StoreReg[8];
;;;740    
;;;741        TIM3->LoadCount = TIM_StoreReg[9];
;;;742        TIM3->ControlReg = TIM_StoreReg[10];
;;;743        TIMER3_LOAD_COUNT2 = TIM_StoreReg[11];
;;;744    
;;;745        TIM4->LoadCount = TIM_StoreReg[12];
;;;746        TIM4->ControlReg = TIM_StoreReg[13];
;;;747        TIMER4_LOAD_COUNT2 = TIM_StoreReg[14];
;;;748    
;;;749        TIM5->LoadCount = TIM_StoreReg[15];
;;;750        TIM5->ControlReg = TIM_StoreReg[16];
;;;751        TIMER5_LOAD_COUNT2 = TIM_StoreReg[17];
;;;752    
;;;753        TIM6->LoadCount = TIM_StoreReg[18];
;;;754        TIM6->ControlReg = TIM_StoreReg[19];
;;;755        TIMER6_LOAD_COUNT2 = TIM_StoreReg[20];
;;;756    
;;;757        TIM7->LoadCount = TIM_StoreReg[21];
;;;758        TIM7->ControlReg = TIM_StoreReg[22];
;;;759        TIMER7_LOAD_COUNT2 = TIM_StoreReg[23];
;;;760    
;;;761        TIMER_PWM0_CR = PWM0_StoreReg;
;;;762    
;;;763        TIMER_PWM1_CR = PWM1_StoreReg;
;;;764    }
;;;765    #endif  /* USE_TIM_DLPS */
;;;766    
;;;767    
;;;768    /********************************************** ********************************************************/
;;;769    /**************************************** [UART DLPS] **************************************************/
;;;770    /*******************************************************************************************************/
;;;771    /*******************************************************************************************************/
;;;772    #if USE_UART_DLPS
;;;773    #include "rtl876x_uart.h"
;;;774    
;;;775    __STATIC_INLINE void UART_DLPS_Enter(void);
;;;776    __STATIC_INLINE void UART_DLPS_Exit(void);
;;;777    
;;;778    uint32_t UART_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;779    
;;;780    /**
;;;781      * @brief  UART enter dlps callback function(Save UART register values when system enter DLPS)
;;;782      * @param  None
;;;783      * @retval None
;;;784      */
;;;785    __STATIC_INLINE void UART_DLPS_Enter(void)
;;;786    {
;;;787        PERIPH->PERI_FUNC0_EN |= (1 << 0);
;;;788        PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_UART0DATA_EN_Msk | SYSBLK_SLPCK_UART0DATA_EN_Msk);
;;;789    
;;;790        //access DLH and DLL
;;;791        UART->LCR |= (1 << 7);
;;;792        UART_StoreReg[0] = UART->DLL;
;;;793        UART_StoreReg[1] = UART->DLH_INTCR;
;;;794        UART->LCR &= (~(1 << 7));
;;;795    
;;;796        //save other registers
;;;797        UART_StoreReg[2] = UART->DLH_INTCR;
;;;798        UART_StoreReg[4] = UART->LCR;
;;;799        UART_StoreReg[5] = UART->MCR;
;;;800        UART_StoreReg[6] = UART->SPR;
;;;801        UART_StoreReg[7] = UART->STSR;
;;;802        UART_StoreReg[8] = UART->RX_IDLE_INTTCR;
;;;803        UART_StoreReg[9] = UART->RXIDLE_INTCR;
;;;804        UART_StoreReg[10] = UART->MISCR;
;;;805    
;;;806        return;
;;;807    }
;;;808    
;;;809    /**
;;;810      * @brief  UART exit dlps callback function(Resume UART register values when system exit DLPS)
;;;811      * @param  None
;;;812      * @retval None
;;;813      */
;;;814    DATA_RAM_FUNCTION __STATIC_INLINE void UART_DLPS_Exit(void)
;;;815    {
;;;816        PERIPH->PERI_FUNC0_EN |= (1 << 0);
;;;817        PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_UART0DATA_EN_Msk | SYSBLK_SLPCK_UART0DATA_EN_Msk);
;;;818    
;;;819        //access DLH and DLL
;;;820        UART->LCR |= (1 << 7);
;;;821        UART->DLL = UART_StoreReg[0];
;;;822        UART->DLH_INTCR =  UART_StoreReg[1];
;;;823        UART->LCR &= (~(1 << 7));
;;;824    
;;;825        //access other registers
;;;826        UART->INTID_FCR = (((UART_StoreReg[7] & BIT24) >> 21) | ((UART_StoreReg[7] & 0x7C000000) >> 18) |
;;;827                           (1));
;;;828        UART->LCR = UART_StoreReg[4];
;;;829        UART->MCR = UART_StoreReg[5];
;;;830        UART->SPR = UART_StoreReg[6];
;;;831        UART->STSR = UART_StoreReg[7];
;;;832        UART->DLH_INTCR = UART_StoreReg[2];
;;;833        UART->RX_IDLE_INTTCR = UART_StoreReg[8];
;;;834        UART->RXIDLE_INTCR = UART_StoreReg[9];
;;;835        UART->MISCR = UART_StoreReg[10];
;;;836    
;;;837        return;
;;;838    }
;;;839    #endif
;;;840    
;;;841    
;;;842    #if USE_UART1_DLPS
;;;843    
;;;844    __STATIC_INLINE void UART1_DLPS_Enter(void);
;;;845    __STATIC_INLINE void UART1_DLPS_Exit(void);
;;;846    
;;;847    uint32_t UART1_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;848    
;;;849    /**
;;;850      * @brief  UART1 enter dlps callback function(Save UART1 register values when system enter DLPS)
;;;851      * @param  None
;;;852      * @retval None
;;;853      */
;;;854    __STATIC_INLINE void UART1_DLPS_Enter(void)
;;;855    {
;;;856        //enable log uart peripheral & clock
;;;857        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;858        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;859    
;;;860        //access DLH and DLL
;;;861        UART1->LCR |= (1 << 7);
;;;862        UART1_StoreReg[0] = UART1->DLL;
;;;863        UART1_StoreReg[1] = UART1->DLH_INTCR;
;;;864        UART1->LCR &= (~(1 << 7));
;;;865    
;;;866        //save other registers
;;;867        UART1_StoreReg[2] = UART1->DLH_INTCR;
;;;868        UART1_StoreReg[4] = UART1->LCR;
;;;869        UART1_StoreReg[5] = UART1->MCR;
;;;870        UART1_StoreReg[6] = UART1->SPR;
;;;871        UART1_StoreReg[7] = UART1->STSR;
;;;872        UART1_StoreReg[8] = UART1->RX_IDLE_INTTCR;
;;;873        UART1_StoreReg[9] = UART1->RXIDLE_INTCR;
;;;874        UART1_StoreReg[10] = UART1->MISCR;
;;;875    
;;;876        return;
;;;877    }
;;;878    
;;;879    /**
;;;880      * @brief  UART1 exit dlps callback function(Resume UART1 register values when system exit DLPS)
;;;881      * @param  None
;;;882      * @retval None
;;;883      */
;;;884    DATA_RAM_FUNCTION __STATIC_INLINE void UART1_DLPS_Exit(void)
;;;885    {
;;;886        //enable log uart peripheral & clock
;;;887        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;888        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;889    
;;;890        //access DLH and DLL
;;;891        UART1->LCR |= (1 << 7);
;;;892        UART1->DLL = UART1_StoreReg[0];
;;;893        UART1->DLH_INTCR =  UART1_StoreReg[1];
;;;894        UART1->LCR &= (~(1 << 7));
;;;895    
;;;896        //access other registers
;;;897        UART1->INTID_FCR = (((UART1_StoreReg[7] & BIT24) >> 21) | ((UART1_StoreReg[7] & 0x7C000000)
;;;898                                                                   >> 18) | (1));
;;;899        UART1->LCR = UART1_StoreReg[4];
;;;900        UART1->MCR = UART1_StoreReg[5];
;;;901        UART1->SPR = UART1_StoreReg[6];
;;;902        UART1->STSR = UART1_StoreReg[7];
;;;903        UART1->DLH_INTCR = UART1_StoreReg[2];
;;;904        UART1->RX_IDLE_INTTCR = UART1_StoreReg[8];
;;;905        UART1->RXIDLE_INTCR = UART1_StoreReg[9];
;;;906        UART1->MISCR = UART1_StoreReg[10];
;;;907    
;;;908        return;
;;;909    }
;;;910    #endif
;;;911    
;;;912    #if USE_UART2_DLPS
;;;913    
;;;914    __STATIC_INLINE void UART2_DLPS_Enter(void);
;;;915    __STATIC_INLINE void UART2_DLPS_Exit(void);
;;;916    
;;;917    uint32_t UART2_StoreReg[11];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;918    
;;;919    /**
;;;920      * @brief  UART2 enter dlps callback function(Save UART2 register values when system enter DLPS)
;;;921      * @param  None
;;;922      * @retval None
;;;923      */
;;;924    __STATIC_INLINE void UART2_DLPS_Enter(void)
;;;925    {
;;;926        //enable log uart peripheral & clock
;;;927        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;928        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;929    
;;;930        //access DLH and DLL
;;;931        UART2->LCR |= (1 << 7);
;;;932        UART2_StoreReg[0] = UART2->DLL;
;;;933        UART2_StoreReg[1] = UART2->DLH_INTCR;
;;;934        UART2->LCR &= (~(1 << 7));
;;;935    
;;;936        //save other registers
;;;937        UART2_StoreReg[2] = UART2->DLH_INTCR;
;;;938        UART2_StoreReg[4] = UART2->LCR;
;;;939        UART2_StoreReg[5] = UART2->MCR;
;;;940        UART2_StoreReg[6] = UART2->SPR;
;;;941        UART2_StoreReg[7] = UART2->STSR;
;;;942        UART2_StoreReg[8] = UART2->RX_IDLE_INTTCR;
;;;943        UART2_StoreReg[9] = UART2->RXIDLE_INTCR;
;;;944        UART2_StoreReg[10] = UART2->MISCR;
;;;945    
;;;946        return;
;;;947    }
;;;948    
;;;949    /**
;;;950      * @brief  UART2 exit dlps callback function(Resume UART2 register values when system exit DLPS)
;;;951      * @param  None
;;;952      * @retval None
;;;953      */
;;;954    DATA_RAM_FUNCTION __STATIC_INLINE void UART2_DLPS_Exit(void)
;;;955    {
;;;956        //enable log uart peripheral & clock
;;;957        SYSBLKCTRL->u_210.SOC_FUNC_EN |= (1 << 12);
;;;958        SYSBLKCTRL->u_230.CLK_CTRL |= ((1 << 12) | (1 << 13));
;;;959    
;;;960        //access DLH and DLL
;;;961        UART2->LCR |= (1 << 7);
;;;962        UART2->DLL = UART2_StoreReg[0];
;;;963        UART2->DLH_INTCR =  UART2_StoreReg[1];
;;;964        UART2->LCR &= (~(1 << 7));
;;;965    
;;;966        //access other registers
;;;967        UART2->INTID_FCR = (((UART2_StoreReg[7] & BIT24) >> 21) | ((UART2_StoreReg[7] & 0x7C000000)
;;;968                                                                   >> 18) | (1));
;;;969        UART2->LCR = UART2_StoreReg[4];
;;;970        UART2->MCR = UART2_StoreReg[5];
;;;971        UART2->SPR = UART2_StoreReg[6];
;;;972        UART2->STSR = UART2_StoreReg[7];
;;;973        UART2->DLH_INTCR = UART2_StoreReg[2];
;;;974        UART2->RX_IDLE_INTTCR = UART2_StoreReg[8];
;;;975        UART2->RXIDLE_INTCR = UART2_StoreReg[9];
;;;976        UART2->MISCR = UART2_StoreReg[10];
;;;977    
;;;978        return;
;;;979    }
;;;980    #endif
;;;981    
;;;982    
;;;983    /********************************************** ********************************************************/
;;;984    /**************************************** [ADC DLPS] **************************************************/
;;;985    /*******************************************************************************************************/
;;;986    /*******************************************************************************************************/
;;;987    
;;;988    #if USE_ADC_DLPS
;;;989    __STATIC_INLINE void ADC_DLPS_Enter(void);
;;;990    __STATIC_INLINE void ADC_DLPS_Exit(void);
;;;991    
;;;992    uint32_t ADC_StoreReg[14];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;993    
;;;994    /**
;;;995      * @brief  ADC enter dlps callback function(Save ADC register values when system enter DLPS)
;;;996      * @param  None
;;;997      * @retval None
;;;998      */
;;;999    __STATIC_INLINE void ADC_DLPS_Enter(void)
;;;1000   {
;;;1001       /*Open 10M clock source*/
;;;1002       SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;1003       SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
;;;1004   
;;;1005       PERIPH->PERI_FUNC1_EN |= (1 << 0);
;;;1006       PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_ADC_EN_Msk | SYSBLK_SLPCK_ADC_EN_Msk);
;;;1007   
;;;1008       ADC_StoreReg[0] =  ADC->CR;          //0x04
;;;1009       ADC_StoreReg[1] =  ADC->SCHCR;       //0x08
;;;1010       ADC_StoreReg[2] =  ADC->INTCR;       //0x0C
;;;1011       ADC_StoreReg[3] =  ADC->SCHTAB0;     //0x10
;;;1012       ADC_StoreReg[4] =  ADC->SCHTAB1;     //0x14
;;;1013       ADC_StoreReg[5] =  ADC->SCHTAB2;     //0x18
;;;1014       ADC_StoreReg[6] =  ADC->SCHTAB3;     //0x1C
;;;1015       ADC_StoreReg[7] =  ADC->SCHTAB4;     //0x20
;;;1016       ADC_StoreReg[8] =  ADC->SCHTAB5;     //0x24
;;;1017       ADC_StoreReg[9] =  ADC->SCHTAB6;     //0x28
;;;1018       ADC_StoreReg[10] =  ADC->SCHTAB6;    //0x2C
;;;1019       ADC_StoreReg[11] =  ADC->PWRDLY;
;;;1020       ADC_StoreReg[12] =  ADC->DATCLK;
;;;1021       ADC_StoreReg[13] =  ADC->ANACTL;
;;;1022   
;;;1023       uint8_t reg_value = 0;
;;;1024       reg_value = btaon_fast_read_safe(0x110);
;;;1025       btaon_fast_write(0x110, reg_value & (~0x04));
;;;1026   
;;;1027       return;
;;;1028   }
;;;1029   
;;;1030   /**
;;;1031     * @brief  ADC exit dlps callback function(Resume ADC register values when system exit DLPS)
;;;1032     * @param  None
;;;1033     * @retval None
;;;1034     */
;;;1035   DATA_RAM_FUNCTION __STATIC_INLINE void ADC_DLPS_Exit(void)
;;;1036   {
;;;1037       /*Open 10M clock source*/
;;;1038       SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;1039       SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
;;;1040   
;;;1041       PERIPH->PERI_FUNC1_EN |= (1 << 0);
;;;1042       PERIPH->PERI_CLK_CTRL1 |= (SYSBLK_ACTCK_ADC_EN_Msk | SYSBLK_SLPCK_ADC_EN_Msk);
;;;1043   
;;;1044   #if 0
;;;1045       //Todo
;;;1046       ADC->PWRDLY = ADC_StoreReg[10];
;;;1047       ADC->CR = (ADC_StoreReg[0] & (~((uint32_t)0x03)));
;;;1048       ADC->SCHTAB0 = ADC_StoreReg[3];
;;;1049       ADC->SCHTAB1 = ADC_StoreReg[4];
;;;1050       ADC->SCHTAB2 = ADC_StoreReg[5];
;;;1051       ADC->SCHTAB3 = ADC_StoreReg[6];
;;;1052       ADC->SCHTAB4 = ADC_StoreReg[7];
;;;1053       ADC->SCHTAB5 = ADC_StoreReg[8];
;;;1054       ADC->SCHTAB6 = ADC_StoreReg[9];
;;;1055       ADC->SCHCR = ADC_StoreReg[1];
;;;1056       ADC->INTCR = (ADC_StoreReg[2] & 0x1F);
;;;1057   #else
;;;1058       /*Disable all interrupt.*/
;;;1059       ADC->INTCR &= (~0x1f);
;;;1060   
;;;1061       /* Set power mode first */
;;;1062       ADC->PWRDLY = ADC_StoreReg[11];
;;;1063   
;;;1064       /* Disable schedule table */
;;;1065       ADC->SCHCR &= (~0xffff);
;;;1066   
;;;1067       ADC->SCHTAB0 = ADC_StoreReg[3];
;;;1068       ADC->SCHTAB1 = ADC_StoreReg[4];
;;;1069       ADC->SCHTAB2 = ADC_StoreReg[5];
;;;1070       ADC->SCHTAB3 = ADC_StoreReg[6];
;;;1071       ADC->SCHTAB4 = ADC_StoreReg[7];
;;;1072       ADC->SCHTAB5 = ADC_StoreReg[8];
;;;1073       ADC->SCHTAB6 = ADC_StoreReg[9];
;;;1074       ADC->SCHTAB7 = ADC_StoreReg[10];
;;;1075       ADC->SCHCR   = ADC_StoreReg[1];
;;;1076       ADC->CR = (ADC_StoreReg[0] & (~((uint32_t)0x03)));
;;;1077       ADC->DATCLK = ADC_StoreReg[12];
;;;1078       ADC->ANACTL = ADC_StoreReg[13];
;;;1079   
;;;1080       /*Clear ADC FIFO */
;;;1081       ADC->CR |= BIT26;
;;;1082       /* Clear all interrupt */
;;;1083       ADC->INTCR |= (0x1f << 8);
;;;1084   
;;;1085       /* Restore specify interrupt */
;;;1086       ADC->INTCR = ADC_StoreReg[2];
;;;1087   
;;;1088   #endif
;;;1089   
;;;1090       uint8_t reg_value = 0;
;;;1091       reg_value = btaon_fast_read_safe(0x110);
;;;1092       btaon_fast_write(0x110, reg_value | 0x04);
;;;1093   
;;;1094       return;
;;;1095   }
;;;1096   
;;;1097   #endif
;;;1098   
;;;1099   /********************************************** ********************************************************/
;;;1100   /**************************************** [IR DLPS] **************************************************/
;;;1101   /*******************************************************************************************************/
;;;1102   /*******************************************************************************************************/
;;;1103   
;;;1104   #if USE_IR_DLPS
;;;1105   __STATIC_INLINE void IR_DLPS_Enter(void);
;;;1106   __STATIC_INLINE void IR_DLPS_Exit(void);
;;;1107   
;;;1108   uint32_t IR_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1109   
;;;1110   /**
;;;1111     * @brief  IR enter dlps callback function(Save IR register values when system enter DLPS)
;;;1112     * @param  None
;;;1113     * @retval None
;;;1114     */
;;;1115   __STATIC_INLINE void IR_DLPS_Enter(void)
;;;1116   {
;;;1117       PERIPH->PERI_FUNC0_EN |= (1 << 10);
;;;1118       PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_IR_EN_Msk | SYSBLK_SLPCK_IR_EN_Msk);
;;;1119   
;;;1120       IR_StoreReg[0] = IR->CLK_DIV;
;;;1121       IR_StoreReg[1] = IR->TX_CONFIG;
;;;1122       IR_StoreReg[2] = IR->RX_CONFIG;
;;;1123       IR_StoreReg[3] = IR->RX_CNT_INT_SEL;
;;;1124   
;;;1125   
;;;1126       return;
;;;1127   }
;;;1128   
;;;1129   /**
;;;1130     * @brief  IR exit dlps callback function(Resume IR register values when system exit DLPS)
;;;1131     * @param  None
;;;1132     * @retval None
;;;1133     */
;;;1134   DATA_RAM_FUNCTION __STATIC_INLINE void IR_DLPS_Exit(void)
;;;1135   {
;;;1136       PERIPH->PERI_FUNC0_EN |= (1 << 10);
;;;1137       PERIPH->PERI_CLK_CTRL0 |= (SYSBLK_ACTCK_IR_EN_Msk | SYSBLK_SLPCK_IR_EN_Msk);
;;;1138   
;;;1139       IR->CLK_DIV = IR_StoreReg[0];
;;;1140       if (IR_StoreReg[1] & BIT31)
;;;1141       {
;;;1142           /* RX MODE */
;;;1143           IR->TX_CONFIG  = IR_StoreReg[1];
;;;1144           IR->RX_CONFIG  = IR_StoreReg[2];
;;;1145           IR->RX_CNT_INT_SEL  = IR_StoreReg[3];
;;;1146       }
;;;1147       else
;;;1148       {
;;;1149           /* TX MODE */
;;;1150           IR->TX_CONFIG  = IR_StoreReg[1];
;;;1151           /* If IR TX mode is idle, must write one data firstly */
;;;1152           IR->TX_FIFO = 0;
;;;1153       }
;;;1154   
;;;1155       return;
;;;1156   }
;;;1157   
;;;1158   #endif
;;;1159   
;;;1160   /********************************************** ********************************************************/
;;;1161   /**************************************** [GDMA DLPS] **************************************************/
;;;1162   /*******************************************************************************************************/
;;;1163   /*******************************************************************************************************/
;;;1164   
;;;1165   #if USE_GDMA_DLPS
;;;1166   
;;;1167   __STATIC_INLINE void GDMA_DLPS_Enter(void);
;;;1168   __STATIC_INLINE void GDMA_DLPS_Exit(void);
;;;1169   uint32_t GDMA_StoreReg[7];         /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1170   
;;;1171   #endif
;;;1172   
;;;1173   #if USE_GDMACHANNEL0_DLPS
;;;1174   uint32_t GDMAChannel0_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1175   #endif
;;;1176   
;;;1177   #if USE_GDMACHANNEL1_DLPS
;;;1178   uint32_t GDMAChannel1_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1179   #endif
;;;1180   
;;;1181   #if USE_GDMACHANNEL2_DLPS
;;;1182   uint32_t GDMAChannel2_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1183   #endif
;;;1184   
;;;1185   #if USE_GDMACHANNEL3_DLPS
;;;1186   uint32_t GDMAChannel3_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1187   #endif
;;;1188   
;;;1189   #if USE_GDMACHANNEL4_DLPS
;;;1190   uint32_t GDMAChannel4_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1191   #endif
;;;1192   
;;;1193   #if USE_GDMACHANNEL5_DLPS
;;;1194   uint32_t GDMAChannel5_StoreReg[6];        /*  This array should be placed in RAM ON/Buffer ON.    */
;;;1195   #endif
;;;1196   
;;;1197   #if USE_GDMA_DLPS
;;;1198   /**
;;;1199     * @brief  GDMA enter dlps callback function(Save GDMA register values when system enter DLPS)
;;;1200     * @param  None
;;;1201     * @retval None
;;;1202     */
;;;1203   __STATIC_INLINE void GDMA_DLPS_Enter(void)
;;;1204   {
;;;1205       SYSBLKCTRL->u_210.SOC_FUNC_EN |= SYSBLK_GDMA0_EN_Msk;
;;;1206       PERIPH->PERI_CLK_CTRL |= (SYSBLK_ACTCK_GDMA0_EN_Msk | SYSBLK_SLPCK_GDMA0_EN_Msk);
;;;1207   
;;;1208       GDMA_StoreReg[0] = GDMA_BASE->DmaCfgReg;
;;;1209       GDMA_StoreReg[1] = GDMA_BASE->ChEnReg;
;;;1210       GDMA_StoreReg[2] = GDMA_BASE->MASK_TFR;
;;;1211       GDMA_StoreReg[3] = GDMA_BASE->MASK_BLOCK;
;;;1212       GDMA_StoreReg[4] = GDMA_BASE->MASK_SRC_TRAN;
;;;1213       GDMA_StoreReg[5] = GDMA_BASE->MASK_DST_TRAN;
;;;1214       GDMA_StoreReg[6] = GDMA_BASE->MASK_ERR;
;;;1215   
;;;1216   #if USE_GDMACHANNEL0_DLPS
;;;1217       GDMAChannel0_StoreReg[0] = GDMA_Channel0->SAR;
;;;1218       GDMAChannel0_StoreReg[1] = GDMA_Channel0->DAR;
;;;1219       GDMAChannel0_StoreReg[2] = GDMA_Channel0->CTL_LOW;
;;;1220       GDMAChannel0_StoreReg[3] = GDMA_Channel0->CTL_HIGH;
;;;1221       GDMAChannel0_StoreReg[4] = GDMA_Channel0->CFG_LOW;
;;;1222       GDMAChannel0_StoreReg[5] = GDMA_Channel0->CFG_HIGH;
;;;1223   #endif
;;;1224   #if USE_GDMACHANNEL1_DLPS
;;;1225       GDMAChannel1_StoreReg[0] = GDMA_Channel1->SAR;
;;;1226       GDMAChannel1_StoreReg[1] = GDMA_Channel1->DAR;
;;;1227       GDMAChannel1_StoreReg[2] = GDMA_Channel1->CTL_LOW;
;;;1228       GDMAChannel1_StoreReg[3] = GDMA_Channel1->CTL_HIGH;
;;;1229       GDMAChannel1_StoreReg[4] = GDMA_Channel1->CFG_LOW;
;;;1230       GDMAChannel1_StoreReg[5] = GDMA_Channel1->CFG_HIGH;
;;;1231   #endif
;;;1232   #if USE_GDMACHANNEL2_DLPS
;;;1233       GDMAChannel2_StoreReg[0] = GDMA_Channel2->SAR;
;;;1234       GDMAChannel2_StoreReg[1] = GDMA_Channel2->DAR;
;;;1235       GDMAChannel2_StoreReg[2] = GDMA_Channel2->CTL_LOW;
;;;1236       GDMAChannel2_StoreReg[3] = GDMA_Channel2->CTL_HIGH;
;;;1237       GDMAChannel2_StoreReg[4] = GDMA_Channel2->CFG_LOW;
;;;1238       GDMAChannel2_StoreReg[5] = GDMA_Channel2->CFG_HIGH;
;;;1239   #endif
;;;1240   #if USE_GDMACHANNEL3_DLPS
;;;1241       GDMAChannel3_StoreReg[0] = GDMA_Channel3->SAR;
;;;1242       GDMAChannel3_StoreReg[1] = GDMA_Channel3->DAR;
;;;1243       GDMAChannel3_StoreReg[2] = GDMA_Channel3->CTL_LOW;
;;;1244       GDMAChannel3_StoreReg[3] = GDMA_Channel3->CTL_HIGH;
;;;1245       GDMAChannel3_StoreReg[4] = GDMA_Channel3->CFG_LOW;
;;;1246       GDMAChannel3_StoreReg[5] = GDMA_Channel3->CFG_HIGH;
;;;1247   #endif
;;;1248   #if USE_GDMACHANNEL4_DLPS
;;;1249       GDMAChannel4_StoreReg[0] = GDMA_Channel4->SAR;
;;;1250       GDMAChannel4_StoreReg[1] = GDMA_Channel4->DAR;
;;;1251       GDMAChannel4_StoreReg[2] = GDMA_Channel4->CTL_LOW;
;;;1252       GDMAChannel4_StoreReg[3] = GDMA_Channel4->CTL_HIGH;
;;;1253       GDMAChannel4_StoreReg[4] = GDMA_Channel4->CFG_LOW;
;;;1254       GDMAChannel4_StoreReg[5] = GDMA_Channel4->CFG_HIGH;
;;;1255   #endif
;;;1256   #if USE_GDMACHANNEL5_DLPS
;;;1257       GDMAChannel5_StoreReg[0] = GDMA_Channel5->SAR;
;;;1258       GDMAChannel5_StoreReg[1] = GDMA_Channel5->DAR;
;;;1259       GDMAChannel5_StoreReg[2] = GDMA_Channel5->CTL_LOW;
;;;1260       GDMAChannel5_StoreReg[3] = GDMA_Channel5->CTL_HIGH;
;;;1261       GDMAChannel5_StoreReg[4] = GDMA_Channel5->CFG_LOW;
;;;1262       GDMAChannel5_StoreReg[5] = GDMA_Channel5->CFG_HIGH;
;;;1263   #endif
;;;1264   }
;;;1265   
;;;1266   /**
;;;1267     * @brief  GDMA exit dlps callback function(Resume GDMA register values when system exit DLPS)
;;;1268     * @param  None
;;;1269     * @retval None
;;;1270     */
;;;1271   DATA_RAM_FUNCTION __STATIC_INLINE void GDMA_DLPS_Exit(void)
;;;1272   {
;;;1273       SYSBLKCTRL->u_210.SOC_FUNC_EN |= SYSBLK_GDMA0_EN_Msk;
;;;1274       PERIPH->PERI_CLK_CTRL |= (SYSBLK_ACTCK_GDMA0_EN_Msk | SYSBLK_SLPCK_GDMA0_EN_Msk);
;;;1275   
;;;1276       /* Enable GDMA in DmaCfgReg*/
;;;1277       GDMA_BASE->DmaCfgReg = GDMA_StoreReg[0];
;;;1278   
;;;1279       /*----------clear pending all interrupts of GDMA channel-----------*/
;;;1280       GDMA_BASE->CLEAR_TFR = 0xff;
;;;1281       GDMA_BASE->CLEAR_BLOCK = 0xff;
;;;1282       GDMA_BASE->CLEAR_DST_TRAN = 0xff;
;;;1283       GDMA_BASE->CLEAR_SRC_TRAN = 0xff;
;;;1284       GDMA_BASE->CLEAR_ERR = 0xff;
;;;1285   
;;;1286       /*--------------------mask interrupt-------- -----------------*/
;;;1287       GDMA_BASE->MASK_TFR = (GDMA_StoreReg[2] | ((GDMA_StoreReg[2] & 0xff) << 8));
;;;1288       GDMA_BASE->MASK_BLOCK = (GDMA_StoreReg[3] | ((GDMA_StoreReg[3] & 0xff) << 8));
;;;1289       GDMA_BASE->MASK_SRC_TRAN = (GDMA_StoreReg[4] | ((GDMA_StoreReg[4] & 0xff) << 8));
;;;1290       GDMA_BASE->MASK_DST_TRAN = (GDMA_StoreReg[5] | ((GDMA_StoreReg[5] & 0xff) << 8));
;;;1291       GDMA_BASE->MASK_ERR = (GDMA_StoreReg[6] | ((GDMA_StoreReg[6] & 0xff) << 8));
;;;1292   
;;;1293   #if USE_GDMACHANNEL0_DLPS
;;;1294       GDMA_Channel0->SAR      = GDMAChannel0_StoreReg[0];
;;;1295       GDMA_Channel0->DAR      = GDMAChannel0_StoreReg[1];
;;;1296       GDMA_Channel0->CTL_LOW  = GDMAChannel0_StoreReg[2];
;;;1297       GDMA_Channel0->CTL_HIGH = GDMAChannel0_StoreReg[3];
;;;1298       GDMA_Channel0->CFG_LOW  = GDMAChannel0_StoreReg[4];
;;;1299       GDMA_Channel0->CFG_HIGH = GDMAChannel0_StoreReg[5];
;;;1300   #endif
;;;1301   #if USE_GDMACHANNEL1_DLPS
;;;1302       GDMA_Channel1->SAR      = GDMAChannel1_StoreReg[0];
;;;1303       GDMA_Channel1->DAR      = GDMAChannel1_StoreReg[1];
;;;1304       GDMA_Channel1->CTL_LOW  = GDMAChannel1_StoreReg[2];
;;;1305       GDMA_Channel1->CTL_HIGH = GDMAChannel1_StoreReg[3];
;;;1306       GDMA_Channel1->CFG_LOW  = GDMAChannel1_StoreReg[4];
;;;1307       GDMA_Channel1->CFG_HIGH = GDMAChannel1_StoreReg[5];
;;;1308   #endif
;;;1309   #if USE_GDMACHANNEL2_DLPS
;;;1310       GDMA_Channel2->SAR      = GDMAChannel2_StoreReg[0];
;;;1311       GDMA_Channel2->DAR      = GDMAChannel2_StoreReg[1];
;;;1312       GDMA_Channel2->CTL_LOW  = GDMAChannel2_StoreReg[2];
;;;1313       GDMA_Channel2->CTL_HIGH = GDMAChannel2_StoreReg[3];
;;;1314       GDMA_Channel2->CFG_LOW  = GDMAChannel2_StoreReg[4];
;;;1315       GDMA_Channel2->CFG_HIGH = GDMAChannel2_StoreReg[5];
;;;1316   #endif
;;;1317   #if USE_GDMACHANNEL3_DLPS
;;;1318       GDMA_Channel3->SAR      = GDMAChannel3_StoreReg[0];
;;;1319       GDMA_Channel3->DAR      = GDMAChannel3_StoreReg[1];
;;;1320       GDMA_Channel3->CTL_LOW  = GDMAChannel3_StoreReg[2];
;;;1321       GDMA_Channel3->CTL_HIGH = GDMAChannel3_StoreReg[3];
;;;1322       GDMA_Channel3->CFG_LOW  = GDMAChannel3_StoreReg[4];
;;;1323       GDMA_Channel3->CFG_HIGH = GDMAChannel3_StoreReg[5];
;;;1324   #endif
;;;1325   #if USE_GDMACHANNEL4_DLPS
;;;1326       GDMA_Channel4->SAR      = GDMAChannel4_StoreReg[0];
;;;1327       GDMA_Channel4->DAR      = GDMAChannel4_StoreReg[1];
;;;1328       GDMA_Channel4->CTL_LOW  = GDMAChannel4_StoreReg[2];
;;;1329       GDMA_Channel4->CTL_HIGH = GDMAChannel4_StoreReg[3];
;;;1330       GDMA_Channel4->CFG_LOW  = GDMAChannel4_StoreReg[4];
;;;1331       GDMA_Channel4->CFG_HIGH = GDMAChannel4_StoreReg[5];
;;;1332   #endif
;;;1333   #if USE_GDMACHANNEL5_DLPS
;;;1334       GDMA_Channel5->SAR      = GDMAChannel5_StoreReg[0];
;;;1335       GDMA_Channel5->DAR      = GDMAChannel5_StoreReg[1];
;;;1336       GDMA_Channel5->CTL_LOW  = GDMAChannel5_StoreReg[2];
;;;1337       GDMA_Channel5->CTL_HIGH = GDMAChannel5_StoreReg[3];
;;;1338       GDMA_Channel5->CFG_LOW  = GDMAChannel5_StoreReg[4];
;;;1339       GDMA_Channel5->CFG_HIGH = GDMAChannel5_StoreReg[5];
;;;1340   #endif
;;;1341   
;;;1342       /*----------clear pending all interrupts of GDMA channel before enable channel-----------*/
;;;1343       GDMA_BASE->CLEAR_TFR = 0x3f;
;;;1344       GDMA_BASE->CLEAR_BLOCK = 0x3f;
;;;1345       GDMA_BASE->CLEAR_DST_TRAN = 0x3f;
;;;1346       GDMA_BASE->CLEAR_SRC_TRAN = 0x3f;
;;;1347       GDMA_BASE->CLEAR_ERR = 0x3f;
;;;1348   
;;;1349       /* Enable the selected DMA Channelx */
;;;1350   //    GDMA_BASE->ChEnReg = GDMA_StoreReg[1];
;;;1351   }
;;;1352   #endif
;;;1353   
;;;1354   /********************************************** ********************************************************/
;;;1355   /**************************************** [LCD DLPS] ************************************************/
;;;1356   /*******************************************************************************************************/
;;;1357   /*******************************************************************************************************/
;;;1358   #if USE_LCD_DLPS
;;;1359   
;;;1360   uint32_t LCD_StoreReg[5];
;;;1361   
;;;1362   /**
;;;1363     * @brief  LCD enter dlps callback function(Save LCD register values when system enter DLPS)
;;;1364     * @param  None
;;;1365     * @retval None
;;;1366     */
;;;1367   __STATIC_INLINE void LCD_DLPS_Enter(void)
;;;1368   {
;;;1369       /* Enable LCD 8080 interface controller function */
;;;1370       PERIPH->PERI_FUNC0_EN |= BIT(25);
;;;1371       /* Enable LCD 8080 interface controller clock */
;;;1372       PERIPH->PERI_CLK_CTRL1 |= BIT(28) | BIT(29);
;;;1373   
;;;1374       LCD_StoreReg[0] = *((volatile uint32_t *)0x400002A8UL) & (0x03 << 28);
;;;1375       LCD_StoreReg[1] = LCD->IMR;
;;;1376       LCD_StoreReg[2] = LCD->CTRL0;
;;;1377       LCD_StoreReg[3] = LCD->CTRL1;
;;;1378       LCD_StoreReg[4] = LCD->CFG;
;;;1379   
;;;1380   }
;;;1381   
;;;1382   /**
;;;1383     * @brief  LCD exit dlps callback function(Resume LCD register values when system exit DLPS)
;;;1384     * @param  None
;;;1385     * @retval None
;;;1386     */
;;;1387   DATA_RAM_FUNCTION __STATIC_INLINE void LCD_DLPS_Exit(void)
;;;1388   {
;;;1389       /* Enable LCD 8080 interface controller function */
;;;1390       PERIPH->PERI_FUNC0_EN |= BIT(25);
;;;1391       /* Enable LCD 8080 interface controller clock */
;;;1392       PERIPH->PERI_CLK_CTRL1 |= BIT(28) | BIT(29);
;;;1393   
;;;1394       /* Restore Dedicated SDIO pin option */
;;;1395       *((volatile uint32_t *)0x400002A8UL) &= ~(0x03 << 28);
;;;1396       *((volatile uint32_t *)0x400002A8UL) |= LCD_StoreReg[0];
;;;1397   
;;;1398       /* Initialize LCD */
;;;1399   
;;;1400       LCD->IMR    = LCD_StoreReg[1];
;;;1401       LCD->CTRL1  = LCD_StoreReg[3];
;;;1402       LCD->CFG    = LCD_StoreReg[4];
;;;1403       LCD->CTRL0  = LCD_StoreReg[2];
;;;1404   }
;;;1405   #endif
;;;1406   
;;;1407   /********************************************** ********************************************************/
;;;1408   /**************************************** [I2S0 DLPS] **************************************************/
;;;1409   /*******************************************************************************************************/
;;;1410   /*******************************************************************************************************/
;;;1411   #if USE_I2S0_DLPS
;;;1412   
;;;1413   uint32_t I2S0_StoreReg[4];
;;;1414   
;;;1415   /**
;;;1416     * @brief  I2S0 enter dlps callback function(Save I2S0 register values when system enter DLPS)
;;;1417     * @param  None
;;;1418     * @retval None
;;;1419     */
;;;1420   __STATIC_INLINE void I2S0_DLPS_Enter(void)
;;;1421   {
;;;1422       PERIPH->PERI_BD_FUNC0_EN |= BIT(1) | BIT(5) | BIT(8);
;;;1423   
;;;1424       I2S0_StoreReg[0] = I2S0->BCLK_DIV;
;;;1425       I2S0_StoreReg[1] = I2S0->CTRL0;
;;;1426       I2S0_StoreReg[2] = I2S0->CTRL1;
;;;1427       I2S0_StoreReg[3] = I2S0->DMA_TRDLR;
;;;1428   }
;;;1429   
;;;1430   /**
;;;1431     * @brief  I2S0 exit dlps callback function(Resume I2S0 register values when system exit DLPS)
;;;1432     * @param  None
;;;1433     * @retval None
;;;1434     */
;;;1435   DATA_RAM_FUNCTION __STATIC_INLINE void I2S0_DLPS_Exit(void)
;;;1436   {
;;;1437       PERIPH->PERI_BD_FUNC0_EN |= BIT(1) | BIT(5) | BIT(8);
;;;1438   
;;;1439       /* Reset I2S0 module */
;;;1440       I2S0->CTRL0 |= 1 << 0;
;;;1441       I2S0->CTRL0 &= ~(1 << 0);
;;;1442   
;;;1443       /* Initialize I2S0 */
;;;1444       I2S0->BCLK_DIV  = I2S0_StoreReg[0];
;;;1445       I2S0->CTRL1     = I2S0_StoreReg[2];
;;;1446       I2S0->DMA_TRDLR = I2S0_StoreReg[3];
;;;1447       I2S0->CTRL0     = I2S0_StoreReg[1];
;;;1448   }
;;;1449   #endif
;;;1450   
;;;1451   /********************************************** ********************************************************/
;;;1452   /**************************************** [I2S1 DLPS] **************************************************/
;;;1453   /*******************************************************************************************************/
;;;1454   /*******************************************************************************************************/
;;;1455   #if USE_I2S1_DLPS
;;;1456   
;;;1457   uint32_t I2S1_StoreReg[4];
;;;1458   
;;;1459   /**
;;;1460     * @brief  I2S1 enter dlps callback function(Save I2S1 register values when system enter DLPS)
;;;1461     * @param  None
;;;1462     * @retval None
;;;1463     */
;;;1464   __STATIC_INLINE void I2S1_DLPS_Enter(void)
;;;1465   {
;;;1466       PERIPH->PERI_BD_FUNC0_EN |= BIT(2) | BIT(6) | BIT(8);
;;;1467   
;;;1468       I2S1_StoreReg[0] = I2S1->BCLK_DIV;
;;;1469       I2S1_StoreReg[1] = I2S1->CTRL0;
;;;1470       I2S1_StoreReg[2] = I2S1->CTRL1;
;;;1471       I2S1_StoreReg[3] = I2S1->DMA_TRDLR;
;;;1472   }
;;;1473   
;;;1474   /**
;;;1475     * @brief  I2S1 exit dlps callback function(Resume I2S1 register values when system exit DLPS)
;;;1476     * @param  None
;;;1477     * @retval None
;;;1478     */
;;;1479   DATA_RAM_FUNCTION __STATIC_INLINE void I2S1_DLPS_Exit(void)
;;;1480   {
;;;1481       PERIPH->PERI_BD_FUNC0_EN |= BIT(2) | BIT(6) | BIT(8);
;;;1482   
;;;1483       /* Reset I2S1 module */
;;;1484       I2S1->CTRL0 |= 1 << 0;
;;;1485       I2S1->CTRL0 &= ~(1 << 0);
;;;1486   
;;;1487       /* Initialize I2S1 */
;;;1488       I2S1->BCLK_DIV  = I2S1_StoreReg[0];
;;;1489       I2S1->CTRL1     = I2S1_StoreReg[2];
;;;1490       I2S1->DMA_TRDLR = I2S1_StoreReg[3];
;;;1491       I2S1->CTRL0     = I2S1_StoreReg[1];
;;;1492   }
;;;1493   #endif
;;;1494   
;;;1495   /********************************************** ********************************************************/
;;;1496   /**************************************** [CODEC DLPS] ************************************************/
;;;1497   /*******************************************************************************************************/
;;;1498   /*******************************************************************************************************/
;;;1499   #if USE_CODEC_DLPS
;;;1500   
;;;1501   uint32_t CODEC_StoreReg[7];
;;;1502   
;;;1503   /**
;;;1504     * @brief  CODEC enter dlps callback function(Save CODEC register values when system enter DLPS)
;;;1505     * @param  None
;;;1506     * @retval None
;;;1507     */
;;;1508   __STATIC_INLINE void CODEC_DLPS_Enter(void)
;;;1509   {
;;;1510       /* Enable codec function and clock */
;;;1511       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1512   
;;;1513       CODEC_StoreReg[0] = CODEC->CR0;
;;;1514       CODEC_StoreReg[1] = CODEC->CR1;
;;;1515       CODEC_StoreReg[2] = CODEC->CR2;
;;;1516       CODEC_StoreReg[3] = CODEC->CLK_CTRL;
;;;1517       CODEC_StoreReg[4] = CODEC->I2S_CTRL;
;;;1518       CODEC_StoreReg[5] = CODEC->ADC_CTRL;
;;;1519       CODEC_StoreReg[6] = CODEC->DAC_CTRL;
;;;1520   }
;;;1521   
;;;1522   /**
;;;1523     * @brief  CODEC exit dlps callback function(Resume CODEC register values when system exit DLPS)
;;;1524     * @param  None
;;;1525     * @retval None
;;;1526     */
;;;1527   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_DLPS_Exit(void)
;;;1528   {
;;;1529       /* Enable codec function and clock */
;;;1530       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1531   
;;;1532       /* Initialize CODEC */
;;;1533       if ((CODEC_StoreReg[3] & 0x900) == 0x900)
;;;1534       {
;;;1535           /* Configure AMIC parameters */
;;;1536           CODEC->CR0 = CODEC_StoreReg[0];
;;;1537           CODEC->CR1 = CODEC_StoreReg[1];
;;;1538           CODEC->CR2 = CODEC_StoreReg[2];
;;;1539       }
;;;1540   
;;;1541       /*  Reset audio digital IP */
;;;1542       CODEC->AUDIO_CTRL = 0;
;;;1543       CODEC->AUDIO_CTRL = 1;
;;;1544   
;;;1545       CODEC->CLK_CTRL = CODEC_StoreReg[3];
;;;1546       CODEC->I2S_CTRL = CODEC_StoreReg[4];
;;;1547       CODEC->ADC_CTRL = CODEC_StoreReg[5];
;;;1548       CODEC->DAC_CTRL = CODEC_StoreReg[6];
;;;1549   }
;;;1550   #endif
;;;1551   
;;;1552   /********************************************** ********************************************************/
;;;1553   /**************************************** [CODEC_EQ1 DLPS] ************************************************/
;;;1554   /*******************************************************************************************************/
;;;1555   /*******************************************************************************************************/
;;;1556   #if USE_CODEC_EQ1_DLPS
;;;1557   
;;;1558   uint32_t CODEC_EQ1_StoreReg[5];
;;;1559   
;;;1560   /**
;;;1561     * @brief  CODEC_EQ1 enter dlps callback function(Save CODEC_EQ1 register values when system enter DLPS)
;;;1562     * @param  None
;;;1563     * @retval None
;;;1564     */
;;;1565   __STATIC_INLINE void CODEC_EQ1_DLPS_Enter(void)
;;;1566   {
;;;1567       /* Enable codec function and clock */
;;;1568       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1569   
;;;1570       CODEC_EQ1_StoreReg[0] = CODEC_EQ1->EQ_H0;
;;;1571       CODEC_EQ1_StoreReg[1] = CODEC_EQ1->EQ_B1;
;;;1572       CODEC_EQ1_StoreReg[2] = CODEC_EQ1->EQ_B2;
;;;1573       CODEC_EQ1_StoreReg[3] = CODEC_EQ1->EQ_A1;
;;;1574       CODEC_EQ1_StoreReg[4] = CODEC_EQ1->EQ_A2;
;;;1575   }
;;;1576   
;;;1577   /**
;;;1578     * @brief  CODEC_EQ1 exit dlps callback function(Resume CODEC_EQ1 register values when system exit DLPS)
;;;1579     * @param  None
;;;1580     * @retval None
;;;1581     */
;;;1582   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ1_DLPS_Exit(void)
;;;1583   {
;;;1584       /* Enable codec function and clock */
;;;1585       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1586   
;;;1587       CODEC_EQ1->EQ_H0 = CODEC_EQ1_StoreReg[0];
;;;1588       CODEC_EQ1->EQ_B1 = CODEC_EQ1_StoreReg[1];
;;;1589       CODEC_EQ1->EQ_B2 = CODEC_EQ1_StoreReg[2];
;;;1590       CODEC_EQ1->EQ_A1 = CODEC_EQ1_StoreReg[3];
;;;1591       CODEC_EQ1->EQ_A2 = CODEC_EQ1_StoreReg[4];
;;;1592   }
;;;1593   #endif
;;;1594   
;;;1595   /********************************************** ********************************************************/
;;;1596   /**************************************** [CODEC_EQ2 DLPS] ************************************************/
;;;1597   /*******************************************************************************************************/
;;;1598   /*******************************************************************************************************/
;;;1599   #if USE_CODEC_EQ2_DLPS
;;;1600   
;;;1601   uint32_t CODEC_EQ2_StoreReg[5];
;;;1602   
;;;1603   /**
;;;1604     * @brief  CODEC_EQ2 enter dlps callback function(Save CODEC_EQ2 register values when system enter DLPS)
;;;1605     * @param  None
;;;1606     * @retval None
;;;1607     */
;;;1608   __STATIC_INLINE void CODEC_EQ2_DLPS_Enter(void)
;;;1609   {
;;;1610       /* Enable codec function and clock */
;;;1611       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1612   
;;;1613       CODEC_EQ2_StoreReg[0] = CODEC_EQ2->EQ_H0;
;;;1614       CODEC_EQ2_StoreReg[1] = CODEC_EQ2->EQ_B1;
;;;1615       CODEC_EQ2_StoreReg[2] = CODEC_EQ2->EQ_B2;
;;;1616       CODEC_EQ2_StoreReg[3] = CODEC_EQ2->EQ_A1;
;;;1617       CODEC_EQ2_StoreReg[4] = CODEC_EQ2->EQ_A2;
;;;1618   }
;;;1619   
;;;1620   /**
;;;1621     * @brief  CODEC_EQ2 exit dlps callback function(Resume CODEC_EQ2 register values when system exit DLPS)
;;;1622     * @param  None
;;;1623     * @retval None
;;;1624     */
;;;1625   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ2_DLPS_Exit(void)
;;;1626   {
;;;1627       /* Enable codec function and clock */
;;;1628       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1629   
;;;1630       CODEC_EQ2->EQ_H0 = CODEC_EQ2_StoreReg[0];
;;;1631       CODEC_EQ2->EQ_B1 = CODEC_EQ2_StoreReg[1];
;;;1632       CODEC_EQ2->EQ_B2 = CODEC_EQ2_StoreReg[2];
;;;1633       CODEC_EQ2->EQ_A1 = CODEC_EQ2_StoreReg[3];
;;;1634       CODEC_EQ2->EQ_A2 = CODEC_EQ2_StoreReg[4];
;;;1635   }
;;;1636   #endif
;;;1637   
;;;1638   /********************************************** ********************************************************/
;;;1639   /**************************************** [CODEC_EQ3 DLPS] ************************************************/
;;;1640   /*******************************************************************************************************/
;;;1641   /*******************************************************************************************************/
;;;1642   #if USE_CODEC_EQ3_DLPS
;;;1643   
;;;1644   uint32_t CODEC_EQ3_StoreReg[5];
;;;1645   
;;;1646   /**
;;;1647     * @brief  CODEC_EQ3 enter dlps callback function(Save CODEC_EQ3 register values when system enter DLPS)
;;;1648     * @param  None
;;;1649     * @retval None
;;;1650     */
;;;1651   __STATIC_INLINE void CODEC_EQ3_DLPS_Enter(void)
;;;1652   {
;;;1653       /* Enable codec function and clock */
;;;1654       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1655   
;;;1656       CODEC_EQ3_StoreReg[0] = CODEC_EQ3->EQ_H0;
;;;1657       CODEC_EQ3_StoreReg[1] = CODEC_EQ3->EQ_B1;
;;;1658       CODEC_EQ3_StoreReg[2] = CODEC_EQ3->EQ_B2;
;;;1659       CODEC_EQ3_StoreReg[3] = CODEC_EQ3->EQ_A1;
;;;1660       CODEC_EQ3_StoreReg[4] = CODEC_EQ3->EQ_A2;
;;;1661   }
;;;1662   
;;;1663   /**
;;;1664     * @brief  CODEC_EQ3 exit dlps callback function(Resume CODEC_EQ3 register values when system exit DLPS)
;;;1665     * @param  None
;;;1666     * @retval None
;;;1667     */
;;;1668   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ3_DLPS_Exit(void)
;;;1669   {
;;;1670       /* Enable codec function and clock */
;;;1671       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1672   
;;;1673       CODEC_EQ3->EQ_H0 = CODEC_EQ3_StoreReg[0];
;;;1674       CODEC_EQ3->EQ_B1 = CODEC_EQ3_StoreReg[1];
;;;1675       CODEC_EQ3->EQ_B2 = CODEC_EQ3_StoreReg[2];
;;;1676       CODEC_EQ3->EQ_A1 = CODEC_EQ3_StoreReg[3];
;;;1677       CODEC_EQ3->EQ_A2 = CODEC_EQ3_StoreReg[4];
;;;1678   }
;;;1679   #endif
;;;1680   
;;;1681   /********************************************** ********************************************************/
;;;1682   /**************************************** [CODEC_EQ4 DLPS] ************************************************/
;;;1683   /*******************************************************************************************************/
;;;1684   /*******************************************************************************************************/
;;;1685   #if USE_CODEC_EQ4_DLPS
;;;1686   
;;;1687   uint32_t CODEC_EQ4_StoreReg[5];
;;;1688   
;;;1689   /**
;;;1690     * @brief  CODEC_EQ4 enter dlps callback function(Save CODEC_EQ4 register values when system enter DLPS)
;;;1691     * @param  None
;;;1692     * @retval None
;;;1693     */
;;;1694   __STATIC_INLINE void CODEC_EQ4_DLPS_Enter(void)
;;;1695   {
;;;1696       /* Enable codec function and clock */
;;;1697       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1698   
;;;1699       CODEC_EQ4_StoreReg[0] = CODEC_EQ4->EQ_H0;
;;;1700       CODEC_EQ4_StoreReg[1] = CODEC_EQ4->EQ_B1;
;;;1701       CODEC_EQ4_StoreReg[2] = CODEC_EQ4->EQ_B2;
;;;1702       CODEC_EQ4_StoreReg[3] = CODEC_EQ4->EQ_A1;
;;;1703       CODEC_EQ4_StoreReg[4] = CODEC_EQ4->EQ_A2;
;;;1704   }
;;;1705   
;;;1706   /**
;;;1707     * @brief  CODEC_EQ4 exit dlps callback function(Resume CODEC_EQ4 register values when system exit DLPS)
;;;1708     * @param  None
;;;1709     * @retval None
;;;1710     */
;;;1711   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ4_DLPS_Exit(void)
;;;1712   {
;;;1713       /* Enable codec function and clock */
;;;1714       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1715   
;;;1716       CODEC_EQ4->EQ_H0 = CODEC_EQ4_StoreReg[0];
;;;1717       CODEC_EQ4->EQ_B1 = CODEC_EQ4_StoreReg[1];
;;;1718       CODEC_EQ4->EQ_B2 = CODEC_EQ4_StoreReg[2];
;;;1719       CODEC_EQ4->EQ_A1 = CODEC_EQ4_StoreReg[3];
;;;1720       CODEC_EQ4->EQ_A2 = CODEC_EQ4_StoreReg[4];
;;;1721   }
;;;1722   #endif
;;;1723   
;;;1724   /********************************************** ********************************************************/
;;;1725   /**************************************** [CODEC_EQ5 DLPS] ************************************************/
;;;1726   /*******************************************************************************************************/
;;;1727   /*******************************************************************************************************/
;;;1728   #if USE_CODEC_EQ5_DLPS
;;;1729   
;;;1730   uint32_t CODEC_EQ5_StoreReg[5];
;;;1731   
;;;1732   /**
;;;1733     * @brief  CODEC_EQ5 enter dlps callback function(Save CODEC_EQ5 register values when system enter DLPS)
;;;1734     * @param  None
;;;1735     * @retval None
;;;1736     */
;;;1737   __STATIC_INLINE void CODEC_EQ5_DLPS_Enter(void)
;;;1738   {
;;;1739       /* Enable codec function and clock */
;;;1740       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1741   
;;;1742       CODEC_EQ5_StoreReg[0] = CODEC_EQ5->EQ_H0;
;;;1743       CODEC_EQ5_StoreReg[1] = CODEC_EQ5->EQ_B1;
;;;1744       CODEC_EQ5_StoreReg[2] = CODEC_EQ5->EQ_B2;
;;;1745       CODEC_EQ5_StoreReg[3] = CODEC_EQ5->EQ_A1;
;;;1746       CODEC_EQ5_StoreReg[4] = CODEC_EQ5->EQ_A2;
;;;1747   }
;;;1748   
;;;1749   /**
;;;1750     * @brief  CODEC_EQ5 exit dlps callback function(Resume CODEC_EQ5 register values when system exit DLPS)
;;;1751     * @param  None
;;;1752     * @retval None
;;;1753     */
;;;1754   DATA_RAM_FUNCTION __STATIC_INLINE void CODEC_EQ5_DLPS_Exit(void)
;;;1755   {
;;;1756       /* Enable codec function and clock */
;;;1757       PERIPH->PERI_BD_FUNC0_EN |= (1 << 0) | (1 << 4);
;;;1758   
;;;1759       CODEC_EQ5->EQ_H0 = CODEC_EQ5_StoreReg[0];
;;;1760       CODEC_EQ5->EQ_B1 = CODEC_EQ5_StoreReg[1];
;;;1761       CODEC_EQ5->EQ_B2 = CODEC_EQ5_StoreReg[2];
;;;1762       CODEC_EQ5->EQ_A1 = CODEC_EQ5_StoreReg[3];
;;;1763       CODEC_EQ5->EQ_A2 = CODEC_EQ5_StoreReg[4];
;;;1764   }
;;;1765   #endif
;;;1766   
;;;1767   /**
;;;1768     * @brief  Set Log and SWD pins to SW mode.
;;;1769     * @param  void.
;;;1770     * @retval void.
;;;1771     */
;;;1772   __STATIC_INLINE void Log_SWD_DLPS_Enter(void)
;;;1773   {
;;;1774       if (OTP->SWD_ENABLE)
;;;1775       {
;;;1776           Pad_Config(P1_0, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_DOWN, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1777           Pad_Config(P1_1, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_DOWN, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1778       }
;;;1779   
;;;1780       Pad_Config(OTP->logPin, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;1781   
;;;1782   }
;;;1783   
;;;1784   /**
;;;1785     * @brief  Set Log and SWD pins to PINMUX mode.
;;;1786     * @param  void.
;;;1787     * @retval void.
;;;1788     */
;;;1789   DATA_RAM_FUNCTION __STATIC_INLINE void Log_SWD_DLPS_Exit(void)
;;;1790   {
;;;1791       Pad_Config(OTP->logPin, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x00207d42:    2400        .$      MOVS     r4,#0
        0x00207d44:    f44f1500    O...    MOV      r5,#0x200000
        0x00207d48:    9400        ..      STR      r4,[sp,#0]
        0x00207d4a:    9401        ..      STR      r4,[sp,#4]
        0x00207d4c:    f8950398    ....    LDRB     r0,[r5,#0x398]
        0x00207d50:    2201        ."      MOVS     r2,#1
        0x00207d52:    f000003f    ..?.    AND      r0,r0,#0x3f
        0x00207d56:    4623        #F      MOV      r3,r4
        0x00207d58:    4611        .F      MOV      r1,r2
        0x00207d5a:    f5057566    ..fu    ADD      r5,r5,#0x398
        0x00207d5e:    f609fb3d    ..=.    BL       Pad_Config ; 0x113dc
;;;1792   
;;;1793       if (OTP->SWD_ENABLE)
        0x00207d62:    f8150c64    ..d.    LDRB     r0,[r5,#-0x64]
        0x00207d66:    07c0        ..      LSLS     r0,r0,#31
        0x00207d68:    d00f        ..      BEQ      0x207d8a ; DLPS_IO_ExitDlpsCb + 102
;;;1794       {
;;;1795           Pad_Config(P1_0, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x00207d6a:    2301        .#      MOVS     r3,#1
        0x00207d6c:    9400        ..      STR      r4,[sp,#0]
        0x00207d6e:    461a        .F      MOV      r2,r3
        0x00207d70:    4619        .F      MOV      r1,r3
        0x00207d72:    2008        .       MOVS     r0,#8
        0x00207d74:    9401        ..      STR      r4,[sp,#4]
        0x00207d76:    f609fb31    ..1.    BL       Pad_Config ; 0x113dc
;;;1796           Pad_Config(P1_1, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x00207d7a:    2301        .#      MOVS     r3,#1
        0x00207d7c:    9400        ..      STR      r4,[sp,#0]
        0x00207d7e:    461a        .F      MOV      r2,r3
        0x00207d80:    4619        .F      MOV      r1,r3
        0x00207d82:    2009        .       MOVS     r0,#9
        0x00207d84:    9401        ..      STR      r4,[sp,#4]
        0x00207d86:    f609fb29    ..).    BL       Pad_Config ; 0x113dc
;;;1797       }
;;;1798   }
;;;1799   
;;;1800   /********************************************** ********************************************************/
;;;1801   /*********************************** [USER Exit DLPS CALLBACK FUCN] *****************************************/
;;;1802   /*******************************************************************************************************/
;;;1803   /*******************************************************************************************************/
;;;1804   #if USE_USER_DEFINE_DLPS_EXIT_CB
;;;1805   
;;;1806   DLPS_IO_ExitDlpsCB User_IO_ExitDlpsCB = NULL;
;;;1807   
;;;1808   #endif /* USE_USER_DEFINE_DLPS_EXIT_CB */
;;;1809   
;;;1810   /********************************************** ********************************************************/
;;;1811   /*********************************** [USER Enter DLPS CALLBACK FUCN] *****************************************/
;;;1812   /*******************************************************************************************************/
;;;1813   /*******************************************************************************************************/
;;;1814   #if USE_USER_DEFINE_DLPS_ENTER_CB
;;;1815   
;;;1816   DLPS_IO_EnterDlpsCB User_IO_EnterDlpsCB = NULL;
;;;1817   
;;;1818   #endif /* USE_USER_DEFINE_DLPS_EXIT_CB */
;;;1819   
;;;1820   /********************************************** ********************************************************/
;;;1821   /*********************************** [Enter & Exit DLPS CALLBACK FUNC] *********************************/
;;;1822   /*******************************************************************************************************/
;;;1823   /*******************************************************************************************************/
;;;1824   #if USE_IO_DRIVER_DLPS
;;;1825   
;;;1826   /**
;;;1827     * @brief  IO enter dlps callback function
;;;1828     * @param  None
;;;1829     * @retval None
;;;1830     */
;;;1831   void DLPS_IO_EnterDlpsCb(void)
;;;1832   {
;;;1833       /* low stack do it instead */
;;;1834   //    Pad_ClearAllWakeupINT();
;;;1835   
;;;1836   //    DBG_DIRECT("DLPS_IO_EnterDlpsCb");
;;;1837       NVIC_DisableIRQ(System_IRQn);
;;;1838       CPU_DLPS_Enter();
;;;1839   
;;;1840       Pinmux_DLPS_Enter();
;;;1841   
;;;1842   #if USE_USER_DEFINE_DLPS_ENTER_CB
;;;1843       if (User_IO_EnterDlpsCB)
;;;1844       {
;;;1845           User_IO_EnterDlpsCB();
;;;1846       }
;;;1847   #endif
;;;1848   
;;;1849   #if USE_I2C0_DLPS
;;;1850       I2C0_DLPS_Enter();
;;;1851   #endif
;;;1852   
;;;1853   #if USE_I2C1_DLPS
;;;1854       I2C1_DLPS_Enter();
;;;1855   #endif
;;;1856   
;;;1857   #if USE_TIM_DLPS
;;;1858       TIM_DLPS_Enter();
;;;1859   #endif
;;;1860   
;;;1861   #if USE_QDECODER_DLPS
;;;1862       QuadDecoder_DLPS_Enter();
;;;1863   #endif
;;;1864   
;;;1865   #if USE_IR_DLPS
;;;1866       IR_DLPS_Enter();
;;;1867   #endif
;;;1868   
;;;1869   #if USE_UART_DLPS
;;;1870       UART_DLPS_Enter();
;;;1871   #endif
;;;1872   
;;;1873   #if USE_UART1_DLPS
;;;1874       UART1_DLPS_Enter();
;;;1875   #endif
;;;1876   
;;;1877   #if USE_UART2_DLPS
;;;1878       UART2_DLPS_Enter();
;;;1879   #endif
;;;1880   
;;;1881   #if USE_SPI0_DLPS
;;;1882       SPI0_DLPS_Enter();
;;;1883   #endif
;;;1884   
;;;1885   #if USE_SPI1_DLPS
;;;1886       SPI1_DLPS_Enter();
;;;1887   #endif
;;;1888   
;;;1889   #if USE_SPI2W_DLPS
;;;1890       SPI2W_DLPS_Enter();
;;;1891   #endif
;;;1892   
;;;1893   #if USE_KEYSCAN_DLPS
;;;1894       KeyScan_DLPS_Enter();
;;;1895   #endif
;;;1896   
;;;1897   #if USE_GPIO_DLPS
;;;1898       GPIO_DLPS_Enter();
;;;1899   #endif
;;;1900   
;;;1901   #if USE_ADC_DLPS
;;;1902       ADC_DLPS_Enter();
;;;1903   #endif
;;;1904   
;;;1905   #if USE_LCD_DLPS
;;;1906       LCD_DLPS_Enter();
;;;1907   #endif
;;;1908   
;;;1909   #if USE_I2S0_DLPS
;;;1910       I2S0_DLPS_Enter();
;;;1911   #endif
;;;1912   
;;;1913   #if USE_I2S1_DLPS
;;;1914       I2S1_DLPS_Enter();
;;;1915   #endif
;;;1916   
;;;1917   #if USE_CODEC_DLPS
;;;1918       CODEC_DLPS_Enter();
;;;1919   #endif
;;;1920   
;;;1921   #if USE_CODEC_EQ1_DLPS
;;;1922       CODEC_EQ1_DLPS_Enter();
;;;1923   #endif
;;;1924   
;;;1925   #if USE_CODEC_EQ2_DLPS
;;;1926       CODEC_EQ2_DLPS_Enter();
;;;1927   #endif
;;;1928   
;;;1929   #if USE_CODEC_EQ3_DLPS
;;;1930       CODEC_EQ3_DLPS_Enter();
;;;1931   #endif
;;;1932   
;;;1933   #if USE_CODEC_EQ4_DLPS
;;;1934       CODEC_EQ4_DLPS_Enter();
;;;1935   #endif
;;;1936   
;;;1937   #if USE_CODEC_EQ5_DLPS
;;;1938       CODEC_EQ5_DLPS_Enter();
;;;1939   #endif
;;;1940   
;;;1941   #if USE_GDMA_DLPS
;;;1942       GDMA_DLPS_Enter();
;;;1943   #endif
;;;1944   
;;;1945       Log_SWD_DLPS_Enter();
;;;1946   
;;;1947   }
;;;1948   #endif  /* USE_IO_DRIVER_DLPS */
;;;1949   
;;;1950   #if USE_IO_DRIVER_DLPS
;;;1951   /**
;;;1952     * @brief  IO exit dlps callback function.
;;;1953     * @param  None
;;;1954     * @retval None
;;;1955     */
;;;1956   DATA_RAM_FUNCTION void DLPS_IO_ExitDlpsCb(void)
;;;1957   {
;;;1958   
;;;1959   //    DBG_BUFFER(TYPE_BUMBLEBEE3, SUBTYPE_FORMAT, MODULE_DLPS, LEVEL_INFO,
;;;1960   //               "DLPS_IO_ExitDlpsCb",0);
;;;1961   
;;;1962       Pinmux_DLPS_Exit();
;;;1963   
;;;1964       Log_SWD_DLPS_Exit();
;;;1965   
;;;1966   #if USE_I2C0_DLPS
;;;1967       I2C0_DLPS_Exit();
;;;1968   #endif
;;;1969   
;;;1970   #if USE_I2C1_DLPS
;;;1971       I2C1_DLPS_Exit();
;;;1972   #endif
;;;1973   
;;;1974   #if USE_TIM_DLPS
;;;1975       TIM_DLPS_Exit();
;;;1976   #endif
;;;1977   
;;;1978   #if USE_QDECODER_DLPS
;;;1979       QuadDecoder_DLPS_Exit();
;;;1980   #endif
;;;1981   
;;;1982   #if USE_IR_DLPS
;;;1983       IR_DLPS_Exit();
;;;1984   #endif
;;;1985   
;;;1986   #if USE_UART_DLPS
;;;1987       UART_DLPS_Exit();
;;;1988   #endif
;;;1989   
;;;1990   #if USE_UART1_DLPS
;;;1991       UART1_DLPS_Exit();
;;;1992   #endif
;;;1993   
;;;1994   #if USE_UART2_DLPS
;;;1995       UART2_DLPS_Exit();
;;;1996   #endif
;;;1997   
;;;1998   #if USE_SPI0_DLPS
;;;1999       SPI0_DLPS_Exit();
;;;2000   #endif
;;;2001   
;;;2002   #if USE_SPI1_DLPS
;;;2003       SPI1_DLPS_Exit();
;;;2004   #endif
;;;2005   
;;;2006   #if USE_SPI2W_DLPS
;;;2007       SPI2W_DLPS_Exit();
;;;2008   #endif
;;;2009   
;;;2010   #if USE_KEYSCAN_DLPS
;;;2011       KeyScan_DLPS_Exit();
;;;2012   #endif
;;;2013   
;;;2014   #if USE_GPIO_DLPS
;;;2015       GPIO_DLPS_Exit();
        0x00207d8a:    f000f832    ..2.    BL       GPIO_DLPS_Exit ; 0x207df2
;;;2016   #endif
;;;2017   
;;;2018   #if USE_ADC_DLPS
;;;2019       ADC_DLPS_Exit();
;;;2020   #endif
;;;2021   
;;;2022   #if USE_LCD_DLPS
;;;2023       LCD_DLPS_Exit();
;;;2024   #endif
;;;2025   
;;;2026   #if USE_I2S0_DLPS
;;;2027       I2S0_DLPS_Exit();
;;;2028   #endif
;;;2029   
;;;2030   #if USE_I2S1_DLPS
;;;2031       I2S1_DLPS_Exit();
;;;2032   #endif
;;;2033   
;;;2034   #if USE_CODEC_DLPS
;;;2035       CODEC_DLPS_Exit();
;;;2036   #endif
;;;2037   
;;;2038   #if USE_CODEC_EQ1_DLPS
;;;2039       CODEC_EQ1_DLPS_Exit();
;;;2040   #endif
;;;2041   
;;;2042   #if USE_CODEC_EQ2_DLPS
;;;2043       CODEC_EQ2_DLPS_Exit();
;;;2044   #endif
;;;2045   
;;;2046   #if USE_CODEC_EQ3_DLPS
;;;2047       CODEC_EQ3_DLPS_Exit();
;;;2048   #endif
;;;2049   
;;;2050   #if USE_CODEC_EQ4_DLPS
;;;2051       CODEC_EQ4_DLPS_Exit();
;;;2052   #endif
;;;2053   
;;;2054   #if USE_CODEC_EQ5_DLPS
;;;2055       CODEC_EQ5_DLPS_Exit();
;;;2056   #endif
;;;2057   
;;;2058   #if USE_GDMA_DLPS
;;;2059       GDMA_DLPS_Exit();
;;;2060   #endif
;;;2061   
;;;2062   #if USE_USER_DEFINE_DLPS_EXIT_CB
;;;2063       if (User_IO_ExitDlpsCB)
        0x00207d8e:    4d2d        -M      LDR      r5,[pc,#180] ; [0x207e44] = 0x207fe0
        0x00207d90:    3d90        .=      SUBS     r5,r5,#0x90
        0x00207d92:    6868        hh      LDR      r0,[r5,#4]
        0x00207d94:    b100        ..      CBZ      r0,0x207d98 ; DLPS_IO_ExitDlpsCb + 116
;;;2064       {
;;;2065           User_IO_ExitDlpsCB();
        0x00207d96:    4780        .G      BLX      r0
;;;2066       }
;;;2067   #endif
;;;2068   
;;;2069       NVIC_InitTypeDef nvic_init_struct;
;;;2070       nvic_init_struct.NVIC_IRQChannel         = System_IRQn;
;;;2071       nvic_init_struct.NVIC_IRQChannelCmd      = (FunctionalState)ENABLE;
        0x00207d98:    2001        .       MOVS     r0,#1
        0x00207d9a:    f88d0010    ....    STRB     r0,[sp,#0x10]
;;;2072       nvic_init_struct.NVIC_IRQChannelPriority = 3;
        0x00207d9e:    2003        .       MOVS     r0,#3
;;;2073       NVIC_Init(&nvic_init_struct); //Enable SYSTEM_ON Interrupt
        0x00207da0:    9003        ..      STR      r0,[sp,#0xc]
        0x00207da2:    f88d4008    ...@    STRB     r4,[sp,#8]
        0x00207da6:    a802        ..      ADD      r0,sp,#8
        0x00207da8:    f609fa8a    ....    BL       NVIC_Init ; 0x112c0
        0x00207dac:    4c25        %L      LDR      r4,[pc,#148] ; [0x207e44] = 0x207fe0
        0x00207dae:    3c84        .<      SUBS     r4,r4,#0x84
        0x00207db0:    6863        ch      LDR      r3,[r4,#4]
        0x00207db2:    b123        #.      CBZ      r3,0x207dbe ; DLPS_IO_ExitDlpsCb + 154
        0x00207db4:    2201        ."      MOVS     r2,#1
        0x00207db6:    4924        $I      LDR      r1,[pc,#144] ; [0x207e48] = 0x88001c8
        0x00207db8:    4824        $H      LDR      r0,[pc,#144] ; [0x207e4c] = 0x21100401
        0x00207dba:    f5fffe50    ..P.    BL       log_buffer ; 0x7a5e
        0x00207dbe:    2003        .       MOVS     r0,#3
        0x00207dc0:    f10022e0    ..."    ADD      r2,r0,#0xe000e000
        0x00207dc4:    f8141020    .. .    LDRB     r1,[r4,r0,LSL #2]
        0x00207dc8:    f8821400    ....    STRB     r1,[r2,#0x400]
        0x00207dcc:    1c40        @.      ADDS     r0,r0,#1
        0x00207dce:    2820         (      CMP      r0,#0x20
        0x00207dd0:    d3f6        ..      BCC      0x207dc0 ; DLPS_IO_ExitDlpsCb + 156
        0x00207dd2:    491f        .I      LDR      r1,[pc,#124] ; [0x207e50] = 0xe000ed08
        0x00207dd4:    f8d40080    ....    LDR      r0,[r4,#0x80]
        0x00207dd8:    6008        .`      STR      r0,[r1,#0]
        0x00207dda:    491e        .I      LDR      r1,[pc,#120] ; [0x207e54] = 0x40006000
        0x00207ddc:    6828        (h      LDR      r0,[r5,#0]
        0x00207dde:    60c8        .`      STR      r0,[r1,#0xc]
        0x00207de0:    f04f21e0    O..!    MOV      r1,#0xe000e000
        0x00207de4:    6820         h      LDR      r0,[r4,#0]
        0x00207de6:    f8c10100    ....    STR      r0,[r1,#0x100]
        0x00207dea:    f206f355    ..U.    BL       debug_monitor_enable ; 0x80e498
;;;2074   
;;;2075       CPU_DLPS_Exit();
;;;2076   }
        0x00207dee:    b005        ..      ADD      sp,sp,#0x14
        0x00207df0:    bd30        0.      POP      {r4,r5,pc}
    GPIO_DLPS_Exit
        0x00207df2:    b510        ..      PUSH     {r4,lr}
;;; .\..\include\SDK\src\mcu\peripheral\rtl876x_io_dlps.c (177)
        0x00207df4:    f04f4280    O..B    MOV      r2,#0x40000000
        0x00207df8:    f8d2021c    ....    LDR      r0,[r2,#0x21c]
        0x00207dfc:    f4407080    @..p    ORR      r0,r0,#0x100
        0x00207e00:    f8c2021c    ....    STR      r0,[r2,#0x21c]
;;;178        PERIPH->PERI_CLK_CTRL |= (BIT_SOC_ACTCK_GPIO_EN | SYSBLK_SLPCK_GPIO_EN_Msk);
        0x00207e04:    f8d20230    ..0.    LDR      r0,[r2,#0x230]
        0x00207e08:    f0407040    @.@p    ORR      r0,r0,#0x3000000
        0x00207e0c:    f8c20230    ..0.    STR      r0,[r2,#0x230]
;;;179    
;;;180        GPIO->DATADIR       = GPIO_StoreReg[1];
        0x00207e10:    480c        .H      LDR      r0,[pc,#48] ; [0x207e44] = 0x207fe0
        0x00207e12:    4911        .I      LDR      r1,[pc,#68] ; [0x207e58] = 0x40001000
        0x00207e14:    3028        (0      ADDS     r0,r0,#0x28
        0x00207e16:    6843        Ch      LDR      r3,[r0,#4]
        0x00207e18:    604b        K`      STR      r3,[r1,#4]
;;;181        GPIO->DATASRC       = GPIO_StoreReg[2];
        0x00207e1a:    6884        .h      LDR      r4,[r0,#8]
        0x00207e1c:    608c        .`      STR      r4,[r1,#8]
;;;182        GPIO->INTMASK       = GPIO_StoreReg[4];
        0x00207e1e:    6904        .i      LDR      r4,[r0,#0x10]
        0x00207e20:    634c        Lc      STR      r4,[r1,#0x34]
;;;183        GPIO->INTTYPE       = GPIO_StoreReg[5];
        0x00207e22:    6944        Di      LDR      r4,[r0,#0x14]
        0x00207e24:    638c        .c      STR      r4,[r1,#0x38]
;;;184        GPIO->INTPOLARITY   = GPIO_StoreReg[6];
        0x00207e26:    6984        .i      LDR      r4,[r0,#0x18]
        0x00207e28:    63cc        .c      STR      r4,[r1,#0x3c]
;;;185        GPIO->DEBOUNCE      = GPIO_StoreReg[7];
        0x00207e2a:    69c4        .i      LDR      r4,[r0,#0x1c]
        0x00207e2c:    648c        .d      STR      r4,[r1,#0x48]
;;;186        GPIO->DATAOUT       = GPIO_StoreReg[0];
        0x00207e2e:    6804        .h      LDR      r4,[r0,#0]
        0x00207e30:    600c        .`      STR      r4,[r1,#0]
;;;187        GPIO->INTCLR        = ~(GPIO_StoreReg[1]);
        0x00207e32:    43db        .C      MVNS     r3,r3
        0x00207e34:    64cb        .d      STR      r3,[r1,#0x4c]
;;;188        GPIO->INTEN         = GPIO_StoreReg[3];
        0x00207e36:    68c3        .h      LDR      r3,[r0,#0xc]
        0x00207e38:    630b        .c      STR      r3,[r1,#0x30]
;;;189        *(__IO uint32_t *)(0x40000344UL) = GPIO_StoreReg[8];
        0x00207e3a:    6a00        .j      LDR      r0,[r0,#0x20]
        0x00207e3c:    f8c20344    ..D.    STR      r0,[r2,#0x344]
;;;190    
;;;191        return;
;;;192    }
        0x00207e40:    bd10        ..      POP      {r4,pc}
    $d
        0x00207e42:    0000        ..      DCW    0
        0x00207e44:    00207fe0    .. .    DCD    2129888
        0x00207e48:    088001c8    ....    DCD    142606792
        0x00207e4c:    21100401    ...!    DCD    554697729
        0x00207e50:    e000ed08    ....    DCD    3758157064
        0x00207e54:    40006000    .`.@    DCD    1073766400
        0x00207e58:    40001000    ...@    DCD    1073745920

** Section #6 'RAM_DATA_ON' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 204 bytes (alignment 4)
    Address: 0x00207e5c

    0x207e5c:   01 03 19 40 02 09 09 42 4c 42 5f 50 52 4f 58 02    ...@...BLB_PROX.
    0x207e6c:   01 06 11 07 a6 f6 f6 07 4d c4 9d 98 6d 45 29 bb    ........M...mE).
    0x207e7c:   d0 ff 00 00 1e 00 00 00 0e 01 5d 00 00 00 00 01    ..........].....
    0x207e8c:   00 01 02 00 00 03 04 05 fe 00 65 78 70 65 72 69    ..........experi
    0x207e9c:   6d 65 6e 74 61 6c 00 00 00 00 00 00 00 00 00 00    mental..........
    0x207eac:   00 00 00 00 00 00 00 00 01 00 00 00 1e 00 00 00    ................
    0x207ebc:   bc 10 81 00 24 15 81 00 e4 15 81 00 e4 80 20 00    ....$......... .
    0x207ecc:   a4 81 20 00 a4 81 20 00 c0 00 00 00 00 00 00 00    .. ... .........
    0x207edc:   00 00 00 00 ac 10 81 00 e4 15 81 00 e4 15 81 00    ................
    0x207eec:   e4 80 20 00 e4 80 20 00 e4 80 20 00 00 00 00 00    .. ... ... .....
    0x207efc:   00 00 00 00 00 00 00 00 b4 10 81 00 e4 15 81 00    ................
    0x207f0c:   e4 15 81 00 e4 80 20 00 e4 80 20 00 e4 80 20 00    ...... ... ... .
    0x207f1c:   00 00 00 00 00 00 00 00 00 00 00 00                ............


** Section #7 'RAM_DATA_ON' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 444 bytes (alignment 4)
    Address: 0x00207f28


** Section #8 'OVERLAY_A' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 192 bytes (alignment 4)
    Address: 0x002080e4

    $t
    .app.overlay_a
    AppUpdateVectorTable
;;; .\..\include\SDK\src\mcu\rtl876x\system_rtl8762c.c
;;;474    static void AppUpdateVectorTable(void)
;;;474    {
        0x002080e4:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x002080e8:    b0bd        ..      SUB      sp,sp,#0xf4
;;;475        extern uint32_t Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;476        extern uint32_t Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;477        extern void Default_Handler(void);
;;;478        const char *SysException[] =
        0x002080ea:    2240        @"      MOVS     r2,#0x40
        0x002080ec:    4926        &I      LDR      r1,[pc,#152] ; [0x208188] = 0x8108c8
        0x002080ee:    a82d        -.      ADD      r0,sp,#0xb4
        0x002080f0:    f651ff5a    Q.Z.    BL       __aeabi_memcpy4 ; 0x59fa8
;;;479        {
;;;480            "InitialSP", "Reset", "NMI", "HardFault", "MemManage", "BusFault", "UsageFault", "Rsvd",
;;;481            "Rsvd", "Rsvd", "Rsvd", "SVC", "DebugMon", "Rsvd", "PendSV", "SysTick"
;;;482        };
;;;483        const char *ExtIrq[] =
        0x002080f4:    4924        $I      LDR      r1,[pc,#144] ; [0x208188] = 0x8108c8
        0x002080f6:    22b4        ."      MOVS     r2,#0xb4
        0x002080f8:    3140        @1      ADDS     r1,r1,#0x40
        0x002080fa:    4668        hF      MOV      r0,sp
        0x002080fc:    f651ff54    Q.T.    BL       __aeabi_memcpy4 ; 0x59fa8
        0x00208100:    4924        $I      LDR      r1,[pc,#144] ; [0x208194] = 0xe000ed08
;;;484        {
;;;485            "System", "WDG", "BTMAC", "TIM3", "TIM2", "Platform", "I2S0_TX", "I2S0_RX", "Timer4-7",
;;;486            "GPIO4", "GPIO5", "UART1", "UART0", "RTC", "SPI0", "SPI1", "I2C0", "I2C1", "ADC",
;;;487            "Peripheral", "GDMA0 Channel0", "GDMA0 Channel1", "GDMA0 Channel2", "GDMA0 Channel3",
;;;488            "GDMA0 Channel4", "GDMA0 Channel5", "GPIO_Group3", "GPIO_Group2", "IR", "GPIO_Group1",
;;;489            "GPIO_Group0", "UART2", "TIM4", "TIM5", "TIM6", "TIM7", "SPI_Flash", "Qdecode",
;;;490            "Keyscan", "SPI2W", "LPCOMP", "PTA_Mailbox", "SPORT1 TX", "SPORT1 RX", "LCD"
;;;491        };
;;;492    
;;;493        IRQ_Fun *pRamVector    = (IRQ_Fun *)VTOR_RAM_ADDR;
        0x00208102:    f44f1000    O...    MOV      r0,#0x200000
        0x00208106:    4d21        !M      LDR      r5,[pc,#132] ; [0x20818c] = 0x811108
        0x00208108:    4f21        !O      LDR      r7,[pc,#132] ; [0x208190] = 0xf4
        0x0020810a:    6809        .h      LDR      r1,[r1,#0]
        0x0020810c:    4606        .F      MOV      r6,r0
;;;494        IRQ_Fun *pAppVector    = (IRQ_Fun *)&Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;495        uint32_t AppVectorSize = (uint32_t)&Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;496        uint32_t i             = 0;
        0x0020810e:    2400        .$      MOVS     r4,#0
;;;497    
;;;498        if (SCB->VTOR != VTOR_RAM_ADDR)
        0x00208110:    42b1        .B      CMP      r1,r6
        0x00208112:    d001        ..      BEQ      0x208118 ; AppUpdateVectorTable + 52
;;;499        {
;;;500            RamVectorTableInit(VTOR_RAM_ADDR);
        0x00208114:    f5fcfdc8    ....    BL       RamVectorTableInit ; 0x4ca8
        0x00208118:    f04f5805    O..X    MOV      r8,#0x21400000
        0x0020811c:    f8df9078    ..x.    LDR      r9,[pc,#120] ; [0x208198] = 0x21100101
;;;501        }
;;;502    
;;;503        /* Update APP defined handlers */
;;;504        for (i = 0; i < AppVectorSize / 4; ++i)
        0x00208120:    e027        '.      B        0x208172 ; AppUpdateVectorTable + 142
;;;505        {
;;;506            if (i == 1) //skip reset_handler remap
        0x00208122:    2c01        .,      CMP      r4,#1
        0x00208124:    d024        $.      BEQ      0x208170 ; AppUpdateVectorTable + 140
;;;507            {
;;;508                continue;
;;;509            }
;;;510    
;;;511            if ((pAppVector[i] != Default_Handler) && (pAppVector[i] != 0))
        0x00208126:    f8550024    U.$.    LDR      r0,[r5,r4,LSL #2]
        0x0020812a:    491c        .I      LDR      r1,[pc,#112] ; [0x20819c] = 0x810655
        0x0020812c:    4288        .B      CMP      r0,r1
        0x0020812e:    d01f        ..      BEQ      0x208170 ; AppUpdateVectorTable + 140
        0x00208130:    b1f0        ..      CBZ      r0,0x208170 ; AppUpdateVectorTable + 140
;;;512            {
;;;513                if (i < System_VECTORn)
        0x00208132:    2c10        .,      CMP      r4,#0x10
        0x00208134:    d209        ..      BCS      0x20814a ; AppUpdateVectorTable + 102
;;;514                {
;;;515                    OS_PRINT_WARN1("Warning! %s is updated by APP!", TRACE_STRING(SysException[i]));
        0x00208136:    a82d        -.      ADD      r0,sp,#0xb4
        0x00208138:    f8501024    P.$.    LDR      r1,[r0,r4,LSL #2]
        0x0020813c:    4640        @F      MOV      r0,r8
        0x0020813e:    f5fffe94    ....    BL       trace_string ; 0x7e6a
        0x00208142:    4603        .F      MOV      r3,r0
        0x00208144:    2201        ."      MOVS     r2,#1
        0x00208146:    4916        .I      LDR      r1,[pc,#88] ; [0x2081a0] = 0x8800020
        0x00208148:    e00b        ..      B        0x208162 ; AppUpdateVectorTable + 126
;;;516                }
;;;517                else
;;;518                {
;;;519                    OS_PRINT_WARN1("Warning! ISR %s is updated by APP!",
        0x0020814a:    4668        hF      MOV      r0,sp
        0x0020814c:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00208150:    f8501c40    P.@.    LDR      r1,[r0,#-0x40]
        0x00208154:    4640        @F      MOV      r0,r8
        0x00208156:    f5fffe88    ....    BL       trace_string ; 0x7e6a
        0x0020815a:    4911        .I      LDR      r1,[pc,#68] ; [0x2081a0] = 0x8800020
        0x0020815c:    2201        ."      MOVS     r2,#1
        0x0020815e:    4603        .F      MOV      r3,r0
        0x00208160:    3124        $1      ADDS     r1,r1,#0x24
        0x00208162:    4648        HF      MOV      r0,r9
        0x00208164:    f5fffc7b    ..{.    BL       log_buffer ; 0x7a5e
;;;520                                   TRACE_STRING(ExtIrq[i - System_VECTORn]));
;;;521                }
;;;522    
;;;523                pRamVector[i] = pAppVector[i];
        0x00208168:    f8550024    U.$.    LDR      r0,[r5,r4,LSL #2]
        0x0020816c:    f8460024    F.$.    STR      r0,[r6,r4,LSL #2]
        0x00208170:    1c64        d.      ADDS     r4,r4,#1
        0x00208172:    ebb40f97    ....    CMP      r4,r7,LSR #2
        0x00208176:    d3d4        ..      BCC      0x208122 ; AppUpdateVectorTable + 62
;;;524            }
;;;525        }
;;;526    
;;;527        __DMB();
        0x00208178:    f3bf8f5f    .._.    DMB      
;;;528        __DSB();
        0x0020817c:    f3bf8f4f    ..O.    DSB      
;;;529    }
        0x00208180:    b03d        =.      ADD      sp,sp,#0xf4
        0x00208182:    e8bd83f0    ....    POP      {r4-r9,pc}
    $d
        0x00208186:    0000        ..      DCW    0
        0x00208188:    008108c8    ....    DCD    8456392
        0x0020818c:    00811108    ....    DCD    8458504
        0x00208190:    000000f4    ....    DCD    244
        0x00208194:    e000ed08    ....    DCD    3758157064
        0x00208198:    21100101    ...!    DCD    554696961
        0x0020819c:    00810655    U...    DCD    8455765
        0x002081a0:    08800020     ...    DCD    142606368

** Section #9 'App.trace' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 4228 bytes (alignment 4)
    Address: 0x08800000

    0x8800000:   21 21 21 53 44 4b 20 56 65 72 3a 20 25 73 2c 20    !!!SDK Ver: %s, 
    0x8800010:   42 75 69 6c 64 20 54 69 6d 65 3a 20 25 73 00 00    Build Time: %s..
    0x8800020:   21 21 2a 57 61 72 6e 69 6e 67 21 20 25 73 20 69    !!*Warning! %s i
    0x8800030:   73 20 75 70 64 61 74 65 64 20 62 79 20 41 50 50    s updated by APP
    0x8800040:   21 00 00 00 21 21 2a 57 61 72 6e 69 6e 67 21 20    !...!!*Warning! 
    0x8800050:   49 53 52 20 25 73 20 69 73 20 75 70 64 61 74 65    ISR %s is update
    0x8800060:   64 20 62 79 20 41 50 50 21 00 00 00 21 21 21 73    d by APP!...!!!s
    0x8800070:   65 6e 64 5f 69 6f 5f 6d 73 67 5f 74 6f 5f 61 70    end_io_msg_to_ap
    0x8800080:   70 20 66 61 69 6c 00 00 21 21 21 73 65 6e 64 5f    p fail..!!!send_
    0x8800090:   65 76 74 5f 6d 73 67 5f 74 6f 5f 61 70 70 20 66    evt_msg_to_app f
    0x88000a0:   61 69 6c 00 21 21 21 45 6e 74 65 72 20 47 50 49    ail.!!!Enter GPI
    0x88000b0:   4f 35 5f 48 61 6e 64 6c 65 72 21 00 21 21 21 4d    O5_Handler!.!!!M
    0x88000c0:   53 47 5f 53 48 4f 52 54 5f 50 52 45 53 53 00 00    SG_SHORT_PRESS..
    0x88000d0:   21 21 21 45 52 52 4f 52 20 49 4f 20 53 54 41 54    !!!ERROR IO STAT
    0x88000e0:   55 53 00 00 21 21 21 4d 53 47 5f 4c 4f 4e 47 5f    US..!!!MSG_LONG_
    0x88000f0:   50 52 45 53 53 00 00 00 21 21 21 45 52 52 4f 52    PRESS...!!!ERROR
    0x8800100:   20 50 4f 57 45 52 20 53 54 41 54 55 53 00 00 00     POWER STATUS...
    0x8800110:   21 21 21 45 52 52 4f 52 20 50 4f 57 45 52 20 53    !!!ERROR POWER S
    0x8800120:   54 41 54 55 53 00 00 00 21 21 21 45 52 52 4f 52    TATUS...!!!ERROR
    0x8800130:   20 50 4f 57 45 52 20 53 54 41 54 55 53 00 00 00     POWER STATUS...
    0x8800140:   21 21 21 45 52 52 4f 52 20 49 4f 20 4d 4f 44 45    !!!ERROR IO MODE
    0x8800150:   00 00 00 00 21 2a 2a 78 54 69 6d 65 72 50 78 70    ....!**xTimerPxp
    0x8800160:   49 4f 20 6f 73 5f 74 69 6d 65 72 5f 72 65 73 74    IO os_timer_rest
    0x8800170:   61 72 74 2e 00 00 00 00 21 2a 2a 78 54 69 6d 65    art.....!**xTime
    0x8800180:   72 41 6c 65 72 74 20 72 65 74 76 61 6c 20 69 73    rAlert retval is
    0x8800190:   20 25 64 00 21 2a 2a 78 54 69 6d 65 72 4c 6f 6e     %d.!**xTimerLon
    0x88001a0:   67 50 72 65 73 73 20 72 65 74 76 61 6c 20 69 73    gPress retval is
    0x88001b0:   20 25 64 00 21 2a 2a 53 79 73 74 65 6d 5f 48 61     %d.!**System_Ha
    0x88001c0:   6e 64 6c 65 72 00 00 00 21 21 2a 6d 69 73 73 20    ndler...!!*miss 
    0x88001d0:   69 6e 74 65 72 72 75 70 74 3a 20 70 65 6e 64 69    interrupt: pendi
    0x88001e0:   6e 67 20 72 65 67 69 73 74 65 72 3a 20 30 78 25    ng register: 0x%
    0x88001f0:   78 00 00 00 21 21 21 69 61 73 5f 61 74 74 72 5f    x...!!!ias_attr_
    0x8800200:   77 72 69 74 65 5f 63 62 3a 20 70 5f 76 61 6c 75    write_cb: p_valu
    0x8800210:   65 20 25 70 20 6c 65 6e 67 74 68 3d 20 30 78 25    e %p length= 0x%
    0x8800220:   78 00 00 00 21 21 21 69 61 73 5f 61 64 64 5f 73    x...!!!ias_add_s
    0x8800230:   65 72 76 69 63 65 3a 20 73 65 72 76 69 63 65 5f    ervice: service_
    0x8800240:   69 64 20 25 64 00 00 00 21 21 21 6c 6c 73 5f 73    id %d...!!!lls_s
    0x8800250:   65 74 5f 70 61 72 61 6d 65 74 65 72 3a 20 6c 6c    et_parameter: ll
    0x8800260:   73 20 61 6c 65 72 74 20 6c 65 76 65 6c 20 70 61    s alert level pa
    0x8800270:   72 61 6d 65 74 65 72 20 73 65 74 20 66 61 69 6c    rameter set fail
    0x8800280:   65 64 00 00 21 21 21 6c 6c 73 5f 61 74 74 72 5f    ed..!!!lls_attr_
    0x8800290:   72 65 61 64 5f 63 62 20 64 65 66 61 75 6c 74 3a    read_cb default:
    0x88002a0:   61 74 74 72 69 62 5f 69 6e 64 65 78 20 25 64 00    attrib_index %d.
    0x88002b0:   21 2a 2a 6c 6c 73 5f 61 74 74 72 5f 72 65 61 64    !**lls_attr_read
    0x88002c0:   5f 63 62 3a 20 61 74 74 72 69 62 5f 69 6e 64 65    _cb: attrib_inde
    0x88002d0:   78 20 25 64 2c 20 6c 65 6e 67 74 68 20 25 64 00    x %d, length %d.
    0x88002e0:   21 21 21 6c 6c 73 5f 61 74 74 72 5f 77 72 69 74    !!!lls_attr_writ
    0x88002f0:   65 5f 63 62 3a 20 70 5f 76 61 6c 75 65 20 25 70    e_cb: p_value %p
    0x8800300:   2c 20 6c 65 6e 67 74 68 20 30 78 25 78 00 00 00    , length 0x%x...
    0x8800310:   21 21 21 6c 6c 73 5f 61 64 64 5f 73 65 72 76 69    !!!lls_add_servi
    0x8800320:   63 65 3a 20 73 65 72 76 69 63 65 5f 69 64 20 25    ce: service_id %
    0x8800330:   64 00 00 00 21 21 21 74 70 73 5f 73 65 74 5f 70    d...!!!tps_set_p
    0x8800340:   61 72 61 6d 65 74 65 72 3a 20 54 50 53 20 70 61    arameter: TPS pa
    0x8800350:   72 61 6d 65 74 65 72 20 73 65 74 20 66 61 69 6c    rameter set fail
    0x8800360:   65 64 00 00 21 21 21 74 70 73 5f 61 74 74 72 5f    ed..!!!tps_attr_
    0x8800370:   72 65 61 64 5f 63 62 3a 20 61 74 74 72 69 62 5f    read_cb: attrib_
    0x8800380:   69 6e 64 65 78 20 25 64 00 00 00 00 21 2a 2a 74    index %d....!**t
    0x8800390:   70 73 5f 61 74 74 72 5f 72 65 61 64 5f 63 62 3a    ps_attr_read_cb:
    0x88003a0:   20 61 74 74 72 69 62 5f 69 6e 64 65 78 20 25 64     attrib_index %d
    0x88003b0:   2c 20 2a 6c 65 6e 67 74 68 5f 70 74 72 20 25 64    , *length_ptr %d
    0x88003c0:   00 00 00 00 21 21 21 74 70 73 5f 61 64 64 5f 73    ....!!!tps_add_s
    0x88003d0:   65 72 76 69 63 65 3a 20 73 65 72 76 69 63 65 5f    ervice: service_
    0x88003e0:   69 64 20 25 64 00 00 00 21 21 21 62 61 73 5f 73    id %d...!!!bas_s
    0x88003f0:   65 74 5f 70 61 72 61 6d 65 74 65 72 20 66 61 69    et_parameter fai
    0x8800400:   6c 65 64 00 21 2a 2a 62 61 73 5f 61 74 74 72 5f    led.!**bas_attr_
    0x8800410:   72 65 61 64 5f 63 62 20 61 74 74 72 69 62 5f 69    read_cb attrib_i
    0x8800420:   6e 64 65 78 20 3d 20 25 64 20 6f 66 66 73 65 74    ndex = %d offset
    0x8800430:   20 25 78 00 21 21 21 62 61 73 5f 61 74 74 72 5f     %x.!!!bas_attr_
    0x8800440:   72 65 61 64 5f 63 62 20 61 74 74 72 69 62 5f 69    read_cb attrib_i
    0x8800450:   6e 64 65 78 20 3d 20 25 64 20 6e 6f 74 20 66 6f    ndex = %d not fo
    0x8800460:   75 6e 64 00 21 2a 2a 62 61 73 5f 63 63 63 64 5f    und.!**bas_cccd_
    0x8800470:   75 70 64 61 74 65 5f 63 62 20 69 6e 64 65 78 20    update_cb index 
    0x8800480:   3d 20 25 64 20 63 63 63 5f 62 69 74 73 20 25 78    = %d ccc_bits %x
    0x8800490:   00 00 00 00 21 21 21 62 61 73 5f 61 64 64 5f 73    ....!!!bas_add_s
    0x88004a0:   65 72 76 69 63 65 3a 20 73 65 72 76 69 63 65 5f    ervice: service_
    0x88004b0:   69 64 20 25 64 00 00 00 21 21 21 62 61 73 5f 73    id %d...!!!bas_s
    0x88004c0:   65 74 5f 70 61 72 61 6d 65 74 65 72 20 66 61 69    et_parameter fai
    0x88004d0:   6c 65 64 00 21 21 21 6b 6e 73 5f 61 74 74 72 5f    led.!!!kns_attr_
    0x88004e0:   72 65 61 64 5f 63 62 20 61 74 74 72 69 62 5f 69    read_cb attrib_i
    0x88004f0:   6e 64 65 78 20 3d 20 25 64 20 6e 6f 74 20 66 6f    ndex = %d not fo
    0x8800500:   75 6e 64 00 21 2a 2a 3c 2d 2d 20 67 61 74 74 20    und.!**<-- gatt 
    0x8800510:   67 65 74 20 50 78 70 45 78 74 65 6e 64 65 64 20    get PxpExtended 
    0x8800520:   61 74 74 72 69 62 75 74 65 20 76 61 6c 75 65 3a    attribute value:
    0x8800530:   20 41 74 74 72 69 62 49 6e 64 65 78 2d 2d 25 64     AttribIndex--%d
    0x8800540:   2c 20 6c 65 6e 67 74 68 2d 2d 25 64 00 00 00 00    , length--%d....
    0x8800550:   21 21 21 6b 6e 73 5f 61 74 74 72 5f 77 72 69 74    !!!kns_attr_writ
    0x8800560:   65 5f 63 62 3a 20 70 5f 76 61 6c 75 65 20 25 70    e_cb: p_value %p
    0x8800570:   2c 20 6c 65 6e 67 74 68 20 30 78 25 78 00 00 00    , length 0x%x...
    0x8800580:   21 2a 2a 6b 6e 73 5f 63 63 63 64 5f 75 70 64 61    !**kns_cccd_upda
    0x8800590:   74 65 5f 63 62 20 69 6e 64 65 78 20 3d 20 25 64    te_cb index = %d
    0x88005a0:   20 63 63 63 5f 62 69 74 73 20 25 78 00 00 00 00     ccc_bits %x....
    0x88005b0:   21 21 21 6b 6e 73 5f 61 64 64 5f 73 65 72 76 69    !!!kns_add_servi
    0x88005c0:   63 65 3a 20 73 65 72 76 69 63 65 5f 69 64 20 25    ce: service_id %
    0x88005d0:   64 00 00 00 21 21 21 44 49 53 20 70 61 72 61 6d    d...!!!DIS param
    0x88005e0:   65 74 65 72 20 73 65 74 20 66 61 69 6c 65 64 00    eter set failed.
    0x88005f0:   21 21 21 64 69 73 5f 61 74 74 72 5f 72 65 61 64    !!!dis_attr_read
    0x8800600:   5f 63 62 3a 20 61 74 74 72 69 62 5f 69 6e 64 65    _cb: attrib_inde
    0x8800610:   78 20 25 64 00 00 00 00 21 2a 2a 64 69 73 5f 61    x %d....!**dis_a
    0x8800620:   74 74 72 5f 72 65 61 64 5f 63 62 3a 20 61 74 74    ttr_read_cb: att
    0x8800630:   72 69 62 5f 69 6e 64 65 78 20 25 64 2c 20 2a 6c    rib_index %d, *l
    0x8800640:   65 6e 67 74 68 5f 70 74 72 20 25 64 00 00 00 00    ength_ptr %d....
    0x8800650:   21 21 21 64 69 73 5f 61 64 64 5f 73 65 72 76 69    !!!dis_add_servi
    0x8800660:   63 65 3a 20 73 65 72 76 69 63 65 5f 69 64 20 25    ce: service_id %
    0x8800670:   64 00 00 00 21 2a 2a 5b 57 44 47 5d 20 57 61 74    d...!**[WDG] Wat
    0x8800680:   63 68 20 44 6f 67 20 52 73 65 74 20 54 69 6d 65    ch Dog Rset Time
    0x8800690:   72 00 00 00 21 2a 2a 61 70 70 5f 68 61 6e 64 6c    r...!**app_handl
    0x88006a0:   65 5f 64 65 76 5f 73 74 61 74 65 5f 65 76 74 3a    e_dev_state_evt:
    0x88006b0:   20 69 6e 69 74 20 73 74 61 74 65 20 25 64 2c 20     init state %d, 
    0x88006c0:   61 64 76 20 73 74 61 74 65 20 25 64 2c 20 63 61    adv state %d, ca
    0x88006d0:   75 73 65 20 30 78 25 78 00 00 00 00 21 2a 2a 47    use 0x%x....!**G
    0x88006e0:   41 50 20 73 74 61 63 6b 20 72 65 61 64 79 00 00    AP stack ready..
    0x88006f0:   21 2a 2a 47 41 50 20 61 64 76 20 73 74 6f 70 65    !**GAP adv stope
    0x8800700:   64 3a 20 62 65 63 61 75 73 65 20 63 6f 6e 6e 65    d: because conne
    0x8800710:   63 74 69 6f 6e 20 63 72 65 61 74 65 64 00 00 00    ction created...
    0x8800720:   21 2a 2a 47 41 50 20 61 64 76 20 73 74 6f 70 65    !**GAP adv stope
    0x8800730:   64 00 00 00 21 2a 2a 47 41 50 20 61 64 76 20 73    d...!**GAP adv s
    0x8800740:   74 61 72 74 00 00 00 00 21 2a 2a 61 70 70 5f 68    tart....!**app_h
    0x8800750:   61 6e 64 6c 65 5f 63 6f 6e 6e 5f 73 74 61 74 65    andle_conn_state
    0x8800760:   5f 65 76 74 3a 20 63 6f 6e 6e 5f 69 64 20 25 64    _evt: conn_id %d
    0x8800770:   20 6f 6c 64 5f 73 74 61 74 65 20 25 64 20 6e 65     old_state %d ne
    0x8800780:   77 5f 73 74 61 74 65 20 25 64 2c 20 64 69 73 63    w_state %d, disc
    0x8800790:   5f 63 61 75 73 65 20 30 78 25 78 00 21 21 21 61    _cause 0x%x.!!!a
    0x88007a0:   70 70 5f 68 61 6e 64 6c 65 5f 63 6f 6e 6e 5f 73    pp_handle_conn_s
    0x88007b0:   74 61 74 65 5f 65 76 74 3a 20 63 6f 6e 6e 65 63    tate_evt: connec
    0x88007c0:   74 69 6f 6e 20 6c 6f 73 74 20 63 61 75 73 65 20    tion lost cause 
    0x88007d0:   30 78 25 78 00 00 00 00 21 21 21 67 5f 70 78 70    0x%x....!!!g_pxp
    0x88007e0:   5f 6c 69 6e 6b 6c 6f 73 73 5f 61 6c 65 72 74 5f    _linkloss_alert_
    0x88007f0:   6c 65 76 65 6c 20 69 73 20 25 64 00 21 2a 2a 47    level is %d.!**G
    0x8800800:   41 50 5f 43 4f 4e 4e 5f 53 54 41 54 45 5f 43 4f    AP_CONN_STATE_CO
    0x8800810:   4e 4e 45 43 54 45 44 3a 72 65 6d 6f 74 65 5f 62    NNECTED:remote_b
    0x8800820:   64 20 25 73 2c 20 72 65 6d 6f 74 65 5f 61 64 64    d %s, remote_add
    0x8800830:   72 5f 74 79 70 65 20 25 64 2c 20 63 6f 6e 6e 5f    r_type %d, conn_
    0x8800840:   69 6e 74 65 72 76 61 6c 20 30 78 25 78 2c 20 63    interval 0x%x, c
    0x8800850:   6f 6e 6e 5f 6c 61 74 65 6e 63 79 20 30 78 25 78    onn_latency 0x%x
    0x8800860:   2c 20 63 6f 6e 6e 5f 73 75 70 65 72 76 69 73 69    , conn_supervisi
    0x8800870:   6f 6e 5f 74 69 6d 65 6f 75 74 20 30 78 25 78 00    on_timeout 0x%x.
    0x8800880:   21 2a 2a 61 70 70 5f 68 61 6e 64 6c 65 5f 61 75    !**app_handle_au
    0x8800890:   74 68 65 6e 5f 73 74 61 74 65 5f 65 76 74 3a 63    then_state_evt:c
    0x88008a0:   6f 6e 6e 5f 69 64 20 25 64 2c 20 63 61 75 73 65    onn_id %d, cause
    0x88008b0:   20 30 78 25 78 00 00 00 21 2a 2a 61 70 70 5f 68     0x%x...!**app_h
    0x88008c0:   61 6e 64 6c 65 5f 61 75 74 68 65 6e 5f 73 74 61    andle_authen_sta
    0x88008d0:   74 65 5f 65 76 74 3a 20 47 41 50 5f 41 55 54 48    te_evt: GAP_AUTH
    0x88008e0:   45 4e 5f 53 54 41 54 45 5f 53 54 41 52 54 45 44    EN_STATE_STARTED
    0x88008f0:   00 00 00 00 21 2a 2a 61 70 70 5f 68 61 6e 64 6c    ....!**app_handl
    0x8800900:   65 5f 61 75 74 68 65 6e 5f 73 74 61 74 65 5f 65    e_authen_state_e
    0x8800910:   76 74 3a 20 47 41 50 5f 41 55 54 48 45 4e 5f 53    vt: GAP_AUTHEN_S
    0x8800920:   54 41 54 45 5f 43 4f 4d 50 4c 45 54 45 20 70 61    TATE_COMPLETE pa
    0x8800930:   69 72 20 73 75 63 63 65 73 73 00 00 21 2a 2a 61    ir success..!**a
    0x8800940:   70 70 5f 68 61 6e 64 6c 65 5f 61 75 74 68 65 6e    pp_handle_authen
    0x8800950:   5f 73 74 61 74 65 5f 65 76 74 3a 20 47 41 50 5f    _state_evt: GAP_
    0x8800960:   41 55 54 48 45 4e 5f 53 54 41 54 45 5f 43 4f 4d    AUTHEN_STATE_COM
    0x8800970:   50 4c 45 54 45 20 70 61 69 72 20 66 61 69 6c 65    PLETE pair faile
    0x8800980:   64 00 00 00 21 21 21 61 70 70 5f 68 61 6e 64 6c    d...!!!app_handl
    0x8800990:   65 5f 61 75 74 68 65 6e 5f 73 74 61 74 65 5f 65    e_authen_state_e
    0x88009a0:   76 74 3a 20 75 6e 6b 6e 6f 77 6e 20 6e 65 77 73    vt: unknown news
    0x88009b0:   74 61 74 65 20 25 64 00 21 2a 2a 61 70 70 5f 68    tate %d.!**app_h
    0x88009c0:   61 6e 64 6c 65 5f 63 6f 6e 6e 5f 6d 74 75 5f 69    andle_conn_mtu_i
    0x88009d0:   6e 66 6f 5f 65 76 74 3a 20 63 6f 6e 6e 5f 69 64    nfo_evt: conn_id
    0x88009e0:   20 25 64 2c 20 6d 74 75 5f 73 69 7a 65 20 25 64     %d, mtu_size %d
    0x88009f0:   00 00 00 00 21 2a 2a 61 70 70 5f 68 61 6e 64 6c    ....!**app_handl
    0x8800a00:   65 5f 63 6f 6e 6e 5f 70 61 72 61 6d 5f 75 70 64    e_conn_param_upd
    0x8800a10:   61 74 65 5f 65 76 74 20 75 70 64 61 74 65 20 73    ate_evt update s
    0x8800a20:   75 63 63 65 73 73 3a 63 6f 6e 6e 5f 69 6e 74 65    uccess:conn_inte
    0x8800a30:   72 76 61 6c 20 30 78 25 78 2c 20 63 6f 6e 6e 5f    rval 0x%x, conn_
    0x8800a40:   73 6c 61 76 65 5f 6c 61 74 65 6e 63 79 20 30 78    slave_latency 0x
    0x8800a50:   25 78 2c 20 63 6f 6e 6e 5f 73 75 70 65 72 76 69    %x, conn_supervi
    0x8800a60:   73 69 6f 6e 5f 74 69 6d 65 6f 75 74 20 30 78 25    sion_timeout 0x%
    0x8800a70:   78 00 00 00 21 21 21 61 70 70 5f 68 61 6e 64 6c    x...!!!app_handl
    0x8800a80:   65 5f 63 6f 6e 6e 5f 70 61 72 61 6d 5f 75 70 64    e_conn_param_upd
    0x8800a90:   61 74 65 5f 65 76 74 20 75 70 64 61 74 65 20 66    ate_evt update f
    0x8800aa0:   61 69 6c 65 64 3a 20 63 61 75 73 65 20 30 78 25    ailed: cause 0x%
    0x8800ab0:   78 00 00 00 21 2a 2a 61 70 70 5f 68 61 6e 64 6c    x...!**app_handl
    0x8800ac0:   65 5f 63 6f 6e 6e 5f 70 61 72 61 6d 5f 75 70 64    e_conn_param_upd
    0x8800ad0:   61 74 65 5f 65 76 74 20 75 70 64 61 74 65 20 70    ate_evt update p
    0x8800ae0:   65 6e 64 69 6e 67 2e 00 61 70 70 5f 68 61 6e 64    ending..app_hand
    0x8800af0:   6c 65 5f 67 61 70 5f 6d 73 67 3a 20 73 75 62 74    le_gap_msg: subt
    0x8800b00:   79 70 65 20 25 64 00 00 21 2a 2a 47 41 50 5f 4d    ype %d..!**GAP_M
    0x8800b10:   53 47 5f 4c 45 5f 42 4f 4e 44 5f 4a 55 53 54 5f    SG_LE_BOND_JUST_
    0x8800b20:   57 4f 52 4b 00 00 00 00 21 2a 2a 47 41 50 5f 4d    WORK....!**GAP_M
    0x8800b30:   53 47 5f 4c 45 5f 42 4f 4e 44 5f 50 41 53 53 4b    SG_LE_BOND_PASSK
    0x8800b40:   45 59 5f 44 49 53 50 4c 41 59 3a 70 61 73 73 6b    EY_DISPLAY:passk
    0x8800b50:   65 79 20 25 64 00 00 00 21 2a 2a 47 41 50 5f 4d    ey %d...!**GAP_M
    0x8800b60:   53 47 5f 4c 45 5f 42 4f 4e 44 5f 55 53 45 52 5f    SG_LE_BOND_USER_
    0x8800b70:   43 4f 4e 46 49 52 4d 41 54 49 4f 4e 3a 20 70 61    CONFIRMATION: pa
    0x8800b80:   73 73 6b 65 79 20 25 64 00 00 00 00 21 2a 2a 47    sskey %d....!**G
    0x8800b90:   41 50 5f 4d 53 47 5f 4c 45 5f 42 4f 4e 44 5f 50    AP_MSG_LE_BOND_P
    0x8800ba0:   41 53 53 4b 45 59 5f 49 4e 50 55 54 3a 20 63 6f    ASSKEY_INPUT: co
    0x8800bb0:   6e 6e 5f 69 64 20 25 64 00 00 00 00 21 2a 2a 47    nn_id %d....!**G
    0x8800bc0:   41 50 5f 4d 53 47 5f 4c 45 5f 42 4f 4e 44 5f 4f    AP_MSG_LE_BOND_O
    0x8800bd0:   4f 42 5f 49 4e 50 55 54 00 00 00 00 21 21 21 61    OB_INPUT....!!!a
    0x8800be0:   70 70 5f 68 61 6e 64 6c 65 5f 67 61 70 5f 6d 73    pp_handle_gap_ms
    0x8800bf0:   67 3a 20 75 6e 6b 6e 6f 77 6e 20 73 75 62 74 79    g: unknown subty
    0x8800c00:   70 65 20 25 64 00 00 00 21 2a 2a 47 41 50 5f 4d    pe %d...!**GAP_M
    0x8800c10:   53 47 5f 4c 45 5f 44 41 54 41 5f 4c 45 4e 5f 43    SG_LE_DATA_LEN_C
    0x8800c20:   48 41 4e 47 45 5f 49 4e 46 4f 3a 20 63 6f 6e 6e    HANGE_INFO: conn
    0x8800c30:   5f 69 64 20 25 64 2c 20 74 78 20 6f 63 74 65 74    _id %d, tx octet
    0x8800c40:   73 20 30 78 25 78 2c 20 6d 61 78 5f 74 78 5f 74    s 0x%x, max_tx_t
    0x8800c50:   69 6d 65 20 30 78 25 78 00 00 00 00 21 2a 2a 47    ime 0x%x....!**G
    0x8800c60:   41 50 5f 4d 53 47 5f 4c 45 5f 4d 4f 44 49 46 59    AP_MSG_LE_MODIFY
    0x8800c70:   5f 57 48 49 54 45 5f 4c 49 53 54 3a 20 6f 70 65    _WHITE_LIST: ope
    0x8800c80:   72 61 74 69 6f 6e 20 25 64 2c 20 63 61 75 73 65    ration %d, cause
    0x8800c90:   20 30 78 25 78 00 00 00 21 21 21 61 70 70 5f 67     0x%x...!!!app_g
    0x8800ca0:   61 70 5f 63 61 6c 6c 62 61 63 6b 3a 20 75 6e 68    ap_callback: unh
    0x8800cb0:   61 6e 64 6c 65 64 20 63 62 5f 74 79 70 65 20 30    andled cb_type 0
    0x8800cc0:   78 25 78 00 21 2a 2a 50 52 4f 46 49 4c 45 5f 45    x%x.!**PROFILE_E
    0x8800cd0:   56 54 5f 53 52 56 5f 52 45 47 5f 43 4f 4d 50 4c    VT_SRV_REG_COMPL
    0x8800ce0:   45 54 45 3a 20 72 65 73 75 6c 74 20 25 64 00 00    ETE: result %d..
    0x8800cf0:   21 2a 2a 50 52 4f 46 49 4c 45 5f 45 56 54 5f 53    !**PROFILE_EVT_S
    0x8800d00:   45 4e 44 5f 44 41 54 41 5f 43 4f 4d 50 4c 45 54    END_DATA_COMPLET
    0x8800d10:   45 3a 20 63 6f 6e 6e 5f 69 64 20 25 64 2c 20 63    E: conn_id %d, c
    0x8800d20:   61 75 73 65 20 30 78 25 78 2c 20 73 65 72 76 69    ause 0x%x, servi
    0x8800d30:   63 65 5f 69 64 20 25 64 2c 20 61 74 74 72 69 62    ce_id %d, attrib
    0x8800d40:   5f 69 64 78 20 30 78 25 78 2c 20 63 72 65 64 69    _idx 0x%x, credi
    0x8800d50:   74 73 20 25 64 00 00 00 21 2a 2a 50 52 4f 46 49    ts %d...!**PROFI
    0x8800d60:   4c 45 5f 45 56 54 5f 53 45 4e 44 5f 44 41 54 41    LE_EVT_SEND_DATA
    0x8800d70:   5f 43 4f 4d 50 4c 45 54 45 20 73 75 63 63 65 73    _COMPLETE succes
    0x8800d80:   73 00 00 00 21 21 21 50 52 4f 46 49 4c 45 5f 45    s...!!!PROFILE_E
    0x8800d90:   56 54 5f 53 45 4e 44 5f 44 41 54 41 5f 43 4f 4d    VT_SEND_DATA_COM
    0x8800da0:   50 4c 45 54 45 20 66 61 69 6c 65 64 00 00 00 00    PLETE failed....
    0x8800db0:   21 21 21 49 41 53 20 43 61 6c 6c 42 61 63 6b 2e    !!!IAS CallBack.
    0x8800dc0:   00 00 00 00 21 2a 2a 4b 4e 53 5f 4e 4f 54 49 46    ....!**KNS_NOTIF
    0x8800dd0:   59 5f 45 4e 41 42 4c 45 00 00 00 00 21 2a 2a 4b    Y_ENABLE....!**K
    0x8800de0:   4e 53 5f 4e 4f 54 49 46 59 5f 44 49 53 41 42 4c    NS_NOTIFY_DISABL
    0x8800df0:   45 00 00 00 21 2a 2a 4b 4e 53 5f 52 45 41 44 5f    E...!**KNS_READ_
    0x8800e00:   50 41 52 41 00 00 00 00 21 2a 2a 4b 4e 53 5f 57    PARA....!**KNS_W
    0x8800e10:   52 49 54 45 5f 50 41 52 41 20 25 78 00 00 00 00    RITE_PARA %x....
    0x8800e20:   21 2a 2a 42 41 53 5f 4e 4f 54 49 46 59 5f 42 41    !**BAS_NOTIFY_BA
    0x8800e30:   54 54 45 52 59 5f 4c 45 56 45 4c 5f 45 4e 41 42    TTERY_LEVEL_ENAB
    0x8800e40:   4c 45 00 00 21 2a 2a 42 41 53 5f 4e 4f 54 49 46    LE..!**BAS_NOTIF
    0x8800e50:   59 5f 42 41 54 54 45 52 59 5f 4c 45 56 45 4c 5f    Y_BATTERY_LEVEL_
    0x8800e60:   44 49 53 41 42 4c 45 00 21 2a 2a 42 41 53 5f 52    DISABLE.!**BAS_R
    0x8800e70:   45 41 44 5f 42 41 54 54 45 52 59 5f 4c 45 56 45    EAD_BATTERY_LEVE
    0x8800e80:   4c 3a 20 62 61 74 74 65 72 79 5f 6c 65 76 65 6c    L: battery_level
    0x8800e90:   20 25 64 00 21 21 21 67 61 70 5f 6c 69 62 5f 69     %d.!!!gap_lib_i
    0x8800ea0:   6e 69 74 3a 20 76 65 72 20 25 64 2c 20 46 5f 42    nit: ver %d, F_B
    0x8800eb0:   54 5f 4c 45 5f 35 5f 30 5f 53 55 50 50 4f 52 54    T_LE_5_0_SUPPORT
    0x8800ec0:   20 25 64 2c 20 46 5f 42 54 5f 4c 45 5f 35 5f 30     %d, F_BT_LE_5_0
    0x8800ed0:   5f 41 45 5f 41 44 56 5f 53 55 50 50 4f 52 54 20    _AE_ADV_SUPPORT 
    0x8800ee0:   25 64 2c 20 46 5f 42 54 5f 4c 45 5f 35 5f 30 5f    %d, F_BT_LE_5_0_
    0x8800ef0:   41 45 5f 53 43 41 4e 5f 53 55 50 50 4f 52 54 20    AE_SCAN_SUPPORT 
    0x8800f00:   25 64 2c 20 46 5f 42 54 5f 4c 45 5f 34 5f 31 5f    %d, F_BT_LE_4_1_
    0x8800f10:   53 55 50 50 4f 52 54 20 25 64 2c 20 46 5f 42 54    SUPPORT %d, F_BT
    0x8800f20:   5f 56 45 4e 44 4f 52 5f 46 45 41 54 55 52 45 5f    _VENDOR_FEATURE_
    0x8800f30:   53 55 50 50 4f 52 54 20 25 64 2c 20 46 5f 42 54    SUPPORT %d, F_BT
    0x8800f40:   5f 4c 45 5f 36 5f 30 5f 41 4f 41 5f 41 4f 44 5f    _LE_6_0_AOA_AOD_
    0x8800f50:   53 55 50 50 4f 52 54 20 25 64 2c 20 46 5f 42 54    SUPPORT %d, F_BT
    0x8800f60:   5f 4c 45 5f 36 5f 30 5f 41 4f 58 5f 43 4f 4e 4e    _LE_6_0_AOX_CONN
    0x8800f70:   4c 45 53 53 5f 53 55 50 50 4f 52 54 20 25 64 00    LESS_SUPPORT %d.
    0x8800f80:   21 21 21 67 61 70 5f 6c 69 62 5f 69 6e 69 74 3a    !!!gap_lib_init:
    0x8800f90:   20 46 5f 42 54 5f 4c 45 5f 53 4d 50 5f 53 43 5f     F_BT_LE_SMP_SC_
    0x8800fa0:   4f 4f 42 5f 53 55 50 50 4f 52 54 20 25 64 2c 20    OOB_SUPPORT %d, 
    0x8800fb0:   46 5f 42 54 5f 53 57 5f 52 45 53 45 54 5f 53 55    F_BT_SW_RESET_SU
    0x8800fc0:   50 50 4f 52 54 20 25 64 2c 20 46 5f 42 54 5f 50    PPORT %d, F_BT_P
    0x8800fd0:   41 54 43 48 5f 46 4f 52 5f 43 48 41 4e 47 45 5f    ATCH_FOR_CHANGE_
    0x8800fe0:   41 50 49 20 25 64 2c 20 46 5f 42 54 5f 44 4c 50    API %d, F_BT_DLP
    0x8800ff0:   53 5f 41 50 49 20 25 64 00 00 00 00 21 2a 2a 6c    S_API %d....!**l
    0x8801000:   65 5f 63 68 65 63 6b 5f 70 72 69 76 61 63 79 5f    e_check_privacy_
    0x8801010:   62 6f 6e 64 3a 20 69 64 78 20 25 64 20 70 72 69    bond: idx %d pri
    0x8801020:   76 61 63 79 20 64 65 76 69 63 65 00 21 2a 2a 6c    vacy device.!**l
    0x8801030:   65 5f 63 68 65 63 6b 5f 70 72 69 76 61 63 79 5f    e_check_privacy_
    0x8801040:   62 6f 6e 64 3a 20 6e 6f 74 20 70 72 69 76 61 63    bond: not privac
    0x8801050:   79 20 64 65 76 69 63 65 2c 20 63 61 75 73 65 20    y device, cause 
    0x8801060:   25 64 00 00 21 2a 2a 6c 65 5f 62 6f 6e 64 5f 67    %d..!**le_bond_g
    0x8801070:   65 74 5f 73 65 63 5f 6c 65 76 65 6c 3a 20 25 64    et_sec_level: %d
    0x8801080:   00 00 00 00                                        ....


** Section #10 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 1476 bytes


** Section #11 '.debug_frame' (SHT_PROGBITS)
    Size   : 3976 bytes


** Section #12 '.debug_info' (SHT_PROGBITS)
    Size   : 146152 bytes


** Section #13 '.debug_line' (SHT_PROGBITS)
    Size   : 23140 bytes


** Section #14 '.debug_loc' (SHT_PROGBITS)
    Size   : 9132 bytes


** Section #15 '.debug_macinfo' (SHT_PROGBITS)
    Size   : 118384 bytes


** Section #16 '.debug_pubnames' (SHT_PROGBITS)
    Size   : 5795 bytes


** Section #17 '.symtab' (SHT_SYMTAB)
    Size   : 19792 bytes (alignment 4)
    String table #18 '.strtab'
    Last local symbol no. 456


** Section #18 '.strtab' (SHT_STRTAB)
    Size   : 18344 bytes


** Section #19 '.note' (SHT_NOTE)
    Size   : 52 bytes (alignment 4)


** Section #20 '.comment' (SHT_PROGBITS)
    Size   : 23748 bytes


** Section #21 '.shstrtab' (SHT_STRTAB)
    Size   : 276 bytes


address     size       variable name                            type
0x00207ebc  0x6c       overlay_sections                         array[3] of T_OVERLAY_SECTION

address     size       variable name                            type
0x002080dc  0x8        scenario_name                            array[8] of char

address     size       variable name                            type
0x002080d9  0x1        bas_srv_id                               T_SERVER_ID

address     size       variable name                            type
0x002080da  0x1        dis_srv_id                               T_SERVER_ID

address     size       variable name                            type
0x002080d1  0x1        gIoState                                 IoState

address     size       variable name                            type
0x002080d2  0x1        gPowerFlg                                _Bool

address     size       variable name                            type
0x002080d0  0x1        gPxpState                                PxpState

address     size       variable name                            type
0x00207eb8  0x4        gTimeParaValue                           uint32_t

address     size       variable name                            type
0x002080db  0x1        g_pxp_immediate_alert_level              uint8_t

address     size       variable name                            type
0x00207eb4  0x1        g_pxp_linkloss_alert_level               uint8_t

address     size       variable name                            type
0x002080d4  0x1        gap_conn_state                           T_GAP_CONN_STATE

address     size       variable name                            type
0x002080d3  0x1        gap_dev_state                            T_GAP_DEV_STATE
0x002080d3  0x1(7:1)   gap_dev_state.gap_init_state             uint8_t
0x002080d3  0x1(6:1)   gap_dev_state.gap_adv_sub_state          uint8_t
0x002080d3  0x1(4:2)   gap_dev_state.gap_adv_state              uint8_t
0x002080d3  0x1(2:2)   gap_dev_state.gap_scan_state             uint8_t
0x002080d3  0x1(0:2)   gap_dev_state.gap_conn_state             uint8_t

address     size       variable name                            type
0x002080d5  0x1        ias_srv_id                               T_SERVER_ID

address     size       variable name                            type
0x002080d8  0x1        kns_srv_id                               T_SERVER_ID

address     size       variable name                            type
0x002080d6  0x1        lls_srv_id                               T_SERVER_ID

address     size       variable name                            type
0x002080d7  0x1        tps_srv_id                               T_SERVER_ID

address     size       variable name                            type
0x00810c6c  0x214      dis_attr_tbl                             array[19] of const T_ATTRIB_APPL

address     size       variable name                            type
0x00000000  0x2        dis_attr_tbl_size                        const uint16_t

address     size       variable name                            type
0x00810e80  0xc        dis_cbs                                  const T_FUN_GATT_SERVICE_CBS
0x00810e80  0x4        dis_cbs.read_attr_cb                     P_FUN_GATT_READ_ATTR_CB
0x00810e84  0x4        dis_cbs.write_attr_cb                    P_FUN_GATT_WRITE_ATTR_CB
0x00810e88  0x4        dis_cbs.cccd_update_cb                   P_FUN_GATT_CCCD_UPDATE_CB

address     size       variable name                            type
0x002080a8  0x14       dis_firmware_rev                         array[20] of uint8_t

address     size       variable name                            type
0x00208050  0x1        dis_firmware_rev_len                     uint8_t

address     size       variable name                            type
0x00208094  0x14       dis_hardware_rev                         array[20] of uint8_t

address     size       variable name                            type
0x0020804f  0x1        dis_hardware_rev_len                     uint8_t

address     size       variable name                            type
0x00207e94  0x1e       dis_ieee_data_list                       array[30] of uint8_t

address     size       variable name                            type
0x00207e84  0x1        dis_ieee_data_list_len                   uint8_t

address     size       variable name                            type
0x00208058  0x14       dis_manufacturer_name                    array[20] of uint8_t

address     size       variable name                            type
0x0020804c  0x1        dis_manufacturer_name_len                uint8_t

address     size       variable name                            type
0x0020806c  0x14       dis_model_number                         array[20] of uint8_t

address     size       variable name                            type
0x0020804d  0x1        dis_model_number_len                     uint8_t

address     size       variable name                            type
0x00207e85  0x7        dis_pnp_id                               array[7] of uint8_t

address     size       variable name                            type
0x00208080  0x14       dis_serial_number                        array[20] of uint8_t

address     size       variable name                            type
0x0020804e  0x1        dis_serial_number_len                    uint8_t

address     size       variable name                            type
0x002080bc  0x14       dis_software_rev                         array[20] of uint8_t

address     size       variable name                            type
0x00208051  0x1        dis_software_rev_len                     uint8_t

address     size       variable name                            type
0x00207e8c  0x8        dis_system_id                            array[8] of uint8_t

address     size       variable name                            type
0x00208054  0x4        pfn_dis_cb                               P_FUN_SERVER_GENERAL_CB

address     size       variable name                            type
0x00810ba8  0x10       GATT_UUID128_KNS_SERVICE                 array[16] of const uint8_t

address     size       variable name                            type
0x00207e80  0x4        gParaValue                               uint32_t

address     size       variable name                            type
0x00810bb8  0xa8       kns_attr_tbl                             array[6] of const T_ATTRIB_APPL

address     size       variable name                            type
0x00000000  0x2        kns_attr_tbl_size                        const uint16_t

address     size       variable name                            type
0x00810c60  0xc        kns_cbs                                  const T_FUN_GATT_SERVICE_CBS
0x00810c60  0x4        kns_cbs.read_attr_cb                     P_FUN_GATT_READ_ATTR_CB
0x00810c64  0x4        kns_cbs.write_attr_cb                    P_FUN_GATT_WRITE_ATTR_CB
0x00810c68  0x4        kns_cbs.cccd_update_cb                   P_FUN_GATT_CCCD_UPDATE_CB

address     size       variable name                            type
0x00208048  0x4        pfn_kns_cb                               P_FUN_SERVER_GENERAL_CB

address     size       variable name                            type
0x00810b2c  0x70       bas_attr_tbl                             array[4] of const T_ATTRIB_APPL

address     size       variable name                            type
0x00810b9c  0xc        bas_cbs                                  const T_FUN_GATT_SERVICE_CBS
0x00810b9c  0x4        bas_cbs.read_attr_cb                     P_FUN_GATT_READ_ATTR_CB
0x00810ba0  0x4        bas_cbs.write_attr_cb                    P_FUN_GATT_WRITE_ATTR_CB
0x00810ba4  0x4        bas_cbs.cccd_update_cb                   P_FUN_GATT_CCCD_UPDATE_CB

address     size       variable name                            type
0x00208041  0x1        bas_read_battery_level_pending           _Bool

address     size       variable name                            type
0x00208040  0x1        battery_level                            uint8_t

address     size       variable name                            type
0x00208044  0x4        pfn_bas_cb                               P_FUN_SERVER_GENERAL_CB

address     size       variable name                            type
0x0020803c  0x4        pfn_tps_cb                               P_FUN_SERVER_GENERAL_CB

address     size       variable name                            type
0x00810acc  0x54       tps_attr_tbl                             array[3] of const T_ATTRIB_APPL

address     size       variable name                            type
0x00810b20  0xc        tps_cbs                                  const T_FUN_GATT_SERVICE_CBS
0x00810b20  0x4        tps_cbs.read_attr_cb                     P_FUN_GATT_READ_ATTR_CB
0x00810b24  0x4        tps_cbs.write_attr_cb                    P_FUN_GATT_WRITE_ATTR_CB
0x00810b28  0x4        tps_cbs.cccd_update_cb                   P_FUN_GATT_CCCD_UPDATE_CB

address     size       variable name                            type
0x00208038  0x1        tx_power_value                           uint8_t

address     size       variable name                            type
0x00208030  0x1        lls_alert_level                          uint8_t

address     size       variable name                            type
0x00810a6c  0x54       lls_attr_tbl                             array[3] of const T_ATTRIB_APPL

address     size       variable name                            type
0x00000000  0x4        lls_attr_tbl_size                        const int

address     size       variable name                            type
0x00810ac0  0xc        lls_cbs                                  const T_FUN_GATT_SERVICE_CBS
0x00810ac0  0x4        lls_cbs.read_attr_cb                     P_FUN_GATT_READ_ATTR_CB
0x00810ac4  0x4        lls_cbs.write_attr_cb                    P_FUN_GATT_WRITE_ATTR_CB
0x00810ac8  0x4        lls_cbs.cccd_update_cb                   P_FUN_GATT_CCCD_UPDATE_CB

address     size       variable name                            type
0x00208034  0x4        pfn_lls_cb                               P_FUN_SERVER_GENERAL_CB

address     size       variable name                            type
0x00810a0c  0x54       ias_attr_tbl                             array[3] of const T_ATTRIB_APPL

address     size       variable name                            type
0x00000000  0x4        ias_attr_tbl_size                        const int

address     size       variable name                            type
0x00810a60  0xc        ias_cbs                                  const T_FUN_GATT_SERVICE_CBS
0x00810a60  0x4        ias_cbs.read_attr_cb                     P_FUN_GATT_READ_ATTR_CB
0x00810a64  0x4        ias_cbs.write_attr_cb                    P_FUN_GATT_WRITE_ATTR_CB
0x00810a68  0x4        ias_cbs.cccd_update_cb                   P_FUN_GATT_CCCD_UPDATE_CB

address     size       variable name                            type
0x0020802c  0x4        pfn_ias_cb                               P_FUN_SERVER_GENERAL_CB

address     size       variable name                            type
0x00207f5c  0x84       CPU_StoreReg                             array[33] of uint32_t

address     size       variable name                            type
0x00208008  0x24       GPIO_StoreReg                            array[9] of uint32_t

address     size       variable name                            type
0x00207f50  0x4        PeriIntStoreReg                          uint32_t

address     size       variable name                            type
0x00207fe0  0x28       Pinmux_StoreReg                          array[10] of uint32_t

address     size       variable name                            type
0x00207f58  0x4        User_IO_EnterDlpsCB                      DLPS_IO_EnterDlpsCB

address     size       variable name                            type
0x00207f54  0x4        User_IO_ExitDlpsCB                       DLPS_IO_ExitDlpsCB

address     size       variable name                            type
0x00207e6b  0x15       adv_data                                 array[21] of uint8_t

address     size       variable name                            type
0x00207e5c  0x1        allowedPxpEnterDlps                      _Bool

address     size       variable name                            type
0x00207e5d  0xe        scan_rsp_data                            array[14] of uint8_t

address     size       variable name                            type
0x00207f44  0x4        gActCnt                                  uint32_t

address     size       variable name                            type
0x00207f38  0x1        gIoMode                                  uint8_t

address     size       variable name                            type
0x00207f39  0x1        gKeyStatus                               KeyStatus

address     size       variable name                            type
0x00207f3a  0x1        keystatus                                uint8_t

address     size       variable name                            type
0x00207f40  0x4        xPeriodHigh                              uint32_t

address     size       variable name                            type
0x00207f3c  0x4        xPeriodLow                               uint32_t

address     size       variable name                            type
0x00207f4c  0x4        xTimerLongPress                          TimerHandle_t

address     size       variable name                            type
0x00207f48  0x4        xTimerPxpIO                              TimerHandle_t

address     size       variable name                            type
0x00207f2c  0x4        app_task_handle                          pointer to unknown Type 

address     size       variable name                            type
0x00207f30  0x4        evt_queue_handle                         pointer to unknown Type 

address     size       variable name                            type
0x00207f34  0x4        io_queue_handle                          pointer to unknown Type 

address     size       variable name                            type
0x008108bc  0xc        app_cb_table                             const T_APP_CB_TABLE
0x008108bc  0x4        app_cb_table.app_cb_signature            uint32_t
0x008108c0  0x4        app_cb_table.app_cb_numbers              uint32_t
0x008108c4  0x4        app_cb_table.app_cb_addr                 array[1] of uint32_t

address     size       variable name                            type
0x0080e1e0  0x220      auth_header                              const T_AUTH_HEADER_FORMAT
0x0080e1e0  0x100      auth_header.payload_signature            array[256] of uint8_t
0x0080e2e0  0x10       auth_header.payload_mac                  array[16] of uint8_t
0x0080e2f0  0x100      auth_header.header_signature             array[256] of uint8_t
0x0080e3f0  0x10       auth_header.header_mac                   array[16] of uint8_t

address     size       variable name                            type
0x0080e000  0x1e0      img_header                               const T_IMG_HEADER_FORMAT
0x0080e000  0xc        img_header.ctrl_header                   T_IMG_CTRL_HEADER_FORMAT
0x0080e000  0x1        img_header.ctrl_header.ic_type           uint8_t
0x0080e001  0x1        img_header.ctrl_header.secure_version    uint8_t
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag         anonymous
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag.value   uint16_t
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag.flag_value anonymous
0x0080e002  0x2(15:1)  img_header.ctrl_header.ctrl_flag.flag_value.xip uint16_t
0x0080e002  0x2(14:1)  img_header.ctrl_header.ctrl_flag.flag_value.enc uint16_t
0x0080e002  0x2(13:1)  img_header.ctrl_header.ctrl_flag.flag_value.load_when_boot uint16_t
0x0080e002  0x2(12:1)  img_header.ctrl_header.ctrl_flag.flag_value.enc_load uint16_t
0x0080e002  0x2(9:3)   img_header.ctrl_header.ctrl_flag.flag_value.enc_key_select uint16_t
0x0080e002  0x2(8:1)   img_header.ctrl_header.ctrl_flag.flag_value.not_ready uint16_t
0x0080e002  0x2(7:1)   img_header.ctrl_header.ctrl_flag.flag_value.not_obsolete uint16_t
0x0080e002  0x2(6:1)   img_header.ctrl_header.ctrl_flag.flag_value.integrity_check_en_in_boot uint16_t
0x0080e002  0x2(0:6)   img_header.ctrl_header.ctrl_flag.flag_value.rsvd uint16_t
0x0080e004  0x2        img_header.ctrl_header.image_id          uint16_t
0x0080e006  0x2        img_header.ctrl_header.crc16             uint16_t
0x0080e008  0x4        img_header.ctrl_header.payload_len       uint32_t
0x0080e00c  0x10       img_header.uuid                          array[16] of uint8_t
0x0080e01c  0x4        img_header.exe_base                      uint32_t
0x0080e020  0x4        img_header.load_base                     uint32_t
0x0080e024  0x4        img_header.load_len                      uint32_t
0x0080e028  0x4        img_header.img_base                      uint32_t
0x0080e02c  0x4        img_header.rsvd0                         array[4] of uint8_t
0x0080e030  0x4        img_header.magic_pattern                 uint32_t
0x0080e034  0x10       img_header.dec_key                       array[16] of uint8_t
0x0080e044  0x1c       img_header.rsvd1                         array[28] of uint8_t
0x0080e060  0x10       img_header.git_ver                       T_VERSION_FORMAT
0x0080e060  0x4        img_header.git_ver.ver_info              anonymous
0x0080e060  0x4        img_header.git_ver.ver_info.version      uint32_t
0x0080e060  0x4        img_header.git_ver.ver_info.sub_version  anonymous
0x0080e060  0x4(28:4)  img_header.git_ver.ver_info.sub_version._version_major uint32_t
0x0080e060  0x4(20:8)  img_header.git_ver.ver_info.sub_version._version_minor uint32_t
0x0080e060  0x4(5:15)  img_header.git_ver.ver_info.sub_version._version_revision uint32_t
0x0080e060  0x4(0:5)   img_header.git_ver.ver_info.sub_version._version_reserve uint32_t
0x0080e064  0x4        img_header.git_ver._version_commitid     uint32_t
0x0080e068  0x8        img_header.git_ver._customer_name        array[8] of uint8_t
0x0080e070  0x104      img_header.rsaPubKey                     T_RSA_PUBLIC_KEY
0x0080e070  0x100      img_header.rsaPubKey.N                   array[256] of uint8_t
0x0080e170  0x4        img_header.rsaPubKey.E                   array[4] of uint8_t
0x0080e174  0x20       img_header.sha256                        array[32] of uint8_t
0x0080e194  0x44       img_header.rsvd2                         array[68] of uint8_t
0x0080e1d8  0x4        img_header.app_cb_signature              uint32_t
0x0080e1dc  0x4        img_header.app_cb_table_base_address     uint32_t

address     size       variable name                            type
0x00207f28  0x4        user_wdg_cb                              BOOL_WDG_CB

