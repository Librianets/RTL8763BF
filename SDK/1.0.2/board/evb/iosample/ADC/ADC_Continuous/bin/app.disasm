
========================================================================

** ELF Header Information

    File Name: F:\zhoulonghui\Project-201902-before\BT-MESH\REALTEK\SDK\00011936-BEE2-SDK-v1.0.2\BEE2-SDK-v1.0.2\board\evb\iosample\ADC\ADC_Continuous\Objects\app.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: 0x0080e409
    Flags: EF_ARM_HASENTRY + EF_ARM_ABI_FLOAT_HARD (0x05000402)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Hard float procedure-call standard

    Built with
    Component: ARM Compiler 5.06 update 6 (build 750) Tool: armasm [4d35ec]
    Component: ARM Compiler 5.06 update 6 (build 750) Tool: armlink [4d35ed]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 2
    Section header entries: 22

    Program header offset: 160032 (0x00027120)
    Section header offset: 160096 (0x00027160)

    Section header string table index: 21

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_W + PF_R + PF_ARM_ENTRY]
    Size : 9384 bytes (9288 bytes in file)
    Virtual address: 0x0080e000 (Alignment 4)


====================================

** Program header #1 (PT_LOAD) [PF_R]
    Size : 108 bytes
    Virtual address: 0x08800000 (Alignment 4)


========================================================================

** Section #1 'app.bin' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 1024 bytes (alignment 4)
    Address: 0x0080e000

    0x80e000:   05 00 01 01 93 27 00 00 00 01 00 00 6d 67 de f1    .....'......mg..
    0x80e010:   3e 33 e8 11 b1 02 4d 2d f4 0c de 01 00 e4 80 00    >3....M-........
    0x80e020:   00 e4 80 00 00 00 00 00 00 e0 80 00 00 00 00 00    ................
    0x80e030:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e040:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e050:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e060:   01 20 00 00 a8 ac 83 2a 73 64 6b 23 23 23 23 23    . .....*sdk#####
    0x80e070:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e080:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e090:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e100:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e110:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e120:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e130:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e140:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e150:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e160:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e170:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e180:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e190:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1d0:   00 00 00 00 00 00 00 00 01 d1 85 0e 5c 94 20 00    ............\. .
    0x80e1e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e200:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e210:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e220:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e230:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e240:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e250:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e260:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e270:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e280:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e290:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2e0:   ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
    0x80e2f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e300:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e310:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e320:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e330:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e340:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e350:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e360:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e370:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e380:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e390:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3f0:   ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................


** Section #2 'FLASH_START_ADDR' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 8 bytes (alignment 4)
    Address: 0x0080e400

    $t
    RESET
    $v0
    Reset_Handler
;;; ..\\..\\..\\..\\..\\src\\mcu\\rtl876x\\arm\\startup_rtl8762c.s
;;;96                     IMPORT SystemInit
;;;96                     LDR    R0, =SystemInit
        0x0080e400:    4800        .H      LDR      r0,[pc,#0] ; [0x80e404] = 0x80e50b
;;;97                     BX     R0
        0x0080e402:    4700        .G      BX       r0
    $d
        0x0080e404:    0080e50b    ....    DCD    8447243

** Section #3 'FLASH_TEXT' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 584 bytes (alignment 4)
    Address: 0x0080e408

    $t
    !!!main
    __main
        0x0080e408:    f000f802    ....    BL       __scatterload ; 0x80e410
        0x0080e40c:    f5f9f3fc    ....    BL       __rt_entry ; 0x207c08
    !!!scatter
    __scatterload
    __scatterload_rt2
    __scatterload_rt2_thumb_only
        0x0080e410:    a00a        ..      ADR      r0,{pc}+0x2c ; 0x80e43c
        0x0080e412:    e8900c00    ....    LDM      r0,{r10,r11}
        0x0080e416:    4482        .D      ADD      r10,r10,r0
        0x0080e418:    4483        .D      ADD      r11,r11,r0
        0x0080e41a:    f1aa0701    ....    SUB      r7,r10,#1
    __scatterload_null
        0x0080e41e:    45da        .E      CMP      r10,r11
        0x0080e420:    d101        ..      BNE      0x80e426 ; __scatterload_null + 8
        0x0080e422:    f5f9f3f1    ....    BL       __rt_entry ; 0x207c08
        0x0080e426:    f2af0e09    ....    ADR      lr,{pc}-7 ; 0x80e41f
        0x0080e42a:    e8ba000f    ....    LDM      r10!,{r0-r3}
        0x0080e42e:    f0130f01    ....    TST      r3,#1
        0x0080e432:    bf18        ..      IT       NE
        0x0080e434:    1afb        ..      SUBNE    r3,r7,r3
        0x0080e436:    f0430301    C...    ORR      r3,r3,#1
        0x0080e43a:    4718        .G      BX       r3
    $d
        0x0080e43c:    000001d4    ....    DCD    468
        0x0080e440:    00000214    ....    DCD    532
    $t
    !!handler_copy
    __scatterload_copy
        0x0080e444:    3a10        .:      SUBS     r2,r2,#0x10
        0x0080e446:    bf24        $.      ITT      CS
        0x0080e448:    c878        x.      LDMCS    r0!,{r3-r6}
        0x0080e44a:    c178        x.      STMCS    r1!,{r3-r6}
        0x0080e44c:    d8fa        ..      BHI      __scatterload_copy ; 0x80e444
        0x0080e44e:    0752        R.      LSLS     r2,r2,#29
        0x0080e450:    bf24        $.      ITT      CS
        0x0080e452:    c830        0.      LDMCS    r0!,{r4,r5}
        0x0080e454:    c130        0.      STMCS    r1!,{r4,r5}
        0x0080e456:    bf44        D.      ITT      MI
        0x0080e458:    6804        .h      LDRMI    r4,[r0,#0]
        0x0080e45a:    600c        .`      STRMI    r4,[r1,#0]
        0x0080e45c:    4770        pG      BX       lr
        0x0080e45e:    0000        ..      MOVS     r0,r0
    !!handler_zi
    __scatterload_zeroinit
        0x0080e460:    2300        .#      MOVS     r3,#0
        0x0080e462:    2400        .$      MOVS     r4,#0
        0x0080e464:    2500        .%      MOVS     r5,#0
        0x0080e466:    2600        .&      MOVS     r6,#0
        0x0080e468:    3a10        .:      SUBS     r2,r2,#0x10
        0x0080e46a:    bf28        (.      IT       CS
        0x0080e46c:    c178        x.      STMCS    r1!,{r3-r6}
        0x0080e46e:    d8fb        ..      BHI      0x80e468 ; __scatterload_zeroinit + 8
        0x0080e470:    0752        R.      LSLS     r2,r2,#29
        0x0080e472:    bf28        (.      IT       CS
        0x0080e474:    c130        0.      STMCS    r1!,{r4,r5}
        0x0080e476:    bf48        H.      IT       MI
        0x0080e478:    600b        .`      STRMI    r3,[r1,#0]
        0x0080e47a:    4770        pG      BX       lr
    .app.flash.text
    debug_monitor_enable
;;;1734           SCB->SHP[((uint32_t)(IRQn) & 0xF) - 4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);
        0x0080e47c:    4945        EI      LDR      r1,[pc,#276] ; [0x80e594] = 0xe000e00c
        0x0080e47e:    2060        `       MOVS     r0,#0x60
        0x0080e480:    f8810d14    ....    STRB     r0,[r1,#0xd14]
;;; .\..\..\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;298        CoreDebug->DEMCR |= CoreDebug_DEMCR_MON_EN_Msk | CoreDebug_DEMCR_TRCENA_Msk;
        0x0080e484:    4844        DH      LDR      r0,[pc,#272] ; [0x80e598] = 0xe000edfc
        0x0080e486:    6801        .h      LDR      r1,[r0,#0]
        0x0080e488:    4a44        DJ      LDR      r2,[pc,#272] ; [0x80e59c] = 0x1010000
        0x0080e48a:    4311        .C      ORRS     r1,r1,r2
        0x0080e48c:    6001        .`      STR      r1,[r0,#0]
;;;299    
;;;300        //set DWT compare registers (max 4 comparators)
;;;301        //watch_point_0_setting(0x1000180C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_WRITE);
;;;302        //watch_point_1_setting(0x10000004, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;303        //watch_point_2_setting(0x10000008, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;304        //watch_point_3_setting(0x1000000C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;305    
;;;306        //enable DWT control register
;;;307        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
        0x0080e48e:    4844        DH      LDR      r0,[pc,#272] ; [0x80e5a0] = 0xe0001000
        0x0080e490:    6801        .h      LDR      r1,[r0,#0]
        0x0080e492:    f0410101    A...    ORR      r1,r1,#1
        0x0080e496:    6001        .`      STR      r1,[r0,#0]
;;;308    
;;;309        return;
;;;310    }
        0x0080e498:    4770        pG      BX       lr
    ram_init
;;;311    
;;;312    APP_FLASH_TEXT_SECTION
;;;313    void ram_init(void)
;;;314    {
        0x0080e49a:    b510        ..      PUSH     {r4,lr}
;;;315        //copy data on ro
;;;316        extern char Image$$RAM_DATA_ON$$RO$$Base[];
;;;317        extern char Load$$RAM_DATA_ON$$RO$$Base[];
;;;318        extern unsigned int Image$$RAM_DATA_ON$$RO$$Length;
;;;319    
;;;320        memcpy(Image$$RAM_DATA_ON$$RO$$Base,
        0x0080e49c:    4a41        AJ      LDR      r2,[pc,#260] ; [0x80e5a4] = 0x1b98
        0x0080e49e:    4942        BI      LDR      r1,[pc,#264] ; [0x80e5a8] = 0x80e744
        0x0080e4a0:    4842        BH      LDR      r0,[pc,#264] ; [0x80e5ac] = 0x207c00
        0x0080e4a2:    f44bf4fa    K...    BL       __aeabi_memcpy ; 0x59e9a
;;;321               Load$$RAM_DATA_ON$$RO$$Base,
;;;322               (unsigned int)&Image$$RAM_DATA_ON$$RO$$Length);
;;;323    
;;;324        //copy data on rw
;;;325        extern char Image$$RAM_DATA_ON$$RW$$Base[];
;;;326        extern char Load$$RAM_DATA_ON$$RW$$Base[];
;;;327        extern unsigned int Image$$RAM_DATA_ON$$RW$$Length;
;;;328    
;;;329        memcpy(Image$$RAM_DATA_ON$$RW$$Base,
        0x0080e4a6:    4a42        BJ      LDR      r2,[pc,#264] ; [0x80e5b0] = 0xac
        0x0080e4a8:    4942        BI      LDR      r1,[pc,#264] ; [0x80e5b4] = 0x8102dc
        0x0080e4aa:    4843        CH      LDR      r0,[pc,#268] ; [0x80e5b8] = 0x209798
        0x0080e4ac:    f44bf4f5    K...    BL       __aeabi_memcpy ; 0x59e9a
;;;330               Load$$RAM_DATA_ON$$RW$$Base,
;;;331               (unsigned int)&Image$$RAM_DATA_ON$$RW$$Length);
;;;332    
;;;333        //clear data on zi
;;;334        extern char Image$$RAM_DATA_ON$$ZI$$Base[];
;;;335        extern unsigned int Image$$RAM_DATA_ON$$ZI$$Length;
;;;336    
;;;337        memset(Image$$RAM_DATA_ON$$ZI$$Base,
        0x0080e4b0:    4942        BI      LDR      r1,[pc,#264] ; [0x80e5bc] = 0x60
        0x0080e4b2:    4843        CH      LDR      r0,[pc,#268] ; [0x80e5c0] = 0x209844
        0x0080e4b4:    f44bf5b2    K...    BL       __aeabi_memclr ; 0x5a01c
;;;338               0,
;;;339               (unsigned int)&Image$$RAM_DATA_ON$$ZI$$Length);
;;;340    
;;;341        //copy cache ro
;;;342        extern char Image$$CACHE_DATA_ON$$RO$$Base[];
;;;343        extern char Load$$CACHE_DATA_ON$$RO$$Base[];
;;;344        extern unsigned int Image$$CACHE_DATA_ON$$RO$$Length;
;;;345    
;;;346        memcpy(Image$$CACHE_DATA_ON$$RO$$Base,
        0x0080e4b8:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e4bc:    4a41        AJ      LDR      r2,[pc,#260] ; [0x80e5c4] = 0
        0x0080e4be:    4942        BI      LDR      r1,[pc,#264] ; [0x80e5c8] = 0x810448
        0x0080e4c0:    4842        BH      LDR      r0,[pc,#264] ; [0x80e5cc] = 0x21c000
        0x0080e4c2:    f44bb4ea    K...    B        __aeabi_memcpy ; 0x59e9a
    pre_main
;;;347               Load$$CACHE_DATA_ON$$RO$$Base,
;;;348               (unsigned int)&Image$$CACHE_DATA_ON$$RO$$Length);
;;;349    }
;;;350    
;;;351    APP_FLASH_TEXT_SECTION
;;;352    void SystemInit(void)
;;;353    {
;;;354        //init pre_main and main functions
;;;355        extern void pre_main(void);
;;;356        app_pre_main = (APP_MAIN_FUNC)pre_main;
;;;357        app_main = (APP_MAIN_FUNC)common_main;
;;;358    
;;;359        /******** update otp here**********/
;;;360        //ram config
;;;361        OTP->appDataSize = APP_GLOBAL_SIZE;
;;;362        OTP->heapDataONSize = HEAP_DATA_ON_SIZE;
;;;363        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;364    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;365        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
;;;366    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;367        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;368    #else
;;;369        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;370    #endif
;;;371    
;;;372    
;;;373        //flash config
;;;374        /*config enable flash block proect depending on flash layout and flash id*/
;;;375    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;376        OTP->bp_enable = 1;
;;;377    #else
;;;378        OTP->bp_enable = 0;
;;;379    #endif
;;;380        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
;;;381    
;;;382    
;;;383        //os config
;;;384        /*config enable check task stack overflow*/
;;;385    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;386        OTP->checkForStackOverflow = 1;
;;;387    #else
;;;388        OTP->checkForStackOverflow = 0;
;;;389    #endif
;;;390    
;;;391    
;;;392        //platform config
;;;393        /*config enable platform assert*/
;;;394    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;395        OTP->enableASSERT = 1;
;;;396    #else
;;;397        OTP->enableASSERT = 0;
;;;398    #endif
;;;399    
;;;400        /*Print all log in log buffer before entering DLPS */
;;;401    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;402        OTP->printAllLogBeforeEnterDLPS = 1;
;;;403    #else
;;;404        OTP->printAllLogBeforeEnterDLPS = 0;
;;;405    #endif
;;;406    
;;;407        /*config enable log or not*/
;;;408    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;409        OTP->logDisable = 0;
;;;410    #else
;;;411        OTP->logDisable = 1;
;;;412    #endif
;;;413    
;;;414        /*config enable swd pinmux*/
;;;415    #if (SWD_PINMUX_ENABLE == 1)
;;;416        OTP->SWD_ENABLE = 1;
;;;417    #else
;;;418        OTP->SWD_ENABLE = 0;
;;;419    #endif
;;;420    
;;;421        /*config enable watch dog in rom*/
;;;422    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;423        OTP->wdgEnableInRom = 1;
;;;424    #else
;;;425        OTP->wdgEnableInRom = 0;
;;;426    #endif
;;;427    
;;;428        /*config watch dog mode in rom, defualt reset all*/
;;;429        OTP->wdgMode = ROM_WATCH_DOG_MODE;
;;;430    
;;;431    
;;;432        //app config
;;;433        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
;;;434        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
;;;435        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
;;;436        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
;;;437    
;;;438        /*config bt stack parameters in rom*/
;;;439    #ifdef BT_STACK_CONFIG_ENABLE
;;;440        bt_stack_config_init();
;;;441    #endif
;;;442    
;;;443    //add more otp config here
;;;444    }
;;;445    
;;;446    APP_FLASH_TEXT_SECTION
;;;447    void pre_main(void)
;;;448    {
        0x0080e4c6:    b538        8.      PUSH     {r3-r5,lr}
;;;449        __disable_irq();
        0x0080e4c8:    b672        r.      CPSID    i
;;;450    
;;;451        ram_init();
        0x0080e4ca:    f7ffffe6    ....    BL       ram_init ; 0x80e49a
;;;452    
;;;453        load_overlay(OVERLAY_SCENARIO_BOOT_ONCE);
        0x0080e4ce:    2000        .       MOVS     r0,#0
        0x0080e4d0:    f5f9f798    ....    BL       load_overlay ; 0x208404
;;;454    
;;;455        setlocale(LC_ALL, "C");
        0x0080e4d4:    a13e        >.      ADR      r1,{pc}+0xfc ; 0x80e5d0
        0x0080e4d6:    201f        .       MOVS     r0,#0x1f
        0x0080e4d8:    f44bf48c    K...    BL       setlocale ; 0x59df4
;;;456    
;;;457        BOOT_PRINT_ERROR2("SDK Ver: %s, Build Time: %s",
        0x0080e4dc:    f04f5505    O..U    MOV      r5,#0x21400000
        0x0080e4e0:    a13c        <.      ADR      r1,{pc}+0xf4 ; 0x80e5d4
        0x0080e4e2:    4628        (F      MOV      r0,r5
        0x0080e4e4:    f7f9dcc1    ....    BL       trace_string ; 0x7e6a
        0x0080e4e8:    4604        .F      MOV      r4,r0
        0x0080e4ea:    a141        A.      ADR      r1,{pc}+0x106 ; 0x80e5f0
        0x0080e4ec:    4628        (F      MOV      r0,r5
        0x0080e4ee:    f7f9dcbc    ....    BL       trace_string ; 0x7e6a
        0x0080e4f2:    4603        .F      MOV      r3,r0
        0x0080e4f4:    2202        ."      MOVS     r2,#2
        0x0080e4f6:    4940        @I      LDR      r1,[pc,#256] ; [0x80e5f8] = 0x8800000
        0x0080e4f8:    4840        @H      LDR      r0,[pc,#256] ; [0x80e5fc] = 0x21100300
        0x0080e4fa:    9400        ..      STR      r4,[sp,#0]
        0x0080e4fc:    f7f9daaf    ....    BL       log_buffer ; 0x7a5e
;;;458                          TRACE_STRING(VERSION_BUILD_STR),
;;;459                          TRACE_STRING(BUILDING_TIME));
;;;460    
;;;461        AppUpdateVectorTable();
        0x0080e500:    f5fbf1d0    ....    BL       AppUpdateVectorTable ; 0x2098a4
;;;462    
;;;463        debug_monitor_enable();
        0x0080e504:    e8bd4038    ..8@    POP      {r3-r5,lr}
        0x0080e508:    e7b8        ..      B        debug_monitor_enable ; 0x80e47c
    SystemInit
;;; .\..\..\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (356)
        0x0080e50a:    f2af0045    ..E.    ADR      r0,{pc}-0x43 ; 0x80e4c7
        0x0080e50e:    493c        <I      LDR      r1,[pc,#240] ; [0x80e600] = 0x200c38
;;;357        app_main = (APP_MAIN_FUNC)common_main;
        0x0080e510:    6008        .`      STR      r0,[r1,#0]
        0x0080e512:    493d        =I      LDR      r1,[pc,#244] ; [0x80e608] = 0x200c3c
        0x0080e514:    483b        ;H      LDR      r0,[pc,#236] ; [0x80e604] = 0x207d91
;;;358    
;;;359        /******** update otp here**********/
;;;360        //ram config
;;;361        OTP->appDataSize = APP_GLOBAL_SIZE;
        0x0080e516:    6008        .`      STR      r0,[r1,#0]
        0x0080e518:    f44f1000    O...    MOV      r0,#0x200000
        0x0080e51c:    f44f410c    O..A    MOV      r1,#0x8c00
;;;362        OTP->heapDataONSize = HEAP_DATA_ON_SIZE;
        0x0080e520:    f8c01384    ....    STR      r1,[r0,#0x384]
        0x0080e524:    f44f41f0    O..A    MOV      r1,#0x7800
;;;363        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;364    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;365        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
        0x0080e528:    f8c01388    ....    STR      r1,[r0,#0x388]
        0x0080e52c:    4937        7I      LDR      r1,[pc,#220] ; [0x80e60c] = 0xa2aa0003
;;;366    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;367        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;368    #else
;;;369        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;370    #endif
;;;371    
;;;372    
;;;373        //flash config
;;;374        /*config enable flash block proect depending on flash layout and flash id*/
;;;375    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;376        OTP->bp_enable = 1;
;;;377    #else
;;;378        OTP->bp_enable = 0;
        0x0080e52e:    f8c013cc    ....    STR      r1,[r0,#0x3cc]
        0x0080e532:    f890134d    ..M.    LDRB     r1,[r0,#0x34d]
        0x0080e536:    f0210108    !...    BIC      r1,r1,#8
        0x0080e53a:    f880134d    ..M.    STRB     r1,[r0,#0x34d]
;;;379    #endif
;;;380        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
        0x0080e53e:    2106        .!      MOVS     r1,#6
        0x0080e540:    f880134f    ..O.    STRB     r1,[r0,#0x34f]
;;;381    
;;;382    
;;;383        //os config
;;;384        /*config enable check task stack overflow*/
;;;385    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;386        OTP->checkForStackOverflow = 1;
        0x0080e544:    f8901378    ..x.    LDRB     r1,[r0,#0x378]
;;;387    #else
;;;388        OTP->checkForStackOverflow = 0;
;;;389    #endif
;;;390    
;;;391    
;;;392        //platform config
;;;393        /*config enable platform assert*/
;;;394    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;395        OTP->enableASSERT = 1;
;;;396    #else
;;;397        OTP->enableASSERT = 0;
;;;398    #endif
;;;399    
;;;400        /*Print all log in log buffer before entering DLPS */
;;;401    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;402        OTP->printAllLogBeforeEnterDLPS = 1;
        0x0080e548:    f0410126    A.&.    ORR      r1,r1,#0x26
        0x0080e54c:    f8801378    ..x.    STRB     r1,[r0,#0x378]
;;;403    #else
;;;404        OTP->printAllLogBeforeEnterDLPS = 0;
;;;405    #endif
;;;406    
;;;407        /*config enable log or not*/
;;;408    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;409        OTP->logDisable = 0;
        0x0080e550:    f890139a    ....    LDRB     r1,[r0,#0x39a]
        0x0080e554:    f0210101    !...    BIC      r1,r1,#1
        0x0080e558:    f880139a    ....    STRB     r1,[r0,#0x39a]
;;;410    #else
;;;411        OTP->logDisable = 1;
;;;412    #endif
;;;413    
;;;414        /*config enable swd pinmux*/
;;;415    #if (SWD_PINMUX_ENABLE == 1)
;;;416        OTP->SWD_ENABLE = 1;
        0x0080e55c:    f8901334    ..4.    LDRB     r1,[r0,#0x334]
        0x0080e560:    f0410101    A...    ORR      r1,r1,#1
        0x0080e564:    f8801334    ..4.    STRB     r1,[r0,#0x334]
;;;417    #else
;;;418        OTP->SWD_ENABLE = 0;
;;;419    #endif
;;;420    
;;;421        /*config enable watch dog in rom*/
;;;422    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;423        OTP->wdgEnableInRom = 1;
;;;424    #else
;;;425        OTP->wdgEnableInRom = 0;
        0x0080e568:    f890137a    ..z.    LDRB     r1,[r0,#0x37a]
        0x0080e56c:    f0210110    !...    BIC      r1,r1,#0x10
;;;426    #endif
;;;427    
;;;428        /*config watch dog mode in rom, defualt reset all*/
;;;429        OTP->wdgMode = ROM_WATCH_DOG_MODE;
        0x0080e570:    f04101c0    A...    ORR      r1,r1,#0xc0
        0x0080e574:    f880137a    ..z.    STRB     r1,[r0,#0x37a]
;;;430    
;;;431    
;;;432        //app config
;;;433        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
        0x0080e578:    21b4        .!      MOVS     r1,#0xb4
        0x0080e57a:    f8801320    .. .    STRB     r1,[r0,#0x320]
;;;434        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
        0x0080e57e:    213c        <!      MOVS     r1,#0x3c
        0x0080e580:    f8801321    ..!.    STRB     r1,[r0,#0x321]
;;;435        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
        0x0080e584:    2164        d!      MOVS     r1,#0x64
        0x0080e586:    f8801322    ..".    STRB     r1,[r0,#0x322]
;;;436        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
        0x0080e58a:    21ff        .!      MOVS     r1,#0xff
        0x0080e58c:    f8801323    ..#.    STRB     r1,[r0,#0x323]
;;;437    
;;;438        /*config bt stack parameters in rom*/
;;;439    #ifdef BT_STACK_CONFIG_ENABLE
;;;440        bt_stack_config_init();
;;;441    #endif
;;;442    
;;;443    //add more otp config here
;;;444    }
        0x0080e590:    4770        pG      BX       lr
    $d
        0x0080e592:    0000        ..      DCW    0
        0x0080e594:    e000e00c    ....    DCD    3758153740
        0x0080e598:    e000edfc    ....    DCD    3758157308
        0x0080e59c:    01010000    ....    DCD    16842752
        0x0080e5a0:    e0001000    ....    DCD    3758100480
        0x0080e5a4:    00001b98    ....    DCD    7064
        0x0080e5a8:    0080e744    D...    DCD    8447812
        0x0080e5ac:    00207c00    .| .    DCD    2128896
        0x0080e5b0:    000000ac    ....    DCD    172
        0x0080e5b4:    008102dc    ....    DCD    8454876
        0x0080e5b8:    00209798    .. .    DCD    2135960
        0x0080e5bc:    00000060    `...    DCD    96
        0x0080e5c0:    00209844    D. .    DCD    2136132
        0x0080e5c4:    00000000    ....    DCD    0
        0x0080e5c8:    00810448    H...    DCD    8455240
        0x0080e5cc:    0021c000    ..!.    DCD    2211840
        0x0080e5d0:    00000043    C...    DCD    67
        0x0080e5d4:    20697246    Fri     DCD    543781446
        0x0080e5d8:    20706553    Sep     DCD    544236883
        0x0080e5dc:    31203132    21 1    DCD    824193330
        0x0080e5e0:    31303a33    3:01    DCD    825244211
        0x0080e5e4:    2037313a    :17     DCD    540487994
        0x0080e5e8:    38313032    2018    DCD    942747698
        0x0080e5ec:    00000000    ....    DCD    0
        0x0080e5f0:    2e302e31    1.0.    DCD    774909489
        0x0080e5f4:    00302e32    2.0.    DCD    3157554
        0x0080e5f8:    08800000    ....    DCD    142606336
        0x0080e5fc:    21100300    ...!    DCD    554697472
        0x0080e600:    00200c38    8. .    DCD    2100280
        0x0080e604:    00207d91    .} .    DCD    2129297
        0x0080e608:    00200c3c    <. .    DCD    2100284
        0x0080e60c:    a2aa0003    ....    DCD    2729050115
    $d.realdata
    Region$$Table$$Base
        0x0080e610:    0080e650    P...    DCD    8447568
        0x0080e614:    00200000    .. .    DCD    2097152
        0x0080e618:    000000f4    ....    DCD    244
        0x0080e61c:    0080e444    D...    DCD    8447044
        0x0080e620:    0080e744    D...    DCD    8447812
        0x0080e624:    00207c00    .| .    DCD    2128896
        0x0080e628:    00001b98    ....    DCD    7064
        0x0080e62c:    0080e444    D...    DCD    8447044
        0x0080e630:    008102dc    ....    DCD    8454876
        0x0080e634:    00209798    .. .    DCD    2135960
        0x0080e638:    000000ac    ....    DCD    172
        0x0080e63c:    0080e444    D...    DCD    8447044
        0x0080e640:    00810388    ....    DCD    8455048
        0x0080e644:    00209844    D. .    DCD    2136132
        0x0080e648:    00000060    `...    DCD    96
        0x0080e64c:    0080e460    `...    DCD    8447072
    Region$$Table$$Limit

** Section #4 'RAM_VECTOR_TABLE' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 244 bytes (alignment 4)
    Address: 0x00200000

    0x200000:   00 38 20 00 01 e4 80 00 41 7d 20 00 41 7d 20 00    .8 .....A} .A} .
    0x200010:   41 7d 20 00 41 7d 20 00 41 7d 20 00 00 00 00 00    A} .A} .A} .....
    0x200020:   00 00 00 00 00 00 00 00 00 00 00 00 41 7d 20 00    ............A} .
    0x200030:   41 7d 20 00 00 00 00 00 41 7d 20 00 41 7d 20 00    A} .....A} .A} .
    0x200040:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x200050:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x200060:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x200070:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x200080:   41 7d 20 00 41 7d 20 00 0b 85 20 00 41 7d 20 00    A} .A} ... .A} .
    0x200090:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x2000a0:   41 7d 20 00 41 7d 20 00 1d 7c 20 00 69 7c 20 00    A} .A} ..| .i| .
    0x2000b0:   41 7d 20 00 b5 7c 20 00 f9 7c 20 00 41 7d 20 00    A} ..| ..| .A} .
    0x2000c0:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x2000d0:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x2000e0:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x2000f0:   41 7d 20 00                                        A} .

    __Vectors_End

** Section #5 'RAM_DATA_ON' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 7064 bytes (alignment 4)
    Address: 0x00207c00

    $t
    .ARM.Collect$$libinit$$00000000
    __rt_lib_init
        0x00207c00:    b51f        ..      PUSH     {r0-r4,lr}
    .ARM.Collect$$libinit$$00000001
    __rt_lib_init_fp_1
        0x00207c02:    f001fc20    .. .    BL       _fp_init ; 0x209446
    .ARM.Collect$$libinit$$00000004
    .ARM.Collect$$libinit$$0000000A
    .ARM.Collect$$libinit$$0000000C
    .ARM.Collect$$libinit$$0000000E
    .ARM.Collect$$libinit$$00000011
    .ARM.Collect$$libinit$$00000013
    .ARM.Collect$$libinit$$00000015
    .ARM.Collect$$libinit$$00000017
    .ARM.Collect$$libinit$$00000019
    .ARM.Collect$$libinit$$0000001B
    .ARM.Collect$$libinit$$0000001D
    .ARM.Collect$$libinit$$0000001F
    .ARM.Collect$$libinit$$00000021
    .ARM.Collect$$libinit$$00000023
    .ARM.Collect$$libinit$$00000025
    .ARM.Collect$$libinit$$0000002C
    .ARM.Collect$$libinit$$0000002E
    .ARM.Collect$$libinit$$00000030
    .ARM.Collect$$libinit$$00000032
    .ARM.Collect$$libinit$$00000033
    __rt_lib_init_alloca_1
    __rt_lib_init_argv_1
    __rt_lib_init_atexit_1
    __rt_lib_init_clock_1
    __rt_lib_init_cpp_1
    __rt_lib_init_exceptions_1
    __rt_lib_init_fp_trap_1
    __rt_lib_init_getenv_1
    __rt_lib_init_heap_1
    __rt_lib_init_lc_collate_1
    __rt_lib_init_lc_ctype_1
    __rt_lib_init_lc_monetary_1
    __rt_lib_init_lc_numeric_1
    __rt_lib_init_lc_time_1
    __rt_lib_init_preinit_1
    __rt_lib_init_rand_1
    __rt_lib_init_return
    __rt_lib_init_signal_1
    __rt_lib_init_stdio_1
    __rt_lib_init_user_alloc_1
        0x00207c06:    bd1f        ..      POP      {r0-r4,pc}
    .ARM.Collect$$rtentry$$00000000
    .ARM.Collect$$rtentry$$00000002
    .ARM.Collect$$rtentry$$00000004
    __rt_entry
    __rt_entry_presh_1
    __rt_entry_sh
        0x00207c08:    f000f8a2    ....    BL       __user_setup_stackheap ; 0x207d50
        0x00207c0c:    4611        .F      MOV      r1,r2
    .ARM.Collect$$rtentry$$00000009
    .ARM.Collect$$rtentry$$0000000A
    __rt_entry_li
    __rt_entry_postsh_1
        0x00207c0e:    f7fffff7    ....    BL       __rt_lib_init ; 0x207c00
    .ARM.Collect$$rtentry$$0000000C
    .ARM.Collect$$rtentry$$0000000D
    __rt_entry_main
    __rt_entry_postli_1
        0x00207c12:    f000fc93    ....    BL       main ; 0x20853c
        0x00207c16:    f653f905    S...    BL       exit ; 0x5ae24
        0x00207c1a:    0000        ..      MOVS     r0,r0
    .ram.dataon.data
    GPIO_Group3_Handler
;;;537        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207c1c:    4847        GH      LDR      r0,[pc,#284] ; [0x207d3c] = 0x40001000
;;; .\..\..\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (536)
        0x00207c1e:    b510        ..      PUSH     {r4,lr}
        0x00207c20:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207c22:    0720         .      LSLS     r0,r4,#28
        0x00207c24:    d501        ..      BPL      0x207c2a ; GPIO_Group3_Handler + 14
;;;537        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;538    
;;;539        //Check exact IRQ function
;;;540        if (GPIOIrqStatus & BIT3)
;;;541        {
;;;542            GPIO3_Handler();
        0x00207c26:    f000f88b    ....    BL       BTMAC_Handler ; 0x207d40
;;;543        }
;;;544        if (GPIOIrqStatus & BIT7)
        0x00207c2a:    0620         .      LSLS     r0,r4,#24
        0x00207c2c:    d501        ..      BPL      0x207c32 ; GPIO_Group3_Handler + 22
;;;545        {
;;;546            GPIO7_Handler();
        0x00207c2e:    f000f887    ....    BL       BTMAC_Handler ; 0x207d40
;;;547        }
;;;548        if (GPIOIrqStatus & BIT11)
        0x00207c32:    0520         .      LSLS     r0,r4,#20
        0x00207c34:    d501        ..      BPL      0x207c3a ; GPIO_Group3_Handler + 30
;;;549        {
;;;550            GPIO11_Handler();
        0x00207c36:    f000f883    ....    BL       BTMAC_Handler ; 0x207d40
;;;551        }
;;;552        if (GPIOIrqStatus & BIT15)
        0x00207c3a:    0420         .      LSLS     r0,r4,#16
        0x00207c3c:    d501        ..      BPL      0x207c42 ; GPIO_Group3_Handler + 38
;;;553        {
;;;554            GPIO15_Handler();
        0x00207c3e:    f000f87f    ....    BL       BTMAC_Handler ; 0x207d40
;;;555        }
;;;556        if (GPIOIrqStatus & BIT19)
        0x00207c42:    0320         .      LSLS     r0,r4,#12
        0x00207c44:    d501        ..      BPL      0x207c4a ; GPIO_Group3_Handler + 46
;;;557        {
;;;558            GPIO19_Handler();
        0x00207c46:    f000f87b    ..{.    BL       BTMAC_Handler ; 0x207d40
;;;559        }
;;;560        if (GPIOIrqStatus & BIT23)
        0x00207c4a:    0220         .      LSLS     r0,r4,#8
        0x00207c4c:    d501        ..      BPL      0x207c52 ; GPIO_Group3_Handler + 54
;;;561        {
;;;562            GPIO23_Handler();
        0x00207c4e:    f000f877    ..w.    BL       BTMAC_Handler ; 0x207d40
;;;563        }
;;;564        if (GPIOIrqStatus & BIT27)
        0x00207c52:    0120         .      LSLS     r0,r4,#4
        0x00207c54:    d501        ..      BPL      0x207c5a ; GPIO_Group3_Handler + 62
;;;565        {
;;;566            GPIO27_Handler();
        0x00207c56:    f000f873    ..s.    BL       BTMAC_Handler ; 0x207d40
;;;567        }
;;;568        if (GPIOIrqStatus & BIT31)
        0x00207c5a:    2c00        .,      CMP      r4,#0
        0x00207c5c:    da03        ..      BGE      0x207c66 ; GPIO_Group3_Handler + 74
;;;569        {
;;;570            GPIO31_Handler();
        0x00207c5e:    e8bd4010    ...@    POP      {r4,lr}
        0x00207c62:    f000b86d    ..m.    B.W      BTMAC_Handler ; 0x207d40
;;;571        }
;;;572    }
        0x00207c66:    bd10        ..      POP      {r4,pc}
    GPIO_Group2_Handler
;;;573    /**
;;;574     * @brief  GPIO Group2 Handler
;;;575     * @param  none
;;;576     * @return none
;;;577      */
;;;578    DATA_RAM_FUNCTION void GPIO_Group2_Handler(void)
;;;579    {
;;;580        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207c68:    4834        4H      LDR      r0,[pc,#208] ; [0x207d3c] = 0x40001000
;;; .\..\..\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (579)
        0x00207c6a:    b510        ..      PUSH     {r4,lr}
        0x00207c6c:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207c6e:    0760        `.      LSLS     r0,r4,#29
        0x00207c70:    d501        ..      BPL      0x207c76 ; GPIO_Group2_Handler + 14
;;;580        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;581    
;;;582        //Check exact IRQ function
;;;583        if (GPIOIrqStatus & BIT2)
;;;584        {
;;;585            GPIO2_Handler();
        0x00207c72:    f000f865    ..e.    BL       BTMAC_Handler ; 0x207d40
;;;586        }
;;;587        if (GPIOIrqStatus & BIT6)
        0x00207c76:    0660        `.      LSLS     r0,r4,#25
        0x00207c78:    d501        ..      BPL      0x207c7e ; GPIO_Group2_Handler + 22
;;;588        {
;;;589            GPIO6_Handler();
        0x00207c7a:    f000f861    ..a.    BL       BTMAC_Handler ; 0x207d40
;;;590        }
;;;591        if (GPIOIrqStatus & BIT10)
        0x00207c7e:    0560        `.      LSLS     r0,r4,#21
        0x00207c80:    d501        ..      BPL      0x207c86 ; GPIO_Group2_Handler + 30
;;;592        {
;;;593            GPIO10_Handler();
        0x00207c82:    f000f85d    ..].    BL       BTMAC_Handler ; 0x207d40
;;;594        }
;;;595        if (GPIOIrqStatus & BIT14)
        0x00207c86:    0460        `.      LSLS     r0,r4,#17
        0x00207c88:    d501        ..      BPL      0x207c8e ; GPIO_Group2_Handler + 38
;;;596        {
;;;597            GPIO14_Handler();
        0x00207c8a:    f000f859    ..Y.    BL       BTMAC_Handler ; 0x207d40
;;;598        }
;;;599        if (GPIOIrqStatus & BIT18)
        0x00207c8e:    0360        `.      LSLS     r0,r4,#13
        0x00207c90:    d501        ..      BPL      0x207c96 ; GPIO_Group2_Handler + 46
;;;600        {
;;;601            GPIO18_Handler();
        0x00207c92:    f000f855    ..U.    BL       BTMAC_Handler ; 0x207d40
;;;602        }
;;;603        if (GPIOIrqStatus & BIT22)
        0x00207c96:    0260        `.      LSLS     r0,r4,#9
        0x00207c98:    d501        ..      BPL      0x207c9e ; GPIO_Group2_Handler + 54
;;;604        {
;;;605            GPIO22_Handler();
        0x00207c9a:    f000f851    ..Q.    BL       BTMAC_Handler ; 0x207d40
;;;606        }
;;;607        if (GPIOIrqStatus & BIT26)
        0x00207c9e:    0160        `.      LSLS     r0,r4,#5
        0x00207ca0:    d501        ..      BPL      0x207ca6 ; GPIO_Group2_Handler + 62
;;;608        {
;;;609            GPIO26_Handler();
        0x00207ca2:    f000f84d    ..M.    BL       BTMAC_Handler ; 0x207d40
;;;610        }
;;;611        if (GPIOIrqStatus & BIT30)
        0x00207ca6:    0060        `.      LSLS     r0,r4,#1
        0x00207ca8:    d503        ..      BPL      0x207cb2 ; GPIO_Group2_Handler + 74
;;;612        {
;;;613            GPIO30_Handler();
        0x00207caa:    e8bd4010    ...@    POP      {r4,lr}
        0x00207cae:    f000b847    ..G.    B.W      BTMAC_Handler ; 0x207d40
;;;614        }
;;;615    }
        0x00207cb2:    bd10        ..      POP      {r4,pc}
    GPIO_Group1_Handler
;;;616    /**
;;;617     * @brief  GPIO Group1 Handler
;;;618     * @param  none
;;;619     * @return none
;;;620      */
;;;621    DATA_RAM_FUNCTION void GPIO_Group1_Handler(void)
;;;622    {
;;;623        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207cb4:    4821        !H      LDR      r0,[pc,#132] ; [0x207d3c] = 0x40001000
;;; .\..\..\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (622)
        0x00207cb6:    b510        ..      PUSH     {r4,lr}
        0x00207cb8:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207cba:    07a0        ..      LSLS     r0,r4,#30
        0x00207cbc:    d501        ..      BPL      0x207cc2 ; GPIO_Group1_Handler + 14
;;;623        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;624    
;;;625        //Check exact IRQ function
;;;626        if (GPIOIrqStatus & BIT1)
;;;627        {
;;;628            GPIO1_Handler();
        0x00207cbe:    f000f83f    ..?.    BL       BTMAC_Handler ; 0x207d40
;;;629        }
;;;630        if (GPIOIrqStatus & BIT9)
        0x00207cc2:    05a0        ..      LSLS     r0,r4,#22
        0x00207cc4:    d501        ..      BPL      0x207cca ; GPIO_Group1_Handler + 22
;;;631        {
;;;632            GPIO9_Handler();
        0x00207cc6:    f000f83b    ..;.    BL       BTMAC_Handler ; 0x207d40
;;;633        }
;;;634        if (GPIOIrqStatus & BIT13)
        0x00207cca:    04a0        ..      LSLS     r0,r4,#18
        0x00207ccc:    d501        ..      BPL      0x207cd2 ; GPIO_Group1_Handler + 30
;;;635        {
;;;636            GPIO13_Handler();
        0x00207cce:    f000f837    ..7.    BL       BTMAC_Handler ; 0x207d40
;;;637        }
;;;638        if (GPIOIrqStatus & BIT17)
        0x00207cd2:    03a0        ..      LSLS     r0,r4,#14
        0x00207cd4:    d501        ..      BPL      0x207cda ; GPIO_Group1_Handler + 38
;;;639        {
;;;640            GPIO17_Handler();
        0x00207cd6:    f000f833    ..3.    BL       BTMAC_Handler ; 0x207d40
;;;641        }
;;;642        if (GPIOIrqStatus & BIT21)
        0x00207cda:    02a0        ..      LSLS     r0,r4,#10
        0x00207cdc:    d501        ..      BPL      0x207ce2 ; GPIO_Group1_Handler + 46
;;;643        {
;;;644            GPIO21_Handler();
        0x00207cde:    f000f82f    ../.    BL       BTMAC_Handler ; 0x207d40
;;;645        }
;;;646        if (GPIOIrqStatus & BIT25)
        0x00207ce2:    01a0        ..      LSLS     r0,r4,#6
        0x00207ce4:    d501        ..      BPL      0x207cea ; GPIO_Group1_Handler + 54
;;;647        {
;;;648            GPIO25_Handler();
        0x00207ce6:    f000f82b    ..+.    BL       BTMAC_Handler ; 0x207d40
;;;649        }
;;;650        if (GPIOIrqStatus & BIT29)
        0x00207cea:    00a0        ..      LSLS     r0,r4,#2
        0x00207cec:    d503        ..      BPL      0x207cf6 ; GPIO_Group1_Handler + 66
;;;651        {
;;;652            GPIO29_Handler();
        0x00207cee:    e8bd4010    ...@    POP      {r4,lr}
        0x00207cf2:    f000b825    ..%.    B.W      BTMAC_Handler ; 0x207d40
;;;653        }
;;;654    }
        0x00207cf6:    bd10        ..      POP      {r4,pc}
    GPIO_Group0_Handler
;;;655    /**
;;;656     * @brief  GPIO Group0 Handler
;;;657     * @param  none
;;;658     * @return none
;;;659      */
;;;660    DATA_RAM_FUNCTION void GPIO_Group0_Handler(void)
;;;661    {
;;;662        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207cf8:    4810        .H      LDR      r0,[pc,#64] ; [0x207d3c] = 0x40001000
;;; .\..\..\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (661)
        0x00207cfa:    b510        ..      PUSH     {r4,lr}
        0x00207cfc:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207cfe:    07e0        ..      LSLS     r0,r4,#31
        0x00207d00:    d001        ..      BEQ      0x207d06 ; GPIO_Group0_Handler + 14
;;;662        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;663    
;;;664        //Check exact IRQ function
;;;665        if (GPIOIrqStatus & BIT0)
;;;666        {
;;;667            GPIO0_Handler();
        0x00207d02:    f000f81d    ....    BL       BTMAC_Handler ; 0x207d40
;;;668        }
;;;669        if (GPIOIrqStatus & BIT8)
        0x00207d06:    05e0        ..      LSLS     r0,r4,#23
        0x00207d08:    d501        ..      BPL      0x207d0e ; GPIO_Group0_Handler + 22
;;;670        {
;;;671            GPIO8_Handler();
        0x00207d0a:    f000f819    ....    BL       BTMAC_Handler ; 0x207d40
;;;672        }
;;;673        if (GPIOIrqStatus & BIT12)
        0x00207d0e:    04e0        ..      LSLS     r0,r4,#19
        0x00207d10:    d501        ..      BPL      0x207d16 ; GPIO_Group0_Handler + 30
;;;674        {
;;;675            GPIO12_Handler();
        0x00207d12:    f000f815    ....    BL       BTMAC_Handler ; 0x207d40
;;;676        }
;;;677        if (GPIOIrqStatus & BIT16)
        0x00207d16:    03e0        ..      LSLS     r0,r4,#15
        0x00207d18:    d501        ..      BPL      0x207d1e ; GPIO_Group0_Handler + 38
;;;678        {
;;;679            GPIO16_Handler();
        0x00207d1a:    f000f811    ....    BL       BTMAC_Handler ; 0x207d40
;;;680        }
;;;681        if (GPIOIrqStatus & BIT20)
        0x00207d1e:    02e0        ..      LSLS     r0,r4,#11
        0x00207d20:    d501        ..      BPL      0x207d26 ; GPIO_Group0_Handler + 46
;;;682        {
;;;683            GPIO20_Handler();
        0x00207d22:    f000f80d    ....    BL       BTMAC_Handler ; 0x207d40
;;;684        }
;;;685        if (GPIOIrqStatus & BIT24)
        0x00207d26:    01e0        ..      LSLS     r0,r4,#7
        0x00207d28:    d501        ..      BPL      0x207d2e ; GPIO_Group0_Handler + 54
;;;686        {
;;;687            GPIO24_Handler();
        0x00207d2a:    f000f809    ....    BL       BTMAC_Handler ; 0x207d40
;;;688        }
;;;689        if (GPIOIrqStatus & BIT28)
        0x00207d2e:    00e0        ..      LSLS     r0,r4,#3
        0x00207d30:    d503        ..      BPL      0x207d3a ; GPIO_Group0_Handler + 66
;;;690        {
;;;691            GPIO28_Handler();
        0x00207d32:    e8bd4010    ...@    POP      {r4,lr}
        0x00207d36:    f000b803    ....    B.W      BTMAC_Handler ; 0x207d40
;;;692        }
;;;693    }
        0x00207d3a:    bd10        ..      POP      {r4,pc}
    $d
        0x00207d3c:    40001000    ...@    DCD    1073745920
    $t
    .text
    $v0
    BTMAC_Handler
    BusFault_Handler
    DebugMon_Handler
    Default_Handler
    GDMA0_Channel0_Handler
    GDMA0_Channel1_Handler
    GDMA0_Channel2_Handler
    GDMA0_Channel3_Handler
    GDMA0_Channel4_Handler
    GDMA0_Channel5_Handler
    GPIO0_Handler
    GPIO10_Handler
    GPIO11_Handler
    GPIO12_Handler
    GPIO13_Handler
    GPIO14_Handler
    GPIO15_Handler
    GPIO16_Handler
    GPIO17_Handler
    GPIO18_Handler
    GPIO19_Handler
    GPIO1_Handler
    GPIO20_Handler
    GPIO21_Handler
    GPIO22_Handler
    GPIO23_Handler
    GPIO24_Handler
    GPIO25_Handler
    GPIO26_Handler
    GPIO27_Handler
    GPIO28_Handler
    GPIO29_Handler
    GPIO2_Handler
    GPIO30_Handler
    GPIO31_Handler
    GPIO3_Handler
    GPIO4_Handler
    GPIO5_Handler
    GPIO6_Handler
    GPIO7_Handler
    GPIO8_Handler
    GPIO9_Handler
    HardFault_Handler
    I2C0_Handler
    I2C1_Handler
    I2S0_RX_Handler
    I2S0_TX_Handler
    I2S1_RX_Handler
    I2S1_TX_Handler
    IR_Handler
    Keyscan_Handler
    LCD_Handler
    LPCOMP_Handler
    MemManage_Handler
    NMI_Handler
    PTA_Mailbox_Handler
    PendSV_Handler
    Peripheral_Handler
    Qdecode_Handler
    RTC_Handler
    SPI0_Handler
    SPI1_Handler
    SPI2W_Handler
    SPI_Flash_Handler
    SVC_Handler
    SysTick_Handler
    System_Handler
    Timer2_Handler
    Timer3_Handler
    Timer4_7_Handler
    Timer4_Handler
    Timer5_Handler
    Timer6_Handler
    Timer7_Handler
    UART0_Handler
    UART1_Handler
    UART2_Handler
    UsageFault_Handler
    WDG_Handler
;;; ..\\..\\..\\..\\..\\src\\mcu\\rtl876x\\arm\\startup_rtl8762c.s
;;;276                    LDR    R0, =0x20000000
        0x00207d40:    f04f5000    O..P    MOV      r0,#0x20000000
;;;277                    LDR    R1, =DEFAULT_HANDLER_TXT
        0x00207d44:    4910        .I      LDR      r1,[pc,#64] ; [0x207d88] = 0x207d52
;;;278                    MRS    R2, IPSR
        0x00207d46:    f3ef8205    ....    MRS      r2,IPSR
;;;279                    LDR    R3, =log_direct
        0x00207d4a:    4b10        .K      LDR      r3,[pc,#64] ; [0x207d8c] = 0x79b1
;;;280                    BLX    R3
        0x00207d4c:    4798        .G      BLX      r3
;;;281                    B      .
        0x00207d4e:    e7fe        ..      B        0x207d4e ; BTMAC_Handler + 14
    __user_setup_stackheap
;;;282    
;;;283                    ENDP
;;;284    
;;;285    
;;;286    ; User Initial Stack
;;;287                    EXPORT  __user_setup_stackheap
;;;288    __user_setup_stackheap PROC
;;;289                    BX      LR
        0x00207d50:    4770        pG      BX       lr
    $d
    DEFAULT_HANDLER_TXT
        0x00207d52:    7245        Er      DCW    29253
        0x00207d54:    21726f72    ror!    DCD    561147762
        0x00207d58:    656c5020     Ple    DCD    1701597216
        0x00207d5c:    20657361    ase     DCD    543519585
        0x00207d60:    6c706d69    impl    DCD    1819307369
        0x00207d64:    6e656d65    emen    DCD    1852140901
        0x00207d68:    6f792074    t yo    DCD    1870209140
        0x00207d6c:    49207275    ur I    DCD    1226863221
        0x00207d70:    48205253    SR H    DCD    1210077779
        0x00207d74:    6c646e61    andl    DCD    1818521185
        0x00207d78:    66207265    er f    DCD    1713402469
        0x00207d7c:    4920726f    or I    DCD    1226863215
        0x00207d80:    25205152    RQ %    DCD    622874962
        0x00207d84:    000a2164    d!..    DCD    663908
        0x00207d88:    00207d52    R} .    DCD    2129234
        0x00207d8c:    000079b1    .y..    DCD    31153
    $t
    .text
    common_main
;;; .\..\..\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;253    {
        0x00207d90:    b510        ..      PUSH     {r4,lr}
;;;254    //add common system code here before enter user defined main function
;;;255        OTP->run_in_app = 1;
        0x00207d92:    f44f1000    O...    MOV      r0,#0x200000
        0x00207d96:    f890139b    ....    LDRB     r1,[r0,#0x39b]
        0x00207d9a:    f0410180    A...    ORR      r1,r1,#0x80
        0x00207d9e:    f880139b    ....    STRB     r1,[r0,#0x39b]
;;;256    
;;;257    #if (RUN_APP_IN_HCIMODE_ENABLE == 0)
;;;258        if (OTP->stack_en)
        0x00207da2:    f89002dc    ....    LDRB     r0,[r0,#0x2dc]
        0x00207da6:    07c1        ..      LSLS     r1,r0,#31
;;;259        {
;;;260            DBG_DIRECT("In SoC Mode");
        0x00207da8:    f04f5004    O..P    MOV      r0,#0x21000000
        0x00207dac:    d003        ..      BEQ      0x207db6 ; common_main + 38
        0x00207dae:    a119        ..      ADR      r1,{pc}+0x66 ; 0x207e14
        0x00207db0:    f5fffdfe    ....    BL       log_direct ; 0x79b0
        0x00207db4:    e006        ..      B        0x207dc4 ; common_main + 52
;;;261        }
;;;262        else
;;;263        {
;;;264            DBG_DIRECT("WARNING: In HCI Mode, will not run APP Task");
        0x00207db6:    a11a        ..      ADR      r1,{pc}+0x6a ; 0x207e20
        0x00207db8:    f5fffdfa    ....    BL       log_direct ; 0x79b0
;;;265    		WDG_Disable();
        0x00207dbc:    f609fdc1    ....    BL       WDG_Disable ; 0x11942
;;;266            os_sched_start();
        0x00207dc0:    f61efcff    ....    BL       os_sched_start ; 0x267c2
;;;267        }
;;;268    #endif
;;;269    
;;;270    #if (DEBUG_TASK_HANG_ENABLE == 1)
;;;271        extern void DebugTaskHang(void);  //defined in debug_platform.c
;;;272        DebugTaskHang();
;;;273    #endif
;;;274    
;;;275    #if (DEBUG_DLPS_ERROR_IN_APP_ENABLE == 1)
;;;276        void dlps_debug_swtimer_init(void);  //defined in debug_platform.c
;;;277        dlps_debug_swtimer_init();
;;;278    #endif
;;;279    
;;;280        extern int main(void);
;;;281        main();
        0x00207dc4:    e8bd4010    ...@    POP      {r4,lr}
        0x00207dc8:    f000bbb8    ....    B.W      main ; 0x20853c
    WDG_SystemReset
;;;282    }
;;;283    /**
;;;284     * @brief  Enable Debug Monitor Function (include NVIC Enable and DWT configuration)
;;;285     * @param  none
;;;286     * @return none
;;;287     */
;;;288    
;;;289    APP_FLASH_TEXT_SECTION
;;;290    void debug_monitor_enable(void)
;;;291    {
;;;292        //DBG_DIRECT("debug_monitor_enable");
;;;293    
;;;294        //set debug monitor priority
;;;295        NVIC_SetPriority(DebugMonitor_IRQn, 3);
;;;296    
;;;297        //enable exception and monitor control register
;;;298        CoreDebug->DEMCR |= CoreDebug_DEMCR_MON_EN_Msk | CoreDebug_DEMCR_TRCENA_Msk;
;;;299    
;;;300        //set DWT compare registers (max 4 comparators)
;;;301        //watch_point_0_setting(0x1000180C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_WRITE);
;;;302        //watch_point_1_setting(0x10000004, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;303        //watch_point_2_setting(0x10000008, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;304        //watch_point_3_setting(0x1000000C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;305    
;;;306        //enable DWT control register
;;;307        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
;;;308    
;;;309        return;
;;;310    }
;;;311    
;;;312    APP_FLASH_TEXT_SECTION
;;;313    void ram_init(void)
;;;314    {
;;;315        //copy data on ro
;;;316        extern char Image$$RAM_DATA_ON$$RO$$Base[];
;;;317        extern char Load$$RAM_DATA_ON$$RO$$Base[];
;;;318        extern unsigned int Image$$RAM_DATA_ON$$RO$$Length;
;;;319    
;;;320        memcpy(Image$$RAM_DATA_ON$$RO$$Base,
;;;321               Load$$RAM_DATA_ON$$RO$$Base,
;;;322               (unsigned int)&Image$$RAM_DATA_ON$$RO$$Length);
;;;323    
;;;324        //copy data on rw
;;;325        extern char Image$$RAM_DATA_ON$$RW$$Base[];
;;;326        extern char Load$$RAM_DATA_ON$$RW$$Base[];
;;;327        extern unsigned int Image$$RAM_DATA_ON$$RW$$Length;
;;;328    
;;;329        memcpy(Image$$RAM_DATA_ON$$RW$$Base,
;;;330               Load$$RAM_DATA_ON$$RW$$Base,
;;;331               (unsigned int)&Image$$RAM_DATA_ON$$RW$$Length);
;;;332    
;;;333        //clear data on zi
;;;334        extern char Image$$RAM_DATA_ON$$ZI$$Base[];
;;;335        extern unsigned int Image$$RAM_DATA_ON$$ZI$$Length;
;;;336    
;;;337        memset(Image$$RAM_DATA_ON$$ZI$$Base,
;;;338               0,
;;;339               (unsigned int)&Image$$RAM_DATA_ON$$ZI$$Length);
;;;340    
;;;341        //copy cache ro
;;;342        extern char Image$$CACHE_DATA_ON$$RO$$Base[];
;;;343        extern char Load$$CACHE_DATA_ON$$RO$$Base[];
;;;344        extern unsigned int Image$$CACHE_DATA_ON$$RO$$Length;
;;;345    
;;;346        memcpy(Image$$CACHE_DATA_ON$$RO$$Base,
;;;347               Load$$CACHE_DATA_ON$$RO$$Base,
;;;348               (unsigned int)&Image$$CACHE_DATA_ON$$RO$$Length);
;;;349    }
;;;350    
;;;351    APP_FLASH_TEXT_SECTION
;;;352    void SystemInit(void)
;;;353    {
;;;354        //init pre_main and main functions
;;;355        extern void pre_main(void);
;;;356        app_pre_main = (APP_MAIN_FUNC)pre_main;
;;;357        app_main = (APP_MAIN_FUNC)common_main;
;;;358    
;;;359        /******** update otp here**********/
;;;360        //ram config
;;;361        OTP->appDataSize = APP_GLOBAL_SIZE;
;;;362        OTP->heapDataONSize = HEAP_DATA_ON_SIZE;
;;;363        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;364    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;365        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
;;;366    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;367        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;368    #else
;;;369        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;370    #endif
;;;371    
;;;372    
;;;373        //flash config
;;;374        /*config enable flash block proect depending on flash layout and flash id*/
;;;375    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;376        OTP->bp_enable = 1;
;;;377    #else
;;;378        OTP->bp_enable = 0;
;;;379    #endif
;;;380        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
;;;381    
;;;382    
;;;383        //os config
;;;384        /*config enable check task stack overflow*/
;;;385    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;386        OTP->checkForStackOverflow = 1;
;;;387    #else
;;;388        OTP->checkForStackOverflow = 0;
;;;389    #endif
;;;390    
;;;391    
;;;392        //platform config
;;;393        /*config enable platform assert*/
;;;394    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;395        OTP->enableASSERT = 1;
;;;396    #else
;;;397        OTP->enableASSERT = 0;
;;;398    #endif
;;;399    
;;;400        /*Print all log in log buffer before entering DLPS */
;;;401    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;402        OTP->printAllLogBeforeEnterDLPS = 1;
;;;403    #else
;;;404        OTP->printAllLogBeforeEnterDLPS = 0;
;;;405    #endif
;;;406    
;;;407        /*config enable log or not*/
;;;408    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;409        OTP->logDisable = 0;
;;;410    #else
;;;411        OTP->logDisable = 1;
;;;412    #endif
;;;413    
;;;414        /*config enable swd pinmux*/
;;;415    #if (SWD_PINMUX_ENABLE == 1)
;;;416        OTP->SWD_ENABLE = 1;
;;;417    #else
;;;418        OTP->SWD_ENABLE = 0;
;;;419    #endif
;;;420    
;;;421        /*config enable watch dog in rom*/
;;;422    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;423        OTP->wdgEnableInRom = 1;
;;;424    #else
;;;425        OTP->wdgEnableInRom = 0;
;;;426    #endif
;;;427    
;;;428        /*config watch dog mode in rom, defualt reset all*/
;;;429        OTP->wdgMode = ROM_WATCH_DOG_MODE;
;;;430    
;;;431    
;;;432        //app config
;;;433        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
;;;434        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
;;;435        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
;;;436        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
;;;437    
;;;438        /*config bt stack parameters in rom*/
;;;439    #ifdef BT_STACK_CONFIG_ENABLE
;;;440        bt_stack_config_init();
;;;441    #endif
;;;442    
;;;443    //add more otp config here
;;;444    }
;;;445    
;;;446    APP_FLASH_TEXT_SECTION
;;;447    void pre_main(void)
;;;448    {
;;;449        __disable_irq();
;;;450    
;;;451        ram_init();
;;;452    
;;;453        load_overlay(OVERLAY_SCENARIO_BOOT_ONCE);
;;;454    
;;;455        setlocale(LC_ALL, "C");
;;;456    
;;;457        BOOT_PRINT_ERROR2("SDK Ver: %s, Build Time: %s",
;;;458                          TRACE_STRING(VERSION_BUILD_STR),
;;;459                          TRACE_STRING(BUILDING_TIME));
;;;460    
;;;461        AppUpdateVectorTable();
;;;462    
;;;463        debug_monitor_enable();
;;;464    
;;;465        return;
;;;466    }
;;;467    /**
;;;468     * @brief  update vector table in app
;;;469     * @param  none
;;;470     * @return none
;;;471      */
;;;472    OVERLAY_SECTION_BOOT_ONCE
;;;473    static void AppUpdateVectorTable(void)
;;;474    {
;;;475        extern uint32_t Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;476        extern uint32_t Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;477        extern void Default_Handler(void);
;;;478        const char *SysException[] =
;;;479        {
;;;480            "InitialSP", "Reset", "NMI", "HardFault", "MemManage", "BusFault", "UsageFault", "Rsvd",
;;;481            "Rsvd", "Rsvd", "Rsvd", "SVC", "DebugMon", "Rsvd", "PendSV", "SysTick"
;;;482        };
;;;483        const char *ExtIrq[] =
;;;484        {
;;;485            "System", "WDG", "BTMAC", "TIM3", "TIM2", "Platform", "I2S0_TX", "I2S0_RX", "Timer4-7",
;;;486            "GPIO4", "GPIO5", "UART1", "UART0", "RTC", "SPI0", "SPI1", "I2C0", "I2C1", "ADC",
;;;487            "Peripheral", "GDMA0 Channel0", "GDMA0 Channel1", "GDMA0 Channel2", "GDMA0 Channel3",
;;;488            "GDMA0 Channel4", "GDMA0 Channel5", "GPIO_Group3", "GPIO_Group2", "IR", "GPIO_Group1",
;;;489            "GPIO_Group0", "UART2", "TIM4", "TIM5", "TIM6", "TIM7", "SPI_Flash", "Qdecode",
;;;490            "Keyscan", "SPI2W", "LPCOMP", "PTA_Mailbox", "SPORT1 TX", "SPORT1 RX", "LCD"
;;;491        };
;;;492    
;;;493        IRQ_Fun *pRamVector    = (IRQ_Fun *)VTOR_RAM_ADDR;
;;;494        IRQ_Fun *pAppVector    = (IRQ_Fun *)&Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;495        uint32_t AppVectorSize = (uint32_t)&Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;496        uint32_t i             = 0;
;;;497    
;;;498        if (SCB->VTOR != VTOR_RAM_ADDR)
;;;499        {
;;;500            RamVectorTableInit(VTOR_RAM_ADDR);
;;;501        }
;;;502    
;;;503        /* Update APP defined handlers */
;;;504        for (i = 0; i < AppVectorSize / 4; ++i)
;;;505        {
;;;506            if (i == 1) //skip reset_handler remap
;;;507            {
;;;508                continue;
;;;509            }
;;;510    
;;;511            if ((pAppVector[i] != Default_Handler) && (pAppVector[i] != 0))
;;;512            {
;;;513                if (i < System_VECTORn)
;;;514                {
;;;515                    OS_PRINT_WARN1("Warning! %s is updated by APP!", TRACE_STRING(SysException[i]));
;;;516                }
;;;517                else
;;;518                {
;;;519                    OS_PRINT_WARN1("Warning! ISR %s is updated by APP!",
;;;520                                   TRACE_STRING(ExtIrq[i - System_VECTORn]));
;;;521                }
;;;522    
;;;523                pRamVector[i] = pAppVector[i];
;;;524            }
;;;525        }
;;;526    
;;;527        __DMB();
;;;528        __DSB();
;;;529    }
;;;530    /**
;;;531     * @brief  GPIO Group3 Handler
;;;532     * @param  none
;;;533     * @return none
;;;534      */
;;;535    DATA_RAM_FUNCTION void GPIO_Group3_Handler(void)
;;;536    {
;;;537        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;538    
;;;539        //Check exact IRQ function
;;;540        if (GPIOIrqStatus & BIT3)
;;;541        {
;;;542            GPIO3_Handler();
;;;543        }
;;;544        if (GPIOIrqStatus & BIT7)
;;;545        {
;;;546            GPIO7_Handler();
;;;547        }
;;;548        if (GPIOIrqStatus & BIT11)
;;;549        {
;;;550            GPIO11_Handler();
;;;551        }
;;;552        if (GPIOIrqStatus & BIT15)
;;;553        {
;;;554            GPIO15_Handler();
;;;555        }
;;;556        if (GPIOIrqStatus & BIT19)
;;;557        {
;;;558            GPIO19_Handler();
;;;559        }
;;;560        if (GPIOIrqStatus & BIT23)
;;;561        {
;;;562            GPIO23_Handler();
;;;563        }
;;;564        if (GPIOIrqStatus & BIT27)
;;;565        {
;;;566            GPIO27_Handler();
;;;567        }
;;;568        if (GPIOIrqStatus & BIT31)
;;;569        {
;;;570            GPIO31_Handler();
;;;571        }
;;;572    }
;;;573    /**
;;;574     * @brief  GPIO Group2 Handler
;;;575     * @param  none
;;;576     * @return none
;;;577      */
;;;578    DATA_RAM_FUNCTION void GPIO_Group2_Handler(void)
;;;579    {
;;;580        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;581    
;;;582        //Check exact IRQ function
;;;583        if (GPIOIrqStatus & BIT2)
;;;584        {
;;;585            GPIO2_Handler();
;;;586        }
;;;587        if (GPIOIrqStatus & BIT6)
;;;588        {
;;;589            GPIO6_Handler();
;;;590        }
;;;591        if (GPIOIrqStatus & BIT10)
;;;592        {
;;;593            GPIO10_Handler();
;;;594        }
;;;595        if (GPIOIrqStatus & BIT14)
;;;596        {
;;;597            GPIO14_Handler();
;;;598        }
;;;599        if (GPIOIrqStatus & BIT18)
;;;600        {
;;;601            GPIO18_Handler();
;;;602        }
;;;603        if (GPIOIrqStatus & BIT22)
;;;604        {
;;;605            GPIO22_Handler();
;;;606        }
;;;607        if (GPIOIrqStatus & BIT26)
;;;608        {
;;;609            GPIO26_Handler();
;;;610        }
;;;611        if (GPIOIrqStatus & BIT30)
;;;612        {
;;;613            GPIO30_Handler();
;;;614        }
;;;615    }
;;;616    /**
;;;617     * @brief  GPIO Group1 Handler
;;;618     * @param  none
;;;619     * @return none
;;;620      */
;;;621    DATA_RAM_FUNCTION void GPIO_Group1_Handler(void)
;;;622    {
;;;623        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;624    
;;;625        //Check exact IRQ function
;;;626        if (GPIOIrqStatus & BIT1)
;;;627        {
;;;628            GPIO1_Handler();
;;;629        }
;;;630        if (GPIOIrqStatus & BIT9)
;;;631        {
;;;632            GPIO9_Handler();
;;;633        }
;;;634        if (GPIOIrqStatus & BIT13)
;;;635        {
;;;636            GPIO13_Handler();
;;;637        }
;;;638        if (GPIOIrqStatus & BIT17)
;;;639        {
;;;640            GPIO17_Handler();
;;;641        }
;;;642        if (GPIOIrqStatus & BIT21)
;;;643        {
;;;644            GPIO21_Handler();
;;;645        }
;;;646        if (GPIOIrqStatus & BIT25)
;;;647        {
;;;648            GPIO25_Handler();
;;;649        }
;;;650        if (GPIOIrqStatus & BIT29)
;;;651        {
;;;652            GPIO29_Handler();
;;;653        }
;;;654    }
;;;655    /**
;;;656     * @brief  GPIO Group0 Handler
;;;657     * @param  none
;;;658     * @return none
;;;659      */
;;;660    DATA_RAM_FUNCTION void GPIO_Group0_Handler(void)
;;;661    {
;;;662        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;663    
;;;664        //Check exact IRQ function
;;;665        if (GPIOIrqStatus & BIT0)
;;;666        {
;;;667            GPIO0_Handler();
;;;668        }
;;;669        if (GPIOIrqStatus & BIT8)
;;;670        {
;;;671            GPIO8_Handler();
;;;672        }
;;;673        if (GPIOIrqStatus & BIT12)
;;;674        {
;;;675            GPIO12_Handler();
;;;676        }
;;;677        if (GPIOIrqStatus & BIT16)
;;;678        {
;;;679            GPIO16_Handler();
;;;680        }
;;;681        if (GPIOIrqStatus & BIT20)
;;;682        {
;;;683            GPIO20_Handler();
;;;684        }
;;;685        if (GPIOIrqStatus & BIT24)
;;;686        {
;;;687            GPIO24_Handler();
;;;688        }
;;;689        if (GPIOIrqStatus & BIT28)
;;;690        {
;;;691            GPIO28_Handler();
;;;692        }
;;;693    }
;;;694    
;;;695    void WDG_SystemReset(T_WDG_MODE wdg_mode, T_SW_RESET_REASON reset_reason)
;;;696    {
;;;697        uint32_t parm = wdg_mode | (reset_reason << 8);
        0x00207dcc:    ea402101    @..!    ORR      r1,r0,r1,LSL #8
;;;698        SystemCall(SYSTEM_CALL_WDG_RESET, parm);
        0x00207dd0:    2001        .       MOVS     r0,#1
        0x00207dd2:    f5ffba65    ..e.    B        SystemCall ; 0x72a0
    flash_try_high_speed
;;;699    }
;;;700    
;;;701    /**
;;;702     * @brief  flash try to switch to high speed bit mode
;;;703     * @note  switch back to 1 bit mode, if flash switch to high speed bit mode fail
;;;704     * @param  bit_mode config bit mode @ref T_FLASH_MODE
;;;705     * @retval 0 fail
;;;706     * @retval 1 success
;;;707      */
;;;708    uint32_t flash_try_high_speed(T_FLASH_MODE bit_mode)
;;;709    {
        0x00207dd6:    b510        ..      PUSH     {r4,lr}
;;;710        uint32_t result = 0;
;;;711        OTP->bit_mode = bit_mode;
        0x00207dd8:    f44f1400    O...    MOV      r4,#0x200000
        0x00207ddc:    2200        ."      MOVS     r2,#0
        0x00207dde:    f894134c    ..L.    LDRB     r1,[r4,#0x34c]
        0x00207de2:    f3600101    `...    BFI      r1,r0,#0,#2
        0x00207de6:    f884134c    ..L.    STRB     r1,[r4,#0x34c]
;;;712        result = flash_ioctl(flash_ioctrl_try_high_speed, 0, 0);
        0x00207dea:    4611        .F      MOV      r1,r2
        0x00207dec:    f2450002    E...    MOV      r0,#0x5002
        0x00207df0:    f604f93f    ..?.    BL       flash_ioctl ; 0xc072
;;;713        //if try fail, set back OTP->bit_mode to one bit mode
;;;714        if (!result)
        0x00207df4:    2800        .(      CMP      r0,#0
        0x00207df6:    d105        ..      BNE      0x207e04 ; flash_try_high_speed + 46
;;;715        {
;;;716            OTP->bit_mode = FLASH_MODE_1BIT;
        0x00207df8:    f894134c    ..L.    LDRB     r1,[r4,#0x34c]
        0x00207dfc:    f0210103    !...    BIC      r1,r1,#3
        0x00207e00:    f884134c    ..L.    STRB     r1,[r4,#0x34c]
;;;717        }
;;;718        return result;
;;;719    }
        0x00207e04:    bd10        ..      POP      {r4,pc}
    app_cb0_wdg_reset
        0x00207e06:    4a11        .J      LDR      r2,[pc,#68] ; [0x207e4c] = 0x209844
        0x00207e08:    6812        .h      LDR      r2,[r2,#0]
;;;720    
;;;721    void app_cb0_wdg_reset(T_WDG_MODE wdg_mode, T_SW_RESET_REASON reset_reason)
;;;722    {
        0x00207e0a:    2a00        .*      CMP      r2,#0
        0x00207e0c:    d000        ..      BEQ      0x207e10 ; app_cb0_wdg_reset + 10
;;;723        if (user_wdg_cb)
;;;724        {
;;;725            if (user_wdg_cb(wdg_mode, reset_reason))
        0x00207e0e:    4710        .G      BX       r2
;;;726            {
;;;727                return;
;;;728            }
;;;729        }
;;;730    
;;;731        //do something necessary before watch dog reset
;;;732    }
        0x00207e10:    4770        pG      BX       lr
    $d
        0x00207e12:    0000        ..      DCW    0
        0x00207e14:    53206e49    In S    DCD    1394634313
        0x00207e18:    4d20436f    oC M    DCD    1293960047
        0x00207e1c:    0065646f    ode.    DCD    6644847
        0x00207e20:    4e524157    WARN    DCD    1314013527
        0x00207e24:    3a474e49    ING:    DCD    977751625
        0x00207e28:    206e4920     In     DCD    544098592
        0x00207e2c:    20494348    HCI     DCD    541672264
        0x00207e30:    65646f4d    Mode    DCD    1701080909
        0x00207e34:    6977202c    , wi    DCD    1769414700
        0x00207e38:    6e206c6c    ll n    DCD    1847618668
        0x00207e3c:    7220746f    ot r    DCD    1914729583
        0x00207e40:    41206e75    un A    DCD    1092644469
        0x00207e44:    54205050    PP T    DCD    1411403856
        0x00207e48:    006b7361    ask.    DCD    7041889
        0x00207e4c:    00209844    D. .    DCD    2136132
    $t
    .text
    RCC_PeriphClockCmd
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_rcc.c
;;;66     {
        0x00207e50:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00207e52:    f44f7790    O..w    MOV      r7,#0x120
        0x00207e56:    067b        {.      LSLS     r3,r7,#25
;;;67         /* Check the parameters */
;;;68         assert_param(IS_APB_PERIPH(APBPeriph));
;;;69         assert_param(IS_APB_PERIPH_CLOCK(APBPeriph_Clock));
;;;70         assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;71     
;;;72         uint32_t apbRegOff = ((APBPeriph & (0x03 << 26)) >> 26);
        0x00207e58:    f3c06681    ...f    UBFX     r6,r0,#26,#2
;;;73         uint32_t clkRegOff = ((APBPeriph_Clock & (0x03 << 29)) >> 29);
        0x00207e5c:    f3c17541    ..Au    UBFX     r5,r1,#29,#2
        0x00207e60:    f44f7ea0    O..~    MOV      lr,#0x140
        0x00207e64:    ea400401    @...    ORR      r4,r0,r1
;;;74     
;;;75         /*Open clock gating first*/
;;;76         if (NewState == ENABLE)
        0x00207e68:    2a01        .*      CMP      r2,#1
        0x00207e6a:    d006        ..      BEQ      0x207e7a ; RCC_PeriphClockCmd + 42
        0x00207e6c:    42b9        .B      CMP      r1,r7
        0x00207e6e:    d06f        o.      BEQ      0x207f50 ; RCC_PeriphClockCmd + 256
        0x00207e70:    4571        qE      CMP      r1,lr
        0x00207e72:    d06d        m.      BEQ      0x207f50 ; RCC_PeriphClockCmd + 256
        0x00207e74:    2910        .)      CMP      r1,#0x10
        0x00207e76:    d06b        k.      BEQ      0x207f50 ; RCC_PeriphClockCmd + 256
        0x00207e78:    e04b        K.      B        0x207f12 ; RCC_PeriphClockCmd + 194
;;;77         {
;;;78             if (APBPeriph_Clock == APBPeriph_KEYSCAN_CLOCK)
        0x00207e7a:    f1a14cc0    ...L    SUB      r12,r1,#0x60000000
        0x00207e7e:    f1bc0c40    ..@.    SUBS     r12,r12,#0x40
        0x00207e82:    d018        ..      BEQ      0x207eb6 ; RCC_PeriphClockCmd + 102
        0x00207e84:    f1b14fc2    ...O    CMP      r1,#0x61000000
        0x00207e88:    d020         .      BEQ      0x207ecc ; RCC_PeriphClockCmd + 124
        0x00207e8a:    f1a14cc0    ...L    SUB      r12,r1,#0x60000000
        0x00207e8e:    f1bc0c10    ....    SUBS     r12,r12,#0x10
        0x00207e92:    d003        ..      BEQ      0x207e9c ; RCC_PeriphClockCmd + 76
        0x00207e94:    f8dfc2f0    ....    LDR      r12,[pc,#752] ; [0x208188] = 0x60010000
        0x00207e98:    4561        aE      CMP      r1,r12
        0x00207e9a:    d124        $.      BNE      0x207ee6 ; RCC_PeriphClockCmd + 150
        0x00207e9c:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x00207ea0:    f04c6c80    L..l    ORR      r12,r12,#0x4000000
        0x00207ea4:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
        0x00207ea8:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x00207eac:    f04c6c00    L..l    ORR      r12,r12,#0x8000000
        0x00207eb0:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
        0x00207eb4:    e027        '.      B        0x207f06 ; RCC_PeriphClockCmd + 182
;;;79             {
;;;80                 /*Open 5M clock source*/
;;;81                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
        0x00207eb6:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x00207eba:    f04c6c80    L..l    ORR      r12,r12,#0x4000000
        0x00207ebe:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
;;;82                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
        0x00207ec2:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x00207ec6:    f04c5c00    L..\    ORR      r12,r12,#0x20000000
        0x00207eca:    e7f1        ..      B        0x207eb0 ; RCC_PeriphClockCmd + 96
;;;83             }
;;;84             else if (APBPeriph_Clock == APBPeriph_ADC_CLOCK)
;;;85             {
;;;86                 /*Open 10M clock source*/
;;;87                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
        0x00207ecc:    f8d3420c    ...B    LDR      r4,[r3,#0x20c]
        0x00207ed0:    f0446480    D..d    ORR      r4,r4,#0x4000000
        0x00207ed4:    f8c3420c    ...B    STR      r4,[r3,#0x20c]
;;;88                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
        0x00207ed8:    f8d3420c    ...B    LDR      r4,[r3,#0x20c]
        0x00207edc:    f0445480    D..T    ORR      r4,r4,#0x10000000
        0x00207ee0:    f8c3420c    ...B    STR      r4,[r3,#0x20c]
        0x00207ee4:    e015        ..      B        0x207f12 ; RCC_PeriphClockCmd + 194
;;;89             }
;;;90             else if ((APBPeriph_Clock == APBPeriph_QDEC_CLOCK) || (APBPeriph_Clock == APBPeriph_SPI2W_CLOCK))
;;;91             {
;;;92                 /*Open 20M clock source*/
;;;93                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;94                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;95             }
;;;96             else if (APBPeriph_Clock == APBPeriph_TIMER_CLOCK)
        0x00207ee6:    f8dfc2a4    ....    LDR      r12,[pc,#676] ; [0x20818c] = 0x20004000
        0x00207eea:    4561        aE      CMP      r1,r12
        0x00207eec:    d10b        ..      BNE      0x207f06 ; RCC_PeriphClockCmd + 182
;;;97             {
;;;98                 /* Enable TIM0~1 fixed 40M */
;;;99                 CLK_SOURCE_REG_2 |= BIT9;
        0x00207eee:    f8d3c360    ..`.    LDR      r12,[r3,#0x360]
        0x00207ef2:    f44c7c00    L..|    ORR      r12,r12,#0x200
        0x00207ef6:    f8c3c360    ..`.    STR      r12,[r3,#0x360]
;;;100                /* enable TIM2~7 ICG*/
;;;101                CLK_SOURCE_REG_0 |= BIT4;
        0x00207efa:    f8d3c348    ..H.    LDR      r12,[r3,#0x348]
        0x00207efe:    f04c0c10    L...    ORR      r12,r12,#0x10
        0x00207f02:    f8c3c348    ..H.    STR      r12,[r3,#0x348]
;;;102            }
;;;103        }
;;;104    
;;;105        /* Special register handle */
;;;106        if (NewState == ENABLE)
;;;107        {
;;;108            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
        0x00207f06:    42b9        .B      CMP      r1,r7
        0x00207f08:    d01d        ..      BEQ      0x207f46 ; RCC_PeriphClockCmd + 246
        0x00207f0a:    4571        qE      CMP      r1,lr
        0x00207f0c:    d01b        ..      BEQ      0x207f46 ; RCC_PeriphClockCmd + 246
;;;109                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
        0x00207f0e:    2910        .)      CMP      r1,#0x10
        0x00207f10:    d019        ..      BEQ      0x207f46 ; RCC_PeriphClockCmd + 246
;;;110            {
;;;111                SYSBLKCTRL->u_220 |= APBPeriph | APBPeriph_Clock;
;;;112                return;
;;;113            }
;;;114        }
;;;115        else
;;;116        {
;;;117            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
;;;118                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
;;;119            {
;;;120                SYSBLKCTRL->u_220 &= ~(APBPeriph | APBPeriph_Clock);
;;;121                return;
;;;122            }
;;;123        }
;;;124    
;;;125        /* clear flag */
;;;126        APBPeriph &= (~(0x03 << 26));
        0x00207f12:    f0206340     .@c    BIC      r3,r0,#0xc000000
;;;127        APBPeriph_Clock &= (~(0x03 << 29));
        0x00207f16:    f02140c0    !..@    BIC      r0,r1,#0x60000000
        0x00207f1a:    ea4f0186    O...    LSL      r1,r6,#2
        0x00207f1e:    f1014180    ...A    ADD      r1,r1,#0x40000000
;;;128    
;;;129        if (NewState == ENABLE)
        0x00207f22:    2a01        .*      CMP      r2,#1
        0x00207f24:    f8d12210    ..."    LDR      r2,[r1,#0x210]
        0x00207f28:    d018        ..      BEQ      0x207f5c ; RCC_PeriphClockCmd + 268
;;;130        {
;;;131            //enable peripheral
;;;132            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) |= APBPeriph;
;;;133            //enable peripheral clock
;;;134            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= APBPeriph_Clock;
;;;135            //enable peripheral clock in sleep mode
;;;136            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= (APBPeriph_Clock << 1);
;;;137        }
;;;138        else
;;;139        {
;;;140            //disable peripheral
;;;141            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) &= (~APBPeriph);
        0x00207f2a:    439a        .C      BICS     r2,r2,r3
;;;142            //disable peripheral clock
;;;143            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~APBPeriph_Clock);
        0x00207f2c:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x00207f30:    00a9        ..      LSLS     r1,r5,#2
        0x00207f32:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x00207f36:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x00207f3a:    4382        .C      BICS     r2,r2,r0
;;;144            //disable peripheral clock in sleep mode
;;;145            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~(APBPeriph_Clock << 1));
        0x00207f3c:    ea220040    ".@.    BIC      r0,r2,r0,LSL #1
        0x00207f40:    f8c1022c    ..,.    STR      r0,[r1,#0x22c]
;;;146        }
;;;147    
;;;148        return;
;;;149    }
        0x00207f44:    bdf0        ..      POP      {r4-r7,pc}
        0x00207f46:    f8d30220    .. .    LDR      r0,[r3,#0x220]
        0x00207f4a:    4320         C      ORRS     r0,r0,r4
        0x00207f4c:    e003        ..      B        0x207f56 ; RCC_PeriphClockCmd + 262
        0x00207f4e:    e7ff        ..      B        0x207f50 ; RCC_PeriphClockCmd + 256
        0x00207f50:    f8d30220    .. .    LDR      r0,[r3,#0x220]
        0x00207f54:    43a0        .C      BICS     r0,r0,r4
        0x00207f56:    f8c30220    .. .    STR      r0,[r3,#0x220]
        0x00207f5a:    bdf0        ..      POP      {r4-r7,pc}
        0x00207f5c:    431a        .C      ORRS     r2,r2,r3
        0x00207f5e:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x00207f62:    00a9        ..      LSLS     r1,r5,#2
        0x00207f64:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x00207f68:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x00207f6c:    4302        .C      ORRS     r2,r2,r0
        0x00207f6e:    ea420040    B.@.    ORR      r0,r2,r0,LSL #1
        0x00207f72:    e7e5        ..      B        0x207f40 ; RCC_PeriphClockCmd + 240
    RCC_SPIClkDivConfig
;;;150    
;;;151    /**
;;;152      * @brief  SPI clock divider config.
;;;153      * @param  SPIx: where x can be 0 or 1 to select the SPI peripheral.
;;;154      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;155      *      this parameter can be one of the following values:
;;;156      *     @arg SPI_CLOCK_DIV_1
;;;157      *     @arg SPI_CLOCK_DIV_2
;;;158      *     @arg SPI_CLOCK_DIV_4
;;;159      *     @arg SPI_CLOCK_DIV_8
;;;160      * @retval None
;;;161      */
;;;162    void RCC_SPIClkDivConfig(SPI_TypeDef *SPIx, uint16_t ClockDiv)
;;;163    {
;;;164        assert_param(IS_SPI_DIV(ClockDiv));
;;;165    
;;;166        /* Config I2C clock divider */
;;;167        if (SPIx == SPI0)
        0x00207f74:    4b86        .K      LDR      r3,[pc,#536] ; [0x208190] = 0x40013000
        0x00207f76:    f04f4280    O..B    MOV      r2,#0x40000000
        0x00207f7a:    4298        .B      CMP      r0,r3
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_rcc.c (163)
        0x00207f7c:    d116        ..      BNE      0x207fac ; RCC_SPIClkDivConfig + 56
;;;164        assert_param(IS_SPI_DIV(ClockDiv));
;;;165    
;;;166        /* Config I2C clock divider */
;;;167        if (SPIx == SPI0)
;;;168        {
;;;169            /* disable clock first */
;;;170            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_SPI0_EN_Msk;
        0x00207f7e:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00207f82:    f4203080     ..0    BIC      r0,r0,#0x10000
        0x00207f86:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;171            //platform_delay_us(1);
;;;172    
;;;173            CLK_SOURCE_REG_1 &= ~(0x03 << 19);
        0x00207f8a:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207f8e:    f42010c0     ...    BIC      r0,r0,#0x180000
        0x00207f92:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;174            CLK_SOURCE_REG_1 |= (ClockDiv << 19);
        0x00207f96:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207f9a:    ea4040c1    @..@    ORR      r0,r0,r1,LSL #19
        0x00207f9e:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;175    
;;;176            //platform_delay_us(1);
;;;177            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_SPI0_EN_Msk;
        0x00207fa2:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00207fa6:    f4403080    @..0    ORR      r0,r0,#0x10000
        0x00207faa:    e018        ..      B        0x207fde ; RCC_SPIClkDivConfig + 106
;;;178        }
;;;179        else if (SPIx == SPI1)
        0x00207fac:    4b79        yK      LDR      r3,[pc,#484] ; [0x208194] = 0x40013400
        0x00207fae:    4298        .B      CMP      r0,r3
        0x00207fb0:    d117        ..      BNE      0x207fe2 ; RCC_SPIClkDivConfig + 110
;;;180        {
;;;181            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_SPI1_EN_Msk;
        0x00207fb2:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00207fb6:    f4202080     ..     BIC      r0,r0,#0x40000
        0x00207fba:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;182            //platform_delay_us(1);
;;;183    
;;;184            CLK_SOURCE_REG_1 &= ~(0x03 << 21);
        0x00207fbe:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207fc2:    f42000c0     ...    BIC      r0,r0,#0x600000
        0x00207fc6:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;185            CLK_SOURCE_REG_1 |= (ClockDiv << 21);
        0x00207fca:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207fce:    ea405041    @.AP    ORR      r0,r0,r1,LSL #21
        0x00207fd2:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;186    
;;;187            //platform_delay_us(1);
;;;188            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_SPI1_EN_Msk;
        0x00207fd6:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00207fda:    f4402080    @..     ORR      r0,r0,#0x40000
        0x00207fde:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;189        }
;;;190        return;
;;;191    }
        0x00207fe2:    4770        pG      BX       lr
    RCC_I2CClkDivConfig
;;;192    
;;;193    /**
;;;194      * @brief  I2C clock divider config.
;;;195      * @param  I2Cx: where x can be 0 or 1 to select the I2C peripheral.
;;;196      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;197      *      this parameter can be one of the following values:
;;;198      *     @arg I2C_CLOCK_DIV_1
;;;199      *     @arg I2C_CLOCK_DIV_2
;;;200      *     @arg I2C_CLOCK_DIV_4
;;;201      *     @arg I2C_CLOCK_DIV_8
;;;202      * @retval None
;;;203      */
;;;204    void RCC_I2CClkDivConfig(I2C_TypeDef *I2Cx, uint16_t ClockDiv)
;;;205    {
;;;206        assert_param(IS_I2C_DIV(ClockDiv));
;;;207    
;;;208        /* Config I2C clock divider */
;;;209        if (I2Cx == I2C0)
        0x00207fe4:    4b6c        lK      LDR      r3,[pc,#432] ; [0x208198] = 0x40015000
        0x00207fe6:    049a        ..      LSLS     r2,r3,#18
        0x00207fe8:    4298        .B      CMP      r0,r3
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_rcc.c (205)
        0x00207fea:    d116        ..      BNE      0x20801a ; RCC_I2CClkDivConfig + 54
;;;206        assert_param(IS_I2C_DIV(ClockDiv));
;;;207    
;;;208        /* Config I2C clock divider */
;;;209        if (I2Cx == I2C0)
;;;210        {
;;;211            /* disable clock first */
;;;212            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 &= ~SYSBLK_ACTCK_I2C0_EN_Msk;
        0x00207fec:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x00207ff0:    f0200001     ...    BIC      r0,r0,#1
        0x00207ff4:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;213            //platform_delay_us(1);
;;;214    
;;;215            CLK_SOURCE_REG_1 &= ~(0x03 << 15);
        0x00207ff8:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207ffc:    f42030c0     ..0    BIC      r0,r0,#0x18000
        0x00208000:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;216            CLK_SOURCE_REG_1 |= (ClockDiv << 15);
        0x00208004:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00208008:    ea4030c1    @..0    ORR      r0,r0,r1,LSL #15
        0x0020800c:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;217    
;;;218            //platform_delay_us(1);
;;;219            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= SYSBLK_ACTCK_I2C0_EN_Msk;
        0x00208010:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x00208014:    f0400001    @...    ORR      r0,r0,#1
        0x00208018:    e018        ..      B        0x20804c ; RCC_I2CClkDivConfig + 104
;;;220        }
;;;221        else if (I2Cx == I2C1)
        0x0020801a:    4b60        `K      LDR      r3,[pc,#384] ; [0x20819c] = 0x40015400
        0x0020801c:    4298        .B      CMP      r0,r3
        0x0020801e:    d117        ..      BNE      0x208050 ; RCC_I2CClkDivConfig + 108
;;;222        {
;;;223            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 &= ~SYSBLK_ACTCK_I2C1_EN_Msk;
        0x00208020:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x00208024:    f0200004     ...    BIC      r0,r0,#4
        0x00208028:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;224            //platform_delay_us(1);
;;;225    
;;;226            CLK_SOURCE_REG_1 &= ~(0x03 << 17);
        0x0020802c:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00208030:    f42020c0     ..     BIC      r0,r0,#0x60000
        0x00208034:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;227            CLK_SOURCE_REG_1 |= (ClockDiv << 17);
        0x00208038:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0020803c:    ea404041    @.A@    ORR      r0,r0,r1,LSL #17
        0x00208040:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;228    
;;;229            //platform_delay_us(1);
;;;230            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= SYSBLK_ACTCK_I2C1_EN_Msk;
        0x00208044:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x00208048:    f0400004    @...    ORR      r0,r0,#4
        0x0020804c:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;231        }
;;;232    
;;;233        return;
;;;234    }
        0x00208050:    4770        pG      BX       lr
    RCC_UARTClkDivConfig
        0x00208052:    4b53        SK      LDR      r3,[pc,#332] ; [0x2081a0] = 0x40012000
        0x00208054:    045a        Z.      LSLS     r2,r3,#17
        0x00208056:    4298        .B      CMP      r0,r3
;;;235    
;;;236    /**
;;;237      * @brief  UART clock divider config.
;;;238      * @param  UARTx: selected UART peripheral.
;;;239      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;240      *      this parameter can be one of the following values:
;;;241      *     @arg UART_CLOCK_DIV_1
;;;242      *     @arg UART_CLOCK_DIV_2
;;;243      *     @arg UART_CLOCK_DIV_4
;;;244      *     @arg UART_CLOCK_DIV_16
;;;245      * @retval None
;;;246      */
;;;247    void RCC_UARTClkDivConfig(UART_TypeDef *UARTx, uint16_t ClockDiv)
;;;248    {
        0x00208058:    d118        ..      BNE      0x20808c ; RCC_UARTClkDivConfig + 58
;;;249        assert_param(IS_UART_DIV(ClockDiv));
;;;250    
;;;251        /* Config UART clock divider */
;;;252        if (UARTx == UART)
;;;253        {
;;;254            /* disable clock first */
;;;255            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_UART0DATA_EN_Msk;
        0x0020805a:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x0020805e:    f0200001     ...    BIC      r0,r0,#1
        0x00208062:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;256            //platform_delay_us(1);
;;;257    
;;;258            CLK_SOURCE_REG_1 &= ~(0x03 << 9);
        0x00208066:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0020806a:    f42060c0     ..`    BIC      r0,r0,#0x600
        0x0020806e:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;259            CLK_SOURCE_REG_1 |= (ClockDiv << 9);
        0x00208072:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00208076:    ea402041    @.A     ORR      r0,r0,r1,LSL #9
        0x0020807a:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;260    
;;;261            //platform_delay_us(1);
;;;262            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_UART0DATA_EN_Msk;
        0x0020807e:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00208082:    f0400001    @...    ORR      r0,r0,#1
        0x00208086:    f8c20234    ..4.    STR      r0,[r2,#0x234]
        0x0020808a:    4770        pG      BX       lr
;;;263        }
;;;264        else if (UARTx == UART1)
        0x0020808c:    4b45        EK      LDR      r3,[pc,#276] ; [0x2081a4] = 0x40011000
        0x0020808e:    4298        .B      CMP      r0,r3
        0x00208090:    d1fb        ..      BNE      0x20808a ; RCC_UARTClkDivConfig + 56
;;;265        {
;;;266            SYSBLKCTRL->u_230.CLK_CTRL &= ~SYSBLK_ACTCK_LOGUART_EN_Msk;
        0x00208092:    f8d20230    ..0.    LDR      r0,[r2,#0x230]
        0x00208096:    f4205080     ..P    BIC      r0,r0,#0x1000
        0x0020809a:    f8c20230    ..0.    STR      r0,[r2,#0x230]
;;;267            //platform_delay_us(1);
;;;268    
;;;269            CLK_SOURCE_REG_1 &= ~(0x03 << 11);
        0x0020809e:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x002080a2:    f42050c0     ..P    BIC      r0,r0,#0x1800
        0x002080a6:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;270            CLK_SOURCE_REG_1 |= (ClockDiv << 11);
        0x002080aa:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x002080ae:    ea4020c1    @..     ORR      r0,r0,r1,LSL #11
        0x002080b2:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;271    
;;;272            //platform_delay_us(1);
;;;273            SYSBLKCTRL->u_230.CLK_CTRL |= SYSBLK_ACTCK_LOGUART_EN_Msk;
        0x002080b6:    f8d20230    ..0.    LDR      r0,[r2,#0x230]
        0x002080ba:    f4405080    @..P    ORR      r0,r0,#0x1000
        0x002080be:    f8c20230    ..0.    STR      r0,[r2,#0x230]
;;;274        }
;;;275    
;;;276        return;
;;;277    }
        0x002080c2:    4770        pG      BX       lr
    RCC_PeriClockConfig
;;;278    
;;;279    /**
;;;280      * @brief  Enables or disables the APB peripheral clock.
;;;281      * @param  APBPeriph_Clock: specifies the APB peripheral clock config.
;;;282      *      this parameter can be one of the following values(must be the same with APBPeriph):
;;;283      *     @arg APBPeriph_TIMER_CLOCK
;;;284      *     @arg APBPeriph_GDMA_CLOCK
;;;285      *     @arg APBPeriph_SPI2W_CLOCK
;;;286      *     @arg APBPeriph_KEYSCAN_CLOCK
;;;287      *     @arg APBPeriph_QDEC_CLOCK
;;;288      *     @arg APBPeriph_I2C1_CLOCK
;;;289      *     @arg APBPeriph_I2C0_CLOCK
;;;290      *     @arg APBPeriph_IR_CLOCK
;;;291      *     @arg APBPeriph_SPI1_CLOCK
;;;292      *     @arg APBPeriph_SPI0_CLOCK
;;;293      *     @arg APBPeriph_UART0_CLOCK
;;;294      *     @arg APBPeriph_UART1_CLOCK
;;;295      *     @arg APBPeriph_UART2_CLOCK
;;;296      *     @arg APBPeriph_GPIO_CLOCK
;;;297      *     @arg APBPeriph_ADC_CLOCK
;;;298      *     @arg APBPeriph_I2S0_CLOCK
;;;299      *     @arg APBPeriph_I2S1_CLOCK
;;;300      *     @arg APBPeriph_CODEC_CLOCK
;;;301      * @param  NewState: new state of the specified peripheral clock.
;;;302      *   This parameter can be: ENABLE or DISABLE.
;;;303      * @retval None
;;;304      */
;;;305    void RCC_PeriClockConfig(uint32_t APBPeriph_Clock, FunctionalState NewState)
;;;306    {
        0x002080c4:    b530        0.      PUSH     {r4,r5,lr}
        0x002080c6:    f44f74a0    O..t    MOV      r4,#0x140
        0x002080ca:    0623        #.      LSLS     r3,r4,#24
        0x002080cc:    f3c07241    ..Ar    UBFX     r2,r0,#29,#2
        0x002080d0:    f44f7590    O..u    MOV      r5,#0x120
        0x002080d4:    2901        .)      CMP      r1,#1
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_rcc.c (306)
        0x002080d6:    d006        ..      BEQ      0x2080e6 ; RCC_PeriClockConfig + 34
        0x002080d8:    42a8        .B      CMP      r0,r5
        0x002080da:    d01e        ..      BEQ      0x20811a ; RCC_PeriClockConfig + 86
        0x002080dc:    42a0        .B      CMP      r0,r4
        0x002080de:    d01c        ..      BEQ      0x20811a ; RCC_PeriClockConfig + 86
        0x002080e0:    2810        .(      CMP      r0,#0x10
        0x002080e2:    d01a        ..      BEQ      0x20811a ; RCC_PeriClockConfig + 86
        0x002080e4:    e005        ..      B        0x2080f2 ; RCC_PeriClockConfig + 46
;;;307        /* Check the parameters */
;;;308        assert_param(IS_APB_PERIPH_CLOCK(APBPeriph_Clock));
;;;309        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;310    
;;;311        uint32_t clkRegOff = ((APBPeriph_Clock & (0x03 << 29)) >> 29);
;;;312    
;;;313        /* Special register handle */
;;;314        if (NewState == ENABLE)
;;;315        {
;;;316            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
        0x002080e6:    42a8        .B      CMP      r0,r5
        0x002080e8:    d013        ..      BEQ      0x208112 ; RCC_PeriClockConfig + 78
        0x002080ea:    42a0        .B      CMP      r0,r4
        0x002080ec:    d011        ..      BEQ      0x208112 ; RCC_PeriClockConfig + 78
;;;317                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
        0x002080ee:    2810        .(      CMP      r0,#0x10
        0x002080f0:    d00f        ..      BEQ      0x208112 ; RCC_PeriClockConfig + 78
        0x002080f2:    2901        .)      CMP      r1,#1
        0x002080f4:    ea4f0182    O...    LSL      r1,r2,#2
        0x002080f8:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x002080fc:    f02040c0     ..@    BIC      r0,r0,#0x60000000
        0x00208100:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x00208104:    d00f        ..      BEQ      0x208126 ; RCC_PeriClockConfig + 98
        0x00208106:    4382        .C      BICS     r2,r2,r0
        0x00208108:    ea220040    ".@.    BIC      r0,r2,r0,LSL #1
        0x0020810c:    f8c1022c    ..,.    STR      r0,[r1,#0x22c]
        0x00208110:    bd30        0.      POP      {r4,r5,pc}
;;;318            {
;;;319                SYSBLKCTRL->u_220 |= APBPeriph_Clock;
        0x00208112:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x00208116:    4301        .C      ORRS     r1,r1,r0
;;;320                return;
        0x00208118:    e002        ..      B        0x208120 ; RCC_PeriClockConfig + 92
;;;321            }
;;;322        }
;;;323        else
;;;324        {
;;;325            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
;;;326                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
;;;327            {
;;;328                SYSBLKCTRL->u_220 &= ~(APBPeriph_Clock);
        0x0020811a:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x0020811e:    4381        .C      BICS     r1,r1,r0
        0x00208120:    f8c31220    .. .    STR      r1,[r3,#0x220]
        0x00208124:    bd30        0.      POP      {r4,r5,pc}
;;;329                return;
;;;330            }
;;;331        }
;;;332    
;;;333        APBPeriph_Clock &= (~(0x03 << 29));
;;;334    
;;;335        if (NewState == ENABLE)
;;;336        {
;;;337            //enable peripheral clock
;;;338            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= APBPeriph_Clock;
        0x00208126:    4302        .C      ORRS     r2,r2,r0
;;;339            //enable peripheral clock in sleep mode
;;;340            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= (APBPeriph_Clock << 1);
        0x00208128:    ea420040    B.@.    ORR      r0,r2,r0,LSL #1
        0x0020812c:    e7ee        ..      B        0x20810c ; RCC_PeriClockConfig + 72
    RCC_PeriFunctionConfig
        0x0020812e:    f3c06281    ...b    UBFX     r2,r0,#26,#2
        0x00208132:    f04f4380    O..C    MOV      r3,#0x40000000
        0x00208136:    2901        .)      CMP      r1,#1
;;;341        }
;;;342        else
;;;343        {
;;;344            //disable peripheral clock
;;;345            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~APBPeriph_Clock);
;;;346            //disable peripheral clock in sleep mode
;;;347            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~(APBPeriph_Clock << 1));
;;;348        }
;;;349    
;;;350        return;
;;;351    }
;;;352    
;;;353    /**
;;;354      * @brief  Enables or disables the APB peripheral clock.
;;;355      * @param  APBPeriph: specifies the APB peripheral to gates its clock.
;;;356      *      this parameter can be one of the following values:
;;;357      *     @arg APBPeriph_TIMER
;;;358      *     @arg APBPeriph_GDMA
;;;359      *     @arg APBPeriph_LCD
;;;360      *     @arg APBPeriph_SPI2W
;;;361      *     @arg APBPeriph_KEYSCAN
;;;362      *     @arg APBPeriph_QDEC
;;;363      *     @arg APBPeriph_I2C1
;;;364      *     @arg APBPeriph_I2C0
;;;365      *     @arg APBPeriph_IR
;;;366      *     @arg APBPeriph_SPI1
;;;367      *     @arg APBPeriph_SPI0
;;;368      *     @arg APBPeriph_UART0
;;;369      *     @arg APBPeriph_UART1
;;;370      *     @arg APBPeriph_UART2
;;;371      *     @arg APBPeriph_GPIO
;;;372      *     @arg APBPeriph_ADC
;;;373      *     @arg APBPeriph_I2S0
;;;374      *     @arg APBPeriph_I2S1
;;;375      *     @arg APBPeriph_CODEC
;;;376      * @param  NewState: new state of the specified peripheral clock.
;;;377      *   This parameter can be: ENABLE or DISABLE.
;;;378      * @retval None
;;;379      */
;;;380    void RCC_PeriFunctionConfig(uint32_t APBPeriph, FunctionalState NewState)
;;;381    {
        0x00208138:    d006        ..      BEQ      0x208148 ; RCC_PeriFunctionConfig + 26
        0x0020813a:    2802        .(      CMP      r0,#2
        0x0020813c:    d01c        ..      BEQ      0x208178 ; RCC_PeriFunctionConfig + 74
        0x0020813e:    2804        .(      CMP      r0,#4
        0x00208140:    d01a        ..      BEQ      0x208178 ; RCC_PeriFunctionConfig + 74
        0x00208142:    2801        .(      CMP      r0,#1
        0x00208144:    d018        ..      BEQ      0x208178 ; RCC_PeriFunctionConfig + 74
        0x00208146:    e005        ..      B        0x208154 ; RCC_PeriFunctionConfig + 38
;;;382        /* Check the parameters */
;;;383        assert_param(IS_APB_PERIPH(APBPeriph));
;;;384        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;385    
;;;386        uint32_t apbRegOff = ((APBPeriph & (0x03 << 26)) >> 26);
;;;387    
;;;388        /* Special register handle */
;;;389        if (NewState == ENABLE)
;;;390        {
;;;391            if ((APBPeriph == APBPeriph_I2S0) || ((APBPeriph == APBPeriph_I2S1)) ||
        0x00208148:    2802        .(      CMP      r0,#2
        0x0020814a:    d011        ..      BEQ      0x208170 ; RCC_PeriFunctionConfig + 66
        0x0020814c:    2804        .(      CMP      r0,#4
        0x0020814e:    d00f        ..      BEQ      0x208170 ; RCC_PeriFunctionConfig + 66
;;;392                (APBPeriph == APBPeriph_CODEC))
        0x00208150:    2801        .(      CMP      r0,#1
        0x00208152:    d00d        ..      BEQ      0x208170 ; RCC_PeriFunctionConfig + 66
        0x00208154:    2901        .)      CMP      r1,#1
        0x00208156:    ea4f0182    O...    LSL      r1,r2,#2
        0x0020815a:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x0020815e:    f0206040     .@`    BIC      r0,r0,#0xc000000
        0x00208162:    f8d12210    ..."    LDR      r2,[r1,#0x210]
        0x00208166:    d00d        ..      BEQ      0x208184 ; RCC_PeriFunctionConfig + 86
        0x00208168:    4382        .C      BICS     r2,r2,r0
        0x0020816a:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x0020816e:    4770        pG      BX       lr
;;;393            {
;;;394                SYSBLKCTRL->u_220 |= APBPeriph;
        0x00208170:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x00208174:    4301        .C      ORRS     r1,r1,r0
;;;395                return;
        0x00208176:    e002        ..      B        0x20817e ; RCC_PeriFunctionConfig + 80
;;;396            }
;;;397        }
;;;398        else
;;;399        {
;;;400            if ((APBPeriph == APBPeriph_I2S0) || ((APBPeriph == APBPeriph_I2S1)) ||
;;;401                (APBPeriph == APBPeriph_CODEC))
;;;402            {
;;;403                SYSBLKCTRL->u_220 &= ~(APBPeriph);
        0x00208178:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x0020817c:    4381        .C      BICS     r1,r1,r0
        0x0020817e:    f8c31220    .. .    STR      r1,[r3,#0x220]
        0x00208182:    4770        pG      BX       lr
;;;404                return;
;;;405            }
;;;406        }
;;;407    
;;;408        /* clear flag */
;;;409        APBPeriph &= (~(0x03 << 26));
;;;410    
;;;411        if (NewState == ENABLE)
;;;412        {
;;;413            //enable peripheral
;;;414            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) |= APBPeriph;
        0x00208184:    4302        .C      ORRS     r2,r2,r0
        0x00208186:    e7f0        ..      B        0x20816a ; RCC_PeriFunctionConfig + 60
    $d
        0x00208188:    60010000    ...`    DCD    1610678272
        0x0020818c:    20004000    .@.     DCD    536887296
        0x00208190:    40013000    .0.@    DCD    1073819648
        0x00208194:    40013400    .4.@    DCD    1073820672
        0x00208198:    40015000    .P.@    DCD    1073827840
        0x0020819c:    40015400    .T.@    DCD    1073828864
        0x002081a0:    40012000    . .@    DCD    1073815552
        0x002081a4:    40011000    ...@    DCD    1073811456
    $t
    .text
    ADC_Init
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_adc.c
;;;28     {
        0x002081a8:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x002081ac:    4605        .F      MOV      r5,r0
        0x002081ae:    f44f7788    O..w    MOV      r7,#0x110
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_adc.c (28)
        0x002081b2:    460c        .F      MOV      r4,r1
;;;29         uint8_t index = 0;
        0x002081b4:    2600        .&      MOVS     r6,#0
;;;30     
;;;31         assert_param(IS_ADC_PERIPH(ADCx));
;;;32         assert_param(IS_ADC_LATCH_MODE(ADC_InitStruct->dataLatchEdge));
;;;33         assert_param(IS_ADC_CLOCK(ADC_InitStruct->adcClock));
;;;34         assert_param(IS_ADC_POWER_MODE(ADC_InitStruct->pwrmode));
;;;35         assert_param(IS_ADC_RG2X_0_DELAY_TIME(ADC_InitStruct->adcRG2X0Dly));
;;;36         assert_param(IS_ADC_RG0X_1_DELAY_TIME(ADC_InitStruct->adcRG0X1Dly));
;;;37         assert_param(IS_ADC_RG0X_0_DELAY_TIME(ADC_InitStruct->adcRG0X0Dly));
;;;38         assert_param(IS_ADC_BURST_SIZE_CONFIG(ADC_InitStruct->adcBurstSize));
;;;39         assert_param(IS_ADC_FIFO_THRESHOLD(ADC_InitStruct->adcFifoThd));
;;;40     
;;;41         /*Added to stabilize the power supply!*/
;;;42         uint8_t reg_value = 0;
;;;43         reg_value = btaon_fast_read_safe(0x110);
        0x002081b6:    4638        8F      MOV      r0,r7
        0x002081b8:    f636fe24    6.$.    BL       btaon_fast_read_safe ; 0x3ee04
;;;44         btaon_fast_write(0x110, reg_value | 0x04);
        0x002081bc:    f0400104    @...    ORR      r1,r0,#4
        0x002081c0:    4638        8F      MOV      r0,r7
        0x002081c2:    f636fe2f    6./.    BL       btaon_fast_write ; 0x3ee24
;;;45     
;;;46         /*Disable all interrupt.*/
;;;47         ADCx->INTCR &= (~0x1f);
        0x002081c6:    68e8        .h      LDR      r0,[r5,#0xc]
        0x002081c8:    f020001f     ...    BIC      r0,r0,#0x1f
        0x002081cc:    60e8        .`      STR      r0,[r5,#0xc]
;;;48     
;;;49         /* Set power mode first */
;;;50         ADCx->PWRDLY = (ADC_InitStruct->pwrmode | (ADC_InitStruct->adcRefMode)\
        0x002081ce:    6c61        al      LDR      r1,[r4,#0x44]
        0x002081d0:    6ba0        .k      LDR      r0,[r4,#0x38]
        0x002081d2:    8fa2        ..      LDRH     r2,[r4,#0x3c]
        0x002081d4:    4308        .C      ORRS     r0,r0,r1
        0x002081d6:    6ca1        .l      LDR      r1,[r4,#0x48]
        0x002081d8:    ea411182    A...    ORR      r1,r1,r2,LSL #6
        0x002081dc:    4308        .C      ORRS     r0,r0,r1
        0x002081de:    6528        (e      STR      r0,[r5,#0x50]
;;;51                         | (ADC_InitStruct->datalatchDly << 6)) | ADC_InitStruct->adcPowerAlwaysOnCmd;//| BIT22
;;;52         if (ADC_InitStruct->pwrmode == ADC_POWER_AUTO)
        0x002081e0:    6ba0        .k      LDR      r0,[r4,#0x38]
        0x002081e2:    b948        H.      CBNZ     r0,0x2081f8 ; ADC_Init + 80
;;;53         {
;;;54             ADCx->PWRDLY |= (ADC_InitStruct->adcRG2X0Dly \
        0x002081e4:    6d28        (m      LDR      r0,[r5,#0x50]
        0x002081e6:    8fe1        ..      LDRH     r1,[r4,#0x3e]
        0x002081e8:    f8b42042    ..B     LDRH     r2,[r4,#0x42]
        0x002081ec:    4308        .C      ORRS     r0,r0,r1
        0x002081ee:    f8b41040    ..@.    LDRH     r1,[r4,#0x40]
        0x002081f2:    4311        .C      ORRS     r1,r1,r2
        0x002081f4:    4308        .C      ORRS     r0,r0,r1
        0x002081f6:    6528        (e      STR      r0,[r5,#0x50]
;;;55                              | ADC_InitStruct->adcRG0X1Dly \
;;;56                              | ADC_InitStruct->adcRG0X0Dly);
;;;57         }
;;;58     
;;;59         /* Disable schedule table */
;;;60         ADCx->SCHCR &= (~0xffff);
        0x002081f8:    68a8        .h      LDR      r0,[r5,#8]
        0x002081fa:    f36f000f    o...    BFC      r0,#0,#16
        0x002081fe:    60a8        .`      STR      r0,[r5,#8]
        0x00208200:    eb040086    ....    ADD      r0,r4,r6,LSL #2
        0x00208204:    eb050186    ....    ADD      r1,r5,r6,LSL #2
        0x00208208:    f8d0000a    ....    LDR      r0,[r0,#0xa]
        0x0020820c:    6108        .a      STR      r0,[r1,#0x10]
        0x0020820e:    1c76        v.      ADDS     r6,r6,#1
;;;61     
;;;62         /* Set schedule table */
;;;63         for (index = 0; index < 8; index++)
        0x00208210:    b2f6        ..      UXTB     r6,r6
        0x00208212:    2e08        ..      CMP      r6,#8
        0x00208214:    d3f4        ..      BCC      0x208200 ; ADC_Init + 88
;;;64         {
;;;65             *(__IO uint32_t *)((uint32_t *)(&ADCx->SCHTAB0) + index) = (ADC_InitStruct->schIndex[index * 2] |
;;;66                                                                         (ADC_InitStruct->schIndex[index * 2 + 1] << 16));
;;;67         }
;;;68         ADCx->SCHCR = ADC_InitStruct->bitmap;
        0x00208216:    8d60        `.      LDRH     r0,[r4,#0x2a]
        0x00208218:    60a8        .`      STR      r0,[r5,#8]
;;;69     
;;;70         /* Set ADC mode */
;;;71         ADCx->CR = ((ADC_InitStruct->dataLatchEdge)
        0x0020821a:    88e0        ..      LDRH     r0,[r4,#6]
        0x0020821c:    88a1        ..      LDRH     r1,[r4,#4]
        0x0020821e:    78a2        .x      LDRB     r2,[r4,#2]
        0x00208220:    4308        .C      ORRS     r0,r0,r1
        0x00208222:    7861        ax      LDRB     r1,[r4,#1]
        0x00208224:    0509        ..      LSLS     r1,r1,#20
        0x00208226:    ea413182    A..1    ORR      r1,r1,r2,LSL #14
        0x0020822a:    4308        .C      ORRS     r0,r0,r1
        0x0020822c:    f8941034    ..4.    LDRB     r1,[r4,#0x34]
        0x00208230:    ea4060c1    @..`    ORR      r0,r0,r1,LSL #27
        0x00208234:    6068        h`      STR      r0,[r5,#4]
;;;72                     | (ADC_InitStruct->adcFifoThd << 20)
;;;73                     | (ADC_InitStruct->adcBurstSize << 14)
;;;74                     | (ADC_InitStruct->adcFifoOverWritEn)
;;;75                     | (ADC_InitStruct->dataWriteToFifo << 27));
;;;76     
;;;77         /* adc data and clock config */
;;;78         ADCx->DATCLK = (ADC_InitStruct->dataMinusEn
        0x00208236:    f8940035    ..5.    LDRB     r0,[r4,#0x35]
        0x0020823a:    6b21        !k      LDR      r1,[r4,#0x30]
        0x0020823c:    f8942036    ..6     LDRB     r2,[r4,#0x36]
        0x00208240:    4308        .C      ORRS     r0,r0,r1
        0x00208242:    f894102c    ..,.    LDRB     r1,[r4,#0x2c]
        0x00208246:    0749        I.      LSLS     r1,r1,#29
        0x00208248:    ea414102    A..A    ORR      r1,r1,r2,LSL #16
        0x0020824c:    4308        .C      ORRS     r0,r0,r1
        0x0020824e:    7821        !x      LDRB     r1,[r4,#0]
        0x00208250:    4308        .C      ORRS     r0,r0,r1
        0x00208252:    6568        he      STR      r0,[r5,#0x54]
;;;79                         | (ADC_InitStruct->dataAligned)
;;;80                         | (ADC_InitStruct->timerTriggerEn << 29)
;;;81                         | ((ADC_InitStruct->dataMinusOffset) << 16)
;;;82                         | (ADC_InitStruct->adcSamplePeriod));
;;;83         ADCx->ANACTL |= (0x03 << 10);
        0x00208254:    6da8        .m      LDR      r0,[r5,#0x58]
        0x00208256:    f4406040    @.@`    ORR      r0,r0,#0xc00
        0x0020825a:    65a8        .e      STR      r0,[r5,#0x58]
;;;84     
;;;85         /*clear adc fifo*/
;;;86         ADCx->CR |= BIT26;
        0x0020825c:    6868        hh      LDR      r0,[r5,#4]
        0x0020825e:    f0406080    @..`    ORR      r0,r0,#0x4000000
        0x00208262:    6068        h`      STR      r0,[r5,#4]
;;;87         /*clear all interrupt*/
;;;88         ADCx->INTCR |= (0x1f << 8);
        0x00208264:    68e8        .h      LDR      r0,[r5,#0xc]
        0x00208266:    f44050f8    @..P    ORR      r0,r0,#0x1f00
        0x0020826a:    60e8        .`      STR      r0,[r5,#0xc]
;;;89     
;;;90         return;
;;;91     }
        0x0020826c:    e8bd81f0    ....    POP      {r4-r8,pc}
    ADC_StructInit
;;;92     
;;;93     /**
;;;94       * @brief  Fills each ADC_InitStruct member with its default value.
;;;95       * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will be initialized.
;;;96       * @retval None
;;;97       */
;;;98     void ADC_StructInit(ADC_InitTypeDef *ADC_InitStruct)
;;;99     {
;;;100        ADC_InitStruct->adcSamplePeriod   = 128;      /* ( n+ 1) cycle of 10K Hz */
        0x00208270:    2180        .!      MOVS     r1,#0x80
        0x00208272:    7001        .p      STRB     r1,[r0,#0]
;;;101        ADC_InitStruct->dataLatchEdge     = ADC_Latch_Data_Positive;
        0x00208274:    2100        .!      MOVS     r1,#0
        0x00208276:    80c1        ..      STRH     r1,[r0,#6]
;;;102        ADC_InitStruct->adcFifoOverWritEn = ADC_FIFO_OVER_WRITE_ENABLE;
        0x00208278:    f44f5200    O..R    MOV      r2,#0x2000
        0x0020827c:    8082        ..      STRH     r2,[r0,#4]
;;;103        ADC_InitStruct->timerTriggerEn    = DISABLE;
        0x0020827e:    f880102c    ..,.    STRB     r1,[r0,#0x2c]
;;;104        ADC_InitStruct->dataWriteToFifo   = DISABLE;
        0x00208282:    f8801034    ..4.    STRB     r1,[r0,#0x34]
;;;105        ADC_InitStruct->dataAligned       = ADC_DATA_LSB;
;;;106        ADC_InitStruct->dataMinusEn       = ADC_DATA_MINUS_DIS;
        0x00208286:    6301        .c      STR      r1,[r0,#0x30]
        0x00208288:    f8801035    ..5.    STRB     r1,[r0,#0x35]
;;;107        ADC_InitStruct->dataMinusOffset   = 0;
        0x0020828c:    f8801036    ..6.    STRB     r1,[r0,#0x36]
;;;108    
;;;109        ADC_InitStruct->schIndex[0]         = 0;
        0x00208290:    8141        A.      STRH     r1,[r0,#0xa]
;;;110        ADC_InitStruct->schIndex[1]         = 0;
        0x00208292:    8181        ..      STRH     r1,[r0,#0xc]
;;;111        ADC_InitStruct->schIndex[2]         = 0;
        0x00208294:    81c1        ..      STRH     r1,[r0,#0xe]
;;;112        ADC_InitStruct->schIndex[3]         = 0;
        0x00208296:    8201        ..      STRH     r1,[r0,#0x10]
;;;113        ADC_InitStruct->schIndex[4]         = 0;
        0x00208298:    8241        A.      STRH     r1,[r0,#0x12]
;;;114        ADC_InitStruct->schIndex[5]         = 0;
        0x0020829a:    8281        ..      STRH     r1,[r0,#0x14]
;;;115        ADC_InitStruct->schIndex[6]         = 0;
        0x0020829c:    82c1        ..      STRH     r1,[r0,#0x16]
;;;116        ADC_InitStruct->schIndex[7]         = 0;
        0x0020829e:    8301        ..      STRH     r1,[r0,#0x18]
;;;117        ADC_InitStruct->schIndex[8]         = 0;
        0x002082a0:    8341        A.      STRH     r1,[r0,#0x1a]
;;;118        ADC_InitStruct->schIndex[9]         = 0;
        0x002082a2:    8381        ..      STRH     r1,[r0,#0x1c]
;;;119        ADC_InitStruct->schIndex[10]        = 0;
        0x002082a4:    83c1        ..      STRH     r1,[r0,#0x1e]
;;;120        ADC_InitStruct->schIndex[11]        = 0;
        0x002082a6:    8401        ..      STRH     r1,[r0,#0x20]
;;;121        ADC_InitStruct->schIndex[12]        = 0;
        0x002082a8:    8441        A.      STRH     r1,[r0,#0x22]
;;;122        ADC_InitStruct->schIndex[13]        = 0;
        0x002082aa:    8481        ..      STRH     r1,[r0,#0x24]
;;;123        ADC_InitStruct->schIndex[14]        = 0;
        0x002082ac:    84c1        ..      STRH     r1,[r0,#0x26]
;;;124        ADC_InitStruct->schIndex[15]        = 0;
        0x002082ae:    8501        ..      STRH     r1,[r0,#0x28]
;;;125        ADC_InitStruct->bitmap              = 0x0;
        0x002082b0:    8541        A.      STRH     r1,[r0,#0x2a]
;;;126    
;;;127        ADC_InitStruct->adcFifoThd        = 0x06;
        0x002082b2:    2206        ."      MOVS     r2,#6
        0x002082b4:    7042        Bp      STRB     r2,[r0,#1]
;;;128        ADC_InitStruct->adcBurstSize      = 0x1;
        0x002082b6:    2201        ."      MOVS     r2,#1
        0x002082b8:    7082        .p      STRB     r2,[r0,#2]
;;;129    
;;;130        ADC_InitStruct->adcRefMode        = ADC_Internal_Reference;
;;;131    
;;;132        /*Reserved parameter, please do not change values*/
;;;133        ADC_InitStruct->pwrmode           = ADC_POWER_AUTO;
        0x002082ba:    6441        Ad      STR      r1,[r0,#0x44]
;;;134        ADC_InitStruct->datalatchDly      = 0x1;
        0x002082bc:    6381        .c      STR      r1,[r0,#0x38]
        0x002082be:    8782        ..      STRH     r2,[r0,#0x3c]
;;;135        ADC_InitStruct->adcRG2X0Dly       = ADC_RG2X_0_DELAY_80_US;
        0x002082c0:    2230        0"      MOVS     r2,#0x30
        0x002082c2:    87c2        ..      STRH     r2,[r0,#0x3e]
;;;136        ADC_InitStruct->adcRG0X1Dly       = ADC_RG0X_1_DELAY_320_US;
        0x002082c4:    220c        ."      MOVS     r2,#0xc
        0x002082c6:    f8a02040    ..@     STRH     r2,[r0,#0x40]
;;;137        ADC_InitStruct->adcRG0X0Dly       = ADC_RG0X_0_DELAY_240_US;
        0x002082ca:    2203        ."      MOVS     r2,#3
        0x002082cc:    f8a02042    ..B     STRH     r2,[r0,#0x42]
;;;138        ADC_InitStruct->adcPowerAlwaysOnCmd = ADC_POWER_ALWAYS_ON_DISABLE;
        0x002082d0:    6481        .d      STR      r1,[r0,#0x48]
;;;139    
;;;140        return;
;;;141    }
        0x002082d2:    4770        pG      BX       lr
    ADC_DeInit
;;;142    
;;;143    /**
;;;144      * @brief  Deinitializes the ADC peripheral registers to their default reset values(turn off ADC clock).
;;;145      * @param  ADCx: selected ADC peripheral.
;;;146      * @retval None
;;;147      */
;;;148    void ADC_DeInit(ADC_TypeDef *ADCx)
;;;149    {
;;;150        assert_param(IS_ADC_PERIPH(ADCx));
;;;151    
;;;152        RCC_PeriphClockCmd(APBPeriph_ADC, APBPeriph_ADC_CLOCK, DISABLE);
        0x002082d4:    2200        ."      MOVS     r2,#0
        0x002082d6:    f04f41c2    O..A    MOV      r1,#0x61000000
        0x002082da:    4847        GH      LDR      r0,[pc,#284] ; [0x2083f8] = 0xc000001
        0x002082dc:    f7ffbdb8    ....    B.W      RCC_PeriphClockCmd ; 0x207e50
    ADC_INTConfig
;;;153    
;;;154        return;
;;;155    }
;;;156    
;;;157    /**
;;;158      * @brief  Enables or disables the specified ADC interrupts.
;;;159      * @param  ADCx: selected ADC peripheral.
;;;160      * @param  ADC_IT: specifies the ADC interrupts sources to be enabled or disabled.
;;;161      *   This parameter can be any combination of the following values:
;;;162      *     @arg ADC_INT_FIFO_RD_REQ :FIFO read request
;;;163      *     @arg ADC_INT_FIFO_RD_ERR :FIFO read error
;;;164      *     @arg ADC_INT_FIFO_TH :ADC FIFO size>thd
;;;165      *     @arg ADC_INT_FIFO_FULL :ADC FIFO overflow
;;;166      *     @arg ADC_INT_ONE_SHOT_DONE :ADC one shot mode done
;;;167      * @param  NewState: new state of the specified ADC interrupts.
;;;168      *   This parameter can be: ENABLE or DISABLE.
;;;169      * @retval None
;;;170      */
;;;171    void ADC_INTConfig(ADC_TypeDef *ADCx, uint32_t ADC_IT, FunctionalState newState)
;;;172    {
;;;173        /* Check the parameters */
;;;174        assert_param(IS_ADC_PERIPH(ADCx));
;;;175        assert_param(IS_FUNCTIONAL_STATE(newState));
;;;176        assert_param(IS_ADC_IT(ADC_IT));
;;;177    
;;;178        if (newState != DISABLE)
        0x002082e0:    2a00        .*      CMP      r2,#0
        0x002082e2:    68c2        .h      LDR      r2,[r0,#0xc]
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_adc.c (172)
        0x002082e4:    d001        ..      BEQ      0x2082ea ; ADC_INTConfig + 10
;;;173        /* Check the parameters */
;;;174        assert_param(IS_ADC_PERIPH(ADCx));
;;;175        assert_param(IS_FUNCTIONAL_STATE(newState));
;;;176        assert_param(IS_ADC_IT(ADC_IT));
;;;177    
;;;178        if (newState != DISABLE)
;;;179        {
;;;180            /* Enable the selected ADC interrupts */
;;;181            ADCx->INTCR |= ADC_IT;
        0x002082e6:    430a        .C      ORRS     r2,r2,r1
        0x002082e8:    e000        ..      B        0x2082ec ; ADC_INTConfig + 12
        0x002082ea:    438a        .C      BICS     r2,r2,r1
        0x002082ec:    60c2        .`      STR      r2,[r0,#0xc]
;;;182        }
;;;183        else
;;;184        {
;;;185            /* Disable the selected ADC interrupts */
;;;186            ADCx->INTCR &= (uint32_t)~ADC_IT;
;;;187        }
;;;188    }
        0x002082ee:    4770        pG      BX       lr
    ADC_ReadByScheduleIndex
;;;189    
;;;190    /**
;;;191      * @brief  read ADC data according to specific channel.
;;;192      * @param  ADCx: selected ADC peripheral.
;;;193      * @param  ScheduleIndex: can be 0 to 15
;;;194      * @retval The 12-bit converted ADC data.
;;;195      */
;;;196    uint16_t ADC_ReadByScheduleIndex(ADC_TypeDef *ADCx, uint8_t ScheduleIndex)
;;;197    {
;;;198        /* Check the parameters */
;;;199        assert_param(IS_ADC_PERIPH(ADCx));
;;;200        assert_param(ScheduleIndex < 16);
;;;201    
;;;202        if (ScheduleIndex & BIT(0))
        0x002082f0:    07ca        ..      LSLS     r2,r1,#31
        0x002082f2:    ea4f0151    O.Q.    LSR      r1,r1,#1
        0x002082f6:    eb000081    ....    ADD      r0,r0,r1,LSL #2
        0x002082fa:    6b00        .k      LDR      r0,[r0,#0x30]
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_adc.c (197)
        0x002082fc:    d001        ..      BEQ      0x208302 ; ADC_ReadByScheduleIndex + 18
;;;198        /* Check the parameters */
;;;199        assert_param(IS_ADC_PERIPH(ADCx));
;;;200        assert_param(ScheduleIndex < 16);
;;;201    
;;;202        if (ScheduleIndex & BIT(0))
;;;203        {
;;;204            return ((*(uint32_t *)((uint32_t *)(&ADCx->SCHD0) + (ScheduleIndex >> 1))) >> 16);
        0x002082fe:    0c00        ..      LSRS     r0,r0,#16
        0x00208300:    4770        pG      BX       lr
;;;205        }
;;;206        else
;;;207        {
;;;208            return (*(uint32_t *)((uint32_t *)(&ADCx->SCHD0) + (ScheduleIndex >> 1)));
        0x00208302:    b280        ..      UXTH     r0,r0
;;;209        }
;;;210    }
        0x00208304:    4770        pG      BX       lr
    ADC_Cmd
;;;211    
;;;212    /**
;;;213      * @brief  Enables or disables the ADC peripheral.
;;;214      * @param  ADCx: selected ADC peripheral.
;;;215      * @param  adcMode: adc mode select.
;;;216            This parameter can be one of the following values:
;;;217      *     @arg ADC_One_Shot_Mode: one shot mode.
;;;218      *     @arg ADC_Auto_Sensor_Mode: compare mode.
;;;219      * @param  NewState: new state of the ADC peripheral.
;;;220      *   This parameter can be: ENABLE or DISABLE.
;;;221      * @retval None
;;;222      */
;;;223    void ADC_Cmd(ADC_TypeDef *ADCx, uint8_t adcMode, FunctionalState NewState)
;;;224    {
        0x00208306:    b570        p.      PUSH     {r4-r6,lr}
        0x00208308:    460e        .F      MOV      r6,r1
        0x0020830a:    4604        .F      MOV      r4,r0
        0x0020830c:    2a01        .*      CMP      r2,#1
        0x0020830e:    d003        ..      BEQ      0x208318 ; ADC_Cmd + 18
        0x00208310:    6860        `h      LDR      r0,[r4,#4]
        0x00208312:    f0200003     ...    BIC      r0,r0,#3
        0x00208316:    e023        #.      B        0x208360 ; ADC_Cmd + 90
;;;225        /* Check the parameters */
;;;226        assert_param(IS_ADC_PERIPH(ADCx));
;;;227        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;228        assert_param(IS_ADC_MODE(adcMode));
;;;229    
;;;230        if (NewState == ENABLE)
;;;231        {
;;;232            /* In case manual mode */
;;;233            if (ADCx->PWRDLY  & BIT20)
        0x00208318:    6d20         m      LDR      r0,[r4,#0x50]
        0x0020831a:    02c0        ..      LSLS     r0,r0,#11
        0x0020831c:    d51a        ..      BPL      0x208354 ; ADC_Cmd + 78
;;;234            {
;;;235                ADCx->PWRDLY  |= 0x3C00;
        0x0020831e:    6d20         m      LDR      r0,[r4,#0x50]
        0x00208320:    f4405070    @.pP    ORR      r0,r0,#0x3c00
        0x00208324:    6520         e      STR      r0,[r4,#0x50]
;;; ..\..\..\..\..\inc\peripheral\rtl876x_adc.h
;;;629        platform_delay_us(t);
        0x00208326:    4d35        5M      LDR      r5,[pc,#212] ; [0x2083fc] = 0x200154
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_adc.c
;;;236                ADC_delayUS(80);
        0x00208328:    2050        P       MOVS     r0,#0x50
;;; ..\..\..\..\..\inc\peripheral\rtl876x_adc.h
;;;629        platform_delay_us(t);
        0x0020832a:    6829        )h      LDR      r1,[r5,#0]
        0x0020832c:    4788        .G      BLX      r1
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_adc.c
;;;237                ADCx->PWRDLY  |= (BIT14 | BIT15);
        0x0020832e:    6d20         m      LDR      r0,[r4,#0x50]
        0x00208330:    f4404040    @.@@    ORR      r0,r0,#0xc000
        0x00208334:    6520         e      STR      r0,[r4,#0x50]
;;; ..\..\..\..\..\inc\peripheral\rtl876x_adc.h
;;;629        platform_delay_us(t);
        0x00208336:    6829        )h      LDR      r1,[r5,#0]
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_adc.c
;;;238                ADC_delayUS(320);
        0x00208338:    f44f70a0    O..p    MOV      r0,#0x140
;;; ..\..\..\..\..\inc\peripheral\rtl876x_adc.h
;;;629        platform_delay_us(t);
        0x0020833c:    4788        .G      BLX      r1
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_adc.c
;;;239                ADCx->PWRDLY  |= (BIT16 | BIT17);
        0x0020833e:    6d20         m      LDR      r0,[r4,#0x50]
        0x00208340:    f4403040    @.@0    ORR      r0,r0,#0x30000
        0x00208344:    6520         e      STR      r0,[r4,#0x50]
;;; ..\..\..\..\..\inc\peripheral\rtl876x_adc.h
;;;629        platform_delay_us(t);
        0x00208346:    6829        )h      LDR      r1,[r5,#0]
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_adc.c
;;;240                ADC_delayUS(240);
        0x00208348:    20f0        .       MOVS     r0,#0xf0
;;; ..\..\..\..\..\inc\peripheral\rtl876x_adc.h
;;;629        platform_delay_us(t);
        0x0020834a:    4788        .G      BLX      r1
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_adc.c
;;;241                ADCx->PWRDLY  |= BIT18;
        0x0020834c:    6d20         m      LDR      r0,[r4,#0x50]
        0x0020834e:    f4402080    @..     ORR      r0,r0,#0x40000
        0x00208352:    6520         e      STR      r0,[r4,#0x50]
;;;242            }
;;;243    
;;;244            /* Reset ADC mode first */
;;;245            ADCx->CR &= ~0x03;
        0x00208354:    6860        `h      LDR      r0,[r4,#4]
        0x00208356:    f0200003     ...    BIC      r0,r0,#3
        0x0020835a:    6060        ``      STR      r0,[r4,#4]
;;;246            /* Enable ADC */
;;;247            ADCx->CR |= adcMode;
        0x0020835c:    6860        `h      LDR      r0,[r4,#4]
        0x0020835e:    4330        0C      ORRS     r0,r0,r6
        0x00208360:    6060        ``      STR      r0,[r4,#4]
;;;248    
;;;249        }
;;;250        else
;;;251        {
;;;252            ADCx->CR &= ~0x03;
;;;253        }
;;;254    
;;;255        return;
;;;256    }
        0x00208362:    bd70        p.      POP      {r4-r6,pc}
    ADC_SchTableConfig
;;;257    
;;;258    /**
;;;259      * @brief  Config ADC schedule table.
;;;260      * @param  ADCx: selected ADC peripheral.
;;;261      * @param  Index: Schedule table index.
;;;262      * @param  adcMode: ADC mode.
;;;263      *      this parameter can be one of the following values:
;;;264      *     @arg EXT_SINGLE_ENDED(index)
;;;265      *     @arg EXT_DIFFERENTIAL(index)
;;;266      *     @arg VREF_AT_CHANNEL7(index)
;;;267      *     @arg INTERNAL_VBAT_MODE
;;;268      *     @arg INTERNAL_VDDCORE_MODE
;;;269      *     @arg INTERNAL_VDD_DIGI_MODE
;;;270      *     @arg INTERNAL_VDD_IO_MODE
;;;271      * @return none.
;;;272      */
;;;273    void ADC_SchTableConfig(ADC_TypeDef *ADCx, uint16_t Index,
;;;274                            uint8_t adcMode)
;;;275    {
;;;276        /* Check the parameters */
;;;277        assert_param(IS_ADC_PERIPH(ADCx));
;;;278        assert_param(IS_ADC_SCHEDULE_INDEX_CONFIG(adcMode));
;;;279    
;;;280        if (Index & BIT0)
        0x00208364:    07cb        ..      LSLS     r3,r1,#31
        0x00208366:    ea4f0151    O.Q.    LSR      r1,r1,#1
        0x0020836a:    eb000181    ....    ADD      r1,r0,r1,LSL #2
;;; .\..\..\..\..\..\src\mcu\peripheral\rtl876x_adc.c (275)
        0x0020836e:    6908        .i      LDR      r0,[r1,#0x10]
        0x00208370:    d002        ..      BEQ      0x208378 ; ADC_SchTableConfig + 20
;;;276        /* Check the parameters */
;;;277        assert_param(IS_ADC_PERIPH(ADCx));
;;;278        assert_param(IS_ADC_SCHEDULE_INDEX_CONFIG(adcMode));
;;;279    
;;;280        if (Index & BIT0)
;;;281        {
;;;282            *(uint32_t *)((uint32_t *)(&ADCx->SCHTAB0) + (Index >> 1)) |= (adcMode << 16);
        0x00208372:    ea404002    @..@    ORR      r0,r0,r2,LSL #16
        0x00208376:    e000        ..      B        0x20837a ; ADC_SchTableConfig + 22
        0x00208378:    4310        .C      ORRS     r0,r0,r2
        0x0020837a:    6108        .a      STR      r0,[r1,#0x10]
;;;283        }
;;;284        else
;;;285        {
;;;286            *(uint32_t *)((uint32_t *)(&ADCx->SCHTAB0) + (Index >> 1)) |= adcMode;
;;;287        }
;;;288    
;;;289        return;
;;;290    }
        0x0020837c:    4770        pG      BX       lr
    ADC_GetFifoData
        0x0020837e:    e002        ..      B        0x208386 ; ADC_GetFifoData + 8
        0x00208380:    6803        .h      LDR      r3,[r0,#0]
        0x00208382:    f8213b02    !..;    STRH     r3,[r1],#2
;;;291    
;;;292    /**
;;;293      * @brief  Data from ADC FIFO.
;;;294      * @param  ADCx: selected ADC peripheral.
;;;295      * @param[out]  outBuf: buffer to save data read from ADC FIFO.
;;;296      * @param  count: number of data to be read.
;;;297      * @retval None
;;;298      */
;;;299    void ADC_GetFifoData(ADC_TypeDef *ADCx, uint16_t *outBuf, uint16_t count)
;;;300    {
;;;301        /* Check the parameters */
;;;302        assert_param(IS_ADC_PERIPH(ADCx));
;;;303    
;;;304        while (count--)
        0x00208386:    1e52        R.      SUBS     r2,r2,#1
        0x00208388:    b292        ..      UXTH     r2,r2
        0x0020838a:    d2f9        ..      BCS      0x208380 ; ADC_GetFifoData + 2
;;;305        {
;;;306            *outBuf++ = (uint16_t)ADCx->FIFO;
;;;307        }
;;;308    
;;;309        return;
;;;310    }
        0x0020838c:    4770        pG      BX       lr
    ADC_BypassCmd
        0x0020838e:    4b1c        .K      LDR      r3,[pc,#112] ; [0x208400] = 0x40010000
        0x00208390:    2201        ."      MOVS     r2,#1
        0x00208392:    3010        .0      ADDS     r0,r0,#0x10
        0x00208394:    4082        .@      LSLS     r2,r2,r0
        0x00208396:    6d98        .m      LDR      r0,[r3,#0x58]
;;;311    
;;;312    /**
;;;313      * @brief  Config ADC bypass resistor.Attention!!!Channels using bypass mode cannot over 0.9V!!!!
;;;314      * @param  channelNum: external channel number, can be 0~7.
;;;315      * @param  NewState: ENABLE or DISABLE.
;;;316      * @retval None
;;;317      */
;;;318    void ADC_BypassCmd(uint8_t channelNum, FunctionalState NewState)
;;;319    {
        0x00208398:    b109        ..      CBZ      r1,0x20839e ; ADC_BypassCmd + 16
;;;320        if (NewState != DISABLE)
;;;321        {
;;;322            ADC->ANACTL |= BIT(channelNum + 16);
        0x0020839a:    4310        .C      ORRS     r0,r0,r2
        0x0020839c:    e000        ..      B        0x2083a0 ; ADC_BypassCmd + 18
        0x0020839e:    4390        .C      BICS     r0,r0,r2
        0x002083a0:    6598        .e      STR      r0,[r3,#0x58]
;;;323        }
;;;324        else
;;;325        {
;;;326            ADC->ANACTL &= ~BIT(channelNum + 16);
;;;327        }
;;;328    }
        0x002083a2:    4770        pG      BX       lr
    ADC_GetRes
;;;329    
;;;330    /**
;;;331      * @brief  Get ADC Result
;;;332      * @param  RawData: ADC raw data.
;;;333      * @param  vSampleMode:
;;;334      *      this parameter can be one of the following values:
;;;335      *     @arg DIVIDE_SINGLE_MODE
;;;336      *     @arg BYPASS_SINGLE_MODE
;;;337      *     @arg DIVIDE_DIFFERENTIAL_MODE
;;;338      *     @arg BYPASS_DIFFERENTIAL_MODE
;;;339      * @retval ADC result
;;;340      */
;;;341    int16_t ADC_GetRes(uint16_t vRawData, uint8_t vSampleMode)
;;;342    {
        0x002083a4:    b508        ..      PUSH     {r3,lr}
        0x002083a6:    460b        .F      MOV      r3,r1
;;;343        ADC_ErrorStatus error_status = NO_ERROR;
        0x002083a8:    2200        ."      MOVS     r2,#0
        0x002083aa:    f88d2000    ...     STRB     r2,[sp,#0]
;;;344    
;;;345        int16_t adc_voltage = (int16_t)(ADC_GetVoltage((ADC_SampleMode)vSampleMode, (int32_t)vRawData,
        0x002083ae:    4601        .F      MOV      r1,r0
        0x002083b0:    466a        jF      MOV      r2,sp
        0x002083b2:    4618        .F      MOV      r0,r3
        0x002083b4:    f000f9e6    ....    BL       ADC_GetVoltage ; 0x208784
        0x002083b8:    eebd0ac0    ....    VCVT.S32.F32 s0,s0
        0x002083bc:    ee100a10    ....    VMOV     r0,s0
        0x002083c0:    b201        ..      SXTH     r1,r0
;;;346                                                       &error_status));
;;;347        if (NO_ERROR == error_status) {return adc_voltage;}
        0x002083c2:    f99d0000    ....    LDRSB    r0,[sp,#0]
        0x002083c6:    2800        .(      CMP      r0,#0
        0x002083c8:    d100        ..      BNE      0x2083cc ; ADC_GetRes + 40
        0x002083ca:    4608        .F      MOV      r0,r1
;;;348        else {return error_status;}
;;;349    }
        0x002083cc:    bd08        ..      POP      {r3,pc}
    ADC_AnalogCircuitConfig
;;;350    
;;;351    /**
;;;352      * @brief  Initialize the ADC analog registers in AON area.
;;;353      * @param  None.
;;;354      * @retval None
;;;355      */
;;;356    void ADC_AnalogCircuitConfig(FunctionalState NewState)
;;;357    {
        0x002083ce:    b510        ..      PUSH     {r4,lr}
        0x002083d0:    f44f7488    O..t    MOV      r4,#0x110
        0x002083d4:    2800        .(      CMP      r0,#0
        0x002083d6:    4620         F      MOV      r0,r4
        0x002083d8:    d004        ..      BEQ      0x2083e4 ; ADC_AnalogCircuitConfig + 22
;;;358        uint8_t reg_value = 0;
;;;359    
;;;360        /* Enable ADC 1V8 LDO */
;;;361        if (NewState != DISABLE)
;;;362        {
;;;363            reg_value = btaon_fast_read_safe(0x110);
        0x002083da:    f636fd13    6...    BL       btaon_fast_read_safe ; 0x3ee04
;;;364            btaon_fast_write(0x110, reg_value | 0x04);
        0x002083de:    f0400104    @...    ORR      r1,r0,#4
        0x002083e2:    e003        ..      B        0x2083ec ; ADC_AnalogCircuitConfig + 30
;;;365        }
;;;366        else
;;;367        {
;;;368            reg_value = btaon_fast_read_safe(0x110);
        0x002083e4:    f636fd0e    6...    BL       btaon_fast_read_safe ; 0x3ee04
;;;369            btaon_fast_write(0x110, reg_value & (~0x04));
        0x002083e8:    f0200104     ...    BIC      r1,r0,#4
        0x002083ec:    4620         F      MOV      r0,r4
        0x002083ee:    e8bd4010    ...@    POP      {r4,lr}
        0x002083f2:    f636bd17    6...    B        btaon_fast_write ; 0x3ee24
    $d
        0x002083f6:    0000        ..      DCW    0
        0x002083f8:    0c000001    ....    DCD    201326593
        0x002083fc:    00200154    T. .    DCD    2097492
        0x00208400:    40010000    ...@    DCD    1073807360
    $t
    .text
    load_overlay
;;; .\..\..\..\..\..\src\mcu\rtl876x\overlay_mgr.c
;;;116    {
        0x00208404:    b510        ..      PUSH     {r4,lr}
        0x00208406:    2803        .(      CMP      r0,#3
;;; .\..\..\..\..\..\src\mcu\rtl876x\overlay_mgr.c (116)
        0x00208408:    d301        ..      BCC      0x20840e ; load_overlay + 10
;;;117        const T_OVERLAY_SECTION *selected_scenario;
;;;118    
;;;119        if (scenario_idx >= OVERLAY_SCENARIO_NUM)
;;;120        {
;;;121            return false;
        0x0020840a:    2000        .       MOVS     r0,#0
        0x0020840c:    bd10        ..      POP      {r4,pc}
;;;122        }
;;;123    
;;;124        selected_scenario = &overlay_sections[scenario_idx];
        0x0020840e:    491a        .I      LDR      r1,[pc,#104] ; [0x208478] = 0x209798
        0x00208410:    eb0000c0    ....    ADD      r0,r0,r0,LSL #3
        0x00208414:    eb010480    ....    ADD      r4,r1,r0,LSL #2
;;;125    
;;;126        if (memcmp(selected_scenario->signature, scenario_name, 8) == 0)
        0x00208418:    2208        ."      MOVS     r2,#8
        0x0020841a:    4918        .I      LDR      r1,[pc,#96] ; [0x20847c] = 0x209848
        0x0020841c:    6820         h      LDR      r0,[r4,#0]
        0x0020841e:    f651fcf1    Q...    BL       memcmp ; 0x59e04
        0x00208422:    b198        ..      CBZ      r0,0x20844c ; load_overlay + 72
;;;127        {
;;;128            return true;
;;;129        }
;;;130    
;;;131        /* load code */
;;;132        memcpy(selected_scenario->image_ro_base, selected_scenario->load_ro_base,
        0x00208424:    69a2        .i      LDR      r2,[r4,#0x18]
        0x00208426:    6861        ah      LDR      r1,[r4,#4]
        0x00208428:    68e0        .h      LDR      r0,[r4,#0xc]
        0x0020842a:    f651fd36    Q.6.    BL       __aeabi_memcpy ; 0x59e9a
;;;133               selected_scenario->ro_length);
;;;134        /* load rw data */
;;;135        memcpy(selected_scenario->image_rw_base, selected_scenario->load_rw_base,
        0x0020842e:    69e2        .i      LDR      r2,[r4,#0x1c]
        0x00208430:    68a1        .h      LDR      r1,[r4,#8]
        0x00208432:    6920         i      LDR      r0,[r4,#0x10]
        0x00208434:    f651fd31    Q.1.    BL       __aeabi_memcpy ; 0x59e9a
;;;136               selected_scenario->rw_length);
;;;137        /* clear zi data */
;;;138        memset(selected_scenario->image_zi_base, 0x0, selected_scenario->zi_length);
        0x00208438:    6a21        !j      LDR      r1,[r4,#0x20]
        0x0020843a:    6960        `i      LDR      r0,[r4,#0x14]
        0x0020843c:    f651fdee    Q...    BL       __aeabi_memclr ; 0x5a01c
;;;139    
;;;140        memcpy(scenario_name, selected_scenario->signature, 8);
        0x00208440:    6820         h      LDR      r0,[r4,#0]
        0x00208442:    490e        .I      LDR      r1,[pc,#56] ; [0x20847c] = 0x209848
        0x00208444:    6802        .h      LDR      r2,[r0,#0]
        0x00208446:    600a        .`      STR      r2,[r1,#0]
        0x00208448:    6840        @h      LDR      r0,[r0,#4]
        0x0020844a:    6048        H`      STR      r0,[r1,#4]
        0x0020844c:    2001        .       MOVS     r0,#1
;;;141    
;;;142        return true;
;;;143    }
        0x0020844e:    bd10        ..      POP      {r4,pc}
    get_current_scenario_index
;;;144    
;;;145    T_OVERLAY_SCENARIO_IDX get_current_scenario_index(void)
;;;146    {
        0x00208450:    b570        p.      PUSH     {r4-r6,lr}
        0x00208452:    4d09        .M      LDR      r5,[pc,#36] ; [0x208478] = 0x209798
;;;147        const T_OVERLAY_SECTION *selected_scenario;
;;;148    
;;;149        for (int i = 0; i < (int)OVERLAY_SCENARIO_NUM; ++i)
        0x00208454:    2400        .$      MOVS     r4,#0
        0x00208456:    eb0400c4    ....    ADD      r0,r4,r4,LSL #3
        0x0020845a:    2208        ."      MOVS     r2,#8
        0x0020845c:    f8550020    U. .    LDR      r0,[r5,r0,LSL #2]
        0x00208460:    4906        .I      LDR      r1,[pc,#24] ; [0x20847c] = 0x209848
        0x00208462:    f651fccf    Q...    BL       memcmp ; 0x59e04
        0x00208466:    b120         .      CBZ      r0,0x208472 ; get_current_scenario_index + 34
        0x00208468:    1c64        d.      ADDS     r4,r4,#1
        0x0020846a:    2c03        .,      CMP      r4,#3
        0x0020846c:    dbf3        ..      BLT      0x208456 ; get_current_scenario_index + 6
        0x0020846e:    2003        .       MOVS     r0,#3
        0x00208470:    bd70        p.      POP      {r4-r6,pc}
;;;150        {
;;;151            selected_scenario = &overlay_sections[i];
;;;152            if (memcmp(selected_scenario->signature, scenario_name, 8) == 0)
;;;153            {
;;;154                return (T_OVERLAY_SCENARIO_IDX)i;
        0x00208472:    b2e0        ..      UXTB     r0,r4
;;;155            }
;;;156        }
;;;157    
;;;158        return OVERLAY_SCENARIO_NUM; //not found valid scenario
;;;159    }
        0x00208474:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x00208476:    0000        ..      DCW    0
        0x00208478:    00209798    .. .    DCD    2135960
        0x0020847c:    00209848    H. .    DCD    2136136
    $t
    .text
    Board_ADC_init
;;; ..\..\..\..\..\src\sample\peripheral\ADC\ADC_Continuous\main.c
;;;32     {
        0x00208480:    b51c        ..      PUSH     {r2-r4,lr}
;;;33         Pad_Config(ADC0 + ADC_Channel_index, PAD_SW_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_DISABLE,
        0x00208482:    2000        .       MOVS     r0,#0
        0x00208484:    9000        ..      STR      r0,[sp,#0]
        0x00208486:    4603        .F      MOV      r3,r0
        0x00208488:    4601        .F      MOV      r1,r0
        0x0020848a:    9001        ..      STR      r0,[sp,#4]
        0x0020848c:    2201        ."      MOVS     r2,#1
        0x0020848e:    2015        .       MOVS     r0,#0x15
        0x00208490:    f608ffa4    ....    BL       Pad_Config ; 0x113dc
;;;34                    PAD_OUT_LOW);
;;;35         Pinmux_Config(ADC0 + ADC_Channel_index, IDLE_MODE);
        0x00208494:    e8bd401c    ...@    POP      {r2-r4,lr}
        0x00208498:    2100        .!      MOVS     r1,#0
        0x0020849a:    2015        .       MOVS     r0,#0x15
        0x0020849c:    f608bf6a    ..j.    B        Pinmux_Config ; 0x11374
    Driver_ADC_init
;;;36     }
;;;37     
;;;38     /**
;;;39       * @brief  Initialize ADC peripheral.
;;;40       * @param   No parameter.
;;;41       * @return  void
;;;42       */
;;;43     void Driver_ADC_init(void)
;;;44     {
        0x002084a0:    b530        0.      PUSH     {r4,r5,lr}
        0x002084a2:    4d2d        -M      LDR      r5,[pc,#180] ; [0x208558] = 0x40010000
;;; ..\..\..\..\..\src\sample\peripheral\ADC\ADC_Continuous\main.c (44)
        0x002084a4:    b097        ..      SUB      sp,sp,#0x5c
;;;45         ADC_DeInit(ADC);
        0x002084a6:    4628        (F      MOV      r0,r5
        0x002084a8:    f7ffff14    ....    BL       ADC_DeInit ; 0x2082d4
;;;46         RCC_PeriphClockCmd(APBPeriph_ADC, APBPeriph_ADC_CLOCK, ENABLE);
        0x002084ac:    2201        ."      MOVS     r2,#1
        0x002084ae:    f04f41c2    O..A    MOV      r1,#0x61000000
        0x002084b2:    482a        *H      LDR      r0,[pc,#168] ; [0x20855c] = 0xc000001
        0x002084b4:    f7fffccc    ....    BL       RCC_PeriphClockCmd ; 0x207e50
;;;47     
;;;48         ADC_InitTypeDef adcInitStruct;
;;;49         ADC_StructInit(&adcInitStruct);
        0x002084b8:    4668        hF      MOV      r0,sp
        0x002084ba:    f7fffed9    ....    BL       ADC_StructInit ; 0x208270
        0x002084be:    2401        .$      MOVS     r4,#1
;;;50         adcInitStruct.schIndex[ADC_Schedule_index]         = EXT_SINGLE_ENDED(ADC_Channel_index);
        0x002084c0:    2005        .       MOVS     r0,#5
        0x002084c2:    f8ad402a    ..*@    STRH     r4,[sp,#0x2a]
        0x002084c6:    210a        .!      MOVS     r1,#0xa
        0x002084c8:    f8ad000a    ....    STRH     r0,[sp,#0xa]
;;;51         adcInitStruct.bitmap              = 0x01;
;;;52         adcInitStruct.adcFifoThd          = 10;
        0x002084cc:    f88d1001    ....    STRB     r1,[sp,#1]
;;;53         adcInitStruct.adcSamplePeriod     = 255;
        0x002084d0:    20ff        .       MOVS     r0,#0xff
        0x002084d2:    f88d0000    ....    STRB     r0,[sp,#0]
;;;54         ADC_Init(ADC, &adcInitStruct);
        0x002084d6:    4669        iF      MOV      r1,sp
        0x002084d8:    4628        (F      MOV      r0,r5
        0x002084da:    f7fffe65    ..e.    BL       ADC_Init ; 0x2081a8
;;;55         ADC_INTConfig(ADC, ADC_INT_FIFO_TH, ENABLE);
        0x002084de:    2201        ."      MOVS     r2,#1
        0x002084e0:    2104        .!      MOVS     r1,#4
        0x002084e2:    4628        (F      MOV      r0,r5
        0x002084e4:    f7fffefc    ....    BL       ADC_INTConfig ; 0x2082e0
;;;56     
;;;57         NVIC_InitTypeDef NVIC_InitStruct;
;;;58         NVIC_InitStruct.NVIC_IRQChannel = ADC_IRQn;
        0x002084e8:    2012        .       MOVS     r0,#0x12
        0x002084ea:    f88d004c    ..L.    STRB     r0,[sp,#0x4c]
;;;59         NVIC_InitStruct.NVIC_IRQChannelPriority = 3;
        0x002084ee:    2003        .       MOVS     r0,#3
;;;60         NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
        0x002084f0:    9014        ..      STR      r0,[sp,#0x50]
        0x002084f2:    f88d4054    ..T@    STRB     r4,[sp,#0x54]
;;;61         NVIC_Init(&NVIC_InitStruct);
        0x002084f6:    a813        ..      ADD      r0,sp,#0x4c
        0x002084f8:    f608fee2    ....    BL       NVIC_Init ; 0x112c0
;;;62     
;;;63         ADC_Cmd(ADC, ADC_Continuous_Mode, ENABLE);
        0x002084fc:    2201        ."      MOVS     r2,#1
        0x002084fe:    4611        .F      MOV      r1,r2
        0x00208500:    4628        (F      MOV      r0,r5
        0x00208502:    f7ffff00    ....    BL       ADC_Cmd ; 0x208306
;;;64     }
        0x00208506:    b017        ..      ADD      sp,sp,#0x5c
        0x00208508:    bd30        0.      POP      {r4,r5,pc}
    ADC_Handler
;;;65     /**
;;;66     * @brief  ADC interrupt handler function.
;;;67     * @param   No parameter.
;;;68     * @return  void
;;;69     */
;;;70     void ADC_Handler(void)
;;;71     {
        0x0020850a:    b570        p.      PUSH     {r4-r6,lr}
;;; ..\..\..\..\..\inc\peripheral\rtl876x_adc.h
;;;532        if ((ADCx->INTCR & (ADC_INT_FLAG << 16)) != 0)
        0x0020850c:    4e12        .N      LDR      r6,[pc,#72] ; [0x208558] = 0x40010000
        0x0020850e:    68f0        .h      LDR      r0,[r6,#0xc]
        0x00208510:    f4102f80    .../    TST      r0,#0x40000
        0x00208514:    d011        ..      BEQ      0x20853a ; ADC_Handler + 48
;;;533        {
;;;534            bitstatus = SET;
;;;535        }
;;;536    
;;;537        return bitstatus;
;;;538    }
;;;539    
;;;540    /**
;;;541      * @brief  Set adc schedule table.
;;;542      * @param  ADCx: selected ADC peripheral.
;;;543      * @param  channelMap: ADC channel map.
;;;544      * @param  NewState: new state of the ADC peripheral.
;;;545      *   This parameter can be: ENABLE or DISABLE.
;;;546      * @return none.
;;;547      */
;;;548    __STATIC_INLINE void ADC_SchTableSet(ADC_TypeDef *ADCx, uint16_t channelMap,
;;;549                                         FunctionalState NewState)
;;;550    {
;;;551        /* Check the parameters */
;;;552        assert_param(IS_ADC_PERIPH(ADCx));
;;;553        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;554    
;;;555        if (NewState == ENABLE)
;;;556        {
;;;557            ADCx->SCHCR |= channelMap;
;;;558        }
;;;559        else
;;;560        {
;;;561            ADCx->SCHCR &= (~channelMap);
;;;562        }
;;;563    
;;;564        return;
;;;565    }
;;;566    
;;;567    /**
;;;568      * @brief  Get one data from ADC fifo.
;;;569      * @param  ADCx: selected ADC peripheral.
;;;570      * @return adc fifo data.
;;;571      */
;;;572    __STATIC_INLINE uint16_t ADC_ReadFifoData(ADC_TypeDef *ADCx)
;;;573    {
;;;574        /* Check the parameters */
;;;575        assert_param(IS_ADC_PERIPH(ADCx));
;;;576    
;;;577        return (uint16_t)((ADCx->FIFO) & 0xfff);
;;;578    }
;;;579    
;;;580    /**
;;;581      * @brief  Get ADC fifo number.
;;;582      * @param  ADCx: selected ADC peripheral.
;;;583      * @return current data number in adc fifo.
;;;584      */
;;;585    __STATIC_INLINE uint8_t ADC_GetFifoLen(ADC_TypeDef *ADCx)
;;;586    {
;;;587        /* Check the parameters */
;;;588        assert_param(IS_ADC_PERIPH(ADCx));
;;;589    
;;;590        return ((uint8_t)(((ADCx->SCHCR) >> 16) & 0x3F));
        0x00208516:    68b0        .h      LDR      r0,[r6,#8]
;;; ..\..\..\..\..\src\sample\peripheral\ADC\ADC_Continuous\main.c
;;;76             for (int i = 0; i < length; i++)
        0x00208518:    2400        .$      MOVS     r4,#0
;;; ..\..\..\..\..\inc\peripheral\rtl876x_adc.h
;;;590        return ((uint8_t)(((ADCx->SCHCR) >> 16) & 0x3F));
        0x0020851a:    f3c04505    ...E    UBFX     r5,r0,#16,#6
        0x0020851e:    e006        ..      B        0x20852e ; ADC_Handler + 36
;;; ..\..\..\..\..\inc\peripheral\rtl876x_adc.h (577)
        0x00208520:    6830        0h      LDR      r0,[r6,#0]
        0x00208522:    2105        .!      MOVS     r1,#5
;;; ..\..\..\..\..\inc\peripheral\rtl876x_adc.h (577)
        0x00208524:    f3c0000b    ....    UBFX     r0,r0,#0,#12
        0x00208528:    f7ffff3c    ..<.    BL       ADC_GetRes ; 0x2083a4
        0x0020852c:    1c64        d.      ADDS     r4,r4,#1
        0x0020852e:    42ac        .B      CMP      r4,r5
        0x00208530:    dbf6        ..      BLT      0x208520 ; ADC_Handler + 22
;;; ..\..\..\..\..\inc\peripheral\rtl876x_adc.h (507)
        0x00208532:    68f0        .h      LDR      r0,[r6,#0xc]
        0x00208534:    f4406080    @..`    ORR      r0,r0,#0x400
        0x00208538:    60f0        .`      STR      r0,[r6,#0xc]
;;; ..\..\..\..\..\src\sample\peripheral\ADC\ADC_Continuous\main.c
;;;84     }
        0x0020853a:    bd70        p.      POP      {r4-r6,pc}
    main
;;;85     int main()
;;;86     {
;;;87         WDG_Disable();
        0x0020853c:    f609fa01    ....    BL       WDG_Disable ; 0x11942
;;;88         __enable_irq();
        0x00208540:    b662        b.      CPSIE    i
;;;89         Board_ADC_init();
        0x00208542:    f7ffff9d    ....    BL       Board_ADC_init ; 0x208480
;;;90         Driver_ADC_init();
        0x00208546:    f7ffffab    ....    BL       Driver_ADC_init ; 0x2084a0
;;;91         while (1)
;;;92         {
;;;93             __nop();
        0x0020854a:    bf00        ..      NOP      
;;;94             __nop();
        0x0020854c:    bf00        ..      NOP      
;;;95             __nop();
        0x0020854e:    bf00        ..      NOP      
;;;96             __nop();
        0x00208550:    bf00        ..      NOP      
;;;97             __nop();
        0x00208552:    bf00        ..      NOP      
        0x00208554:    e7f9        ..      B        0x20854a ; main + 14
    $d
        0x00208556:    0000        ..      DCW    0
        0x00208558:    40010000    ...@    DCD    1073807360
        0x0020855c:    0c000001    ....    DCD    201326593
    $t
    .text
    ADC_CalibrationInit
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (66)
        0x00208560:    e92d4ff0    -..O    PUSH     {r4-r11,lr}
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (67)
        0x00208564:    2000        .       MOVS     r0,#0
        0x00208566:    4bfd        .K      LDR      r3,[pc,#1012] ; [0x20895c] = 0x209806
        0x00208568:    4dfd        .M      LDR      r5,[pc,#1012] ; [0x208960] = 0x202000
        0x0020856a:    49fe        .I      LDR      r1,[pc,#1016] ; [0x208964] = 0x209852
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (70)
        0x0020856c:    4602        .F      MOV      r2,r0
        0x0020856e:    f8334012    3..@    LDRH     r4,[r3,r2,LSL #1]
        0x00208572:    442c        ,D      ADD      r4,r4,r5
        0x00208574:    f8d447b4    ...G    LDR      r4,[r4,#0x7b4]
        0x00208578:    188e        ..      ADDS     r6,r1,r2
        0x0020857a:    1c52        R.      ADDS     r2,r2,#1
        0x0020857c:    b2d2        ..      UXTB     r2,r2
        0x0020857e:    7074        tp      STRB     r4,[r6,#1]
        0x00208580:    2a1f        .*      CMP      r2,#0x1f
        0x00208582:    d3f4        ..      BCC      0x20856e ; ADC_CalibrationInit + 14
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (75)
        0x00208584:    2255        U"      MOVS     r2,#0x55
        0x00208586:    700a        .p      STRB     r2,[r1,#0]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (76)
        0x00208588:    22aa        ."      MOVS     r2,#0xaa
        0x0020858a:    f8812020    ..      STRB     r2,[r1,#0x20]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (79)
        0x0020858e:    7f4a        J.      LDRB     r2,[r1,#0x1d]
        0x00208590:    f06f0301    o...    MVN      r3,#1
        0x00208594:    105d        ].      ASRS     r5,r3,#1
        0x00208596:    4692        .F      MOV      r10,r2
        0x00208598:    2aff        .*      CMP      r2,#0xff
        0x0020859a:    d10a        ..      BNE      0x2085b2 ; ADC_CalibrationInit + 82
        0x0020859c:    7f8a        ..      LDRB     r2,[r1,#0x1e]
        0x0020859e:    2aff        .*      CMP      r2,#0xff
        0x002085a0:    d002        ..      BEQ      0x2085a8 ; ADC_CalibrationInit + 72
        0x002085a2:    b182        ..      CBZ      r2,0x2085c6 ; ADC_CalibrationInit + 102
        0x002085a4:    d003        ..      BEQ      0x2085ae ; ADC_CalibrationInit + 78
        0x002085a6:    e004        ..      B        0x2085b2 ; ADC_CalibrationInit + 82
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (80)
        0x002085a8:    7fca        ..      LDRB     r2,[r1,#0x1f]
        0x002085aa:    2aff        .*      CMP      r2,#0xff
        0x002085ac:    d008        ..      BEQ      0x2085c0 ; ADC_CalibrationInit + 96
        0x002085ae:    7fca        ..      LDRB     r2,[r1,#0x1f]
        0x002085b0:    b172        r.      CBZ      r2,0x2085d0 ; ADC_CalibrationInit + 112
        0x002085b2:    7fca        ..      LDRB     r2,[r1,#0x1f]
        0x002085b4:    2aff        .*      CMP      r2,#0xff
        0x002085b6:    d033        3.      BEQ      0x208620 ; ADC_CalibrationInit + 192
        0x002085b8:    784a        Jx      LDRB     r2,[r1,#1]
        0x002085ba:    2aff        .*      CMP      r2,#0xff
        0x002085bc:    d11f        ..      BNE      0x2085fe ; ADC_CalibrationInit + 158
        0x002085be:    e015        ..      B        0x2085ec ; ADC_CalibrationInit + 140
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (82)
        0x002085c0:    f06f0202    o...    MVN      r2,#2
        0x002085c4:    e01e        ..      B        0x208604 ; ADC_CalibrationInit + 164
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (84)
        0x002085c6:    7fca        ..      LDRB     r2,[r1,#0x1f]
        0x002085c8:    2aff        .*      CMP      r2,#0xff
        0x002085ca:    d1f5        ..      BNE      0x2085b8 ; ADC_CalibrationInit + 88
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (86)
        0x002085cc:    461a        .F      MOV      r2,r3
        0x002085ce:    e019        ..      B        0x208604 ; ADC_CalibrationInit + 164
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (89)
        0x002085d0:    7dca        .}      LDRB     r2,[r1,#0x17]
        0x002085d2:    2aff        .*      CMP      r2,#0xff
        0x002085d4:    d1f0        ..      BNE      0x2085b8 ; ADC_CalibrationInit + 88
        0x002085d6:    7e0a        .~      LDRB     r2,[r1,#0x18]
        0x002085d8:    2aff        .*      CMP      r2,#0xff
        0x002085da:    d1ed        ..      BNE      0x2085b8 ; ADC_CalibrationInit + 88
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (90)
        0x002085dc:    7e4a        J~      LDRB     r2,[r1,#0x19]
        0x002085de:    2aff        .*      CMP      r2,#0xff
        0x002085e0:    d1ea        ..      BNE      0x2085b8 ; ADC_CalibrationInit + 88
        0x002085e2:    7e8a        .~      LDRB     r2,[r1,#0x1a]
        0x002085e4:    2aff        .*      CMP      r2,#0xff
        0x002085e6:    d1e7        ..      BNE      0x2085b8 ; ADC_CalibrationInit + 88
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (92)
        0x002085e8:    462a        *F      MOV      r2,r5
        0x002085ea:    e00b        ..      B        0x208604 ; ADC_CalibrationInit + 164
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (95)
        0x002085ec:    7a0a        .z      LDRB     r2,[r1,#8]
        0x002085ee:    2aff        .*      CMP      r2,#0xff
        0x002085f0:    d105        ..      BNE      0x2085fe ; ADC_CalibrationInit + 158
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (96)
        0x002085f2:    7bca        .{      LDRB     r2,[r1,#0xf]
        0x002085f4:    2aff        .*      CMP      r2,#0xff
        0x002085f6:    d102        ..      BNE      0x2085fe ; ADC_CalibrationInit + 158
        0x002085f8:    7d8a        .}      LDRB     r2,[r1,#0x16]
        0x002085fa:    2aff        .*      CMP      r2,#0xff
        0x002085fc:    d010        ..      BEQ      0x208620 ; ADC_CalibrationInit + 192
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (98)
        0x002085fe:    7fca        ..      LDRB     r2,[r1,#0x1f]
        0x00208600:    2aaa        .*      CMP      r2,#0xaa
        0x00208602:    d00d        ..      BEQ      0x208620 ; ADC_CalibrationInit + 192
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (107)
        0x00208604:    48d5        .H      LDR      r0,[pc,#852] ; [0x20895c] = 0x209806
        0x00208606:    4cd7        .L      LDR      r4,[pc,#860] ; [0x208964] = 0x209852
        0x00208608:    1e80        ..      SUBS     r0,r0,#2
        0x0020860a:    342e        .4      ADDS     r4,r4,#0x2e
        0x0020860c:    8002        ..      STRH     r2,[r0,#0]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (108)
        0x0020860e:    2001        .       MOVS     r0,#1
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (109)
        0x00208610:    429a        .B      CMP      r2,r3
        0x00208612:    d007        ..      BEQ      0x208624 ; ADC_CalibrationInit + 196
        0x00208614:    42aa        .B      CMP      r2,r5
        0x00208616:    d017        ..      BEQ      0x208648 ; ADC_CalibrationInit + 232
        0x00208618:    b382        ..      CBZ      r2,0x20867c ; ADC_CalibrationInit + 284
        0x0020861a:    2a01        .*      CMP      r2,#1
        0x0020861c:    d02f        /.      BEQ      0x20867e ; ADC_CalibrationInit + 286
        0x0020861e:    2000        .       MOVS     r0,#0
        0x00208620:    e8bd8ff0    ....    POP      {r4-r11,pc}
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (112)
        0x00208624:    7a4a        Jz      LDRB     r2,[r1,#9]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (113)
        0x00208626:    7a8b        .z      LDRB     r3,[r1,#0xa]
        0x00208628:    eb032202    ..."    ADD      r2,r3,r2,LSL #8
        0x0020862c:    8022        ".      STRH     r2,[r4,#0]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (116)
        0x0020862e:    7aca        .z      LDRB     r2,[r1,#0xb]
        0x00208630:    09d3        ..      LSRS     r3,r2,#7
        0x00208632:    72a3        .r      STRB     r3,[r4,#0xa]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (118)
        0x00208634:    7b0d        .{      LDRB     r5,[r1,#0xc]
        0x00208636:    eb052202    ..."    ADD      r2,r5,r2,LSL #8
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (120)
        0x0020863a:    7b4d        M{      LDRB     r5,[r1,#0xd]
        0x0020863c:    eb052202    ..."    ADD      r2,r5,r2,LSL #8
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (123)
        0x00208640:    6062        b`      STR      r2,[r4,#4]
        0x00208642:    7b8d        .{      LDRB     r5,[r1,#0xe]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (124)
        0x00208644:    7bc9        .{      LDRB     r1,[r1,#0xf]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (127)
        0x00208646:    e010        ..      B        0x20866a ; ADC_CalibrationInit + 266
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (134)
        0x00208648:    7a4a        Jz      LDRB     r2,[r1,#9]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (135)
        0x0020864a:    7a0b        .z      LDRB     r3,[r1,#8]
        0x0020864c:    eb032202    ..."    ADD      r2,r3,r2,LSL #8
        0x00208650:    8022        ".      STRH     r2,[r4,#0]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (137)
        0x00208652:    7b0a        .{      LDRB     r2,[r1,#0xc]
        0x00208654:    09d3        ..      LSRS     r3,r2,#7
        0x00208656:    72a3        .r      STRB     r3,[r4,#0xa]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (139)
        0x00208658:    7acd        .z      LDRB     r5,[r1,#0xb]
        0x0020865a:    eb052202    ..."    ADD      r2,r5,r2,LSL #8
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (141)
        0x0020865e:    7a8d        .z      LDRB     r5,[r1,#0xa]
        0x00208660:    eb052202    ..."    ADD      r2,r5,r2,LSL #8
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (143)
        0x00208664:    6062        b`      STR      r2,[r4,#4]
        0x00208666:    7b8d        .{      LDRB     r5,[r1,#0xe]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (144)
        0x00208668:    7b49        I{      LDRB     r1,[r1,#0xd]
        0x0020866a:    2b00        .+      CMP      r3,#0
        0x0020866c:    eb012105    ...!    ADD      r1,r1,r5,LSL #8
        0x00208670:    8121        !.      STRH     r1,[r4,#8]
        0x00208672:    d0d5        ..      BEQ      0x208620 ; ADC_CalibrationInit + 192
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (149)
        0x00208674:    f042417f    B..A    ORR      r1,r2,#0xff000000
        0x00208678:    6061        a`      STR      r1,[r4,#4]
        0x0020867a:    e7d1        ..      B        0x208620 ; ADC_CalibrationInit + 192
        0x0020867c:    e7ff        ..      B        0x20867e ; ADC_CalibrationInit + 286
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (155)
        0x0020867e:    4db9        .M      LDR      r5,[pc,#740] ; [0x208964] = 0x209852
        0x00208680:    788a        .x      LDRB     r2,[r1,#2]
        0x00208682:    784b        Kx      LDRB     r3,[r1,#1]
        0x00208684:    3522        "5      ADDS     r5,r5,#0x22
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (156)
        0x00208686:    eb032202    ..."    ADD      r2,r3,r2,LSL #8
        0x0020868a:    802a        *.      STRH     r2,[r5,#0]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (158)
        0x0020868c:    794a        Jy      LDRB     r2,[r1,#5]
        0x0020868e:    f105040c    ....    ADD      r4,r5,#0xc
        0x00208692:    09d3        ..      LSRS     r3,r2,#7
        0x00208694:    72ab        .r      STRB     r3,[r5,#0xa]
        0x00208696:    ea5f0e03    _...    MOVS     lr,r3
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (160)
        0x0020869a:    790b        .y      LDRB     r3,[r1,#4]
        0x0020869c:    eb032202    ..."    ADD      r2,r3,r2,LSL #8
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (162)
        0x002086a0:    78cb        .x      LDRB     r3,[r1,#3]
        0x002086a2:    eb032202    ..."    ADD      r2,r3,r2,LSL #8
        0x002086a6:    606a        j`      STR      r2,[r5,#4]
        0x002086a8:    4691        .F      MOV      r9,r2
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (164)
        0x002086aa:    79ca        .y      LDRB     r2,[r1,#7]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (165)
        0x002086ac:    798b        .y      LDRB     r3,[r1,#6]
        0x002086ae:    eb032202    ..."    ADD      r2,r3,r2,LSL #8
        0x002086b2:    812a        *.      STRH     r2,[r5,#8]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (169)
        0x002086b4:    7a4a        Jz      LDRB     r2,[r1,#9]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (170)
        0x002086b6:    7a0b        .z      LDRB     r3,[r1,#8]
        0x002086b8:    eb032202    ..."    ADD      r2,r3,r2,LSL #8
        0x002086bc:    8022        ".      STRH     r2,[r4,#0]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (172)
        0x002086be:    7b0a        .{      LDRB     r2,[r1,#0xc]
        0x002086c0:    ea4f13d2    O...    LSR      r3,r2,#7
        0x002086c4:    72a3        .r      STRB     r3,[r4,#0xa]
        0x002086c6:    469b        .F      MOV      r11,r3
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (174)
        0x002086c8:    7acb        .z      LDRB     r3,[r1,#0xb]
        0x002086ca:    eb032202    ..."    ADD      r2,r3,r2,LSL #8
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (176)
        0x002086ce:    7a8b        .z      LDRB     r3,[r1,#0xa]
        0x002086d0:    eb032c02    ...,    ADD      r12,r3,r2,LSL #8
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (178)
        0x002086d4:    f8c4c004    ....    STR      r12,[r4,#4]
        0x002086d8:    7b8a        .{      LDRB     r2,[r1,#0xe]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (179)
        0x002086da:    7b4b        K{      LDRB     r3,[r1,#0xd]
        0x002086dc:    eb032202    ..."    ADD      r2,r3,r2,LSL #8
        0x002086e0:    8122        ".      STRH     r2,[r4,#8]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (183)
        0x002086e2:    f104030c    ....    ADD      r3,r4,#0xc
        0x002086e6:    7c0a        .|      LDRB     r2,[r1,#0x10]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (184)
        0x002086e8:    7bcc        .{      LDRB     r4,[r1,#0xf]
        0x002086ea:    eb042202    ..."    ADD      r2,r4,r2,LSL #8
        0x002086ee:    801a        ..      STRH     r2,[r3,#0]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (186)
        0x002086f0:    7cca        .|      LDRB     r2,[r1,#0x13]
        0x002086f2:    ea4f17d2    O...    LSR      r7,r2,#7
        0x002086f6:    729f        .r      STRB     r7,[r3,#0xa]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (188)
        0x002086f8:    7c8c        .|      LDRB     r4,[r1,#0x12]
        0x002086fa:    eb042202    ..."    ADD      r2,r4,r2,LSL #8
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (190)
        0x002086fe:    7c4c        L|      LDRB     r4,[r1,#0x11]
        0x00208700:    eb042602    ...&    ADD      r6,r4,r2,LSL #8
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (192)
        0x00208704:    605e        ^`      STR      r6,[r3,#4]
        0x00208706:    7d4a        J}      LDRB     r2,[r1,#0x15]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (193)
        0x00208708:    7d0c        .}      LDRB     r4,[r1,#0x14]
        0x0020870a:    eb042202    ..."    ADD      r2,r4,r2,LSL #8
        0x0020870e:    811a        ..      STRH     r2,[r3,#8]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (197)
        0x00208710:    7dcb        .}      LDRB     r3,[r1,#0x17]
        0x00208712:    7d8c        .}      LDRB     r4,[r1,#0x16]
        0x00208714:    f1050224    ..$.    ADD      r2,r5,#0x24
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (198)
        0x00208718:    eb042303    ...#    ADD      r3,r4,r3,LSL #8
        0x0020871c:    8013        ..      STRH     r3,[r2,#0]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (200)
        0x0020871e:    7e8b        .~      LDRB     r3,[r1,#0x1a]
        0x00208720:    ea4f15d3    O...    LSR      r5,r3,#7
        0x00208724:    7295        .r      STRB     r5,[r2,#0xa]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (202)
        0x00208726:    7e4c        L~      LDRB     r4,[r1,#0x19]
        0x00208728:    eb042303    ...#    ADD      r3,r4,r3,LSL #8
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (204)
        0x0020872c:    7e0c        .~      LDRB     r4,[r1,#0x18]
        0x0020872e:    eb042403    ...$    ADD      r4,r4,r3,LSL #8
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (206)
        0x00208732:    6054        T`      STR      r4,[r2,#4]
        0x00208734:    7f0b        ..      LDRB     r3,[r1,#0x1c]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (207)
        0x00208736:    f891801b    ....    LDRB     r8,[r1,#0x1b]
        0x0020873a:    eb082303    ...#    ADD      r3,r8,r3,LSL #8
        0x0020873e:    8113        ..      STRH     r3,[r2,#8]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (210)
        0x00208740:    7f89        ..      LDRB     r1,[r1,#0x1e]
        0x00208742:    f1a20848    ..H.    SUB      r8,r2,#0x48
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (211)
        0x00208746:    eb0a2101    ...!    ADD      r1,r10,r1,LSL #8
        0x0020874a:    f8a81000    ....    STRH     r1,[r8,#0]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (213)
        0x0020874e:    d004        ..      BEQ      0x20875a ; ADC_CalibrationInit + 506
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (215)
        0x00208750:    f1a20124    ..$.    SUB      r1,r2,#0x24
        0x00208754:    f049437f    I..C    ORR      r3,r9,#0xff000000
        0x00208758:    604b        K`      STR      r3,[r1,#4]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (217)
        0x0020875a:    4982        .I      LDR      r1,[pc,#520] ; [0x208964] = 0x209852
        0x0020875c:    312e        .1      ADDS     r1,r1,#0x2e
        0x0020875e:    f1bb0f00    ....    CMP      r11,#0
        0x00208762:    d002        ..      BEQ      0x20876a ; ADC_CalibrationInit + 522
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (219)
        0x00208764:    f04c437f    L..C    ORR      r3,r12,#0xff000000
        0x00208768:    604b        K`      STR      r3,[r1,#4]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (221)
        0x0020876a:    497e        ~I      LDR      r1,[pc,#504] ; [0x208964] = 0x209852
        0x0020876c:    313a        :1      ADDS     r1,r1,#0x3a
        0x0020876e:    b117        ..      CBZ      r7,0x208776 ; ADC_CalibrationInit + 534
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (223)
        0x00208770:    f046437f    F..C    ORR      r3,r6,#0xff000000
        0x00208774:    604b        K`      STR      r3,[r1,#4]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (225)
        0x00208776:    2d00        .-      CMP      r5,#0
        0x00208778:    f43faf7f    ?...    BEQ      0x20867a ; ADC_CalibrationInit + 282
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (227)
        0x0020877c:    f044417f    D..A    ORR      r1,r4,#0xff000000
        0x00208780:    6051        Q`      STR      r1,[r2,#4]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (252)
        0x00208782:    e74d        M.      B        0x208620 ; ADC_CalibrationInit + 192
    ADC_GetVoltage
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (255)
        0x00208784:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x00208788:    460c        .F      MOV      r4,r1
        0x0020878a:    ed2d8b08    -...    VPUSH    {d8-d11}
        0x0020878e:    4606        .F      MOV      r6,r0
        0x00208790:    4615        .F      MOV      r5,r2
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (256)
        0x00208792:    ed9fba75    ..u.    VLDR     s22,[pc,#468] ; [0x208968] = 0
        0x00208796:    1e40        @.      SUBS     r0,r0,#1
        0x00208798:    f04f38ff    O..8    MOV      r8,#0xffffffff
        0x0020879c:    eeb00a4b    ..K.    VMOV.F32 s0,s22
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (259)
        0x002087a0:    2804        .(      CMP      r0,#4
        0x002087a2:    d204        ..      BCS      0x2087ae ; ADC_GetVoltage + 42
        0x002087a4:    2c00        .,      CMP      r4,#0
        0x002087a6:    db02        ..      BLT      0x2087ae ; ADC_GetVoltage + 42
        0x002087a8:    f5b45f80    ..._    CMP      r4,#0x1000
        0x002087ac:    db05        ..      BLT      0x2087ba ; ADC_GetVoltage + 54
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (261)
        0x002087ae:    f8828000    ....    STRB     r8,[r2,#0]
        0x002087b2:    ecbd8b08    ....    VPOP     {d8-d11}
        0x002087b6:    e8bd87f0    ....    POP      {r4-r10,pc}
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (265)
        0x002087ba:    4f6a        jO      LDR      r7,[pc,#424] ; [0x208964] = 0x209852
        0x002087bc:    f06f0901    o...    MVN      r9,#1
        0x002087c0:    7838        8x      LDRB     r0,[r7,#0]
        0x002087c2:    2855        U(      CMP      r0,#0x55
        0x002087c4:    d00f        ..      BEQ      0x2087e6 ; ADC_GetVoltage + 98
        0x002087c6:    f8970020    .. .    LDRB     r0,[r7,#0x20]
        0x002087ca:    28aa        .(      CMP      r0,#0xaa
        0x002087cc:    d00b        ..      BEQ      0x2087e6 ; ADC_GetVoltage + 98
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (267)
        0x002087ce:    f7fffec7    ....    BL       ADC_CalibrationInit ; 0x208560
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (268)
        0x002087d2:    7838        8x      LDRB     r0,[r7,#0]
        0x002087d4:    2855        U(      CMP      r0,#0x55
        0x002087d6:    d006        ..      BEQ      0x2087e6 ; ADC_GetVoltage + 98
        0x002087d8:    f8970020    .. .    LDRB     r0,[r7,#0x20]
        0x002087dc:    28aa        .(      CMP      r0,#0xaa
        0x002087de:    d002        ..      BEQ      0x2087e6 ; ADC_GetVoltage + 98
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (269)
        0x002087e0:    f8859000    ....    STRB     r9,[r5,#0]
        0x002087e4:    e7e5        ..      B        0x2087b2 ; ADC_GetVoltage + 46
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (274)
        0x002087e6:    485d        ]H      LDR      r0,[pc,#372] ; [0x20895c] = 0x209806
        0x002087e8:    1e80        ..      SUBS     r0,r0,#2
        0x002087ea:    f9b02000    ...     LDRSH    r2,[r0,#0]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (275)
        0x002087ee:    2a55        U*      CMP      r2,#0x55
        0x002087f0:    d07c        |.      BEQ      0x2088ec ; ADC_GetVoltage + 360
        0x002087f2:    2aaa        .*      CMP      r2,#0xaa
        0x002087f4:    d0fc        ..      BEQ      0x2087f0 ; ADC_GetVoltage + 108
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (284)
        0x002087f6:    fb04f004    ....    MUL      r0,r4,r4
        0x002087fa:    ed9f8b5c    ..\.    VLDR     d8,[pc,#368] ; [0x20896c] = 0
        0x002087fe:    4f59        YO      LDR      r7,[pc,#356] ; [0x208964] = 0x209852
        0x00208800:    372e        .7      ADDS     r7,r7,#0x2e
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (289)
        0x00208802:    ed9f9b5c    ..\.    VLDR     d9,[pc,#368] ; [0x208974] = 0
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (294)
        0x00208806:    ed9fab5d    ..].    VLDR     d10,[pc,#372] ; [0x20897c] = 0
        0x0020880a:    454a        JE      CMP      r2,r9
        0x0020880c:    d010        ..      BEQ      0x208830 ; ADC_GetVoltage + 172
        0x0020880e:    4643        CF      MOV      r3,r8
        0x00208810:    429a        .B      CMP      r2,r3
        0x00208812:    d00d        ..      BEQ      0x208830 ; ADC_GetVoltage + 172
        0x00208814:    f1a7080c    ....    SUB      r8,r7,#0xc
        0x00208818:    f5a46100    ...a    SUB      r1,r4,#0x800
        0x0020881c:    f107090c    ....    ADD      r9,r7,#0xc
        0x00208820:    f1070a18    ....    ADD      r10,r7,#0x18
        0x00208824:    b14a        J.      CBZ      r2,0x20883a ; ADC_GetVoltage + 182
        0x00208826:    2a01        .*      CMP      r2,#1
        0x00208828:    d061        a.      BEQ      0x2088ee ; ADC_GetVoltage + 362
        0x0020882a:    20fc        .       MOVS     r0,#0xfc
        0x0020882c:    7028        (p      STRB     r0,[r5,#0]
        0x0020882e:    e7c0        ..      B        0x2087b2 ; ADC_GetVoltage + 46
        0x00208830:    2e02        ..      CMP      r6,#2
        0x00208832:    d07d        }.      BEQ      0x208930 ; ADC_GetVoltage + 428
        0x00208834:    f8858000    ....    STRB     r8,[r5,#0]
        0x00208838:    e7bb        ..      B        0x2087b2 ; ADC_GetVoltage + 46
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (305)
        0x0020883a:    2e01        ..      CMP      r6,#1
        0x0020883c:    d061        a.      BEQ      0x208902 ; ADC_GetVoltage + 382
        0x0020883e:    2e02        ..      CMP      r6,#2
        0x00208840:    d076        v.      BEQ      0x208930 ; ADC_GetVoltage + 428
        0x00208842:    2e03        ..      CMP      r6,#3
        0x00208844:    d002        ..      BEQ      0x20884c ; ADC_GetVoltage + 200
        0x00208846:    2e04        ..      CMP      r6,#4
        0x00208848:    d159        Y.      BNE      0x2088fe ; ADC_GetVoltage + 378
        0x0020884a:    e00c        ..      B        0x208866 ; ADC_GetVoltage + 226
        0x0020884c:    460c        .F      MOV      r4,r1
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (341)
        0x0020884e:    fb01f004    ....    MUL      r0,r1,r4
        0x00208852:    f000fb87    ....    BL       __aeabi_i2d ; 0x208f64
        0x00208856:    ec532b18    S..+    VMOV     r2,r3,d8
        0x0020885a:    f000fa2b    ..+.    BL       __aeabi_ddiv ; 0x208cb4
        0x0020885e:    ec410b18    A...    VMOV     d8,r0,r1
        0x00208862:    464d        MF      MOV      r5,r9
        0x00208864:    e00b        ..      B        0x20887e ; ADC_GetVoltage + 250
        0x00208866:    460c        .F      MOV      r4,r1
        0x00208868:    fb01f004    ....    MUL      r0,r1,r4
        0x0020886c:    f000fb7a    ..z.    BL       __aeabi_i2d ; 0x208f64
        0x00208870:    ec532b18    S..+    VMOV     r2,r3,d8
        0x00208874:    f000fa1e    ....    BL       __aeabi_ddiv ; 0x208cb4
        0x00208878:    ec410b18    A...    VMOV     d8,r0,r1
        0x0020887c:    4655        UF      MOV      r5,r10
        0x0020887e:    f9b50000    ....    LDRSH    r0,[r5,#0]
        0x00208882:    f000fb6f    ..o.    BL       __aeabi_i2d ; 0x208f64
        0x00208886:    ec532b18    S..+    VMOV     r2,r3,d8
        0x0020888a:    f000fb83    ....    BL       __aeabi_dmul ; 0x208f94
        0x0020888e:    f000f937    ..7.    BL       __aeabi_d2f ; 0x208b00
        0x00208892:    4606        .F      MOV      r6,r0
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (343)
        0x00208894:    6868        hh      LDR      r0,[r5,#4]
        0x00208896:    4360        `C      MULS     r0,r4,r0
        0x00208898:    f000fb64    ..d.    BL       __aeabi_i2d ; 0x208f64
        0x0020889c:    ec532b19    S..+    VMOV     r2,r3,d9
        0x002088a0:    f000fa08    ....    BL       __aeabi_ddiv ; 0x208cb4
        0x002088a4:    ec410b18    A...    VMOV     d8,r0,r1
        0x002088a8:    4630        0F      MOV      r0,r6
        0x002088aa:    f000fd5b    ..[.    BL       __aeabi_f2d ; 0x209364
        0x002088ae:    ec532b18    S..+    VMOV     r2,r3,d8
        0x002088b2:    f000f957    ..W.    BL       __aeabi_dadd ; 0x208b64
        0x002088b6:    f000f923    ..#.    BL       __aeabi_d2f ; 0x208b00
        0x002088ba:    4604        .F      MOV      r4,r0
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (344)
        0x002088bc:    f9b50008    ....    LDRSH    r0,[r5,#8]
        0x002088c0:    f000fb50    ..P.    BL       __aeabi_i2d ; 0x208f64
        0x002088c4:    ec532b1a    S..+    VMOV     r2,r3,d10
        0x002088c8:    f000f9f4    ....    BL       __aeabi_ddiv ; 0x208cb4
        0x002088cc:    ec410b18    A...    VMOV     d8,r0,r1
        0x002088d0:    4620         F      MOV      r0,r4
        0x002088d2:    f000fd47    ..G.    BL       __aeabi_f2d ; 0x209364
        0x002088d6:    ec532b18    S..+    VMOV     r2,r3,d8
        0x002088da:    f000f943    ..C.    BL       __aeabi_dadd ; 0x208b64
        0x002088de:    f000f90f    ....    BL       __aeabi_d2f ; 0x208b00
        0x002088e2:    ee000a10    ....    VMOV     s0,r0
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (345)
        0x002088e6:    eeb10a40    ..@.    VNEG.F32 s0,s0
        0x002088ea:    e762        b.      B        0x2087b2 ; ADC_GetVoltage + 46
        0x002088ec:    e0e0        ..      B        0x208ab0 ; ADC_GetVoltage + 812
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (361)
        0x002088ee:    2e01        ..      CMP      r6,#1
        0x002088f0:    d007        ..      BEQ      0x208902 ; ADC_GetVoltage + 382
        0x002088f2:    2e02        ..      CMP      r6,#2
        0x002088f4:    d046        F.      BEQ      0x208984 ; ADC_GetVoltage + 512
        0x002088f6:    2e03        ..      CMP      r6,#3
        0x002088f8:    d07d        }.      BEQ      0x2089f6 ; ADC_GetVoltage + 626
        0x002088fa:    2e04        ..      CMP      r6,#4
        0x002088fc:    d07c        |.      BEQ      0x2089f8 ; ADC_GetVoltage + 628
        0x002088fe:    702b        +p      STRB     r3,[r5,#0]
        0x00208900:    e757        W.      B        0x2087b2 ; ADC_GetVoltage + 46
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (364)
        0x00208902:    f000fb2f    ../.    BL       __aeabi_i2d ; 0x208f64
        0x00208906:    ec532b18    S..+    VMOV     r2,r3,d8
        0x0020890a:    f000f9d3    ....    BL       __aeabi_ddiv ; 0x208cb4
        0x0020890e:    ec410b18    A...    VMOV     d8,r0,r1
        0x00208912:    4645        EF      MOV      r5,r8
        0x00208914:    f9b80000    ....    LDRSH    r0,[r8,#0]
        0x00208918:    f000fb24    ..$.    BL       __aeabi_i2d ; 0x208f64
        0x0020891c:    ec532b18    S..+    VMOV     r2,r3,d8
        0x00208920:    f000fb38    ..8.    BL       __aeabi_dmul ; 0x208f94
        0x00208924:    f000f8ec    ....    BL       __aeabi_d2f ; 0x208b00
        0x00208928:    4606        .F      MOV      r6,r0
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (369)
        0x0020892a:    6868        hh      LDR      r0,[r5,#4]
        0x0020892c:    4360        `C      MULS     r0,r4,r0
        0x0020892e:    e000        ..      B        0x208932 ; ADC_GetVoltage + 430
        0x00208930:    e028        (.      B        0x208984 ; ADC_GetVoltage + 512
        0x00208932:    f000fb17    ....    BL       __aeabi_i2d ; 0x208f64
        0x00208936:    ec532b19    S..+    VMOV     r2,r3,d9
        0x0020893a:    f000f9bb    ....    BL       __aeabi_ddiv ; 0x208cb4
        0x0020893e:    ec410b18    A...    VMOV     d8,r0,r1
        0x00208942:    4630        0F      MOV      r0,r6
        0x00208944:    f000fd0e    ....    BL       __aeabi_f2d ; 0x209364
        0x00208948:    ec532b18    S..+    VMOV     r2,r3,d8
        0x0020894c:    f000f90a    ....    BL       __aeabi_dadd ; 0x208b64
        0x00208950:    f000f8d6    ....    BL       __aeabi_d2f ; 0x208b00
        0x00208954:    4604        .F      MOV      r4,r0
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (374)
        0x00208956:    f9b50008    ....    LDRSH    r0,[r5,#8]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (378)
        0x0020895a:    e03c        <.      B        0x2089d6 ; ADC_GetVoltage + 594
    $d
        0x0020895c:    00209806    .. .    DCD    2136070
        0x00208960:    00202000    .  .    DCD    2105344
        0x00208964:    00209852    R. .    DCD    2136146
        0x00208968:    00000000    ....    DCD    0
        0x0020896c:    00000000    ....    DCD    0
        0x00208970:    4197d784    ...A    DCD    1100470148
        0x00208974:    00000000    ....    DCD    0
        0x00208978:    40f86a00    .j.@    DCD    1090021888
        0x0020897c:    00000000    ....    DCD    0
        0x00208980:    40240000    ..$@    DCD    1076101120
    $t
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (380)
        0x00208984:    f000faee    ....    BL       __aeabi_i2d ; 0x208f64
        0x00208988:    ec532b18    S..+    VMOV     r2,r3,d8
        0x0020898c:    f000f992    ....    BL       __aeabi_ddiv ; 0x208cb4
        0x00208990:    ec410b18    A...    VMOV     d8,r0,r1
        0x00208994:    f9b70000    ....    LDRSH    r0,[r7,#0]
        0x00208998:    f000fae4    ....    BL       __aeabi_i2d ; 0x208f64
        0x0020899c:    ec532b18    S..+    VMOV     r2,r3,d8
        0x002089a0:    f000faf8    ....    BL       __aeabi_dmul ; 0x208f94
        0x002089a4:    f000f8ac    ....    BL       __aeabi_d2f ; 0x208b00
        0x002089a8:    4605        .F      MOV      r5,r0
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (385)
        0x002089aa:    6878        xh      LDR      r0,[r7,#4]
        0x002089ac:    4360        `C      MULS     r0,r4,r0
        0x002089ae:    f000fad9    ....    BL       __aeabi_i2d ; 0x208f64
        0x002089b2:    ec532b19    S..+    VMOV     r2,r3,d9
        0x002089b6:    f000f97d    ..}.    BL       __aeabi_ddiv ; 0x208cb4
        0x002089ba:    ec410b18    A...    VMOV     d8,r0,r1
        0x002089be:    4628        (F      MOV      r0,r5
        0x002089c0:    f000fcd0    ....    BL       __aeabi_f2d ; 0x209364
        0x002089c4:    ec532b18    S..+    VMOV     r2,r3,d8
        0x002089c8:    f000f8cc    ....    BL       __aeabi_dadd ; 0x208b64
        0x002089cc:    f000f898    ....    BL       __aeabi_d2f ; 0x208b00
        0x002089d0:    4604        .F      MOV      r4,r0
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (390)
        0x002089d2:    f9b70008    ....    LDRSH    r0,[r7,#8]
        0x002089d6:    f000fac5    ....    BL       __aeabi_i2d ; 0x208f64
        0x002089da:    ec532b1a    S..+    VMOV     r2,r3,d10
        0x002089de:    f000f969    ..i.    BL       __aeabi_ddiv ; 0x208cb4
        0x002089e2:    ec410b18    A...    VMOV     d8,r0,r1
        0x002089e6:    4620         F      MOV      r0,r4
        0x002089e8:    f000fcbc    ....    BL       __aeabi_f2d ; 0x209364
        0x002089ec:    ec532b18    S..+    VMOV     r2,r3,d8
        0x002089f0:    f000f8b8    ....    BL       __aeabi_dadd ; 0x208b64
        0x002089f4:    e001        ..      B        0x2089fa ; ADC_GetVoltage + 630
        0x002089f6:    e00d        ..      B        0x208a14 ; ADC_GetVoltage + 656
        0x002089f8:    e019        ..      B        0x208a2e ; ADC_GetVoltage + 682
        0x002089fa:    f000f881    ....    BL       __aeabi_d2f ; 0x208b00
        0x002089fe:    ee000a10    ....    VMOV     s0,r0
        0x00208a02:    eeb50ac0    ....    VCMPE.F32 s0,#0.0
        0x00208a06:    eef1fa10    ....    VMRS     APSR_nzcv,FPSCR
        0x00208a0a:    f4bfaeeb    ....    BCS      0x2087e4 ; ADC_GetVoltage + 96
        0x00208a0e:    eeb00a4b    ..K.    VMOV.F32 s0,s22
        0x00208a12:    e6ce        ..      B        0x2087b2 ; ADC_GetVoltage + 46
        0x00208a14:    460c        .F      MOV      r4,r1
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (397)
        0x00208a16:    fb01f004    ....    MUL      r0,r1,r4
        0x00208a1a:    f000faa3    ....    BL       __aeabi_i2d ; 0x208f64
        0x00208a1e:    ec532b18    S..+    VMOV     r2,r3,d8
        0x00208a22:    f000f947    ..G.    BL       __aeabi_ddiv ; 0x208cb4
        0x00208a26:    ec410b18    A...    VMOV     d8,r0,r1
        0x00208a2a:    464d        MF      MOV      r5,r9
        0x00208a2c:    e00b        ..      B        0x208a46 ; ADC_GetVoltage + 706
        0x00208a2e:    460c        .F      MOV      r4,r1
        0x00208a30:    fb01f004    ....    MUL      r0,r1,r4
        0x00208a34:    f000fa96    ....    BL       __aeabi_i2d ; 0x208f64
        0x00208a38:    ec532b18    S..+    VMOV     r2,r3,d8
        0x00208a3c:    f000f93a    ..:.    BL       __aeabi_ddiv ; 0x208cb4
        0x00208a40:    ec410b18    A...    VMOV     d8,r0,r1
        0x00208a44:    4655        UF      MOV      r5,r10
        0x00208a46:    f9b50000    ....    LDRSH    r0,[r5,#0]
        0x00208a4a:    f000fa8b    ....    BL       __aeabi_i2d ; 0x208f64
        0x00208a4e:    ec532b18    S..+    VMOV     r2,r3,d8
        0x00208a52:    f000fa9f    ....    BL       __aeabi_dmul ; 0x208f94
        0x00208a56:    f000f853    ..S.    BL       __aeabi_d2f ; 0x208b00
        0x00208a5a:    4606        .F      MOV      r6,r0
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (399)
        0x00208a5c:    6868        hh      LDR      r0,[r5,#4]
        0x00208a5e:    4360        `C      MULS     r0,r4,r0
        0x00208a60:    f000fa80    ....    BL       __aeabi_i2d ; 0x208f64
        0x00208a64:    ec532b19    S..+    VMOV     r2,r3,d9
        0x00208a68:    f000f924    ..$.    BL       __aeabi_ddiv ; 0x208cb4
        0x00208a6c:    ec410b18    A...    VMOV     d8,r0,r1
        0x00208a70:    4630        0F      MOV      r0,r6
        0x00208a72:    f000fc77    ..w.    BL       __aeabi_f2d ; 0x209364
        0x00208a76:    ec532b18    S..+    VMOV     r2,r3,d8
        0x00208a7a:    f000f873    ..s.    BL       __aeabi_dadd ; 0x208b64
        0x00208a7e:    f000f83f    ..?.    BL       __aeabi_d2f ; 0x208b00
        0x00208a82:    4604        .F      MOV      r4,r0
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (400)
        0x00208a84:    f9b50008    ....    LDRSH    r0,[r5,#8]
        0x00208a88:    f000fa6c    ..l.    BL       __aeabi_i2d ; 0x208f64
        0x00208a8c:    ec532b1a    S..+    VMOV     r2,r3,d10
        0x00208a90:    f000f910    ....    BL       __aeabi_ddiv ; 0x208cb4
        0x00208a94:    ec410b18    A...    VMOV     d8,r0,r1
        0x00208a98:    4620         F      MOV      r0,r4
        0x00208a9a:    f000fc63    ..c.    BL       __aeabi_f2d ; 0x209364
        0x00208a9e:    ec532b18    S..+    VMOV     r2,r3,d8
        0x00208aa2:    f000f85f    .._.    BL       __aeabi_dadd ; 0x208b64
        0x00208aa6:    f000f82b    ..+.    BL       __aeabi_d2f ; 0x208b00
        0x00208aaa:    ee000a10    ....    VMOV     s0,r0
        0x00208aae:    e680        ..      B        0x2087b2 ; ADC_GetVoltage + 46
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (423)
        0x00208ab0:    20fd        .       MOVS     r0,#0xfd
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (424)
        0x00208ab2:    e6bb        ..      B        0x20882c ; ADC_GetVoltage + 168
    ADC_GetResistance
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (435)
        0x00208ab4:    b510        ..      PUSH     {r4,lr}
        0x00208ab6:    4c10        .L      LDR      r4,[pc,#64] ; [0x208af8] = 0x209852
        0x00208ab8:    7820         x      LDRB     r0,[r4,#0]
        0x00208aba:    2855        U(      CMP      r0,#0x55
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (435)
        0x00208abc:    d00c        ..      BEQ      0x208ad8 ; ADC_GetResistance + 36
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (438)
        0x00208abe:    f8940020    .. .    LDRB     r0,[r4,#0x20]
        0x00208ac2:    28aa        .(      CMP      r0,#0xaa
        0x00208ac4:    d008        ..      BEQ      0x208ad8 ; ADC_GetResistance + 36
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (440)
        0x00208ac6:    f7fffd4b    ..K.    BL       ADC_CalibrationInit ; 0x208560
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (441)
        0x00208aca:    7820         x      LDRB     r0,[r4,#0]
        0x00208acc:    2855        U(      CMP      r0,#0x55
        0x00208ace:    d003        ..      BEQ      0x208ad8 ; ADC_GetResistance + 36
        0x00208ad0:    f8940020    .. .    LDRB     r0,[r4,#0x20]
        0x00208ad4:    28aa        .(      CMP      r0,#0xaa
        0x00208ad6:    d108        ..      BNE      0x208aea ; ADC_GetResistance + 54
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (444)
        0x00208ad8:    4808        .H      LDR      r0,[pc,#32] ; [0x208afc] = 0x209804
        0x00208ada:    f9b00000    ....    LDRSH    r0,[r0,#0]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (446)
        0x00208ade:    2855        U(      CMP      r0,#0x55
        0x00208ae0:    d003        ..      BEQ      0x208aea ; ADC_GetResistance + 54
        0x00208ae2:    28aa        .(      CMP      r0,#0xaa
        0x00208ae4:    d001        ..      BEQ      0x208aea ; ADC_GetResistance + 54
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (448)
        0x00208ae6:    2801        .(      CMP      r0,#1
        0x00208ae8:    d001        ..      BEQ      0x208aee ; ADC_GetResistance + 58
        0x00208aea:    2000        .       MOVS     r0,#0
        0x00208aec:    bd10        ..      POP      {r4,pc}
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (450)
        0x00208aee:    4802        .H      LDR      r0,[pc,#8] ; [0x208af8] = 0x209852
        0x00208af0:    1e80        ..      SUBS     r0,r0,#2
        0x00208af2:    8800        ..      LDRH     r0,[r0,#0]
;;; ..\..\..\src\app\peripheral\peripheral_adc\adc_lib\adc_k_lib.c (454)
        0x00208af4:    bd10        ..      POP      {r4,pc}
    $d
        0x00208af6:    0000        ..      DCW    0
        0x00208af8:    00209852    R. .    DCD    2136146
        0x00208afc:    00209804    .. .    DCD    2136068
    $t
    x$fpl$d2f
    $v0
    __aeabi_d2f
    _d2f
        0x00208b00:    f0214200    !..B    BIC      r2,r1,#0x80000000
        0x00208b04:    f1a25260    ..`R    SUB      r2,r2,#0x38000000
        0x00208b08:    f5b21f80    ....    CMP      r2,#0x100000
        0x00208b0c:    f0014300    ...C    AND      r3,r1,#0x80000000
        0x00208b10:    bf28        (.      IT       CS
        0x00208b12:    f1d26c7f    ...l    RSBSCS   r12,r2,#0xff00000
        0x00208b16:    d90b        ..      BLS      0x208b30 ; __aeabi_d2f + 48
        0x00208b18:    ea5f1c00    _...    LSLS     r12,r0,#4
        0x00208b1c:    ea4302c2    C...    ORR      r2,r3,r2,LSL #3
        0x00208b20:    eb427050    B.Pp    ADC      r0,r2,r0,LSR #29
        0x00208b24:    bf18        ..      IT       NE
        0x00208b26:    4770        pG      BXNE     lr
        0x00208b28:    bf28        (.      IT       CS
        0x00208b2a:    f0200001     ...    BICCS    r0,r0,#1
        0x00208b2e:    4770        pG      BX       lr
        0x00208b30:    f5b21f80    ....    CMP      r2,#0x100000
        0x00208b34:    bfbc        ..      ITT      LT
        0x00208b36:    4618        .F      MOVLT    r0,r3
        0x00208b38:    4770        pG      BXLT     lr
        0x00208b3a:    ea4f0c41    O.A.    LSL      r12,r1,#1
        0x00208b3e:    f51c1f00    ....    CMN      r12,#0x200000
        0x00208b42:    d202        ..      BCS      0x208b4a ; __aeabi_d2f + 74
        0x00208b44:    4608        .F      MOV      r0,r1
        0x00208b46:    f000bc83    ....    B.W      __fpl_fretinf ; 0x209450
        0x00208b4a:    b570        p.      PUSH     {r4-r6,lr}
        0x00208b4c:    f000facc    ....    BL       __fpl_dnaninf ; 0x2090e8
    $d
        0x00208b50:    89000000    ....    DCD    2298478592
    $t
        0x00208b54:    f7ffbff6    ....    B.W      0x208b44 ; __aeabi_d2f + 68
        0x00208b58:    f04f4000    O..@    MOV      r0,#0x80000000
        0x00208b5c:    f5a00080    ....    SUB      r0,r0,#0x400000
        0x00208b60:    4770        pG      BX       lr
        0x00208b62:    0000        ..      MOVS     r0,r0
    x$fpl$dadd
    $v0
    __aeabi_dadd
    _dadd
        0x00208b64:    b510        ..      PUSH     {r4,lr}
        0x00208b66:    ea910f03    ....    TEQ      r1,r3
        0x00208b6a:    bf48        H.      IT       MI
        0x00208b6c:    f0834300    ...C    EORMI    r3,r3,#0x80000000
        0x00208b70:    f1008316    ....    BMI.W    _dsub1 ; 0x2091a0
    _dadd1
        0x00208b74:    1a84        ..      SUBS     r4,r0,r2
        0x00208b76:    eb710c03    q...    SBCS     r12,r1,r3
        0x00208b7a:    d205        ..      BCS      0x208b88 ; _dadd1 + 20
        0x00208b7c:    1912        ..      ADDS     r2,r2,r4
        0x00208b7e:    eb43030c    C...    ADC      r3,r3,r12
        0x00208b82:    1b00        ..      SUBS     r0,r0,r4
        0x00208b84:    eb61010c    a...    SBC      r1,r1,r12
        0x00208b88:    f8dfe124    ..$.    LDR      lr,[pc,#292] ; [0x208cb0] = 0xffe00000
        0x00208b8c:    ea4f5411    O..T    LSR      r4,r1,#20
        0x00208b90:    eba45c13    ...\    SUB      r12,r4,r3,LSR #20
        0x00208b94:    ea1e0f43    ..C.    TST      lr,r3,LSL #1
        0x00208b98:    bf18        ..      IT       NE
        0x00208b9a:    ea9e5f44    ..D_    TEQNE    lr,r4,LSL #21
        0x00208b9e:    d073        s.      BEQ      0x208c88 ; _dadd1 + 276
        0x00208ba0:    ea23030e    #...    BIC      r3,r3,lr
        0x00208ba4:    f1dc0e20    .. .    RSBS     lr,r12,#0x20
        0x00208ba8:    ea215104    !..Q    BIC      r1,r1,r4,LSL #20
        0x00208bac:    f4431380    C...    ORR      r3,r3,#0x100000
        0x00208bb0:    d332        2.      BCC      0x208c18 ; _dadd1 + 164
        0x00208bb2:    fa22fe0c    "...    LSR      lr,r2,r12
        0x00208bb6:    eb10000e    ....    ADDS     r0,r0,lr
        0x00208bba:    fa23fe0c    #...    LSR      lr,r3,r12
        0x00208bbe:    eb41010e    A...    ADC      r1,r1,lr
        0x00208bc2:    f1cc0e20    .. .    RSB      lr,r12,#0x20
        0x00208bc6:    fa03fe0e    ....    LSL      lr,r3,lr
        0x00208bca:    eb10000e    ....    ADDS     r0,r0,lr
        0x00208bce:    f1510100    Q...    ADCS     r1,r1,#0
        0x00208bd2:    f5b11f80    ....    CMP      r1,#0x100000
        0x00208bd6:    f1cc0e20    .. .    RSB      lr,r12,#0x20
        0x00208bda:    d232        2.      BCS      0x208c42 ; _dadd1 + 206
        0x00208bdc:    eb015104    ...Q    ADD      r1,r1,r4,LSL #20
        0x00208be0:    fa12f20e    ....    LSLS     r2,r2,lr
        0x00208be4:    e8bd4010    ...@    POP      {r4,lr}
        0x00208be8:    bf58        X.      IT       PL
        0x00208bea:    4770        pG      BXPL     lr
        0x00208bec:    1c40        @.      ADDS     r0,r0,#1
        0x00208bee:    bf38        8.      IT       CC
        0x00208bf0:    ea5f0242    _.B.    LSLSCC   r2,r2,#1
        0x00208bf4:    bf18        ..      IT       NE
        0x00208bf6:    4770        pG      BXNE     lr
        0x00208bf8:    2800        .(      CMP      r0,#0
        0x00208bfa:    bf14        ..      ITE      NE
        0x00208bfc:    f0200001     ...    BICNE    r0,r0,#1
        0x00208c00:    f1410100    A...    ADCEQ    r1,r1,#0
        0x00208c04:    ea4f0341    O.A.    LSL      r3,r1,#1
        0x00208c08:    f5131f00    ....    CMN      r3,#0x200000
        0x00208c0c:    bf38        8.      IT       CC
        0x00208c0e:    4770        pG      BXCC     lr
        0x00208c10:    f1a141c0    ...A    SUB      r1,r1,#0x60000000
        0x00208c14:    f000bab6    ....    B.W      __fpl_dretinf ; 0x209184
        0x00208c18:    2a01        .*      CMP      r2,#1
        0x00208c1a:    eb430203    C...    ADC      r2,r3,r3
        0x00208c1e:    f1ac0c20    .. .    SUB      r12,r12,#0x20
        0x00208c22:    f1dc0e1f    ....    RSBS     lr,r12,#0x1f
        0x00208c26:    bf32        2.      ITEE     CC
        0x00208c28:    f04f0e00    O...    MOVCC    lr,#0
        0x00208c2c:    fa23f30c    #...    LSRCS    r3,r3,r12
        0x00208c30:    eb100003    ....    ADDSCS   r0,r0,r3
        0x00208c34:    eb415104    A..Q    ADC      r1,r1,r4,LSL #20
        0x00208c38:    ebb45f11    ..._    CMP      r4,r1,LSR #20
        0x00208c3c:    d0d0        ..      BEQ      0x208be0 ; _dadd1 + 108
        0x00208c3e:    eba15104    ...Q    SUB      r1,r1,r4,LSL #20
        0x00208c42:    f5011180    ....    ADD      r1,r1,#0x100000
        0x00208c46:    0849        I.      LSRS     r1,r1,#1
        0x00208c48:    ea5f0030    _.0.    RRXS     r0,r0
        0x00208c4c:    eb015104    ...Q    ADD      r1,r1,r4,LSL #20
        0x00208c50:    d30e        ..      BCC      0x208c70 ; _dadd1 + 252
        0x00208c52:    f1500000    P...    ADCS     r0,r0,#0
        0x00208c56:    bf38        8.      IT       CC
        0x00208c58:    fa12fe0e    ....    LSLSCC   lr,r2,lr
        0x00208c5c:    d108        ..      BNE      0x208c70 ; _dadd1 + 252
        0x00208c5e:    e8bd4010    ...@    POP      {r4,lr}
        0x00208c62:    e7c9        ..      B        0x208bf8 ; _dadd1 + 132
        0x00208c64:    1c40        @.      ADDS     r0,r0,#1
        0x00208c66:    bf38        8.      IT       CC
        0x00208c68:    ea5f0242    _.B.    LSLSCC   r2,r2,#1
        0x00208c6c:    d1ca        ..      BNE      0x208c04 ; _dadd1 + 144
        0x00208c6e:    e7c3        ..      B        0x208bf8 ; _dadd1 + 132
        0x00208c70:    e8bd4010    ...@    POP      {r4,lr}
        0x00208c74:    ea4f0341    O.A.    LSL      r3,r1,#1
        0x00208c78:    f5131f00    ....    CMN      r3,#0x200000
        0x00208c7c:    bf38        8.      IT       CC
        0x00208c7e:    4770        pG      BXCC     lr
        0x00208c80:    f1a141c0    ...A    SUB      r1,r1,#0x60000000
        0x00208c84:    f000ba7e    ..~.    B.W      __fpl_dretinf ; 0x209184
        0x00208c88:    ea9e5f44    ..D_    TEQ      lr,r4,LSL #21
        0x00208c8c:    d008        ..      BEQ      0x208ca0 ; _dadd1 + 300
        0x00208c8e:    ea110f5e    ..^.    TST      r1,lr,LSR #1
        0x00208c92:    e8bd4010    ...@    POP      {r4,lr}
        0x00208c96:    bf04        ..      ITT      EQ
        0x00208c98:    f0014100    ...A    ANDEQ    r1,r1,#0x80000000
        0x00208c9c:    2000        .       MOVEQ    r0,#0
        0x00208c9e:    4770        pG      BX       lr
        0x00208ca0:    e8bd4010    ...@    POP      {r4,lr}
        0x00208ca4:    b570        p.      PUSH     {r4-r6,lr}
        0x00208ca6:    f000fa1f    ....    BL       __fpl_dnaninf ; 0x2090e8
        0x00208caa:    bf00        ..      NOP      
    $d
        0x00208cac:    3ebefb64    d..>    DCD    1052703588
        0x00208cb0:    ffe00000    ....    DCD    4292870144
    $t
    x$fpl$ddiv
    $v0
    __aeabi_ddiv
    _ddiv
        0x00208cb4:    e92d41c0    -..A    PUSH     {r6-r8,lr}
        0x00208cb8:    b430        0.      PUSH     {r4,r5}
    ddiv_entry
        0x00208cba:    f8dfc2a0    ....    LDR      r12,[pc,#672] ; [0x208f5c] = 0x7ff0000
        0x00208cbe:    ea3c1411    <...    BICS     r4,r12,r1,LSR #4
        0x00208cc2:    bf18        ..      IT       NE
        0x00208cc4:    ea3c1413    <...    BICSNE   r4,r12,r3,LSR #4
        0x00208cc8:    f00080ec    ....    BEQ.W    0x208ea4 ; ddiv_entry + 490
        0x00208ccc:    ea810503    ....    EOR      r5,r1,r3
        0x00208cd0:    ea1c1411    ....    ANDS     r4,r12,r1,LSR #4
        0x00208cd4:    ea4474d5    D..t    ORR      r4,r4,r5,LSR #31
        0x00208cd8:    bf18        ..      IT       NE
        0x00208cda:    ea1c1513    ....    ANDSNE   r5,r12,r3,LSR #4
        0x00208cde:    f00080c7    ....    BEQ.W    0x208e70 ; ddiv_entry + 438
        0x00208ce2:    eba40405    ....    SUB      r4,r4,r5
        0x00208ce6:    f04f4500    O..E    MOV      r5,#0x80000000
        0x00208cea:    ea4521c1    E..!    ORR      r1,r5,r1,LSL #11
        0x00208cee:    ea4523c3    E..#    ORR      r3,r5,r3,LSL #11
        0x00208cf2:    ea415150    A.PQ    ORR      r1,r1,r0,LSR #21
        0x00208cf6:    ea435352    C.RS    ORR      r3,r3,r2,LSR #21
        0x00208cfa:    f104747f    ...t    ADD      r4,r4,#0x3fc0000
        0x00208cfe:    4299        .B      CMP      r1,r3
        0x00208d00:    f5043400    ...4    ADD      r4,r4,#0x20000
        0x00208d04:    ea4f20c0    O..     LSL      r0,r0,#11
        0x00208d08:    ea4f22c2    O.."    LSL      r2,r2,#11
        0x00208d0c:    bf08        ..      IT       EQ
        0x00208d0e:    4290        .B      CMPEQ    r0,r2
        0x00208d10:    f000809c    ....    BEQ.W    0x208e4c ; ddiv_entry + 402
        0x00208d14:    ea4f6513    O..e    LSR      r5,r3,#24
        0x00208d18:    f20f1640    ..@.    ADR.W    r6,{pc}+0x144 ; 0x208e5c
        0x00208d1c:    5d76        v]      LDRB     r6,[r6,r5]
        0x00208d1e:    ea4f4513    O..E    LSR      r5,r3,#16
        0x00208d22:    fb06f705    ....    MUL      r7,r6,r5
        0x00208d26:    f1c77780    ...w    RSB      r7,r7,#0x1000000
        0x00208d2a:    fb06f707    ....    MUL      r7,r6,r7
        0x00208d2e:    ea4f37d7    O..7    LSR      r7,r7,#15
        0x00208d32:    fba76803    ...h    UMULL    r6,r8,r7,r3
        0x00208d36:    4276        vB      RSBS     r6,r6,#0
        0x00208d38:    f5c83880    ...8    RSB      r8,r8,#0x10000
        0x00208d3c:    fba7ce06    ....    UMULL    r12,lr,r7,r6
        0x00208d40:    bf38        8.      IT       CC
        0x00208d42:    f1a80801    ....    SUBCC    r8,r8,#1
        0x00208d46:    fb07e608    ....    MLA      r6,r7,r8,lr
        0x00208d4a:    f04f0e00    O...    MOV      lr,#0
        0x00208d4e:    fba68c02    ....    UMULL    r8,r12,r6,r2
        0x00208d52:    fbe6ce03    ....    UMLAL    r12,lr,r6,r3
        0x00208d56:    f1dc0c00    ....    RSBS     r12,r12,#0
        0x00208d5a:    f1ce4e00    ...N    RSB      lr,lr,#0x80000000
        0x00208d5e:    bf38        8.      IT       CC
        0x00208d60:    f1ae0e01    ....    SUBCC    lr,lr,#1
        0x00208d64:    fba6580c    ...X    UMULL    r5,r8,r6,r12
        0x00208d68:    f04f0700    O...    MOV      r7,#0
        0x00208d6c:    f04f0500    O...    MOV      r5,#0
        0x00208d70:    fbe6870e    ....    UMLAL    r8,r7,r6,lr
        0x00208d74:    fba1c608    ....    UMULL    r12,r6,r1,r8
        0x00208d78:    fba0ce07    ....    UMULL    r12,lr,r0,r7
        0x00208d7c:    eb16060e    ....    ADDS     r6,r6,lr
        0x00208d80:    f1450500    E...    ADC      r5,r5,#0
        0x00208d84:    fbe16507    ...e    UMLAL    r6,r5,r1,r7
        0x00208d88:    f1154ee0    ...N    ADDS     lr,r5,#0x70000000
        0x00208d8c:    bf7e        ~.      ITTT     VC
        0x00208d8e:    f5a43480    ...4    SUBVC    r4,r4,#0x10000
        0x00208d92:    ea5f0646    _.F.    LSLSVC   r6,r6,#1
        0x00208d96:    416d        mA      ADCVC    r5,r5,r5
        0x00208d98:    f1160780    ....    ADDS     r7,r6,#0x80
        0x00208d9c:    f1450500    E...    ADC      r5,r5,#0
        0x00208da0:    ea4f2717    O..'    LSR      r7,r7,#8
        0x00208da4:    ea4f6606    O..f    LSL      r6,r6,#24
        0x00208da8:    ea476705    G..g    ORR      r7,r7,r5,LSL #24
        0x00208dac:    f1a646de    ...F    SUB      r6,r6,#0x6f000000
        0x00208db0:    f1b65f80    ..._    CMP      r6,#0x10000000
        0x00208db4:    ea4f2515    O..%    LSR      r5,r5,#8
        0x00208db8:    d91f        ..      BLS      0x208dfa ; ddiv_entry + 320
        0x00208dba:    4638        8F      MOV      r0,r7
        0x00208dbc:    f0240c01    $...    BIC      r12,r4,#1
        0x00208dc0:    eb0571c4    ...q    ADD      r1,r5,r4,LSL #31
        0x00208dc4:    f1bc6ffe    ...o    CMP      r12,#0x7f00000
        0x00208dc8:    eb01110c    ....    ADD      r1,r1,r12,LSL #4
        0x00208dcc:    d802        ..      BHI      0x208dd4 ; ddiv_entry + 282
        0x00208dce:    bcf0        ..      POP      {r4-r7}
        0x00208dd0:    e8bd8100    ....    POP      {r8,pc}
        0x00208dd4:    4224        $B      TST      r4,r4
        0x00208dd6:    bf5c        \.      ITT      PL
        0x00208dd8:    f5011e80    ....    ADDPL    lr,r1,#0x100000
        0x00208ddc:    ea9e7fc4    ....    TEQPL    lr,r4,LSL #31
        0x00208de0:    d402        ..      BMI      0x208de8 ; ddiv_entry + 302
        0x00208de2:    bcf0        ..      POP      {r4-r7}
        0x00208de4:    e8bd8100    ....    POP      {r8,pc}
        0x00208de8:    4224        $B      TST      r4,r4
        0x00208dea:    d438        8.      BMI      0x208e5e ; ddiv_entry + 420
        0x00208dec:    bcf0        ..      POP      {r4-r7}
        0x00208dee:    f1a141c0    ...A    SUB      r1,r1,#0x60000000
        0x00208df2:    e8bd4100    ...A    POP      {r8,lr}
        0x00208df6:    f000b9c5    ....    B.W      __fpl_dretinf ; 0x209184
        0x00208dfa:    ea4f22d2    O.."    LSR      r2,r2,#11
        0x00208dfe:    ea425243    B.CR    ORR      r2,r2,r3,LSL #21
        0x00208e02:    ea4f23d3    O..#    LSR      r3,r3,#11
        0x00208e06:    fba78602    ....    UMULL    r8,r6,r7,r2
        0x00208e0a:    ea4f20d0    O..     LSR      r0,r0,#11
        0x00208e0e:    ea405041    @.AP    ORR      r0,r0,r1,LSL #21
        0x00208e12:    fb076603    ...f    MLA      r6,r7,r3,r6
        0x00208e16:    ea1e0f0e    ....    TST      lr,lr
        0x00208e1a:    ea4f21d1    O..!    LSR      r1,r1,#11
        0x00208e1e:    fb056602    ...f    MLA      r6,r5,r2,r6
        0x00208e22:    bf58        X.      IT       PL
        0x00208e24:    eba65600    ...V    SUBPL    r6,r6,r0,LSL #20
        0x00208e28:    ebb65600    ...V    SUBS     r6,r6,r0,LSL #20
        0x00208e2c:    ea4f0e52    O.R.    LSR      lr,r2,#1
        0x00208e30:    ea4e7ec3    N..~    ORR      lr,lr,r3,LSL #31
        0x00208e34:    eb180e0e    ....    ADDS     lr,r8,lr
        0x00208e38:    eb560e53    V.S.    ADCS     lr,r6,r3,LSR #1
        0x00208e3c:    d5bd        ..      BPL      0x208dba ; ddiv_entry + 256
        0x00208e3e:    eb180802    ....    ADDS     r8,r8,r2
        0x00208e42:    415e        ^A      ADCS     r6,r6,r3
        0x00208e44:    1c7f        ..      ADDS     r7,r7,#1
        0x00208e46:    f1550500    U...    ADCS     r5,r5,#0
        0x00208e4a:    e7b6        ..      B        0x208dba ; ddiv_entry + 256
        0x00208e4c:    f44f1580    O...    MOV      r5,#0x100000
        0x00208e50:    f04f0700    O...    MOV      r7,#0
        0x00208e54:    f04f0600    O...    MOV      r6,#0
        0x00208e58:    f04f0800    O...    MOV      r8,#0
        0x00208e5c:    e7ad        ..      B        0x208dba ; ddiv_entry + 256
        0x00208e5e:    bcf0        ..      POP      {r4-r7}
        0x00208e60:    f04f0000    O...    MOV      r0,#0
        0x00208e64:    f10141c0    ...A    ADD      r1,r1,#0x60000000
        0x00208e68:    f0014100    ...A    AND      r1,r1,#0x80000000
        0x00208e6c:    e8bd8100    ....    POP      {r8,pc}
        0x00208e70:    ea111f0c    ....    TST      r1,r12,LSL #4
        0x00208e74:    ea0c1513    ....    AND      r5,r12,r3,LSR #4
        0x00208e78:    d000        ..      BEQ      0x208e7c ; ddiv_entry + 450
        0x00208e7a:    e00c        ..      B        0x208e96 ; ddiv_entry + 476
        0x00208e7c:    ea131f0c    ....    TST      r3,r12,LSL #4
        0x00208e80:    f0008025    ..%.    BEQ.W    0x208ece ; ddiv_entry + 532
        0x00208e84:    f04f0000    O...    MOV      r0,#0
        0x00208e88:    bcf0        ..      POP      {r4-r7}
        0x00208e8a:    ea810103    ....    EOR      r1,r1,r3
        0x00208e8e:    f0014100    ...A    AND      r1,r1,#0x80000000
        0x00208e92:    e8bd8100    ....    POP      {r8,pc}
        0x00208e96:    bcf0        ..      POP      {r4-r7}
        0x00208e98:    e8bd4100    ...A    POP      {r8,lr}
        0x00208e9c:    ea810103    ....    EOR      r1,r1,r3
        0x00208ea0:    f000b970    ..p.    B.W      __fpl_dretinf ; 0x209184
        0x00208ea4:    bcf0        ..      POP      {r4-r7}
        0x00208ea6:    e8bd4100    ...A    POP      {r8,lr}
        0x00208eaa:    b570        p.      PUSH     {r4-r6,lr}
        0x00208eac:    f000f91c    ....    BL       __fpl_dnaninf ; 0x2090e8
    $d
        0x00208eb0:    3efc7e09    .~.>    DCD    1056734729
    $t
        0x00208eb4:    f000b807    ....    B.W      0x208ec6 ; ddiv_entry + 524
        0x00208eb8:    ea810103    ....    EOR      r1,r1,r3
        0x00208ebc:    f04f0000    O...    MOV      r0,#0
        0x00208ec0:    f0014100    ...A    AND      r1,r1,#0x80000000
        0x00208ec4:    4770        pG      BX       lr
        0x00208ec6:    ea810103    ....    EOR      r1,r1,r3
        0x00208eca:    f000b95b    ..[.    B.W      __fpl_dretinf ; 0x209184
        0x00208ece:    bcf0        ..      POP      {r4-r7}
        0x00208ed0:    e8bd4100    ...A    POP      {r8,lr}
        0x00208ed4:    f04f0000    O...    MOV      r0,#0
        0x00208ed8:    4921        !I      LDR      r1,[pc,#132] ; [0x208f60] = 0x7ff80000
        0x00208eda:    4770        pG      BX       lr
    $d
        0x00208edc:    f9fbfdff    ....    DCD    4194041343
        0x00208ee0:    f2f4f5f7    ....    DCD    4076140023
        0x00208ee4:    ebedeef0    ....    DCD    3958238960
        0x00208ee8:    e4e6e8e9    ....    DCD    3840338153
        0x00208eec:    dee0e1e3    ....    DCD    3739279843
        0x00208ef0:    d8dadbdd    ....    DCD    3638221789
        0x00208ef4:    d3d4d5d7    ....    DCD    3553940951
        0x00208ef8:    cdcfd0d1    ....    DCD    3452948689
        0x00208efc:    c8cacbcc    ....    DCD    3368733644
        0x00208f00:    c4c5c6c7    ....    DCD    3301295815
        0x00208f04:    bfc0c1c2    ....    DCD    3217080770
        0x00208f08:    bbbcbdbe    ....    DCD    3149708734
        0x00208f0c:    b7b8b9ba    ....    DCD    3082336698
        0x00208f10:    b3b4b5b6    ....    DCD    3014964662
        0x00208f14:    afb0b1b2    ....    DCD    2947592626
        0x00208f18:    abacadae    ....    DCD    2880220590
        0x00208f1c:    a8a8a9aa    ....    DCD    2829625770
        0x00208f20:    a4a5a6a7    ....    DCD    2762319527
        0x00208f24:    a1a2a3a3    ....    DCD    2711790499
        0x00208f28:    9e9f9fa0    ....    DCD    2661261216
        0x00208f2c:    9b9c9c9d    ....    DCD    2610732189
        0x00208f30:    9899999a    ....    DCD    2560203162
        0x00208f34:    95969797    ....    DCD    2509674391
        0x00208f38:    93939495    ....    DCD    2475922581
        0x00208f3c:    90919192    ....    DCD    2425459090
        0x00208f40:    8e8e8f8f    ....    DCD    2391707535
        0x00208f44:    8b8c8c8d    ....    DCD    2341244045
        0x00208f48:    89898a8b    ....    DCD    2307492491
        0x00208f4c:    87878888    ....    DCD    2273806472
        0x00208f50:    84858586    ....    DCD    2223342982
        0x00208f54:    82838384    ....    DCD    2189656964
        0x00208f58:    80818182    ....    DCD    2155970946
        0x00208f5c:    07ff0000    ....    DCD    134152192
        0x00208f60:    7ff80000    ....    DCD    2146959360
    $t
    x$fpl$dflt
    $v0
    __aeabi_i2d
    _dflt
        0x00208f64:    f0104200    ...B    ANDS     r2,r0,#0x80000000
        0x00208f68:    bf48        H.      IT       MI
        0x00208f6a:    4240        @B      RSBMI    r0,r0,#0
        0x00208f6c:    fab0f380    ....    CLZ      r3,r0
        0x00208f70:    fa10f103    ....    LSLS     r1,r0,r3
        0x00208f74:    d00a        ..      BEQ      0x208f8c ; __aeabi_i2d + 40
        0x00208f76:    f1c3031d    ....    RSB      r3,r3,#0x1d
        0x00208f7a:    f5036380    ...c    ADD      r3,r3,#0x400
        0x00208f7e:    ea4f5041    O.AP    LSL      r0,r1,#21
        0x00208f82:    eb025203    ...R    ADD      r2,r2,r3,LSL #20
        0x00208f86:    eb0221d1    ...!    ADD      r1,r2,r1,LSR #11
        0x00208f8a:    4770        pG      BX       lr
        0x00208f8c:    f04f0000    O...    MOV      r0,#0
        0x00208f90:    4770        pG      BX       lr
        0x00208f92:    0000        ..      MOVS     r0,r0
    x$fpl$dmul
    $v0
    __aeabi_dmul
    _dmul
        0x00208f94:    f8dfc148    ..H.    LDR      r12,[pc,#328] ; [0x2090e0] = 0x7ff0000
        0x00208f98:    b570        p.      PUSH     {r4-r6,lr}
        0x00208f9a:    ea1c1e11    ....    ANDS     lr,r12,r1,LSR #4
        0x00208f9e:    bf1e        ..      ITTT     NE
        0x00208fa0:    ea1c1513    ....    ANDSNE   r5,r12,r3,LSR #4
        0x00208fa4:    ea9e0f0c    ....    TEQNE    lr,r12
        0x00208fa8:    ea950f0c    ....    TEQNE    r5,r12
        0x00208fac:    f000806f    ..o.    BEQ.W    0x20908e ; __aeabi_dmul + 250
        0x00208fb0:    ea810403    ....    EOR      r4,r1,r3
        0x00208fb4:    ea23134c    #.L.    BIC      r3,r3,r12,LSL #5
        0x00208fb8:    ea4e7ed4    N..~    ORR      lr,lr,r4,LSR #31
        0x00208fbc:    ea21114c    !.L.    BIC      r1,r1,r12,LSL #5
        0x00208fc0:    f4411180    A...    ORR      r1,r1,#0x100000
        0x00208fc4:    f4431380    C...    ORR      r3,r3,#0x100000
        0x00208fc8:    44ae        .D      ADD      lr,lr,r5
        0x00208fca:    fba14c02    ...L    UMULL    r4,r12,r1,r2
        0x00208fce:    fba06503    ...e    UMULL    r6,r5,r0,r3
        0x00208fd2:    f1ae7e7f    ...~    SUB      lr,lr,#0x3fc0000
        0x00208fd6:    1936        6.      ADDS     r6,r6,r4
        0x00208fd8:    eb55050c    U...    ADCS     r5,r5,r12
        0x00208fdc:    fba14c03    ...L    UMULL    r4,r12,r1,r3
        0x00208fe0:    f14c0300    L...    ADC      r3,r12,#0
        0x00208fe4:    fba01c02    ....    UMULL    r1,r12,r0,r2
        0x00208fe8:    eb16060c    ....    ADDS     r6,r6,r12
        0x00208fec:    4165        eA      ADCS     r5,r5,r4
        0x00208fee:    f1530300    S...    ADCS     r3,r3,#0
        0x00208ff2:    4209        .B      TST      r1,r1
        0x00208ff4:    bf18        ..      IT       NE
        0x00208ff6:    f0460601    F...    ORRNE    r6,r6,#1
        0x00208ffa:    f4137f00    ....    TST      r3,#0x200
        0x00208ffe:    d10b        ..      BNE      0x209018 ; __aeabi_dmul + 132
        0x00209000:    ea4f3103    O..1    LSL      r1,r3,#12
        0x00209004:    ea4f3005    O..0    LSL      r0,r5,#12
        0x00209008:    0334        4.      LSLS     r4,r6,#12
        0x0020900a:    ea415115    A..Q    ORR      r1,r1,r5,LSR #20
        0x0020900e:    ea405016    @..P    ORR      r0,r0,r6,LSR #20
        0x00209012:    f06f0203    o...    MVN      r2,#3
        0x00209016:    e00a        ..      B        0x20902e ; __aeabi_dmul + 154
        0x00209018:    ea4f21c3    O..!    LSL      r1,r3,#11
        0x0020901c:    ea4f20c5    O..     LSL      r0,r5,#11
        0x00209020:    02f4        ..      LSLS     r4,r6,#11
        0x00209022:    ea415155    A.UQ    ORR      r1,r1,r5,LSR #21
        0x00209026:    ea405056    @.VP    ORR      r0,r0,r6,LSR #21
        0x0020902a:    f06f0202    o...    MVN      r2,#2
        0x0020902e:    eb02422e    ...B    ADD      r2,r2,lr,ASR #16
        0x00209032:    eb015502    ...U    ADD      r5,r1,r2,LSL #20
        0x00209036:    ea8571ce    ...q    EOR      r1,r5,lr,LSL #31
        0x0020903a:    d00a        ..      BEQ      0x209052 ; __aeabi_dmul + 190
        0x0020903c:    ea5f0c44    _.D.    LSLS     r12,r4,#1
        0x00209040:    bf18        ..      IT       NE
        0x00209042:    f0244400    $..D    BICNE    r4,r4,#0x80000000
        0x00209046:    f1500000    P...    ADCS     r0,r0,#0
        0x0020904a:    f1410100    A...    ADC      r1,r1,#0
        0x0020904e:    ea2070d4     ..p    BIC      r0,r0,r4,LSR #31
        0x00209052:    f2407cfe    @..|    MOV      r12,#0x7fe
        0x00209056:    4562        bE      CMP      r2,r12
        0x00209058:    d200        ..      BCS      0x20905c ; __aeabi_dmul + 200
        0x0020905a:    bd70        p.      POP      {r4-r6,pc}
        0x0020905c:    42a8        .B      CMP      r0,r5
        0x0020905e:    bf14        ..      ITE      NE
        0x00209060:    f04f4480    O..D    MOVNE    r4,#0x40000000
        0x00209064:    f04f4440    O.@D    MOVEQ    r4,#0xc0000000
        0x00209068:    2e00        ..      CMP      r6,#0
        0x0020906a:    bf08        ..      IT       EQ
        0x0020906c:    2400        .$      MOVEQ    r4,#0
        0x0020906e:    f1be6f80    ...o    CMP      lr,#0x4000000
        0x00209072:    bfa8        ..      IT       GE
        0x00209074:    f1a141c0    ...A    SUBGE    r1,r1,#0x60000000
        0x00209078:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020907c:    f2808082    ....    BGE.W    __fpl_dretinf ; 0x209184
        0x00209080:    f04f0000    O...    MOV      r0,#0
        0x00209084:    f10141c0    ...A    ADD      r1,r1,#0x60000000
        0x00209088:    f0014100    ...A    AND      r1,r1,#0x80000000
        0x0020908c:    4770        pG      BX       lr
        0x0020908e:    ea9e0f0c    ....    TEQ      lr,r12
        0x00209092:    ea0c1513    ....    AND      r5,r12,r3,LSR #4
        0x00209096:    bf18        ..      IT       NE
        0x00209098:    ea950f0c    ....    TEQNE    r5,r12
        0x0020909c:    d006        ..      BEQ      0x2090ac ; __aeabi_dmul + 280
        0x0020909e:    f04f0000    O...    MOV      r0,#0
        0x002090a2:    ea810e03    ....    EOR      lr,r1,r3
        0x002090a6:    f00e4100    ...A    AND      r1,lr,#0x80000000
        0x002090aa:    bd70        p.      POP      {r4-r6,pc}
        0x002090ac:    f000f81c    ....    BL       __fpl_dnaninf ; 0x2090e8
    $d
        0x002090b0:    3e010089    ...>    DCD    1040253065
    $t
        0x002090b4:    f000b807    ....    B.W      0x2090c6 ; __aeabi_dmul + 306
        0x002090b8:    f000b809    ....    B.W      0x2090ce ; __aeabi_dmul + 314
        0x002090bc:    ea4f0c43    O.C.    LSL      r12,r3,#1
        0x002090c0:    ea5f5c5c    _.\\    LSRS     r12,r12,#21
        0x002090c4:    d008        ..      BEQ      0x2090d8 ; __aeabi_dmul + 324
        0x002090c6:    ea810103    ....    EOR      r1,r1,r3
        0x002090ca:    f000b85b    ..[.    B.W      __fpl_dretinf ; 0x209184
        0x002090ce:    ea4f0c41    O.A.    LSL      r12,r1,#1
        0x002090d2:    ea5f5c5c    _.\\    LSRS     r12,r12,#21
        0x002090d6:    d1f6        ..      BNE      0x2090c6 ; __aeabi_dmul + 306
        0x002090d8:    f04f0000    O...    MOV      r0,#0
        0x002090dc:    4901        .I      LDR      r1,[pc,#4] ; [0x2090e4] = 0x7ff80000
        0x002090de:    4770        pG      BX       lr
    $d
        0x002090e0:    07ff0000    ....    DCD    134152192
        0x002090e4:    7ff80000    ....    DCD    2146959360
    $t
    x$fpl$dnaninf
    $v0
    __fpl_dnaninf
        0x002090e8:    f10e0e02    ....    ADD      lr,lr,#2
        0x002090ec:    f02e0e03    ....    BIC      lr,lr,#3
        0x002090f0:    f85e6b04    ^..k    LDR      r6,[lr],#4
        0x002090f4:    4236        6B      TST      r6,r6
        0x002090f6:    d405        ..      BMI      0x209104 ; __fpl_dnaninf + 28
        0x002090f8:    2a01        .*      CMP      r2,#1
        0x002090fa:    eb430503    C...    ADC      r5,r3,r3
        0x002090fe:    f5151f00    ....    CMN      r5,#0x200000
        0x00209102:    d812        ..      BHI      0x20912a ; __fpl_dnaninf + 66
        0x00209104:    2801        .(      CMP      r0,#1
        0x00209106:    eb410c01    A...    ADC      r12,r1,r1
        0x0020910a:    f51c1f00    ....    CMN      r12,#0x200000
        0x0020910e:    d80c        ..      BHI      0x20912a ; __fpl_dnaninf + 66
        0x00209110:    d10e        ..      BNE      0x209130 ; __fpl_dnaninf + 72
        0x00209112:    ea4f7cd1    O..|    LSR      r12,r1,#31
        0x00209116:    f5151f00    ....    CMN      r5,#0x200000
        0x0020911a:    eb0c0c4c    ..L.    ADD      r12,r12,r12,LSL #1
        0x0020911e:    f10c0c02    ....    ADD      r12,r12,#2
        0x00209122:    bf08        ..      IT       EQ
        0x00209124:    eb4c7cd3    L..|    ADCEQ    r12,r12,r3,LSR #31
        0x00209128:    e004        ..      B        0x209134 ; __fpl_dnaninf + 76
        0x0020912a:    f04f0c08    O...    MOV      r12,#8
        0x0020912e:    e001        ..      B        0x209134 ; __fpl_dnaninf + 76
        0x00209130:    ea4f7cd3    O..|    LSR      r12,r3,#31
        0x00209134:    eb0c054c    ..L.    ADD      r5,r12,r12,LSL #1
        0x00209138:    fa26f605    &...    LSR      r6,r6,r5
        0x0020913c:    f0060607    ....    AND      r6,r6,#7
        0x00209140:    f1b60c04    ....    SUBS     r12,r6,#4
        0x00209144:    d206        ..      BCS      0x209154 ; __fpl_dnaninf + 108
        0x00209146:    eb0e0c86    ....    ADD      r12,lr,r6,LSL #2
        0x0020914a:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020914e:    f04c0c01    L...    ORR      r12,r12,#1
        0x00209152:    4760        `G      BX       r12
        0x00209154:    e8dff00c    ....    TBB      [pc,r12]
    $d
        0x00209158:    02020b09    ....    DCD    33688329
    $t
        0x0020915c:    f04f4100    O..A    MOV      r1,#0x80000000
        0x00209160:    f04f0000    O...    MOV      r0,#0
        0x00209164:    f5a12100    ...!    SUB      r1,r1,#0x80000
        0x00209168:    bd70        p.      POP      {r4-r6,pc}
        0x0020916a:    4619        .F      MOV      r1,r3
        0x0020916c:    4610        .F      MOV      r0,r2
        0x0020916e:    2801        .(      CMP      r0,#1
        0x00209170:    eb510401    Q...    ADCS     r4,r1,r1
        0x00209174:    bf18        ..      IT       NE
        0x00209176:    f5d41400    ....    RSBSNE   r4,r4,#0x200000
        0x0020917a:    bf84        ..      ITT      HI
        0x0020917c:    2000        .       MOVHI    r0,#0
        0x0020917e:    f0014100    ...A    ANDHI    r1,r1,#0x80000000
        0x00209182:    bd70        p.      POP      {r4-r6,pc}
    x$fpl$dretinf
    $v0
    __fpl_dretinf
        0x00209184:    0808        ..      LSRS     r0,r1,#32
        0x00209186:    f5a01100    ....    SUB      r1,r0,#0x200000
        0x0020918a:    ea4f0131    O.1.    RRX      r1,r1
        0x0020918e:    4770        pG      BX       lr
    x$fpl$dsub
    $v0
    __aeabi_dsub
    _dsub
        0x00209190:    b510        ..      PUSH     {r4,lr}
        0x00209192:    ea910f03    ....    TEQ      r1,r3
        0x00209196:    bf48        H.      IT       MI
        0x00209198:    f0834300    ...C    EORMI    r3,r3,#0x80000000
        0x0020919c:    f53facea    ?...    BMI      _dadd1 ; 0x208b74
    _dsub1
        0x002091a0:    1a84        ..      SUBS     r4,r0,r2
        0x002091a2:    eb710c03    q...    SBCS     r12,r1,r3
        0x002091a6:    d207        ..      BCS      0x2091b8 ; _dsub1 + 24
        0x002091a8:    1912        ..      ADDS     r2,r2,r4
        0x002091aa:    f08c4c00    ...L    EOR      r12,r12,#0x80000000
        0x002091ae:    eb43030c    C...    ADC      r3,r3,r12
        0x002091b2:    1b00        ..      SUBS     r0,r0,r4
        0x002091b4:    eb61010c    a...    SBC      r1,r1,r12
        0x002091b8:    f8dfe1a4    ....    LDR      lr,[pc,#420] ; [0x209360] = 0xffe00000
        0x002091bc:    ea4f5411    O..T    LSR      r4,r1,#20
        0x002091c0:    eba45c13    ...\    SUB      r12,r4,r3,LSR #20
        0x002091c4:    ea1e0f43    ..C.    TST      lr,r3,LSL #1
        0x002091c8:    bf18        ..      IT       NE
        0x002091ca:    ea9e5f44    ..D_    TEQNE    lr,r4,LSL #21
        0x002091ce:    f00080b0    ....    BEQ.W    0x209332 ; _dsub1 + 402
        0x002091d2:    ea23036e    #.n.    BIC      r3,r3,lr,ASR #1
        0x002091d6:    4252        RB      RSBS     r2,r2,#0
        0x002091d8:    ea215104    !..Q    BIC      r1,r1,r4,LSL #20
        0x002091dc:    ebc3036e    ..n.    RSB      r3,r3,lr,ASR #1
        0x002091e0:    bf38        8.      IT       CC
        0x002091e2:    1e5b        [.      SUBCC    r3,r3,#1
        0x002091e4:    f1dc0e20    .. .    RSBS     lr,r12,#0x20
        0x002091e8:    d325        %.      BCC      0x209236 ; _dsub1 + 150
        0x002091ea:    fa22fe0c    "...    LSR      lr,r2,r12
        0x002091ee:    eb10000e    ....    ADDS     r0,r0,lr
        0x002091f2:    fa43fe0c    C...    ASR      lr,r3,r12
        0x002091f6:    eb41010e    A...    ADC      r1,r1,lr
        0x002091fa:    f1cc0e20    .. .    RSB      lr,r12,#0x20
        0x002091fe:    fa03fe0e    ....    LSL      lr,r3,lr
        0x00209202:    eb10000e    ....    ADDS     r0,r0,lr
        0x00209206:    f1510100    Q...    ADCS     r1,r1,#0
        0x0020920a:    f1cc0e20    .. .    RSB      lr,r12,#0x20
        0x0020920e:    d429        ).      BMI      0x209264 ; _dsub1 + 196
        0x00209210:    fa12f20e    ....    LSLS     r2,r2,lr
        0x00209214:    eb015104    ...Q    ADD      r1,r1,r4,LSL #20
        0x00209218:    e8bd4010    ...@    POP      {r4,lr}
        0x0020921c:    bf58        X.      IT       PL
        0x0020921e:    4770        pG      BXPL     lr
        0x00209220:    1c40        @.      ADDS     r0,r0,#1
        0x00209222:    bf1c        ..      ITT      NE
        0x00209224:    f1b24f00    ...O    CMPNE    r2,#0x80000000
        0x00209228:    4770        pG      BXNE     lr
        0x0020922a:    2800        .(      CMP      r0,#0
        0x0020922c:    bf0c        ..      ITE      EQ
        0x0020922e:    1c49        I.      ADDEQ    r1,r1,#1
        0x00209230:    f0200001     ...    BICNE    r0,r0,#1
        0x00209234:    4770        pG      BX       lr
        0x00209236:    eb120e02    ....    ADDS     lr,r2,r2
        0x0020923a:    eb430203    C...    ADC      r2,r3,r3
        0x0020923e:    bf18        ..      IT       NE
        0x00209240:    f04f0e01    O...    MOVNE    lr,#1
        0x00209244:    ea4e0242    N.B.    ORR      r2,lr,r2,LSL #1
        0x00209248:    f1ac0c20    .. .    SUB      r12,r12,#0x20
        0x0020924c:    f1dc0e1e    ....    RSBS     lr,r12,#0x1e
        0x00209250:    d954        T.      BLS      0x2092fc ; _dsub1 + 348
        0x00209252:    fa43fe0c    C...    ASR      lr,r3,r12
        0x00209256:    eb10000e    ....    ADDS     r0,r0,lr
        0x0020925a:    f15131ff    Q..1    ADCS     r1,r1,#0xffffffff
        0x0020925e:    f1cc0e1e    ....    RSB      lr,r12,#0x1e
        0x00209262:    d5d5        ..      BPL      0x209210 ; _dsub1 + 112
        0x00209264:    f10e0e01    ....    ADD      lr,lr,#1
        0x00209268:    fa12fe0e    ....    LSLS     lr,r2,lr
        0x0020926c:    4140        @A      ADCS     r0,r0,r0
        0x0020926e:    eb410101    A...    ADC      r1,r1,r1
        0x00209272:    eb015c44    ..D\    ADD      r12,r1,r4,LSL #21
        0x00209276:    ea5f5c5c    _.\\    LSRS     r12,r12,#21
        0x0020927a:    d910        ..      BLS      0x20929e ; _dsub1 + 254
        0x0020927c:    eb1070de    ...p    ADDS     r0,r0,lr,LSR #31
        0x00209280:    eb015104    ...Q    ADD      r1,r1,r4,LSL #20
        0x00209284:    bf38        8.      IT       CC
        0x00209286:    f1be4f00    ...O    CMPCC    lr,#0x80000000
        0x0020928a:    e8bd4010    ...@    POP      {r4,lr}
        0x0020928e:    bf18        ..      IT       NE
        0x00209290:    4770        pG      BXNE     lr
        0x00209292:    2800        .(      CMP      r0,#0
        0x00209294:    bf0c        ..      ITE      EQ
        0x00209296:    1c49        I.      ADDEQ    r1,r1,#1
        0x00209298:    f0200001     ...    BICNE    r0,r0,#1
        0x0020929c:    4770        pG      BX       lr
        0x0020929e:    d230        0.      BCS      0x209302 ; _dsub1 + 354
        0x002092a0:    ea4f2cd4    O..,    LSR      r12,r4,#11
        0x002092a4:    f5111100    ....    ADDS     r1,r1,#0x200000
        0x002092a8:    f4246400    $..d    BIC      r4,r4,#0x800
        0x002092ac:    d01b        ..      BEQ      0x2092e6 ; _dsub1 + 326
        0x002092ae:    fab1f281    ....    CLZ      r2,r1
        0x002092b2:    3a0b        .:      SUBS     r2,r2,#0xb
        0x002092b4:    1aa4        ..      SUBS     r4,r4,r2
        0x002092b6:    1ea4        ..      SUBS     r4,r4,#2
        0x002092b8:    f1d20320    .. .    RSBS     r3,r2,#0x20
        0x002092bc:    4091        .@      LSLS     r1,r1,r2
        0x002092be:    fa30f303    0...    LSRS     r3,r0,r3
        0x002092c2:    4319        .C      ORRS     r1,r1,r3
        0x002092c4:    4090        .@      LSLS     r0,r0,r2
        0x002092c6:    eb0171cc    ...q    ADD      r1,r1,r12,LSL #31
        0x002092ca:    2c00        .,      CMP      r4,#0
        0x002092cc:    eb015104    ...Q    ADD      r1,r1,r4,LSL #20
        0x002092d0:    e8bd4010    ...@    POP      {r4,lr}
        0x002092d4:    bfa8        ..      IT       GE
        0x002092d6:    4770        pG      BXGE     lr
        0x002092d8:    f10141c0    ...A    ADD      r1,r1,#0x60000000
        0x002092dc:    f04f0000    O...    MOV      r0,#0
        0x002092e0:    f0014100    ...A    AND      r1,r1,#0x80000000
        0x002092e4:    4770        pG      BX       lr
        0x002092e6:    fab0f380    ....    CLZ      r3,r0
        0x002092ea:    fa10f103    ....    LSLS     r1,r0,r3
        0x002092ee:    d100        ..      BNE      0x2092f2 ; _dsub1 + 338
        0x002092f0:    bd10        ..      POP      {r4,pc}
        0x002092f2:    1ae4        ..      SUBS     r4,r4,r3
        0x002092f4:    3c17        .<      SUBS     r4,r4,#0x17
        0x002092f6:    0548        H.      LSLS     r0,r1,#21
        0x002092f8:    0ac9        ..      LSRS     r1,r1,#11
        0x002092fa:    e7e4        ..      B        0x2092c6 ; _dsub1 + 294
        0x002092fc:    eb015104    ...Q    ADD      r1,r1,r4,LSL #20
        0x00209300:    bd10        ..      POP      {r4,pc}
        0x00209302:    1049        I.      ASRS     r1,r1,#1
        0x00209304:    eb015104    ...Q    ADD      r1,r1,r4,LSL #20
        0x00209308:    e8bd4010    ...@    POP      {r4,lr}
        0x0020930c:    ea4f0030    O.0.    RRX      r0,r0
        0x00209310:    e002        ..      B        0x209318 ; _dsub1 + 376
        0x00209312:    f04f0100    O...    MOV      r1,#0
        0x00209316:    4770        pG      BX       lr
        0x00209318:    004a        J.      LSLS     r2,r1,#1
        0x0020931a:    bf08        ..      IT       EQ
        0x0020931c:    4200        .B      TSTEQ    r0,r0
        0x0020931e:    d0f8        ..      BEQ      0x209312 ; _dsub1 + 370
        0x00209320:    f5b21f00    ....    CMP      r2,#0x200000
        0x00209324:    bf28        (.      IT       CS
        0x00209326:    4770        pG      BXCS     lr
        0x00209328:    f0014100    ...A    AND      r1,r1,#0x80000000
        0x0020932c:    f04f0000    O...    MOV      r0,#0
        0x00209330:    4770        pG      BX       lr
        0x00209332:    ea9e5f44    ..D_    TEQ      lr,r4,LSL #21
        0x00209336:    d007        ..      BEQ      0x209348 ; _dsub1 + 424
        0x00209338:    ea110f5e    ..^.    TST      r1,lr,LSR #1
        0x0020933c:    e8bd4010    ...@    POP      {r4,lr}
        0x00209340:    bf04        ..      ITT      EQ
        0x00209342:    2100        .!      MOVEQ    r1,#0
        0x00209344:    2000        .       MOVEQ    r0,#0
        0x00209346:    4770        pG      BX       lr
        0x00209348:    e8bd4010    ...@    POP      {r4,lr}
        0x0020934c:    b570        p.      PUSH     {r4-r6,lr}
        0x0020934e:    f7fffecb    ....    BL       __fpl_dnaninf ; 0x2090e8
        0x00209352:    bf00        ..      NOP      
    $d
        0x00209354:    3ef6df40    @..>    DCD    1056366400
    $t
        0x00209358:    f0834100    ...A    EOR      r1,r3,#0x80000000
        0x0020935c:    4610        .F      MOV      r0,r2
        0x0020935e:    4770        pG      BX       lr
    $d
        0x00209360:    ffe00000    ....    DCD    4292870144
    $t
    x$fpl$f2d
    $v0
    __aeabi_f2d
    _f2d
        0x00209364:    0043        C.      LSLS     r3,r0,#1
        0x00209366:    ea4f0cd3    O...    LSR      r12,r3,#3
        0x0020936a:    ea4f0c3c    O.<.    RRX      r12,r12
        0x0020936e:    4043        C@      EORS     r3,r3,r0
        0x00209370:    bf1f        ..      ITTTT    NE
        0x00209372:    0740        @.      LSLNE    r0,r0,#29
        0x00209374:    f10c5160    ..`Q    ADDNE    r1,r12,#0x38000000
        0x00209378:    f0134ffe    ...O    TSTNE    r3,#0x7f000000
        0x0020937c:    4770        pG      BXNE     lr
        0x0020937e:    f01c6f00    ...o    TST      r12,#0x8000000
        0x00209382:    d103        ..      BNE      0x20938c ; __aeabi_f2d + 40
        0x00209384:    2000        .       MOVS     r0,#0
        0x00209386:    f00c4100    ...A    AND      r1,r12,#0x80000000
        0x0020938a:    4770        pG      BX       lr
        0x0020938c:    f00c4300    ...C    AND      r3,r12,#0x80000000
        0x00209390:    ea437050    C.Pp    ORR      r0,r3,r0,LSR #29
        0x00209394:    b510        ..      PUSH     {r4,lr}
        0x00209396:    ea4000cc    @...    ORR      r0,r0,r12,LSL #3
        0x0020939a:    f000f80e    ....    BL       __fpl_fnaninf ; 0x2093ba
        0x0020939e:    bf00        ..      NOP      
    $d
        0x002093a0:    92000000    ....    DCD    2449473536
    $t
        0x002093a4:    ea4f0100    O...    MOV.W    r1,r0
        0x002093a8:    f7ffbeec    ....    B.W      __fpl_dretinf ; 0x209184
        0x002093ac:    f04f4100    O..A    MOV      r1,#0x80000000
        0x002093b0:    f04f0000    O...    MOV      r0,#0
        0x002093b4:    f5a12100    ...!    SUB      r1,r1,#0x80000
        0x002093b8:    4770        pG      BX       lr
    x$fpl$fnaninf
    $v0
    __fpl_fnaninf
        0x002093ba:    f10e0e02    ....    ADD      lr,lr,#2
        0x002093be:    f02e0e03    ....    BIC      lr,lr,#3
        0x002093c2:    f85e4b04    ^..K    LDR      r4,[lr],#4
        0x002093c6:    4224        $B      TST      r4,r4
        0x002093c8:    d404        ..      BMI      0x2093d4 ; __fpl_fnaninf + 26
        0x002093ca:    ea4f0241    O.A.    LSL      r2,r1,#1
        0x002093ce:    f1b24f7f    ...O    CMP      r2,#0xff000000
        0x002093d2:    d811        ..      BHI      0x2093f8 ; __fpl_fnaninf + 62
        0x002093d4:    ea4f0340    O.@.    LSL      r3,r0,#1
        0x002093d8:    f1b34f7f    ...O    CMP      r3,#0xff000000
        0x002093dc:    d80c        ..      BHI      0x2093f8 ; __fpl_fnaninf + 62
        0x002093de:    d10e        ..      BNE      0x2093fe ; __fpl_fnaninf + 68
        0x002093e0:    ea4f7cd0    O..|    LSR      r12,r0,#31
        0x002093e4:    f1b24f7f    ...O    CMP      r2,#0xff000000
        0x002093e8:    eb0c0c4c    ..L.    ADD      r12,r12,r12,LSL #1
        0x002093ec:    f10c0c02    ....    ADD      r12,r12,#2
        0x002093f0:    bf08        ..      IT       EQ
        0x002093f2:    eb4c7cd1    L..|    ADCEQ    r12,r12,r1,LSR #31
        0x002093f6:    e004        ..      B        0x209402 ; __fpl_fnaninf + 72
        0x002093f8:    f04f0c08    O...    MOV      r12,#8
        0x002093fc:    e001        ..      B        0x209402 ; __fpl_fnaninf + 72
        0x002093fe:    ea4f7cd1    O..|    LSR      r12,r1,#31
        0x00209402:    eb0c034c    ..L.    ADD      r3,r12,r12,LSL #1
        0x00209406:    fa24f403    $...    LSR      r4,r4,r3
        0x0020940a:    f0040407    ....    AND      r4,r4,#7
        0x0020940e:    f1b40c04    ....    SUBS     r12,r4,#4
        0x00209412:    d206        ..      BCS      0x209422 ; __fpl_fnaninf + 104
        0x00209414:    eb0e0c84    ....    ADD      r12,lr,r4,LSL #2
        0x00209418:    e8bd4010    ...@    POP      {r4,lr}
        0x0020941c:    f04c0c01    L...    ORR      r12,r12,#1
        0x00209420:    4760        `G      BX       r12
        0x00209422:    e8dff00c    ....    TBB      [pc,r12]
    $d
        0x00209426:    0807        ..      DCW    2055
        0x00209428:    0202        ..      DCW    514
    $t
        0x0020942a:    f04f4000    O..@    MOV      r0,#0x80000000
        0x0020942e:    f5a00080    ....    SUB      r0,r0,#0x400000
        0x00209432:    bd10        ..      POP      {r4,pc}
        0x00209434:    4608        .F      MOV      r0,r1
        0x00209436:    0042        B.      LSLS     r2,r0,#1
        0x00209438:    bf18        ..      IT       NE
        0x0020943a:    f1d27280    ...r    RSBSNE   r2,r2,#0x1000000
        0x0020943e:    bf88        ..      IT       HI
        0x00209440:    f0004000    ...@    ANDHI    r0,r0,#0x80000000
        0x00209444:    bd10        ..      POP      {r4,pc}
    x$fpl$fpinit
    $v0
    _fp_init
        0x00209446:    f04f7040    O.@p    MOV      r0,#0x3000000
        0x0020944a:    eee10a10    ....    VMSR     FPSCR,r0
    __fplib_config_fpu_vfp
    __fplib_config_pureend_doubles
        0x0020944e:    4770        pG      BX       lr
    x$fpl$fretinf
    $v0
    __fpl_fretinf
        0x00209450:    21ff        .!      MOVS     r1,#0xff
        0x00209452:    ea4150d0    A..P    ORR      r0,r1,r0,LSR #23
        0x00209456:    05c0        ..      LSLS     r0,r0,#23
        0x00209458:    4770        pG      BX       lr
    x$fpl$usenofp
    __I$use$fp
        0x0020945a:    0000        ..      MOVS     r0,r0
    $d.realdata
    .constdata
    app_cb_table
        0x0020945c:    0e85d101    ....    DCD    243650817
        0x00209460:    00000001    ....    DCD    1
        0x00209464:    00207e07    .~ .    DCD    2129415
    .constdata
        0x00209468:    00209698    .. .    DCD    2135704
        0x0020946c:    00209744    D. .    DCD    2135876
        0x00209470:    0020968c    .. .    DCD    2135692
        0x00209474:    0020974c    L. .    DCD    2135884
        0x00209478:    002096f0    .. .    DCD    2135792
        0x0020947c:    00209764    d. .    DCD    2135908
        0x00209480:    00209758    X. .    DCD    2135896
        0x00209484:    002096e0    .. .    DCD    2135776
        0x00209488:    002096e0    .. .    DCD    2135776
        0x0020948c:    002096e0    .. .    DCD    2135776
        0x00209490:    002096e0    .. .    DCD    2135776
        0x00209494:    00209680    .. .    DCD    2135680
        0x00209498:    00209738    8. .    DCD    2135864
        0x0020949c:    002096e0    .. .    DCD    2135776
        0x002094a0:    002096a8    .. .    DCD    2135720
        0x002094a4:    00209708    .. .    DCD    2135816
        0x002094a8:    0020971c    .. .    DCD    2135836
        0x002094ac:    00209688    .. .    DCD    2135688
        0x002094b0:    00209670    p. .    DCD    2135664
        0x002094b4:    002095f0    .. .    DCD    2135536
        0x002094b8:    002095c4    .. .    DCD    2135492
        0x002094bc:    00209724    $. .    DCD    2135844
        0x002094c0:    002096d8    .. .    DCD    2135768
        0x002094c4:    002096c4    .. .    DCD    2135748
        0x002094c8:    0020965c    \. .    DCD    2135644
        0x002094cc:    0020961c    .. .    DCD    2135580
        0x002094d0:    0020963c    <. .    DCD    2135612
        0x002094d4:    002095a0    .. .    DCD    2135456
        0x002094d8:    0020956c    l. .    DCD    2135404
        0x002094dc:    0020967c    |. .    DCD    2135676
        0x002094e0:    00209564    d. .    DCD    2135396
        0x002094e4:    00209598    .. .    DCD    2135448
        0x002094e8:    0020955c    \. .    DCD    2135388
        0x002094ec:    00209590    .. .    DCD    2135440
        0x002094f0:    00209678    x. .    DCD    2135672
        0x002094f4:    00209710    .. .    DCD    2135824
        0x002094f8:    00209574    t. .    DCD    2135412
        0x002094fc:    002095a8    .. .    DCD    2135464
        0x00209500:    002095d4    .. .    DCD    2135508
        0x00209504:    002095f8    .. .    DCD    2135544
        0x00209508:    00209624    $. .    DCD    2135588
        0x0020950c:    00209644    D. .    DCD    2135620
        0x00209510:    00209608    .. .    DCD    2135560
        0x00209514:    002095e4    .. .    DCD    2135524
        0x00209518:    002096a4    .. .    DCD    2135716
        0x0020951c:    002095b8    .. .    DCD    2135480
        0x00209520:    00209584    .. .    DCD    2135428
        0x00209524:    002095cc    .. .    DCD    2135500
        0x00209528:    00209614    .. .    DCD    2135572
        0x0020952c:    00209634    4. .    DCD    2135604
        0x00209530:    00209654    T. .    DCD    2135636
        0x00209534:    00209668    h. .    DCD    2135656
        0x00209538:    002096fc    .. .    DCD    2135804
        0x0020953c:    002096e8    .. .    DCD    2135784
        0x00209540:    00209730    0. .    DCD    2135856
        0x00209544:    002096b0    .. .    DCD    2135728
        0x00209548:    00209690    .. .    DCD    2135696
        0x0020954c:    00209770    p. .    DCD    2135920
        0x00209550:    002096cc    .. .    DCD    2135756
        0x00209554:    002096b8    .. .    DCD    2135736
        0x00209558:    00209684    .. .    DCD    2135684
    .conststring
        0x0020955c:    30433249    I2C0    DCD    809710153
        0x00209560:    00000000    ....    DCD    0
        0x00209564:    30495053    SPI0    DCD    810111059
        0x00209568:    00000000    ....    DCD    0
        0x0020956c:    54524155    UART    DCD    1414676821
        0x00209570:    00000030    0...    DCD    48
        0x00209574:    414d4447    GDMA    DCD    1095582791
        0x00209578:    68432030    0 Ch    DCD    1749229616
        0x0020957c:    656e6e61    anne    DCD    1701736033
        0x00209580:    0000306c    l0..    DCD    12396
        0x00209584:    4f495047    GPIO    DCD    1330204743
        0x00209588:    6f72475f    _Gro    DCD    1869760351
        0x0020958c:    00307075    up0.    DCD    3174517
        0x00209590:    31433249    I2C1    DCD    826487369
        0x00209594:    00000000    ....    DCD    0
        0x00209598:    31495053    SPI1    DCD    826888275
        0x0020959c:    00000000    ....    DCD    0
        0x002095a0:    54524155    UART    DCD    1414676821
        0x002095a4:    00000031    1...    DCD    49
        0x002095a8:    414d4447    GDMA    DCD    1095582791
        0x002095ac:    68432030    0 Ch    DCD    1749229616
        0x002095b0:    656e6e61    anne    DCD    1701736033
        0x002095b4:    0000316c    l1..    DCD    12652
        0x002095b8:    4f495047    GPIO    DCD    1330204743
        0x002095bc:    6f72475f    _Gro    DCD    1869760351
        0x002095c0:    00317075    up1.    DCD    3240053
        0x002095c4:    324d4954    TIM2    DCD    843925844
        0x002095c8:    00000000    ....    DCD    0
        0x002095cc:    54524155    UART    DCD    1414676821
        0x002095d0:    00000032    2...    DCD    50
        0x002095d4:    414d4447    GDMA    DCD    1095582791
        0x002095d8:    68432030    0 Ch    DCD    1749229616
        0x002095dc:    656e6e61    anne    DCD    1701736033
        0x002095e0:    0000326c    l2..    DCD    12908
        0x002095e4:    4f495047    GPIO    DCD    1330204743
        0x002095e8:    6f72475f    _Gro    DCD    1869760351
        0x002095ec:    00327075    up2.    DCD    3305589
        0x002095f0:    334d4954    TIM3    DCD    860703060
        0x002095f4:    00000000    ....    DCD    0
        0x002095f8:    414d4447    GDMA    DCD    1095582791
        0x002095fc:    68432030    0 Ch    DCD    1749229616
        0x00209600:    656e6e61    anne    DCD    1701736033
        0x00209604:    0000336c    l3..    DCD    13164
        0x00209608:    4f495047    GPIO    DCD    1330204743
        0x0020960c:    6f72475f    _Gro    DCD    1869760351
        0x00209610:    00337075    up3.    DCD    3371125
        0x00209614:    344d4954    TIM4    DCD    877480276
        0x00209618:    00000000    ....    DCD    0
        0x0020961c:    4f495047    GPIO    DCD    1330204743
        0x00209620:    00000034    4...    DCD    52
        0x00209624:    414d4447    GDMA    DCD    1095582791
        0x00209628:    68432030    0 Ch    DCD    1749229616
        0x0020962c:    656e6e61    anne    DCD    1701736033
        0x00209630:    0000346c    l4..    DCD    13420
        0x00209634:    354d4954    TIM5    DCD    894257492
        0x00209638:    00000000    ....    DCD    0
        0x0020963c:    4f495047    GPIO    DCD    1330204743
        0x00209640:    00000035    5...    DCD    53
        0x00209644:    414d4447    GDMA    DCD    1095582791
        0x00209648:    68432030    0 Ch    DCD    1749229616
        0x0020964c:    656e6e61    anne    DCD    1701736033
        0x00209650:    0000356c    l5..    DCD    13676
        0x00209654:    364d4954    TIM6    DCD    911034708
        0x00209658:    00000000    ....    DCD    0
        0x0020965c:    656d6954    Time    DCD    1701669204
        0x00209660:    372d3472    r4-7    DCD    925709426
        0x00209664:    00000000    ....    DCD    0
        0x00209668:    374d4954    TIM7    DCD    927811924
        0x0020966c:    00000000    ....    DCD    0
        0x00209670:    414d5442    BTMA    DCD    1095586882
        0x00209674:    00000043    C...    DCD    67
        0x00209678:    00434441    ADC.    DCD    4408385
        0x0020967c:    00435452    RTC.    DCD    4412498
        0x00209680:    00435653    SVC.    DCD    4413011
        0x00209684:    0044434c    LCD.    DCD    4473676
        0x00209688:    00474457    WDG.    DCD    4670551
        0x0020968c:    00494d4e    NMI.    DCD    4803918
        0x00209690:    4f43504c    LPCO    DCD    1329811532
        0x00209694:    0000504d    MP..    DCD    20557
        0x00209698:    74696e49    Init    DCD    1953066569
        0x0020969c:    536c6169    ialS    DCD    1399611753
        0x002096a0:    00000050    P...    DCD    80
        0x002096a4:    00005249    IR..    DCD    21065
        0x002096a8:    646e6550    Pend    DCD    1684956496
        0x002096ac:    00005653    SV..    DCD    22099
        0x002096b0:    32495053    SPI2    DCD    843665491
        0x002096b4:    00000057    W...    DCD    87
        0x002096b8:    524f5053    SPOR    DCD    1380929619
        0x002096bc:    52203154    T1 R    DCD    1377841492
        0x002096c0:    00000058    X...    DCD    88
        0x002096c4:    30533249    I2S0    DCD    810758729
        0x002096c8:    0058525f    _RX.    DCD    5788255
        0x002096cc:    524f5053    SPOR    DCD    1380929619
        0x002096d0:    54203154    T1 T    DCD    1411395924
        0x002096d4:    00000058    X...    DCD    88
        0x002096d8:    30533249    I2S0    DCD    810758729
        0x002096dc:    0058545f    _TX.    DCD    5788767
        0x002096e0:    64767352    Rsvd    DCD    1685484370
        0x002096e4:    00000000    ....    DCD    0
        0x002096e8:    63656451    Qdec    DCD    1667589201
        0x002096ec:    0065646f    ode.    DCD    6644847
        0x002096f0:    4d6d654d    MemM    DCD    1299014989
        0x002096f4:    67616e61    anag    DCD    1734438497
        0x002096f8:    00000065    e...    DCD    101
        0x002096fc:    5f495053    SPI_    DCD    1598640211
        0x00209700:    73616c46    Flas    DCD    1935764550
        0x00209704:    00000068    h...    DCD    104
        0x00209708:    54737953    SysT    DCD    1416853843
        0x0020970c:    006b6369    ick.    DCD    7037801
        0x00209710:    69726550    Peri    DCD    1769104720
        0x00209714:    72656870    pher    DCD    1919248496
        0x00209718:    00006c61    al..    DCD    27745
        0x0020971c:    74737953    Syst    DCD    1953724755
        0x00209720:    00006d65    em..    DCD    28005
        0x00209724:    74616c50    Plat    DCD    1952541776
        0x00209728:    6d726f66    form    DCD    1836216166
        0x0020972c:    00000000    ....    DCD    0
        0x00209730:    7379654b    Keys    DCD    1937335627
        0x00209734:    006e6163    can.    DCD    7233891
        0x00209738:    75626544    Debu    DCD    1969382724
        0x0020973c:    6e6f4d67    gMon    DCD    1852788071
        0x00209740:    00000000    ....    DCD    0
        0x00209744:    65736552    Rese    DCD    1702061394
        0x00209748:    00000074    t...    DCD    116
        0x0020974c:    64726148    Hard    DCD    1685217608
        0x00209750:    6c756146    Faul    DCD    1819631942
        0x00209754:    00000074    t...    DCD    116
        0x00209758:    67617355    Usag    DCD    1734439765
        0x0020975c:    75614665    eFau    DCD    1969309285
        0x00209760:    0000746c    lt..    DCD    29804
        0x00209764:    46737542    BusF    DCD    1181971778
        0x00209768:    746c7561    ault    DCD    1953264993
        0x0020976c:    00000000    ....    DCD    0
        0x00209770:    5f415450    PTA_    DCD    1598116944
        0x00209774:    6c69614d    Mail    DCD    1818845517
        0x00209778:    00786f62    box.    DCD    7892834
    .conststring
        0x0020977c:    6e656353    Scen    DCD    1852138323
        0x00209780:    00425f65    e_B.    DCD    4349797
        0x00209784:    6e656353    Scen    DCD    1852138323
        0x00209788:    00435f65    e_C.    DCD    4415333
        0x0020978c:    746f6f42    Boot    DCD    1953460034
        0x00209790:    65636e4f    Once    DCD    1701015119
        0x00209794:    00000000    ....    DCD    0

** Section #6 'RAM_DATA_ON' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 172 bytes (alignment 4)
    Address: 0x00209798

    0x209798:   8c 97 20 00 88 03 81 00 48 04 81 00 a4 98 20 00    .. .....H..... .
    0x2097a8:   64 99 20 00 64 99 20 00 c0 00 00 00 00 00 00 00    d. .d. .........
    0x2097b8:   00 00 00 00 7c 97 20 00 48 04 81 00 48 04 81 00    ....|. .H...H...
    0x2097c8:   a4 98 20 00 a4 98 20 00 a4 98 20 00 00 00 00 00    .. ... ... .....
    0x2097d8:   00 00 00 00 00 00 00 00 84 97 20 00 48 04 81 00    .......... .H...
    0x2097e8:   48 04 81 00 a4 98 20 00 a4 98 20 00 a4 98 20 00    H..... ... ... .
    0x2097f8:   00 00 00 00 00 00 00 00 00 00 00 00 aa 00 dd 00    ................
    0x209808:   de 00 df 00 e0 00 e1 00 e2 00 e3 00 e4 00 e5 00    ................
    0x209818:   e6 00 e7 00 e8 00 e9 00 ea 00 eb 00 ec 00 ed 00    ................
    0x209828:   ee 00 ef 00 f0 00 f1 00 f2 00 f3 00 f4 00 f5 00    ................
    0x209838:   f6 00 f7 00 f8 00 f9 00 fa 00 fb 00                ............


** Section #7 'RAM_DATA_ON' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 96 bytes (alignment 4)
    Address: 0x00209844


** Section #8 'OVERLAY_A' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 192 bytes (alignment 4)
    Address: 0x002098a4

    $t
    .app.overlay_a
    AppUpdateVectorTable
;;; .\..\..\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;474    static void AppUpdateVectorTable(void)
;;;474    {
        0x002098a4:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x002098a8:    b0bd        ..      SUB      sp,sp,#0xf4
;;;475        extern uint32_t Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;476        extern uint32_t Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;477        extern void Default_Handler(void);
;;;478        const char *SysException[] =
        0x002098aa:    2240        @"      MOVS     r2,#0x40
        0x002098ac:    4926        &I      LDR      r1,[pc,#152] ; [0x209948] = 0x209468
        0x002098ae:    a82d        -.      ADD      r0,sp,#0xb4
        0x002098b0:    f650fb7a    P.z.    BL       __aeabi_memcpy4 ; 0x59fa8
;;;479        {
;;;480            "InitialSP", "Reset", "NMI", "HardFault", "MemManage", "BusFault", "UsageFault", "Rsvd",
;;;481            "Rsvd", "Rsvd", "Rsvd", "SVC", "DebugMon", "Rsvd", "PendSV", "SysTick"
;;;482        };
;;;483        const char *ExtIrq[] =
        0x002098b4:    4924        $I      LDR      r1,[pc,#144] ; [0x209948] = 0x209468
        0x002098b6:    22b4        ."      MOVS     r2,#0xb4
        0x002098b8:    3140        @1      ADDS     r1,r1,#0x40
        0x002098ba:    4668        hF      MOV      r0,sp
        0x002098bc:    f650fb74    P.t.    BL       __aeabi_memcpy4 ; 0x59fa8
        0x002098c0:    4924        $I      LDR      r1,[pc,#144] ; [0x209954] = 0xe000ed08
;;;484        {
;;;485            "System", "WDG", "BTMAC", "TIM3", "TIM2", "Platform", "I2S0_TX", "I2S0_RX", "Timer4-7",
;;;486            "GPIO4", "GPIO5", "UART1", "UART0", "RTC", "SPI0", "SPI1", "I2C0", "I2C1", "ADC",
;;;487            "Peripheral", "GDMA0 Channel0", "GDMA0 Channel1", "GDMA0 Channel2", "GDMA0 Channel3",
;;;488            "GDMA0 Channel4", "GDMA0 Channel5", "GPIO_Group3", "GPIO_Group2", "IR", "GPIO_Group1",
;;;489            "GPIO_Group0", "UART2", "TIM4", "TIM5", "TIM6", "TIM7", "SPI_Flash", "Qdecode",
;;;490            "Keyscan", "SPI2W", "LPCOMP", "PTA_Mailbox", "SPORT1 TX", "SPORT1 RX", "LCD"
;;;491        };
;;;492    
;;;493        IRQ_Fun *pRamVector    = (IRQ_Fun *)VTOR_RAM_ADDR;
        0x002098c2:    f44f1000    O...    MOV      r0,#0x200000
        0x002098c6:    4d21        !M      LDR      r5,[pc,#132] ; [0x20994c] = 0x80e650
        0x002098c8:    4f21        !O      LDR      r7,[pc,#132] ; [0x209950] = 0xf4
        0x002098ca:    6809        .h      LDR      r1,[r1,#0]
        0x002098cc:    4606        .F      MOV      r6,r0
;;;494        IRQ_Fun *pAppVector    = (IRQ_Fun *)&Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;495        uint32_t AppVectorSize = (uint32_t)&Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;496        uint32_t i             = 0;
        0x002098ce:    2400        .$      MOVS     r4,#0
;;;497    
;;;498        if (SCB->VTOR != VTOR_RAM_ADDR)
        0x002098d0:    42b1        .B      CMP      r1,r6
        0x002098d2:    d001        ..      BEQ      0x2098d8 ; AppUpdateVectorTable + 52
;;;499        {
;;;500            RamVectorTableInit(VTOR_RAM_ADDR);
        0x002098d4:    f5fbf9e8    ....    BL       RamVectorTableInit ; 0x4ca8
        0x002098d8:    f04f5805    O..X    MOV      r8,#0x21400000
        0x002098dc:    f8df9078    ..x.    LDR      r9,[pc,#120] ; [0x209958] = 0x21100101
;;;501        }
;;;502    
;;;503        /* Update APP defined handlers */
;;;504        for (i = 0; i < AppVectorSize / 4; ++i)
        0x002098e0:    e027        '.      B        0x209932 ; AppUpdateVectorTable + 142
;;;505        {
;;;506            if (i == 1) //skip reset_handler remap
        0x002098e2:    2c01        .,      CMP      r4,#1
        0x002098e4:    d024        $.      BEQ      0x209930 ; AppUpdateVectorTable + 140
;;;507            {
;;;508                continue;
;;;509            }
;;;510    
;;;511            if ((pAppVector[i] != Default_Handler) && (pAppVector[i] != 0))
        0x002098e6:    f8550024    U.$.    LDR      r0,[r5,r4,LSL #2]
        0x002098ea:    491c        .I      LDR      r1,[pc,#112] ; [0x20995c] = 0x207d41
        0x002098ec:    4288        .B      CMP      r0,r1
        0x002098ee:    d01f        ..      BEQ      0x209930 ; AppUpdateVectorTable + 140
        0x002098f0:    b1f0        ..      CBZ      r0,0x209930 ; AppUpdateVectorTable + 140
;;;512            {
;;;513                if (i < System_VECTORn)
        0x002098f2:    2c10        .,      CMP      r4,#0x10
        0x002098f4:    d209        ..      BCS      0x20990a ; AppUpdateVectorTable + 102
;;;514                {
;;;515                    OS_PRINT_WARN1("Warning! %s is updated by APP!", TRACE_STRING(SysException[i]));
        0x002098f6:    a82d        -.      ADD      r0,sp,#0xb4
        0x002098f8:    f8501024    P.$.    LDR      r1,[r0,r4,LSL #2]
        0x002098fc:    4640        @F      MOV      r0,r8
        0x002098fe:    f5fefab4    ....    BL       trace_string ; 0x7e6a
        0x00209902:    4603        .F      MOV      r3,r0
        0x00209904:    2201        ."      MOVS     r2,#1
        0x00209906:    4916        .I      LDR      r1,[pc,#88] ; [0x209960] = 0x8800020
        0x00209908:    e00b        ..      B        0x209922 ; AppUpdateVectorTable + 126
;;;516                }
;;;517                else
;;;518                {
;;;519                    OS_PRINT_WARN1("Warning! ISR %s is updated by APP!",
        0x0020990a:    4668        hF      MOV      r0,sp
        0x0020990c:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00209910:    f8501c40    P.@.    LDR      r1,[r0,#-0x40]
        0x00209914:    4640        @F      MOV      r0,r8
        0x00209916:    f5fefaa8    ....    BL       trace_string ; 0x7e6a
        0x0020991a:    4911        .I      LDR      r1,[pc,#68] ; [0x209960] = 0x8800020
        0x0020991c:    2201        ."      MOVS     r2,#1
        0x0020991e:    4603        .F      MOV      r3,r0
        0x00209920:    3124        $1      ADDS     r1,r1,#0x24
        0x00209922:    4648        HF      MOV      r0,r9
        0x00209924:    f5fef89b    ....    BL       log_buffer ; 0x7a5e
;;;520                                   TRACE_STRING(ExtIrq[i - System_VECTORn]));
;;;521                }
;;;522    
;;;523                pRamVector[i] = pAppVector[i];
        0x00209928:    f8550024    U.$.    LDR      r0,[r5,r4,LSL #2]
        0x0020992c:    f8460024    F.$.    STR      r0,[r6,r4,LSL #2]
        0x00209930:    1c64        d.      ADDS     r4,r4,#1
        0x00209932:    ebb40f97    ....    CMP      r4,r7,LSR #2
        0x00209936:    d3d4        ..      BCC      0x2098e2 ; AppUpdateVectorTable + 62
;;;524            }
;;;525        }
;;;526    
;;;527        __DMB();
        0x00209938:    f3bf8f5f    .._.    DMB      
;;;528        __DSB();
        0x0020993c:    f3bf8f4f    ..O.    DSB      
;;;529    }
        0x00209940:    b03d        =.      ADD      sp,sp,#0xf4
        0x00209942:    e8bd83f0    ....    POP      {r4-r9,pc}
    $d
        0x00209946:    0000        ..      DCW    0
        0x00209948:    00209468    h. .    DCD    2135144
        0x0020994c:    0080e650    P...    DCD    8447568
        0x00209950:    000000f4    ....    DCD    244
        0x00209954:    e000ed08    ....    DCD    3758157064
        0x00209958:    21100101    ...!    DCD    554696961
        0x0020995c:    00207d41    A} .    DCD    2129217
        0x00209960:    08800020     ...    DCD    142606368

** Section #9 'App.trace' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 108 bytes (alignment 4)
    Address: 0x08800000

    0x8800000:   21 21 21 53 44 4b 20 56 65 72 3a 20 25 73 2c 20    !!!SDK Ver: %s, 
    0x8800010:   42 75 69 6c 64 20 54 69 6d 65 3a 20 25 73 00 00    Build Time: %s..
    0x8800020:   21 21 2a 57 61 72 6e 69 6e 67 21 20 25 73 20 69    !!*Warning! %s i
    0x8800030:   73 20 75 70 64 61 74 65 64 20 62 79 20 41 50 50    s updated by APP
    0x8800040:   21 00 00 00 21 21 2a 57 61 72 6e 69 6e 67 21 20    !...!!*Warning! 
    0x8800050:   49 53 52 20 25 73 20 69 73 20 75 70 64 61 74 65    ISR %s is update
    0x8800060:   64 20 62 79 20 41 50 50 21 00 00 00                d by APP!...


** Section #10 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 1476 bytes


** Section #11 '.debug_frame' (SHT_PROGBITS)
    Size   : 2496 bytes


** Section #12 '.debug_info' (SHT_PROGBITS)
    Size   : 45384 bytes


** Section #13 '.debug_line' (SHT_PROGBITS)
    Size   : 8864 bytes


** Section #14 '.debug_loc' (SHT_PROGBITS)
    Size   : 3212 bytes


** Section #15 '.debug_macinfo' (SHT_PROGBITS)
    Size   : 47936 bytes


** Section #16 '.debug_pubnames' (SHT_PROGBITS)
    Size   : 2890 bytes


** Section #17 '.symtab' (SHT_SYMTAB)
    Size   : 14592 bytes (alignment 4)
    String table #18 '.strtab'
    Last local symbol no. 212


** Section #18 '.strtab' (SHT_STRTAB)
    Size   : 16100 bytes


** Section #19 '.note' (SHT_NOTE)
    Size   : 52 bytes (alignment 4)


** Section #20 '.comment' (SHT_PROGBITS)
    Size   : 7304 bytes


** Section #21 '.shstrtab' (SHT_STRTAB)
    Size   : 276 bytes


address     size       variable name                            type
0x00209898  0xc        ADC_Bypass_Diff_Value                    ADC_K_Value
0x00209898  0x2      * ADC_Bypass_Diff_Value.Coefficient_A      int16_t
0x0020989c  0x4        ADC_Bypass_Diff_Value.Coefficient_B      int32_t
0x002098a0  0x2        ADC_Bypass_Diff_Value.Coefficient_C      int16_t
0x002098a2  0x1        ADC_Bypass_Diff_Value.Sign_Bit_B         uint8_t

address     size       variable name                            type
0x00209880  0xc        ADC_Bypass_Single_Value                  ADC_K_Value
0x00209880  0x2      * ADC_Bypass_Single_Value.Coefficient_A    int16_t
0x00209884  0x4        ADC_Bypass_Single_Value.Coefficient_B    int32_t
0x00209888  0x2        ADC_Bypass_Single_Value.Coefficient_C    int16_t
0x0020988a  0x1        ADC_Bypass_Single_Value.Sign_Bit_B       uint8_t

address     size       variable name                            type
0x0020988c  0xc        ADC_Divide_Diff_Value                    ADC_K_Value
0x0020988c  0x2      * ADC_Divide_Diff_Value.Coefficient_A      int16_t
0x00209890  0x4        ADC_Divide_Diff_Value.Coefficient_B      int32_t
0x00209894  0x2        ADC_Divide_Diff_Value.Coefficient_C      int16_t
0x00209896  0x1        ADC_Divide_Diff_Value.Sign_Bit_B         uint8_t

address     size       variable name                            type
0x00209874  0xc        ADC_Divide_Single_Value                  ADC_K_Value
0x00209874  0x2      * ADC_Divide_Single_Value.Coefficient_A    int16_t
0x00209878  0x4        ADC_Divide_Single_Value.Coefficient_B    int32_t
0x0020987c  0x2        ADC_Divide_Single_Value.Coefficient_C    int16_t
0x0020987e  0x1        ADC_Divide_Single_Value.Sign_Bit_B       uint8_t

address     size       variable name                            type
0x00209804  0x2        ADC_K_Version                            int16_t

address     size       variable name                            type
0x00209850  0x2        ADC_Resistance_Value                     uint16_t

address     size       variable name                            type
0x00209806  0x3e       EFUSE_ADC_Addr                           array[31] of uint16_t

address     size       variable name                            type
0x00209852  0x21       EFUSE_ADC_Read_Value                     array[33] of uint8_t

address     size       variable name                            type
0x00209798  0x6c       overlay_sections                         array[3] of T_OVERLAY_SECTION

address     size       variable name                            type
0x00209848  0x8        scenario_name                            array[8] of char

address     size       variable name                            type
0x0020945c  0xc        app_cb_table                             const T_APP_CB_TABLE
0x0020945c  0x4        app_cb_table.app_cb_signature            uint32_t
0x00209460  0x4        app_cb_table.app_cb_numbers              uint32_t
0x00209464  0x4        app_cb_table.app_cb_addr                 array[1] of uint32_t

address     size       variable name                            type
0x0080e1e0  0x220      auth_header                              const T_AUTH_HEADER_FORMAT
0x0080e1e0  0x100      auth_header.payload_signature            array[256] of uint8_t
0x0080e2e0  0x10       auth_header.payload_mac                  array[16] of uint8_t
0x0080e2f0  0x100      auth_header.header_signature             array[256] of uint8_t
0x0080e3f0  0x10       auth_header.header_mac                   array[16] of uint8_t

address     size       variable name                            type
0x0080e000  0x1e0      img_header                               const T_IMG_HEADER_FORMAT
0x0080e000  0xc        img_header.ctrl_header                   T_IMG_CTRL_HEADER_FORMAT
0x0080e000  0x1        img_header.ctrl_header.ic_type           uint8_t
0x0080e001  0x1        img_header.ctrl_header.secure_version    uint8_t
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag         anonymous
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag.value   uint16_t
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag.flag_value anonymous
0x0080e002  0x2(15:1)  img_header.ctrl_header.ctrl_flag.flag_value.xip uint16_t
0x0080e002  0x2(14:1)  img_header.ctrl_header.ctrl_flag.flag_value.enc uint16_t
0x0080e002  0x2(13:1)  img_header.ctrl_header.ctrl_flag.flag_value.load_when_boot uint16_t
0x0080e002  0x2(12:1)  img_header.ctrl_header.ctrl_flag.flag_value.enc_load uint16_t
0x0080e002  0x2(9:3)   img_header.ctrl_header.ctrl_flag.flag_value.enc_key_select uint16_t
0x0080e002  0x2(8:1)   img_header.ctrl_header.ctrl_flag.flag_value.not_ready uint16_t
0x0080e002  0x2(7:1)   img_header.ctrl_header.ctrl_flag.flag_value.not_obsolete uint16_t
0x0080e002  0x2(6:1)   img_header.ctrl_header.ctrl_flag.flag_value.integrity_check_en_in_boot uint16_t
0x0080e002  0x2(0:6)   img_header.ctrl_header.ctrl_flag.flag_value.rsvd uint16_t
0x0080e004  0x2        img_header.ctrl_header.image_id          uint16_t
0x0080e006  0x2        img_header.ctrl_header.crc16             uint16_t
0x0080e008  0x4        img_header.ctrl_header.payload_len       uint32_t
0x0080e00c  0x10       img_header.uuid                          array[16] of uint8_t
0x0080e01c  0x4        img_header.exe_base                      uint32_t
0x0080e020  0x4        img_header.load_base                     uint32_t
0x0080e024  0x4        img_header.load_len                      uint32_t
0x0080e028  0x4        img_header.img_base                      uint32_t
0x0080e02c  0x4        img_header.rsvd0                         array[4] of uint8_t
0x0080e030  0x4        img_header.magic_pattern                 uint32_t
0x0080e034  0x10       img_header.dec_key                       array[16] of uint8_t
0x0080e044  0x1c       img_header.rsvd1                         array[28] of uint8_t
0x0080e060  0x10       img_header.git_ver                       T_VERSION_FORMAT
0x0080e060  0x4        img_header.git_ver.ver_info              anonymous
0x0080e060  0x4        img_header.git_ver.ver_info.version      uint32_t
0x0080e060  0x4        img_header.git_ver.ver_info.sub_version  anonymous
0x0080e060  0x4(28:4)  img_header.git_ver.ver_info.sub_version._version_major uint32_t
0x0080e060  0x4(20:8)  img_header.git_ver.ver_info.sub_version._version_minor uint32_t
0x0080e060  0x4(5:15)  img_header.git_ver.ver_info.sub_version._version_revision uint32_t
0x0080e060  0x4(0:5)   img_header.git_ver.ver_info.sub_version._version_reserve uint32_t
0x0080e064  0x4        img_header.git_ver._version_commitid     uint32_t
0x0080e068  0x8        img_header.git_ver._customer_name        array[8] of uint8_t
0x0080e070  0x104      img_header.rsaPubKey                     T_RSA_PUBLIC_KEY
0x0080e070  0x100      img_header.rsaPubKey.N                   array[256] of uint8_t
0x0080e170  0x4        img_header.rsaPubKey.E                   array[4] of uint8_t
0x0080e174  0x20       img_header.sha256                        array[32] of uint8_t
0x0080e194  0x44       img_header.rsvd2                         array[68] of uint8_t
0x0080e1d8  0x4        img_header.app_cb_signature              uint32_t
0x0080e1dc  0x4        img_header.app_cb_table_base_address     uint32_t

address     size       variable name                            type
0x00209844  0x4        user_wdg_cb                              BOOL_WDG_CB

