
========================================================================

** ELF Header Information

    File Name: E:\work\project\P1871\source_2\BEE2-SDK-v1.1.0-git\ble\board\evb\ble_central\Objects\app.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: 0x0080e409
    Flags: EF_ARM_HASENTRY (0x05000002)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Base float procedure-call standard

    Built with
    Component: ARM Compiler 5.06 update 1 (build 61) Tool: armasm [4d35a5]
    Component: ARM Compiler 5.06 update 1 (build 61) Tool: armlink [4d35a8]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 2
    Section header entries: 23

    Program header offset: 420340 (0x000669f4)
    Section header offset: 420404 (0x00066a34)

    Section header string table index: 22

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_W + PF_R + PF_ARM_ENTRY]
    Size : 27428 bytes (26596 bytes in file)
    Virtual address: 0x0080e000 (Alignment 4)


====================================

** Program header #1 (PT_LOAD) [PF_R]
    Size : 10112 bytes
    Virtual address: 0x08800000 (Alignment 4)


========================================================================

** Section #1 'app.bin' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 1024 bytes (alignment 4)
    Address: 0x0080e000

    0x80e000:   05 00 01 01 93 27 00 00 00 01 00 00 6d 67 de f1    .....'......mg..
    0x80e010:   3e 33 e8 11 b1 02 4d 2d f4 0c de 01 00 e4 80 00    >3....M-........
    0x80e020:   00 e4 80 00 00 00 00 00 00 e0 80 00 00 00 00 00    ................
    0x80e030:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e040:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e050:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e060:   01 20 00 00 a8 ac 83 2a 73 64 6b 23 23 23 23 23    . .....*sdk#####
    0x80e070:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e080:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e090:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e100:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e110:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e120:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e130:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e140:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e150:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e160:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e170:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e180:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e190:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1d0:   00 00 00 00 00 00 00 00 01 d1 85 0e e8 bd 20 00    .............. .
    0x80e1e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e200:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e210:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e220:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e230:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e240:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e250:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e260:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e270:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e280:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e290:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2e0:   ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
    0x80e2f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e300:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e310:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e320:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e330:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e340:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e350:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e360:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e370:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e380:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e390:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3f0:   ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................


** Section #2 'FLASH_START_ADDR' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 8 bytes (alignment 4)
    Address: 0x0080e400

    $t
    RESET
    $v0
    Reset_Handler
;;; ..\\..\\..\\src\\mcu\\rtl876x\\arm\\startup_rtl8762c.s
;;;96                     IMPORT SystemInit
;;;96                     LDR    R0, =SystemInit
        0x0080e400:    4800        .H      LDR      r0,[pc,#0] ; [0x80e404] = 0x80e55f
;;;97                     BX     R0
        0x0080e402:    4700        .G      BX       r0
    $d
        0x0080e404:    0080e55f    _...    DCD    8447327

** Section #3 'FLASH_TEXT' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 884 bytes (alignment 4)
    Address: 0x0080e408

    $t
    !!!main
    __main
        0x0080e408:    f3af8000    ....    NOP.W    
        0x0080e40c:    f60df5f8    ....    BL       __rt_entry ; 0x21c000
    .app.flash.text
    ram_init
;;;369    {
        0x0080e410:    b510        ..      PUSH     {r4,lr}
;;;370        //copy data on ro
;;;371        extern char Image$$RAM_DATA_ON$$RO$$Base[];
;;;372        extern char Load$$RAM_DATA_ON$$RO$$Base[];
;;;373        extern unsigned int Image$$RAM_DATA_ON$$RO$$Length;
;;;374    
;;;375        memcpy(Image$$RAM_DATA_ON$$RO$$Base,
        0x0080e412:    4a7c        |J      LDR      r2,[pc,#496] ; [0x80e604] = 0x5348
        0x0080e414:    497c        |I      LDR      r1,[pc,#496] ; [0x80e608] = 0x80e870
        0x0080e416:    487d        }H      LDR      r0,[pc,#500] ; [0x80e60c] = 0x207c00
        0x0080e418:    f44bf53f    K.?.    BL       __aeabi_memcpy ; 0x59e9a
;;;376               Load$$RAM_DATA_ON$$RO$$Base,
;;;377               (unsigned int)&Image$$RAM_DATA_ON$$RO$$Length);
;;;378    
;;;379        //copy data on rw
;;;380        extern char Image$$RAM_DATA_ON$$RW$$Base[];
;;;381        extern char Load$$RAM_DATA_ON$$RW$$Base[];
;;;382        extern unsigned int Image$$RAM_DATA_ON$$RW$$Length;
;;;383    
;;;384        memcpy(Image$$RAM_DATA_ON$$RW$$Base,
        0x0080e41c:    4a7c        |J      LDR      r2,[pc,#496] ; [0x80e610] = 0x74
        0x0080e41e:    497d        }I      LDR      r1,[pc,#500] ; [0x80e614] = 0x813bb8
        0x0080e420:    487d        }H      LDR      r0,[pc,#500] ; [0x80e618] = 0x20cf48
        0x0080e422:    f44bf53a    K.:.    BL       __aeabi_memcpy ; 0x59e9a
;;;385               Load$$RAM_DATA_ON$$RW$$Base,
;;;386               (unsigned int)&Image$$RAM_DATA_ON$$RW$$Length);
;;;387    
;;;388        //clear data on zi
;;;389        extern char Image$$RAM_DATA_ON$$ZI$$Base[];
;;;390        extern unsigned int Image$$RAM_DATA_ON$$ZI$$Length;
;;;391    
;;;392        memset(Image$$RAM_DATA_ON$$ZI$$Base,
        0x0080e426:    497d        }I      LDR      r1,[pc,#500] ; [0x80e61c] = 0x340
        0x0080e428:    487d        }H      LDR      r0,[pc,#500] ; [0x80e620] = 0x20cfbc
        0x0080e42a:    f44bf5f7    K...    BL       __aeabi_memclr ; 0x5a01c
;;;393               0,
;;;394               (unsigned int)&Image$$RAM_DATA_ON$$ZI$$Length);
;;;395    
;;;396        //copy cache ro
;;;397        extern char Image$$CACHE_DATA_ON$$RO$$Base[];
;;;398        extern char Load$$CACHE_DATA_ON$$RO$$Base[];
;;;399        extern unsigned int Image$$CACHE_DATA_ON$$RO$$Length;
;;;400    
;;;401        memcpy(Image$$CACHE_DATA_ON$$RO$$Base,
        0x0080e42e:    4a7d        }J      LDR      r2,[pc,#500] ; [0x80e624] = 0xaf8
        0x0080e430:    497d        }I      LDR      r1,[pc,#500] ; [0x80e628] = 0x813cec
        0x0080e432:    487e        ~H      LDR      r0,[pc,#504] ; [0x80e62c] = 0x21c000
        0x0080e434:    f44bf531    K.1.    BL       __aeabi_memcpy ; 0x59e9a
;;;402               Load$$CACHE_DATA_ON$$RO$$Base,
;;;403               (unsigned int)&Image$$CACHE_DATA_ON$$RO$$Length);
;;;404    
;;;405        //copy share cache ram rw
;;;406        extern char Image$$CACHE_DATA_ON$$RW$$Base[];
;;;407        extern char Load$$CACHE_DATA_ON$$RW$$Base[];
;;;408        extern unsigned int Image$$CACHE_DATA_ON$$RW$$Length;
;;;409    
;;;410        memcpy(Image$$CACHE_DATA_ON$$RW$$Base,
        0x0080e438:    4a7d        }J      LDR      r2,[pc,#500] ; [0x80e630] = 0
        0x0080e43a:    497e        ~I      LDR      r1,[pc,#504] ; [0x80e634] = 0x8147e4
        0x0080e43c:    487e        ~H      LDR      r0,[pc,#504] ; [0x80e638] = 0x21caf8
        0x0080e43e:    f44bf52c    K.,.    BL       __aeabi_memcpy ; 0x59e9a
;;;411               Load$$CACHE_DATA_ON$$RW$$Base,
;;;412               (unsigned int)&Image$$CACHE_DATA_ON$$RW$$Length);
;;;413    
;;;414        //clear share cache ram zi
;;;415        extern char Image$$CACHE_DATA_ON$$ZI$$Base[];
;;;416        extern unsigned int Image$$CACHE_DATA_ON$$ZI$$Length;
;;;417    
;;;418        memset(Image$$CACHE_DATA_ON$$ZI$$Base,
        0x0080e442:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e446:    497d        }I      LDR      r1,[pc,#500] ; [0x80e63c] = 0
        0x0080e448:    487d        }H      LDR      r0,[pc,#500] ; [0x80e640] = 0x21caf8
        0x0080e44a:    f44bb5e7    K...    B        __aeabi_memclr ; 0x5a01c
    random_seed_init
;;;419               0,
;;;420               (unsigned int)&Image$$CACHE_DATA_ON$$ZI$$Length);
;;;421    }
;;;422    
;;;423    uint32_t random_seed_value;
;;;424    
;;;425    APP_FLASH_TEXT_SECTION
;;;426    void random_seed_init(void)
;;;427    {
        0x0080e44e:    b57f        ..      PUSH     {r0-r6,lr}
;;;428        uint16_t crc16;
;;;429        uint8_t buf[DATA_SIZE_FOR_RANDOM_SEED];
;;;430        uint8_t *sour_addr = (uint8_t *)(OTP->appDataAddr + OTP->appDataSize + OTP->heapDataONSize);
        0x0080e450:    f44f1000    O...    MOV      r0,#0x200000
        0x0080e454:    e9f012e0    ....    LDRD     r1,r2,[r0,#0x380]!
        0x0080e458:    4411        .D      ADD      r1,r1,r2
        0x0080e45a:    6880        .h      LDR      r0,[r0,#8]
        0x0080e45c:    2210        ."      MOVS     r2,#0x10
        0x0080e45e:    180d        ..      ADDS     r5,r1,r0
;;;431    
;;;432        memcpy(buf, sour_addr, DATA_SIZE_FOR_RANDOM_SEED);
        0x0080e460:    4629        )F      MOV      r1,r5
        0x0080e462:    4668        hF      MOV      r0,sp
        0x0080e464:    f44bf519    K...    BL       __aeabi_memcpy ; 0x59e9a
;;;433        crc16 = btxfcs(0, buf, DATA_SIZE_FOR_RANDOM_SEED);
        0x0080e468:    2210        ."      MOVS     r2,#0x10
        0x0080e46a:    4669        iF      MOV      r1,sp
        0x0080e46c:    2000        .       MOVS     r0,#0
        0x0080e46e:    f7f8dfb1    ....    BL       btxfcs ; 0x73d4
;;;434    
;;;435        random_seed_value = (crc16 << 16) | (*(volatile uint32_t *)(0x4005817C) & 0xFFFF);
        0x0080e472:    4974        tI      LDR      r1,[pc,#464] ; [0x80e644] = 0x40058000
        0x0080e474:    f8d1117c    ..|.    LDR      r1,[r1,#0x17c]
        0x0080e478:    4e73        sN      LDR      r6,[pc,#460] ; [0x80e648] = 0x20cfbc
        0x0080e47a:    f360411f    `..A    BFI      r1,r0,#16,#16
;;;436    
;;;437        random_seed_value *= platform_random(0xFFFFFFFF);
        0x0080e47e:    f04f30ff    O..0    MOV      r0,#0xffffffff
        0x0080e482:    60f1        .`      STR      r1,[r6,#0xc]
        0x0080e484:    f7f9d995    ....    BL       platform_random ; 0x77b2
        0x0080e488:    68f1        .h      LDR      r1,[r6,#0xc]
        0x0080e48a:    4348        HC      MULS     r0,r1,r0
;;;438    
;;;439        srand(random_seed_value);
        0x0080e48c:    60f0        .`      STR      r0,[r6,#0xc]
        0x0080e48e:    f5fdf427    ..'.    BL       srand ; 0x20bce0
;;;440    
;;;441        for (int i = 0; i < (DATA_SIZE_FOR_RANDOM_SEED / 4); ++i)
        0x0080e492:    2400        .$      MOVS     r4,#0
        0x0080e494:    f60df5be    ....    BL       rand ; 0x21c014
        0x0080e498:    f8450024    E.$.    STR      r0,[r5,r4,LSL #2]
        0x0080e49c:    1c64        d.      ADDS     r4,r4,#1
        0x0080e49e:    2c04        .,      CMP      r4,#4
        0x0080e4a0:    dbf8        ..      BLT      0x80e494 ; random_seed_init + 70
;;;442        {
;;;443            *(uint32_t *)(sour_addr + i * 4) = rand();
;;;444        }
;;;445    
;;;446        random_seed_value = rand();
        0x0080e4a2:    f60df5b7    ....    BL       rand ; 0x21c014
        0x0080e4a6:    60f0        .`      STR      r0,[r6,#0xc]
;;;447    }
        0x0080e4a8:    bd7f        ..      POP      {r0-r6,pc}
    print_reset_reason
;;;448    
;;;449    APP_FLASH_TEXT_SECTION
;;;450    void SystemInit(void)
;;;451    {
;;;452        //hci mode check and bypass app
;;;453        if (check_hci_mode_flag())
;;;454        {
;;;455            return;
;;;456        }
;;;457    
;;;458        //init pre_main and main functions
;;;459        extern void pre_main(void);
;;;460        app_pre_main = (APP_MAIN_FUNC)pre_main;
;;;461        app_main = (APP_MAIN_FUNC)common_main;
;;;462    
;;;463        /******** update otp here**********/
;;;464        //ram config
;;;465        OTP->appDataSize = APP_GLOBAL_SIZE;
;;;466        OTP->heapDataONSize = HEAP_DATA_ON_SIZE - DATA_SIZE_FOR_RANDOM_SEED;
;;;467    
;;;468        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;469    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;470        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
;;;471    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;472        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;473    #else
;;;474        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;475    #endif
;;;476    
;;;477        //sw timer config
;;;478    #ifdef TIMER_MAX_NUMBER
;;;479        //define TIMER_MAX_NUMBER in otp_config.h
;;;480        OTP->timerMaxNumber = TIMER_MAX_NUMBER;
;;;481    #endif
;;;482    
;;;483        //flash config
;;;484        /*config enable flash block proect depending on flash layout and flash id*/
;;;485    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;486        OTP->bp_enable = 1;
;;;487    #else
;;;488        OTP->bp_enable = 0;
;;;489    #endif
;;;490        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
;;;491    
;;;492    
;;;493        //os config
;;;494        /*config enable check task stack overflow*/
;;;495    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;496        OTP->checkForStackOverflow = 1;
;;;497    #else
;;;498        OTP->checkForStackOverflow = 0;
;;;499    #endif
;;;500    
;;;501    
;;;502        //platform config
;;;503        /*config enable platform assert*/
;;;504    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;505        OTP->enableASSERT = 1;
;;;506    #else
;;;507        OTP->enableASSERT = 0;
;;;508    #endif
;;;509    
;;;510        /*Print all log in log buffer before entering DLPS */
;;;511    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;512        OTP->printAllLogBeforeEnterDLPS = 1;
;;;513    #else
;;;514        OTP->printAllLogBeforeEnterDLPS = 0;
;;;515    #endif
;;;516    
;;;517        /*config enable log or not*/
;;;518    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;519        OTP->logDisable = 0;
;;;520    #else
;;;521        OTP->logDisable = 1;
;;;522    #endif
;;;523    
;;;524        /*config enable swd pinmux*/
;;;525    #if (SWD_PINMUX_ENABLE == 1)
;;;526        OTP->SWD_ENABLE = 1;
;;;527    #else
;;;528        OTP->SWD_ENABLE = 0;
;;;529    #endif
;;;530    
;;;531        /*config enable watch dog in rom*/
;;;532    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;533        OTP->wdgEnableInRom = 1;
;;;534    #else
;;;535        OTP->wdgEnableInRom = 0;
;;;536    #endif
;;;537    
;;;538        /*config watch dog mode in rom, defualt reset all*/
;;;539        OTP->wdgMode = ROM_WATCH_DOG_MODE;
;;;540    
;;;541        /*use os tick as log timestamp instead of TIM7*/
;;;542        OTP->log_timestamp_src = LOG_TIMESTAMP_OS;
;;;543    
;;;544    
;;;545        //app config
;;;546        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
;;;547        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
;;;548        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
;;;549        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
;;;550    
;;;551    #if ROM_OTA_LINKLOSS_RST
;;;552        OTP->ota_link_loss_reset = 1;
;;;553    #endif
;;;554        /*config bt stack parameters in rom*/
;;;555    #ifdef BT_STACK_CONFIG_ENABLE
;;;556        bt_stack_config_init();
;;;557    #endif
;;;558    
;;;559    //add more otp config here
;;;560    }
;;;561    
;;;562    //Note: call print_reset_reason() before ram_init();
;;;563    APP_FLASH_TEXT_SECTION
;;;564    void print_reset_reason(void)
;;;565    {
        0x0080e4aa:    b570        p.      PUSH     {r4-r6,lr}
;;;566        if (check_reset_ram.check_reset_ram_pattern != RESET_RAM_PATTERN)
        0x0080e4ac:    4d67        gM      LDR      r5,[pc,#412] ; [0x80e64c] = 0x20cf48
        0x0080e4ae:    4968        hI      LDR      r1,[pc,#416] ; [0x80e650] = 0x72657400
        0x0080e4b0:    4c68        hL      LDR      r4,[pc,#416] ; [0x80e654] = 0x21100302
        0x0080e4b2:    6828        (h      LDR      r0,[r5,#0]
;;; ..\..\..\inc\peripheral\rtl876x_wdg.h
;;;135        return (T_SW_RESET_REASON)flash_ioctl(flash_ioctl_get_aon_record_reset_reason, 0, 0);
        0x0080e4b4:    f04f0200    O...    MOV      r2,#0
        0x0080e4b8:    ebb12f00    .../    CMP      r1,r0,LSL #8
        0x0080e4bc:    d005        ..      BEQ      0x80e4ca ; print_reset_reason + 32
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;568            BOOT_PRINT_INFO0("RESET Reason: HW or OTA");
        0x0080e4be:    4620         F      MOV      r0,r4
        0x0080e4c0:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080e4c4:    4964        dI      LDR      r1,[pc,#400] ; [0x80e658] = 0x8800000
        0x0080e4c6:    f7f99aca    ....    B        log_buffer ; 0x7a5e
;;; ..\..\..\inc\peripheral\rtl876x_wdg.h
;;;135        return (T_SW_RESET_REASON)flash_ioctl(flash_ioctl_get_aon_record_reset_reason, 0, 0);
        0x0080e4ca:    2100        .!      MOVS     r1,#0
        0x0080e4cc:    f2450006    E...    MOV      r0,#0x5006
        0x0080e4d0:    f7fdddcf    ....    BL       flash_ioctl ; 0xc072
        0x0080e4d4:    f01003ff    ....    ANDS     r3,r0,#0xff
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;574            if (sw_reset_type != (T_SW_RESET_REASON)0)
        0x0080e4d8:    d003        ..      BEQ      0x80e4e2 ; print_reset_reason + 56
;;;575            {
;;;576                BOOT_PRINT_INFO1("RESET Reason: SW(reset except aon), TYPE 0x%x", sw_reset_type);
        0x0080e4da:    495f        _I      LDR      r1,[pc,#380] ; [0x80e658] = 0x8800000
        0x0080e4dc:    2201        ."      MOVS     r2,#1
        0x0080e4de:    311c        .1      ADDS     r1,r1,#0x1c
        0x0080e4e0:    e004        ..      B        0x80e4ec ; print_reset_reason + 66
;;;577            }
;;;578            else //reset all will clear aon register
;;;579            {
;;;580                BOOT_PRINT_INFO1("RESET Reason: SW(reset all), TYPE 0x%x", check_reset_ram.check_reset_ram_type);
        0x0080e4e2:    6828        (h      LDR      r0,[r5,#0]
        0x0080e4e4:    495c        \I      LDR      r1,[pc,#368] ; [0x80e658] = 0x8800000
        0x0080e4e6:    0e03        ..      LSRS     r3,r0,#24
        0x0080e4e8:    2201        ."      MOVS     r2,#1
        0x0080e4ea:    3150        P1      ADDS     r1,r1,#0x50
        0x0080e4ec:    4620         F      MOV      r0,r4
        0x0080e4ee:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080e4f2:    f7f99ab4    ....    B        log_buffer ; 0x7a5e
    pre_main
;;;581            }
;;;582        }
;;;583    }
;;;584    
;;;585    APP_FLASH_TEXT_SECTION
;;;586    void pre_main(void)
;;;587    {
        0x0080e4f6:    b538        8.      PUSH     {r3-r5,lr}
;;;588        __disable_irq();
        0x0080e4f8:    b672        r.      CPSID    i
;;;589    
;;;590        print_reset_reason();  //Note: call this function before ram_init();
        0x0080e4fa:    f7ffffd6    ....    BL       print_reset_reason ; 0x80e4aa
;;;591    
;;;592        ram_init();
        0x0080e4fe:    f7ffff87    ....    BL       ram_init ; 0x80e410
;;;593    
;;;594        random_seed_init();
        0x0080e502:    f7ffffa4    ....    BL       random_seed_init ; 0x80e44e
;;;595    
;;;596        load_overlay(OVERLAY_SCENARIO_BOOT_ONCE);
        0x0080e506:    2000        .       MOVS     r0,#0
        0x0080e508:    f5fdf03a    ..:.    BL       load_overlay ; 0x20b580
;;;597    
;;;598        //reset NVIC of DMA channel used in image decryption
;;;599        NVIC_DisableIRQ(GDMA0_Channel2_IRQn);
        0x0080e50c:    2016        .       MOVS     r0,#0x16
        0x0080e50e:    f5f9f4af    ....    BL       NVIC_DisableIRQ ; 0x207e70
;;;600        NVIC_DisableIRQ(GDMA0_Channel3_IRQn);
        0x0080e512:    2017        .       MOVS     r0,#0x17
        0x0080e514:    f5f9f4ac    ....    BL       NVIC_DisableIRQ ; 0x207e70
;;;601    
;;;602        setlocale(LC_ALL, "C");
        0x0080e518:    a150        P.      ADR      r1,{pc}+0x144 ; 0x80e65c
        0x0080e51a:    201f        .       MOVS     r0,#0x1f
        0x0080e51c:    f44bf46a    K.j.    BL       setlocale ; 0x59df4
;;;603    
;;;604        BOOT_PRINT_ERROR2("SDK Ver: %s, Build Time: %s",
        0x0080e520:    f04f5505    O..U    MOV      r5,#0x21400000
        0x0080e524:    a14e        N.      ADR      r1,{pc}+0x13c ; 0x80e660
        0x0080e526:    4628        (F      MOV      r0,r5
        0x0080e528:    f7f9dc9f    ....    BL       trace_string ; 0x7e6a
        0x0080e52c:    4604        .F      MOV      r4,r0
        0x0080e52e:    a153        S.      ADR      r1,{pc}+0x14e ; 0x80e67c
        0x0080e530:    4628        (F      MOV      r0,r5
        0x0080e532:    f7f9dc9a    ....    BL       trace_string ; 0x7e6a
        0x0080e536:    4603        .F      MOV      r3,r0
        0x0080e538:    4947        GI      LDR      r1,[pc,#284] ; [0x80e658] = 0x8800000
        0x0080e53a:    4846        FH      LDR      r0,[pc,#280] ; [0x80e654] = 0x21100302
        0x0080e53c:    2202        ."      MOVS     r2,#2
        0x0080e53e:    317c        |1      ADDS     r1,r1,#0x7c
        0x0080e540:    1e80        ..      SUBS     r0,r0,#2
        0x0080e542:    9400        ..      STR      r4,[sp,#0]
        0x0080e544:    f7f9da8b    ....    BL       log_buffer ; 0x7a5e
;;;605                          TRACE_STRING(VERSION_BUILD_STR),
;;;606                          TRACE_STRING(BUILDING_TIME));
;;;607    
;;;608        AppUpdateVectorTable();
        0x0080e548:    f5fef6d8    ....    BL       AppUpdateVectorTable ; 0x20d2fc
;;;609    
;;;610    #if (DEBUG_WATCHPOINT_ENABLE == 1)
;;;611        debug_monitor_enable();
;;;612    #endif
;;;613    
;;;614        if (app_pre_main_cb)
        0x0080e54c:    484d        MH      LDR      r0,[pc,#308] ; [0x80e684] = 0x20cfc4
        0x0080e54e:    6800        .h      LDR      r0,[r0,#0]
        0x0080e550:    2800        .(      CMP      r0,#0
        0x0080e552:    d003        ..      BEQ      0x80e55c ; pre_main + 102
;;;615        {
;;;616            app_pre_main_cb();
        0x0080e554:    b001        ..      ADD      sp,sp,#4
        0x0080e556:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x0080e55a:    4700        .G      BX       r0
;;;617        }
;;;618    
;;;619        return;
;;;620    }
        0x0080e55c:    bd38        8.      POP      {r3-r5,pc}
    SystemInit
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (451)
        0x0080e55e:    b510        ..      PUSH     {r4,lr}
;;;452        //hci mode check and bypass app
;;;453        if (check_hci_mode_flag())
        0x0080e560:    f7fed8fe    ....    BL       check_hci_mode_flag ; 0xc760
        0x0080e564:    2800        .(      CMP      r0,#0
        0x0080e566:    d14c        L.      BNE      0x80e602 ; SystemInit + 164
;;;454        {
;;;455            return;
;;;456        }
;;;457    
;;;458        //init pre_main and main functions
;;;459        extern void pre_main(void);
;;;460        app_pre_main = (APP_MAIN_FUNC)pre_main;
        0x0080e568:    f2af0075    ..u.    ADR      r0,{pc}-0x71 ; 0x80e4f7
        0x0080e56c:    4946        FI      LDR      r1,[pc,#280] ; [0x80e688] = 0x200c38
;;;461        app_main = (APP_MAIN_FUNC)common_main;
        0x0080e56e:    6008        .`      STR      r0,[r1,#0]
        0x0080e570:    4947        GI      LDR      r1,[pc,#284] ; [0x80e690] = 0x200c3c
        0x0080e572:    4846        FH      LDR      r0,[pc,#280] ; [0x80e68c] = 0x207d91
;;;462    
;;;463        /******** update otp here**********/
;;;464        //ram config
;;;465        OTP->appDataSize = APP_GLOBAL_SIZE;
        0x0080e574:    6008        .`      STR      r0,[r1,#0]
        0x0080e576:    f44f1000    O...    MOV      r0,#0x200000
        0x0080e57a:    f44f410c    O..A    MOV      r1,#0x8c00
;;;466        OTP->heapDataONSize = HEAP_DATA_ON_SIZE - DATA_SIZE_FOR_RANDOM_SEED;
        0x0080e57e:    f8c01384    ....    STR      r1,[r0,#0x384]
        0x0080e582:    f24771f0    G..q    MOV      r1,#0x77f0
;;;467    
;;;468        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;469    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;470        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
        0x0080e586:    f8c01388    ....    STR      r1,[r0,#0x388]
        0x0080e58a:    4942        BI      LDR      r1,[pc,#264] ; [0x80e694] = 0xa2aa0003
;;;471    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;472        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;473    #else
;;;474        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;475    #endif
;;;476    
;;;477        //sw timer config
;;;478    #ifdef TIMER_MAX_NUMBER
;;;479        //define TIMER_MAX_NUMBER in otp_config.h
;;;480        OTP->timerMaxNumber = TIMER_MAX_NUMBER;
;;;481    #endif
;;;482    
;;;483        //flash config
;;;484        /*config enable flash block proect depending on flash layout and flash id*/
;;;485    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;486        OTP->bp_enable = 1;
        0x0080e58c:    f8c013cc    ....    STR      r1,[r0,#0x3cc]
        0x0080e590:    f890134d    ..M.    LDRB     r1,[r0,#0x34d]
        0x0080e594:    f0410108    A...    ORR      r1,r1,#8
        0x0080e598:    f880134d    ..M.    STRB     r1,[r0,#0x34d]
;;;487    #else
;;;488        OTP->bp_enable = 0;
;;;489    #endif
;;;490        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
        0x0080e59c:    2106        .!      MOVS     r1,#6
        0x0080e59e:    f880134f    ..O.    STRB     r1,[r0,#0x34f]
;;;491    
;;;492    
;;;493        //os config
;;;494        /*config enable check task stack overflow*/
;;;495    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;496        OTP->checkForStackOverflow = 1;
        0x0080e5a2:    f8901378    ..x.    LDRB     r1,[r0,#0x378]
;;;497    #else
;;;498        OTP->checkForStackOverflow = 0;
;;;499    #endif
;;;500    
;;;501    
;;;502        //platform config
;;;503        /*config enable platform assert*/
;;;504    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;505        OTP->enableASSERT = 1;
;;;506    #else
;;;507        OTP->enableASSERT = 0;
;;;508    #endif
;;;509    
;;;510        /*Print all log in log buffer before entering DLPS */
;;;511    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;512        OTP->printAllLogBeforeEnterDLPS = 1;
        0x0080e5a6:    f0410126    A.&.    ORR      r1,r1,#0x26
        0x0080e5aa:    f8801378    ..x.    STRB     r1,[r0,#0x378]
;;;513    #else
;;;514        OTP->printAllLogBeforeEnterDLPS = 0;
;;;515    #endif
;;;516    
;;;517        /*config enable log or not*/
;;;518    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;519        OTP->logDisable = 0;
        0x0080e5ae:    f890139a    ....    LDRB     r1,[r0,#0x39a]
        0x0080e5b2:    f0210101    !...    BIC      r1,r1,#1
        0x0080e5b6:    f880139a    ....    STRB     r1,[r0,#0x39a]
;;;520    #else
;;;521        OTP->logDisable = 1;
;;;522    #endif
;;;523    
;;;524        /*config enable swd pinmux*/
;;;525    #if (SWD_PINMUX_ENABLE == 1)
;;;526        OTP->SWD_ENABLE = 1;
        0x0080e5ba:    f8901334    ..4.    LDRB     r1,[r0,#0x334]
        0x0080e5be:    f0410101    A...    ORR      r1,r1,#1
        0x0080e5c2:    f8801334    ..4.    STRB     r1,[r0,#0x334]
;;;527    #else
;;;528        OTP->SWD_ENABLE = 0;
;;;529    #endif
;;;530    
;;;531        /*config enable watch dog in rom*/
;;;532    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;533        OTP->wdgEnableInRom = 1;
;;;534    #else
;;;535        OTP->wdgEnableInRom = 0;
        0x0080e5c6:    f890137a    ..z.    LDRB     r1,[r0,#0x37a]
        0x0080e5ca:    f0210110    !...    BIC      r1,r1,#0x10
;;;536    #endif
;;;537    
;;;538        /*config watch dog mode in rom, defualt reset all*/
;;;539        OTP->wdgMode = ROM_WATCH_DOG_MODE;
        0x0080e5ce:    f04101c0    A...    ORR      r1,r1,#0xc0
        0x0080e5d2:    f880137a    ..z.    STRB     r1,[r0,#0x37a]
;;;540    
;;;541        /*use os tick as log timestamp instead of TIM7*/
;;;542        OTP->log_timestamp_src = LOG_TIMESTAMP_OS;
        0x0080e5d6:    f89013c3    ....    LDRB     r1,[r0,#0x3c3]
        0x0080e5da:    f02101c0    !...    BIC      r1,r1,#0xc0
        0x0080e5de:    f88013c3    ....    STRB     r1,[r0,#0x3c3]
;;;543    
;;;544    
;;;545        //app config
;;;546        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
        0x0080e5e2:    21f0        .!      MOVS     r1,#0xf0
        0x0080e5e4:    f8801320    .. .    STRB     r1,[r0,#0x320]
;;;547        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
        0x0080e5e8:    213c        <!      MOVS     r1,#0x3c
        0x0080e5ea:    f8801321    ..!.    STRB     r1,[r0,#0x321]
;;;548        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
        0x0080e5ee:    21c8        .!      MOVS     r1,#0xc8
        0x0080e5f0:    f8801322    ..".    STRB     r1,[r0,#0x322]
;;;549        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
        0x0080e5f4:    21ff        .!      MOVS     r1,#0xff
        0x0080e5f6:    f8801323    ..#.    STRB     r1,[r0,#0x323]
;;;550    
;;;551    #if ROM_OTA_LINKLOSS_RST
;;;552        OTP->ota_link_loss_reset = 1;
;;;553    #endif
;;;554        /*config bt stack parameters in rom*/
;;;555    #ifdef BT_STACK_CONFIG_ENABLE
;;;556        bt_stack_config_init();
        0x0080e5fa:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e5fe:    f000b84b    ..K.    B.W      bt_stack_config_init ; 0x80e698
;;;557    #endif
;;;558    
;;;559    //add more otp config here
;;;560    }
        0x0080e602:    bd10        ..      POP      {r4,pc}
    $d
        0x0080e604:    00005348    HS..    DCD    21320
        0x0080e608:    0080e870    p...    DCD    8448112
        0x0080e60c:    00207c00    .| .    DCD    2128896
        0x0080e610:    00000074    t...    DCD    116
        0x0080e614:    00813bb8    .;..    DCD    8469432
        0x0080e618:    0020cf48    H. .    DCD    2150216
        0x0080e61c:    00000340    @...    DCD    832
        0x0080e620:    0020cfbc    .. .    DCD    2150332
        0x0080e624:    00000af8    ....    DCD    2808
        0x0080e628:    00813cec    .<..    DCD    8469740
        0x0080e62c:    0021c000    ..!.    DCD    2211840
        0x0080e630:    00000000    ....    DCD    0
        0x0080e634:    008147e4    .G..    DCD    8472548
        0x0080e638:    0021caf8    ..!.    DCD    2214648
        0x0080e63c:    00000000    ....    DCD    0
        0x0080e640:    0021caf8    ..!.    DCD    2214648
        0x0080e644:    40058000    ...@    DCD    1074102272
        0x0080e648:    0020cfbc    .. .    DCD    2150332
        0x0080e64c:    0020cf48    H. .    DCD    2150216
        0x0080e650:    72657400    .ter    DCD    1919251456
        0x0080e654:    21100302    ...!    DCD    554697474
        0x0080e658:    08800000    ....    DCD    142606336
        0x0080e65c:    00000043    C...    DCD    67
        0x0080e660:    20697246    Fri     DCD    543781446
        0x0080e664:    20706553    Sep     DCD    544236883
        0x0080e668:    31203132    21 1    DCD    824193330
        0x0080e66c:    31303a33    3:01    DCD    825244211
        0x0080e670:    2037313a    :17     DCD    540487994
        0x0080e674:    38313032    2018    DCD    942747698
        0x0080e678:    00000000    ....    DCD    0
        0x0080e67c:    2e302e31    1.0.    DCD    774909489
        0x0080e680:    00302e32    2.0.    DCD    3157554
        0x0080e684:    0020cfc4    .. .    DCD    2150340
        0x0080e688:    00200c38    8. .    DCD    2100280
        0x0080e68c:    00207d91    .} .    DCD    2129297
        0x0080e690:    00200c3c    <. .    DCD    2100284
        0x0080e694:    a2aa0003    ....    DCD    2729050115
    $t
    .app.flash.text
    bt_stack_config_init
;;; ..\..\..\src\sample\ble_central\main.c
;;;64         gap_config_max_le_paired_device(APP_MAX_LINKS);
        0x0080e698:    2004        .       MOVS     r0,#4
        0x0080e69a:    f000b854    ..T.    B.W      gap_config_max_le_paired_device ; 0x80e746
        0x0080e69e:    0000        ..      MOVS     r0,r0
    .app.flash.text
    gap_config_bt_bd_addr
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (32)
        0x0080e6a0:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e6a4:    7802        .x      LDRB     r2,[r0,#0]
        0x0080e6a6:    f8812197    ...!    STRB     r2,[r1,#0x197]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (33)
        0x0080e6aa:    7842        Bx      LDRB     r2,[r0,#1]
        0x0080e6ac:    f8812198    ...!    STRB     r2,[r1,#0x198]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (34)
        0x0080e6b0:    7882        .x      LDRB     r2,[r0,#2]
        0x0080e6b2:    f8812199    ...!    STRB     r2,[r1,#0x199]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (35)
        0x0080e6b6:    78c2        .x      LDRB     r2,[r0,#3]
        0x0080e6b8:    f881219a    ...!    STRB     r2,[r1,#0x19a]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (36)
        0x0080e6bc:    7902        .y      LDRB     r2,[r0,#4]
        0x0080e6be:    f881219b    ...!    STRB     r2,[r1,#0x19b]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (37)
        0x0080e6c2:    7940        @y      LDRB     r0,[r0,#5]
        0x0080e6c4:    f881019c    ....    STRB     r0,[r1,#0x19c]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (38)
        0x0080e6c8:    4770        pG      BX       lr
    gap_config_ae_parameter
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (42)
        0x0080e6ca:    482a        *H      LDR      r0,[pc,#168] ; [0x80e774] = 0x200236
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (43)
        0x0080e6cc:    492a        *I      LDR      r1,[pc,#168] ; [0x80e778] = 0x10420c6
        0x0080e6ce:    6001        .`      STR      r1,[r0,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (44)
        0x0080e6d0:    4770        pG      BX       lr
    gap_config_cccd_not_check
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (49)
        0x0080e6d2:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e6d6:    f8d12314    ...#    LDR      r2,[r1,#0x314]
        0x0080e6da:    f3600241    `.A.    BFI      r2,r0,#1,#1
        0x0080e6de:    f8c12314    ...#    STR      r2,[r1,#0x314]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (61)
        0x0080e6e2:    4770        pG      BX       lr
    gap_config_le_min_rem_sca
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (67)
        0x0080e6e4:    f44f1300    O...    MOV      r3,#0x200000
        0x0080e6e8:    f8b322dc    ..."    LDRH     r2,[r3,#0x2dc]
        0x0080e6ec:    f3602208    `.."    BFI      r2,r0,#8,#1
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (68)
        0x0080e6f0:    f361224b    a.K"    BFI      r2,r1,#9,#3
        0x0080e6f4:    f8a322dc    ..."    STRH     r2,[r3,#0x2dc]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (69)
        0x0080e6f8:    4770        pG      BX       lr
    gap_config_bte_pool_size
        0x0080e6fa:    280a        .(      CMP      r0,#0xa
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (72)
        0x0080e6fc:    d902        ..      BLS      0x80e704 ; gap_config_bte_pool_size + 10
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (73)
        0x0080e6fe:    f44f5020    O. P    MOV      r0,#0x2800
        0x0080e702:    e000        ..      B        0x80e706 ; gap_config_bte_pool_size + 12
        0x0080e704:    0280        ..      LSLS     r0,r0,#10
        0x0080e706:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e70a:    f8c102e8    ....    STR      r0,[r1,#0x2e8]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (74)
        0x0080e70e:    4770        pG      BX       lr
    gap_config_bt_report_buf_num
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (78)
        0x0080e710:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e714:    f88102f1    ....    STRB     r0,[r1,#0x2f1]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (79)
        0x0080e718:    4770        pG      BX       lr
    gap_config_ccc_bits_count
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (84)
        0x0080e71a:    f44f1200    O...    MOV      r2,#0x200000
        0x0080e71e:    f8820310    ....    STRB     r0,[r2,#0x310]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (85)
        0x0080e722:    f8821325    ..%.    STRB     r1,[r2,#0x325]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (86)
        0x0080e726:    4770        pG      BX       lr
    gap_config_max_attribute_table_count
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (91)
        0x0080e728:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e72c:    f8810311    ....    STRB     r0,[r1,#0x311]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (92)
        0x0080e730:    4770        pG      BX       lr
    gap_config_max_mtu_size
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (96)
        0x0080e732:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e736:    f8a10312    ....    STRH     r0,[r1,#0x312]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (97)
        0x0080e73a:    4770        pG      BX       lr
    gap_config_le_key_storage_flag
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (101)
        0x0080e73c:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e740:    f8a10326    ..&.    STRH     r0,[r1,#0x326]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (102)
        0x0080e744:    4770        pG      BX       lr
    gap_config_max_le_paired_device
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (106)
        0x0080e746:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e74a:    f881032f    ../.    STRB     r0,[r1,#0x32f]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (107)
        0x0080e74e:    4770        pG      BX       lr
    gap_config_bqb_en
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (132)
        0x0080e750:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e754:    f8b122dc    ..."    LDRH     r2,[r1,#0x2dc]
        0x0080e758:    f3600241    `.A.    BFI      r2,r0,#1,#1
        0x0080e75c:    f8a122dc    ..."    STRH     r2,[r1,#0x2dc]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (133)
        0x0080e760:    4770        pG      BX       lr
    gap_config_l2c_param
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (138)
        0x0080e762:    f44f1300    O...    MOV      r3,#0x200000
        0x0080e766:    f88302fd    ....    STRB     r0,[r3,#0x2fd]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (139)
        0x0080e76a:    f883130e    ....    STRB     r1,[r3,#0x30e]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (140)
        0x0080e76e:    f883232e    ...#    STRB     r2,[r3,#0x32e]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (141)
        0x0080e772:    4770        pG      BX       lr
    $d
        0x0080e774:    00200236    6. .    DCD    2097718
        0x0080e778:    010420c6    . ..    DCD    17047750

** Section #4 'RAM_VECTOR_TABLE' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 244 bytes (alignment 4)
    Address: 0x00200000

    0x200000:   00 38 20 00 01 e4 80 00 41 7d 20 00 41 7d 20 00    .8 .....A} .A} .
    0x200010:   41 7d 20 00 41 7d 20 00 41 7d 20 00 00 00 00 00    A} .A} .A} .....
    0x200020:   00 00 00 00 00 00 00 00 00 00 00 00 41 7d 20 00    ............A} .
    0x200030:   41 7d 20 00 00 00 00 00 41 7d 20 00 41 7d 20 00    A} .....A} .A} .
    0x200040:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x200050:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x200060:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x200070:   15 ad 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    .. .A} .A} .A} .
    0x200080:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x200090:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x2000a0:   41 7d 20 00 41 7d 20 00 1d 7c 20 00 69 7c 20 00    A} .A} ..| .i| .
    0x2000b0:   41 7d 20 00 b5 7c 20 00 f9 7c 20 00 41 7d 20 00    A} ..| ..| .A} .
    0x2000c0:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x2000d0:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x2000e0:   41 7d 20 00 41 7d 20 00 41 7d 20 00 41 7d 20 00    A} .A} .A} .A} .
    0x2000f0:   41 7d 20 00                                        A} .

    __Vectors_End

** Section #5 'RAM_DATA_ON' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 21320 bytes (alignment 4)
    Address: 0x00207c00

    $t
    .ARM.Collect$$_printf_percent$$00000009
    .ARM.Collect$$_printf_percent$$00000000
    _printf_d
    _printf_percent
        0x00207c00:    2964        d)      CMP      r1,#0x64
        0x00207c02:    f0148457    ..W.    BEQ.W    _printf_int_dec ; 0x21c4b4
    .ARM.Collect$$_printf_percent$$0000000C
    _printf_x
        0x00207c06:    2978        x)      CMP      r1,#0x78
        0x00207c08:    f004803e    ..>.    BEQ.W    _printf_int_hex ; 0x20bc88
    .ARM.Collect$$_printf_percent$$00000017
    _printf_percent_end
        0x00207c0c:    2000        .       MOVS     r0,#0
        0x00207c0e:    4770        pG      BX       lr
    .ARM.Collect$$libinit$$00000000
    __rt_lib_init
        0x00207c10:    b51f        ..      PUSH     {r0-r4,lr}
    .ARM.Collect$$libinit$$00000001
    __rt_lib_init_fp_1
        0x00207c12:    f004f8e3    ....    BL       _fp_init ; 0x20bddc
    .ARM.Collect$$libinit$$00000004
    .ARM.Collect$$libinit$$0000000A
    .ARM.Collect$$libinit$$0000000C
    .ARM.Collect$$libinit$$0000000D
    __rt_lib_init_heap_1
    __rt_lib_init_preinit_1
    __rt_lib_init_rand_2
    __rt_lib_init_user_alloc_1
        0x00207c16:    f004f878    ..x.    BL       _rand_init ; 0x20bd0a
    .ARM.Collect$$libinit$$0000000E
    .ARM.Collect$$libinit$$00000011
    .ARM.Collect$$libinit$$00000013
    .ARM.Collect$$libinit$$00000015
    .ARM.Collect$$libinit$$00000017
    .ARM.Collect$$libinit$$00000019
    .ARM.Collect$$libinit$$0000001B
    .ARM.Collect$$libinit$$0000001D
    .ARM.Collect$$libinit$$0000001F
    .ARM.Collect$$libinit$$00000021
    .ARM.Collect$$libinit$$00000023
    .ARM.Collect$$libinit$$00000025
    .ARM.Collect$$libinit$$0000002C
    .ARM.Collect$$libinit$$0000002E
    .ARM.Collect$$libinit$$00000030
    .ARM.Collect$$libinit$$00000032
    .ARM.Collect$$libinit$$00000033
    __rt_lib_init_alloca_1
    __rt_lib_init_argv_1
    __rt_lib_init_atexit_1
    __rt_lib_init_clock_1
    __rt_lib_init_cpp_1
    __rt_lib_init_exceptions_1
    __rt_lib_init_fp_trap_1
    __rt_lib_init_getenv_1
    __rt_lib_init_lc_collate_1
    __rt_lib_init_lc_ctype_1
    __rt_lib_init_lc_monetary_1
    __rt_lib_init_lc_numeric_1
    __rt_lib_init_lc_time_1
    __rt_lib_init_rand_1
    __rt_lib_init_return
    __rt_lib_init_signal_1
    __rt_lib_init_stdio_1
        0x00207c1a:    bd1f        ..      POP      {r0-r4,pc}
    .ram.dataon.data
    GPIO_Group3_Handler
;;;691        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207c1c:    4847        GH      LDR      r0,[pc,#284] ; [0x207d3c] = 0x40001000
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (690)
        0x00207c1e:    b510        ..      PUSH     {r4,lr}
        0x00207c20:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207c22:    0720         .      LSLS     r0,r4,#28
        0x00207c24:    d501        ..      BPL      0x207c2a ; GPIO_Group3_Handler + 14
;;;691        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;692    
;;;693        //Check exact IRQ function
;;;694        if (GPIOIrqStatus & BIT3)
;;;695        {
;;;696            GPIO3_Handler();
        0x00207c26:    f000f88b    ....    BL       ADC_Handler ; 0x207d40
;;;697        }
;;;698        if (GPIOIrqStatus & BIT7)
        0x00207c2a:    0620         .      LSLS     r0,r4,#24
        0x00207c2c:    d501        ..      BPL      0x207c32 ; GPIO_Group3_Handler + 22
;;;699        {
;;;700            GPIO7_Handler();
        0x00207c2e:    f000f887    ....    BL       ADC_Handler ; 0x207d40
;;;701        }
;;;702        if (GPIOIrqStatus & BIT11)
        0x00207c32:    0520         .      LSLS     r0,r4,#20
        0x00207c34:    d501        ..      BPL      0x207c3a ; GPIO_Group3_Handler + 30
;;;703        {
;;;704            GPIO11_Handler();
        0x00207c36:    f000f883    ....    BL       ADC_Handler ; 0x207d40
;;;705        }
;;;706        if (GPIOIrqStatus & BIT15)
        0x00207c3a:    0420         .      LSLS     r0,r4,#16
        0x00207c3c:    d501        ..      BPL      0x207c42 ; GPIO_Group3_Handler + 38
;;;707        {
;;;708            GPIO15_Handler();
        0x00207c3e:    f000f87f    ....    BL       ADC_Handler ; 0x207d40
;;;709        }
;;;710        if (GPIOIrqStatus & BIT19)
        0x00207c42:    0320         .      LSLS     r0,r4,#12
        0x00207c44:    d501        ..      BPL      0x207c4a ; GPIO_Group3_Handler + 46
;;;711        {
;;;712            GPIO19_Handler();
        0x00207c46:    f000f87b    ..{.    BL       ADC_Handler ; 0x207d40
;;;713        }
;;;714        if (GPIOIrqStatus & BIT23)
        0x00207c4a:    0220         .      LSLS     r0,r4,#8
        0x00207c4c:    d501        ..      BPL      0x207c52 ; GPIO_Group3_Handler + 54
;;;715        {
;;;716            GPIO23_Handler();
        0x00207c4e:    f000f877    ..w.    BL       ADC_Handler ; 0x207d40
;;;717        }
;;;718        if (GPIOIrqStatus & BIT27)
        0x00207c52:    0120         .      LSLS     r0,r4,#4
        0x00207c54:    d501        ..      BPL      0x207c5a ; GPIO_Group3_Handler + 62
;;;719        {
;;;720            GPIO27_Handler();
        0x00207c56:    f000f873    ..s.    BL       ADC_Handler ; 0x207d40
;;;721        }
;;;722        if (GPIOIrqStatus & BIT31)
        0x00207c5a:    2c00        .,      CMP      r4,#0
        0x00207c5c:    da03        ..      BGE      0x207c66 ; GPIO_Group3_Handler + 74
;;;723        {
;;;724            GPIO31_Handler();
        0x00207c5e:    e8bd4010    ...@    POP      {r4,lr}
        0x00207c62:    f000b86d    ..m.    B.W      ADC_Handler ; 0x207d40
;;;725        }
;;;726    }
        0x00207c66:    bd10        ..      POP      {r4,pc}
    GPIO_Group2_Handler
;;;727    /**
;;;728     * @brief  GPIO Group2 Handler
;;;729     * @param  none
;;;730     * @return none
;;;731      */
;;;732    DATA_RAM_FUNCTION void GPIO_Group2_Handler(void)
;;;733    {
;;;734        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207c68:    4834        4H      LDR      r0,[pc,#208] ; [0x207d3c] = 0x40001000
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (733)
        0x00207c6a:    b510        ..      PUSH     {r4,lr}
        0x00207c6c:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207c6e:    0760        `.      LSLS     r0,r4,#29
        0x00207c70:    d501        ..      BPL      0x207c76 ; GPIO_Group2_Handler + 14
;;;734        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;735    
;;;736        //Check exact IRQ function
;;;737        if (GPIOIrqStatus & BIT2)
;;;738        {
;;;739            GPIO2_Handler();
        0x00207c72:    f000f865    ..e.    BL       ADC_Handler ; 0x207d40
;;;740        }
;;;741        if (GPIOIrqStatus & BIT6)
        0x00207c76:    0660        `.      LSLS     r0,r4,#25
        0x00207c78:    d501        ..      BPL      0x207c7e ; GPIO_Group2_Handler + 22
;;;742        {
;;;743            GPIO6_Handler();
        0x00207c7a:    f000f861    ..a.    BL       ADC_Handler ; 0x207d40
;;;744        }
;;;745        if (GPIOIrqStatus & BIT10)
        0x00207c7e:    0560        `.      LSLS     r0,r4,#21
        0x00207c80:    d501        ..      BPL      0x207c86 ; GPIO_Group2_Handler + 30
;;;746        {
;;;747            GPIO10_Handler();
        0x00207c82:    f000f85d    ..].    BL       ADC_Handler ; 0x207d40
;;;748        }
;;;749        if (GPIOIrqStatus & BIT14)
        0x00207c86:    0460        `.      LSLS     r0,r4,#17
        0x00207c88:    d501        ..      BPL      0x207c8e ; GPIO_Group2_Handler + 38
;;;750        {
;;;751            GPIO14_Handler();
        0x00207c8a:    f000f859    ..Y.    BL       ADC_Handler ; 0x207d40
;;;752        }
;;;753        if (GPIOIrqStatus & BIT18)
        0x00207c8e:    0360        `.      LSLS     r0,r4,#13
        0x00207c90:    d501        ..      BPL      0x207c96 ; GPIO_Group2_Handler + 46
;;;754        {
;;;755            GPIO18_Handler();
        0x00207c92:    f000f855    ..U.    BL       ADC_Handler ; 0x207d40
;;;756        }
;;;757        if (GPIOIrqStatus & BIT22)
        0x00207c96:    0260        `.      LSLS     r0,r4,#9
        0x00207c98:    d501        ..      BPL      0x207c9e ; GPIO_Group2_Handler + 54
;;;758        {
;;;759            GPIO22_Handler();
        0x00207c9a:    f000f851    ..Q.    BL       ADC_Handler ; 0x207d40
;;;760        }
;;;761        if (GPIOIrqStatus & BIT26)
        0x00207c9e:    0160        `.      LSLS     r0,r4,#5
        0x00207ca0:    d501        ..      BPL      0x207ca6 ; GPIO_Group2_Handler + 62
;;;762        {
;;;763            GPIO26_Handler();
        0x00207ca2:    f000f84d    ..M.    BL       ADC_Handler ; 0x207d40
;;;764        }
;;;765        if (GPIOIrqStatus & BIT30)
        0x00207ca6:    0060        `.      LSLS     r0,r4,#1
        0x00207ca8:    d503        ..      BPL      0x207cb2 ; GPIO_Group2_Handler + 74
;;;766        {
;;;767            GPIO30_Handler();
        0x00207caa:    e8bd4010    ...@    POP      {r4,lr}
        0x00207cae:    f000b847    ..G.    B.W      ADC_Handler ; 0x207d40
;;;768        }
;;;769    }
        0x00207cb2:    bd10        ..      POP      {r4,pc}
    GPIO_Group1_Handler
;;;770    /**
;;;771     * @brief  GPIO Group1 Handler
;;;772     * @param  none
;;;773     * @return none
;;;774      */
;;;775    DATA_RAM_FUNCTION void GPIO_Group1_Handler(void)
;;;776    {
;;;777        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207cb4:    4821        !H      LDR      r0,[pc,#132] ; [0x207d3c] = 0x40001000
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (776)
        0x00207cb6:    b510        ..      PUSH     {r4,lr}
        0x00207cb8:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207cba:    07a0        ..      LSLS     r0,r4,#30
        0x00207cbc:    d501        ..      BPL      0x207cc2 ; GPIO_Group1_Handler + 14
;;;777        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;778    
;;;779        //Check exact IRQ function
;;;780        if (GPIOIrqStatus & BIT1)
;;;781        {
;;;782            GPIO1_Handler();
        0x00207cbe:    f000f83f    ..?.    BL       ADC_Handler ; 0x207d40
;;;783        }
;;;784        if (GPIOIrqStatus & BIT9)
        0x00207cc2:    05a0        ..      LSLS     r0,r4,#22
        0x00207cc4:    d501        ..      BPL      0x207cca ; GPIO_Group1_Handler + 22
;;;785        {
;;;786            GPIO9_Handler();
        0x00207cc6:    f000f83b    ..;.    BL       ADC_Handler ; 0x207d40
;;;787        }
;;;788        if (GPIOIrqStatus & BIT13)
        0x00207cca:    04a0        ..      LSLS     r0,r4,#18
        0x00207ccc:    d501        ..      BPL      0x207cd2 ; GPIO_Group1_Handler + 30
;;;789        {
;;;790            GPIO13_Handler();
        0x00207cce:    f000f837    ..7.    BL       ADC_Handler ; 0x207d40
;;;791        }
;;;792        if (GPIOIrqStatus & BIT17)
        0x00207cd2:    03a0        ..      LSLS     r0,r4,#14
        0x00207cd4:    d501        ..      BPL      0x207cda ; GPIO_Group1_Handler + 38
;;;793        {
;;;794            GPIO17_Handler();
        0x00207cd6:    f000f833    ..3.    BL       ADC_Handler ; 0x207d40
;;;795        }
;;;796        if (GPIOIrqStatus & BIT21)
        0x00207cda:    02a0        ..      LSLS     r0,r4,#10
        0x00207cdc:    d501        ..      BPL      0x207ce2 ; GPIO_Group1_Handler + 46
;;;797        {
;;;798            GPIO21_Handler();
        0x00207cde:    f000f82f    ../.    BL       ADC_Handler ; 0x207d40
;;;799        }
;;;800        if (GPIOIrqStatus & BIT25)
        0x00207ce2:    01a0        ..      LSLS     r0,r4,#6
        0x00207ce4:    d501        ..      BPL      0x207cea ; GPIO_Group1_Handler + 54
;;;801        {
;;;802            GPIO25_Handler();
        0x00207ce6:    f000f82b    ..+.    BL       ADC_Handler ; 0x207d40
;;;803        }
;;;804        if (GPIOIrqStatus & BIT29)
        0x00207cea:    00a0        ..      LSLS     r0,r4,#2
        0x00207cec:    d503        ..      BPL      0x207cf6 ; GPIO_Group1_Handler + 66
;;;805        {
;;;806            GPIO29_Handler();
        0x00207cee:    e8bd4010    ...@    POP      {r4,lr}
        0x00207cf2:    f000b825    ..%.    B.W      ADC_Handler ; 0x207d40
;;;807        }
;;;808    }
        0x00207cf6:    bd10        ..      POP      {r4,pc}
    GPIO_Group0_Handler
;;;809    /**
;;;810     * @brief  GPIO Group0 Handler
;;;811     * @param  none
;;;812     * @return none
;;;813      */
;;;814    DATA_RAM_FUNCTION void GPIO_Group0_Handler(void)
;;;815    {
;;;816        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207cf8:    4810        .H      LDR      r0,[pc,#64] ; [0x207d3c] = 0x40001000
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (815)
        0x00207cfa:    b510        ..      PUSH     {r4,lr}
        0x00207cfc:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207cfe:    07e0        ..      LSLS     r0,r4,#31
        0x00207d00:    d001        ..      BEQ      0x207d06 ; GPIO_Group0_Handler + 14
;;;816        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;817    
;;;818        //Check exact IRQ function
;;;819        if (GPIOIrqStatus & BIT0)
;;;820        {
;;;821            GPIO0_Handler();
        0x00207d02:    f000f81d    ....    BL       ADC_Handler ; 0x207d40
;;;822        }
;;;823        if (GPIOIrqStatus & BIT8)
        0x00207d06:    05e0        ..      LSLS     r0,r4,#23
        0x00207d08:    d501        ..      BPL      0x207d0e ; GPIO_Group0_Handler + 22
;;;824        {
;;;825            GPIO8_Handler();
        0x00207d0a:    f000f819    ....    BL       ADC_Handler ; 0x207d40
;;;826        }
;;;827        if (GPIOIrqStatus & BIT12)
        0x00207d0e:    04e0        ..      LSLS     r0,r4,#19
        0x00207d10:    d501        ..      BPL      0x207d16 ; GPIO_Group0_Handler + 30
;;;828        {
;;;829            GPIO12_Handler();
        0x00207d12:    f000f815    ....    BL       ADC_Handler ; 0x207d40
;;;830        }
;;;831        if (GPIOIrqStatus & BIT16)
        0x00207d16:    03e0        ..      LSLS     r0,r4,#15
        0x00207d18:    d501        ..      BPL      0x207d1e ; GPIO_Group0_Handler + 38
;;;832        {
;;;833            GPIO16_Handler();
        0x00207d1a:    f000f811    ....    BL       ADC_Handler ; 0x207d40
;;;834        }
;;;835        if (GPIOIrqStatus & BIT20)
        0x00207d1e:    02e0        ..      LSLS     r0,r4,#11
        0x00207d20:    d501        ..      BPL      0x207d26 ; GPIO_Group0_Handler + 46
;;;836        {
;;;837            GPIO20_Handler();
        0x00207d22:    f000f80d    ....    BL       ADC_Handler ; 0x207d40
;;;838        }
;;;839        if (GPIOIrqStatus & BIT24)
        0x00207d26:    01e0        ..      LSLS     r0,r4,#7
        0x00207d28:    d501        ..      BPL      0x207d2e ; GPIO_Group0_Handler + 54
;;;840        {
;;;841            GPIO24_Handler();
        0x00207d2a:    f000f809    ....    BL       ADC_Handler ; 0x207d40
;;;842        }
;;;843        if (GPIOIrqStatus & BIT28)
        0x00207d2e:    00e0        ..      LSLS     r0,r4,#3
        0x00207d30:    d503        ..      BPL      0x207d3a ; GPIO_Group0_Handler + 66
;;;844        {
;;;845            GPIO28_Handler();
        0x00207d32:    e8bd4010    ...@    POP      {r4,lr}
        0x00207d36:    f000b803    ....    B.W      ADC_Handler ; 0x207d40
;;;846        }
;;;847    }
        0x00207d3a:    bd10        ..      POP      {r4,pc}
    $d
        0x00207d3c:    40001000    ...@    DCD    1073745920
    $t
    .text
    $v0
    ADC_Handler
    BTMAC_Handler
    BusFault_Handler
    DebugMon_Handler
    Default_Handler
    GDMA0_Channel0_Handler
    GDMA0_Channel1_Handler
    GDMA0_Channel2_Handler
    GDMA0_Channel3_Handler
    GDMA0_Channel4_Handler
    GDMA0_Channel5_Handler
    GPIO0_Handler
    GPIO10_Handler
    GPIO11_Handler
    GPIO12_Handler
    GPIO13_Handler
    GPIO14_Handler
    GPIO15_Handler
    GPIO16_Handler
    GPIO17_Handler
    GPIO18_Handler
    GPIO19_Handler
    GPIO1_Handler
    GPIO20_Handler
    GPIO21_Handler
    GPIO22_Handler
    GPIO23_Handler
    GPIO24_Handler
    GPIO25_Handler
    GPIO26_Handler
    GPIO27_Handler
    GPIO28_Handler
    GPIO29_Handler
    GPIO2_Handler
    GPIO30_Handler
    GPIO31_Handler
    GPIO3_Handler
    GPIO4_Handler
    GPIO5_Handler
    GPIO6_Handler
    GPIO7_Handler
    GPIO8_Handler
    GPIO9_Handler
    HardFault_Handler
    I2C0_Handler
    I2C1_Handler
    I2S0_RX_Handler
    I2S0_TX_Handler
    I2S1_RX_Handler
    I2S1_TX_Handler
    IR_Handler
    Keyscan_Handler
    LCD_Handler
    LPCOMP_Handler
    MemManage_Handler
    NMI_Handler
    PTA_Mailbox_Handler
    PendSV_Handler
    Peripheral_Handler
    Qdecode_Handler
    RTC_Handler
    SPI0_Handler
    SPI1_Handler
    SPI2W_Handler
    SPI_Flash_Handler
    SVC_Handler
    SysTick_Handler
    System_Handler
    Timer2_Handler
    Timer3_Handler
    Timer4_7_Handler
    Timer4_Handler
    Timer5_Handler
    Timer6_Handler
    Timer7_Handler
    UART1_Handler
    UART2_Handler
    UsageFault_Handler
    WDG_Handler
;;; ..\\..\\..\\src\\mcu\\rtl876x\\arm\\startup_rtl8762c.s
;;;276                    LDR    R0, =0x20000000
        0x00207d40:    f04f5000    O..P    MOV      r0,#0x20000000
;;;277                    LDR    R1, =DEFAULT_HANDLER_TXT
        0x00207d44:    4910        .I      LDR      r1,[pc,#64] ; [0x207d88] = 0x207d52
;;;278                    MRS    R2, IPSR
        0x00207d46:    f3ef8205    ....    MRS      r2,IPSR
;;;279                    LDR    R3, =log_direct
        0x00207d4a:    4b10        .K      LDR      r3,[pc,#64] ; [0x207d8c] = 0x79b1
;;;280                    BLX    R3
        0x00207d4c:    4798        .G      BLX      r3
;;;281                    B      .
        0x00207d4e:    e7fe        ..      B        0x207d4e ; ADC_Handler + 14
    __user_setup_stackheap
;;;282    
;;;283                    ENDP
;;;284    
;;;285    
;;;286    ; User Initial Stack
;;;287                    EXPORT  __user_setup_stackheap
;;;288    __user_setup_stackheap PROC
;;;289                    BX      LR
        0x00207d50:    4770        pG      BX       lr
    $d
    DEFAULT_HANDLER_TXT
        0x00207d52:    7245        Er      DCW    29253
        0x00207d54:    21726f72    ror!    DCD    561147762
        0x00207d58:    656c5020     Ple    DCD    1701597216
        0x00207d5c:    20657361    ase     DCD    543519585
        0x00207d60:    6c706d69    impl    DCD    1819307369
        0x00207d64:    6e656d65    emen    DCD    1852140901
        0x00207d68:    6f792074    t yo    DCD    1870209140
        0x00207d6c:    49207275    ur I    DCD    1226863221
        0x00207d70:    48205253    SR H    DCD    1210077779
        0x00207d74:    6c646e61    andl    DCD    1818521185
        0x00207d78:    66207265    er f    DCD    1713402469
        0x00207d7c:    4920726f    or I    DCD    1226863215
        0x00207d80:    25205152    RQ %    DCD    622874962
        0x00207d84:    000a2164    d!..    DCD    663908
        0x00207d88:    00207d52    R} .    DCD    2129234
        0x00207d8c:    000079b1    .y..    DCD    31153
    $t
    .text
    common_main
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;304    {
        0x00207d90:    b510        ..      PUSH     {r4,lr}
;;;305    //add common system code here before enter user defined main function
;;;306        OTP->run_in_app = 1;
        0x00207d92:    f44f1400    O...    MOV      r4,#0x200000
        0x00207d96:    f894039b    ....    LDRB     r0,[r4,#0x39b]
        0x00207d9a:    f0400080    @...    ORR      r0,r0,#0x80
        0x00207d9e:    f884039b    ....    STRB     r0,[r4,#0x39b]
;;;307    
;;;308    #if (RUN_APP_IN_HCIMODE_ENABLE == 0)
;;;309        if (OTP->stack_en)
        0x00207da2:    f89402dc    ....    LDRB     r0,[r4,#0x2dc]
        0x00207da6:    07c1        ..      LSLS     r1,r0,#31
;;;310        {
;;;311            DBG_DIRECT("In SoC Mode");
        0x00207da8:    f04f5004    O..P    MOV      r0,#0x21000000
        0x00207dac:    d003        ..      BEQ      0x207db6 ; common_main + 38
        0x00207dae:    a136        6.      ADR      r1,{pc}+0xda ; 0x207e88
        0x00207db0:    f5fffdfe    ....    BL       log_direct ; 0x79b0
        0x00207db4:    e006        ..      B        0x207dc4 ; common_main + 52
;;;312        }
;;;313        else
;;;314        {
;;;315            DBG_DIRECT("WARNING: In HCI Mode, will not run APP Task");
        0x00207db6:    a137        7.      ADR      r1,{pc}+0xde ; 0x207e94
        0x00207db8:    f5fffdfa    ....    BL       log_direct ; 0x79b0
;;;316            WDG_Disable();
        0x00207dbc:    f609fdc1    ....    BL       WDG_Disable ; 0x11942
;;;317            os_sched_start();
        0x00207dc0:    f61efcff    ....    BL       os_sched_start ; 0x267c2
;;;318        }
;;;319    #endif
;;;320    
;;;321        //fix system hang if app call log_module_trace_set after enable RELEASE_VERSION
;;;322        if (OTP->logDisable == 1)
        0x00207dc4:    f894039a    ....    LDRB     r0,[r4,#0x39a]
        0x00207dc8:    07c0        ..      LSLS     r0,r0,#31
        0x00207dca:    d002        ..      BEQ      0x207dd2 ; common_main + 66
;;;323        {
;;;324            log_module_trace_init(NULL);
        0x00207dcc:    2000        .       MOVS     r0,#0
        0x00207dce:    f600fa01    ....    BL       log_module_trace_init ; 0x81d4
;;;325        }
;;;326    
;;;327    #if (SYSTEM_TRACE_ENABLE == 1)
;;;328        extern void system_trace_init(void);
;;;329        system_trace_init();
;;;330    #endif
;;;331    
;;;332        extern int __main(void);
;;;333        __main();
        0x00207dd2:    e8bd4010    ...@    POP      {r4,lr}
        0x00207dd6:    f206b317    ....    B.W      __main ; 0x80e408
    WDG_SystemReset
;;;334    }
;;;335    
;;;336    #if (DEBUG_WATCHPOINT_ENABLE == 1)
;;;337    /**
;;;338     * @brief  Enable Debug Monitor Function (include NVIC Enable and DWT configuration)
;;;339     * @param  none
;;;340     * @return none
;;;341     */
;;;342    
;;;343    DATA_RAM_FUNCTION
;;;344    void debug_monitor_enable(void)
;;;345    {
;;;346        //DBG_DIRECT("debug_monitor_enable");
;;;347    
;;;348        //set debug monitor priority
;;;349        NVIC_SetPriority(DebugMonitor_IRQn, 3);
;;;350    
;;;351        //enable exception and monitor control register
;;;352        CoreDebug->DEMCR |= CoreDebug_DEMCR_MON_EN_Msk | CoreDebug_DEMCR_TRCENA_Msk;
;;;353    
;;;354        //set DWT compare registers (max 4 comparators)
;;;355        //watch_point_0_setting(0x1000180C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_WRITE);
;;;356        //watch_point_1_setting(0x10000004, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;357        //watch_point_2_setting(0x10000008, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;358        //watch_point_3_setting(0x1000000C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;359    
;;;360        //enable DWT control register
;;;361        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
;;;362    
;;;363        return;
;;;364    }
;;;365    #endif
;;;366    
;;;367    APP_FLASH_TEXT_SECTION
;;;368    void ram_init(void)
;;;369    {
;;;370        //copy data on ro
;;;371        extern char Image$$RAM_DATA_ON$$RO$$Base[];
;;;372        extern char Load$$RAM_DATA_ON$$RO$$Base[];
;;;373        extern unsigned int Image$$RAM_DATA_ON$$RO$$Length;
;;;374    
;;;375        memcpy(Image$$RAM_DATA_ON$$RO$$Base,
;;;376               Load$$RAM_DATA_ON$$RO$$Base,
;;;377               (unsigned int)&Image$$RAM_DATA_ON$$RO$$Length);
;;;378    
;;;379        //copy data on rw
;;;380        extern char Image$$RAM_DATA_ON$$RW$$Base[];
;;;381        extern char Load$$RAM_DATA_ON$$RW$$Base[];
;;;382        extern unsigned int Image$$RAM_DATA_ON$$RW$$Length;
;;;383    
;;;384        memcpy(Image$$RAM_DATA_ON$$RW$$Base,
;;;385               Load$$RAM_DATA_ON$$RW$$Base,
;;;386               (unsigned int)&Image$$RAM_DATA_ON$$RW$$Length);
;;;387    
;;;388        //clear data on zi
;;;389        extern char Image$$RAM_DATA_ON$$ZI$$Base[];
;;;390        extern unsigned int Image$$RAM_DATA_ON$$ZI$$Length;
;;;391    
;;;392        memset(Image$$RAM_DATA_ON$$ZI$$Base,
;;;393               0,
;;;394               (unsigned int)&Image$$RAM_DATA_ON$$ZI$$Length);
;;;395    
;;;396        //copy cache ro
;;;397        extern char Image$$CACHE_DATA_ON$$RO$$Base[];
;;;398        extern char Load$$CACHE_DATA_ON$$RO$$Base[];
;;;399        extern unsigned int Image$$CACHE_DATA_ON$$RO$$Length;
;;;400    
;;;401        memcpy(Image$$CACHE_DATA_ON$$RO$$Base,
;;;402               Load$$CACHE_DATA_ON$$RO$$Base,
;;;403               (unsigned int)&Image$$CACHE_DATA_ON$$RO$$Length);
;;;404    
;;;405        //copy share cache ram rw
;;;406        extern char Image$$CACHE_DATA_ON$$RW$$Base[];
;;;407        extern char Load$$CACHE_DATA_ON$$RW$$Base[];
;;;408        extern unsigned int Image$$CACHE_DATA_ON$$RW$$Length;
;;;409    
;;;410        memcpy(Image$$CACHE_DATA_ON$$RW$$Base,
;;;411               Load$$CACHE_DATA_ON$$RW$$Base,
;;;412               (unsigned int)&Image$$CACHE_DATA_ON$$RW$$Length);
;;;413    
;;;414        //clear share cache ram zi
;;;415        extern char Image$$CACHE_DATA_ON$$ZI$$Base[];
;;;416        extern unsigned int Image$$CACHE_DATA_ON$$ZI$$Length;
;;;417    
;;;418        memset(Image$$CACHE_DATA_ON$$ZI$$Base,
;;;419               0,
;;;420               (unsigned int)&Image$$CACHE_DATA_ON$$ZI$$Length);
;;;421    }
;;;422    
;;;423    uint32_t random_seed_value;
;;;424    
;;;425    APP_FLASH_TEXT_SECTION
;;;426    void random_seed_init(void)
;;;427    {
;;;428        uint16_t crc16;
;;;429        uint8_t buf[DATA_SIZE_FOR_RANDOM_SEED];
;;;430        uint8_t *sour_addr = (uint8_t *)(OTP->appDataAddr + OTP->appDataSize + OTP->heapDataONSize);
;;;431    
;;;432        memcpy(buf, sour_addr, DATA_SIZE_FOR_RANDOM_SEED);
;;;433        crc16 = btxfcs(0, buf, DATA_SIZE_FOR_RANDOM_SEED);
;;;434    
;;;435        random_seed_value = (crc16 << 16) | (*(volatile uint32_t *)(0x4005817C) & 0xFFFF);
;;;436    
;;;437        random_seed_value *= platform_random(0xFFFFFFFF);
;;;438    
;;;439        srand(random_seed_value);
;;;440    
;;;441        for (int i = 0; i < (DATA_SIZE_FOR_RANDOM_SEED / 4); ++i)
;;;442        {
;;;443            *(uint32_t *)(sour_addr + i * 4) = rand();
;;;444        }
;;;445    
;;;446        random_seed_value = rand();
;;;447    }
;;;448    
;;;449    APP_FLASH_TEXT_SECTION
;;;450    void SystemInit(void)
;;;451    {
;;;452        //hci mode check and bypass app
;;;453        if (check_hci_mode_flag())
;;;454        {
;;;455            return;
;;;456        }
;;;457    
;;;458        //init pre_main and main functions
;;;459        extern void pre_main(void);
;;;460        app_pre_main = (APP_MAIN_FUNC)pre_main;
;;;461        app_main = (APP_MAIN_FUNC)common_main;
;;;462    
;;;463        /******** update otp here**********/
;;;464        //ram config
;;;465        OTP->appDataSize = APP_GLOBAL_SIZE;
;;;466        OTP->heapDataONSize = HEAP_DATA_ON_SIZE - DATA_SIZE_FOR_RANDOM_SEED;
;;;467    
;;;468        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;469    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;470        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
;;;471    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;472        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;473    #else
;;;474        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;475    #endif
;;;476    
;;;477        //sw timer config
;;;478    #ifdef TIMER_MAX_NUMBER
;;;479        //define TIMER_MAX_NUMBER in otp_config.h
;;;480        OTP->timerMaxNumber = TIMER_MAX_NUMBER;
;;;481    #endif
;;;482    
;;;483        //flash config
;;;484        /*config enable flash block proect depending on flash layout and flash id*/
;;;485    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;486        OTP->bp_enable = 1;
;;;487    #else
;;;488        OTP->bp_enable = 0;
;;;489    #endif
;;;490        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
;;;491    
;;;492    
;;;493        //os config
;;;494        /*config enable check task stack overflow*/
;;;495    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;496        OTP->checkForStackOverflow = 1;
;;;497    #else
;;;498        OTP->checkForStackOverflow = 0;
;;;499    #endif
;;;500    
;;;501    
;;;502        //platform config
;;;503        /*config enable platform assert*/
;;;504    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;505        OTP->enableASSERT = 1;
;;;506    #else
;;;507        OTP->enableASSERT = 0;
;;;508    #endif
;;;509    
;;;510        /*Print all log in log buffer before entering DLPS */
;;;511    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;512        OTP->printAllLogBeforeEnterDLPS = 1;
;;;513    #else
;;;514        OTP->printAllLogBeforeEnterDLPS = 0;
;;;515    #endif
;;;516    
;;;517        /*config enable log or not*/
;;;518    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;519        OTP->logDisable = 0;
;;;520    #else
;;;521        OTP->logDisable = 1;
;;;522    #endif
;;;523    
;;;524        /*config enable swd pinmux*/
;;;525    #if (SWD_PINMUX_ENABLE == 1)
;;;526        OTP->SWD_ENABLE = 1;
;;;527    #else
;;;528        OTP->SWD_ENABLE = 0;
;;;529    #endif
;;;530    
;;;531        /*config enable watch dog in rom*/
;;;532    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;533        OTP->wdgEnableInRom = 1;
;;;534    #else
;;;535        OTP->wdgEnableInRom = 0;
;;;536    #endif
;;;537    
;;;538        /*config watch dog mode in rom, defualt reset all*/
;;;539        OTP->wdgMode = ROM_WATCH_DOG_MODE;
;;;540    
;;;541        /*use os tick as log timestamp instead of TIM7*/
;;;542        OTP->log_timestamp_src = LOG_TIMESTAMP_OS;
;;;543    
;;;544    
;;;545        //app config
;;;546        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
;;;547        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
;;;548        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
;;;549        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
;;;550    
;;;551    #if ROM_OTA_LINKLOSS_RST
;;;552        OTP->ota_link_loss_reset = 1;
;;;553    #endif
;;;554        /*config bt stack parameters in rom*/
;;;555    #ifdef BT_STACK_CONFIG_ENABLE
;;;556        bt_stack_config_init();
;;;557    #endif
;;;558    
;;;559    //add more otp config here
;;;560    }
;;;561    
;;;562    //Note: call print_reset_reason() before ram_init();
;;;563    APP_FLASH_TEXT_SECTION
;;;564    void print_reset_reason(void)
;;;565    {
;;;566        if (check_reset_ram.check_reset_ram_pattern != RESET_RAM_PATTERN)
;;;567        {
;;;568            BOOT_PRINT_INFO0("RESET Reason: HW or OTA");
;;;569        }
;;;570        else
;;;571        {
;;;572            T_SW_RESET_REASON sw_reset_type = get_aon_record_reset_reason();
;;;573    
;;;574            if (sw_reset_type != (T_SW_RESET_REASON)0)
;;;575            {
;;;576                BOOT_PRINT_INFO1("RESET Reason: SW(reset except aon), TYPE 0x%x", sw_reset_type);
;;;577            }
;;;578            else //reset all will clear aon register
;;;579            {
;;;580                BOOT_PRINT_INFO1("RESET Reason: SW(reset all), TYPE 0x%x", check_reset_ram.check_reset_ram_type);
;;;581            }
;;;582        }
;;;583    }
;;;584    
;;;585    APP_FLASH_TEXT_SECTION
;;;586    void pre_main(void)
;;;587    {
;;;588        __disable_irq();
;;;589    
;;;590        print_reset_reason();  //Note: call this function before ram_init();
;;;591    
;;;592        ram_init();
;;;593    
;;;594        random_seed_init();
;;;595    
;;;596        load_overlay(OVERLAY_SCENARIO_BOOT_ONCE);
;;;597    
;;;598        //reset NVIC of DMA channel used in image decryption
;;;599        NVIC_DisableIRQ(GDMA0_Channel2_IRQn);
;;;600        NVIC_DisableIRQ(GDMA0_Channel3_IRQn);
;;;601    
;;;602        setlocale(LC_ALL, "C");
;;;603    
;;;604        BOOT_PRINT_ERROR2("SDK Ver: %s, Build Time: %s",
;;;605                          TRACE_STRING(VERSION_BUILD_STR),
;;;606                          TRACE_STRING(BUILDING_TIME));
;;;607    
;;;608        AppUpdateVectorTable();
;;;609    
;;;610    #if (DEBUG_WATCHPOINT_ENABLE == 1)
;;;611        debug_monitor_enable();
;;;612    #endif
;;;613    
;;;614        if (app_pre_main_cb)
;;;615        {
;;;616            app_pre_main_cb();
;;;617        }
;;;618    
;;;619        return;
;;;620    }
;;;621    /**
;;;622     * @brief  update vector table in app
;;;623     * @param  none
;;;624     * @return none
;;;625      */
;;;626    OVERLAY_SECTION_BOOT_ONCE
;;;627    static void AppUpdateVectorTable(void)
;;;628    {
;;;629        extern uint32_t Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;630        extern uint32_t Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;631        extern void Default_Handler(void);
;;;632        const char *SysException[] =
;;;633        {
;;;634            "InitialSP", "Reset", "NMI", "HardFault", "MemManage", "BusFault", "UsageFault", "Rsvd",
;;;635            "Rsvd", "Rsvd", "Rsvd", "SVC", "DebugMon", "Rsvd", "PendSV", "SysTick"
;;;636        };
;;;637        const char *ExtIrq[] =
;;;638        {
;;;639            "System", "WDG", "BTMAC", "TIM3", "TIM2", "Platform", "I2S0_TX", "I2S0_RX", "Timer4-7",
;;;640            "GPIO4", "GPIO5", "UART1", "UART0", "RTC", "SPI0", "SPI1", "I2C0", "I2C1", "ADC",
;;;641            "Peripheral", "GDMA0 Channel0", "GDMA0 Channel1", "GDMA0 Channel2", "GDMA0 Channel3",
;;;642            "GDMA0 Channel4", "GDMA0 Channel5", "GPIO_Group3", "GPIO_Group2", "IR", "GPIO_Group1",
;;;643            "GPIO_Group0", "UART2", "TIM4", "TIM5", "TIM6", "TIM7", "SPI_Flash", "Qdecode",
;;;644            "Keyscan", "SPI2W", "LPCOMP", "PTA_Mailbox", "SPORT1 TX", "SPORT1 RX", "LCD"
;;;645        };
;;;646    
;;;647        IRQ_Fun *pRamVector    = (IRQ_Fun *)VTOR_RAM_ADDR;
;;;648        IRQ_Fun *pAppVector    = (IRQ_Fun *)&Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;649        uint32_t AppVectorSize = (uint32_t)&Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;650        uint32_t i             = 0;
;;;651    
;;;652        if (SCB->VTOR != VTOR_RAM_ADDR)
;;;653        {
;;;654            RamVectorTableInit(VTOR_RAM_ADDR);
;;;655        }
;;;656    
;;;657        /* Update APP defined handlers */
;;;658        for (i = 0; i < AppVectorSize / 4; ++i)
;;;659        {
;;;660            if (i == 1) //skip reset_handler remap
;;;661            {
;;;662                continue;
;;;663            }
;;;664    
;;;665            if ((pAppVector[i] != Default_Handler) && (pAppVector[i] != 0))
;;;666            {
;;;667                if (i < System_VECTORn)
;;;668                {
;;;669                    OS_PRINT_WARN1("Warning! %s is updated by APP!", TRACE_STRING(SysException[i]));
;;;670                }
;;;671                else
;;;672                {
;;;673                    OS_PRINT_WARN1("Warning! ISR %s is updated by APP!",
;;;674                                   TRACE_STRING(ExtIrq[i - System_VECTORn]));
;;;675                }
;;;676    
;;;677                pRamVector[i] = pAppVector[i];
;;;678            }
;;;679        }
;;;680    
;;;681        __DMB();
;;;682        __DSB();
;;;683    }
;;;684    /**
;;;685     * @brief  GPIO Group3 Handler
;;;686     * @param  none
;;;687     * @return none
;;;688      */
;;;689    DATA_RAM_FUNCTION void GPIO_Group3_Handler(void)
;;;690    {
;;;691        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;692    
;;;693        //Check exact IRQ function
;;;694        if (GPIOIrqStatus & BIT3)
;;;695        {
;;;696            GPIO3_Handler();
;;;697        }
;;;698        if (GPIOIrqStatus & BIT7)
;;;699        {
;;;700            GPIO7_Handler();
;;;701        }
;;;702        if (GPIOIrqStatus & BIT11)
;;;703        {
;;;704            GPIO11_Handler();
;;;705        }
;;;706        if (GPIOIrqStatus & BIT15)
;;;707        {
;;;708            GPIO15_Handler();
;;;709        }
;;;710        if (GPIOIrqStatus & BIT19)
;;;711        {
;;;712            GPIO19_Handler();
;;;713        }
;;;714        if (GPIOIrqStatus & BIT23)
;;;715        {
;;;716            GPIO23_Handler();
;;;717        }
;;;718        if (GPIOIrqStatus & BIT27)
;;;719        {
;;;720            GPIO27_Handler();
;;;721        }
;;;722        if (GPIOIrqStatus & BIT31)
;;;723        {
;;;724            GPIO31_Handler();
;;;725        }
;;;726    }
;;;727    /**
;;;728     * @brief  GPIO Group2 Handler
;;;729     * @param  none
;;;730     * @return none
;;;731      */
;;;732    DATA_RAM_FUNCTION void GPIO_Group2_Handler(void)
;;;733    {
;;;734        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;735    
;;;736        //Check exact IRQ function
;;;737        if (GPIOIrqStatus & BIT2)
;;;738        {
;;;739            GPIO2_Handler();
;;;740        }
;;;741        if (GPIOIrqStatus & BIT6)
;;;742        {
;;;743            GPIO6_Handler();
;;;744        }
;;;745        if (GPIOIrqStatus & BIT10)
;;;746        {
;;;747            GPIO10_Handler();
;;;748        }
;;;749        if (GPIOIrqStatus & BIT14)
;;;750        {
;;;751            GPIO14_Handler();
;;;752        }
;;;753        if (GPIOIrqStatus & BIT18)
;;;754        {
;;;755            GPIO18_Handler();
;;;756        }
;;;757        if (GPIOIrqStatus & BIT22)
;;;758        {
;;;759            GPIO22_Handler();
;;;760        }
;;;761        if (GPIOIrqStatus & BIT26)
;;;762        {
;;;763            GPIO26_Handler();
;;;764        }
;;;765        if (GPIOIrqStatus & BIT30)
;;;766        {
;;;767            GPIO30_Handler();
;;;768        }
;;;769    }
;;;770    /**
;;;771     * @brief  GPIO Group1 Handler
;;;772     * @param  none
;;;773     * @return none
;;;774      */
;;;775    DATA_RAM_FUNCTION void GPIO_Group1_Handler(void)
;;;776    {
;;;777        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;778    
;;;779        //Check exact IRQ function
;;;780        if (GPIOIrqStatus & BIT1)
;;;781        {
;;;782            GPIO1_Handler();
;;;783        }
;;;784        if (GPIOIrqStatus & BIT9)
;;;785        {
;;;786            GPIO9_Handler();
;;;787        }
;;;788        if (GPIOIrqStatus & BIT13)
;;;789        {
;;;790            GPIO13_Handler();
;;;791        }
;;;792        if (GPIOIrqStatus & BIT17)
;;;793        {
;;;794            GPIO17_Handler();
;;;795        }
;;;796        if (GPIOIrqStatus & BIT21)
;;;797        {
;;;798            GPIO21_Handler();
;;;799        }
;;;800        if (GPIOIrqStatus & BIT25)
;;;801        {
;;;802            GPIO25_Handler();
;;;803        }
;;;804        if (GPIOIrqStatus & BIT29)
;;;805        {
;;;806            GPIO29_Handler();
;;;807        }
;;;808    }
;;;809    /**
;;;810     * @brief  GPIO Group0 Handler
;;;811     * @param  none
;;;812     * @return none
;;;813      */
;;;814    DATA_RAM_FUNCTION void GPIO_Group0_Handler(void)
;;;815    {
;;;816        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;817    
;;;818        //Check exact IRQ function
;;;819        if (GPIOIrqStatus & BIT0)
;;;820        {
;;;821            GPIO0_Handler();
;;;822        }
;;;823        if (GPIOIrqStatus & BIT8)
;;;824        {
;;;825            GPIO8_Handler();
;;;826        }
;;;827        if (GPIOIrqStatus & BIT12)
;;;828        {
;;;829            GPIO12_Handler();
;;;830        }
;;;831        if (GPIOIrqStatus & BIT16)
;;;832        {
;;;833            GPIO16_Handler();
;;;834        }
;;;835        if (GPIOIrqStatus & BIT20)
;;;836        {
;;;837            GPIO20_Handler();
;;;838        }
;;;839        if (GPIOIrqStatus & BIT24)
;;;840        {
;;;841            GPIO24_Handler();
;;;842        }
;;;843        if (GPIOIrqStatus & BIT28)
;;;844        {
;;;845            GPIO28_Handler();
;;;846        }
;;;847    }
;;;848    
;;;849    void WDG_SystemReset(T_WDG_MODE wdg_mode, T_SW_RESET_REASON reset_reason)
;;;850    {
;;;851        uint32_t parm = wdg_mode | (reset_reason << 8);
        0x00207dda:    ea402101    @..!    ORR      r1,r0,r1,LSL #8
;;;852        SystemCall(SYSTEM_CALL_WDG_RESET, parm);
        0x00207dde:    2001        .       MOVS     r0,#1
        0x00207de0:    f5ffba5e    ..^.    B        SystemCall ; 0x72a0
    flash_try_high_speed
;;;853    }
;;;854    
;;;855    /**
;;;856     * @brief  flash try to switch to high speed bit mode
;;;857     * @note  switch back to 1 bit mode, if flash switch to high speed bit mode fail
;;;858     * @param  bit_mode config bit mode @ref T_FLASH_MODE
;;;859     * @retval 0 fail
;;;860     * @retval 1 success
;;;861      */
;;;862    uint32_t flash_try_high_speed(T_FLASH_MODE bit_mode)
;;;863    {
        0x00207de4:    b510        ..      PUSH     {r4,lr}
;;;864        uint32_t result = 0;
;;;865        OTP->bit_mode = bit_mode;
        0x00207de6:    f44f1400    O...    MOV      r4,#0x200000
        0x00207dea:    2200        ."      MOVS     r2,#0
        0x00207dec:    f894134c    ..L.    LDRB     r1,[r4,#0x34c]
        0x00207df0:    f3600101    `...    BFI      r1,r0,#0,#2
        0x00207df4:    f884134c    ..L.    STRB     r1,[r4,#0x34c]
;;;866        result = flash_ioctl(flash_ioctrl_try_high_speed, 0, 0);
        0x00207df8:    4611        .F      MOV      r1,r2
        0x00207dfa:    f2450002    E...    MOV      r0,#0x5002
        0x00207dfe:    f604f938    ..8.    BL       flash_ioctl ; 0xc072
;;;867        //if try fail, set back OTP->bit_mode to one bit mode
;;;868        if (!result)
        0x00207e02:    2800        .(      CMP      r0,#0
        0x00207e04:    d105        ..      BNE      0x207e12 ; flash_try_high_speed + 46
;;;869        {
;;;870            OTP->bit_mode = FLASH_MODE_1BIT;
        0x00207e06:    f894134c    ..L.    LDRB     r1,[r4,#0x34c]
        0x00207e0a:    f0210103    !...    BIC      r1,r1,#3
        0x00207e0e:    f884134c    ..L.    STRB     r1,[r4,#0x34c]
;;;871        }
;;;872        return result;
;;;873    }
        0x00207e12:    bd10        ..      POP      {r4,pc}
    malloc
;;;874    
;;;875    void *malloc(size_t size)
;;;876    {
;;;877        return os_mem_alloc(RAM_TYPE_DATA_ON, size);
        0x00207e14:    4601        .F      MOV      r1,r0
        0x00207e16:    f240336d    @.m3    MOV      r3,#0x36d
        0x00207e1a:    4a29        )J      LDR      r2,[pc,#164] ; [0x207ec0] = 0x21c738
        0x00207e1c:    2000        .       MOVS     r0,#0
        0x00207e1e:    f61dbf9f    ....    B        os_mem_alloc_intern ; 0x25d60
    calloc
;;;878    }
;;;879    
;;;880    void *calloc(size_t n, size_t size)
;;;881    {
;;;882        return os_mem_zalloc(RAM_TYPE_DATA_ON, n * size);
        0x00207e22:    4a27        'J      LDR      r2,[pc,#156] ; [0x207ec0] = 0x21c738
        0x00207e24:    4341        AC      MULS     r1,r0,r1
        0x00207e26:    1dd2        ..      ADDS     r2,r2,#7
        0x00207e28:    f2403372    @.r3    MOV      r3,#0x372
        0x00207e2c:    2000        .       MOVS     r0,#0
        0x00207e2e:    f61dbfc3    ....    B        os_mem_zalloc_intern ; 0x25db8
    realloc
;;;883    }
;;;884    
;;;885    void *realloc(void *ptr, size_t size)
;;;886    {
        0x00207e32:    b510        ..      PUSH     {r4,lr}
        0x00207e34:    460c        .F      MOV      r4,r1
        0x00207e36:    b108        ..      CBZ      r0,0x207e3c ; realloc + 10
;;;887        if (ptr)
;;;888        {
;;;889            os_mem_free(ptr);
        0x00207e38:    f61ef81d    ....    BL       os_mem_free ; 0x25e76
;;;890        }
;;;891    
;;;892        return os_mem_alloc(RAM_TYPE_DATA_ON, size);
        0x00207e3c:    4a20         J      LDR      r2,[pc,#128] ; [0x207ec0] = 0x21c738
        0x00207e3e:    4621        !F      MOV      r1,r4
        0x00207e40:    320e        .2      ADDS     r2,r2,#0xe
        0x00207e42:    e8bd4010    ...@    POP      {r4,lr}
        0x00207e46:    f44f735f    O._s    MOV      r3,#0x37c
        0x00207e4a:    2000        .       MOVS     r0,#0
        0x00207e4c:    f61dbf88    ....    B        os_mem_alloc_intern ; 0x25d60
    free
;;;893    }
;;;894    
;;;895    void free(void *ptr)
;;;896    {
;;;897        os_mem_free(ptr);
        0x00207e50:    f61eb811    ....    B        os_mem_free ; 0x25e76
    app_cb0_wdg_reset
;;;898    }
;;;899    
;;;900    void app_cb0_wdg_reset(T_WDG_MODE wdg_mode, T_SW_RESET_REASON reset_reason)
;;;901    {
;;;902        check_reset_ram.check_reset_ram_type = reset_reason;
        0x00207e54:    4a1b        .J      LDR      r2,[pc,#108] ; [0x207ec4] = 0x20cf48
        0x00207e56:    70d1        .p      STRB     r1,[r2,#3]
        0x00207e58:    4a1b        .J      LDR      r2,[pc,#108] ; [0x207ec8] = 0x20cfbc
        0x00207e5a:    6812        .h      LDR      r2,[r2,#0]
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (901)
        0x00207e5c:    2a00        .*      CMP      r2,#0
        0x00207e5e:    d000        ..      BEQ      0x207e62 ; app_cb0_wdg_reset + 14
;;;902        check_reset_ram.check_reset_ram_type = reset_reason;
;;;903    
;;;904        if (user_wdg_cb)
;;;905        {
;;;906            if (user_wdg_cb(wdg_mode, reset_reason))
        0x00207e60:    4710        .G      BX       r2
;;;907            {
;;;908                return;
;;;909            }
;;;910        }
;;;911    
;;;912        //do something necessary before watch dog reset
;;;913    }
        0x00207e62:    4770        pG      BX       lr
    app_cb5_dfu_status
;;;914    
;;;915    void app_cb5_dfu_status(DFU_PROGRESS_STATUS status, uint32_t length)
;;;916    {
;;;917    //    uint32_t value = 0;
;;;918    //    switch(status)
;;;919    //    {
;;;920    //        case DFU_START:
;;;921    //            value = *((uint32_t *)0x180e000);
;;;922    //            DBG_DIRECT("DFU start, total length = %d, value = 0x%x", length, value);
;;;923    //            break;
;;;924    //        case DFU_DOING:
;;;925    //            value = *((uint32_t *)0x180e000);
;;;926    //            DBG_DIRECT("DFU doing, paccket length = %d, value = 0x%x", length, value);
;;;927    //            break;
;;;928    //        case DFU_END:
;;;929    //            value = *((uint32_t *)0x180e000);
;;;930    //            DBG_DIRECT("DFU end, check result = %d, value = 0x%x", length, value);
;;;931    //            break;
;;;932    //        default:
;;;933    //            DBG_DIRECT("wrong status input");
;;;934    //    }
;;;935        if (user_dfu_status_cb)
        0x00207e64:    4a19        .J      LDR      r2,[pc,#100] ; [0x207ecc] = 0x20cfc0
        0x00207e66:    6812        .h      LDR      r2,[r2,#0]
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (916)
        0x00207e68:    2a00        .*      CMP      r2,#0
        0x00207e6a:    d000        ..      BEQ      0x207e6e ; app_cb5_dfu_status + 10
;;;917    //    uint32_t value = 0;
;;;918    //    switch(status)
;;;919    //    {
;;;920    //        case DFU_START:
;;;921    //            value = *((uint32_t *)0x180e000);
;;;922    //            DBG_DIRECT("DFU start, total length = %d, value = 0x%x", length, value);
;;;923    //            break;
;;;924    //        case DFU_DOING:
;;;925    //            value = *((uint32_t *)0x180e000);
;;;926    //            DBG_DIRECT("DFU doing, paccket length = %d, value = 0x%x", length, value);
;;;927    //            break;
;;;928    //        case DFU_END:
;;;929    //            value = *((uint32_t *)0x180e000);
;;;930    //            DBG_DIRECT("DFU end, check result = %d, value = 0x%x", length, value);
;;;931    //            break;
;;;932    //        default:
;;;933    //            DBG_DIRECT("wrong status input");
;;;934    //    }
;;;935        if (user_dfu_status_cb)
;;;936        {
;;;937            if (user_dfu_status_cb(status, length))
        0x00207e6c:    4710        .G      BX       r2
;;;938            {
;;;939                return;
;;;940            }
;;;941        }
;;;942    }
        0x00207e6e:    4770        pG      BX       lr
    NVIC_DisableIRQ
;;; ..\..\..\inc\platform\cmsis\core_cm4.h
;;;1659       NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
        0x00207e70:    f000021f    ....    AND      r2,r0,#0x1f
        0x00207e74:    2101        .!      MOVS     r1,#1
        0x00207e76:    4091        .@      LSLS     r1,r1,r2
        0x00207e78:    0940        @.      LSRS     r0,r0,#5
        0x00207e7a:    0080        ..      LSLS     r0,r0,#2
        0x00207e7c:    f10020e0    ...     ADD      r0,r0,#0xe000e000
        0x00207e80:    f8c01180    ....    STR      r1,[r0,#0x180]
;;;1660   }
        0x00207e84:    4770        pG      BX       lr
    $d
        0x00207e86:    0000        ..      DCW    0
        0x00207e88:    53206e49    In S    DCD    1394634313
        0x00207e8c:    4d20436f    oC M    DCD    1293960047
        0x00207e90:    0065646f    ode.    DCD    6644847
        0x00207e94:    4e524157    WARN    DCD    1314013527
        0x00207e98:    3a474e49    ING:    DCD    977751625
        0x00207e9c:    206e4920     In     DCD    544098592
        0x00207ea0:    20494348    HCI     DCD    541672264
        0x00207ea4:    65646f4d    Mode    DCD    1701080909
        0x00207ea8:    6977202c    , wi    DCD    1769414700
        0x00207eac:    6e206c6c    ll n    DCD    1847618668
        0x00207eb0:    7220746f    ot r    DCD    1914729583
        0x00207eb4:    41206e75    un A    DCD    1092644469
        0x00207eb8:    54205050    PP T    DCD    1411403856
        0x00207ebc:    006b7361    ask.    DCD    7041889
        0x00207ec0:    0021c738    8.!.    DCD    2213688
        0x00207ec4:    0020cf48    H. .    DCD    2150216
        0x00207ec8:    0020cfbc    .. .    DCD    2150332
        0x00207ecc:    0020cfc0    .. .    DCD    2150336
    $t
    .text
    RCC_PeriphClockCmd
;;; .\..\..\..\src\mcu\peripheral\rtl876x_rcc.c
;;;66     {
        0x00207ed0:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00207ed2:    f44f7790    O..w    MOV      r7,#0x120
        0x00207ed6:    067b        {.      LSLS     r3,r7,#25
;;;67         /* Check the parameters */
;;;68         assert_param(IS_APB_PERIPH(APBPeriph));
;;;69         assert_param(IS_APB_PERIPH_CLOCK(APBPeriph_Clock));
;;;70         assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;71     
;;;72         uint32_t apbRegOff = ((APBPeriph & (0x03 << 26)) >> 26);
        0x00207ed8:    f3c06681    ...f    UBFX     r6,r0,#26,#2
;;;73         uint32_t clkRegOff = ((APBPeriph_Clock & (0x03 << 29)) >> 29);
        0x00207edc:    f3c17541    ..Au    UBFX     r5,r1,#29,#2
        0x00207ee0:    f44f7ea0    O..~    MOV      lr,#0x140
        0x00207ee4:    ea400401    @...    ORR      r4,r0,r1
;;;74     
;;;75         /*Open clock gating first*/
;;;76         if (NewState == ENABLE)
        0x00207ee8:    2a01        .*      CMP      r2,#1
        0x00207eea:    d006        ..      BEQ      0x207efa ; RCC_PeriphClockCmd + 42
        0x00207eec:    42b9        .B      CMP      r1,r7
        0x00207eee:    d06c        l.      BEQ      0x207fca ; RCC_PeriphClockCmd + 250
        0x00207ef0:    4571        qE      CMP      r1,lr
        0x00207ef2:    d06a        j.      BEQ      0x207fca ; RCC_PeriphClockCmd + 250
        0x00207ef4:    2910        .)      CMP      r1,#0x10
        0x00207ef6:    d068        h.      BEQ      0x207fca ; RCC_PeriphClockCmd + 250
        0x00207ef8:    e049        I.      B        0x207f8e ; RCC_PeriphClockCmd + 190
;;;77         {
;;;78             if (APBPeriph_Clock == APBPeriph_KEYSCAN_CLOCK)
        0x00207efa:    f1a14cc0    ...L    SUB      r12,r1,#0x60000000
        0x00207efe:    f1bc0c40    ..@.    SUBS     r12,r12,#0x40
        0x00207f02:    d016        ..      BEQ      0x207f32 ; RCC_PeriphClockCmd + 98
        0x00207f04:    f1b14fc2    ...O    CMP      r1,#0x61000000
        0x00207f08:    d01e        ..      BEQ      0x207f48 ; RCC_PeriphClockCmd + 120
        0x00207f0a:    f11c0c30    ..0.    ADDS     r12,r12,#0x30
        0x00207f0e:    d003        ..      BEQ      0x207f18 ; RCC_PeriphClockCmd + 72
        0x00207f10:    f8dfc2f0    ....    LDR      r12,[pc,#752] ; [0x208204] = 0x60010000
        0x00207f14:    4561        aE      CMP      r1,r12
        0x00207f16:    d124        $.      BNE      0x207f62 ; RCC_PeriphClockCmd + 146
        0x00207f18:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x00207f1c:    f04c6c80    L..l    ORR      r12,r12,#0x4000000
        0x00207f20:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
        0x00207f24:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x00207f28:    f04c6c00    L..l    ORR      r12,r12,#0x8000000
        0x00207f2c:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
        0x00207f30:    e027        '.      B        0x207f82 ; RCC_PeriphClockCmd + 178
;;;79             {
;;;80                 /*Open 5M clock source*/
;;;81                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
        0x00207f32:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x00207f36:    f04c6c80    L..l    ORR      r12,r12,#0x4000000
        0x00207f3a:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
;;;82                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
        0x00207f3e:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x00207f42:    f04c5c00    L..\    ORR      r12,r12,#0x20000000
        0x00207f46:    e7f1        ..      B        0x207f2c ; RCC_PeriphClockCmd + 92
;;;83             }
;;;84             else if (APBPeriph_Clock == APBPeriph_ADC_CLOCK)
;;;85             {
;;;86                 /*Open 10M clock source*/
;;;87                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
        0x00207f48:    f8d3420c    ...B    LDR      r4,[r3,#0x20c]
        0x00207f4c:    f0446480    D..d    ORR      r4,r4,#0x4000000
        0x00207f50:    f8c3420c    ...B    STR      r4,[r3,#0x20c]
;;;88                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
        0x00207f54:    f8d3420c    ...B    LDR      r4,[r3,#0x20c]
        0x00207f58:    f0445480    D..T    ORR      r4,r4,#0x10000000
        0x00207f5c:    f8c3420c    ...B    STR      r4,[r3,#0x20c]
        0x00207f60:    e015        ..      B        0x207f8e ; RCC_PeriphClockCmd + 190
;;;89             }
;;;90             else if ((APBPeriph_Clock == APBPeriph_QDEC_CLOCK) || (APBPeriph_Clock == APBPeriph_SPI2W_CLOCK))
;;;91             {
;;;92                 /*Open 20M clock source*/
;;;93                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;94                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;95             }
;;;96             else if (APBPeriph_Clock == APBPeriph_TIMER_CLOCK)
        0x00207f62:    f8dfc2a4    ....    LDR      r12,[pc,#676] ; [0x208208] = 0x20004000
        0x00207f66:    4561        aE      CMP      r1,r12
        0x00207f68:    d10b        ..      BNE      0x207f82 ; RCC_PeriphClockCmd + 178
;;;97             {
;;;98                 /* Enable TIM0~1 fixed 40M */
;;;99                 CLK_SOURCE_REG_2 |= BIT9;
        0x00207f6a:    f8d3c360    ..`.    LDR      r12,[r3,#0x360]
        0x00207f6e:    f44c7c00    L..|    ORR      r12,r12,#0x200
        0x00207f72:    f8c3c360    ..`.    STR      r12,[r3,#0x360]
;;;100                /* enable TIM2~7 ICG*/
;;;101                CLK_SOURCE_REG_0 |= BIT4;
        0x00207f76:    f8d3c348    ..H.    LDR      r12,[r3,#0x348]
        0x00207f7a:    f04c0c10    L...    ORR      r12,r12,#0x10
        0x00207f7e:    f8c3c348    ..H.    STR      r12,[r3,#0x348]
;;;102            }
;;;103        }
;;;104    
;;;105        /* Special register handle */
;;;106        if (NewState == ENABLE)
;;;107        {
;;;108            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
        0x00207f82:    42b9        .B      CMP      r1,r7
        0x00207f84:    d01d        ..      BEQ      0x207fc2 ; RCC_PeriphClockCmd + 242
        0x00207f86:    4571        qE      CMP      r1,lr
        0x00207f88:    d01b        ..      BEQ      0x207fc2 ; RCC_PeriphClockCmd + 242
;;;109                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
        0x00207f8a:    2910        .)      CMP      r1,#0x10
        0x00207f8c:    d019        ..      BEQ      0x207fc2 ; RCC_PeriphClockCmd + 242
;;;110            {
;;;111                SYSBLKCTRL->u_220 |= APBPeriph | APBPeriph_Clock;
;;;112                return;
;;;113            }
;;;114        }
;;;115        else
;;;116        {
;;;117            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
;;;118                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
;;;119            {
;;;120                SYSBLKCTRL->u_220 &= ~(APBPeriph | APBPeriph_Clock);
;;;121                return;
;;;122            }
;;;123        }
;;;124    
;;;125        /* clear flag */
;;;126        APBPeriph &= (~(0x03 << 26));
        0x00207f8e:    f0206340     .@c    BIC      r3,r0,#0xc000000
;;;127        APBPeriph_Clock &= (~(0x03 << 29));
        0x00207f92:    f02140c0    !..@    BIC      r0,r1,#0x60000000
        0x00207f96:    ea4f0186    O...    LSL      r1,r6,#2
        0x00207f9a:    f1014180    ...A    ADD      r1,r1,#0x40000000
;;;128    
;;;129        if (NewState == ENABLE)
        0x00207f9e:    2a01        .*      CMP      r2,#1
        0x00207fa0:    f8d12210    ..."    LDR      r2,[r1,#0x210]
        0x00207fa4:    d017        ..      BEQ      0x207fd6 ; RCC_PeriphClockCmd + 262
;;;130        {
;;;131            //enable peripheral
;;;132            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) |= APBPeriph;
;;;133            //enable peripheral clock
;;;134            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= APBPeriph_Clock;
;;;135            //enable peripheral clock in sleep mode
;;;136            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= (APBPeriph_Clock << 1);
;;;137        }
;;;138        else
;;;139        {
;;;140            //disable peripheral
;;;141            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) &= (~APBPeriph);
        0x00207fa6:    439a        .C      BICS     r2,r2,r3
;;;142            //disable peripheral clock
;;;143            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~APBPeriph_Clock);
        0x00207fa8:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x00207fac:    00a9        ..      LSLS     r1,r5,#2
        0x00207fae:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x00207fb2:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x00207fb6:    4382        .C      BICS     r2,r2,r0
;;;144            //disable peripheral clock in sleep mode
;;;145            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~(APBPeriph_Clock << 1));
        0x00207fb8:    ea220040    ".@.    BIC      r0,r2,r0,LSL #1
        0x00207fbc:    f8c1022c    ..,.    STR      r0,[r1,#0x22c]
;;;146        }
;;;147    
;;;148        return;
;;;149    }
        0x00207fc0:    bdf0        ..      POP      {r4-r7,pc}
        0x00207fc2:    f8d30220    .. .    LDR      r0,[r3,#0x220]
        0x00207fc6:    4320         C      ORRS     r0,r0,r4
        0x00207fc8:    e002        ..      B        0x207fd0 ; RCC_PeriphClockCmd + 256
        0x00207fca:    f8d30220    .. .    LDR      r0,[r3,#0x220]
        0x00207fce:    43a0        .C      BICS     r0,r0,r4
        0x00207fd0:    f8c30220    .. .    STR      r0,[r3,#0x220]
        0x00207fd4:    bdf0        ..      POP      {r4-r7,pc}
        0x00207fd6:    431a        .C      ORRS     r2,r2,r3
        0x00207fd8:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x00207fdc:    00a9        ..      LSLS     r1,r5,#2
        0x00207fde:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x00207fe2:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x00207fe6:    4302        .C      ORRS     r2,r2,r0
        0x00207fe8:    ea420040    B.@.    ORR      r0,r2,r0,LSL #1
        0x00207fec:    e7e6        ..      B        0x207fbc ; RCC_PeriphClockCmd + 236
    RCC_SPIClkDivConfig
        0x00207fee:    4b87        .K      LDR      r3,[pc,#540] ; [0x20820c] = 0x40013000
        0x00207ff0:    f04f4280    O..B    MOV      r2,#0x40000000
        0x00207ff4:    4298        .B      CMP      r0,r3
;;;150    
;;;151    /**
;;;152      * @brief  SPI clock divider config.
;;;153      * @param  SPIx: where x can be 0 or 1 to select the SPI peripheral.
;;;154      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;155      *      this parameter can be one of the following values:
;;;156      *     @arg SPI_CLOCK_DIV_1
;;;157      *     @arg SPI_CLOCK_DIV_2
;;;158      *     @arg SPI_CLOCK_DIV_4
;;;159      *     @arg SPI_CLOCK_DIV_8
;;;160      * @retval None
;;;161      */
;;;162    void RCC_SPIClkDivConfig(SPI_TypeDef *SPIx, uint16_t ClockDiv)
;;;163    {
        0x00207ff6:    d116        ..      BNE      0x208026 ; RCC_SPIClkDivConfig + 56
;;;164        assert_param(IS_SPI_DIV(ClockDiv));
;;;165    
;;;166        /* Config I2C clock divider */
;;;167        if (SPIx == SPI0)
;;;168        {
;;;169            /* disable clock first */
;;;170            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_SPI0_EN_Msk;
        0x00207ff8:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00207ffc:    f4203080     ..0    BIC      r0,r0,#0x10000
        0x00208000:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;171            //platform_delay_us(1);
;;;172    
;;;173            CLK_SOURCE_REG_1 &= ~(0x03 << 19);
        0x00208004:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00208008:    f42010c0     ...    BIC      r0,r0,#0x180000
        0x0020800c:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;174            CLK_SOURCE_REG_1 |= (ClockDiv << 19);
        0x00208010:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00208014:    ea4040c1    @..@    ORR      r0,r0,r1,LSL #19
        0x00208018:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;175    
;;;176            //platform_delay_us(1);
;;;177            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_SPI0_EN_Msk;
        0x0020801c:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00208020:    f4403080    @..0    ORR      r0,r0,#0x10000
        0x00208024:    e018        ..      B        0x208058 ; RCC_SPIClkDivConfig + 106
;;;178        }
;;;179        else if (SPIx == SPI1)
        0x00208026:    4b7a        zK      LDR      r3,[pc,#488] ; [0x208210] = 0x40013400
        0x00208028:    4298        .B      CMP      r0,r3
        0x0020802a:    d117        ..      BNE      0x20805c ; RCC_SPIClkDivConfig + 110
;;;180        {
;;;181            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_SPI1_EN_Msk;
        0x0020802c:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00208030:    f4202080     ..     BIC      r0,r0,#0x40000
        0x00208034:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;182            //platform_delay_us(1);
;;;183    
;;;184            CLK_SOURCE_REG_1 &= ~(0x03 << 21);
        0x00208038:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0020803c:    f42000c0     ...    BIC      r0,r0,#0x600000
        0x00208040:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;185            CLK_SOURCE_REG_1 |= (ClockDiv << 21);
        0x00208044:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00208048:    ea405041    @.AP    ORR      r0,r0,r1,LSL #21
        0x0020804c:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;186    
;;;187            //platform_delay_us(1);
;;;188            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_SPI1_EN_Msk;
        0x00208050:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00208054:    f4402080    @..     ORR      r0,r0,#0x40000
        0x00208058:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;189        }
;;;190        return;
;;;191    }
        0x0020805c:    4770        pG      BX       lr
    RCC_I2CClkDivConfig
        0x0020805e:    4b6d        mK      LDR      r3,[pc,#436] ; [0x208214] = 0x40015000
        0x00208060:    049a        ..      LSLS     r2,r3,#18
        0x00208062:    4298        .B      CMP      r0,r3
;;;192    
;;;193    /**
;;;194      * @brief  I2C clock divider config.
;;;195      * @param  I2Cx: where x can be 0 or 1 to select the I2C peripheral.
;;;196      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;197      *      this parameter can be one of the following values:
;;;198      *     @arg I2C_CLOCK_DIV_1
;;;199      *     @arg I2C_CLOCK_DIV_2
;;;200      *     @arg I2C_CLOCK_DIV_4
;;;201      *     @arg I2C_CLOCK_DIV_8
;;;202      * @retval None
;;;203      */
;;;204    void RCC_I2CClkDivConfig(I2C_TypeDef *I2Cx, uint16_t ClockDiv)
;;;205    {
        0x00208064:    d116        ..      BNE      0x208094 ; RCC_I2CClkDivConfig + 54
;;;206        assert_param(IS_I2C_DIV(ClockDiv));
;;;207    
;;;208        /* Config I2C clock divider */
;;;209        if (I2Cx == I2C0)
;;;210        {
;;;211            /* disable clock first */
;;;212            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 &= ~SYSBLK_ACTCK_I2C0_EN_Msk;
        0x00208066:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x0020806a:    f0200001     ...    BIC      r0,r0,#1
        0x0020806e:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;213            //platform_delay_us(1);
;;;214    
;;;215            CLK_SOURCE_REG_1 &= ~(0x03 << 15);
        0x00208072:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00208076:    f42030c0     ..0    BIC      r0,r0,#0x18000
        0x0020807a:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;216            CLK_SOURCE_REG_1 |= (ClockDiv << 15);
        0x0020807e:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00208082:    ea4030c1    @..0    ORR      r0,r0,r1,LSL #15
        0x00208086:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;217    
;;;218            //platform_delay_us(1);
;;;219            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= SYSBLK_ACTCK_I2C0_EN_Msk;
        0x0020808a:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x0020808e:    f0400001    @...    ORR      r0,r0,#1
        0x00208092:    e018        ..      B        0x2080c6 ; RCC_I2CClkDivConfig + 104
;;;220        }
;;;221        else if (I2Cx == I2C1)
        0x00208094:    4b60        `K      LDR      r3,[pc,#384] ; [0x208218] = 0x40015400
        0x00208096:    4298        .B      CMP      r0,r3
        0x00208098:    d117        ..      BNE      0x2080ca ; RCC_I2CClkDivConfig + 108
;;;222        {
;;;223            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 &= ~SYSBLK_ACTCK_I2C1_EN_Msk;
        0x0020809a:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x0020809e:    f0200004     ...    BIC      r0,r0,#4
        0x002080a2:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;224            //platform_delay_us(1);
;;;225    
;;;226            CLK_SOURCE_REG_1 &= ~(0x03 << 17);
        0x002080a6:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x002080aa:    f42020c0     ..     BIC      r0,r0,#0x60000
        0x002080ae:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;227            CLK_SOURCE_REG_1 |= (ClockDiv << 17);
        0x002080b2:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x002080b6:    ea404041    @.A@    ORR      r0,r0,r1,LSL #17
        0x002080ba:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;228    
;;;229            //platform_delay_us(1);
;;;230            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= SYSBLK_ACTCK_I2C1_EN_Msk;
        0x002080be:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x002080c2:    f0400004    @...    ORR      r0,r0,#4
        0x002080c6:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;231        }
;;;232    
;;;233        return;
;;;234    }
        0x002080ca:    4770        pG      BX       lr
    RCC_UARTClkDivConfig
;;;235    
;;;236    /**
;;;237      * @brief  UART clock divider config.
;;;238      * @param  UARTx: selected UART peripheral.
;;;239      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;240      *      this parameter can be one of the following values:
;;;241      *     @arg UART_CLOCK_DIV_1
;;;242      *     @arg UART_CLOCK_DIV_2
;;;243      *     @arg UART_CLOCK_DIV_4
;;;244      *     @arg UART_CLOCK_DIV_16
;;;245      * @retval None
;;;246      */
;;;247    void RCC_UARTClkDivConfig(UART_TypeDef *UARTx, uint16_t ClockDiv)
;;;248    {
;;;249        assert_param(IS_UART_DIV(ClockDiv));
;;;250    
;;;251        /* Config UART clock divider */
;;;252        if (UARTx == UART)
        0x002080cc:    4b53        SK      LDR      r3,[pc,#332] ; [0x20821c] = 0x40012000
        0x002080ce:    045a        Z.      LSLS     r2,r3,#17
        0x002080d0:    4298        .B      CMP      r0,r3
;;; .\..\..\..\src\mcu\peripheral\rtl876x_rcc.c (248)
        0x002080d2:    d118        ..      BNE      0x208106 ; RCC_UARTClkDivConfig + 58
;;;249        assert_param(IS_UART_DIV(ClockDiv));
;;;250    
;;;251        /* Config UART clock divider */
;;;252        if (UARTx == UART)
;;;253        {
;;;254            /* disable clock first */
;;;255            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_UART0DATA_EN_Msk;
        0x002080d4:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x002080d8:    f0200001     ...    BIC      r0,r0,#1
        0x002080dc:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;256            //platform_delay_us(1);
;;;257    
;;;258            CLK_SOURCE_REG_1 &= ~(0x03 << 9);
        0x002080e0:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x002080e4:    f42060c0     ..`    BIC      r0,r0,#0x600
        0x002080e8:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;259            CLK_SOURCE_REG_1 |= (ClockDiv << 9);
        0x002080ec:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x002080f0:    ea402041    @.A     ORR      r0,r0,r1,LSL #9
        0x002080f4:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;260    
;;;261            //platform_delay_us(1);
;;;262            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_UART0DATA_EN_Msk;
        0x002080f8:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x002080fc:    f0400001    @...    ORR      r0,r0,#1
        0x00208100:    f8c20234    ..4.    STR      r0,[r2,#0x234]
        0x00208104:    4770        pG      BX       lr
;;;263        }
;;;264        else if (UARTx == UART1)
        0x00208106:    4b46        FK      LDR      r3,[pc,#280] ; [0x208220] = 0x40011000
        0x00208108:    4298        .B      CMP      r0,r3
        0x0020810a:    d1fb        ..      BNE      0x208104 ; RCC_UARTClkDivConfig + 56
;;;265        {
;;;266            SYSBLKCTRL->u_230.CLK_CTRL &= ~SYSBLK_ACTCK_LOGUART_EN_Msk;
        0x0020810c:    f8d20230    ..0.    LDR      r0,[r2,#0x230]
        0x00208110:    f4205080     ..P    BIC      r0,r0,#0x1000
        0x00208114:    f8c20230    ..0.    STR      r0,[r2,#0x230]
;;;267            //platform_delay_us(1);
;;;268    
;;;269            CLK_SOURCE_REG_1 &= ~(0x03 << 11);
        0x00208118:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x0020811c:    f42050c0     ..P    BIC      r0,r0,#0x1800
        0x00208120:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;270            CLK_SOURCE_REG_1 |= (ClockDiv << 11);
        0x00208124:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00208128:    ea4020c1    @..     ORR      r0,r0,r1,LSL #11
        0x0020812c:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;271    
;;;272            //platform_delay_us(1);
;;;273            SYSBLKCTRL->u_230.CLK_CTRL |= SYSBLK_ACTCK_LOGUART_EN_Msk;
        0x00208130:    f8d20230    ..0.    LDR      r0,[r2,#0x230]
        0x00208134:    f4405080    @..P    ORR      r0,r0,#0x1000
        0x00208138:    f8c20230    ..0.    STR      r0,[r2,#0x230]
;;;274        }
;;;275    
;;;276        return;
;;;277    }
        0x0020813c:    4770        pG      BX       lr
    RCC_PeriClockConfig
;;;278    
;;;279    /**
;;;280      * @brief  Enables or disables the APB peripheral clock.
;;;281      * @param  APBPeriph_Clock: specifies the APB peripheral clock config.
;;;282      *      this parameter can be one of the following values(must be the same with APBPeriph):
;;;283      *     @arg APBPeriph_TIMER_CLOCK
;;;284      *     @arg APBPeriph_GDMA_CLOCK
;;;285      *     @arg APBPeriph_SPI2W_CLOCK
;;;286      *     @arg APBPeriph_KEYSCAN_CLOCK
;;;287      *     @arg APBPeriph_QDEC_CLOCK
;;;288      *     @arg APBPeriph_I2C1_CLOCK
;;;289      *     @arg APBPeriph_I2C0_CLOCK
;;;290      *     @arg APBPeriph_IR_CLOCK
;;;291      *     @arg APBPeriph_SPI1_CLOCK
;;;292      *     @arg APBPeriph_SPI0_CLOCK
;;;293      *     @arg APBPeriph_UART0_CLOCK
;;;294      *     @arg APBPeriph_UART1_CLOCK
;;;295      *     @arg APBPeriph_UART2_CLOCK
;;;296      *     @arg APBPeriph_GPIO_CLOCK
;;;297      *     @arg APBPeriph_ADC_CLOCK
;;;298      *     @arg APBPeriph_I2S0_CLOCK
;;;299      *     @arg APBPeriph_I2S1_CLOCK
;;;300      *     @arg APBPeriph_CODEC_CLOCK
;;;301      * @param  NewState: new state of the specified peripheral clock.
;;;302      *   This parameter can be: ENABLE or DISABLE.
;;;303      * @retval None
;;;304      */
;;;305    void RCC_PeriClockConfig(uint32_t APBPeriph_Clock, FunctionalState NewState)
;;;306    {
        0x0020813e:    b530        0.      PUSH     {r4,r5,lr}
        0x00208140:    f44f74a0    O..t    MOV      r4,#0x140
        0x00208144:    0623        #.      LSLS     r3,r4,#24
        0x00208146:    f3c07241    ..Ar    UBFX     r2,r0,#29,#2
        0x0020814a:    f44f7590    O..u    MOV      r5,#0x120
        0x0020814e:    2901        .)      CMP      r1,#1
        0x00208150:    d006        ..      BEQ      0x208160 ; RCC_PeriClockConfig + 34
        0x00208152:    42a8        .B      CMP      r0,r5
        0x00208154:    d01e        ..      BEQ      0x208194 ; RCC_PeriClockConfig + 86
        0x00208156:    42a0        .B      CMP      r0,r4
        0x00208158:    d01c        ..      BEQ      0x208194 ; RCC_PeriClockConfig + 86
        0x0020815a:    2810        .(      CMP      r0,#0x10
        0x0020815c:    d01a        ..      BEQ      0x208194 ; RCC_PeriClockConfig + 86
        0x0020815e:    e005        ..      B        0x20816c ; RCC_PeriClockConfig + 46
;;;307        /* Check the parameters */
;;;308        assert_param(IS_APB_PERIPH_CLOCK(APBPeriph_Clock));
;;;309        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;310    
;;;311        uint32_t clkRegOff = ((APBPeriph_Clock & (0x03 << 29)) >> 29);
;;;312    
;;;313        /* Special register handle */
;;;314        if (NewState == ENABLE)
;;;315        {
;;;316            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
        0x00208160:    42a8        .B      CMP      r0,r5
        0x00208162:    d013        ..      BEQ      0x20818c ; RCC_PeriClockConfig + 78
        0x00208164:    42a0        .B      CMP      r0,r4
        0x00208166:    d011        ..      BEQ      0x20818c ; RCC_PeriClockConfig + 78
;;;317                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
        0x00208168:    2810        .(      CMP      r0,#0x10
        0x0020816a:    d00f        ..      BEQ      0x20818c ; RCC_PeriClockConfig + 78
        0x0020816c:    2901        .)      CMP      r1,#1
        0x0020816e:    ea4f0182    O...    LSL      r1,r2,#2
        0x00208172:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x00208176:    f02040c0     ..@    BIC      r0,r0,#0x60000000
        0x0020817a:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x0020817e:    d00f        ..      BEQ      0x2081a0 ; RCC_PeriClockConfig + 98
        0x00208180:    4382        .C      BICS     r2,r2,r0
        0x00208182:    ea220040    ".@.    BIC      r0,r2,r0,LSL #1
        0x00208186:    f8c1022c    ..,.    STR      r0,[r1,#0x22c]
        0x0020818a:    bd30        0.      POP      {r4,r5,pc}
;;;318            {
;;;319                SYSBLKCTRL->u_220 |= APBPeriph_Clock;
        0x0020818c:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x00208190:    4301        .C      ORRS     r1,r1,r0
;;;320                return;
        0x00208192:    e002        ..      B        0x20819a ; RCC_PeriClockConfig + 92
;;;321            }
;;;322        }
;;;323        else
;;;324        {
;;;325            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
;;;326                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
;;;327            {
;;;328                SYSBLKCTRL->u_220 &= ~(APBPeriph_Clock);
        0x00208194:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x00208198:    4381        .C      BICS     r1,r1,r0
        0x0020819a:    f8c31220    .. .    STR      r1,[r3,#0x220]
        0x0020819e:    bd30        0.      POP      {r4,r5,pc}
;;;329                return;
;;;330            }
;;;331        }
;;;332    
;;;333        APBPeriph_Clock &= (~(0x03 << 29));
;;;334    
;;;335        if (NewState == ENABLE)
;;;336        {
;;;337            //enable peripheral clock
;;;338            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= APBPeriph_Clock;
        0x002081a0:    4302        .C      ORRS     r2,r2,r0
;;;339            //enable peripheral clock in sleep mode
;;;340            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= (APBPeriph_Clock << 1);
        0x002081a2:    ea420040    B.@.    ORR      r0,r2,r0,LSL #1
        0x002081a6:    e7ee        ..      B        0x208186 ; RCC_PeriClockConfig + 72
    RCC_PeriFunctionConfig
;;;341        }
;;;342        else
;;;343        {
;;;344            //disable peripheral clock
;;;345            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~APBPeriph_Clock);
;;;346            //disable peripheral clock in sleep mode
;;;347            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~(APBPeriph_Clock << 1));
;;;348        }
;;;349    
;;;350        return;
;;;351    }
;;;352    
;;;353    /**
;;;354      * @brief  Enables or disables the APB peripheral clock.
;;;355      * @param  APBPeriph: specifies the APB peripheral to gates its clock.
;;;356      *      this parameter can be one of the following values:
;;;357      *     @arg APBPeriph_TIMER
;;;358      *     @arg APBPeriph_GDMA
;;;359      *     @arg APBPeriph_LCD
;;;360      *     @arg APBPeriph_SPI2W
;;;361      *     @arg APBPeriph_KEYSCAN
;;;362      *     @arg APBPeriph_QDEC
;;;363      *     @arg APBPeriph_I2C1
;;;364      *     @arg APBPeriph_I2C0
;;;365      *     @arg APBPeriph_IR
;;;366      *     @arg APBPeriph_SPI1
;;;367      *     @arg APBPeriph_SPI0
;;;368      *     @arg APBPeriph_UART0
;;;369      *     @arg APBPeriph_UART1
;;;370      *     @arg APBPeriph_UART2
;;;371      *     @arg APBPeriph_GPIO
;;;372      *     @arg APBPeriph_ADC
;;;373      *     @arg APBPeriph_I2S0
;;;374      *     @arg APBPeriph_I2S1
;;;375      *     @arg APBPeriph_CODEC
;;;376      * @param  NewState: new state of the specified peripheral clock.
;;;377      *   This parameter can be: ENABLE or DISABLE.
;;;378      * @retval None
;;;379      */
;;;380    void RCC_PeriFunctionConfig(uint32_t APBPeriph, FunctionalState NewState)
;;;381    {
;;;382        /* Check the parameters */
;;;383        assert_param(IS_APB_PERIPH(APBPeriph));
;;;384        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;385    
;;;386        uint32_t apbRegOff = ((APBPeriph & (0x03 << 26)) >> 26);
        0x002081a8:    f3c06281    ...b    UBFX     r2,r0,#26,#2
        0x002081ac:    f04f4380    O..C    MOV      r3,#0x40000000
        0x002081b0:    2901        .)      CMP      r1,#1
;;; .\..\..\..\src\mcu\peripheral\rtl876x_rcc.c (381)
        0x002081b2:    d006        ..      BEQ      0x2081c2 ; RCC_PeriFunctionConfig + 26
        0x002081b4:    2802        .(      CMP      r0,#2
        0x002081b6:    d01c        ..      BEQ      0x2081f2 ; RCC_PeriFunctionConfig + 74
        0x002081b8:    2804        .(      CMP      r0,#4
        0x002081ba:    d01a        ..      BEQ      0x2081f2 ; RCC_PeriFunctionConfig + 74
        0x002081bc:    2801        .(      CMP      r0,#1
        0x002081be:    d018        ..      BEQ      0x2081f2 ; RCC_PeriFunctionConfig + 74
        0x002081c0:    e005        ..      B        0x2081ce ; RCC_PeriFunctionConfig + 38
;;;382        /* Check the parameters */
;;;383        assert_param(IS_APB_PERIPH(APBPeriph));
;;;384        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;385    
;;;386        uint32_t apbRegOff = ((APBPeriph & (0x03 << 26)) >> 26);
;;;387    
;;;388        /* Special register handle */
;;;389        if (NewState == ENABLE)
;;;390        {
;;;391            if ((APBPeriph == APBPeriph_I2S0) || ((APBPeriph == APBPeriph_I2S1)) ||
        0x002081c2:    2802        .(      CMP      r0,#2
        0x002081c4:    d011        ..      BEQ      0x2081ea ; RCC_PeriFunctionConfig + 66
        0x002081c6:    2804        .(      CMP      r0,#4
        0x002081c8:    d00f        ..      BEQ      0x2081ea ; RCC_PeriFunctionConfig + 66
;;;392                (APBPeriph == APBPeriph_CODEC))
        0x002081ca:    2801        .(      CMP      r0,#1
        0x002081cc:    d00d        ..      BEQ      0x2081ea ; RCC_PeriFunctionConfig + 66
        0x002081ce:    2901        .)      CMP      r1,#1
        0x002081d0:    ea4f0182    O...    LSL      r1,r2,#2
        0x002081d4:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x002081d8:    f0206040     .@`    BIC      r0,r0,#0xc000000
        0x002081dc:    f8d12210    ..."    LDR      r2,[r1,#0x210]
        0x002081e0:    d00d        ..      BEQ      0x2081fe ; RCC_PeriFunctionConfig + 86
        0x002081e2:    4382        .C      BICS     r2,r2,r0
        0x002081e4:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x002081e8:    4770        pG      BX       lr
;;;393            {
;;;394                SYSBLKCTRL->u_220 |= APBPeriph;
        0x002081ea:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x002081ee:    4301        .C      ORRS     r1,r1,r0
;;;395                return;
        0x002081f0:    e002        ..      B        0x2081f8 ; RCC_PeriFunctionConfig + 80
;;;396            }
;;;397        }
;;;398        else
;;;399        {
;;;400            if ((APBPeriph == APBPeriph_I2S0) || ((APBPeriph == APBPeriph_I2S1)) ||
;;;401                (APBPeriph == APBPeriph_CODEC))
;;;402            {
;;;403                SYSBLKCTRL->u_220 &= ~(APBPeriph);
        0x002081f2:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x002081f6:    4381        .C      BICS     r1,r1,r0
        0x002081f8:    f8c31220    .. .    STR      r1,[r3,#0x220]
        0x002081fc:    4770        pG      BX       lr
;;;404                return;
;;;405            }
;;;406        }
;;;407    
;;;408        /* clear flag */
;;;409        APBPeriph &= (~(0x03 << 26));
;;;410    
;;;411        if (NewState == ENABLE)
;;;412        {
;;;413            //enable peripheral
;;;414            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) |= APBPeriph;
        0x002081fe:    4302        .C      ORRS     r2,r2,r0
        0x00208200:    e7f0        ..      B        0x2081e4 ; RCC_PeriFunctionConfig + 60
    $d
        0x00208202:    0000        ..      DCW    0
        0x00208204:    60010000    ...`    DCD    1610678272
        0x00208208:    20004000    .@.     DCD    536887296
        0x0020820c:    40013000    .0.@    DCD    1073819648
        0x00208210:    40013400    .4.@    DCD    1073820672
        0x00208214:    40015000    .P.@    DCD    1073827840
        0x00208218:    40015400    .T.@    DCD    1073828864
        0x0020821c:    40012000    . .@    DCD    1073815552
        0x00208220:    40011000    ...@    DCD    1073811456
    $t
    .text
    UART_Init
;;; .\..\..\..\src\mcu\peripheral\rtl876x_uart.c
;;;30     {
        0x00208224:    b510        ..      PUSH     {r4,lr}
;;;31         assert_param(IS_UART_PERIPH(UARTx));
;;;32         assert_param(IS_UART_WORD_LENGTH(UART_InitStruct->wordLen));
;;;33         assert_param(IS_UART_PARITY(UART_InitStruct->parity));
;;;34         assert_param(IS_UART_STOPBITS(UART_InitStruct->stopBits));
;;;35         assert_param(IS_UART_AUTO_FLOW_CTRL(UART_InitStruct->autoFlowCtrl));
;;;36         assert_param(IS_UART_DMA_CFG(UART_InitStruct->dmaEn));
;;;37         assert_param(IS_UART_RX_FIFO_TRIGGER_LEVEL(UART_InitStruct->rxTriggerLevel));
;;;38         assert_param(IS_UART_IDLE_TIME(UART_InitStruct->idle_time));
;;;39     
;;;40         //clear DLAB bit
;;;41         UARTx->LCR &= LCR_DLAB_Reset;
        0x00208226:    68c2        .h      LDR      r2,[r0,#0xc]
        0x00208228:    f0220280    "...    BIC      r2,r2,#0x80
        0x0020822c:    60c2        .`      STR      r2,[r0,#0xc]
;;;42         //disable all interrupt
;;;43         UARTx->DLH_INTCR = 0x00;
        0x0020822e:    2200        ."      MOVS     r2,#0
        0x00208230:    6042        B`      STR      r2,[r0,#4]
;;;44     
;;;45         //read to clear Line Status Reg
;;;46         UARTx->LSR;
        0x00208232:    6942        Bi      LDR      r2,[r0,#0x14]
;;;47         //clear FIFO
;;;48         UARTx->INTID_FCR |= (FCR_CLEAR_RX_FIFO_Set | FCR_CLEAR_TX_FIFO_Set);
        0x00208234:    6882        .h      LDR      r2,[r0,#8]
        0x00208236:    f0420206    B...    ORR      r2,r2,#6
        0x0020823a:    6082        .`      STR      r2,[r0,#8]
;;;49     
;;;50         //set baudrate, firstly set DLAB bit
;;;51         UARTx->LCR |= LCR_DLAB_Set;
        0x0020823c:    68c2        .h      LDR      r2,[r0,#0xc]
        0x0020823e:    f0420280    B...    ORR      r2,r2,#0x80
        0x00208242:    60c2        .`      STR      r2,[r0,#0xc]
;;;52         //set calibration parameters(OVSR)
;;;53         UARTx->STSR &= ~0xF0;
        0x00208244:    6a02        .j      LDR      r2,[r0,#0x20]
        0x00208246:    f02202f0    "...    BIC      r2,r2,#0xf0
        0x0020824a:    6202        .b      STR      r2,[r0,#0x20]
;;;54         UARTx->STSR |= (UART_InitStruct->ovsr << 4);
        0x0020824c:    6a02        .j      LDR      r2,[r0,#0x20]
        0x0020824e:    888b        ..      LDRH     r3,[r1,#4]
        0x00208250:    ea421203    B...    ORR      r2,r2,r3,LSL #4
        0x00208254:    6202        .b      STR      r2,[r0,#0x20]
;;;55         //set calibration parameters(OVSR_adj)
;;;56         UARTx->SPR &= (~(0x7ff << 16));
        0x00208256:    69c2        .i      LDR      r2,[r0,#0x1c]
        0x00208258:    4b64        dK      LDR      r3,[pc,#400] ; [0x2083ec] = 0xf800ffff
        0x0020825a:    401a        .@      ANDS     r2,r2,r3
        0x0020825c:    61c2        .a      STR      r2,[r0,#0x1c]
;;;57         UARTx->SPR |= (UART_InitStruct->ovsr_adj << 16);
        0x0020825e:    69c2        .i      LDR      r2,[r0,#0x1c]
        0x00208260:    880b        ..      LDRH     r3,[r1,#0]
        0x00208262:    ea424203    B..B    ORR      r2,r2,r3,LSL #16
        0x00208266:    61c2        .a      STR      r2,[r0,#0x1c]
;;;58         //set DLL and DLH
;;;59         UARTx->DLL = (UART_InitStruct->div & 0x00FF);
        0x00208268:    788a        .x      LDRB     r2,[r1,#2]
        0x0020826a:    6002        .`      STR      r2,[r0,#0]
;;;60         UARTx->DLH_INTCR = ((UART_InitStruct->div & 0xFF00) >> 8);
        0x0020826c:    884a        J.      LDRH     r2,[r1,#2]
        0x0020826e:    0a12        ..      LSRS     r2,r2,#8
        0x00208270:    6042        B`      STR      r2,[r0,#4]
;;;61         //after set baudrate, clear DLAB bit
;;;62         UARTx->LCR &= LCR_DLAB_Reset;
        0x00208272:    68c2        .h      LDR      r2,[r0,#0xc]
        0x00208274:    f0220280    "...    BIC      r2,r2,#0x80
        0x00208278:    60c2        .`      STR      r2,[r0,#0xc]
;;;63     
;;;64         //set LCR reg
;;;65         UARTx->LCR = (UART_InitStruct->parity | UART_InitStruct->stopBits | UART_InitStruct->wordLen);
        0x0020827a:    890a        ..      LDRH     r2,[r1,#8]
        0x0020827c:    894b        K.      LDRH     r3,[r1,#0xa]
        0x0020827e:    431a        .C      ORRS     r2,r2,r3
        0x00208280:    88cb        ..      LDRH     r3,[r1,#6]
        0x00208282:    431a        .C      ORRS     r2,r2,r3
        0x00208284:    60c2        .`      STR      r2,[r0,#0xc]
;;;66         //set FCR reg, FIFO must enable
;;;67         UARTx->INTID_FCR = ((1 << 0) | UART_InitStruct->rxTriggerLevel << 8 | UART_InitStruct->dmaEn);
        0x00208286:    89ca        ..      LDRH     r2,[r1,#0xe]
        0x00208288:    2301        .#      MOVS     r3,#1
        0x0020828a:    eb032202    ..."    ADD      r2,r3,r2,LSL #8
        0x0020828e:    8a0b        ..      LDRH     r3,[r1,#0x10]
        0x00208290:    431a        .C      ORRS     r2,r2,r3
        0x00208292:    6082        .`      STR      r2,[r0,#8]
;;;68     
;;;69         /* auto flow control */
;;;70         UARTx->MCR &= (~((1 << 5) | (1 << 1)));
        0x00208294:    6902        .i      LDR      r2,[r0,#0x10]
        0x00208296:    f0220222    ".".    BIC      r2,r2,#0x22
        0x0020829a:    6102        .a      STR      r2,[r0,#0x10]
;;;71         UARTx->MCR |= UART_InitStruct->autoFlowCtrl;
        0x0020829c:    6902        .i      LDR      r2,[r0,#0x10]
        0x0020829e:    898b        ..      LDRH     r3,[r1,#0xc]
        0x002082a0:    431a        .C      ORRS     r2,r2,r3
        0x002082a2:    6102        .a      STR      r2,[r0,#0x10]
;;;72     
;;;73         /* set rx idle time */
;;;74         UARTx->RX_IDLE_INTTCR = (UART_InitStruct->idle_time);
        0x002082a4:    8a4a        J.      LDRH     r2,[r1,#0x12]
        0x002082a6:    6402        .d      STR      r2,[r0,#0x40]
;;;75     
;;;76         if (UART_InitStruct->dmaEn == UART_DMA_ENABLE)
        0x002082a8:    8a0a        ..      LDRH     r2,[r1,#0x10]
        0x002082aa:    2a08        .*      CMP      r2,#8
        0x002082ac:    d11a        ..      BNE      0x2082e4 ; UART_Init + 192
;;;77         {
;;;78             /* Config UART Tx dma parameter */
;;;79             if (UART_InitStruct->TxDmaEn != DISABLE)
        0x002082ae:    8aca        ..      LDRH     r2,[r1,#0x16]
        0x002082b0:    b152        R.      CBZ      r2,0x2082c8 ; UART_Init + 164
;;;80             {
;;;81                 /* Mask uart TX threshold value */
;;;82                 UARTx->MISCR &= ~(0x1f << 3);
        0x002082b2:    6a82        .j      LDR      r2,[r0,#0x28]
        0x002082b4:    f02202f8    "...    BIC      r2,r2,#0xf8
        0x002082b8:    6282        .b      STR      r2,[r0,#0x28]
;;;83                 UARTx->MISCR |= ((UART_InitStruct->TxWaterlevel) << 3) | BIT(1);
        0x002082ba:    6a82        .j      LDR      r2,[r0,#0x28]
        0x002082bc:    7d0b        .}      LDRB     r3,[r1,#0x14]
        0x002082be:    2402        .$      MOVS     r4,#2
        0x002082c0:    ea4403c3    D...    ORR      r3,r4,r3,LSL #3
        0x002082c4:    431a        .C      ORRS     r2,r2,r3
        0x002082c6:    6282        .b      STR      r2,[r0,#0x28]
;;;84             }
;;;85             /* Config UART Rx dma parameter */
;;;86             if (UART_InitStruct->RxDmaEn != DISABLE)
        0x002082c8:    8b0a        ..      LDRH     r2,[r1,#0x18]
        0x002082ca:    2a00        .*      CMP      r2,#0
        0x002082cc:    d00a        ..      BEQ      0x2082e4 ; UART_Init + 192
;;;87             {
;;;88                 /* Mask uart RX threshold value */
;;;89                 UARTx->MISCR &= ~(0x3f << 8);
        0x002082ce:    6a82        .j      LDR      r2,[r0,#0x28]
        0x002082d0:    f422527c    ".|R    BIC      r2,r2,#0x3f00
        0x002082d4:    6282        .b      STR      r2,[r0,#0x28]
;;;90                 UARTx->MISCR |= (UART_InitStruct->RxWaterlevel << 8) | BIT(2);
        0x002082d6:    6a82        .j      LDR      r2,[r0,#0x28]
        0x002082d8:    7d49        I}      LDRB     r1,[r1,#0x15]
        0x002082da:    2304        .#      MOVS     r3,#4
        0x002082dc:    ea432101    C..!    ORR      r1,r3,r1,LSL #8
        0x002082e0:    430a        .C      ORRS     r2,r2,r1
        0x002082e2:    6282        .b      STR      r2,[r0,#0x28]
;;;91             }
;;;92         }
;;;93     
;;;94         return;
;;;95     }
        0x002082e4:    bd10        ..      POP      {r4,pc}
    UART_DeInit
        0x002082e6:    4942        BI      LDR      r1,[pc,#264] ; [0x2083f0] = 0x40012000
        0x002082e8:    4288        .B      CMP      r0,r1
;;;96     
;;;97     /**
;;;98       * @brief  Deinitializes the UART peripheral registers to their default reset values(turn off UART clock).
;;;99       * @param  UARTx: selected UART peripheral.
;;;100      * @retval None
;;;101      */
;;;102    void UART_DeInit(UART_TypeDef *UARTx)
;;;103    {
        0x002082ea:    d103        ..      BNE      0x2082f4 ; UART_DeInit + 14
;;;104        assert_param(IS_UART_PERIPH(UARTx));
;;;105    
;;;106        if (UARTx == UART)
;;;107        {
;;;108            RCC_PeriphClockCmd(APBPeriph_UART0, APBPeriph_UART0_CLOCK, DISABLE);
        0x002082ec:    2200        ."      MOVS     r2,#0
        0x002082ee:    4941        AI      LDR      r1,[pc,#260] ; [0x2083f4] = 0x40000001
        0x002082f0:    4841        AH      LDR      r0,[pc,#260] ; [0x2083f8] = 0x8000001
        0x002082f2:    e00d        ..      B        0x208310 ; UART_DeInit + 42
;;;109        }
;;;110        else if (UARTx == UART1)
        0x002082f4:    4941        AI      LDR      r1,[pc,#260] ; [0x2083fc] = 0x40011000
        0x002082f6:    4288        .B      CMP      r0,r1
        0x002082f8:    d103        ..      BNE      0x208302 ; UART_DeInit + 28
;;;111        {
;;;112            RCC_PeriphClockCmd(APBPeriph_UART1, APBPeriph_UART1_CLOCK, DISABLE);
        0x002082fa:    2200        ."      MOVS     r2,#0
        0x002082fc:    4940        @I      LDR      r1,[pc,#256] ; [0x208400] = 0x20001000
        0x002082fe:    1480        ..      ASRS     r0,r0,#18
        0x00208300:    e006        ..      B        0x208310 ; UART_DeInit + 42
;;;113        }
;;;114        else if (UARTx == UART2)
        0x00208302:    4940        @I      LDR      r1,[pc,#256] ; [0x208404] = 0x40024000
        0x00208304:    4288        .B      CMP      r0,r1
        0x00208306:    d105        ..      BNE      0x208314 ; UART_DeInit + 46
;;;115        {
;;;116            RCC_PeriphClockCmd(APBPeriph_UART2, APBPeriph_UART2_CLOCK, DISABLE);
        0x00208308:    483b        ;H      LDR      r0,[pc,#236] ; [0x2083f8] = 0x8000001
        0x0020830a:    2200        ."      MOVS     r2,#0
        0x0020830c:    493e        >I      LDR      r1,[pc,#248] ; [0x208408] = 0x20000400
        0x0020830e:    1c40        @.      ADDS     r0,r0,#1
        0x00208310:    f7ffbdde    ....    B.W      RCC_PeriphClockCmd ; 0x207ed0
;;;117        }
;;;118        return;
;;;119    }
        0x00208314:    4770        pG      BX       lr
    UART_StructInit
;;;120    
;;;121    /**
;;;122      * @brief  Fills each UART_InitStruct member with its default value.
;;;123      * @param  UART_InitStruct: pointer to an UART_InitTypeDef structure which will be initialized.
;;;124      * @retval None
;;;125      */
;;;126    void UART_StructInit(UART_InitTypeDef *UART_InitStruct)
;;;127    {
;;;128        //115200 default
;;;129        UART_InitStruct->div            = 20;
        0x00208316:    2114        .!      MOVS     r1,#0x14
        0x00208318:    8041        A.      STRH     r1,[r0,#2]
;;;130        UART_InitStruct->ovsr           = 12;
        0x0020831a:    210c        .!      MOVS     r1,#0xc
        0x0020831c:    8081        ..      STRH     r1,[r0,#4]
;;;131        UART_InitStruct->ovsr_adj       = 0x252;
        0x0020831e:    f2402152    @.R!    MOV      r1,#0x252
        0x00208322:    8001        ..      STRH     r1,[r0,#0]
;;;132    
;;;133        UART_InitStruct->parity         = UART_PARITY_NO_PARTY;
        0x00208324:    2100        .!      MOVS     r1,#0
        0x00208326:    8101        ..      STRH     r1,[r0,#8]
;;;134        UART_InitStruct->stopBits       = UART_STOP_BITS_1;
        0x00208328:    8141        A.      STRH     r1,[r0,#0xa]
;;;135        UART_InitStruct->wordLen        = UART_WROD_LENGTH_8BIT;
        0x0020832a:    2201        ."      MOVS     r2,#1
        0x0020832c:    80c2        ..      STRH     r2,[r0,#6]
;;;136        UART_InitStruct->dmaEn          = UART_DMA_DISABLE;
        0x0020832e:    8201        ..      STRH     r1,[r0,#0x10]
;;;137        UART_InitStruct->autoFlowCtrl   = UART_AUTO_FLOW_CTRL_DIS;
        0x00208330:    8181        ..      STRH     r1,[r0,#0xc]
;;;138        UART_InitStruct->rxTriggerLevel = 16;                       //1~29
        0x00208332:    2310        .#      MOVS     r3,#0x10
        0x00208334:    81c3        ..      STRH     r3,[r0,#0xe]
;;;139        UART_InitStruct->idle_time      = UART_RX_IDLE_2BYTE;      //idle interrupt wait time
        0x00208336:    8242        B.      STRH     r2,[r0,#0x12]
;;;140        UART_InitStruct->TxWaterlevel   = 15;     //Better to equal TX_FIFO_SIZE(16)- GDMA_MSize
        0x00208338:    230f        .#      MOVS     r3,#0xf
        0x0020833a:    7503        .u      STRB     r3,[r0,#0x14]
;;;141        UART_InitStruct->RxWaterlevel   = 1;      //Better to equal GDMA_MSize
        0x0020833c:    7542        Bu      STRB     r2,[r0,#0x15]
;;;142        UART_InitStruct->TxDmaEn   = DISABLE;
        0x0020833e:    82c1        ..      STRH     r1,[r0,#0x16]
;;;143        UART_InitStruct->RxDmaEn   = DISABLE;
        0x00208340:    8301        ..      STRH     r1,[r0,#0x18]
;;;144        return;
;;;145    }
        0x00208342:    4770        pG      BX       lr
    UART_ReceiveData
;;;146    
;;;147    /**
;;;148      * @brief  Receive data from rx FIFO.
;;;149      * @param  UARTx: selected UART peripheral.
;;;150      * @param[out]  outBuf: buffer to save data read from UART FIFO.
;;;151      * @param  count: number of data to be read.
;;;152      * @retval None
;;;153      */
;;;154    void UART_ReceiveData(UART_TypeDef *UARTx, uint8_t *outBuf, uint16_t count)
;;;155    {
;;;156        /* Check the parameters */
;;;157        assert_param(IS_UART_PERIPH(UARTx));
;;;158    
;;;159        while (count--)
;;;160        {
;;;161            *outBuf++ = (uint8_t)UARTx->RB_THR;
        0x00208344:    e002        ..      B        0x20834c ; UART_ReceiveData + 8
        0x00208346:    6a43        Cj      LDR      r3,[r0,#0x24]
        0x00208348:    f8013b01    ...;    STRB     r3,[r1],#1
;;; .\..\..\..\src\mcu\peripheral\rtl876x_uart.c (159)
        0x0020834c:    1e52        R.      SUBS     r2,r2,#1
        0x0020834e:    b292        ..      UXTH     r2,r2
        0x00208350:    d2f9        ..      BCS      0x208346 ; UART_ReceiveData + 2
;;;160        {
;;;161            *outBuf++ = (uint8_t)UARTx->RB_THR;
;;;162        }
;;;163    
;;;164        return;
;;;165    }
        0x00208352:    4770        pG      BX       lr
    UART_SendData
;;;166    
;;;167    /**
;;;168      * @brief  Send data to tx FIFO.
;;;169      * @param  UARTx: selected UART peripheral.
;;;170      * @param  inBuf: buffer to be written to Tx FIFO.
;;;171      * @param  count: number of data to be written.
;;;172      * @retval None
;;;173      */
;;;174    void UART_SendData(UART_TypeDef *UARTx, const uint8_t *inBuf, uint16_t count)
;;;175    {
;;;176        /* Check the parameters */
;;;177        assert_param(IS_UART_PERIPH(UARTx));
;;;178    
;;;179        while (count--)
;;;180        {
;;;181            UARTx->RB_THR = *inBuf++;
        0x00208354:    e002        ..      B        0x20835c ; UART_SendData + 8
        0x00208356:    f8113b01    ...;    LDRB     r3,[r1],#1
        0x0020835a:    6243        Cb      STR      r3,[r0,#0x24]
;;; .\..\..\..\src\mcu\peripheral\rtl876x_uart.c (179)
        0x0020835c:    1e52        R.      SUBS     r2,r2,#1
        0x0020835e:    b292        ..      UXTH     r2,r2
        0x00208360:    d2f9        ..      BCS      0x208356 ; UART_SendData + 2
;;;180        {
;;;181            UARTx->RB_THR = *inBuf++;
;;;182        }
;;;183    
;;;184        return;
;;;185    }
        0x00208362:    4770        pG      BX       lr
    UART_INTConfig
;;;186    
;;;187    /**
;;;188      * @brief  Enables or disables the specified UART interrupts.
;;;189      * @param  UARTx: selected UARTx peripheral.
;;;190      * @param  UART_IT: specifies the UART interrupts sources to be enabled or disabled.
;;;191      *   This parameter can be any combination of the following values:
;;;192      *     @arg UART_INT_RD_AVA: enable Rx data avaliable interrupt.
;;;193      *     @arg UART_INT_FIFO_EMPTY: enable FIFO empty interrupt.
;;;194      *     @arg UART_INT_LINE_STS: enable line status interrupt.
;;;195      *     @arg UART_INT_MODEM_STS: enable modem status interrupt.
;;;196      * @param  NewState: new state of the specified UART interrupts.
;;;197      *   This parameter can be: ENABLE or DISABLE.
;;;198      * @retval None
;;;199      */
;;;200    void UART_INTConfig(UART_TypeDef *UARTx, uint32_t UART_IT, FunctionalState newState)
;;;201    {
;;;202        /* Check the parameters */
;;;203        assert_param(IS_UART_PERIPH(UARTx));
;;;204        assert_param(IS_FUNCTIONAL_STATE(newState));
;;;205        assert_param(IS_UART_IT(UART_IT));
;;;206    
;;;207        if (UART_IT & UART_INT_IDLE)
        0x00208364:    060b        ..      LSLS     r3,r1,#24
;;; .\..\..\..\src\mcu\peripheral\rtl876x_uart.c (201)
        0x00208366:    d50d        ..      BPL      0x208384 ; UART_INTConfig + 32
;;;202        /* Check the parameters */
;;;203        assert_param(IS_UART_PERIPH(UARTx));
;;;204        assert_param(IS_FUNCTIONAL_STATE(newState));
;;;205        assert_param(IS_UART_IT(UART_IT));
;;;206    
;;;207        if (UART_IT & UART_INT_IDLE)
;;;208        {
;;;209            if (newState == ENABLE)
        0x00208368:    2a01        .*      CMP      r2,#1
        0x0020836a:    d013        ..      BEQ      0x208394 ; UART_INTConfig + 48
;;;210            {
;;;211                UARTx->STSR  |= BIT3;
;;;212                UARTx->STSR  &= (~BIT3);
;;;213                UARTx->RXIDLE_INTCR |= BIT0;
;;;214                UARTx->RX_IDLE_INTTCR |= BIT31;
;;;215            }
;;;216            else
;;;217            {
;;;218                UARTx->RX_IDLE_INTTCR &= (~BIT31);
        0x0020836c:    6c03        .l      LDR      r3,[r0,#0x40]
        0x0020836e:    f0234300    #..C    BIC      r3,r3,#0x80000000
        0x00208372:    6403        .d      STR      r3,[r0,#0x40]
;;;219                UARTx->RX_IDLE_SR |= BIT0;
        0x00208374:    6c43        Cl      LDR      r3,[r0,#0x44]
        0x00208376:    f0430301    C...    ORR      r3,r3,#1
        0x0020837a:    6443        Cd      STR      r3,[r0,#0x44]
;;;220                UARTx->RXIDLE_INTCR &= (~BIT0);
        0x0020837c:    6c83        .l      LDR      r3,[r0,#0x48]
        0x0020837e:    f0230301    #...    BIC      r3,r3,#1
        0x00208382:    6483        .d      STR      r3,[r0,#0x48]
;;;221            }
;;;222        }
;;;223        if (UART_IT & 0xf)
        0x00208384:    070b        ..      LSLS     r3,r1,#28
        0x00208386:    d004        ..      BEQ      0x208392 ; UART_INTConfig + 46
;;;224        {
;;;225            if (newState == ENABLE)
        0x00208388:    2a01        .*      CMP      r2,#1
        0x0020838a:    6842        Bh      LDR      r2,[r0,#4]
        0x0020838c:    d013        ..      BEQ      0x2083b6 ; UART_INTConfig + 82
;;;226            {
;;;227                /* Enable the selected UARTx interrupts */
;;;228                UARTx->DLH_INTCR |= UART_IT;
;;;229            }
;;;230            else
;;;231            {
;;;232                /* Disable the selected UARTx interrupts */
;;;233                UARTx->DLH_INTCR &= (uint32_t)~UART_IT;
        0x0020838e:    438a        .C      BICS     r2,r2,r1
        0x00208390:    6042        B`      STR      r2,[r0,#4]
;;;234            }
;;;235        }
;;;236        return;
;;;237    }
        0x00208392:    4770        pG      BX       lr
        0x00208394:    6a03        .j      LDR      r3,[r0,#0x20]
        0x00208396:    f0430308    C...    ORR      r3,r3,#8
        0x0020839a:    6203        .b      STR      r3,[r0,#0x20]
        0x0020839c:    6a03        .j      LDR      r3,[r0,#0x20]
        0x0020839e:    f0230308    #...    BIC      r3,r3,#8
        0x002083a2:    6203        .b      STR      r3,[r0,#0x20]
        0x002083a4:    6c83        .l      LDR      r3,[r0,#0x48]
        0x002083a6:    f0430301    C...    ORR      r3,r3,#1
        0x002083aa:    6483        .d      STR      r3,[r0,#0x48]
        0x002083ac:    6c03        .l      LDR      r3,[r0,#0x40]
        0x002083ae:    f0434300    C..C    ORR      r3,r3,#0x80000000
        0x002083b2:    6403        .d      STR      r3,[r0,#0x40]
        0x002083b4:    e7e6        ..      B        0x208384 ; UART_INTConfig + 32
        0x002083b6:    430a        .C      ORRS     r2,r2,r1
        0x002083b8:    e7ea        ..      B        0x208390 ; UART_INTConfig + 44
    UART_GetFlagState
;;;238    
;;;239    /**
;;;240      * @brief  Checks whether the specified UART flag is set or not.
;;;241      * @param  UARTx: selected UART peripheral.
;;;242      * @param  UART_FLAG: specifies the flag to check.
;;;243      *   This parameter can be one of the following values:
;;;244      *     @arg UART_FLAG_RX_DATA_RDY: rx data is avaliable.
;;;245      *     @arg UART_FLAG_RX_OVERRUN: rx overrun.
;;;246      *     @arg UART_FLAG_PARTY_ERR: parity error.
;;;247      *     @arg UART_FLAG_FRAME_ERR: UARTx frame error.
;;;248      *     @arg UART_FLAG_BREAK_ERR: UARTx break error.
;;;249      *     @arg UART_FLAG_THR_EMPTY: tx FIFO is empty.
;;;250      *     @arg UART_FLAG_THR_TSR_EMPTY: tx FIFO and tx shift reg are both empty.
;;;251      *     @arg UART_FLAG_RX_FIFO_ERR: rx FIFO error.
;;;252      *     @arg UART_FLAG_RX_IDLE.
;;;253      * @retval The new state of UART_FLAG (SET or RESET).
;;;254      */
;;;255    FlagStatus UART_GetFlagState(UART_TypeDef *UARTx, uint32_t UART_FLAG)
;;;256    {
        0x002083ba:    4602        .F      MOV      r2,r0
        0x002083bc:    2000        .       MOVS     r0,#0
        0x002083be:    f5b17f80    ....    CMP      r1,#0x100
        0x002083c2:    d004        ..      BEQ      0x2083ce ; UART_GetFlagState + 20
;;;257        FlagStatus bitstatus = RESET;
;;;258    
;;;259        /* Check the parameters */
;;;260        assert_param(IS_UART_PERIPH(UARTx));
;;;261        assert_param(IS_UART_GET_FLAG(UART_FLAG));
;;;262    
;;;263        if (UART_FLAG != UART_FLAG_RX_IDLE)
;;;264        {
;;;265            if (UARTx->LSR & UART_FLAG)
        0x002083c4:    6952        Ri      LDR      r2,[r2,#0x14]
        0x002083c6:    420a        .B      TST      r2,r1
        0x002083c8:    d000        ..      BEQ      0x2083cc ; UART_GetFlagState + 18
;;;266            {
;;;267                bitstatus = SET;
        0x002083ca:    2001        .       MOVS     r0,#1
        0x002083cc:    4770        pG      BX       lr
;;;268            }
;;;269        }
;;;270        else
;;;271        {
;;;272            if (UARTx->RX_IDLE_SR & BIT(0))
        0x002083ce:    6c51        Ql      LDR      r1,[r2,#0x44]
        0x002083d0:    07c9        ..      LSLS     r1,r1,#31
        0x002083d2:    d1fa        ..      BNE      0x2083ca ; UART_GetFlagState + 16
;;;273            {
;;;274                bitstatus = SET;
;;;275            }
;;;276        }
;;;277        return bitstatus;
;;;278    
;;;279    }
        0x002083d4:    4770        pG      BX       lr
    UART_LoopBackCmd
        0x002083d6:    2901        .)      CMP      r1,#1
        0x002083d8:    6901        .i      LDR      r1,[r0,#0x10]
;;;280    
;;;281    /**
;;;282      *@brief  UART loop back mode config.
;;;283      *@param  UARTx: selected UART peripheral.
;;;284      *@param  NewState: new state of the DMA Channelx.
;;;285      *   This parameter can be: ENABLE or DISABLE.
;;;286      *@retval None.
;;;287      */
;;;288    void UART_LoopBackCmd(UART_TypeDef *UARTx, FunctionalState NewState)
;;;289    {
        0x002083da:    d003        ..      BEQ      0x2083e4 ; UART_LoopBackCmd + 14
        0x002083dc:    f0210110    !...    BIC      r1,r1,#0x10
;;;290        assert_param(IS_UART_PERIPH(UARTx));
;;;291    
;;;292        if (NewState == ENABLE)
;;;293        {
;;;294            UARTx->MCR |= BIT4;
        0x002083e0:    6101        .a      STR      r1,[r0,#0x10]
        0x002083e2:    4770        pG      BX       lr
        0x002083e4:    f0410110    A...    ORR      r1,r1,#0x10
        0x002083e8:    e7fa        ..      B        0x2083e0 ; UART_LoopBackCmd + 10
    $d
        0x002083ea:    0000        ..      DCW    0
        0x002083ec:    f800ffff    ....    DCD    4160815103
        0x002083f0:    40012000    . .@    DCD    1073815552
        0x002083f4:    40000001    ...@    DCD    1073741825
        0x002083f8:    08000001    ....    DCD    134217729
        0x002083fc:    40011000    ...@    DCD    1073811456
        0x00208400:    20001000    ...     DCD    536875008
        0x00208404:    40024000    .@.@    DCD    1073889280
        0x00208408:    20000400    ...     DCD    536871936
    $t
    .text
    simp_ble_client_start_discovery
;;; .\..\..\..\src\ble\profile\client\simple_ble_client.c
;;;45     {
        0x0020840c:    b510        ..      PUSH     {r4,lr}
        0x0020840e:    4604        .F      MOV      r4,r0
;;;46         PROFILE_PRINT_INFO0("simp_ble_client_start_discovery");
        0x00208410:    2200        ."      MOVS     r2,#0
        0x00208412:    49f9        .I      LDR      r1,[pc,#996] ; [0x2087f8] = 0x88000e8
        0x00208414:    48f9        .H      LDR      r0,[pc,#996] ; [0x2087fc] = 0x21103302
        0x00208416:    f5fffb22    ..".    BL       log_buffer ; 0x7a5e
;;;47         if (conn_id >= simp_link_num)
        0x0020841a:    48f9        .H      LDR      r0,[pc,#996] ; [0x208800] = 0x20cfcc
        0x0020841c:    7801        .x      LDRB     r1,[r0,#0]
        0x0020841e:    428c        .B      CMP      r4,r1
        0x00208420:    d308        ..      BCC      0x208434 ; simp_ble_client_start_discovery + 40
;;;48         {
;;;49             PROFILE_PRINT_ERROR1("simp_ble_client_start_discovery: failed invalid conn_id %d", conn_id);
        0x00208422:    49f5        .I      LDR      r1,[pc,#980] ; [0x2087f8] = 0x88000e8
        0x00208424:    48f5        .H      LDR      r0,[pc,#980] ; [0x2087fc] = 0x21103302
        0x00208426:    4623        #F      MOV      r3,r4
        0x00208428:    2201        ."      MOVS     r2,#1
        0x0020842a:    3124        $1      ADDS     r1,r1,#0x24
        0x0020842c:    1e80        ..      SUBS     r0,r0,#2
        0x0020842e:    f5fffb16    ....    BL       log_buffer ; 0x7a5e
;;;50             return false;
        0x00208432:    e00d        ..      B        0x208450 ; simp_ble_client_start_discovery + 68
;;;51         }
;;;52         /* First clear handle cache. */
;;;53         //memset(&simp_table[conn_id], 0, sizeof(T_SIMP_LINK));
;;;54         simp_table[conn_id].disc_state = DISC_SIMP_START;
        0x00208434:    6880        .h      LDR      r0,[r0,#8]
        0x00208436:    eb0402c4    ....    ADD      r2,r4,r4,LSL #3
        0x0020843a:    2101        .!      MOVS     r1,#1
        0x0020843c:    f8001012    ....    STRB     r1,[r0,r2,LSL #1]
;;;55         if (client_by_uuid_srv_discovery(conn_id, simp_client,
        0x00208440:    48f0        .H      LDR      r0,[pc,#960] ; [0x208804] = 0x20cf4c
        0x00208442:    f64f72e0    O..r    MOV      r2,#0xffe0
        0x00208446:    7801        .x      LDRB     r1,[r0,#0]
        0x00208448:    4620         F      MOV      r0,r4
        0x0020844a:    f646f86d    F.m.    BL       client_by_uuid_srv_discovery ; 0x4e528
        0x0020844e:    b108        ..      CBZ      r0,0x208454 ; simp_ble_client_start_discovery + 72
        0x00208450:    2000        .       MOVS     r0,#0
        0x00208452:    bd10        ..      POP      {r4,pc}
;;;56                                          GATT_UUID_SIMPLE_PROFILE) == GAP_CAUSE_SUCCESS)
;;;57         {
;;;58             return true;
        0x00208454:    2001        .       MOVS     r0,#1
;;;59         }
;;;60         return false;
;;;61     }
        0x00208456:    bd10        ..      POP      {r4,pc}
    simp_ble_client_read_by_handle
;;;62     
;;;63     /**
;;;64       * @brief  Used by application, to read data from server by using handles.
;;;65       * @param[in]  conn_id connection ID.
;;;66       * @param[in]  read_type one of characteristic that has the readable property.
;;;67       * @retval true send request to upper stack success.
;;;68       * @retval false send request to upper stack failed.
;;;69       */
;;;70     bool simp_ble_client_read_by_handle(uint8_t conn_id, T_SIMP_READ_TYPE read_type)
;;;71     {
        0x00208458:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020845c:    4ae8        .J      LDR      r2,[pc,#928] ; [0x208800] = 0x20cfcc
;;; .\..\..\..\src\ble\profile\client\simple_ble_client.c (71)
        0x0020845e:    4606        .F      MOV      r6,r0
        0x00208460:    2400        .$      MOVS     r4,#0
        0x00208462:    7810        .x      LDRB     r0,[r2,#0]
        0x00208464:    4286        .B      CMP      r6,r0
        0x00208466:    d306        ..      BCC      0x208476 ; simp_ble_client_read_by_handle + 30
;;;72         bool hdl_valid = false;
;;;73         uint16_t  handle;
;;;74         if (conn_id >= simp_link_num)
;;;75         {
;;;76             PROFILE_PRINT_ERROR1("simp_ble_client_read_by_handle: failed invalid conn_id %d", conn_id);
        0x00208468:    49e3        .I      LDR      r1,[pc,#908] ; [0x2087f8] = 0x88000e8
        0x0020846a:    48e4        .H      LDR      r0,[pc,#912] ; [0x2087fc] = 0x21103302
        0x0020846c:    2201        ."      MOVS     r2,#1
        0x0020846e:    3164        d1      ADDS     r1,r1,#0x64
        0x00208470:    4633        3F      MOV      r3,r6
        0x00208472:    1e80        ..      SUBS     r0,r0,#2
        0x00208474:    e00b        ..      B        0x20848e ; simp_ble_client_read_by_handle + 54
        0x00208476:    48e4        .H      LDR      r0,[pc,#912] ; [0x208808] = 0x21103002
        0x00208478:    eb0603c6    ....    ADD      r3,r6,r6,LSL #3
        0x0020847c:    b151        Q.      CBZ      r1,0x208494 ; simp_ble_client_read_by_handle + 60
        0x0020847e:    2901        .)      CMP      r1,#1
        0x00208480:    d00d        ..      BEQ      0x20849e ; simp_ble_client_read_by_handle + 70
        0x00208482:    2902        .)      CMP      r1,#2
        0x00208484:    d010        ..      BEQ      0x2084a8 ; simp_ble_client_read_by_handle + 80
        0x00208486:    460b        .F      MOV      r3,r1
        0x00208488:    49db        .I      LDR      r1,[pc,#876] ; [0x2087f8] = 0x88000e8
        0x0020848a:    2201        ."      MOVS     r2,#1
        0x0020848c:    31a4        .1      ADDS     r1,r1,#0xa4
        0x0020848e:    f5fffae6    ....    BL       log_buffer ; 0x7a5e
        0x00208492:    e02c        ,.      B        0x2084ee ; simp_ble_client_read_by_handle + 150
;;;77             return false;
;;;78         }
;;;79     
;;;80         switch (read_type)
;;;81         {
;;;82         case SIMP_READ_V1_READ:
;;;83             if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V1_READ])
        0x00208494:    6892        .h      LDR      r2,[r2,#8]
        0x00208496:    eb020243    ..C.    ADD      r2,r2,r3,LSL #1
        0x0020849a:    88d2        ..      LDRH     r2,[r2,#6]
        0x0020849c:    e008        ..      B        0x2084b0 ; simp_ble_client_read_by_handle + 88
;;;84             {
;;;85                 handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V1_READ];
;;;86                 hdl_valid = true;
;;;87             }
;;;88             break;
;;;89         case SIMP_READ_V3_NOTIFY_CCCD:
;;;90             if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD])
        0x0020849e:    6892        .h      LDR      r2,[r2,#8]
        0x002084a0:    eb020243    ..C.    ADD      r2,r2,r3,LSL #1
        0x002084a4:    8992        ..      LDRH     r2,[r2,#0xc]
        0x002084a6:    e003        ..      B        0x2084b0 ; simp_ble_client_read_by_handle + 88
;;;91             {
;;;92                 handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD];
;;;93                 hdl_valid = true;
;;;94             }
;;;95             break;
;;;96         case SIMP_READ_V4_INDICATE_CCCD:
;;;97             if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD])
        0x002084a8:    6892        .h      LDR      r2,[r2,#8]
        0x002084aa:    eb020243    ..C.    ADD      r2,r2,r3,LSL #1
        0x002084ae:    8a12        ..      LDRH     r2,[r2,#0x10]
        0x002084b0:    b10a        ..      CBZ      r2,0x2084b6 ; simp_ble_client_read_by_handle + 94
;;;98             {
;;;99                 handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD];
        0x002084b2:    4615        .F      MOV      r5,r2
;;;100                hdl_valid = true;
        0x002084b4:    2401        .$      MOVS     r4,#1
;;;101            }
;;;102            break;
;;;103    
;;;104        default:
;;;105    		APP_PRINT_INFO1("vsop----read_by_handle------return=%d",read_type); 		
;;;106            return false;
;;;107        }
;;;108    	APP_PRINT_INFO1("vsop----read_by_handle------read_type=%d",read_type); 
        0x002084b6:    460b        .F      MOV      r3,r1
        0x002084b8:    49cf        .I      LDR      r1,[pc,#828] ; [0x2087f8] = 0x88000e8
        0x002084ba:    2201        ."      MOVS     r2,#1
        0x002084bc:    31d0        .1      ADDS     r1,r1,#0xd0
        0x002084be:    4607        .F      MOV      r7,r0
        0x002084c0:    f5fffacd    ....    BL       log_buffer ; 0x7a5e
;;;109    
;;;110        if (hdl_valid)
        0x002084c4:    b16c        l.      CBZ      r4,0x2084e2 ; simp_ble_client_read_by_handle + 138
;;;111        {
;;;112        	APP_PRINT_INFO1("vsop----read_by_handle------hdl_valid=%d",hdl_valid); 
        0x002084c6:    49cc        .I      LDR      r1,[pc,#816] ; [0x2087f8] = 0x88000e8
        0x002084c8:    4623        #F      MOV      r3,r4
        0x002084ca:    2201        ."      MOVS     r2,#1
        0x002084cc:    31fc        .1      ADDS     r1,r1,#0xfc
        0x002084ce:    4638        8F      MOV      r0,r7
        0x002084d0:    f5fffac5    ....    BL       log_buffer ; 0x7a5e
;;;113            if (client_attr_read(conn_id, simp_client, handle) == GAP_CAUSE_SUCCESS)
        0x002084d4:    48cb        .H      LDR      r0,[pc,#812] ; [0x208804] = 0x20cf4c
        0x002084d6:    462a        *F      MOV      r2,r5
        0x002084d8:    7801        .x      LDRB     r1,[r0,#0]
        0x002084da:    4630        0F      MOV      r0,r6
        0x002084dc:    f646f8e9    F...    BL       client_attr_read ; 0x4e6b2
        0x002084e0:    b140        @.      CBZ      r0,0x2084f4 ; simp_ble_client_read_by_handle + 156
        0x002084e2:    48c9        .H      LDR      r0,[pc,#804] ; [0x208808] = 0x21103002
        0x002084e4:    2200        ."      MOVS     r2,#0
        0x002084e6:    49c9        .I      LDR      r1,[pc,#804] ; [0x20880c] = 0x880023c
        0x002084e8:    1e40        @.      SUBS     r0,r0,#1
        0x002084ea:    f5fffab8    ....    BL       log_buffer ; 0x7a5e
        0x002084ee:    2000        .       MOVS     r0,#0
        0x002084f0:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;114            {
;;;115               	APP_PRINT_INFO1("vsop----read_by_handle------okkkkk=%d",hdl_valid); 
        0x002084f4:    49c5        .I      LDR      r1,[pc,#788] ; [0x20880c] = 0x880023c
        0x002084f6:    4623        #F      MOV      r3,r4
        0x002084f8:    2201        ."      MOVS     r2,#1
        0x002084fa:    392c        ,9      SUBS     r1,r1,#0x2c
        0x002084fc:    4638        8F      MOV      r0,r7
        0x002084fe:    f5fffaae    ....    BL       log_buffer ; 0x7a5e
;;;116                return true;
        0x00208502:    2001        .       MOVS     r0,#1
;;;117            }
;;;118        }
;;;119    
;;;120        APP_PRINT_WARN0("simp_ble_client_read_by_handle: Request fail! Please check!");
;;;121        return false;
;;;122    }
        0x00208504:    e7f4        ..      B        0x2084f0 ; simp_ble_client_read_by_handle + 152
    simp_ble_client_read_by_uuid
;;;123    
;;;124    /**
;;;125      * @brief  Used by application, to read data from server by using UUIDs.
;;;126      * @param[in]  conn_id connection ID.
;;;127      * @param[in]  read_type one of characteristic that has the readable property.
;;;128      * @retval true send request to upper stack success.
;;;129      * @retval false send request to upper stack failed.
;;;130      */
;;;131    bool simp_ble_client_read_by_uuid(uint8_t conn_id, T_SIMP_READ_TYPE read_type)
;;;132    {
        0x00208506:    e92d41fc    -..A    PUSH     {r2-r8,lr}
        0x0020850a:    4fbd        .O      LDR      r7,[pc,#756] ; [0x208800] = 0x20cfcc
        0x0020850c:    4606        .F      MOV      r6,r0
        0x0020850e:    460d        .F      MOV      r5,r1
        0x00208510:    7838        8x      LDRB     r0,[r7,#0]
        0x00208512:    4286        .B      CMP      r6,r0
        0x00208514:    d308        ..      BCC      0x208528 ; simp_ble_client_read_by_uuid + 34
;;;133        uint16_t start_handle;
;;;134        uint16_t end_handle;
;;;135        uint16_t  uuid16;
;;;136        if (conn_id >= simp_link_num)
;;;137        {
;;;138            PROFILE_PRINT_ERROR1("simp_ble_client_read_by_uuid: failed invalid conn_id %d", conn_id);
        0x00208516:    49bd        .I      LDR      r1,[pc,#756] ; [0x20880c] = 0x880023c
        0x00208518:    48b8        .H      LDR      r0,[pc,#736] ; [0x2087fc] = 0x21103302
        0x0020851a:    4633        3F      MOV      r3,r6
        0x0020851c:    2201        ."      MOVS     r2,#1
        0x0020851e:    3140        @1      ADDS     r1,r1,#0x40
        0x00208520:    1e80        ..      SUBS     r0,r0,#2
        0x00208522:    f5fffa9c    ....    BL       log_buffer ; 0x7a5e
;;;139            return false;
        0x00208526:    e036        6.      B        0x208596 ; simp_ble_client_read_by_uuid + 144
;;;140        }
;;;141    	APP_PRINT_INFO1("vsop----read_by_uuid------read_type=%d",read_type); 
        0x00208528:    460b        .F      MOV      r3,r1
        0x0020852a:    49b8        .I      LDR      r1,[pc,#736] ; [0x20880c] = 0x880023c
        0x0020852c:    f8df82d8    ....    LDR      r8,[pc,#728] ; [0x208808] = 0x21103002
        0x00208530:    2201        ."      MOVS     r2,#1
        0x00208532:    317c        |1      ADDS     r1,r1,#0x7c
        0x00208534:    4640        @F      MOV      r0,r8
        0x00208536:    f5fffa92    ....    BL       log_buffer ; 0x7a5e
        0x0020853a:    eb0600c6    ....    ADD      r0,r6,r6,LSL #3
;;;142    
;;;143        switch (read_type)
        0x0020853e:    b135        5.      CBZ      r5,0x20854e ; simp_ble_client_read_by_uuid + 72
        0x00208540:    f6421402    B...    MOV      r4,#0x2902
        0x00208544:    2d01        .-      CMP      r5,#1
        0x00208546:    d00a        ..      BEQ      0x20855e ; simp_ble_client_read_by_uuid + 88
        0x00208548:    2d02        .-      CMP      r5,#2
        0x0020854a:    d124        $.      BNE      0x208596 ; simp_ble_client_read_by_uuid + 144
        0x0020854c:    e013        ..      B        0x208576 ; simp_ble_client_read_by_uuid + 112
;;;144        {
;;;145        case SIMP_READ_V1_READ:
;;;146            start_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_SRV_START];
        0x0020854e:    68b9        .h      LDR      r1,[r7,#8]
        0x00208550:    f64f74e5    O..t    MOV      r4,#0xffe5
        0x00208554:    eb010040    ..@.    ADD      r0,r1,r0,LSL #1
        0x00208558:    8847        G.      LDRH     r7,[r0,#2]
;;;147            end_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_SRV_END];
        0x0020855a:    8885        ..      LDRH     r5,[r0,#4]
;;;148            uuid16 = GATT_UUID_CHAR_SIMPLE_V1_READ;
;;;149            break;
        0x0020855c:    e010        ..      B        0x208580 ; simp_ble_client_read_by_uuid + 122
;;;150        case SIMP_READ_V3_NOTIFY_CCCD:
;;;151            start_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V3_NOTIFY];
        0x0020855e:    68b9        .h      LDR      r1,[r7,#8]
        0x00208560:    2200        ."      MOVS     r2,#0
        0x00208562:    eb010040    ..@.    ADD      r0,r1,r0,LSL #1
        0x00208566:    49a9        .I      LDR      r1,[pc,#676] ; [0x20880c] = 0x880023c
        0x00208568:    8947        G.      LDRH     r7,[r0,#0xa]
;;;152            end_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE];
        0x0020856a:    89c5        ..      LDRH     r5,[r0,#0xe]
;;;153            uuid16 = GATT_UUID_CHAR_CLIENT_CONFIG;
;;;154       		APP_PRINT_INFO0("vsop----read_by_uuid------ SIMP_READ_V3_NOTIFY_CCCD");		 
        0x0020856c:    31a8        .1      ADDS     r1,r1,#0xa8
        0x0020856e:    4640        @F      MOV      r0,r8
        0x00208570:    f5fffa75    ..u.    BL       log_buffer ; 0x7a5e
;;;155            break;
        0x00208574:    e004        ..      B        0x208580 ; simp_ble_client_read_by_uuid + 122
;;;156        case SIMP_READ_V4_INDICATE_CCCD:
;;;157            start_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE];
        0x00208576:    68b9        .h      LDR      r1,[r7,#8]
        0x00208578:    eb010040    ..@.    ADD      r0,r1,r0,LSL #1
        0x0020857c:    89c7        ..      LDRH     r7,[r0,#0xe]
;;;158            end_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_SRV_END];
        0x0020857e:    8885        ..      LDRH     r5,[r0,#4]
;;;159            uuid16 = GATT_UUID_CHAR_CLIENT_CONFIG;
;;;160            break;
;;;161        default:
;;;162            return false;
;;;163        }
;;;164    
;;;165        if (client_attr_read_using_uuid(conn_id, simp_client, start_handle, end_handle,
        0x00208580:    2000        .       MOVS     r0,#0
        0x00208582:    e9cd4000    ...@    STRD     r4,r0,[sp,#0]
        0x00208586:    489f        .H      LDR      r0,[pc,#636] ; [0x208804] = 0x20cf4c
        0x00208588:    462b        +F      MOV      r3,r5
        0x0020858a:    463a        :F      MOV      r2,r7
        0x0020858c:    7801        .x      LDRB     r1,[r0,#0]
        0x0020858e:    4630        0F      MOV      r0,r6
        0x00208590:    f646f8bc    F...    BL       client_attr_read_using_uuid ; 0x4e70c
        0x00208594:    b110        ..      CBZ      r0,0x20859c ; simp_ble_client_read_by_uuid + 150
        0x00208596:    2000        .       MOVS     r0,#0
        0x00208598:    e8bd81fc    ....    POP      {r2-r8,pc}
;;;166                                        uuid16, NULL) == GAP_CAUSE_SUCCESS)
;;;167        {
;;;168            return true;
        0x0020859c:    2001        .       MOVS     r0,#1
;;;169        }
;;;170        return false;
;;;171    }
        0x0020859e:    e7fb        ..      B        0x208598 ; simp_ble_client_read_by_uuid + 146
    simp_ble_client_set_v3_notify
;;;172    
;;;173    /**
;;;174      * @brief  Used by application, to enable or disable the notification of peer server's V3 Notify Characteristic.
;;;175      * @param[in]  conn_id connection ID.
;;;176      * @param[in]  notify 0--disable the notification, 1--enable the notification.
;;;177      * @retval true send request to upper stack success.
;;;178      * @retval false send request to upper stack failed.
;;;179      */
;;;180    bool simp_ble_client_set_v3_notify(uint8_t conn_id, bool notify)
;;;181    {
        0x002085a0:    b5fe        ..      PUSH     {r1-r7,lr}
        0x002085a2:    4f97        .O      LDR      r7,[pc,#604] ; [0x208800] = 0x20cfcc
;;; .\..\..\..\src\ble\profile\client\simple_ble_client.c (181)
        0x002085a4:    4604        .F      MOV      r4,r0
        0x002085a6:    460e        .F      MOV      r6,r1
        0x002085a8:    7838        8x      LDRB     r0,[r7,#0]
        0x002085aa:    4284        .B      CMP      r4,r0
        0x002085ac:    d308        ..      BCC      0x2085c0 ; simp_ble_client_set_v3_notify + 32
;;;182    #if 0
;;;183        if (conn_id >= simp_link_num)
;;;184        {
;;;185            PROFILE_PRINT_ERROR1("simp_ble_client_set_v3_notify: failed invalid conn_id %d", conn_id);
;;;186            return false;
;;;187        }
;;;188    	APP_PRINT_INFO0("vsop----simp_ble_client_set_v3_notify enter");	
;;;189    
;;;190        if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD])
;;;191        {
;;;192            uint16_t handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD];
;;;193            uint16_t length = sizeof(uint16_t);
;;;194            uint16_t cccd_bits = notify ? 1 : 0;
;;;195            if (client_attr_write(conn_id, simp_client, GATT_WRITE_TYPE_REQ, handle,
;;;196                                  length, (uint8_t *)&cccd_bits) == GAP_CAUSE_SUCCESS)
;;;197            {
;;;198            	APP_PRINT_INFO0("vsop----simp_ble_client_set_v3_notify enter---write fail");	
;;;199                return true;
;;;200            }
;;;201        }
;;;202    
;;;203        APP_PRINT_WARN0("simp_ble_client_set_v3_notify: Request fail! Please check!");
;;;204        return false;
;;;205    #else
;;;206    	if (conn_id >= simp_link_num)
;;;207    	{
;;;208    		PROFILE_PRINT_ERROR1("simp_ble_client_set_v3_notify: failed invalid conn_id %d", conn_id);
        0x002085ae:    4997        .I      LDR      r1,[pc,#604] ; [0x20880c] = 0x880023c
        0x002085b0:    4892        .H      LDR      r0,[pc,#584] ; [0x2087fc] = 0x21103302
        0x002085b2:    4623        #F      MOV      r3,r4
        0x002085b4:    2201        ."      MOVS     r2,#1
        0x002085b6:    31e0        .1      ADDS     r1,r1,#0xe0
        0x002085b8:    1e80        ..      SUBS     r0,r0,#2
        0x002085ba:    f5fffa50    ..P.    BL       log_buffer ; 0x7a5e
;;;209    		return false;
        0x002085be:    e024        $.      B        0x20860a ; simp_ble_client_set_v3_notify + 106
;;;210    	}
;;;211    	APP_PRINT_INFO1("vsop----simp_ble_client_set_v3_notify =	0x%02X",simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD]);	
        0x002085c0:    68b8        .h      LDR      r0,[r7,#8]
        0x002085c2:    eb0405c4    ....    ADD      r5,r4,r4,LSL #3
        0x002085c6:    eb000045    ..E.    ADD      r0,r0,r5,LSL #1
        0x002085ca:    2201        ."      MOVS     r2,#1
        0x002085cc:    8a03        ..      LDRH     r3,[r0,#0x10]
        0x002085ce:    4990        .I      LDR      r1,[pc,#576] ; [0x208810] = 0x8800358
        0x002085d0:    488d        .H      LDR      r0,[pc,#564] ; [0x208808] = 0x21103002
        0x002085d2:    f5fffa44    ..D.    BL       log_buffer ; 0x7a5e
;;;212    
;;;213    	if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD])
        0x002085d6:    68b8        .h      LDR      r0,[r7,#8]
        0x002085d8:    eb000045    ..E.    ADD      r0,r0,r5,LSL #1
        0x002085dc:    8a01        ..      LDRH     r1,[r0,#0x10]
        0x002085de:    b169        i.      CBZ      r1,0x2085fc ; simp_ble_client_set_v3_notify + 92
;;;214    	{
;;;215    		uint16_t handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD]; 
        0x002085e0:    b28b        ..      UXTH     r3,r1
;;;216    		uint16_t length = sizeof(uint16_t);
        0x002085e2:    2002        .       MOVS     r0,#2
        0x002085e4:    a902        ..      ADD      r1,sp,#8
        0x002085e6:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x002085ea:    4886        .H      LDR      r0,[pc,#536] ; [0x208804] = 0x20cf4c
;;;217    		uint16_t cccd_bits = notify ? 1 : 0; 
        0x002085ec:    f8ad6008    ...`    STRH     r6,[sp,#8]
;;;218    		if (client_attr_write(conn_id, simp_client, GATT_WRITE_TYPE_REQ, handle,
        0x002085f0:    2201        ."      MOVS     r2,#1
        0x002085f2:    7801        .x      LDRB     r1,[r0,#0]
        0x002085f4:    4620         F      MOV      r0,r4
        0x002085f6:    f646f953    F.S.    BL       client_attr_write ; 0x4e8a0
        0x002085fa:    b140        @.      CBZ      r0,0x20860e ; simp_ble_client_set_v3_notify + 110
;;;219    							  length, (uint8_t *)&cccd_bits) == GAP_CAUSE_SUCCESS)
;;;220    		{
;;;221    			return true;
;;;222    		}
;;;223    	}
;;;224    
;;;225    	APP_PRINT_WARN0("simp_ble_client_set_v3_notify: Request fail! Please check!");
        0x002085fc:    4984        .I      LDR      r1,[pc,#528] ; [0x208810] = 0x8800358
        0x002085fe:    4882        .H      LDR      r0,[pc,#520] ; [0x208808] = 0x21103002
        0x00208600:    2200        ."      MOVS     r2,#0
        0x00208602:    3134        41      ADDS     r1,r1,#0x34
        0x00208604:    1e40        @.      SUBS     r0,r0,#1
        0x00208606:    f5fffa2a    ..*.    BL       log_buffer ; 0x7a5e
;;;226    	return false;
        0x0020860a:    2000        .       MOVS     r0,#0
;;;227    
;;;228    #endif
;;;229    }
        0x0020860c:    bdfe        ..      POP      {r1-r7,pc}
        0x0020860e:    2001        .       MOVS     r0,#1
        0x00208610:    bdfe        ..      POP      {r1-r7,pc}
    simp_ble_client_set_v4_ind
;;;230    
;;;231    /**
;;;232      * @brief  Used by application, to enable or disable the indication of peer server's V4 Indicate Characteristic.
;;;233      * @param[in]  conn_id connection ID.
;;;234      * @param[in]  ind 0--disable the indication, 1--enable the indication.
;;;235      * @retval true send request to upper stack success.
;;;236      * @retval false send request to upper stack failed.
;;;237      */
;;;238    bool simp_ble_client_set_v4_ind(uint8_t conn_id, bool ind)
;;;239    {
        0x00208612:    b5fe        ..      PUSH     {r1-r7,lr}
        0x00208614:    4f7a        zO      LDR      r7,[pc,#488] ; [0x208800] = 0x20cfcc
        0x00208616:    4604        .F      MOV      r4,r0
        0x00208618:    460e        .F      MOV      r6,r1
        0x0020861a:    7838        8x      LDRB     r0,[r7,#0]
        0x0020861c:    4284        .B      CMP      r4,r0
        0x0020861e:    d308        ..      BCC      0x208632 ; simp_ble_client_set_v4_ind + 32
;;;240        if (conn_id >= simp_link_num)
;;;241        {
;;;242            PROFILE_PRINT_ERROR1("simp_ble_client_set_v4_ind: failed invalid conn_id %d", conn_id);
        0x00208620:    497b        {I      LDR      r1,[pc,#492] ; [0x208810] = 0x8800358
        0x00208622:    4876        vH      LDR      r0,[pc,#472] ; [0x2087fc] = 0x21103302
        0x00208624:    4623        #F      MOV      r3,r4
        0x00208626:    2201        ."      MOVS     r2,#1
        0x00208628:    3174        t1      ADDS     r1,r1,#0x74
        0x0020862a:    1e80        ..      SUBS     r0,r0,#2
        0x0020862c:    f5fffa17    ....    BL       log_buffer ; 0x7a5e
;;;243            return false;
        0x00208630:    e029        ).      B        0x208686 ; simp_ble_client_set_v4_ind + 116
;;;244        }
;;;245    	APP_PRINT_INFO1("vsop----HDL_SIMBLE_V4_INDICATE_CCCD =  0x%02X",simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD]);	
        0x00208632:    68b8        .h      LDR      r0,[r7,#8]
        0x00208634:    eb0405c4    ....    ADD      r5,r4,r4,LSL #3
        0x00208638:    eb000045    ..E.    ADD      r0,r0,r5,LSL #1
        0x0020863c:    4974        tI      LDR      r1,[pc,#464] ; [0x208810] = 0x8800358
        0x0020863e:    8a03        ..      LDRH     r3,[r0,#0x10]
        0x00208640:    2201        ."      MOVS     r2,#1
        0x00208642:    31b0        .1      ADDS     r1,r1,#0xb0
        0x00208644:    4870        pH      LDR      r0,[pc,#448] ; [0x208808] = 0x21103002
        0x00208646:    f5fffa0a    ....    BL       log_buffer ; 0x7a5e
;;;246    
;;;247        if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD])
        0x0020864a:    68b8        .h      LDR      r0,[r7,#8]
        0x0020864c:    eb000045    ..E.    ADD      r0,r0,r5,LSL #1
        0x00208650:    8a01        ..      LDRH     r1,[r0,#0x10]
        0x00208652:    b189        ..      CBZ      r1,0x208678 ; simp_ble_client_set_v4_ind + 102
;;;248        {
;;;249            uint16_t handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD]; 
        0x00208654:    b28b        ..      UXTH     r3,r1
;;;250            uint16_t length = sizeof(uint16_t);
        0x00208656:    2102        .!      MOVS     r1,#2
;;;251            uint16_t cccd_bits = ind ? 2 : 0;
        0x00208658:    b10e        ..      CBZ      r6,0x20865e ; simp_ble_client_set_v4_ind + 76
        0x0020865a:    2002        .       MOVS     r0,#2
        0x0020865c:    e000        ..      B        0x208660 ; simp_ble_client_set_v4_ind + 78
        0x0020865e:    2000        .       MOVS     r0,#0
        0x00208660:    f8ad0008    ....    STRH     r0,[sp,#8]
;;;252            if (client_attr_write(conn_id, simp_client, GATT_WRITE_TYPE_REQ, handle,
        0x00208664:    a802        ..      ADD      r0,sp,#8
        0x00208666:    e9cd1000    ....    STRD     r1,r0,[sp,#0]
        0x0020866a:    4866        fH      LDR      r0,[pc,#408] ; [0x208804] = 0x20cf4c
        0x0020866c:    2201        ."      MOVS     r2,#1
        0x0020866e:    7801        .x      LDRB     r1,[r0,#0]
        0x00208670:    4620         F      MOV      r0,r4
        0x00208672:    f646f915    F...    BL       client_attr_write ; 0x4e8a0
        0x00208676:    b140        @.      CBZ      r0,0x20868a ; simp_ble_client_set_v4_ind + 120
;;;253                                  length, (uint8_t *)&cccd_bits) == GAP_CAUSE_SUCCESS)
;;;254            {
;;;255                return true;
;;;256            }
;;;257        }
;;;258    
;;;259        APP_PRINT_WARN0("simp_ble_client_set_v4_ind: Request fail! Please check!");
        0x00208678:    4965        eI      LDR      r1,[pc,#404] ; [0x208810] = 0x8800358
        0x0020867a:    4863        cH      LDR      r0,[pc,#396] ; [0x208808] = 0x21103002
        0x0020867c:    2200        ."      MOVS     r2,#0
        0x0020867e:    31e4        .1      ADDS     r1,r1,#0xe4
        0x00208680:    1e40        @.      SUBS     r0,r0,#1
        0x00208682:    f5fff9ec    ....    BL       log_buffer ; 0x7a5e
;;;260        return false;
        0x00208686:    2000        .       MOVS     r0,#0
;;;261    }
        0x00208688:    bdfe        ..      POP      {r1-r7,pc}
        0x0020868a:    2001        .       MOVS     r0,#1
        0x0020868c:    bdfe        ..      POP      {r1-r7,pc}
    simp_ble_client_write_v2_char
;;;262    
;;;263    /**
;;;264      * @brief  Used by application, to write data of V2 write Characteristic.
;;;265      * @param[in]  conn_id connection ID.
;;;266      * @param[in]  length  write data length
;;;267      * @param[in]  p_value point the value to write
;;;268      * @param[in]  type    write type.
;;;269      * @retval true send request to upper stack success.
;;;270      * @retval false send request to upper stack failed.
;;;271      */
;;;272    bool simp_ble_client_write_v2_char(uint8_t conn_id, uint16_t length, uint8_t *p_value,
;;;273                                       T_GATT_WRITE_TYPE type)
;;;274    {
        0x0020868e:    b57c        |.      PUSH     {r2-r6,lr}
        0x00208690:    4615        .F      MOV      r5,r2
        0x00208692:    4a5b        [J      LDR      r2,[pc,#364] ; [0x208800] = 0x20cfcc
        0x00208694:    461c        .F      MOV      r4,r3
        0x00208696:    7813        .x      LDRB     r3,[r2,#0]
        0x00208698:    4298        .B      CMP      r0,r3
        0x0020869a:    d307        ..      BCC      0x2086ac ; simp_ble_client_write_v2_char + 30
;;;275        if (conn_id >= simp_link_num)
;;;276        {
;;;277            PROFILE_PRINT_ERROR1("simp_ble_client_write_v2_char: failed invalid conn_id %d", conn_id);
        0x0020869c:    4603        .F      MOV      r3,r0
        0x0020869e:    4857        WH      LDR      r0,[pc,#348] ; [0x2087fc] = 0x21103302
        0x002086a0:    2201        ."      MOVS     r2,#1
        0x002086a2:    495c        \I      LDR      r1,[pc,#368] ; [0x208814] = 0x8800478
        0x002086a4:    1e80        ..      SUBS     r0,r0,#2
        0x002086a6:    f5fff9da    ....    BL       log_buffer ; 0x7a5e
;;;278            return false;
        0x002086aa:    e015        ..      B        0x2086d8 ; simp_ble_client_write_v2_char + 74
;;;279        }
;;;280        if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V2_WRITE])
        0x002086ac:    6892        .h      LDR      r2,[r2,#8]
        0x002086ae:    eb0003c0    ....    ADD      r3,r0,r0,LSL #3
        0x002086b2:    eb020243    ..C.    ADD      r2,r2,r3,LSL #1
        0x002086b6:    8913        ..      LDRH     r3,[r2,#8]
        0x002086b8:    b13b        ;.      CBZ      r3,0x2086ca ; simp_ble_client_write_v2_char + 60
;;;281        {
;;;282            uint16_t handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V2_WRITE];
;;;283            if (client_attr_write(conn_id, simp_client, type, handle,
        0x002086ba:    e9cd1500    ....    STRD     r1,r5,[sp,#0]
        0x002086be:    4951        QI      LDR      r1,[pc,#324] ; [0x208804] = 0x20cf4c
        0x002086c0:    4622        "F      MOV      r2,r4
        0x002086c2:    7809        .x      LDRB     r1,[r1,#0]
        0x002086c4:    f646f8ec    F...    BL       client_attr_write ; 0x4e8a0
        0x002086c8:    b140        @.      CBZ      r0,0x2086dc ; simp_ble_client_write_v2_char + 78
;;;284                                  length, p_value) == GAP_CAUSE_SUCCESS)
;;;285            {
;;;286                return true;
;;;287            }
;;;288        }
;;;289    
;;;290        APP_PRINT_WARN0("simp_ble_client_write_v2_char: Request fail! Please check!");
        0x002086ca:    4952        RI      LDR      r1,[pc,#328] ; [0x208814] = 0x8800478
        0x002086cc:    484e        NH      LDR      r0,[pc,#312] ; [0x208808] = 0x21103002
        0x002086ce:    2200        ."      MOVS     r2,#0
        0x002086d0:    313c        <1      ADDS     r1,r1,#0x3c
        0x002086d2:    1e40        @.      SUBS     r0,r0,#1
        0x002086d4:    f5fff9c3    ....    BL       log_buffer ; 0x7a5e
;;;291        return false;
        0x002086d8:    2000        .       MOVS     r0,#0
;;;292    }
        0x002086da:    bd7c        |.      POP      {r2-r6,pc}
        0x002086dc:    2001        .       MOVS     r0,#1
        0x002086de:    bd7c        |.      POP      {r2-r6,pc}
    simp_ble_client_get_hdl_cache
;;;293    
;;;294    /**
;;;295      * @brief  Used by application, to get handle cache.
;;;296      * @param[in]  conn_id connection ID.
;;;297      * @param[in]  p_hdl_cache pointer of the handle cache table
;;;298      * @param[in]  len the length of handle cache table
;;;299      * @retval true success.
;;;300      * @retval false failed.
;;;301      */
;;;302    bool simp_ble_client_get_hdl_cache(uint8_t conn_id, uint16_t *p_hdl_cache, uint8_t len)
;;;303    {
        0x002086e0:    b570        p.      PUSH     {r4-r6,lr}
        0x002086e2:    460e        .F      MOV      r6,r1
;;;304        if (conn_id >= simp_link_num)
        0x002086e4:    4946        FI      LDR      r1,[pc,#280] ; [0x208800] = 0x20cfcc
        0x002086e6:    4d45        EM      LDR      r5,[pc,#276] ; [0x2087fc] = 0x21103302
        0x002086e8:    780b        .x      LDRB     r3,[r1,#0]
        0x002086ea:    1ead        ..      SUBS     r5,r5,#2
        0x002086ec:    4298        .B      CMP      r0,r3
        0x002086ee:    d304        ..      BCC      0x2086fa ; simp_ble_client_get_hdl_cache + 26
;;;305        {
;;;306            PROFILE_PRINT_ERROR1("simp_ble_client_get_hdl_cache: failed invalid conn_id %d", conn_id);
        0x002086f0:    4948        HI      LDR      r1,[pc,#288] ; [0x208814] = 0x8800478
        0x002086f2:    2201        ."      MOVS     r2,#1
        0x002086f4:    4603        .F      MOV      r3,r0
        0x002086f6:    317c        |1      ADDS     r1,r1,#0x7c
;;;307            return false;
        0x002086f8:    e011        ..      B        0x20871e ; simp_ble_client_get_hdl_cache + 62
;;;308        }
;;;309        if (simp_table[conn_id].disc_state != DISC_SIMP_DONE)
        0x002086fa:    688b        .h      LDR      r3,[r1,#8]
        0x002086fc:    eb0000c0    ....    ADD      r0,r0,r0,LSL #3
        0x00208700:    f8134010    ...@    LDRB     r4,[r3,r0,LSL #1]
        0x00208704:    2c02        .,      CMP      r4,#2
        0x00208706:    d004        ..      BEQ      0x208712 ; simp_ble_client_get_hdl_cache + 50
        0x00208708:    4942        BI      LDR      r1,[pc,#264] ; [0x208814] = 0x8800478
        0x0020870a:    2201        ."      MOVS     r2,#1
        0x0020870c:    4623        #F      MOV      r3,r4
;;;310        {
;;;311            PROFILE_PRINT_ERROR1("simp_ble_client_get_hdl_cache: failed invalid state %d",
        0x0020870e:    31b8        .1      ADDS     r1,r1,#0xb8
;;;312                                 simp_table[conn_id].disc_state);
;;;313            return false;
        0x00208710:    e005        ..      B        0x20871e ; simp_ble_client_get_hdl_cache + 62
;;;314        }
;;;315        if (len != sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN)
        0x00208712:    2a10        .*      CMP      r2,#0x10
        0x00208714:    d008        ..      BEQ      0x208728 ; simp_ble_client_get_hdl_cache + 72
;;;316        {
;;;317            PROFILE_PRINT_ERROR1("simp_ble_client_get_hdl_cache: failed invalid len %d", len);
        0x00208716:    4613        .F      MOV      r3,r2
        0x00208718:    493e        >I      LDR      r1,[pc,#248] ; [0x208814] = 0x8800478
        0x0020871a:    2201        ."      MOVS     r2,#1
        0x0020871c:    31f4        .1      ADDS     r1,r1,#0xf4
        0x0020871e:    4628        (F      MOV      r0,r5
        0x00208720:    f5fff99d    ....    BL       log_buffer ; 0x7a5e
;;;318            return false;
        0x00208724:    2000        .       MOVS     r0,#0
        0x00208726:    bd70        p.      POP      {r4-r6,pc}
;;;319        }
;;;320        memcpy(p_hdl_cache, simp_table[conn_id].hdl_cache, len);
        0x00208728:    eb030140    ..@.    ADD      r1,r3,r0,LSL #1
        0x0020872c:    4630        0F      MOV      r0,r6
        0x0020872e:    1c89        ..      ADDS     r1,r1,#2
        0x00208730:    f651fbb3    Q...    BL       __aeabi_memcpy ; 0x59e9a
;;;321        return true;
        0x00208734:    2001        .       MOVS     r0,#1
;;;322    }
        0x00208736:    bd70        p.      POP      {r4-r6,pc}
    simp_ble_client_set_hdl_cache
;;;323    
;;;324    /**
;;;325      * @brief  Used by application, to set handle cache.
;;;326      * @param[in]  conn_id connection ID.
;;;327      * @param[in]  p_hdl_cache pointer of the handle cache table
;;;328      * @param[in]  len the length of handle cache table
;;;329      * @retval true success.
;;;330      * @retval false failed.
;;;331      */
;;;332    bool simp_ble_client_set_hdl_cache(uint8_t conn_id, uint16_t *p_hdl_cache, uint8_t len)
;;;333    {
        0x00208738:    b570        p.      PUSH     {r4-r6,lr}
;;;334        if (conn_id >= simp_link_num)
        0x0020873a:    4d31        1M      LDR      r5,[pc,#196] ; [0x208800] = 0x20cfcc
        0x0020873c:    4e2f        /N      LDR      r6,[pc,#188] ; [0x2087fc] = 0x21103302
        0x0020873e:    782b        +x      LDRB     r3,[r5,#0]
        0x00208740:    1eb6        ..      SUBS     r6,r6,#2
        0x00208742:    4298        .B      CMP      r0,r3
        0x00208744:    d303        ..      BCC      0x20874e ; simp_ble_client_set_hdl_cache + 22
;;;335        {
;;;336            PROFILE_PRINT_ERROR1("simp_ble_client_set_hdl_cache: failed invalid conn_id %d", conn_id);
        0x00208746:    4603        .F      MOV      r3,r0
        0x00208748:    2201        ."      MOVS     r2,#1
        0x0020874a:    4933        3I      LDR      r1,[pc,#204] ; [0x208818] = 0x88005a4
;;;337            return false;
        0x0020874c:    e00f        ..      B        0x20876e ; simp_ble_client_set_hdl_cache + 54
;;;338        }
;;;339        if (simp_table[conn_id].disc_state != DISC_SIMP_IDLE)
        0x0020874e:    eb0004c0    ....    ADD      r4,r0,r0,LSL #3
        0x00208752:    68a8        .h      LDR      r0,[r5,#8]
        0x00208754:    f8103014    ...0    LDRB     r3,[r0,r4,LSL #1]
        0x00208758:    b11b        ..      CBZ      r3,0x208762 ; simp_ble_client_set_hdl_cache + 42
;;;340        {
;;;341            PROFILE_PRINT_ERROR1("simp_ble_client_set_hdl_cache: failed invalid state %d",
        0x0020875a:    492f        /I      LDR      r1,[pc,#188] ; [0x208818] = 0x88005a4
        0x0020875c:    2201        ."      MOVS     r2,#1
        0x0020875e:    313c        <1      ADDS     r1,r1,#0x3c
;;;342                                 simp_table[conn_id].disc_state);
;;;343            return false;
        0x00208760:    e005        ..      B        0x20876e ; simp_ble_client_set_hdl_cache + 54
;;;344        }
;;;345        if (len != sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN)
        0x00208762:    2a10        .*      CMP      r2,#0x10
        0x00208764:    d008        ..      BEQ      0x208778 ; simp_ble_client_set_hdl_cache + 64
;;;346        {
;;;347            PROFILE_PRINT_ERROR1("simp_ble_client_set_hdl_cache: failed invalid len %d", len);
        0x00208766:    4613        .F      MOV      r3,r2
        0x00208768:    492b        +I      LDR      r1,[pc,#172] ; [0x208818] = 0x88005a4
        0x0020876a:    2201        ."      MOVS     r2,#1
        0x0020876c:    3178        x1      ADDS     r1,r1,#0x78
        0x0020876e:    4630        0F      MOV      r0,r6
        0x00208770:    f5fff975    ..u.    BL       log_buffer ; 0x7a5e
;;;348            return false;
        0x00208774:    2000        .       MOVS     r0,#0
        0x00208776:    bd70        p.      POP      {r4-r6,pc}
;;;349        }
;;;350        memcpy(simp_table[conn_id].hdl_cache, p_hdl_cache, len);
        0x00208778:    eb000044    ..D.    ADD      r0,r0,r4,LSL #1
        0x0020877c:    1c80        ..      ADDS     r0,r0,#2
        0x0020877e:    f651fb8c    Q...    BL       __aeabi_memcpy ; 0x59e9a
;;;351        simp_table[conn_id].disc_state = DISC_SIMP_DONE;
        0x00208782:    68a9        .h      LDR      r1,[r5,#8]
        0x00208784:    2002        .       MOVS     r0,#2
        0x00208786:    f8010014    ....    STRB     r0,[r1,r4,LSL #1]
;;;352        return true;
        0x0020878a:    2001        .       MOVS     r0,#1
;;;353    }
        0x0020878c:    bd70        p.      POP      {r4-r6,pc}
    simp_ble_client_discover_state_cb
;;;354    
;;;355    static bool simp_ble_client_start_char_discovery(uint8_t conn_id)
;;;356    {
;;;357        uint16_t start_handle;
;;;358        uint16_t end_handle;
;;;359    
;;;360        APP_PRINT_INFO0("simp_ble_client_start_simp_char_discovery");
;;;361        start_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_SRV_START];
;;;362        end_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_SRV_END];
;;;363        if (client_all_char_discovery(conn_id, simp_client, start_handle,
;;;364                                      end_handle) == GAP_CAUSE_SUCCESS)
;;;365        {
;;;366            return true;
;;;367        }
;;;368        return false;
;;;369    }
;;;370    
;;;371    static bool simp_ble_client_start_char_descriptor_discovery(uint8_t conn_id)
;;;372    {
;;;373        uint16_t start_handle;
;;;374        uint16_t end_handle;
;;;375    
;;;376        PROFILE_PRINT_INFO0("simp_ble_client_start_char_descriptor_discovery");
;;;377        start_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V3_NOTIFY];
;;;378        end_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_SRV_END];
;;;379        if (client_all_char_descriptor_discovery(conn_id, simp_client, start_handle,
;;;380                                                 end_handle) == GAP_CAUSE_SUCCESS)
;;;381        {
;;;382            return true;
;;;383        }
;;;384        return false;
;;;385    }
;;;386    static void simp_ble_client_discover_state_cb(uint8_t conn_id,  T_DISCOVERY_STATE discovery_state)
;;;387    {
        0x0020878e:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x00208792:    b086        ..      SUB      sp,sp,#0x18
        0x00208794:    4606        .F      MOV      r6,r0
        0x00208796:    2000        .       MOVS     r0,#0
        0x00208798:    f8dfa06c    ..l.    LDR      r10,[pc,#108] ; [0x208808] = 0x21103002
        0x0020879c:    4688        .F      MOV      r8,r1
;;;388        bool cb_flag = false;
;;;389        T_SIMP_CLIENT_CB_DATA cb_data;
;;;390        cb_data.cb_type = SIMP_CLIENT_CB_TYPE_DISC_STATE;
        0x0020879e:    f88d0000    ....    STRB     r0,[sp,#0]
;;;391    
;;;392        APP_PRINT_INFO1("simp_ble_client_discover_state_cb: discovery_state %d", discovery_state);
        0x002087a2:    460b        .F      MOV      r3,r1
        0x002087a4:    2201        ."      MOVS     r2,#1
        0x002087a6:    491d        .I      LDR      r1,[pc,#116] ; [0x20881c] = 0x88006b8
        0x002087a8:    4650        PF      MOV      r0,r10
        0x002087aa:    f5fff958    ..X.    BL       log_buffer ; 0x7a5e
;;;393        if (simp_table[conn_id].disc_state == DISC_SIMP_START)
        0x002087ae:    4f14        .O      LDR      r7,[pc,#80] ; [0x208800] = 0x20cfcc
        0x002087b0:    eb0604c6    ....    ADD      r4,r6,r6,LSL #3
        0x002087b4:    68b8        .h      LDR      r0,[r7,#8]
        0x002087b6:    f8101014    ....    LDRB     r1,[r0,r4,LSL #1]
        0x002087ba:    2901        .)      CMP      r1,#1
        0x002087bc:    d118        ..      BNE      0x2087f0 ; simp_ble_client_discover_state_cb + 98
;;;394        {
;;;395            uint16_t *hdl_cache;
;;;396            hdl_cache = simp_table[conn_id].hdl_cache;
        0x002087be:    eb000144    ..D.    ADD      r1,r0,r4,LSL #1
        0x002087c2:    2503        .%      MOVS     r5,#3
        0x002087c4:    f8df903c    ..<.    LDR      r9,[pc,#60] ; [0x208804] = 0x20cf4c
        0x002087c8:    1c89        ..      ADDS     r1,r1,#2
        0x002087ca:    f1b80f02    ....    CMP      r8,#2
        0x002087ce:    d027        '.      BEQ      0x208820 ; simp_ble_client_discover_state_cb + 146
        0x002087d0:    f1b80f06    ....    CMP      r8,#6
        0x002087d4:    d03a        :.      BEQ      0x20884c ; simp_ble_client_discover_state_cb + 190
        0x002087d6:    f1b80f0a    ....    CMP      r8,#0xa
        0x002087da:    d04c        L.      BEQ      0x208876 ; simp_ble_client_discover_state_cb + 232
        0x002087dc:    f1b80f0b    ....    CMP      r8,#0xb
        0x002087e0:    d04d        M.      BEQ      0x20887e ; simp_ble_client_discover_state_cb + 240
        0x002087e2:    490e        .I      LDR      r1,[pc,#56] ; [0x20881c] = 0x88006b8
        0x002087e4:    2200        ."      MOVS     r2,#0
        0x002087e6:    313c        <1      ADDS     r1,r1,#0x3c
        0x002087e8:    f1aa0002    ....    SUB      r0,r10,#2
        0x002087ec:    f5fff937    ..7.    BL       log_buffer ; 0x7a5e
        0x002087f0:    b006        ..      ADD      sp,sp,#0x18
        0x002087f2:    e8bd87f0    ....    POP      {r4-r10,pc}
    $d
        0x002087f6:    0000        ..      DCW    0
        0x002087f8:    088000e8    ....    DCD    142606568
        0x002087fc:    21103302    .3.!    DCD    554709762
        0x00208800:    0020cfcc    .. .    DCD    2150348
        0x00208804:    0020cf4c    L. .    DCD    2150220
        0x00208808:    21103002    .0.!    DCD    554708994
        0x0020880c:    0880023c    <...    DCD    142606908
        0x00208810:    08800358    X...    DCD    142607192
        0x00208814:    08800478    x...    DCD    142607480
        0x00208818:    088005a4    ....    DCD    142607780
        0x0020881c:    088006b8    ....    DCD    142608056
    $t
;;;397    
;;;398            switch (discovery_state)
;;;399            {
;;;400            case DISC_STATE_SRV_DONE:
;;;401                /* Indicate that service handle found. Start discover characteristic. */
;;;402                if ((hdl_cache[HDL_SIMBLE_SRV_START] != 0)
        0x00208820:    880a        ..      LDRH     r2,[r1,#0]
        0x00208822:    b90a        ..      CBNZ     r2,0x208828 ; simp_ble_client_discover_state_cb + 154
;;;403                    || (hdl_cache[HDL_SIMBLE_SRV_END] != 0))
        0x00208824:    8849        I.      LDRH     r1,[r1,#2]
        0x00208826:    b351        Q.      CBZ      r1,0x20887e ; simp_ble_client_discover_state_cb + 240
        0x00208828:    2200        ."      MOVS     r2,#0
        0x0020882a:    49f6        .I      LDR      r1,[pc,#984] ; [0x208c04] = 0x8800654
        0x0020882c:    4650        PF      MOV      r0,r10
        0x0020882e:    f5fff916    ....    BL       log_buffer ; 0x7a5e
        0x00208832:    68b8        .h      LDR      r0,[r7,#8]
        0x00208834:    f8991000    ....    LDRB     r1,[r9,#0]
        0x00208838:    eb000044    ..D.    ADD      r0,r0,r4,LSL #1
        0x0020883c:    8842        B.      LDRH     r2,[r0,#2]
        0x0020883e:    8883        ..      LDRH     r3,[r0,#4]
        0x00208840:    4630        0F      MOV      r0,r6
        0x00208842:    f645febc    E...    BL       client_all_char_discovery ; 0x4e5be
        0x00208846:    e013        ..      B        0x208870 ; simp_ble_client_discover_state_cb + 226
;;;404                {
;;;405                    if (simp_ble_client_start_char_discovery(conn_id) == false)
;;;406                    {
;;;407                        simp_table[conn_id].disc_state = DISC_SIMP_FAILED;
;;;408                        cb_flag = true;
        0x00208848:    68b8        .h      LDR      r0,[r7,#8]
        0x0020884a:    e018        ..      B        0x20887e ; simp_ble_client_discover_state_cb + 240
;;;409                    }
;;;410                }
;;;411                /* No Simple BLE service handle found. Discover procedure complete. */
;;;412                else
;;;413                {
;;;414                    simp_table[conn_id].disc_state = DISC_SIMP_FAILED;
;;;415                    cb_flag = true;
;;;416                }
;;;417                break;
;;;418            case DISC_STATE_CHAR_DONE:
;;;419                if (hdl_cache[HDL_SIMBLE_V3_NOTIFY] != 0)
        0x0020884c:    8909        ..      LDRH     r1,[r1,#8]
        0x0020884e:    b1b1        ..      CBZ      r1,0x20887e ; simp_ble_client_discover_state_cb + 240
        0x00208850:    49ec        .I      LDR      r1,[pc,#944] ; [0x208c04] = 0x8800654
        0x00208852:    2200        ."      MOVS     r2,#0
        0x00208854:    3130        01      ADDS     r1,r1,#0x30
        0x00208856:    48ec        .H      LDR      r0,[pc,#944] ; [0x208c08] = 0x21103302
        0x00208858:    f5fff901    ....    BL       log_buffer ; 0x7a5e
        0x0020885c:    68b8        .h      LDR      r0,[r7,#8]
        0x0020885e:    f8991000    ....    LDRB     r1,[r9,#0]
        0x00208862:    eb000044    ..D.    ADD      r0,r0,r4,LSL #1
        0x00208866:    8942        B.      LDRH     r2,[r0,#0xa]
        0x00208868:    8883        ..      LDRH     r3,[r0,#4]
        0x0020886a:    4630        0F      MOV      r0,r6
        0x0020886c:    f645ff0a    E...    BL       client_all_char_descriptor_discovery ; 0x4e684
        0x00208870:    2800        .(      CMP      r0,#0
        0x00208872:    d0bd        ..      BEQ      0x2087f0 ; simp_ble_client_discover_state_cb + 98
        0x00208874:    e7e8        ..      B        0x208848 ; simp_ble_client_discover_state_cb + 186
;;;420                {
;;;421                    if (simp_ble_client_start_char_descriptor_discovery(conn_id) == false)
;;;422                    {
;;;423                        simp_table[conn_id].disc_state = DISC_SIMP_FAILED;
;;;424                        cb_flag = true;
;;;425                    }
;;;426                }
;;;427                else
;;;428                {
;;;429                    simp_table[conn_id].disc_state = DISC_SIMP_FAILED;
;;;430                    cb_flag = true;
;;;431                }
;;;432                break;
;;;433            case DISC_STATE_CHAR_DESCRIPTOR_DONE:
;;;434                simp_table[conn_id].disc_state = DISC_SIMP_DONE;
        0x00208876:    2102        .!      MOVS     r1,#2
        0x00208878:    f8001014    ....    STRB     r1,[r0,r4,LSL #1]
;;;435                cb_flag = true;
;;;436                break;
        0x0020887c:    e001        ..      B        0x208882 ; simp_ble_client_discover_state_cb + 244
;;;437            case DISC_STATE_FAILED:
;;;438                simp_table[conn_id].disc_state = DISC_SIMP_FAILED;
        0x0020887e:    f8005014    ...P    STRB     r5,[r0,r4,LSL #1]
;;;439                cb_flag = true;
;;;440                break;
;;;441            default:
;;;442                APP_PRINT_ERROR0("simp_handle_discover_state: Invalid Discovery State!");
;;;443                break;
;;;444            }
;;;445        }
;;;446    
;;;447        /* Send discover state to application if needed. */
;;;448        if (cb_flag && simp_client_cb)
        0x00208882:    687b        {h      LDR      r3,[r7,#4]
        0x00208884:    2b00        .+      CMP      r3,#0
        0x00208886:    d0b3        ..      BEQ      0x2087f0 ; simp_ble_client_discover_state_cb + 98
;;;449        {
;;;450            cb_data.cb_content.disc_state = simp_table[conn_id].disc_state;
        0x00208888:    68b8        .h      LDR      r0,[r7,#8]
        0x0020888a:    466a        jF      MOV      r2,sp
        0x0020888c:    4631        1F      MOV      r1,r6
        0x0020888e:    f8100014    ....    LDRB     r0,[r0,r4,LSL #1]
        0x00208892:    f88d0004    ....    STRB     r0,[sp,#4]
;;;451            (*simp_client_cb)(simp_client, conn_id, &cb_data);
        0x00208896:    f8990000    ....    LDRB     r0,[r9,#0]
        0x0020889a:    4798        .G      BLX      r3
;;;452        }
;;;453        return;
;;;454    }
        0x0020889c:    e7a8        ..      B        0x2087f0 ; simp_ble_client_discover_state_cb + 98
    simp_ble_client_discover_result_cb
;;;455    
;;;456    /**
;;;457      * @brief  Called by profile client layer, when discover result fetched.
;;;458      * @param  conn_id: connection ID.
;;;459      * @param  result_type: indicate which type of value discovered in service discovery procedure.
;;;460      * @param  result_data: value discovered.
;;;461      * @retval None
;;;462      */
;;;463    static void simp_ble_client_discover_result_cb(uint8_t conn_id,
;;;464                                                   T_DISCOVERY_RESULT_TYPE result_type,
;;;465                                                   T_DISCOVERY_RESULT_DATA result_data)
;;;466    {
        0x0020889e:    b5f8        ..      PUSH     {r3-r7,lr}
        0x002088a0:    4604        .F      MOV      r4,r0
        0x002088a2:    460e        .F      MOV      r6,r1
        0x002088a4:    8890        ..      LDRH     r0,[r2,#4]
        0x002088a6:    460b        .F      MOV      r3,r1
        0x002088a8:    49d6        .I      LDR      r1,[pc,#856] ; [0x208c04] = 0x8800654
        0x002088aa:    4fd8        .O      LDR      r7,[pc,#864] ; [0x208c0c] = 0x21103002
        0x002088ac:    4615        .F      MOV      r5,r2
;;;467        APP_PRINT_INFO2("simp_ble_client_discover_result_cb: result_type %d , 0x%02X", result_type,result_data.p_char_uuid16_disc_data->value_handle);
        0x002088ae:    9000        ..      STR      r0,[sp,#0]
        0x002088b0:    2202        ."      MOVS     r2,#2
        0x002088b2:    31d8        .1      ADDS     r1,r1,#0xd8
        0x002088b4:    4638        8F      MOV      r0,r7
        0x002088b6:    f5fff8d2    ....    BL       log_buffer ; 0x7a5e
;;;468        if (simp_table[conn_id].disc_state == DISC_SIMP_START)
        0x002088ba:    49d5        .I      LDR      r1,[pc,#852] ; [0x208c10] = 0x20cfcc
        0x002088bc:    eb0400c4    ....    ADD      r0,r4,r4,LSL #3
        0x002088c0:    6889        .h      LDR      r1,[r1,#8]
        0x002088c2:    f8112010    ...     LDRB     r2,[r1,r0,LSL #1]
        0x002088c6:    2a01        .*      CMP      r2,#1
        0x002088c8:    d11b        ..      BNE      0x208902 ; simp_ble_client_discover_result_cb + 100
;;;469        {
;;;470            uint16_t handle;
;;;471            uint16_t *hdl_cache;
;;;472            hdl_cache = simp_table[conn_id].hdl_cache;
        0x002088ca:    eb010440    ..@.    ADD      r4,r1,r0,LSL #1
;;;473    		APP_PRINT_INFO2("vsop simp_ble_client_discover_result_cb: result_type %d , 0x%02X", result_type,result_data.p_char_uuid16_disc_data->value_handle);
        0x002088ce:    88a8        ..      LDRH     r0,[r5,#4]
        0x002088d0:    9000        ..      STR      r0,[sp,#0]
        0x002088d2:    4633        3F      MOV      r3,r6
        0x002088d4:    2202        ."      MOVS     r2,#2
        0x002088d6:    49cf        .I      LDR      r1,[pc,#828] ; [0x208c14] = 0x880076c
        0x002088d8:    4638        8F      MOV      r0,r7
        0x002088da:    1ca4        ..      ADDS     r4,r4,#2
        0x002088dc:    f5fff8bf    ....    BL       log_buffer ; 0x7a5e
;;;474    
;;;475            switch (result_type)
        0x002088e0:    2e02        ..      CMP      r6,#2
        0x002088e2:    d00a        ..      BEQ      0x2088fa ; simp_ble_client_discover_result_cb + 92
        0x002088e4:    2e03        ..      CMP      r6,#3
        0x002088e6:    d00d        ..      BEQ      0x208904 ; simp_ble_client_discover_result_cb + 102
        0x002088e8:    2e05        ..      CMP      r6,#5
        0x002088ea:    d034        4.      BEQ      0x208956 ; simp_ble_client_discover_result_cb + 184
        0x002088ec:    2200        ."      MOVS     r2,#0
        0x002088ee:    1eb8        ..      SUBS     r0,r7,#2
        0x002088f0:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x002088f4:    49c8        .I      LDR      r1,[pc,#800] ; [0x208c18] = 0x8800928
        0x002088f6:    f5ffb8b2    ....    B        log_buffer ; 0x7a5e
;;;476            {
;;;477            case DISC_RESULT_SRV_DATA:
;;;478                hdl_cache[HDL_SIMBLE_SRV_START] = result_data.p_srv_disc_data->att_handle;
        0x002088fa:    8828        (.      LDRH     r0,[r5,#0]
        0x002088fc:    8020         .      STRH     r0,[r4,#0]
;;;479                hdl_cache[HDL_SIMBLE_SRV_END] = result_data.p_srv_disc_data->end_group_handle;
        0x002088fe:    8868        h.      LDRH     r0,[r5,#2]
        0x00208900:    8060        `.      STRH     r0,[r4,#2]
        0x00208902:    bdf8        ..      POP      {r3-r7,pc}
        0x00208904:    49c3        .I      LDR      r1,[pc,#780] ; [0x208c14] = 0x880076c
;;;480                break;
;;;481    
;;;482            case DISC_RESULT_CHAR_UUID16:
;;;483                handle = result_data.p_char_uuid16_disc_data->value_handle;
        0x00208906:    88ae        ..      LDRH     r6,[r5,#4]
;;;484    			APP_PRINT_INFO1("vsop result_data DISC_RESULT_CHAR_UUID16: 0x%02X", result_data.p_char_uuid16_disc_data->uuid16);
        0x00208908:    88eb        ..      LDRH     r3,[r5,#6]
        0x0020890a:    2201        ."      MOVS     r2,#1
        0x0020890c:    3144        D1      ADDS     r1,r1,#0x44
        0x0020890e:    4638        8F      MOV      r0,r7
        0x00208910:    f5fff8a5    ....    BL       log_buffer ; 0x7a5e
;;;485                switch (result_data.p_char_uuid16_disc_data->uuid16)
        0x00208914:    88e8        ..      LDRH     r0,[r5,#6]
        0x00208916:    301c        .0      ADDS     r0,r0,#0x1c
        0x00208918:    f5b03080    ...0    SUBS     r0,r0,#0x10000
        0x0020891c:    d009        ..      BEQ      0x208932 ; simp_ble_client_discover_result_cb + 148
        0x0020891e:    2801        .(      CMP      r0,#1
        0x00208920:    d005        ..      BEQ      0x20892e ; simp_ble_client_discover_result_cb + 144
        0x00208922:    2803        .(      CMP      r0,#3
        0x00208924:    d00e        ..      BEQ      0x208944 ; simp_ble_client_discover_result_cb + 166
        0x00208926:    2805        .(      CMP      r0,#5
        0x00208928:    d1eb        ..      BNE      0x208902 ; simp_ble_client_discover_result_cb + 100
        0x0020892a:    80e6        ..      STRH     r6,[r4,#6]
        0x0020892c:    bdf8        ..      POP      {r3-r7,pc}
;;;486                {      
;;;487                case GATT_UUID_CHAR_SIMPLE_V1_READ:
;;;488                    hdl_cache[HDL_SIMBLE_V1_READ] = handle;
        0x0020892e:    80a6        ..      STRH     r6,[r4,#4]
        0x00208930:    bdf8        ..      POP      {r3-r7,pc}
;;;489                    break;
;;;490    
;;;491                case GATT_UUID_CHAR_SIMPLE_V2_WRITE:
;;;492                    hdl_cache[HDL_SIMBLE_V2_WRITE] = handle;
;;;493                    break;
;;;494    
;;;495                case GATT_UUID_CHAR_SIMPLE_V3_NOTIFY:
;;;496    				APP_PRINT_INFO1("vsop+++++++++++++GATT_UUID_CHAR_SIMPLE_V3_NOTIFY, handle=%d",handle);
        0x00208932:    49b8        .I      LDR      r1,[pc,#736] ; [0x208c14] = 0x880076c
        0x00208934:    4633        3F      MOV      r3,r6
        0x00208936:    2201        ."      MOVS     r2,#1
        0x00208938:    3178        x1      ADDS     r1,r1,#0x78
        0x0020893a:    4638        8F      MOV      r0,r7
        0x0020893c:    f5fff88f    ....    BL       log_buffer ; 0x7a5e
;;;497                    hdl_cache[HDL_SIMBLE_V3_NOTIFY] = handle;
        0x00208940:    8126        &.      STRH     r6,[r4,#8]
        0x00208942:    bdf8        ..      POP      {r3-r7,pc}
;;;498                    break;
;;;499    
;;;500                case GATT_UUID_CHAR_SIMPLE_V4_INDICATE:
;;;501    				APP_PRINT_INFO1("vsop+++++++++++++GATT_UUID_CHAR_SIMPLE_V4_INDICATE, handle=%d",handle);
        0x00208944:    49b3        .I      LDR      r1,[pc,#716] ; [0x208c14] = 0x880076c
        0x00208946:    4633        3F      MOV      r3,r6
        0x00208948:    2201        ."      MOVS     r2,#1
        0x0020894a:    31b8        .1      ADDS     r1,r1,#0xb8
        0x0020894c:    4638        8F      MOV      r0,r7
        0x0020894e:    f5fff886    ....    BL       log_buffer ; 0x7a5e
;;;502                    hdl_cache[HDL_SIMBLE_V4_INDICATE] = handle;
        0x00208952:    81a6        ..      STRH     r6,[r4,#0xc]
        0x00208954:    bdf8        ..      POP      {r3-r7,pc}
;;;503                    break;
;;;504    
;;;505                default:
;;;506                    /* have no intrest on this handle. */
;;;507                    break;
;;;508                }
;;;509    
;;;510                break;
;;;511    
;;;512            case DISC_RESULT_CHAR_DESC_UUID16:
;;;513                /* When use client_all_char_descriptor_discovery. */
;;;514    			APP_PRINT_INFO1("vsop 1 DISC_RESULT_CHAR_DESC_UUID16: uuid16 , 0x%02X", result_data.p_char_desc_uuid16_disc_data->uuid16);
        0x00208956:    49b0        .I      LDR      r1,[pc,#704] ; [0x208c18] = 0x8800928
        0x00208958:    886b        k.      LDRH     r3,[r5,#2]
        0x0020895a:    2201        ."      MOVS     r2,#1
        0x0020895c:    39c0        .9      SUBS     r1,r1,#0xc0
        0x0020895e:    4638        8F      MOV      r0,r7
        0x00208960:    f5fff87d    ..}.    BL       log_buffer ; 0x7a5e
;;;515                if (result_data.p_char_desc_uuid16_disc_data->uuid16 == GATT_UUID_CHAR_CLIENT_CONFIG)
        0x00208964:    8868        h.      LDRH     r0,[r5,#2]
        0x00208966:    f5a05124    ..$Q    SUB      r1,r0,#0x2900
        0x0020896a:    3902        .9      SUBS     r1,#2
        0x0020896c:    d1f2        ..      BNE      0x208954 ; simp_ble_client_discover_result_cb + 182
;;;516                {
;;;517                    handle = result_data.p_char_desc_uuid16_disc_data->handle;
        0x0020896e:    882d        -.      LDRH     r5,[r5,#0]
;;;518    				APP_PRINT_INFO1("vsop 2 DISC_RESULT_CHAR_DESC_UUID16: handle , 0x%02X",handle);
        0x00208970:    49a9        .I      LDR      r1,[pc,#676] ; [0x208c18] = 0x8800928
        0x00208972:    462b        +F      MOV      r3,r5
        0x00208974:    2201        ."      MOVS     r2,#1
        0x00208976:    3988        .9      SUBS     r1,r1,#0x88
        0x00208978:    4638        8F      MOV      r0,r7
        0x0020897a:    f5fff870    ..p.    BL       log_buffer ; 0x7a5e
;;;519    				
;;;520                    if ((handle > hdl_cache[HDL_SIMBLE_V3_NOTIFY])
        0x0020897e:    8920         .      LDRH     r0,[r4,#8]
        0x00208980:    42a8        .B      CMP      r0,r5
        0x00208982:    d20b        ..      BCS      0x20899c ; simp_ble_client_discover_result_cb + 254
;;;521                        && (handle < hdl_cache[HDL_SIMBLE_V4_INDICATE]))
        0x00208984:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x00208986:    42a8        .B      CMP      r0,r5
        0x00208988:    d908        ..      BLS      0x20899c ; simp_ble_client_discover_result_cb + 254
;;;522                    {
;;;523                    	APP_PRINT_INFO1("vsopxxxxxxxxxxxxxxxxx1, handle=%d",handle);
        0x0020898a:    49a3        .I      LDR      r1,[pc,#652] ; [0x208c18] = 0x8800928
        0x0020898c:    462b        +F      MOV      r3,r5
        0x0020898e:    2201        ."      MOVS     r2,#1
        0x00208990:    3950        P9      SUBS     r1,r1,#0x50
        0x00208992:    4638        8F      MOV      r0,r7
        0x00208994:    f5fff863    ..c.    BL       log_buffer ; 0x7a5e
;;;524                        hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD] = handle;
        0x00208998:    8165        e.      STRH     r5,[r4,#0xa]
        0x0020899a:    bdf8        ..      POP      {r3-r7,pc}
;;;525                    }
;;;526                    else if ((handle > hdl_cache[HDL_SIMBLE_V4_INDICATE]) &&
        0x0020899c:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x0020899e:    42a8        .B      CMP      r0,r5
        0x002089a0:    d2fb        ..      BCS      0x20899a ; simp_ble_client_discover_result_cb + 252
;;;527                             (hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD] == 0))
        0x002089a2:    89e0        ..      LDRH     r0,[r4,#0xe]
        0x002089a4:    2800        .(      CMP      r0,#0
        0x002089a6:    d1f8        ..      BNE      0x20899a ; simp_ble_client_discover_result_cb + 252
;;;528                    {
;;;529                    
;;;530    					APP_PRINT_INFO1("vsopxxxxxxxxxxxxxxxxx2, handle=%d",handle);
        0x002089a8:    499b        .I      LDR      r1,[pc,#620] ; [0x208c18] = 0x8800928
        0x002089aa:    462b        +F      MOV      r3,r5
        0x002089ac:    2201        ."      MOVS     r2,#1
        0x002089ae:    3928        (9      SUBS     r1,r1,#0x28
        0x002089b0:    4638        8F      MOV      r0,r7
        0x002089b2:    f5fff854    ..T.    BL       log_buffer ; 0x7a5e
;;;531                        hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD] = handle;
        0x002089b6:    81e5        ..      STRH     r5,[r4,#0xe]
;;;532                    }
;;;533                }
;;;534                break;
;;;535    
;;;536            default:
;;;537                APP_PRINT_ERROR0("simp_handle_discover_result: Invalid Discovery Result Type!");
;;;538                break;
;;;539            }
;;;540        }
;;;541    
;;;542        return;
;;;543    }
        0x002089b8:    bdf8        ..      POP      {r3-r7,pc}
    simp_ble_client_read_result_cb
;;;544    
;;;545    static void simp_ble_client_read_result_cb(uint8_t conn_id,  uint16_t cause,
;;;546                                               uint16_t handle, uint16_t value_size, uint8_t *p_value)
;;;547    {
        0x002089ba:    e92d4fff    -..O    PUSH     {r0-r11,lr}
        0x002089be:    b087        ..      SUB      sp,sp,#0x1c
        0x002089c0:    f8dfb24c    ..L.    LDR      r11,[pc,#588] ; [0x208c10] = 0x20cfcc
        0x002089c4:    9807        ..      LDR      r0,[sp,#0x1c]
        0x002089c6:    460c        .F      MOV      r4,r1
        0x002089c8:    eb0001c0    ....    ADD      r1,r0,r0,LSL #3
        0x002089cc:    f8db0008    ....    LDR      r0,[r11,#8]
        0x002089d0:    4698        .F      MOV      r8,r3
        0x002089d2:    eb000641    ..A.    ADD      r6,r0,r1,LSL #1
        0x002089d6:    4990        .I      LDR      r1,[pc,#576] ; [0x208c18] = 0x8800928
        0x002089d8:    4617        .F      MOV      r7,r2
;;;548        T_SIMP_CLIENT_CB_DATA cb_data;
;;;549        uint16_t *hdl_cache;
;;;550        hdl_cache = simp_table[conn_id].hdl_cache;
        0x002089da:    9d14        ..      LDR      r5,[sp,#0x50]
;;;551    
;;;552        cb_data.cb_type = SIMP_CLIENT_CB_TYPE_READ_RESULT;
        0x002089dc:    f04f0901    O...    MOV      r9,#1
        0x002089e0:    4613        .F      MOV      r3,r2
        0x002089e2:    f88d9004    ....    STRB     r9,[sp,#4]
;;;553    
;;;554        APP_PRINT_INFO2("simp_ble_client_read_result_cb: handle 0x%x, cause 0x%x", handle, cause);
        0x002089e6:    2202        ."      MOVS     r2,#2
        0x002089e8:    3140        @1      ADDS     r1,r1,#0x40
        0x002089ea:    4888        .H      LDR      r0,[pc,#544] ; [0x208c0c] = 0x21103002
        0x002089ec:    1cb6        ..      ADDS     r6,r6,#2
        0x002089ee:    9400        ..      STR      r4,[sp,#0]
        0x002089f0:    f5fff835    ..5.    BL       log_buffer ; 0x7a5e
;;;555        cb_data.cb_content.read_result.cause = cause;
        0x002089f4:    f8ad4014    ...@    STRH     r4,[sp,#0x14]
;;;556    
;;;557        if (handle == hdl_cache[HDL_SIMBLE_V1_READ])
        0x002089f8:    88b0        ..      LDRH     r0,[r6,#4]
        0x002089fa:    f04f0a00    O...    MOV      r10,#0
        0x002089fe:    42b8        .B      CMP      r0,r7
        0x00208a00:    d10a        ..      BNE      0x208a18 ; simp_ble_client_read_result_cb + 94
;;;558        {
;;;559            cb_data.cb_content.read_result.type = SIMP_READ_V1_READ;
        0x00208a02:    4650        PF      MOV      r0,r10
        0x00208a04:    f88da008    ....    STRB     r10,[sp,#8]
;;;560            if (cause == GAP_SUCCESS)
        0x00208a08:    b114        ..      CBZ      r4,0x208a10 ; simp_ble_client_read_result_cb + 86
        0x00208a0a:    f8ad000c    ....    STRH     r0,[sp,#0xc]
        0x00208a0e:    e04b        K.      B        0x208aa8 ; simp_ble_client_read_result_cb + 238
;;;561            {
;;;562                cb_data.cb_content.read_result.data.v1_read.p_value = p_value;
;;;563                cb_data.cb_content.read_result.data.v1_read.value_size = value_size;
        0x00208a10:    9504        ..      STR      r5,[sp,#0x10]
        0x00208a12:    f8ad800c    ....    STRH     r8,[sp,#0xc]
        0x00208a16:    e047        G.      B        0x208aa8 ; simp_ble_client_read_result_cb + 238
;;;564            }
;;;565            else
;;;566            {
;;;567                cb_data.cb_content.read_result.data.v1_read.value_size = 0;
;;;568            }
;;;569        }
;;;570        else if (handle == hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD])
        0x00208a18:    8970        p.      LDRH     r0,[r6,#0xa]
        0x00208a1a:    42b8        .B      CMP      r0,r7
        0x00208a1c:    d115        ..      BNE      0x208a4a ; simp_ble_client_read_result_cb + 144
;;;571        {
;;;572            cb_data.cb_content.read_result.type = SIMP_READ_V3_NOTIFY_CCCD;
        0x00208a1e:    4649        IF      MOV      r1,r9
        0x00208a20:    f88d9008    ....    STRB     r9,[sp,#8]
;;;573            if (cause == GAP_SUCCESS)
        0x00208a24:    bbec        ..      CBNZ     r4,0x208aa2 ; simp_ble_client_read_result_cb + 232
;;;574            {
;;;575                uint16_t ccc_bit;
;;;576                if (value_size != 2)
        0x00208a26:    4640        @F      MOV      r0,r8
        0x00208a28:    f1b80f02    ....    CMP      r8,#2
        0x00208a2c:    d004        ..      BEQ      0x208a38 ; simp_ble_client_read_result_cb + 126
;;;577                {
;;;578                    PROFILE_PRINT_ERROR1("simp_ble_client_read_result_cb: invalid cccd len %d", value_size);
        0x00208a2e:    497a        zI      LDR      r1,[pc,#488] ; [0x208c18] = 0x8800928
        0x00208a30:    2201        ."      MOVS     r2,#1
        0x00208a32:    4603        .F      MOV      r3,r0
        0x00208a34:    317c        |1      ADDS     r1,r1,#0x7c
;;;579                    return;
        0x00208a36:    e01e        ..      B        0x208a76 ; simp_ble_client_read_result_cb + 188
;;;580                }
;;;581                LE_ARRAY_TO_UINT16(ccc_bit, p_value);
        0x00208a38:    7828        (x      LDRB     r0,[r5,#0]
        0x00208a3a:    786a        jx      LDRB     r2,[r5,#1]
        0x00208a3c:    eb002002    ...     ADD      r0,r0,r2,LSL #8
;;;582    
;;;583                if (ccc_bit & GATT_CLIENT_CHAR_CONFIG_NOTIFY)
        0x00208a40:    07c0        ..      LSLS     r0,r0,#31
        0x00208a42:    d02f        /.      BEQ      0x208aa4 ; simp_ble_client_read_result_cb + 234
;;;584                {
;;;585                    cb_data.cb_content.read_result.data.v3_notify_cccd = true;
        0x00208a44:    f88d100c    ....    STRB     r1,[sp,#0xc]
        0x00208a48:    e02e        ..      B        0x208aa8 ; simp_ble_client_read_result_cb + 238
;;;586                }
;;;587                else
;;;588                {
;;;589                    cb_data.cb_content.read_result.data.v3_notify_cccd = false;
;;;590                }
;;;591            }
;;;592        }
;;;593        else if (handle == hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD])
        0x00208a4a:    89f0        ..      LDRH     r0,[r6,#0xe]
        0x00208a4c:    42b8        .B      CMP      r0,r7
        0x00208a4e:    d116        ..      BNE      0x208a7e ; simp_ble_client_read_result_cb + 196
;;;594        {
;;;595            cb_data.cb_content.read_result.type = SIMP_READ_V4_INDICATE_CCCD;
        0x00208a50:    2002        .       MOVS     r0,#2
        0x00208a52:    4971        qI      LDR      r1,[pc,#452] ; [0x208c18] = 0x8800928
        0x00208a54:    4e6d        mN      LDR      r6,[pc,#436] ; [0x208c0c] = 0x21103002
        0x00208a56:    f88d0008    ....    STRB     r0,[sp,#8]
;;;596    			APP_PRINT_INFO0("vsop------- indicate _cccd 1");		
        0x00208a5a:    2200        ."      MOVS     r2,#0
        0x00208a5c:    31b4        .1      ADDS     r1,r1,#0xb4
        0x00208a5e:    4630        0F      MOV      r0,r6
        0x00208a60:    f5fefffd    ....    BL       log_buffer ; 0x7a5e
;;;597            if (cause == GAP_SUCCESS)
        0x00208a64:    b9ec        ..      CBNZ     r4,0x208aa2 ; simp_ble_client_read_result_cb + 232
;;;598            {
;;;599                uint16_t ccc_bit;
;;;600                if (value_size != 2)
        0x00208a66:    4640        @F      MOV      r0,r8
        0x00208a68:    f1b80f02    ....    CMP      r8,#2
        0x00208a6c:    d00a        ..      BEQ      0x208a84 ; simp_ble_client_read_result_cb + 202
;;;601                {
;;;602                    PROFILE_PRINT_ERROR1("simp_ble_client_read_result_cb: invalid cccd len %d", value_size);
        0x00208a6e:    496a        jI      LDR      r1,[pc,#424] ; [0x208c18] = 0x8800928
        0x00208a70:    2201        ."      MOVS     r2,#1
        0x00208a72:    4603        .F      MOV      r3,r0
        0x00208a74:    31d4        .1      ADDS     r1,r1,#0xd4
        0x00208a76:    4864        dH      LDR      r0,[pc,#400] ; [0x208c08] = 0x21103302
        0x00208a78:    1e80        ..      SUBS     r0,r0,#2
        0x00208a7a:    f5fefff0    ....    BL       log_buffer ; 0x7a5e
        0x00208a7e:    b00b        ..      ADD      sp,sp,#0x2c
        0x00208a80:    e8bd8ff0    ....    POP      {r4-r11,pc}
;;;603                    return;
;;;604                }
;;;605                LE_ARRAY_TO_UINT16(ccc_bit, p_value);
        0x00208a84:    7828        (x      LDRB     r0,[r5,#0]
        0x00208a86:    7869        ix      LDRB     r1,[r5,#1]
        0x00208a88:    2201        ."      MOVS     r2,#1
        0x00208a8a:    eb002001    ...     ADD      r0,r0,r1,LSL #8
        0x00208a8e:    b284        ..      UXTH     r4,r0
;;;606    			APP_PRINT_INFO1("vsop------- indicate _cccd =  %d",ccc_bit);
        0x00208a90:    4623        #F      MOV      r3,r4
        0x00208a92:    4962        bI      LDR      r1,[pc,#392] ; [0x208c1c] = 0x8800a34
        0x00208a94:    4630        0F      MOV      r0,r6
        0x00208a96:    f5feffe2    ....    BL       log_buffer ; 0x7a5e
;;;607    
;;;608                if (ccc_bit & GATT_CLIENT_CHAR_CONFIG_INDICATE)
        0x00208a9a:    07a0        ..      LSLS     r0,r4,#30
        0x00208a9c:    d502        ..      BPL      0x208aa4 ; simp_ble_client_read_result_cb + 234
;;;609                {
;;;610                    cb_data.cb_content.read_result.data.v4_indicate_cccd = true;
        0x00208a9e:    f88d900c    ....    STRB     r9,[sp,#0xc]
        0x00208aa2:    e001        ..      B        0x208aa8 ; simp_ble_client_read_result_cb + 238
;;;611                }
;;;612                else
;;;613                {
;;;614                   cb_data.cb_content.read_result.data.v4_indicate_cccd = false;
        0x00208aa4:    f88da00c    ....    STRB     r10,[sp,#0xc]
;;;615                }
;;;616            }
;;;617        }
;;;618        else
;;;619        {
;;;620            return;
;;;621        }
;;;622        /* Inform application the read result. */
;;;623        if (simp_client_cb)
        0x00208aa8:    f8db3004    ...0    LDR      r3,[r11,#4]
        0x00208aac:    2b00        .+      CMP      r3,#0
        0x00208aae:    d0e6        ..      BEQ      0x208a7e ; simp_ble_client_read_result_cb + 196
;;;624        {
;;;625            (*simp_client_cb)(simp_client, conn_id, &cb_data);
        0x00208ab0:    485b        [H      LDR      r0,[pc,#364] ; [0x208c20] = 0x20cf4c
        0x00208ab2:    aa01        ..      ADD      r2,sp,#4
        0x00208ab4:    9907        ..      LDR      r1,[sp,#0x1c]
        0x00208ab6:    7800        .x      LDRB     r0,[r0,#0]
        0x00208ab8:    4798        .G      BLX      r3
;;;626        }
;;;627    
;;;628        return;
;;;629    }
        0x00208aba:    e7e0        ..      B        0x208a7e ; simp_ble_client_read_result_cb + 196
    simp_ble_client_write_result_cb
;;;630    
;;;631    static void simp_ble_client_write_result_cb(uint8_t conn_id, T_GATT_WRITE_TYPE type,
;;;632                                                uint16_t handle, uint16_t cause,
;;;633                                                uint8_t credits)
;;;634    {
        0x00208abc:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x00208ac0:    4f53        SO      LDR      r7,[pc,#332] ; [0x208c10] = 0x20cfcc
;;; .\..\..\..\src\ble\profile\client\simple_ble_client.c (634)
        0x00208ac2:    4681        .F      MOV      r9,r0
        0x00208ac4:    b087        ..      SUB      sp,sp,#0x1c
        0x00208ac6:    68b9        .h      LDR      r1,[r7,#8]
        0x00208ac8:    eb0000c9    ....    ADD      r0,r0,r9,LSL #3
        0x00208acc:    eb010440    ..@.    ADD      r4,r1,r0,LSL #1
        0x00208ad0:    461e        .F      MOV      r6,r3
        0x00208ad2:    f04f0802    O...    MOV      r8,#2
        0x00208ad6:    9300        ..      STR      r3,[sp,#0]
        0x00208ad8:    4950        PI      LDR      r1,[pc,#320] ; [0x208c1c] = 0x8800a34
        0x00208ada:    4615        .F      MOV      r5,r2
        0x00208adc:    4613        .F      MOV      r3,r2
;;;635        T_SIMP_CLIENT_CB_DATA cb_data;
;;;636        uint16_t *hdl_cache;
;;;637        hdl_cache = simp_table[conn_id].hdl_cache;
;;;638        cb_data.cb_type = SIMP_CLIENT_CB_TYPE_WRITE_RESULT;
        0x00208ade:    f88d8004    ....    STRB     r8,[sp,#4]
;;;639    
;;;640        PROFILE_PRINT_INFO2("simp_ble_client_write_result_cb: handle 0x%x, cause 0x%x", handle, cause);
        0x00208ae2:    4642        BF      MOV      r2,r8
        0x00208ae4:    3124        $1      ADDS     r1,r1,#0x24
        0x00208ae6:    4848        HH      LDR      r0,[pc,#288] ; [0x208c08] = 0x21103302
        0x00208ae8:    1ca4        ..      ADDS     r4,r4,#2
        0x00208aea:    f5feffb8    ....    BL       log_buffer ; 0x7a5e
;;;641        cb_data.cb_content.write_result.cause = cause;
        0x00208aee:    f8ad600a    ...`    STRH     r6,[sp,#0xa]
;;;642    
;;;643        if (handle == hdl_cache[HDL_SIMBLE_V2_WRITE])
        0x00208af2:    88e0        ..      LDRH     r0,[r4,#6]
        0x00208af4:    42a8        .B      CMP      r0,r5
        0x00208af6:    d101        ..      BNE      0x208afc ; simp_ble_client_write_result_cb + 64
;;;644        {
;;;645            cb_data.cb_content.write_result.type = SIMP_WRITE_V2_WRITE;
        0x00208af8:    2000        .       MOVS     r0,#0
        0x00208afa:    e003        ..      B        0x208b04 ; simp_ble_client_write_result_cb + 72
;;;646        }
;;;647        else if (handle == hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD])
        0x00208afc:    8960        `.      LDRH     r0,[r4,#0xa]
        0x00208afe:    42a8        .B      CMP      r0,r5
        0x00208b00:    d103        ..      BNE      0x208b0a ; simp_ble_client_write_result_cb + 78
;;;648        {
;;;649            cb_data.cb_content.write_result.type = SIMP_WRITE_V3_NOTIFY_CCCD;
        0x00208b02:    2001        .       MOVS     r0,#1
        0x00208b04:    f88d0008    ....    STRB     r0,[sp,#8]
        0x00208b08:    e004        ..      B        0x208b14 ; simp_ble_client_write_result_cb + 88
;;;650        }
;;;651        else if (handle == hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD])
        0x00208b0a:    89e0        ..      LDRH     r0,[r4,#0xe]
        0x00208b0c:    42a8        .B      CMP      r0,r5
        0x00208b0e:    d109        ..      BNE      0x208b24 ; simp_ble_client_write_result_cb + 104
;;;652        {
;;;653            cb_data.cb_content.write_result.type = SIMP_WRITE_V4_INDICATE_CCCD;
        0x00208b10:    f88d8008    ....    STRB     r8,[sp,#8]
;;;654        }
;;;655        else
;;;656        {
;;;657            return;
;;;658        }
;;;659        /* Inform application the write result. */
;;;660        if (simp_client_cb)
        0x00208b14:    687b        {h      LDR      r3,[r7,#4]
        0x00208b16:    2b00        .+      CMP      r3,#0
        0x00208b18:    d004        ..      BEQ      0x208b24 ; simp_ble_client_write_result_cb + 104
;;;661        {
;;;662            (*simp_client_cb)(simp_client, conn_id, &cb_data);
        0x00208b1a:    4841        AH      LDR      r0,[pc,#260] ; [0x208c20] = 0x20cf4c
        0x00208b1c:    aa01        ..      ADD      r2,sp,#4
        0x00208b1e:    4649        IF      MOV      r1,r9
        0x00208b20:    7800        .x      LDRB     r0,[r0,#0]
        0x00208b22:    4798        .G      BLX      r3
;;;663        }
;;;664    
;;;665        return;
;;;666    }
        0x00208b24:    b007        ..      ADD      sp,sp,#0x1c
        0x00208b26:    e8bd83f0    ....    POP      {r4-r9,pc}
    simp_ble_client_notif_ind_result_cb
;;;667    
;;;668    static T_APP_RESULT simp_ble_client_notif_ind_result_cb(uint8_t conn_id, bool notify,
;;;669                                                            uint16_t handle,
;;;670                                                            uint16_t value_size, uint8_t *p_value)
;;;671    {
        0x00208b2a:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x00208b2e:    4f38        8O      LDR      r7,[pc,#224] ; [0x208c10] = 0x20cfcc
        0x00208b30:    4681        .F      MOV      r9,r0
        0x00208b32:    b086        ..      SUB      sp,sp,#0x18
        0x00208b34:    68b9        .h      LDR      r1,[r7,#8]
        0x00208b36:    eb0000c9    ....    ADD      r0,r0,r9,LSL #3
        0x00208b3a:    eb010040    ..@.    ADD      r0,r1,r0,LSL #1
        0x00208b3e:    2103        .!      MOVS     r1,#3
        0x00208b40:    f88d1000    ....    STRB     r1,[sp,#0]
        0x00208b44:    8941        A.      LDRH     r1,[r0,#0xa]
        0x00208b46:    4614        .F      MOV      r4,r2
        0x00208b48:    9e0e        ..      LDR      r6,[sp,#0x38]
        0x00208b4a:    f8dfa0c0    ....    LDR      r10,[pc,#192] ; [0x208c0c] = 0x21103002
        0x00208b4e:    1c80        ..      ADDS     r0,r0,#2
        0x00208b50:    461d        .F      MOV      r5,r3
        0x00208b52:    f04f0800    O...    MOV      r8,#0
        0x00208b56:    42a1        .B      CMP      r1,r4
        0x00208b58:    d108        ..      BNE      0x208b6c ; simp_ble_client_notif_ind_result_cb + 66
;;;672        T_APP_RESULT app_result = APP_RESULT_SUCCESS;
;;;673        T_SIMP_CLIENT_CB_DATA cb_data;
;;;674        uint16_t *hdl_cache;
;;;675        hdl_cache = simp_table[conn_id].hdl_cache;
;;;676    
;;;677        cb_data.cb_type = SIMP_CLIENT_CB_TYPE_NOTIF_IND_RESULT;
;;;678    
;;;679        if (handle == hdl_cache[HDL_SIMBLE_V3_NOTIFY])
;;;680        {
;;;681        	APP_PRINT_INFO1("vsop------------HDL_SIMBLE_V3_NOTIFY %d",handle);
        0x00208b5a:    4930        0I      LDR      r1,[pc,#192] ; [0x208c1c] = 0x8800a34
        0x00208b5c:    4613        .F      MOV      r3,r2
        0x00208b5e:    2201        ."      MOVS     r2,#1
        0x00208b60:    3160        `1      ADDS     r1,r1,#0x60
        0x00208b62:    4650        PF      MOV      r0,r10
        0x00208b64:    f5feff7b    ..{.    BL       log_buffer ; 0x7a5e
;;;682            cb_data.cb_content.notif_ind_data.type = SIMP_V3_NOTIFY;
        0x00208b68:    2000        .       MOVS     r0,#0
;;;683            cb_data.cb_content.notif_ind_data.data.value_size = value_size;
;;;684            cb_data.cb_content.notif_ind_data.data.p_value = p_value;
        0x00208b6a:    e00b        ..      B        0x208b84 ; simp_ble_client_notif_ind_result_cb + 90
;;;685        }
;;;686        else if (handle == hdl_cache[HDL_SIMBLE_V4_INDICATE])
        0x00208b6c:    8980        ..      LDRH     r0,[r0,#0xc]
        0x00208b6e:    4613        .F      MOV      r3,r2
        0x00208b70:    42a0        .B      CMP      r0,r4
        0x00208b72:    f04f0201    O...    MOV      r2,#1
        0x00208b76:    d122        ".      BNE      0x208bbe ; simp_ble_client_notif_ind_result_cb + 148
;;;687        {
;;;688        	APP_PRINT_INFO1("vsop------------HDL_SIMBLE_V4_INDICATE %d",handle);
        0x00208b78:    4928        (I      LDR      r1,[pc,#160] ; [0x208c1c] = 0x8800a34
        0x00208b7a:    4650        PF      MOV      r0,r10
        0x00208b7c:    318c        .1      ADDS     r1,r1,#0x8c
        0x00208b7e:    f5feff6e    ..n.    BL       log_buffer ; 0x7a5e
;;;689            cb_data.cb_content.notif_ind_data.type = SIMP_V4_INDICATE;
        0x00208b82:    2001        .       MOVS     r0,#1
        0x00208b84:    f88d0004    ....    STRB     r0,[sp,#4]
;;;690            cb_data.cb_content.notif_ind_data.data.value_size = value_size;
        0x00208b88:    f8ad5008    ...P    STRH     r5,[sp,#8]
;;;691            cb_data.cb_content.notif_ind_data.data.p_value = p_value;
;;;692        }
;;;693        else
;;;694        {
;;;695        	APP_PRINT_INFO1("vsop------------no handle %d",handle);
;;;696            return app_result;
;;;697        }
;;;698        /* Inform application the notif/ind result. */
;;;699        if (simp_client_cb)
        0x00208b8c:    9603        ..      STR      r6,[sp,#0xc]
        0x00208b8e:    6878        xh      LDR      r0,[r7,#4]
        0x00208b90:    b168        h.      CBZ      r0,0x208bae ; simp_ble_client_notif_ind_result_cb + 132
;;;700        {
;;;701        	APP_PRINT_INFO1("vsop------------simp_client_cb %d",handle);
        0x00208b92:    4922        "I      LDR      r1,[pc,#136] ; [0x208c1c] = 0x8800a34
        0x00208b94:    4623        #F      MOV      r3,r4
        0x00208b96:    2201        ."      MOVS     r2,#1
        0x00208b98:    31dc        .1      ADDS     r1,r1,#0xdc
        0x00208b9a:    4650        PF      MOV      r0,r10
        0x00208b9c:    f5feff5f    .._.    BL       log_buffer ; 0x7a5e
;;;702            app_result = (*simp_client_cb)(simp_client, conn_id, &cb_data);
        0x00208ba0:    481f        .H      LDR      r0,[pc,#124] ; [0x208c20] = 0x20cf4c
        0x00208ba2:    687b        {h      LDR      r3,[r7,#4]
        0x00208ba4:    466a        jF      MOV      r2,sp
        0x00208ba6:    4649        IF      MOV      r1,r9
        0x00208ba8:    7800        .x      LDRB     r0,[r0,#0]
        0x00208baa:    4798        .G      BLX      r3
        0x00208bac:    4680        .F      MOV      r8,r0
;;;703        }
;;;704    	APP_PRINT_INFO1("vsop------------return %d",handle);
        0x00208bae:    491d        .I      LDR      r1,[pc,#116] ; [0x208c24] = 0x8800b38
        0x00208bb0:    4623        #F      MOV      r3,r4
        0x00208bb2:    2201        ."      MOVS     r2,#1
        0x00208bb4:    4650        PF      MOV      r0,r10
        0x00208bb6:    f5feff52    ..R.    BL       log_buffer ; 0x7a5e
;;;705    
;;;706        return app_result;
        0x00208bba:    4640        @F      MOV      r0,r8
;;;707    }
        0x00208bbc:    e618        ..      B        0x2087f0 ; simp_ble_client_discover_state_cb + 98
        0x00208bbe:    4919        .I      LDR      r1,[pc,#100] ; [0x208c24] = 0x8800b38
        0x00208bc0:    3948        H9      SUBS     r1,r1,#0x48
        0x00208bc2:    e7f7        ..      B        0x208bb4 ; simp_ble_client_notif_ind_result_cb + 138
    simp_ble_client_disconnect_cb
;;;708    
;;;709    static void simp_ble_client_disconnect_cb(uint8_t conn_id)
;;;710    {
        0x00208bc4:    b510        ..      PUSH     {r4,lr}
        0x00208bc6:    4917        .I      LDR      r1,[pc,#92] ; [0x208c24] = 0x8800b38
;;; .\..\..\..\src\ble\profile\client\simple_ble_client.c (710)
        0x00208bc8:    4604        .F      MOV      r4,r0
;;;711        APP_PRINT_INFO0("simp_ble_client_disconnect_cb.");
        0x00208bca:    2200        ."      MOVS     r2,#0
        0x00208bcc:    3120         1      ADDS     r1,r1,#0x20
        0x00208bce:    480f        .H      LDR      r0,[pc,#60] ; [0x208c0c] = 0x21103002
        0x00208bd0:    f5feff45    ..E.    BL       log_buffer ; 0x7a5e
;;;712        if (conn_id >= simp_link_num)
        0x00208bd4:    480e        .H      LDR      r0,[pc,#56] ; [0x208c10] = 0x20cfcc
        0x00208bd6:    7801        .x      LDRB     r1,[r0,#0]
        0x00208bd8:    428c        .B      CMP      r4,r1
        0x00208bda:    d309        ..      BCC      0x208bf0 ; simp_ble_client_disconnect_cb + 44
;;;713        {
;;;714            PROFILE_PRINT_ERROR1("simp_ble_client_disconnect_cb: failed invalid conn_id %d", conn_id);
        0x00208bdc:    4911        .I      LDR      r1,[pc,#68] ; [0x208c24] = 0x8800b38
        0x00208bde:    4623        #F      MOV      r3,r4
        0x00208be0:    4809        .H      LDR      r0,[pc,#36] ; [0x208c08] = 0x21103302
        0x00208be2:    2201        ."      MOVS     r2,#1
        0x00208be4:    3144        D1      ADDS     r1,r1,#0x44
        0x00208be6:    e8bd4010    ...@    POP      {r4,lr}
        0x00208bea:    1e80        ..      SUBS     r0,r0,#2
        0x00208bec:    f5febf37    ..7.    B        log_buffer ; 0x7a5e
;;;715            return;
;;;716        }
;;;717        memset(&simp_table[conn_id], 0, sizeof(T_SIMP_LINK));
        0x00208bf0:    eb0401c4    ....    ADD      r1,r4,r4,LSL #3
        0x00208bf4:    6880        .h      LDR      r0,[r0,#8]
        0x00208bf6:    e8bd4010    ...@    POP      {r4,lr}
        0x00208bfa:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x00208bfe:    2112        .!      MOVS     r1,#0x12
        0x00208c00:    f651ba0c    Q...    B        __aeabi_memclr ; 0x5a01c
    $d
        0x00208c04:    08800654    T...    DCD    142607956
        0x00208c08:    21103302    .3.!    DCD    554709762
        0x00208c0c:    21103002    .0.!    DCD    554708994
        0x00208c10:    0020cfcc    .. .    DCD    2150348
        0x00208c14:    0880076c    l...    DCD    142608236
        0x00208c18:    08800928    (...    DCD    142608680
        0x00208c1c:    08800a34    4...    DCD    142608948
        0x00208c20:    0020cf4c    L. .    DCD    2150220
        0x00208c24:    08800b38    8...    DCD    142609208
    $t
    simp_ble_add_client
;;;718        return;
;;;719    }
;;;720    
;;;721    /**
;;;722     * @brief Simple BLE Client Callbacks.
;;;723    */
;;;724    const T_FUN_CLIENT_CBS simp_ble_client_cbs =
;;;725    {
;;;726        simp_ble_client_discover_state_cb,   //!< Discovery State callback function pointer
;;;727        simp_ble_client_discover_result_cb,  //!< Discovery result callback function pointer
;;;728        simp_ble_client_read_result_cb,      //!< Read response callback function pointer
;;;729        simp_ble_client_write_result_cb,     //!< Write result callback function pointer
;;;730        simp_ble_client_notif_ind_result_cb,  //!< Notify Indicate callback function pointer
;;;731        simp_ble_client_disconnect_cb       //!< Link disconnection callback function pointer
;;;732    };
;;;733    
;;;734    /**
;;;735      * @brief      Add simple ble service client to application.
;;;736      * @param[in]  app_cb pointer of app callback function to handle specific client module data.
;;;737      * @param[in]  link_num initialize link num.
;;;738      * @return Client ID of the specific client module.
;;;739      * @retval 0xff failed.
;;;740      * @retval other success.
;;;741      *
;;;742      * <b>Example usage</b>
;;;743      * \code{.c}
;;;744        void app_le_profile_init(void)
;;;745        {
;;;746            client_init(1);
;;;747            simple_ble_client_id = simp_ble_add_client(app_client_callback, APP_MAX_LINKS);
;;;748        }
;;;749      * \endcode
;;;750      */
;;;751    T_CLIENT_ID simp_ble_add_client(P_FUN_GENERAL_APP_CB app_cb, uint8_t link_num)
;;;752    {
        0x00208c28:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00208c2c:    4607        .F      MOV      r7,r0
        0x00208c2e:    460c        .F      MOV      r4,r1
        0x00208c30:    2904        .)      CMP      r1,#4
;;; .\..\..\..\src\ble\profile\client\simple_ble_client.c (752)
        0x00208c32:    d907        ..      BLS      0x208c44 ; simp_ble_add_client + 28
;;;753        uint16_t size;
;;;754        if (link_num > SIMP_MAX_LINKS)
;;;755        {
;;;756            PROFILE_PRINT_ERROR1("simp_ble_add_client: invalid link_num %d", link_num);
        0x00208c34:    460b        .F      MOV      r3,r1
        0x00208c36:    2201        ."      MOVS     r2,#1
        0x00208c38:    4916        .I      LDR      r1,[pc,#88] ; [0x208c94] = 0x8800bb8
        0x00208c3a:    4817        .H      LDR      r0,[pc,#92] ; [0x208c98] = 0x21103300
        0x00208c3c:    f5feff0f    ....    BL       log_buffer ; 0x7a5e
;;;757            return 0xff;
        0x00208c40:    20ff        .       MOVS     r0,#0xff
        0x00208c42:    e455        U.      B        0x2084f0 ; simp_ble_client_read_by_handle + 152
;;;758        }
;;;759        if (false == client_register_spec_client_cb(&simp_client, &simp_ble_client_cbs))
        0x00208c44:    4915        .I      LDR      r1,[pc,#84] ; [0x208c9c] = 0x20be08
        0x00208c46:    4816        .H      LDR      r0,[pc,#88] ; [0x208ca0] = 0x20cf4c
        0x00208c48:    f645fb94    E...    BL       client_register_spec_client_cb ; 0x4e374
        0x00208c4c:    4e14        .N      LDR      r6,[pc,#80] ; [0x208ca0] = 0x20cf4c
        0x00208c4e:    b1b0        ..      CBZ      r0,0x208c7e ; simp_ble_add_client + 86
;;;760        {
;;;761            simp_client = CLIENT_PROFILE_GENERAL_ID;
;;;762            APP_PRINT_ERROR0("simp_ble_add_client failed");
;;;763            return simp_client;
;;;764        }
;;;765        APP_PRINT_INFO1("simp_ble_add_client: simp_client %d", simp_client);
        0x00208c50:    4910        .I      LDR      r1,[pc,#64] ; [0x208c94] = 0x8800bb8
        0x00208c52:    7833        3x      LDRB     r3,[r6,#0]
        0x00208c54:    2201        ."      MOVS     r2,#1
        0x00208c56:    314c        L1      ADDS     r1,r1,#0x4c
        0x00208c58:    4812        .H      LDR      r0,[pc,#72] ; [0x208ca4] = 0x21103002
        0x00208c5a:    f5feff00    ....    BL       log_buffer ; 0x7a5e
;;;766    
;;;767        /* register callback for profile to inform application that some events happened. */
;;;768        simp_client_cb = app_cb;
        0x00208c5e:    4d12        .M      LDR      r5,[pc,#72] ; [0x208ca8] = 0x20cfcc
        0x00208c60:    eb0400c4    ....    ADD      r0,r4,r4,LSL #3
        0x00208c64:    4a0d        .J      LDR      r2,[pc,#52] ; [0x208c9c] = 0x20be08
;;;769        simp_link_num = link_num;
        0x00208c66:    606f        o`      STR      r7,[r5,#4]
        0x00208c68:    0041        A.      LSLS     r1,r0,#1
        0x00208c6a:    702c        ,p      STRB     r4,[r5,#0]
;;;770        size = simp_link_num * sizeof(T_SIMP_LINK);
;;;771        simp_table = os_mem_zalloc(RAM_TYPE_DATA_ON, size);
        0x00208c6c:    f2403303    @..3    MOV      r3,#0x303
        0x00208c70:    3218        .2      ADDS     r2,r2,#0x18
        0x00208c72:    2000        .       MOVS     r0,#0
        0x00208c74:    f61df8a0    ....    BL       os_mem_zalloc_intern ; 0x25db8
        0x00208c78:    60a8        .`      STR      r0,[r5,#8]
;;;772    
;;;773        return simp_client;
        0x00208c7a:    7830        0x      LDRB     r0,[r6,#0]
;;;774    }
        0x00208c7c:    e438        8.      B        0x2084f0 ; simp_ble_client_read_by_handle + 152
        0x00208c7e:    20ff        .       MOVS     r0,#0xff
        0x00208c80:    7030        0p      STRB     r0,[r6,#0]
        0x00208c82:    4904        .I      LDR      r1,[pc,#16] ; [0x208c94] = 0x8800bb8
        0x00208c84:    4807        .H      LDR      r0,[pc,#28] ; [0x208ca4] = 0x21103002
        0x00208c86:    2200        ."      MOVS     r2,#0
        0x00208c88:    312c        ,1      ADDS     r1,r1,#0x2c
        0x00208c8a:    1e80        ..      SUBS     r0,r0,#2
        0x00208c8c:    f5fefee7    ....    BL       log_buffer ; 0x7a5e
        0x00208c90:    e7f3        ..      B        0x208c7a ; simp_ble_add_client + 82
    $d
        0x00208c92:    0000        ..      DCW    0
        0x00208c94:    08800bb8    ....    DCD    142609336
        0x00208c98:    21103300    .3.!    DCD    554709760
        0x00208c9c:    0020be08    .. .    DCD    2145800
        0x00208ca0:    0020cf4c    L. .    DCD    2150220
        0x00208ca4:    21103002    .0.!    DCD    554708994
        0x00208ca8:    0020cfcc    .. .    DCD    2150348
    $t
    .text
    bas_start_discovery
;;; .\..\..\..\src\ble\profile\client\bas_client.c
;;;62     {
        0x00208cac:    b570        p.      PUSH     {r4-r6,lr}
        0x00208cae:    4605        .F      MOV      r5,r0
;;;63         PROFILE_PRINT_INFO0("bas_start_discovery");
        0x00208cb0:    2200        ."      MOVS     r2,#0
        0x00208cb2:    49fe        .I      LDR      r1,[pc,#1016] ; [0x2090ac] = 0x8800c2c
        0x00208cb4:    48fe        .H      LDR      r0,[pc,#1016] ; [0x2090b0] = 0x21103302
        0x00208cb6:    f5fefed2    ....    BL       log_buffer ; 0x7a5e
;;;64         if (conn_id >= bas_link_num)
        0x00208cba:    48fe        .H      LDR      r0,[pc,#1016] ; [0x2090b4] = 0x20cfd8
        0x00208cbc:    7801        .x      LDRB     r1,[r0,#0]
        0x00208cbe:    428d        .B      CMP      r5,r1
        0x00208cc0:    d308        ..      BCC      0x208cd4 ; bas_start_discovery + 40
;;;65         {
;;;66             PROFILE_PRINT_ERROR1("bas_start_discovery: failed invalid conn_id %d", conn_id);
        0x00208cc2:    49fa        .I      LDR      r1,[pc,#1000] ; [0x2090ac] = 0x8800c2c
        0x00208cc4:    48fa        .H      LDR      r0,[pc,#1000] ; [0x2090b0] = 0x21103302
        0x00208cc6:    462b        +F      MOV      r3,r5
        0x00208cc8:    2201        ."      MOVS     r2,#1
        0x00208cca:    3118        .1      ADDS     r1,r1,#0x18
        0x00208ccc:    1e80        ..      SUBS     r0,r0,#2
        0x00208cce:    f5fefec6    ....    BL       log_buffer ; 0x7a5e
;;;67             return false;
        0x00208cd2:    e013        ..      B        0x208cfc ; bas_start_discovery + 80
;;;68         }
;;;69         /* First clear handle cache. */
;;;70         memset(&bas_table[conn_id], 0, sizeof(T_BAS_LINK));
        0x00208cd4:    6880        .h      LDR      r0,[r0,#8]
        0x00208cd6:    eb050445    ..E.    ADD      r4,r5,r5,LSL #1
        0x00208cda:    eb000184    ....    ADD      r1,r0,r4,LSL #2
        0x00208cde:    2200        ."      MOVS     r2,#0
        0x00208ce0:    600a        .`      STR      r2,[r1,#0]
        0x00208ce2:    604a        J`      STR      r2,[r1,#4]
        0x00208ce4:    608a        .`      STR      r2,[r1,#8]
;;;71         bas_table[conn_id].disc_state = DISC_BAS_START;
        0x00208ce6:    2101        .!      MOVS     r1,#1
        0x00208ce8:    f8001024    ..$.    STRB     r1,[r0,r4,LSL #2]
;;;72         if (client_by_uuid_srv_discovery(conn_id, bas_client,
        0x00208cec:    48f2        .H      LDR      r0,[pc,#968] ; [0x2090b8] = 0x20cf4d
        0x00208cee:    f641020f    A...    MOV      r2,#0x180f
        0x00208cf2:    7801        .x      LDRB     r1,[r0,#0]
        0x00208cf4:    4628        (F      MOV      r0,r5
        0x00208cf6:    f645fc17    E...    BL       client_by_uuid_srv_discovery ; 0x4e528
        0x00208cfa:    b108        ..      CBZ      r0,0x208d00 ; bas_start_discovery + 84
        0x00208cfc:    2000        .       MOVS     r0,#0
        0x00208cfe:    bd70        p.      POP      {r4-r6,pc}
;;;73                                          GATT_UUID_BATTERY) == GAP_CAUSE_SUCCESS)
;;;74         {
;;;75             return true;
        0x00208d00:    2001        .       MOVS     r0,#1
;;;76         }
;;;77         return false;
;;;78     }
        0x00208d02:    bd70        p.      POP      {r4-r6,pc}
    bas_read_battery_level
;;;79     
;;;80     /**
;;;81       * @brief  Used by application, to read battery level.
;;;82       * @param[in]  conn_id connection ID.
;;;83       * @retval true send request to upper stack success.
;;;84       * @retval false send request to upper stack failed.
;;;85       *
;;;86       * <b>Example usage</b>
;;;87       * \code{.c}
;;;88         static T_USER_CMD_PARSE_RESULT cmd_basread(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;89         {
;;;90             uint8_t conn_id = p_parse_value->dw_param[0];
;;;91             bool ret = false;
;;;92             ret = bas_read_battery_level(conn_id);
;;;93             ......
;;;94         }
;;;95       * \endcode
;;;96       */
;;;97     bool bas_read_battery_level(uint8_t conn_id)
;;;98     {
        0x00208d04:    b510        ..      PUSH     {r4,lr}
;;;99         if (conn_id >= bas_link_num)
        0x00208d06:    49eb        .I      LDR      r1,[pc,#940] ; [0x2090b4] = 0x20cfd8
        0x00208d08:    4ce9        .L      LDR      r4,[pc,#932] ; [0x2090b0] = 0x21103302
        0x00208d0a:    780a        .x      LDRB     r2,[r1,#0]
        0x00208d0c:    1ea4        ..      SUBS     r4,r4,#2
        0x00208d0e:    4290        .B      CMP      r0,r2
        0x00208d10:    d307        ..      BCC      0x208d22 ; bas_read_battery_level + 30
;;;100        {
;;;101            PROFILE_PRINT_ERROR1("bas_read_battery_level: failed invalid conn_id %d", conn_id);
        0x00208d12:    49e6        .I      LDR      r1,[pc,#920] ; [0x2090ac] = 0x8800c2c
        0x00208d14:    4603        .F      MOV      r3,r0
        0x00208d16:    2201        ."      MOVS     r2,#1
        0x00208d18:    314c        L1      ADDS     r1,r1,#0x4c
        0x00208d1a:    4620         F      MOV      r0,r4
        0x00208d1c:    f5fefe9f    ....    BL       log_buffer ; 0x7a5e
;;;102            return false;
        0x00208d20:    e011        ..      B        0x208d46 ; bas_read_battery_level + 66
;;;103        }
;;;104        if (bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL])
        0x00208d22:    6889        .h      LDR      r1,[r1,#8]
        0x00208d24:    eb000240    ..@.    ADD      r2,r0,r0,LSL #1
        0x00208d28:    eb010182    ....    ADD      r1,r1,r2,LSL #2
        0x00208d2c:    890a        ..      LDRH     r2,[r1,#8]
        0x00208d2e:    b122        ".      CBZ      r2,0x208d3a ; bas_read_battery_level + 54
;;;105        {
;;;106            uint16_t handle = bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL];
;;;107            if (client_attr_read(conn_id, bas_client, handle) == GAP_CAUSE_SUCCESS)
        0x00208d30:    49e1        .I      LDR      r1,[pc,#900] ; [0x2090b8] = 0x20cf4d
        0x00208d32:    7809        .x      LDRB     r1,[r1,#0]
        0x00208d34:    f645fcbd    E...    BL       client_attr_read ; 0x4e6b2
        0x00208d38:    b138        8.      CBZ      r0,0x208d4a ; bas_read_battery_level + 70
;;;108            {
;;;109                return true;
;;;110            }
;;;111        }
;;;112        PROFILE_PRINT_ERROR0("bas_read_battery_level: false handle = 0");
        0x00208d3a:    49dc        .I      LDR      r1,[pc,#880] ; [0x2090ac] = 0x8800c2c
        0x00208d3c:    2200        ."      MOVS     r2,#0
        0x00208d3e:    3184        .1      ADDS     r1,r1,#0x84
        0x00208d40:    4620         F      MOV      r0,r4
        0x00208d42:    f5fefe8c    ....    BL       log_buffer ; 0x7a5e
;;;113        return false;
        0x00208d46:    2000        .       MOVS     r0,#0
;;;114    }
        0x00208d48:    bd10        ..      POP      {r4,pc}
        0x00208d4a:    2001        .       MOVS     r0,#1
        0x00208d4c:    bd10        ..      POP      {r4,pc}
    bas_set_notify
;;;115    /**
;;;116      * @brief  Used by application, to set the notification flag.
;;;117      * @param[in]  conn_id connection ID.
;;;118      * @param[in]  notify value to enable or disable notify.
;;;119      * @retval true send request to upper stack success.
;;;120      * @retval false send request to upper stack failed.
;;;121      *
;;;122      * <b>Example usage</b>
;;;123      * \code{.c}
;;;124        static T_USER_CMD_PARSE_RESULT cmd_bascccd(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;125        {
;;;126            uint8_t conn_id = p_parse_value->dw_param[0];
;;;127            bool notify = p_parse_value->dw_param[1];
;;;128            bool ret;
;;;129            ret = bas_set_notify(conn_id, notify);
;;;130            ......
;;;131        }
;;;132      * \endcode
;;;133      */
;;;134    bool bas_set_notify(uint8_t conn_id, bool notify)
;;;135    {
        0x00208d4e:    b5fe        ..      PUSH     {r1-r7,lr}
        0x00208d50:    4ed8        .N      LDR      r6,[pc,#864] ; [0x2090b4] = 0x20cfd8
        0x00208d52:    460c        .F      MOV      r4,r1
        0x00208d54:    4fd6        .O      LDR      r7,[pc,#856] ; [0x2090b0] = 0x21103302
        0x00208d56:    7831        1x      LDRB     r1,[r6,#0]
        0x00208d58:    1ebf        ..      SUBS     r7,r7,#2
        0x00208d5a:    4288        .B      CMP      r0,r1
        0x00208d5c:    d307        ..      BCC      0x208d6e ; bas_set_notify + 32
;;;136        if (conn_id >= bas_link_num)
;;;137        {
;;;138            PROFILE_PRINT_ERROR1("bas_set_notify: failed invalid conn_id %d", conn_id);
        0x00208d5e:    49d3        .I      LDR      r1,[pc,#844] ; [0x2090ac] = 0x8800c2c
        0x00208d60:    4603        .F      MOV      r3,r0
        0x00208d62:    2201        ."      MOVS     r2,#1
        0x00208d64:    31b0        .1      ADDS     r1,r1,#0xb0
        0x00208d66:    4638        8F      MOV      r0,r7
        0x00208d68:    f5fefe79    ..y.    BL       log_buffer ; 0x7a5e
;;;139            return false;
        0x00208d6c:    e019        ..      B        0x208da2 ; bas_set_notify + 84
;;;140        }
;;;141        if (bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD])
        0x00208d6e:    68b1        .h      LDR      r1,[r6,#8]
        0x00208d70:    eb000540    ..@.    ADD      r5,r0,r0,LSL #1
        0x00208d74:    eb010185    ....    ADD      r1,r1,r5,LSL #2
        0x00208d78:    894a        J.      LDRH     r2,[r1,#0xa]
        0x00208d7a:    b162        b.      CBZ      r2,0x208d96 ; bas_set_notify + 72
;;;142        {
;;;143            uint16_t handle = bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD];
        0x00208d7c:    b293        ..      UXTH     r3,r2
;;;144            uint16_t length = sizeof(uint16_t);
        0x00208d7e:    2102        .!      MOVS     r1,#2
        0x00208d80:    aa02        ..      ADD      r2,sp,#8
        0x00208d82:    e9cd1200    ....    STRD     r1,r2,[sp,#0]
        0x00208d86:    49cc        .I      LDR      r1,[pc,#816] ; [0x2090b8] = 0x20cf4d
;;;145            uint16_t cccd_bits = notify ? 1 : 0;
        0x00208d88:    f8ad4008    ...@    STRH     r4,[sp,#8]
;;;146            if (client_attr_write(conn_id, bas_client, GATT_WRITE_TYPE_REQ, handle,
        0x00208d8c:    2201        ."      MOVS     r2,#1
        0x00208d8e:    7809        .x      LDRB     r1,[r1,#0]
        0x00208d90:    f645fd86    E...    BL       client_attr_write ; 0x4e8a0
        0x00208d94:    b138        8.      CBZ      r0,0x208da6 ; bas_set_notify + 88
        0x00208d96:    49c5        .I      LDR      r1,[pc,#788] ; [0x2090ac] = 0x8800c2c
        0x00208d98:    2200        ."      MOVS     r2,#0
        0x00208d9a:    31e0        .1      ADDS     r1,r1,#0xe0
        0x00208d9c:    4638        8F      MOV      r0,r7
        0x00208d9e:    f5fefe5e    ..^.    BL       log_buffer ; 0x7a5e
        0x00208da2:    2000        .       MOVS     r0,#0
        0x00208da4:    bdfe        ..      POP      {r1-r7,pc}
;;;147                                  length, (uint8_t *)&cccd_bits) == GAP_CAUSE_SUCCESS)
;;;148            {
;;;149                bas_table[conn_id].write_notify_value = notify;
        0x00208da6:    68b0        .h      LDR      r0,[r6,#8]
        0x00208da8:    eb000085    ....    ADD      r0,r0,r5,LSL #2
        0x00208dac:    7044        Dp      STRB     r4,[r0,#1]
;;;150                return true;
        0x00208dae:    2001        .       MOVS     r0,#1
;;;151            }
;;;152        }
;;;153        PROFILE_PRINT_ERROR0("bas_set_notify: false handle = 0");
;;;154        return false;
;;;155    }
        0x00208db0:    bdfe        ..      POP      {r1-r7,pc}
    bas_read_notify
;;;156    
;;;157    /**
;;;158      * @brief  Used by application, to read the notification flag.
;;;159      * @param[in]  conn_id connection ID.
;;;160      * @retval true send request to upper stack success.
;;;161      * @retval false send request to upper stack failed.
;;;162      *
;;;163      * <b>Example usage</b>
;;;164      * \code{.c}
;;;165        static T_USER_CMD_PARSE_RESULT cmd_basread(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;166        {
;;;167            uint8_t conn_id = p_parse_value->dw_param[0];
;;;168            bool ret = false;
;;;169            ret = bas_read_notify(conn_id);
;;;170            ......
;;;171        }
;;;172      * \endcode
;;;173      */
;;;174    bool bas_read_notify(uint8_t conn_id)
;;;175    {
        0x00208db2:    b510        ..      PUSH     {r4,lr}
;;;176        if (conn_id >= bas_link_num)
        0x00208db4:    49bf        .I      LDR      r1,[pc,#764] ; [0x2090b4] = 0x20cfd8
        0x00208db6:    4cbe        .L      LDR      r4,[pc,#760] ; [0x2090b0] = 0x21103302
        0x00208db8:    780a        .x      LDRB     r2,[r1,#0]
        0x00208dba:    1ea4        ..      SUBS     r4,r4,#2
        0x00208dbc:    4290        .B      CMP      r0,r2
        0x00208dbe:    d306        ..      BCC      0x208dce ; bas_read_notify + 28
;;;177        {
;;;178            PROFILE_PRINT_ERROR1("bas_read_notify: failed invalid conn_id %d", conn_id);
        0x00208dc0:    4603        .F      MOV      r3,r0
        0x00208dc2:    2201        ."      MOVS     r2,#1
        0x00208dc4:    49bd        .I      LDR      r1,[pc,#756] ; [0x2090bc] = 0x8800d30
        0x00208dc6:    4620         F      MOV      r0,r4
        0x00208dc8:    f5fefe49    ..I.    BL       log_buffer ; 0x7a5e
;;;179            return false;
        0x00208dcc:    e011        ..      B        0x208df2 ; bas_read_notify + 64
;;;180        }
;;;181        if (bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD])
        0x00208dce:    6889        .h      LDR      r1,[r1,#8]
        0x00208dd0:    eb000240    ..@.    ADD      r2,r0,r0,LSL #1
        0x00208dd4:    eb010182    ....    ADD      r1,r1,r2,LSL #2
        0x00208dd8:    894a        J.      LDRH     r2,[r1,#0xa]
        0x00208dda:    b122        ".      CBZ      r2,0x208de6 ; bas_read_notify + 52
;;;182        {
;;;183            uint16_t handle = bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD];
;;;184            if (client_attr_read(conn_id, bas_client, handle) == GAP_CAUSE_SUCCESS)
        0x00208ddc:    49b6        .I      LDR      r1,[pc,#728] ; [0x2090b8] = 0x20cf4d
        0x00208dde:    7809        .x      LDRB     r1,[r1,#0]
        0x00208de0:    f645fc67    E.g.    BL       client_attr_read ; 0x4e6b2
        0x00208de4:    b138        8.      CBZ      r0,0x208df6 ; bas_read_notify + 68
;;;185            {
;;;186                return true;
;;;187            }
;;;188        }
;;;189        PROFILE_PRINT_ERROR0("bas_read_battery_level: false handle = 0");
        0x00208de6:    49b5        .I      LDR      r1,[pc,#724] ; [0x2090bc] = 0x8800d30
        0x00208de8:    2200        ."      MOVS     r2,#0
        0x00208dea:    3130        01      ADDS     r1,r1,#0x30
        0x00208dec:    4620         F      MOV      r0,r4
        0x00208dee:    f5fefe36    ..6.    BL       log_buffer ; 0x7a5e
;;;190        return false;
        0x00208df2:    2000        .       MOVS     r0,#0
;;;191    }
        0x00208df4:    bd10        ..      POP      {r4,pc}
        0x00208df6:    2001        .       MOVS     r0,#1
        0x00208df8:    bd10        ..      POP      {r4,pc}
    bas_get_hdl_cache
;;;192    
;;;193    /**
;;;194      * @brief  Used by application, to get handle cache.
;;;195      * @param[in]  conn_id connection ID.
;;;196      * @param[in]  p_hdl_cache pointer of the handle cache table
;;;197      * @param[in]  len the length of handle cache table
;;;198      * @retval true success.
;;;199      * @retval false failed.
;;;200      *
;;;201      * <b>Example usage</b>
;;;202      * \code{.c}
;;;203        static T_USER_CMD_PARSE_RESULT cmd_bashdl(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;204        {
;;;205            uint8_t conn_id = p_parse_value->dw_param[0];
;;;206            uint16_t hdl_cache[HDL_BAS_CACHE_LEN];
;;;207            bool ret = bas_get_hdl_cache(conn_id, hdl_cache,
;;;208                                         sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;209    
;;;210            ......
;;;211        }
;;;212      * \endcode
;;;213      */
;;;214    bool bas_get_hdl_cache(uint8_t conn_id, uint16_t *p_hdl_cache, uint8_t len)
;;;215    {
        0x00208dfa:    b570        p.      PUSH     {r4-r6,lr}
        0x00208dfc:    460e        .F      MOV      r6,r1
;;;216        if (conn_id >= bas_link_num)
        0x00208dfe:    49ad        .I      LDR      r1,[pc,#692] ; [0x2090b4] = 0x20cfd8
        0x00208e00:    4dab        .M      LDR      r5,[pc,#684] ; [0x2090b0] = 0x21103302
        0x00208e02:    780b        .x      LDRB     r3,[r1,#0]
        0x00208e04:    1ead        ..      SUBS     r5,r5,#2
        0x00208e06:    4298        .B      CMP      r0,r3
        0x00208e08:    d304        ..      BCC      0x208e14 ; bas_get_hdl_cache + 26
;;;217        {
;;;218            PROFILE_PRINT_ERROR1("bas_get_hdl_cache: failed invalid conn_id %d", conn_id);
        0x00208e0a:    49ac        .I      LDR      r1,[pc,#688] ; [0x2090bc] = 0x8800d30
        0x00208e0c:    2201        ."      MOVS     r2,#1
        0x00208e0e:    4603        .F      MOV      r3,r0
        0x00208e10:    315c        \1      ADDS     r1,r1,#0x5c
;;;219            return false;
        0x00208e12:    e011        ..      B        0x208e38 ; bas_get_hdl_cache + 62
;;;220        }
;;;221        if (bas_table[conn_id].disc_state != DISC_BAS_DONE)
        0x00208e14:    688b        .h      LDR      r3,[r1,#8]
        0x00208e16:    eb000040    ..@.    ADD      r0,r0,r0,LSL #1
        0x00208e1a:    f8134020    .. @    LDRB     r4,[r3,r0,LSL #2]
        0x00208e1e:    2c02        .,      CMP      r4,#2
        0x00208e20:    d004        ..      BEQ      0x208e2c ; bas_get_hdl_cache + 50
        0x00208e22:    49a6        .I      LDR      r1,[pc,#664] ; [0x2090bc] = 0x8800d30
        0x00208e24:    2201        ."      MOVS     r2,#1
        0x00208e26:    4623        #F      MOV      r3,r4
;;;222        {
;;;223            PROFILE_PRINT_ERROR1("bas_get_hdl_cache: failed invalid state %d", bas_table[conn_id].disc_state);
        0x00208e28:    318c        .1      ADDS     r1,r1,#0x8c
;;;224            return false;
        0x00208e2a:    e005        ..      B        0x208e38 ; bas_get_hdl_cache + 62
;;;225        }
;;;226        if (len != sizeof(uint16_t) * HDL_BAS_CACHE_LEN)
        0x00208e2c:    2a08        .*      CMP      r2,#8
        0x00208e2e:    d008        ..      BEQ      0x208e42 ; bas_get_hdl_cache + 72
;;;227        {
;;;228            PROFILE_PRINT_ERROR1("bas_get_hdl_cache: failed invalid len %d", len);
        0x00208e30:    4613        .F      MOV      r3,r2
        0x00208e32:    49a2        .I      LDR      r1,[pc,#648] ; [0x2090bc] = 0x8800d30
        0x00208e34:    2201        ."      MOVS     r2,#1
        0x00208e36:    31bc        .1      ADDS     r1,r1,#0xbc
        0x00208e38:    4628        (F      MOV      r0,r5
        0x00208e3a:    f5fefe10    ....    BL       log_buffer ; 0x7a5e
;;;229            return false;
        0x00208e3e:    2000        .       MOVS     r0,#0
        0x00208e40:    bd70        p.      POP      {r4-r6,pc}
;;;230        }
;;;231        memcpy(p_hdl_cache, bas_table[conn_id].hdl_cache, len);
        0x00208e42:    eb030180    ....    ADD      r1,r3,r0,LSL #2
        0x00208e46:    4630        0F      MOV      r0,r6
        0x00208e48:    1d09        ..      ADDS     r1,r1,#4
        0x00208e4a:    f651f826    Q.&.    BL       __aeabi_memcpy ; 0x59e9a
;;;232        return true;
        0x00208e4e:    2001        .       MOVS     r0,#1
;;;233    }
        0x00208e50:    bd70        p.      POP      {r4-r6,pc}
    bas_set_hdl_cache
;;;234    
;;;235    /**
;;;236      * @brief  Used by application, to set handle cache.
;;;237      * @param[in]  conn_id connection ID.
;;;238      * @param[in]  p_hdl_cache pointer of the handle cache table
;;;239      * @param[in]  len the length of handle cache table
;;;240      * @retval true success.
;;;241      * @retval false failed.
;;;242      *
;;;243      * <b>Example usage</b>
;;;244      * \code{.c}
;;;245        void app_discov_services(uint8_t conn_id, bool start)
;;;246        {
;;;247            ......
;;;248            if (app_srvs_table.srv_found_flags & APP_DISCOV_BAS_FLAG)
;;;249            {
;;;250                bas_set_hdl_cache(conn_id, app_srvs_table.bas_hdl_cache, sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;251            }
;;;252            ......
;;;253        }
;;;254      * \endcode
;;;255      */
;;;256    bool bas_set_hdl_cache(uint8_t conn_id, uint16_t *p_hdl_cache, uint8_t len)
;;;257    {
        0x00208e52:    b570        p.      PUSH     {r4-r6,lr}
;;;258        if (conn_id >= bas_link_num)
        0x00208e54:    4d97        .M      LDR      r5,[pc,#604] ; [0x2090b4] = 0x20cfd8
        0x00208e56:    4e96        .N      LDR      r6,[pc,#600] ; [0x2090b0] = 0x21103302
        0x00208e58:    782b        +x      LDRB     r3,[r5,#0]
        0x00208e5a:    1eb6        ..      SUBS     r6,r6,#2
        0x00208e5c:    4298        .B      CMP      r0,r3
        0x00208e5e:    d304        ..      BCC      0x208e6a ; bas_set_hdl_cache + 24
;;;259        {
;;;260            PROFILE_PRINT_ERROR1("bas_set_hdl_cache: failed invalid conn_id %d", conn_id);
        0x00208e60:    4996        .I      LDR      r1,[pc,#600] ; [0x2090bc] = 0x8800d30
        0x00208e62:    2201        ."      MOVS     r2,#1
        0x00208e64:    4603        .F      MOV      r3,r0
        0x00208e66:    31e8        .1      ADDS     r1,r1,#0xe8
;;;261            return false;
        0x00208e68:    e00e        ..      B        0x208e88 ; bas_set_hdl_cache + 54
;;;262        }
;;;263        if (bas_table[conn_id].disc_state != DISC_BAS_IDLE)
        0x00208e6a:    eb000440    ..@.    ADD      r4,r0,r0,LSL #1
        0x00208e6e:    68a8        .h      LDR      r0,[r5,#8]
        0x00208e70:    f8103024    ..$0    LDRB     r3,[r0,r4,LSL #2]
        0x00208e74:    b113        ..      CBZ      r3,0x208e7c ; bas_set_hdl_cache + 42
;;;264        {
;;;265            PROFILE_PRINT_ERROR1("bas_set_hdl_cache: failed invalid state %d", bas_table[conn_id].disc_state);
        0x00208e76:    2201        ."      MOVS     r2,#1
        0x00208e78:    4991        .I      LDR      r1,[pc,#580] ; [0x2090c0] = 0x8800e48
;;;266            return false;
        0x00208e7a:    e005        ..      B        0x208e88 ; bas_set_hdl_cache + 54
;;;267        }
;;;268        if (len != sizeof(uint16_t) * HDL_BAS_CACHE_LEN)
        0x00208e7c:    2a08        .*      CMP      r2,#8
        0x00208e7e:    d008        ..      BEQ      0x208e92 ; bas_set_hdl_cache + 64
;;;269        {
;;;270            PROFILE_PRINT_ERROR1("bas_set_hdl_cache: failed invalid len %d", len);
        0x00208e80:    4613        .F      MOV      r3,r2
        0x00208e82:    498f        .I      LDR      r1,[pc,#572] ; [0x2090c0] = 0x8800e48
        0x00208e84:    2201        ."      MOVS     r2,#1
        0x00208e86:    3130        01      ADDS     r1,r1,#0x30
        0x00208e88:    4630        0F      MOV      r0,r6
        0x00208e8a:    f5fefde8    ....    BL       log_buffer ; 0x7a5e
;;;271            return false;
        0x00208e8e:    2000        .       MOVS     r0,#0
        0x00208e90:    bd70        p.      POP      {r4-r6,pc}
;;;272        }
;;;273        memcpy(bas_table[conn_id].hdl_cache, p_hdl_cache, len);
        0x00208e92:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00208e96:    1d00        ..      ADDS     r0,r0,#4
        0x00208e98:    f650ffff    P...    BL       __aeabi_memcpy ; 0x59e9a
;;;274        bas_table[conn_id].disc_state = DISC_BAS_DONE;
        0x00208e9c:    68a9        .h      LDR      r1,[r5,#8]
        0x00208e9e:    2002        .       MOVS     r0,#2
        0x00208ea0:    f8010024    ..$.    STRB     r0,[r1,r4,LSL #2]
;;;275        return true;
        0x00208ea4:    2001        .       MOVS     r0,#1
;;;276    }
        0x00208ea6:    bd70        p.      POP      {r4-r6,pc}
    bas_client_discover_state_cb
;;;277    
;;;278    static bool bas_start_char_discovery(uint8_t conn_id)
;;;279    {
;;;280        uint16_t start_handle;
;;;281        uint16_t end_handle;
;;;282    
;;;283        PROFILE_PRINT_INFO0("bas_start_char_discovery");
;;;284        start_handle = bas_table[conn_id].hdl_cache[HDL_BAS_SRV_START];
;;;285        end_handle = bas_table[conn_id].hdl_cache[HDL_BAS_SRV_END];
;;;286        if (client_all_char_discovery(conn_id, bas_client, start_handle,
;;;287                                      end_handle) == GAP_CAUSE_SUCCESS)
;;;288        {
;;;289            return true;
;;;290        }
;;;291        return false;
;;;292    }
;;;293    
;;;294    static bool bas_start_char_descriptor_discovery(uint8_t conn_id)
;;;295    {
;;;296        uint16_t start_handle;
;;;297        uint16_t end_handle;
;;;298    
;;;299        PROFILE_PRINT_INFO0("bas_start_char_descriptor_discovery");
;;;300        start_handle = bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL];
;;;301        end_handle = bas_table[conn_id].hdl_cache[HDL_BAS_SRV_END];
;;;302        if (client_all_char_descriptor_discovery(conn_id, bas_client, start_handle,
;;;303                                                 end_handle) == GAP_CAUSE_SUCCESS)
;;;304        {
;;;305            return true;
;;;306        }
;;;307        return false;
;;;308    }
;;;309    
;;;310    static void bas_client_discover_state_cb(uint8_t conn_id,  T_DISCOVERY_STATE discovery_state)
;;;311    {
        0x00208ea8:    e92d47fc    -..G    PUSH     {r2-r10,lr}
        0x00208eac:    4605        .F      MOV      r5,r0
        0x00208eae:    4688        .F      MOV      r8,r1
        0x00208eb0:    460b        .F      MOV      r3,r1
        0x00208eb2:    2000        .       MOVS     r0,#0
        0x00208eb4:    4982        .I      LDR      r1,[pc,#520] ; [0x2090c0] = 0x8800e48
        0x00208eb6:    f8dfa1f8    ....    LDR      r10,[pc,#504] ; [0x2090b0] = 0x21103302
        0x00208eba:    f88d0000    ....    STRB     r0,[sp,#0]
        0x00208ebe:    2201        ."      MOVS     r2,#1
        0x00208ec0:    31a0        .1      ADDS     r1,r1,#0xa0
        0x00208ec2:    4650        PF      MOV      r0,r10
        0x00208ec4:    f5fefdcb    ....    BL       log_buffer ; 0x7a5e
        0x00208ec8:    4e7a        zN      LDR      r6,[pc,#488] ; [0x2090b4] = 0x20cfd8
        0x00208eca:    eb050445    ..E.    ADD      r4,r5,r5,LSL #1
        0x00208ece:    68b0        .h      LDR      r0,[r6,#8]
        0x00208ed0:    f8101024    ..$.    LDRB     r1,[r0,r4,LSL #2]
        0x00208ed4:    2901        .)      CMP      r1,#1
        0x00208ed6:    d116        ..      BNE      0x208f06 ; bas_client_discover_state_cb + 94
        0x00208ed8:    2703        .'      MOVS     r7,#3
        0x00208eda:    f8df91dc    ....    LDR      r9,[pc,#476] ; [0x2090b8] = 0x20cf4d
        0x00208ede:    f1b80f02    ....    CMP      r8,#2
        0x00208ee2:    d012        ..      BEQ      0x208f0a ; bas_client_discover_state_cb + 98
        0x00208ee4:    2102        .!      MOVS     r1,#2
        0x00208ee6:    f1b80f06    ....    CMP      r8,#6
        0x00208eea:    d028        (.      BEQ      0x208f3e ; bas_client_discover_state_cb + 150
        0x00208eec:    f1b80f0a    ....    CMP      r8,#0xa
        0x00208ef0:    d03e        >.      BEQ      0x208f70 ; bas_client_discover_state_cb + 200
        0x00208ef2:    f1b80f0b    ....    CMP      r8,#0xb
        0x00208ef6:    d01f        ..      BEQ      0x208f38 ; bas_client_discover_state_cb + 144
        0x00208ef8:    4971        qI      LDR      r1,[pc,#452] ; [0x2090c0] = 0x8800e48
        0x00208efa:    2200        ."      MOVS     r2,#0
        0x00208efc:    31d8        .1      ADDS     r1,r1,#0xd8
        0x00208efe:    f1aa0002    ....    SUB      r0,r10,#2
        0x00208f02:    f5fefdac    ....    BL       log_buffer ; 0x7a5e
        0x00208f06:    e8bd87fc    ....    POP      {r2-r10,pc}
        0x00208f0a:    eb000184    ....    ADD      r1,r0,r4,LSL #2
        0x00208f0e:    888a        ..      LDRH     r2,[r1,#4]
        0x00208f10:    b90a        ..      CBNZ     r2,0x208f16 ; bas_client_discover_state_cb + 110
        0x00208f12:    88c9        ..      LDRH     r1,[r1,#6]
        0x00208f14:    b181        ..      CBZ      r1,0x208f38 ; bas_client_discover_state_cb + 144
;;; .\..\..\..\src\ble\profile\client\bas_client.c (283)
        0x00208f16:    496a        jI      LDR      r1,[pc,#424] ; [0x2090c0] = 0x8800e48
        0x00208f18:    2200        ."      MOVS     r2,#0
        0x00208f1a:    315c        \1      ADDS     r1,r1,#0x5c
        0x00208f1c:    4650        PF      MOV      r0,r10
        0x00208f1e:    f5fefd9e    ....    BL       log_buffer ; 0x7a5e
;;;284        start_handle = bas_table[conn_id].hdl_cache[HDL_BAS_SRV_START];
        0x00208f22:    68b0        .h      LDR      r0,[r6,#8]
        0x00208f24:    f8991000    ....    LDRB     r1,[r9,#0]
        0x00208f28:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00208f2c:    8882        ..      LDRH     r2,[r0,#4]
;;;285        end_handle = bas_table[conn_id].hdl_cache[HDL_BAS_SRV_END];
        0x00208f2e:    88c3        ..      LDRH     r3,[r0,#6]
;;;286        if (client_all_char_discovery(conn_id, bas_client, start_handle,
        0x00208f30:    4628        (F      MOV      r0,r5
        0x00208f32:    f645fb44    E.D.    BL       client_all_char_discovery ; 0x4e5be
        0x00208f36:    e017        ..      B        0x208f68 ; bas_client_discover_state_cb + 192
        0x00208f38:    f8007024    ..$p    STRB     r7,[r0,r4,LSL #2]
        0x00208f3c:    e01a        ..      B        0x208f74 ; bas_client_discover_state_cb + 204
        0x00208f3e:    eb000284    ....    ADD      r2,r0,r4,LSL #2
        0x00208f42:    7892        .x      LDRB     r2,[r2,#2]
        0x00208f44:    06d2        ..      LSLS     r2,r2,#27
        0x00208f46:    d513        ..      BPL      0x208f70 ; bas_client_discover_state_cb + 200
;;;287                                      end_handle) == GAP_CAUSE_SUCCESS)
;;;288        {
;;;289            return true;
;;;290        }
;;;291        return false;
;;;292    }
;;;293    
;;;294    static bool bas_start_char_descriptor_discovery(uint8_t conn_id)
;;;295    {
;;;296        uint16_t start_handle;
;;;297        uint16_t end_handle;
;;;298    
;;;299        PROFILE_PRINT_INFO0("bas_start_char_descriptor_discovery");
        0x00208f48:    495d        ]I      LDR      r1,[pc,#372] ; [0x2090c0] = 0x8800e48
        0x00208f4a:    2200        ."      MOVS     r2,#0
        0x00208f4c:    3178        x1      ADDS     r1,r1,#0x78
        0x00208f4e:    4650        PF      MOV      r0,r10
        0x00208f50:    f5fefd85    ....    BL       log_buffer ; 0x7a5e
;;;300        start_handle = bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL];
        0x00208f54:    68b0        .h      LDR      r0,[r6,#8]
        0x00208f56:    f8991000    ....    LDRB     r1,[r9,#0]
        0x00208f5a:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00208f5e:    8902        ..      LDRH     r2,[r0,#8]
;;;301        end_handle = bas_table[conn_id].hdl_cache[HDL_BAS_SRV_END];
        0x00208f60:    88c3        ..      LDRH     r3,[r0,#6]
;;;302        if (client_all_char_descriptor_discovery(conn_id, bas_client, start_handle,
        0x00208f62:    4628        (F      MOV      r0,r5
        0x00208f64:    f645fb8e    E...    BL       client_all_char_descriptor_discovery ; 0x4e684
        0x00208f68:    2800        .(      CMP      r0,#0
        0x00208f6a:    d0cc        ..      BEQ      0x208f06 ; bas_client_discover_state_cb + 94
;;;303                                                 end_handle) == GAP_CAUSE_SUCCESS)
;;;304        {
;;;305            return true;
;;;306        }
;;;307        return false;
;;;308    }
;;;309    
;;;310    static void bas_client_discover_state_cb(uint8_t conn_id,  T_DISCOVERY_STATE discovery_state)
;;;311    {
;;;312        bool cb_flag = false;
;;;313        T_BAS_CLIENT_CB_DATA cb_data;
;;;314        cb_data.cb_type = BAS_CLIENT_CB_TYPE_DISC_STATE;
;;;315    
;;;316        PROFILE_PRINT_INFO1("bas_client_discover_state_cb: discovery_state = %d", discovery_state);
;;;317        if (bas_table[conn_id].disc_state == DISC_BAS_START)
;;;318        {
;;;319            switch (discovery_state)
;;;320            {
;;;321            case DISC_STATE_SRV_DONE:
;;;322                /* Indicate that service handle found. Start discover characteristic. */
;;;323                if ((bas_table[conn_id].hdl_cache[HDL_BAS_SRV_START] != 0)
;;;324                    || (bas_table[conn_id].hdl_cache[HDL_BAS_SRV_END] != 0))
;;;325                {
;;;326                    if (bas_start_char_discovery(conn_id) == false)
;;;327                    {
;;;328                        bas_table[conn_id].disc_state = DISC_BAS_FAILED;
;;;329                        cb_flag = true;
;;;330                    }
;;;331                }
;;;332                /* No BAS handle found. Discover procedure complete. */
;;;333                else
;;;334                {
;;;335                    bas_table[conn_id].disc_state = DISC_BAS_FAILED;
;;;336                    cb_flag = true;
;;;337                }
;;;338                break;
;;;339            case DISC_STATE_CHAR_DONE:
;;;340                if (bas_table[conn_id].properties & GATT_CHAR_PROP_NOTIFY)
;;;341                {
;;;342                    //discovery cccd
;;;343                    if (bas_start_char_descriptor_discovery(conn_id) == false)
;;;344                    {
;;;345                        bas_table[conn_id].disc_state = DISC_BAS_FAILED;
;;;346                        cb_flag = true;
        0x00208f6c:    68b0        .h      LDR      r0,[r6,#8]
        0x00208f6e:    e7e3        ..      B        0x208f38 ; bas_client_discover_state_cb + 144
;;;347                    }
;;;348                }
;;;349                else
;;;350                {
;;;351                    bas_table[conn_id].disc_state = DISC_BAS_DONE;
        0x00208f70:    f8001024    ..$.    STRB     r1,[r0,r4,LSL #2]
;;;352                    cb_flag = true;
;;;353                }
;;;354                break;
;;;355    
;;;356            case DISC_STATE_CHAR_DESCRIPTOR_DONE:
;;;357                bas_table[conn_id].disc_state = DISC_BAS_DONE;
;;;358                cb_flag = true;
;;;359                break;
;;;360    
;;;361            case DISC_STATE_FAILED:
;;;362                bas_table[conn_id].disc_state = DISC_BAS_FAILED;
;;;363                cb_flag = true;
;;;364                break;
;;;365    
;;;366            default:
;;;367                PROFILE_PRINT_ERROR0("Invalid Discovery State!");
;;;368                break;
;;;369            }
;;;370        }
;;;371    
;;;372        /* Send discover state to application if needed. */
;;;373        if (cb_flag && bas_client_cb)
        0x00208f74:    6873        sh      LDR      r3,[r6,#4]
        0x00208f76:    2b00        .+      CMP      r3,#0
        0x00208f78:    d0c5        ..      BEQ      0x208f06 ; bas_client_discover_state_cb + 94
;;;374        {
;;;375            cb_data.cb_content.disc_state = bas_table[conn_id].disc_state;
        0x00208f7a:    68b0        .h      LDR      r0,[r6,#8]
        0x00208f7c:    466a        jF      MOV      r2,sp
        0x00208f7e:    4629        )F      MOV      r1,r5
        0x00208f80:    f8100024    ..$.    LDRB     r0,[r0,r4,LSL #2]
        0x00208f84:    f88d0002    ....    STRB     r0,[sp,#2]
;;;376            (*bas_client_cb)(bas_client, conn_id, &cb_data);
        0x00208f88:    f8990000    ....    LDRB     r0,[r9,#0]
        0x00208f8c:    4798        .G      BLX      r3
;;;377        }
;;;378        return;
;;;379    }
        0x00208f8e:    e7ba        ..      B        0x208f06 ; bas_client_discover_state_cb + 94
    bas_client_discover_result_cb
;;;380    
;;;381    
;;;382    static void bas_client_discover_result_cb(uint8_t conn_id,  T_DISCOVERY_RESULT_TYPE result_type,
;;;383                                              T_DISCOVERY_RESULT_DATA result_data)
;;;384    {
        0x00208f90:    b570        p.      PUSH     {r4-r6,lr}
        0x00208f92:    460e        .F      MOV      r6,r1
        0x00208f94:    460b        .F      MOV      r3,r1
        0x00208f96:    494a        JI      LDR      r1,[pc,#296] ; [0x2090c0] = 0x8800e48
;;; .\..\..\..\src\ble\profile\client\bas_client.c (384)
        0x00208f98:    4614        .F      MOV      r4,r2
        0x00208f9a:    4605        .F      MOV      r5,r0
;;;385        PROFILE_PRINT_INFO1("bas_client_discover_result_cb: result_type = %d", result_type);
        0x00208f9c:    2201        ."      MOVS     r2,#1
        0x00208f9e:    31f4        .1      ADDS     r1,r1,#0xf4
        0x00208fa0:    4843        CH      LDR      r0,[pc,#268] ; [0x2090b0] = 0x21103302
        0x00208fa2:    f5fefd5c    ..\.    BL       log_buffer ; 0x7a5e
;;;386        if (bas_table[conn_id].disc_state == DISC_BAS_START)
        0x00208fa6:    4843        CH      LDR      r0,[pc,#268] ; [0x2090b4] = 0x20cfd8
        0x00208fa8:    eb050545    ..E.    ADD      r5,r5,r5,LSL #1
        0x00208fac:    6880        .h      LDR      r0,[r0,#8]
        0x00208fae:    f8101025    ..%.    LDRB     r1,[r0,r5,LSL #2]
        0x00208fb2:    2901        .)      CMP      r1,#1
        0x00208fb4:    d113        ..      BNE      0x208fde ; bas_client_discover_result_cb + 78
;;;387        {
;;;388            switch (result_type)
        0x00208fb6:    2e02        ..      CMP      r6,#2
        0x00208fb8:    d00b        ..      BEQ      0x208fd2 ; bas_client_discover_result_cb + 66
        0x00208fba:    2e03        ..      CMP      r6,#3
        0x00208fbc:    d010        ..      BEQ      0x208fe0 ; bas_client_discover_result_cb + 80
        0x00208fbe:    2e05        ..      CMP      r6,#5
        0x00208fc0:    d01a        ..      BEQ      0x208ff8 ; bas_client_discover_result_cb + 104
        0x00208fc2:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00208fc6:    483a        :H      LDR      r0,[pc,#232] ; [0x2090b0] = 0x21103302
        0x00208fc8:    2200        ."      MOVS     r2,#0
        0x00208fca:    493e        >I      LDR      r1,[pc,#248] ; [0x2090c4] = 0x8800f70
        0x00208fcc:    1e80        ..      SUBS     r0,r0,#2
        0x00208fce:    f5febd46    ..F.    B        log_buffer ; 0x7a5e
;;;389            {
;;;390            case DISC_RESULT_SRV_DATA:
;;;391                bas_table[conn_id].hdl_cache[HDL_BAS_SRV_START] =
        0x00208fd2:    eb000085    ....    ADD      r0,r0,r5,LSL #2
        0x00208fd6:    8821        !.      LDRH     r1,[r4,#0]
        0x00208fd8:    8081        ..      STRH     r1,[r0,#4]
;;;392                    result_data.p_srv_disc_data->att_handle;
;;;393                bas_table[conn_id].hdl_cache[HDL_BAS_SRV_END] =
        0x00208fda:    8861        a.      LDRH     r1,[r4,#2]
        0x00208fdc:    80c1        ..      STRH     r1,[r0,#6]
        0x00208fde:    bd70        p.      POP      {r4-r6,pc}
        0x00208fe0:    88e2        ..      LDRH     r2,[r4,#6]
;;;394                    result_data.p_srv_disc_data->end_group_handle;
;;;395                break;
;;;396    
;;;397            case DISC_RESULT_CHAR_UUID16:
;;;398                {
;;;399                    uint16_t handle;
;;;400                    handle = result_data.p_char_uuid16_disc_data->value_handle;
        0x00208fe2:    88a1        ..      LDRH     r1,[r4,#4]
;;;401                    if (result_data.p_char_uuid16_disc_data->uuid16 == GATT_UUID_CHAR_BAS_LEVEL)
        0x00208fe4:    f5a25328    ..(S    SUB      r3,r2,#0x2a00
        0x00208fe8:    3b19        .;      SUBS     r3,r3,#0x19
        0x00208fea:    d1f8        ..      BNE      0x208fde ; bas_client_discover_result_cb + 78
;;;402                    {
;;;403                        bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL] = handle;
        0x00208fec:    eb000085    ....    ADD      r0,r0,r5,LSL #2
        0x00208ff0:    8101        ..      STRH     r1,[r0,#8]
;;;404                        bas_table[conn_id].properties = result_data.p_char_uuid16_disc_data->properties;
        0x00208ff2:    8861        a.      LDRH     r1,[r4,#2]
        0x00208ff4:    8041        A.      STRH     r1,[r0,#2]
        0x00208ff6:    bd70        p.      POP      {r4-r6,pc}
;;;405                    }
;;;406                }
;;;407                break;
;;;408    
;;;409            case DISC_RESULT_CHAR_DESC_UUID16:
;;;410                if (result_data.p_char_desc_uuid16_disc_data->uuid16 == GATT_UUID_CHAR_CLIENT_CONFIG)
        0x00208ff8:    8861        a.      LDRH     r1,[r4,#2]
        0x00208ffa:    f5a15224    ..$R    SUB      r2,r1,#0x2900
        0x00208ffe:    3a02        .:      SUBS     r2,#2
        0x00209000:    d1f9        ..      BNE      0x208ff6 ; bas_client_discover_result_cb + 102
;;;411                {
;;;412                    bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD] =
        0x00209002:    eb000085    ....    ADD      r0,r0,r5,LSL #2
        0x00209006:    8821        !.      LDRH     r1,[r4,#0]
        0x00209008:    8141        A.      STRH     r1,[r0,#0xa]
;;;413                        result_data.p_char_desc_uuid16_disc_data->handle;
;;;414                }
;;;415                break;
;;;416    
;;;417            default:
;;;418                PROFILE_PRINT_ERROR0("Invalid Discovery Result Type!");
;;;419                break;
;;;420            }
;;;421        }
;;;422    
;;;423        return;
;;;424    }
        0x0020900a:    bd70        p.      POP      {r4-r6,pc}
    bas_client_write_result_cb
;;;425    
;;;426    static void bas_client_write_result_cb(uint8_t conn_id, T_GATT_WRITE_TYPE type,
;;;427                                           uint16_t handle,
;;;428                                           uint16_t cause,
;;;429                                           uint8_t credits)
;;;430    {
        0x0020900c:    e92d43fe    -..C    PUSH     {r1-r9,lr}
        0x00209010:    4f28        (O      LDR      r7,[pc,#160] ; [0x2090b4] = 0x20cfd8
;;; .\..\..\..\src\ble\profile\client\bas_client.c (430)
        0x00209012:    4681        .F      MOV      r9,r0
        0x00209014:    eb000449    ..I.    ADD      r4,r0,r9,LSL #1
        0x00209018:    68b8        .h      LDR      r0,[r7,#8]
        0x0020901a:    461d        .F      MOV      r5,r3
;;;431        T_BAS_CLIENT_CB_DATA cb_data;
;;;432        uint16_t *hdl_cache;
;;;433        hdl_cache = bas_table[conn_id].hdl_cache;
        0x0020901c:    eb000684    ....    ADD      r6,r0,r4,LSL #2
;;;434        cb_data.cb_type = BAS_CLIENT_CB_TYPE_WRITE_RESULT;
        0x00209020:    2002        .       MOVS     r0,#2
        0x00209022:    9300        ..      STR      r3,[sp,#0]
        0x00209024:    4690        .F      MOV      r8,r2
        0x00209026:    4613        .F      MOV      r3,r2
        0x00209028:    4926        &I      LDR      r1,[pc,#152] ; [0x2090c4] = 0x8800f70
        0x0020902a:    f88d0004    ....    STRB     r0,[sp,#4]
;;;435    
;;;436        PROFILE_PRINT_INFO2("bas_client_write_result_cb: handle 0x%x, cause 0x%x", handle, cause);
        0x0020902e:    4602        .F      MOV      r2,r0
        0x00209030:    3124        $1      ADDS     r1,r1,#0x24
        0x00209032:    481f        .H      LDR      r0,[pc,#124] ; [0x2090b0] = 0x21103302
        0x00209034:    f5fefd13    ....    BL       log_buffer ; 0x7a5e
;;;437        cb_data.cb_content.write_result.cause = cause;
        0x00209038:    f8ad5008    ...P    STRH     r5,[sp,#8]
;;;438    
;;;439        if (handle == hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD])
        0x0020903c:    8971        q.      LDRH     r1,[r6,#0xa]
        0x0020903e:    4541        AE      CMP      r1,r8
        0x00209040:    d111        ..      BNE      0x209066 ; bas_client_write_result_cb + 90
;;;440        {
;;;441            if (bas_table[conn_id].write_notify_value)
        0x00209042:    68b8        .h      LDR      r0,[r7,#8]
        0x00209044:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00209048:    7840        @x      LDRB     r0,[r0,#1]
        0x0020904a:    b108        ..      CBZ      r0,0x209050 ; bas_client_write_result_cb + 68
;;;442            {
;;;443                cb_data.cb_content.write_result.type = BAS_WRITE_NOTIFY_ENABLE;
        0x0020904c:    2000        .       MOVS     r0,#0
        0x0020904e:    e000        ..      B        0x209052 ; bas_client_write_result_cb + 70
        0x00209050:    2001        .       MOVS     r0,#1
        0x00209052:    f88d0006    ....    STRB     r0,[sp,#6]
;;;444            }
;;;445            else
;;;446            {
;;;447                cb_data.cb_content.write_result.type = BAS_WRITE_NOTIFY_DISABLE;
;;;448            }
;;;449        }
;;;450        else
;;;451        {
;;;452            return;
;;;453        }
;;;454    
;;;455        if (bas_client_cb)
        0x00209056:    687b        {h      LDR      r3,[r7,#4]
        0x00209058:    2b00        .+      CMP      r3,#0
        0x0020905a:    d004        ..      BEQ      0x209066 ; bas_client_write_result_cb + 90
;;;456        {
;;;457            (*bas_client_cb)(bas_client, conn_id, &cb_data);
        0x0020905c:    4816        .H      LDR      r0,[pc,#88] ; [0x2090b8] = 0x20cf4d
        0x0020905e:    aa01        ..      ADD      r2,sp,#4
        0x00209060:    4649        IF      MOV      r1,r9
        0x00209062:    7800        .x      LDRB     r0,[r0,#0]
        0x00209064:    4798        .G      BLX      r3
;;;458        }
;;;459        return;
;;;460    }
        0x00209066:    e8bd83fe    ....    POP      {r1-r9,pc}
    bas_client_read_result_cb
;;;461    
;;;462    static void bas_client_read_result_cb(uint8_t conn_id,  uint16_t cause,
;;;463                                          uint16_t handle, uint16_t value_size, uint8_t *p_value)
;;;464    {
        0x0020906a:    e92d4ffe    -..O    PUSH     {r1-r11,lr}
        0x0020906e:    f8dfa044    ..D.    LDR      r10,[pc,#68] ; [0x2090b4] = 0x20cfd8
        0x00209072:    460c        .F      MOV      r4,r1
        0x00209074:    4683        .F      MOV      r11,r0
        0x00209076:    eb00014b    ..K.    ADD      r1,r0,r11,LSL #1
        0x0020907a:    f8da0008    ....    LDR      r0,[r10,#8]
        0x0020907e:    4699        .F      MOV      r9,r3
        0x00209080:    eb000581    ....    ADD      r5,r0,r1,LSL #2
        0x00209084:    490f        .I      LDR      r1,[pc,#60] ; [0x2090c4] = 0x8800f70
        0x00209086:    4690        .F      MOV      r8,r2
        0x00209088:    2701        .'      MOVS     r7,#1
        0x0020908a:    4613        .F      MOV      r3,r2
;;;465        T_BAS_CLIENT_CB_DATA cb_data;
;;;466        uint16_t *hdl_cache;
;;;467        hdl_cache = bas_table[conn_id].hdl_cache;
        0x0020908c:    9e0c        ..      LDR      r6,[sp,#0x30]
;;;468        cb_data.cb_type = BAS_CLIENT_CB_TYPE_READ_RESULT;
        0x0020908e:    f88d7004    ...p    STRB     r7,[sp,#4]
;;;469    
;;;470        PROFILE_PRINT_INFO2("bas_client_read_result_cb: handle 0x%x, cause 0x%x", handle, cause);
        0x00209092:    2202        ."      MOVS     r2,#2
        0x00209094:    315c        \1      ADDS     r1,r1,#0x5c
        0x00209096:    4806        .H      LDR      r0,[pc,#24] ; [0x2090b0] = 0x21103302
        0x00209098:    1d2d        -.      ADDS     r5,r5,#4
        0x0020909a:    9400        ..      STR      r4,[sp,#0]
        0x0020909c:    f5fefcdf    ....    BL       log_buffer ; 0x7a5e
        0x002090a0:    4803        .H      LDR      r0,[pc,#12] ; [0x2090b0] = 0x21103302
;;;471        cb_data.cb_content.read_result.cause = cause;
        0x002090a2:    f8ad4008    ...@    STRH     r4,[sp,#8]
;;;472    
;;;473        if (handle == hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD])
        0x002090a6:    88ea        ..      LDRH     r2,[r5,#6]
        0x002090a8:    1e80        ..      SUBS     r0,r0,#2
        0x002090aa:    e00d        ..      B        0x2090c8 ; bas_client_read_result_cb + 94
    $d
        0x002090ac:    08800c2c    ,...    DCD    142609452
        0x002090b0:    21103302    .3.!    DCD    554709762
        0x002090b4:    0020cfd8    .. .    DCD    2150360
        0x002090b8:    0020cf4d    M. .    DCD    2150221
        0x002090bc:    08800d30    0...    DCD    142609712
        0x002090c0:    08800e48    H...    DCD    142609992
        0x002090c4:    08800f70    p...    DCD    142610288
    $t
        0x002090c8:    4542        BE      CMP      r2,r8
        0x002090ca:    d117        ..      BNE      0x2090fc ; bas_client_read_result_cb + 146
;;;474        {
;;;475            cb_data.cb_content.read_result.type = BAS_READ_NOTIFY;
        0x002090cc:    2100        .!      MOVS     r1,#0
        0x002090ce:    f88d1006    ....    STRB     r1,[sp,#6]
;;;476            if (cause == GAP_SUCCESS)
        0x002090d2:    bb44        D.      CBNZ     r4,0x209126 ; bas_client_read_result_cb + 188
;;;477            {
;;;478                uint16_t ccc_bit;
;;;479                if (value_size != 2)
        0x002090d4:    464a        JF      MOV      r2,r9
        0x002090d6:    f1b90f02    ....    CMP      r9,#2
        0x002090da:    d003        ..      BEQ      0x2090e4 ; bas_client_read_result_cb + 122
;;;480                {
;;;481                    PROFILE_PRINT_ERROR1("bas_client_read_result_cb: invalid cccd len %d", value_size);
        0x002090dc:    4613        .F      MOV      r3,r2
        0x002090de:    2201        ."      MOVS     r2,#1
        0x002090e0:    4950        PI      LDR      r1,[pc,#320] ; [0x209224] = 0x8801004
;;;482                    return;
        0x002090e2:    e019        ..      B        0x209118 ; bas_client_read_result_cb + 174
;;;483                }
;;;484                LE_ARRAY_TO_UINT16(ccc_bit, p_value);
        0x002090e4:    7830        0x      LDRB     r0,[r6,#0]
        0x002090e6:    7872        rx      LDRB     r2,[r6,#1]
        0x002090e8:    eb002002    ...     ADD      r0,r0,r2,LSL #8
;;;485    
;;;486                if (ccc_bit & GATT_CLIENT_CHAR_CONFIG_NOTIFY)
        0x002090ec:    07c0        ..      LSLS     r0,r0,#31
        0x002090ee:    d002        ..      BEQ      0x2090f6 ; bas_client_read_result_cb + 140
;;;487                {
;;;488                    cb_data.cb_content.read_result.data.notify = true;
        0x002090f0:    f88d7007    ...p    STRB     r7,[sp,#7]
        0x002090f4:    e017        ..      B        0x209126 ; bas_client_read_result_cb + 188
;;;489                }
;;;490                else
;;;491                {
;;;492                    cb_data.cb_content.read_result.data.notify = false;
        0x002090f6:    f88d1007    ....    STRB     r1,[sp,#7]
        0x002090fa:    e014        ..      B        0x209126 ; bas_client_read_result_cb + 188
;;;493                }
;;;494            }
;;;495        }
;;;496        else if (handle == hdl_cache[HDL_BAS_BATTERY_LEVEL])
        0x002090fc:    88aa        ..      LDRH     r2,[r5,#4]
        0x002090fe:    4542        BE      CMP      r2,r8
        0x00209100:    d10c        ..      BNE      0x20911c ; bas_client_read_result_cb + 178
;;;497        {
;;;498            cb_data.cb_content.read_result.type = BAS_READ_BATTERY_LEVEL;
        0x00209102:    f88d7006    ...p    STRB     r7,[sp,#6]
;;;499            if (cause == GAP_SUCCESS)
        0x00209106:    b974        t.      CBNZ     r4,0x209126 ; bas_client_read_result_cb + 188
;;;500            {
;;;501                if (value_size != 1)
        0x00209108:    4649        IF      MOV      r1,r9
        0x0020910a:    f1b90f01    ....    CMP      r9,#1
        0x0020910e:    d007        ..      BEQ      0x209120 ; bas_client_read_result_cb + 182
;;;502                {
;;;503                    PROFILE_PRINT_ERROR1("bas_client_read_result_cb: invalid battery value len %d", value_size);
        0x00209110:    460b        .F      MOV      r3,r1
        0x00209112:    4944        DI      LDR      r1,[pc,#272] ; [0x209224] = 0x8801004
        0x00209114:    2201        ."      MOVS     r2,#1
        0x00209116:    3134        41      ADDS     r1,r1,#0x34
        0x00209118:    f5fefca1    ....    BL       log_buffer ; 0x7a5e
        0x0020911c:    e8bd8ffe    ....    POP      {r1-r11,pc}
;;;504                    return;
;;;505                }
;;;506                cb_data.cb_content.read_result.data.battery_level = *p_value;
        0x00209120:    7830        0x      LDRB     r0,[r6,#0]
        0x00209122:    f88d0007    ....    STRB     r0,[sp,#7]
;;;507            }
;;;508        }
;;;509        else
;;;510        {
;;;511            return;
;;;512        }
;;;513    
;;;514        if (bas_client_cb)
        0x00209126:    f8da3004    ...0    LDR      r3,[r10,#4]
        0x0020912a:    2b00        .+      CMP      r3,#0
        0x0020912c:    d0f6        ..      BEQ      0x20911c ; bas_client_read_result_cb + 178
;;;515        {
;;;516            (*bas_client_cb)(bas_client, conn_id, &cb_data);
        0x0020912e:    483e        >H      LDR      r0,[pc,#248] ; [0x209228] = 0x20cf4d
        0x00209130:    aa01        ..      ADD      r2,sp,#4
        0x00209132:    4659        YF      MOV      r1,r11
        0x00209134:    7800        .x      LDRB     r0,[r0,#0]
        0x00209136:    4798        .G      BLX      r3
;;;517        }
;;;518        return;
;;;519    }
        0x00209138:    e7f0        ..      B        0x20911c ; bas_client_read_result_cb + 178
    bas_client_notify_ind_cb
;;;520    
;;;521    static T_APP_RESULT bas_client_notify_ind_cb(uint8_t conn_id, bool notify, uint16_t handle,
;;;522                                                 uint16_t value_size, uint8_t *p_value)
;;;523    {
        0x0020913a:    b57c        |.      PUSH     {r2-r6,lr}
        0x0020913c:    4c3b        ;L      LDR      r4,[pc,#236] ; [0x20922c] = 0x20cfd8
        0x0020913e:    4601        .F      MOV      r1,r0
        0x00209140:    eb010341    ..A.    ADD      r3,r1,r1,LSL #1
        0x00209144:    68a6        .h      LDR      r6,[r4,#8]
;;;524        T_APP_RESULT app_result = APP_RESULT_SUCCESS;
        0x00209146:    2000        .       MOVS     r0,#0
;;;525        T_BAS_CLIENT_CB_DATA cb_data;
;;;526        uint16_t *hdl_cache;
;;;527    
;;;528        hdl_cache = bas_table[conn_id].hdl_cache;
        0x00209148:    eb060383    ....    ADD      r3,r6,r3,LSL #2
        0x0020914c:    2603        .&      MOVS     r6,#3
        0x0020914e:    f88d6000    ...`    STRB     r6,[sp,#0]
        0x00209152:    891b        ..      LDRH     r3,[r3,#8]
        0x00209154:    9d06        ..      LDR      r5,[sp,#0x18]
;;;529        cb_data.cb_type = BAS_CLIENT_CB_TYPE_NOTIF_IND_RESULT;
;;;530    
;;;531        if (handle == hdl_cache[HDL_BAS_BATTERY_LEVEL])
        0x00209156:    4293        .B      CMP      r3,r2
        0x00209158:    d10a        ..      BNE      0x209170 ; bas_client_notify_ind_cb + 54
;;;532        {
;;;533            cb_data.cb_content.notify_data.battery_level = *p_value;
        0x0020915a:    782a        *x      LDRB     r2,[r5,#0]
        0x0020915c:    f88d2002    ...     STRB     r2,[sp,#2]
        0x00209160:    6863        ch      LDR      r3,[r4,#4]
        0x00209162:    2b00        .+      CMP      r3,#0
        0x00209164:    d003        ..      BEQ      0x20916e ; bas_client_notify_ind_cb + 52
        0x00209166:    4830        0H      LDR      r0,[pc,#192] ; [0x209228] = 0x20cf4d
        0x00209168:    466a        jF      MOV      r2,sp
        0x0020916a:    7800        .x      LDRB     r0,[r0,#0]
        0x0020916c:    4798        .G      BLX      r3
        0x0020916e:    bd7c        |.      POP      {r2-r6,pc}
;;;534        }
;;;535        else
;;;536        {
;;;537            return APP_RESULT_SUCCESS;
        0x00209170:    2000        .       MOVS     r0,#0
;;;538        }
;;;539    
;;;540        if (bas_client_cb)
;;;541        {
;;;542            app_result = (*bas_client_cb)(bas_client, conn_id, &cb_data);
;;;543        }
;;;544    
;;;545        return app_result;
;;;546    }
        0x00209172:    bd7c        |.      POP      {r2-r6,pc}
    bas_client_disc_cb
;;;547    
;;;548    static void bas_client_disc_cb(uint8_t conn_id)
;;;549    {
        0x00209174:    b510        ..      PUSH     {r4,lr}
        0x00209176:    492b        +I      LDR      r1,[pc,#172] ; [0x209224] = 0x8801004
;;; .\..\..\..\src\ble\profile\client\bas_client.c (549)
        0x00209178:    4604        .F      MOV      r4,r0
;;;550        PROFILE_PRINT_INFO0("bas_client_disc_cb.");
        0x0020917a:    2200        ."      MOVS     r2,#0
        0x0020917c:    3170        p1      ADDS     r1,r1,#0x70
        0x0020917e:    482c        ,H      LDR      r0,[pc,#176] ; [0x209230] = 0x21103302
        0x00209180:    f5fefc6d    ..m.    BL       log_buffer ; 0x7a5e
;;;551        if (conn_id >= bas_link_num)
        0x00209184:    4829        )H      LDR      r0,[pc,#164] ; [0x20922c] = 0x20cfd8
        0x00209186:    7801        .x      LDRB     r1,[r0,#0]
        0x00209188:    428c        .B      CMP      r4,r1
        0x0020918a:    d309        ..      BCC      0x2091a0 ; bas_client_disc_cb + 44
;;;552        {
;;;553            PROFILE_PRINT_ERROR1("bas_client_disc_cb: failed invalid conn_id %d", conn_id);
        0x0020918c:    4925        %I      LDR      r1,[pc,#148] ; [0x209224] = 0x8801004
        0x0020918e:    4623        #F      MOV      r3,r4
        0x00209190:    4827        'H      LDR      r0,[pc,#156] ; [0x209230] = 0x21103302
        0x00209192:    2201        ."      MOVS     r2,#1
        0x00209194:    3188        .1      ADDS     r1,r1,#0x88
        0x00209196:    e8bd4010    ...@    POP      {r4,lr}
        0x0020919a:    1e80        ..      SUBS     r0,r0,#2
        0x0020919c:    f5febc5f    .._.    B        log_buffer ; 0x7a5e
;;;554            return;
;;;555        }
;;;556        memset(&bas_table[conn_id], 0, sizeof(T_BAS_LINK));
        0x002091a0:    6880        .h      LDR      r0,[r0,#8]
        0x002091a2:    eb040144    ..D.    ADD      r1,r4,r4,LSL #1
        0x002091a6:    eb000081    ....    ADD      r0,r0,r1,LSL #2
        0x002091aa:    2100        .!      MOVS     r1,#0
        0x002091ac:    6001        .`      STR      r1,[r0,#0]
        0x002091ae:    6041        A`      STR      r1,[r0,#4]
        0x002091b0:    6081        .`      STR      r1,[r0,#8]
;;;557        return;
;;;558    }
        0x002091b2:    bd10        ..      POP      {r4,pc}
    bas_add_client
;;;559    /**
;;;560     * @brief BAS Client Callbacks.
;;;561    */
;;;562    const T_FUN_CLIENT_CBS bas_client_cbs =
;;;563    {
;;;564        bas_client_discover_state_cb,   //!< Discovery State callback function pointer
;;;565        bas_client_discover_result_cb,  //!< Discovery result callback function pointer
;;;566        bas_client_read_result_cb,      //!< Read response callback function pointer
;;;567        bas_client_write_result_cb,     //!< Write result callback function pointer
;;;568        bas_client_notify_ind_cb,       //!< Notify Indicate callback function pointer
;;;569        bas_client_disc_cb              //!< Link disconnection callback function pointer
;;;570    };
;;;571    
;;;572    /**
;;;573      * @brief      Add bas client to application.
;;;574      * @param[in]  app_cb pointer of app callback function to handle specific client module data.
;;;575      * @param[in]  link_num initialize link num.
;;;576      * @return Client ID of the specific client module.
;;;577      * @retval 0xff failed.
;;;578      * @retval other success.
;;;579      *
;;;580      * <b>Example usage</b>
;;;581      * \code{.c}
;;;582        void app_le_profile_init(void)
;;;583        {
;;;584            client_init(1);
;;;585            bas_client_id = bas_add_client(app_client_callback, APP_MAX_LINKS);
;;;586        }
;;;587      * \endcode
;;;588      */
;;;589    T_CLIENT_ID bas_add_client(P_FUN_GENERAL_APP_CB app_cb, uint8_t link_num)
;;;590    {
        0x002091b4:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x002091b8:    4d1d        .M      LDR      r5,[pc,#116] ; [0x209230] = 0x21103302
;;; .\..\..\..\src\ble\profile\client\bas_client.c (590)
        0x002091ba:    4607        .F      MOV      r7,r0
        0x002091bc:    1ead        ..      SUBS     r5,r5,#2
        0x002091be:    460c        .F      MOV      r4,r1
        0x002091c0:    2904        .)      CMP      r1,#4
        0x002091c2:    d909        ..      BLS      0x2091d8 ; bas_add_client + 36
;;;591        uint16_t size;
;;;592        if (link_num > BAS_MAX_LINKS)
;;;593        {
;;;594            PROFILE_PRINT_ERROR1("bas_add_client: invalid link_num %d", link_num);
        0x002091c4:    460b        .F      MOV      r3,r1
        0x002091c6:    4917        .I      LDR      r1,[pc,#92] ; [0x209224] = 0x8801004
        0x002091c8:    2201        ."      MOVS     r2,#1
        0x002091ca:    31bc        .1      ADDS     r1,r1,#0xbc
        0x002091cc:    4628        (F      MOV      r0,r5
        0x002091ce:    f5fefc46    ..F.    BL       log_buffer ; 0x7a5e
;;;595            return 0xff;
        0x002091d2:    20ff        .       MOVS     r0,#0xff
        0x002091d4:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;596        }
;;;597        if (false == client_register_spec_client_cb(&bas_client, &bas_client_cbs))
        0x002091d8:    4916        .I      LDR      r1,[pc,#88] ; [0x209234] = 0x21c844
        0x002091da:    4813        .H      LDR      r0,[pc,#76] ; [0x209228] = 0x20cf4d
        0x002091dc:    f645f8ca    E...    BL       client_register_spec_client_cb ; 0x4e374
        0x002091e0:    4e11        .N      LDR      r6,[pc,#68] ; [0x209228] = 0x20cf4d
        0x002091e2:    b1a8        ..      CBZ      r0,0x209210 ; bas_add_client + 92
;;;598        {
;;;599            bas_client = CLIENT_PROFILE_GENERAL_ID;
;;;600            PROFILE_PRINT_ERROR0("bas_add_client:register fail");
;;;601            return bas_client;
;;;602        }
;;;603        PROFILE_PRINT_INFO1("bas_add_client: client id %d", bas_client);
        0x002091e4:    7833        3x      LDRB     r3,[r6,#0]
        0x002091e6:    2201        ."      MOVS     r2,#1
        0x002091e8:    4913        .I      LDR      r1,[pc,#76] ; [0x209238] = 0x8801108
        0x002091ea:    4811        .H      LDR      r0,[pc,#68] ; [0x209230] = 0x21103302
        0x002091ec:    f5fefc37    ..7.    BL       log_buffer ; 0x7a5e
;;;604    
;;;605        /* register callback for profile to inform application that some events happened. */
;;;606        bas_client_cb = app_cb;
        0x002091f0:    4d0e        .M      LDR      r5,[pc,#56] ; [0x20922c] = 0x20cfd8
        0x002091f2:    eb040044    ..D.    ADD      r0,r4,r4,LSL #1
        0x002091f6:    4a0f        .J      LDR      r2,[pc,#60] ; [0x209234] = 0x21c844
;;;607        bas_link_num = link_num;
        0x002091f8:    606f        o`      STR      r7,[r5,#4]
        0x002091fa:    0081        ..      LSLS     r1,r0,#2
        0x002091fc:    702c        ,p      STRB     r4,[r5,#0]
;;;608        size = bas_link_num * sizeof(T_BAS_LINK);
;;;609        bas_table = os_mem_zalloc(RAM_TYPE_DATA_ON, size);
        0x002091fe:    f2402361    @.a#    MOV      r3,#0x261
        0x00209202:    3218        .2      ADDS     r2,r2,#0x18
        0x00209204:    2000        .       MOVS     r0,#0
        0x00209206:    f61cfdd7    ....    BL       os_mem_zalloc_intern ; 0x25db8
        0x0020920a:    60a8        .`      STR      r0,[r5,#8]
;;;610    
;;;611        return bas_client;
        0x0020920c:    7830        0x      LDRB     r0,[r6,#0]
;;;612    }
        0x0020920e:    e7e1        ..      B        0x2091d4 ; bas_add_client + 32
        0x00209210:    20ff        .       MOVS     r0,#0xff
        0x00209212:    4909        .I      LDR      r1,[pc,#36] ; [0x209238] = 0x8801108
        0x00209214:    7030        0p      STRB     r0,[r6,#0]
        0x00209216:    2200        ."      MOVS     r2,#0
        0x00209218:    3920         9      SUBS     r1,r1,#0x20
        0x0020921a:    4628        (F      MOV      r0,r5
        0x0020921c:    f5fefc1f    ....    BL       log_buffer ; 0x7a5e
        0x00209220:    e7f4        ..      B        0x20920c ; bas_add_client + 88
    $d
        0x00209222:    0000        ..      DCW    0
        0x00209224:    08801004    ....    DCD    142610436
        0x00209228:    0020cf4d    M. .    DCD    2150221
        0x0020922c:    0020cfd8    .. .    DCD    2150360
        0x00209230:    21103302    .3.!    DCD    554709762
        0x00209234:    0021c844    D.!.    DCD    2213956
        0x00209238:    08801108    ....    DCD    142610696
    $t
    .text
    gaps_start_discovery
;;; .\..\..\..\src\ble\profile\client\gaps_client.c
;;;59     {
        0x0020923c:    b570        p.      PUSH     {r4-r6,lr}
        0x0020923e:    4605        .F      MOV      r5,r0
;;;60         PROFILE_PRINT_INFO0("gaps_start_discovery");
        0x00209240:    2200        ."      MOVS     r2,#0
        0x00209242:    49fe        .I      LDR      r1,[pc,#1016] ; [0x20963c] = 0x8801128
        0x00209244:    48fe        .H      LDR      r0,[pc,#1016] ; [0x209640] = 0x21103302
        0x00209246:    f5fefc0a    ....    BL       log_buffer ; 0x7a5e
;;;61         /* First clear handle cache. */
;;;62         if (conn_id >= gaps_link_num)
        0x0020924a:    4efe        .N      LDR      r6,[pc,#1016] ; [0x209644] = 0x20cfe4
        0x0020924c:    7830        0x      LDRB     r0,[r6,#0]
        0x0020924e:    4285        .B      CMP      r5,r0
        0x00209250:    d308        ..      BCC      0x209264 ; gaps_start_discovery + 40
;;;63         {
;;;64             PROFILE_PRINT_ERROR1("gaps_start_discovery: failed invalid conn_id %d", conn_id);
        0x00209252:    49fa        .I      LDR      r1,[pc,#1000] ; [0x20963c] = 0x8801128
        0x00209254:    48fa        .H      LDR      r0,[pc,#1000] ; [0x209640] = 0x21103302
        0x00209256:    462b        +F      MOV      r3,r5
        0x00209258:    2201        ."      MOVS     r2,#1
        0x0020925a:    3118        .1      ADDS     r1,r1,#0x18
        0x0020925c:    1e80        ..      SUBS     r0,r0,#2
        0x0020925e:    f5fefbfe    ....    BL       log_buffer ; 0x7a5e
;;;65             return false;
        0x00209262:    e013        ..      B        0x20928c ; gaps_start_discovery + 80
;;;66         }
;;;67         memset(&gaps_table[conn_id], 0, sizeof(T_GAPS_LINK));
        0x00209264:    68b0        .h      LDR      r0,[r6,#8]
        0x00209266:    ebc504c5    ....    RSB      r4,r5,r5,LSL #3
        0x0020926a:    eb000044    ..D.    ADD      r0,r0,r4,LSL #1
        0x0020926e:    210e        .!      MOVS     r1,#0xe
        0x00209270:    f650fed4    P...    BL       __aeabi_memclr ; 0x5a01c
;;;68         gaps_table[conn_id].disc_state = DISC_GAPS_START;
        0x00209274:    68b1        .h      LDR      r1,[r6,#8]
        0x00209276:    2001        .       MOVS     r0,#1
        0x00209278:    f44f52c0    O..R    MOV      r2,#0x1800
        0x0020927c:    f8010014    ....    STRB     r0,[r1,r4,LSL #1]
;;;69         if (client_by_uuid_srv_discovery(conn_id, gaps_client,
        0x00209280:    48f1        .H      LDR      r0,[pc,#964] ; [0x209648] = 0x20cf4e
        0x00209282:    7801        .x      LDRB     r1,[r0,#0]
        0x00209284:    4628        (F      MOV      r0,r5
        0x00209286:    f645f94f    E.O.    BL       client_by_uuid_srv_discovery ; 0x4e528
        0x0020928a:    b108        ..      CBZ      r0,0x209290 ; gaps_start_discovery + 84
        0x0020928c:    2000        .       MOVS     r0,#0
        0x0020928e:    bd70        p.      POP      {r4-r6,pc}
;;;70                                          GATT_UUID_GAP) == GAP_CAUSE_SUCCESS)
;;;71         {
;;;72             return true;
        0x00209290:    2001        .       MOVS     r0,#1
;;;73         }
;;;74         return false;
;;;75     }
        0x00209292:    bd70        p.      POP      {r4-r6,pc}
    gaps_read
;;;76     
;;;77     
;;;78     /**
;;;79       * @brief  Used by application, to read data from server by using handles.
;;;80       * @param[in]  conn_id connection ID.
;;;81       * @param[in]  read_type one of characteristic that has the readable property.
;;;82       * @retval true send request to upper stack success.
;;;83       * @retval false send request to upper stack failed.
;;;84       *
;;;85       * <b>Example usage</b>
;;;86       * \code{.c}
;;;87         static T_USER_CMD_PARSE_RESULT cmd_gapread(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;88         {
;;;89             uint8_t conn_id = p_parse_value->dw_param[0];
;;;90             T_GAPS_READ_TYPE read_type = (T_GAPS_READ_TYPE)p_parse_value->dw_param[1];
;;;91             bool ret = gaps_read(conn_id, read_type);
;;;92             ......
;;;93         }
;;;94      * \endcode
;;;95       */
;;;96     bool gaps_read(uint8_t conn_id, T_GAPS_READ_TYPE read_type)
;;;97     {
        0x00209294:    b570        p.      PUSH     {r4-r6,lr}
        0x00209296:    4606        .F      MOV      r6,r0
        0x00209298:    48ea        .H      LDR      r0,[pc,#936] ; [0x209644] = 0x20cfe4
;;; .\..\..\..\src\ble\profile\client\gaps_client.c (97)
        0x0020929a:    460d        .F      MOV      r5,r1
        0x0020929c:    7801        .x      LDRB     r1,[r0,#0]
        0x0020929e:    428e        .B      CMP      r6,r1
        0x002092a0:    d308        ..      BCC      0x2092b4 ; gaps_read + 32
;;;98         bool hdl_valid = false;
;;;99         uint16_t  handle;
;;;100        uint16_t *hdl_cache;
;;;101        if (conn_id >= gaps_link_num)
;;;102        {
;;;103            PROFILE_PRINT_ERROR1("gaps_read: failed invalid conn_id %d", conn_id);
        0x002092a2:    49e6        .I      LDR      r1,[pc,#920] ; [0x20963c] = 0x8801128
        0x002092a4:    48e6        .H      LDR      r0,[pc,#920] ; [0x209640] = 0x21103302
        0x002092a6:    4633        3F      MOV      r3,r6
        0x002092a8:    2201        ."      MOVS     r2,#1
        0x002092aa:    314c        L1      ADDS     r1,r1,#0x4c
        0x002092ac:    1e80        ..      SUBS     r0,r0,#2
        0x002092ae:    f5fefbd6    ....    BL       log_buffer ; 0x7a5e
;;;104            return false;
        0x002092b2:    e025        %.      B        0x209300 ; gaps_read + 108
;;;105        }
;;;106        hdl_cache = gaps_table[conn_id].hdl_cache;
        0x002092b4:    6880        .h      LDR      r0,[r0,#8]
        0x002092b6:    ebc601c6    ....    RSB      r1,r6,r6,LSL #3
        0x002092ba:    eb000441    ..A.    ADD      r4,r0,r1,LSL #1
;;;107    
;;;108        PROFILE_PRINT_INFO1("gaps_read: charType = %d", read_type);
        0x002092be:    49df        .I      LDR      r1,[pc,#892] ; [0x20963c] = 0x8801128
        0x002092c0:    462b        +F      MOV      r3,r5
        0x002092c2:    2201        ."      MOVS     r2,#1
        0x002092c4:    3174        t1      ADDS     r1,r1,#0x74
        0x002092c6:    48de        .H      LDR      r0,[pc,#888] ; [0x209640] = 0x21103302
        0x002092c8:    1ca4        ..      ADDS     r4,r4,#2
        0x002092ca:    f5fefbc8    ....    BL       log_buffer ; 0x7a5e
;;;109    
;;;110        switch (read_type)
        0x002092ce:    b125        %.      CBZ      r5,0x2092da ; gaps_read + 70
        0x002092d0:    2d01        .-      CMP      r5,#1
        0x002092d2:    d004        ..      BEQ      0x2092de ; gaps_read + 74
        0x002092d4:    2d02        .-      CMP      r5,#2
        0x002092d6:    d113        ..      BNE      0x209300 ; gaps_read + 108
        0x002092d8:    e003        ..      B        0x2092e2 ; gaps_read + 78
;;;111        {
;;;112        case GAPS_READ_DEVICE_NAME:
;;;113            if (hdl_cache[HDL_GAPS_DEVICE_NAME])
        0x002092da:    88a2        ..      LDRH     r2,[r4,#4]
        0x002092dc:    e002        ..      B        0x2092e4 ; gaps_read + 80
;;;114            {
;;;115                handle = hdl_cache[HDL_GAPS_DEVICE_NAME];
;;;116                hdl_valid = true;
;;;117            }
;;;118            break;
;;;119        case GAPS_READ_APPEARANCE:
;;;120            if (hdl_cache[HDL_GAPS_APPEARANCE])
        0x002092de:    88e2        ..      LDRH     r2,[r4,#6]
        0x002092e0:    e000        ..      B        0x2092e4 ; gaps_read + 80
;;;121            {
;;;122                handle = hdl_cache[HDL_GAPS_APPEARANCE];
;;;123                hdl_valid = true;
;;;124            }
;;;125            break;
;;;126        case GAPS_READ_CENTRAL_ADDR_RESOLUTION:
;;;127            if (hdl_cache[HDL_GAPS_CENTRAL_ADDR_RESOLUTION])
        0x002092e2:    8922        ".      LDRH     r2,[r4,#8]
        0x002092e4:    b12a        *.      CBZ      r2,0x2092f2 ; gaps_read + 94
        0x002092e6:    48d8        .H      LDR      r0,[pc,#864] ; [0x209648] = 0x20cf4e
        0x002092e8:    7801        .x      LDRB     r1,[r0,#0]
        0x002092ea:    4630        0F      MOV      r0,r6
        0x002092ec:    f645f9e1    E...    BL       client_attr_read ; 0x4e6b2
        0x002092f0:    b140        @.      CBZ      r0,0x209304 ; gaps_read + 112
        0x002092f2:    49d2        .I      LDR      r1,[pc,#840] ; [0x20963c] = 0x8801128
        0x002092f4:    48d2        .H      LDR      r0,[pc,#840] ; [0x209640] = 0x21103302
        0x002092f6:    2200        ."      MOVS     r2,#0
        0x002092f8:    3190        .1      ADDS     r1,r1,#0x90
        0x002092fa:    1e40        @.      SUBS     r0,r0,#1
        0x002092fc:    f5fefbaf    ....    BL       log_buffer ; 0x7a5e
;;;128            {
;;;129                handle = hdl_cache[HDL_GAPS_CENTRAL_ADDR_RESOLUTION];
;;;130                hdl_valid = true;
;;;131            }
;;;132            break;
;;;133        default:
;;;134            return false;
        0x00209300:    2000        .       MOVS     r0,#0
        0x00209302:    bd70        p.      POP      {r4-r6,pc}
;;;135        }
;;;136    
;;;137        if (hdl_valid)
;;;138        {
;;;139            if (client_attr_read(conn_id, gaps_client, handle) == GAP_CAUSE_SUCCESS)
;;;140            {
;;;141                return true;
        0x00209304:    2001        .       MOVS     r0,#1
;;;142            }
;;;143        }
;;;144    
;;;145        PROFILE_PRINT_WARN0("gaps_read: Request fail! Please check!");
;;;146        return false;
;;;147    }
        0x00209306:    bd70        p.      POP      {r4-r6,pc}
    gaps_get_hdl_cache
;;;148    
;;;149    /**
;;;150      * @brief  Used by application, to get handle cache.
;;;151      * @param[in]  conn_id connection ID.
;;;152      * @param[in,out]  p_hdl_cache pointer of the handle cache table
;;;153      * @param[in]  len the length of handle cache table
;;;154      * @retval true success.
;;;155      * @retval false failed.
;;;156      *
;;;157      * <b>Example usage</b>
;;;158      * \code{.c}
;;;159        static T_USER_CMD_PARSE_RESULT cmd_gaphdl(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;160        {
;;;161            uint8_t conn_id = p_parse_value->dw_param[0];
;;;162            uint16_t hdl_cache[HDL_GAPS_CACHE_LEN];
;;;163            uint8_t hdl_idx;
;;;164            bool ret = gaps_get_hdl_cache(conn_id, hdl_cache, sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;165            ......
;;;166        }
;;;167     * \endcode
;;;168      */
;;;169    bool gaps_get_hdl_cache(uint8_t conn_id, uint16_t *p_hdl_cache, uint8_t len)
;;;170    {
        0x00209308:    b570        p.      PUSH     {r4-r6,lr}
        0x0020930a:    460e        .F      MOV      r6,r1
;;;171        if (conn_id >= gaps_link_num)
        0x0020930c:    49cd        .I      LDR      r1,[pc,#820] ; [0x209644] = 0x20cfe4
        0x0020930e:    4dcc        .M      LDR      r5,[pc,#816] ; [0x209640] = 0x21103302
        0x00209310:    780b        .x      LDRB     r3,[r1,#0]
        0x00209312:    1ead        ..      SUBS     r5,r5,#2
        0x00209314:    4298        .B      CMP      r0,r3
        0x00209316:    d304        ..      BCC      0x209322 ; gaps_get_hdl_cache + 26
;;;172        {
;;;173            PROFILE_PRINT_ERROR1("gaps_get_hdl_cache: failed invalid conn_id %d", conn_id);
        0x00209318:    49c8        .I      LDR      r1,[pc,#800] ; [0x20963c] = 0x8801128
        0x0020931a:    2201        ."      MOVS     r2,#1
        0x0020931c:    4603        .F      MOV      r3,r0
        0x0020931e:    31bc        .1      ADDS     r1,r1,#0xbc
;;;174            return false;
        0x00209320:    e010        ..      B        0x209344 ; gaps_get_hdl_cache + 60
;;;175        }
;;;176        if (gaps_table[conn_id].disc_state != DISC_GAPS_DONE)
        0x00209322:    688b        .h      LDR      r3,[r1,#8]
        0x00209324:    ebc000c0    ....    RSB      r0,r0,r0,LSL #3
        0x00209328:    f8134010    ...@    LDRB     r4,[r3,r0,LSL #1]
        0x0020932c:    2c02        .,      CMP      r4,#2
        0x0020932e:    d004        ..      BEQ      0x20933a ; gaps_get_hdl_cache + 50
        0x00209330:    49c2        .I      LDR      r1,[pc,#776] ; [0x20963c] = 0x8801128
        0x00209332:    2201        ."      MOVS     r2,#1
        0x00209334:    4623        #F      MOV      r3,r4
;;;177        {
;;;178            PROFILE_PRINT_ERROR1("gaps_get_hdl_cache: failed invalid state %d", gaps_table[conn_id].disc_state);
        0x00209336:    31f0        .1      ADDS     r1,r1,#0xf0
;;;179            return false;
        0x00209338:    e004        ..      B        0x209344 ; gaps_get_hdl_cache + 60
;;;180        }
;;;181        if (len != sizeof(uint16_t) * HDL_GAPS_CACHE_LEN)
        0x0020933a:    2a0c        .*      CMP      r2,#0xc
        0x0020933c:    d007        ..      BEQ      0x20934e ; gaps_get_hdl_cache + 70
;;;182        {
;;;183            PROFILE_PRINT_ERROR1("gaps_get_hdl_cache: failed invalid len %d", len);
        0x0020933e:    4613        .F      MOV      r3,r2
        0x00209340:    49c2        .I      LDR      r1,[pc,#776] ; [0x20964c] = 0x8801248
        0x00209342:    2201        ."      MOVS     r2,#1
        0x00209344:    4628        (F      MOV      r0,r5
        0x00209346:    f5fefb8a    ....    BL       log_buffer ; 0x7a5e
;;;184            return false;
        0x0020934a:    2000        .       MOVS     r0,#0
        0x0020934c:    bd70        p.      POP      {r4-r6,pc}
;;;185        }
;;;186        memcpy(p_hdl_cache, gaps_table[conn_id].hdl_cache, len);
        0x0020934e:    eb030140    ..@.    ADD      r1,r3,r0,LSL #1
        0x00209352:    4630        0F      MOV      r0,r6
        0x00209354:    1c89        ..      ADDS     r1,r1,#2
        0x00209356:    f650fda0    P...    BL       __aeabi_memcpy ; 0x59e9a
;;;187        return true;
        0x0020935a:    2001        .       MOVS     r0,#1
;;;188    }
        0x0020935c:    bd70        p.      POP      {r4-r6,pc}
    gaps_set_hdl_cache
;;;189    
;;;190    /**
;;;191      * @brief  Used by application, to set handle cache.
;;;192      * @param[in]  conn_id connection ID.
;;;193      * @param[in]  p_hdl_cache pointer of the handle cache table
;;;194      * @param[in]  len the length of handle cache table
;;;195      * @retval true success.
;;;196      * @retval false failed.
;;;197      *
;;;198      * <b>Example usage</b>
;;;199      * \code{.c}
;;;200        void app_discov_services(uint8_t conn_id, bool start)
;;;201        {
;;;202            ......
;;;203            if (app_srvs_table.srv_found_flags & APP_DISCOV_GAPS_FLAG)
;;;204            {
;;;205                gaps_set_hdl_cache(conn_id, app_srvs_table.gaps_hdl_cache, sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;206            }
;;;207            ......
;;;208        }
;;;209     * \endcode
;;;210      */
;;;211    bool gaps_set_hdl_cache(uint8_t conn_id, uint16_t *p_hdl_cache, uint8_t len)
;;;212    {
        0x0020935e:    b570        p.      PUSH     {r4-r6,lr}
;;;213        if (conn_id >= gaps_link_num)
        0x00209360:    4db8        .M      LDR      r5,[pc,#736] ; [0x209644] = 0x20cfe4
        0x00209362:    4eb7        .N      LDR      r6,[pc,#732] ; [0x209640] = 0x21103302
        0x00209364:    782b        +x      LDRB     r3,[r5,#0]
        0x00209366:    1eb6        ..      SUBS     r6,r6,#2
        0x00209368:    4298        .B      CMP      r0,r3
        0x0020936a:    d304        ..      BCC      0x209376 ; gaps_set_hdl_cache + 24
;;;214        {
;;;215            PROFILE_PRINT_ERROR1("gaps_set_hdl_cache: failed invalid conn_id %d", conn_id);
        0x0020936c:    49b7        .I      LDR      r1,[pc,#732] ; [0x20964c] = 0x8801248
        0x0020936e:    2201        ."      MOVS     r2,#1
        0x00209370:    4603        .F      MOV      r3,r0
        0x00209372:    3130        01      ADDS     r1,r1,#0x30
;;;216            return false;
        0x00209374:    e00f        ..      B        0x209396 ; gaps_set_hdl_cache + 56
;;;217        }
;;;218        if (gaps_table[conn_id].disc_state != DISC_GAPS_IDLE)
        0x00209376:    ebc004c0    ....    RSB      r4,r0,r0,LSL #3
        0x0020937a:    68a8        .h      LDR      r0,[r5,#8]
        0x0020937c:    f8103014    ...0    LDRB     r3,[r0,r4,LSL #1]
        0x00209380:    b11b        ..      CBZ      r3,0x20938a ; gaps_set_hdl_cache + 44
;;;219        {
;;;220            PROFILE_PRINT_ERROR1("gaps_set_hdl_cache: failed invalid state %d", gaps_table[conn_id].disc_state);
        0x00209382:    49b2        .I      LDR      r1,[pc,#712] ; [0x20964c] = 0x8801248
        0x00209384:    2201        ."      MOVS     r2,#1
        0x00209386:    3164        d1      ADDS     r1,r1,#0x64
;;;221            return false;
        0x00209388:    e005        ..      B        0x209396 ; gaps_set_hdl_cache + 56
;;;222        }
;;;223        if (len != sizeof(uint16_t) * HDL_GAPS_CACHE_LEN)
        0x0020938a:    2a0c        .*      CMP      r2,#0xc
        0x0020938c:    d008        ..      BEQ      0x2093a0 ; gaps_set_hdl_cache + 66
;;;224        {
;;;225            PROFILE_PRINT_ERROR1("gaps_set_hdl_cache: failed invalid len %d", len);
        0x0020938e:    4613        .F      MOV      r3,r2
        0x00209390:    49ae        .I      LDR      r1,[pc,#696] ; [0x20964c] = 0x8801248
        0x00209392:    2201        ."      MOVS     r2,#1
        0x00209394:    3194        .1      ADDS     r1,r1,#0x94
        0x00209396:    4630        0F      MOV      r0,r6
        0x00209398:    f5fefb61    ..a.    BL       log_buffer ; 0x7a5e
;;;226            return false;
        0x0020939c:    2000        .       MOVS     r0,#0
        0x0020939e:    bd70        p.      POP      {r4-r6,pc}
;;;227        }
;;;228        memcpy(gaps_table[conn_id].hdl_cache, p_hdl_cache, len);
        0x002093a0:    eb000044    ..D.    ADD      r0,r0,r4,LSL #1
        0x002093a4:    1c80        ..      ADDS     r0,r0,#2
        0x002093a6:    f650fd78    P.x.    BL       __aeabi_memcpy ; 0x59e9a
;;;229        gaps_table[conn_id].disc_state = DISC_GAPS_DONE;
        0x002093aa:    68a9        .h      LDR      r1,[r5,#8]
        0x002093ac:    2002        .       MOVS     r0,#2
        0x002093ae:    f8010014    ....    STRB     r0,[r1,r4,LSL #1]
;;;230        return true;
        0x002093b2:    2001        .       MOVS     r0,#1
;;;231    }
        0x002093b4:    bd70        p.      POP      {r4-r6,pc}
    gaps_check_resolvable_private_addr_only_char
;;;232    
;;;233    /**
;;;234      * @brief  Used by application, to check Resolvable Private Address Only Characteristics whether existing.
;;;235      * @param[in]  conn_id connection ID.
;;;236      * @param[in,out]  p_is_exist whether existing
;;;237      * @retval true success.
;;;238      * @retval false failed.
;;;239      */
;;;240    bool gaps_check_resolvable_private_addr_only_char(uint8_t conn_id, bool *p_is_exist)
;;;241    {
        0x002093b6:    b510        ..      PUSH     {r4,lr}
;;;242        if (conn_id >= gaps_link_num)
        0x002093b8:    4aa2        .J      LDR      r2,[pc,#648] ; [0x209644] = 0x20cfe4
        0x002093ba:    4ca1        .L      LDR      r4,[pc,#644] ; [0x209640] = 0x21103302
        0x002093bc:    7813        .x      LDRB     r3,[r2,#0]
        0x002093be:    1ea4        ..      SUBS     r4,r4,#2
        0x002093c0:    4298        .B      CMP      r0,r3
        0x002093c2:    d304        ..      BCC      0x2093ce ; gaps_check_resolvable_private_addr_only_char + 24
;;;243        {
;;;244            PROFILE_PRINT_ERROR1("gaps_get_hdl_cache: failed invalid conn_id %d", conn_id);
        0x002093c4:    49a1        .I      LDR      r1,[pc,#644] ; [0x20964c] = 0x8801248
        0x002093c6:    2201        ."      MOVS     r2,#1
        0x002093c8:    4603        .F      MOV      r3,r0
        0x002093ca:    31c4        .1      ADDS     r1,r1,#0xc4
;;;245            return false;
        0x002093cc:    e009        ..      B        0x2093e2 ; gaps_check_resolvable_private_addr_only_char + 44
;;;246        }
;;;247        if (gaps_table[conn_id].disc_state != DISC_GAPS_DONE)
        0x002093ce:    6892        .h      LDR      r2,[r2,#8]
        0x002093d0:    ebc000c0    ....    RSB      r0,r0,r0,LSL #3
        0x002093d4:    f8123010    ...0    LDRB     r3,[r2,r0,LSL #1]
        0x002093d8:    2b02        .+      CMP      r3,#2
        0x002093da:    d007        ..      BEQ      0x2093ec ; gaps_check_resolvable_private_addr_only_char + 54
;;;248        {
;;;249            PROFILE_PRINT_ERROR1("gaps_get_hdl_cache: failed invalid state %d", gaps_table[conn_id].disc_state);
        0x002093dc:    499b        .I      LDR      r1,[pc,#620] ; [0x20964c] = 0x8801248
        0x002093de:    2201        ."      MOVS     r2,#1
        0x002093e0:    31f8        .1      ADDS     r1,r1,#0xf8
        0x002093e2:    4620         F      MOV      r0,r4
        0x002093e4:    f5fefb3b    ..;.    BL       log_buffer ; 0x7a5e
;;;250            return false;
        0x002093e8:    2000        .       MOVS     r0,#0
        0x002093ea:    bd10        ..      POP      {r4,pc}
;;;251        }
;;;252        if (gaps_table[conn_id].hdl_cache[HDL_GAPS_RESOLVABLE_PRIVATE_ADDR_ONLY] == 0)
        0x002093ec:    eb020040    ..@.    ADD      r0,r2,r0,LSL #1
        0x002093f0:    8980        ..      LDRH     r0,[r0,#0xc]
        0x002093f2:    b100        ..      CBZ      r0,0x2093f6 ; gaps_check_resolvable_private_addr_only_char + 64
;;;253        {
;;;254            *p_is_exist = false;
;;;255        }
;;;256        else
;;;257        {
;;;258            *p_is_exist = true;
        0x002093f4:    2001        .       MOVS     r0,#1
        0x002093f6:    7008        .p      STRB     r0,[r1,#0]
;;;259        }
;;;260        return true;
        0x002093f8:    2001        .       MOVS     r0,#1
;;;261    }
        0x002093fa:    bd10        ..      POP      {r4,pc}
    gaps_client_discover_state_cb
;;;262    
;;;263    static bool gaps_client_start_gap_char_discovery(uint8_t conn_id)
;;;264    {
;;;265        uint16_t start_handle;
;;;266        uint16_t end_handle;
;;;267    
;;;268        PROFILE_PRINT_INFO0("gap_client_start_gap_char_discovery");
;;;269        start_handle = gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_START];
;;;270        end_handle = gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_END];
;;;271        if (client_all_char_discovery(conn_id, gaps_client, start_handle,
;;;272                                      end_handle) == GAP_CAUSE_SUCCESS)
;;;273        {
;;;274            return true;
;;;275        }
;;;276        return false;
;;;277    }
;;;278    
;;;279    static void gaps_client_discover_state_cb(uint8_t conn_id,  T_DISCOVERY_STATE discovery_state)
;;;280    {
        0x002093fc:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x00209400:    b086        ..      SUB      sp,sp,#0x18
        0x00209402:    4607        .F      MOV      r7,r0
        0x00209404:    2000        .       MOVS     r0,#0
        0x00209406:    f8dfa238    ..8.    LDR      r10,[pc,#568] ; [0x209640] = 0x21103302
        0x0020940a:    4688        .F      MOV      r8,r1
        0x0020940c:    f88d0000    ....    STRB     r0,[sp,#0]
        0x00209410:    460b        .F      MOV      r3,r1
        0x00209412:    2201        ."      MOVS     r2,#1
        0x00209414:    498e        .I      LDR      r1,[pc,#568] ; [0x209650] = 0x8801398
        0x00209416:    4650        PF      MOV      r0,r10
        0x00209418:    f5fefb21    ..!.    BL       log_buffer ; 0x7a5e
        0x0020941c:    2603        .&      MOVS     r6,#3
        0x0020941e:    f8df9228    ..(.    LDR      r9,[pc,#552] ; [0x209648] = 0x20cf4e
        0x00209422:    4d88        .M      LDR      r5,[pc,#544] ; [0x209644] = 0x20cfe4
        0x00209424:    ebc704c7    ....    RSB      r4,r7,r7,LSL #3
        0x00209428:    f1b80f02    ....    CMP      r8,#2
        0x0020942c:    d010        ..      BEQ      0x209450 ; gaps_client_discover_state_cb + 84
        0x0020942e:    f1b80f06    ....    CMP      r8,#6
        0x00209432:    d02a        *.      BEQ      0x20948a ; gaps_client_discover_state_cb + 142
        0x00209434:    f1aa0002    ....    SUB      r0,r10,#2
        0x00209438:    f1b80f0b    ....    CMP      r8,#0xb
        0x0020943c:    f04f0200    O...    MOV      r2,#0
        0x00209440:    d035        5.      BEQ      0x2094ae ; gaps_client_discover_state_cb + 178
        0x00209442:    4983        .I      LDR      r1,[pc,#524] ; [0x209650] = 0x8801398
        0x00209444:    3150        P1      ADDS     r1,r1,#0x50
        0x00209446:    f5fefb0a    ....    BL       log_buffer ; 0x7a5e
        0x0020944a:    b006        ..      ADD      sp,sp,#0x18
        0x0020944c:    e8bd87f0    ....    POP      {r4-r10,pc}
        0x00209450:    68a8        .h      LDR      r0,[r5,#8]
        0x00209452:    eb000144    ..D.    ADD      r1,r0,r4,LSL #1
        0x00209456:    884a        J.      LDRH     r2,[r1,#2]
        0x00209458:    b90a        ..      CBNZ     r2,0x20945e ; gaps_client_discover_state_cb + 98
        0x0020945a:    8889        ..      LDRH     r1,[r1,#4]
        0x0020945c:    b191        ..      CBZ      r1,0x209484 ; gaps_client_discover_state_cb + 136
;;; .\..\..\..\src\ble\profile\client\gaps_client.c (268)
        0x0020945e:    497c        |I      LDR      r1,[pc,#496] ; [0x209650] = 0x8801398
        0x00209460:    2200        ."      MOVS     r2,#0
        0x00209462:    3928        (9      SUBS     r1,r1,#0x28
        0x00209464:    4650        PF      MOV      r0,r10
        0x00209466:    f5fefafa    ....    BL       log_buffer ; 0x7a5e
;;;269        start_handle = gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_START];
        0x0020946a:    68a8        .h      LDR      r0,[r5,#8]
        0x0020946c:    f8991000    ....    LDRB     r1,[r9,#0]
        0x00209470:    eb000044    ..D.    ADD      r0,r0,r4,LSL #1
        0x00209474:    8842        B.      LDRH     r2,[r0,#2]
;;;270        end_handle = gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_END];
        0x00209476:    8883        ..      LDRH     r3,[r0,#4]
;;;271        if (client_all_char_discovery(conn_id, gaps_client, start_handle,
        0x00209478:    4638        8F      MOV      r0,r7
        0x0020947a:    f645f8a0    E...    BL       client_all_char_discovery ; 0x4e5be
        0x0020947e:    2800        .(      CMP      r0,#0
        0x00209480:    d0e3        ..      BEQ      0x20944a ; gaps_client_discover_state_cb + 78
;;;272                                      end_handle) == GAP_CAUSE_SUCCESS)
;;;273        {
;;;274            return true;
;;;275        }
;;;276        return false;
;;;277    }
;;;278    
;;;279    static void gaps_client_discover_state_cb(uint8_t conn_id,  T_DISCOVERY_STATE discovery_state)
;;;280    {
;;;281        bool cb_flag = false;
;;;282        T_GAPS_CLIENT_CB_DATA cb_data;
;;;283        cb_data.cb_type = GAPS_CLIENT_CB_TYPE_DISC_STATE;
;;;284    
;;;285        PROFILE_PRINT_INFO1("gaps_client_discover_state_cb: discovery_state %d", discovery_state);
;;;286    
;;;287        switch (discovery_state)
;;;288        {
;;;289        case DISC_STATE_SRV_DONE:
;;;290            /* Indicate that service handle found. Start discover characteristic. */
;;;291            if ((gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_START] != 0)
;;;292                || (gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_END] != 0))
;;;293            {
;;;294                if (gaps_client_start_gap_char_discovery(conn_id) == false)
;;;295                {
;;;296                    gaps_table[conn_id].disc_state = DISC_GAPS_FAILED;
        0x00209482:    68a8        .h      LDR      r0,[r5,#8]
;;;297                    cb_flag = true;
;;;298                }
;;;299            }
;;;300            /* No GAP service handle found. Discover procedure complete. */
;;;301            else
;;;302            {
;;;303                gaps_table[conn_id].disc_state = DISC_GAPS_FAILED;
        0x00209484:    f8006014    ...`    STRB     r6,[r0,r4,LSL #1]
;;;304                cb_flag = true;
        0x00209488:    e003        ..      B        0x209492 ; gaps_client_discover_state_cb + 150
;;;305            }
;;;306            break;
;;;307    
;;;308        case DISC_STATE_CHAR_DONE:
;;;309            gaps_table[conn_id].disc_state = DISC_GAPS_DONE;
        0x0020948a:    68a9        .h      LDR      r1,[r5,#8]
        0x0020948c:    2002        .       MOVS     r0,#2
        0x0020948e:    f8010014    ....    STRB     r0,[r1,r4,LSL #1]
;;;310            cb_flag = true;
;;;311            break;
;;;312    
;;;313        case DISC_STATE_FAILED:
;;;314            PROFILE_PRINT_ERROR0("DISC_STATE_FAILED");
;;;315            gaps_table[conn_id].disc_state = DISC_GAPS_FAILED;
;;;316            cb_flag = true;
;;;317            break;
;;;318        default:
;;;319            PROFILE_PRINT_ERROR0("Invalid Discovery State!");
;;;320            break;
;;;321        }
;;;322        /* Send discover state to application if needed. */
;;;323        if (cb_flag && gaps_client_cb)
        0x00209492:    686b        kh      LDR      r3,[r5,#4]
        0x00209494:    2b00        .+      CMP      r3,#0
        0x00209496:    d0d8        ..      BEQ      0x20944a ; gaps_client_discover_state_cb + 78
;;;324        {
;;;325            cb_data.cb_content.disc_state = gaps_table[conn_id].disc_state;
        0x00209498:    68a8        .h      LDR      r0,[r5,#8]
        0x0020949a:    466a        jF      MOV      r2,sp
        0x0020949c:    4639        9F      MOV      r1,r7
        0x0020949e:    f8100014    ....    LDRB     r0,[r0,r4,LSL #1]
        0x002094a2:    f88d0004    ....    STRB     r0,[sp,#4]
;;;326            (*gaps_client_cb)(gaps_client, conn_id, &cb_data);
        0x002094a6:    f8990000    ....    LDRB     r0,[r9,#0]
        0x002094aa:    4798        .G      BLX      r3
;;;327        }
;;;328        return;
;;;329    }
        0x002094ac:    e7cd        ..      B        0x20944a ; gaps_client_discover_state_cb + 78
        0x002094ae:    4968        hI      LDR      r1,[pc,#416] ; [0x209650] = 0x8801398
        0x002094b0:    3138        81      ADDS     r1,r1,#0x38
        0x002094b2:    f5fefad4    ....    BL       log_buffer ; 0x7a5e
        0x002094b6:    e7e4        ..      B        0x209482 ; gaps_client_discover_state_cb + 134
    gaps_client_discover_result_cb
;;;330    
;;;331    static void gaps_client_discover_result_cb(uint8_t conn_id,  T_DISCOVERY_RESULT_TYPE result_type,
;;;332                                               T_DISCOVERY_RESULT_DATA result_data)
;;;333    {
        0x002094b8:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x002094bc:    460e        .F      MOV      r6,r1
        0x002094be:    460b        .F      MOV      r3,r1
        0x002094c0:    4963        cI      LDR      r1,[pc,#396] ; [0x209650] = 0x8801398
        0x002094c2:    4d5f        _M      LDR      r5,[pc,#380] ; [0x209640] = 0x21103302
;;; .\..\..\..\src\ble\profile\client\gaps_client.c (333)
        0x002094c4:    4614        .F      MOV      r4,r2
        0x002094c6:    4607        .F      MOV      r7,r0
;;;334        PROFILE_PRINT_INFO1("gap_client_discover_result_cb: result_type = %d", result_type);
        0x002094c8:    2201        ."      MOVS     r2,#1
        0x002094ca:    316c        l1      ADDS     r1,r1,#0x6c
        0x002094cc:    4628        (F      MOV      r0,r5
        0x002094ce:    f5fefac6    ....    BL       log_buffer ; 0x7a5e
        0x002094d2:    4b5c        \K      LDR      r3,[pc,#368] ; [0x209644] = 0x20cfe4
        0x002094d4:    ebc701c7    ....    RSB      r1,r7,r7,LSL #3
;;;335        uint16_t handle;
;;;336        switch (result_type)
        0x002094d8:    2e02        ..      CMP      r6,#2
        0x002094da:    d005        ..      BEQ      0x2094e8 ; gaps_client_discover_result_cb + 48
        0x002094dc:    2e03        ..      CMP      r6,#3
        0x002094de:    d00c        ..      BEQ      0x2094fa ; gaps_client_discover_result_cb + 66
        0x002094e0:    2200        ."      MOVS     r2,#0
        0x002094e2:    495c        \I      LDR      r1,[pc,#368] ; [0x209654] = 0x88014a4
        0x002094e4:    1ea8        ..      SUBS     r0,r5,#2
        0x002094e6:    e01d        ..      B        0x209524 ; gaps_client_discover_result_cb + 108
;;;337        {
;;;338        case DISC_RESULT_SRV_DATA:
;;;339            gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_START] =
        0x002094e8:    6898        .h      LDR      r0,[r3,#8]
        0x002094ea:    8822        ".      LDRH     r2,[r4,#0]
        0x002094ec:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x002094f0:    8042        B.      STRH     r2,[r0,#2]
;;;340                result_data.p_srv_disc_data->att_handle;
;;;341            gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_END] =
        0x002094f2:    8861        a.      LDRH     r1,[r4,#2]
        0x002094f4:    8081        ..      STRH     r1,[r0,#4]
        0x002094f6:    e8bd81f0    ....    POP      {r4-r8,pc}
        0x002094fa:    88e0        ..      LDRH     r0,[r4,#6]
;;;342                result_data.p_srv_disc_data->end_group_handle;
;;;343            break;
;;;344    
;;;345        case DISC_RESULT_CHAR_UUID16:
;;;346            handle = result_data.p_char_uuid16_disc_data->value_handle;
        0x002094fc:    88a2        ..      LDRH     r2,[r4,#4]
;;;347            /* we should inform intrested handles to upper application. */
;;;348            switch (result_data.p_char_uuid16_disc_data->uuid16)
        0x002094fe:    f5b05f28    ..(_    CMP      r0,#0x2a00
        0x00209502:    d013        ..      BEQ      0x20952c ; gaps_client_discover_result_cb + 116
        0x00209504:    f46f5428    o.(T    MVN      r4,#0x2a00
        0x00209508:    1900        ..      ADDS     r0,r0,r4
        0x0020950a:    d014        ..      BEQ      0x209536 ; gaps_client_discover_result_cb + 126
        0x0020950c:    28a5        .(      CMP      r0,#0xa5
        0x0020950e:    d017        ..      BEQ      0x209540 ; gaps_client_discover_result_cb + 136
        0x00209510:    28c8        .(      CMP      r0,#0xc8
        0x00209512:    d1f0        ..      BNE      0x2094f6 ; gaps_client_discover_result_cb + 62
        0x00209514:    6898        .h      LDR      r0,[r3,#8]
        0x00209516:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x0020951a:    494e        NI      LDR      r1,[pc,#312] ; [0x209654] = 0x88014a4
        0x0020951c:    8182        ..      STRH     r2,[r0,#0xc]
        0x0020951e:    2200        ."      MOVS     r2,#0
        0x00209520:    3938        89      SUBS     r1,r1,#0x38
        0x00209522:    4628        (F      MOV      r0,r5
        0x00209524:    e8bd41f0    ...A    POP      {r4-r8,lr}
        0x00209528:    f5feba99    ....    B        log_buffer ; 0x7a5e
        0x0020952c:    6898        .h      LDR      r0,[r3,#8]
        0x0020952e:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x00209532:    80c2        ..      STRH     r2,[r0,#6]
        0x00209534:    e7df        ..      B        0x2094f6 ; gaps_client_discover_result_cb + 62
        0x00209536:    6898        .h      LDR      r0,[r3,#8]
        0x00209538:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x0020953c:    8102        ..      STRH     r2,[r0,#8]
        0x0020953e:    e7da        ..      B        0x2094f6 ; gaps_client_discover_result_cb + 62
;;;349            {
;;;350            case GATT_UUID_CHAR_DEVICE_NAME:
;;;351                gaps_table[conn_id].hdl_cache[HDL_GAPS_DEVICE_NAME] = handle;
;;;352                break;
;;;353            case GATT_UUID_CHAR_APPEARANCE:
;;;354                gaps_table[conn_id].hdl_cache[HDL_GAPS_APPEARANCE] = handle;
;;;355                break;
;;;356            case GATT_UUID_CHAR_CENTRAL_ADDRESS_RESOLUTION:
;;;357                gaps_table[conn_id].hdl_cache[HDL_GAPS_CENTRAL_ADDR_RESOLUTION] = handle;
        0x00209540:    6898        .h      LDR      r0,[r3,#8]
        0x00209542:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x00209546:    4943        CI      LDR      r1,[pc,#268] ; [0x209654] = 0x88014a4
        0x00209548:    8142        B.      STRH     r2,[r0,#0xa]
;;;358                PROFILE_PRINT_INFO0("GATT_UUID_CHAR_CENTRAL_ADDRESS_RESOLUTION found");
        0x0020954a:    2200        ."      MOVS     r2,#0
        0x0020954c:    396c        l9      SUBS     r1,r1,#0x6c
;;;359                break;
        0x0020954e:    e7e8        ..      B        0x209522 ; gaps_client_discover_result_cb + 106
    gaps_client_read_result_cb
;;;360            case GATT_UUID_CHAR_RESOLVABLE_PRIVATE_ADDRESS_ONLY:
;;;361                gaps_table[conn_id].hdl_cache[HDL_GAPS_RESOLVABLE_PRIVATE_ADDR_ONLY] = handle;
;;;362                PROFILE_PRINT_INFO0("GATT_UUID_CHAR_RESOLVABLE_PRIVATE_ADDRESS_ONLY found");
;;;363                break;
;;;364            default:
;;;365                /* have no intrest on this handle. */
;;;366                break;
;;;367            }
;;;368            break;
;;;369    
;;;370        default:
;;;371            PROFILE_PRINT_ERROR0("Invalid Discovery Result Type!");
;;;372            break;
;;;373        }
;;;374    
;;;375        return;
;;;376    }
;;;377    
;;;378    static void gaps_client_read_result_cb(uint8_t conn_id,  uint16_t cause,
;;;379                                           uint16_t handle, uint16_t value_size, uint8_t *p_value)
;;;380    {
        0x00209550:    e92d4ff0    -..O    PUSH     {r4-r11,lr}
        0x00209554:    f8dfa0ec    ....    LDR      r10,[pc,#236] ; [0x209644] = 0x20cfe4
;;; .\..\..\..\src\ble\profile\client\gaps_client.c (380)
        0x00209558:    460c        .F      MOV      r4,r1
        0x0020955a:    4683        .F      MOV      r11,r0
        0x0020955c:    ebc001cb    ....    RSB      r1,r0,r11,LSL #3
        0x00209560:    f8da0008    ....    LDR      r0,[r10,#8]
        0x00209564:    b087        ..      SUB      sp,sp,#0x1c
        0x00209566:    eb000541    ..A.    ADD      r5,r0,r1,LSL #1
        0x0020956a:    4698        .F      MOV      r8,r3
        0x0020956c:    4939        9I      LDR      r1,[pc,#228] ; [0x209654] = 0x88014a4
        0x0020956e:    4617        .F      MOV      r7,r2
;;;381        T_GAPS_CLIENT_CB_DATA cb_data;
;;;382        uint16_t *hdl_cache;
;;;383        hdl_cache = gaps_table[conn_id].hdl_cache;
        0x00209570:    9e10        ..      LDR      r6,[sp,#0x40]
;;;384        cb_data.cb_type = GAPS_CLIENT_CB_TYPE_READ_RESULT;
        0x00209572:    f04f0901    O...    MOV      r9,#1
        0x00209576:    f8ad4014    ...@    STRH     r4,[sp,#0x14]
        0x0020957a:    4613        .F      MOV      r3,r2
        0x0020957c:    f88d9004    ....    STRB     r9,[sp,#4]
;;;385        cb_data.cb_content.read_result.cause = cause;
;;;386    
;;;387        PROFILE_PRINT_INFO2("gap_client_read_result_cb: handle 0x%x, cause 0x%x", handle, cause);
        0x00209580:    2202        ."      MOVS     r2,#2
        0x00209582:    3124        $1      ADDS     r1,r1,#0x24
        0x00209584:    482e        .H      LDR      r0,[pc,#184] ; [0x209640] = 0x21103302
        0x00209586:    1cad        ..      ADDS     r5,r5,#2
        0x00209588:    9400        ..      STR      r4,[sp,#0]
        0x0020958a:    f5fefa68    ..h.    BL       log_buffer ; 0x7a5e
;;;388    
;;;389        if (handle == hdl_cache[HDL_GAPS_APPEARANCE])
        0x0020958e:    88e8        ..      LDRH     r0,[r5,#6]
        0x00209590:    42b8        .B      CMP      r0,r7
        0x00209592:    d118        ..      BNE      0x2095c6 ; gaps_client_read_result_cb + 118
;;;390        {
;;;391            cb_data.cb_content.read_result.type = GAPS_READ_APPEARANCE;
        0x00209594:    f88d9008    ....    STRB     r9,[sp,#8]
;;;392            if (cause == GAP_SUCCESS)
        0x00209598:    b9fc        ..      CBNZ     r4,0x2095da ; gaps_client_read_result_cb + 138
;;;393            {
;;;394                uint16_t appearance;
;;;395                if (value_size != 2)
        0x0020959a:    4640        @F      MOV      r0,r8
        0x0020959c:    f1b80f02    ....    CMP      r8,#2
        0x002095a0:    d00a        ..      BEQ      0x2095b8 ; gaps_client_read_result_cb + 104
;;;396                {
;;;397                    PROFILE_PRINT_ERROR1("gaps_client_read_result_cb: invalid cccd len %d", value_size);
        0x002095a2:    4603        .F      MOV      r3,r0
        0x002095a4:    492b        +I      LDR      r1,[pc,#172] ; [0x209654] = 0x88014a4
        0x002095a6:    4826        &H      LDR      r0,[pc,#152] ; [0x209640] = 0x21103302
        0x002095a8:    2201        ."      MOVS     r2,#1
        0x002095aa:    315c        \1      ADDS     r1,r1,#0x5c
        0x002095ac:    1e80        ..      SUBS     r0,r0,#2
        0x002095ae:    f5fefa56    ..V.    BL       log_buffer ; 0x7a5e
        0x002095b2:    b007        ..      ADD      sp,sp,#0x1c
        0x002095b4:    e8bd8ff0    ....    POP      {r4-r11,pc}
;;;398                    return;
;;;399                }
;;;400                LE_ARRAY_TO_UINT16(appearance, p_value);
        0x002095b8:    7830        0x      LDRB     r0,[r6,#0]
        0x002095ba:    7871        qx      LDRB     r1,[r6,#1]
        0x002095bc:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;401                cb_data.cb_content.read_result.data.appearance = appearance;
        0x002095c0:    f8ad000c    ....    STRH     r0,[sp,#0xc]
;;;402            }
        0x002095c4:    e014        ..      B        0x2095f0 ; gaps_client_read_result_cb + 160
;;;403        }
;;;404        else if (handle == hdl_cache[HDL_GAPS_DEVICE_NAME])
        0x002095c6:    88a8        ..      LDRH     r0,[r5,#4]
        0x002095c8:    42b8        .B      CMP      r0,r7
        0x002095ca:    d107        ..      BNE      0x2095dc ; gaps_client_read_result_cb + 140
;;;405        {
;;;406            cb_data.cb_content.read_result.type = GAPS_READ_DEVICE_NAME;
        0x002095cc:    2000        .       MOVS     r0,#0
        0x002095ce:    f88d0008    ....    STRB     r0,[sp,#8]
;;;407            if (cause == GAP_SUCCESS)
        0x002095d2:    b914        ..      CBNZ     r4,0x2095da ; gaps_client_read_result_cb + 138
;;;408            {
;;;409                cb_data.cb_content.read_result.data.device_name.value_size = value_size;
        0x002095d4:    f8ad800c    ....    STRH     r8,[sp,#0xc]
;;;410                cb_data.cb_content.read_result.data.device_name.p_value = p_value;
        0x002095d8:    9604        ..      STR      r6,[sp,#0x10]
        0x002095da:    e009        ..      B        0x2095f0 ; gaps_client_read_result_cb + 160
;;;411            }
;;;412        }
;;;413        else if (handle == hdl_cache[HDL_GAPS_CENTRAL_ADDR_RESOLUTION])
        0x002095dc:    8928        (.      LDRH     r0,[r5,#8]
        0x002095de:    42b8        .B      CMP      r0,r7
        0x002095e0:    d1e7        ..      BNE      0x2095b2 ; gaps_client_read_result_cb + 98
;;;414        {
;;;415            cb_data.cb_content.read_result.type = GAPS_READ_CENTRAL_ADDR_RESOLUTION;
        0x002095e2:    2002        .       MOVS     r0,#2
        0x002095e4:    f88d0008    ....    STRB     r0,[sp,#8]
;;;416            if (cause == GAP_SUCCESS)
        0x002095e8:    b914        ..      CBNZ     r4,0x2095f0 ; gaps_client_read_result_cb + 160
;;;417            {
;;;418                cb_data.cb_content.read_result.data.central_addr_res = *p_value;
        0x002095ea:    7830        0x      LDRB     r0,[r6,#0]
        0x002095ec:    f88d000c    ....    STRB     r0,[sp,#0xc]
;;;419            }
;;;420        }
;;;421        else
;;;422        {
;;;423            return;
;;;424        }
;;;425    
;;;426        /* Inform application the read result. */
;;;427        if (gaps_client_cb)
        0x002095f0:    f8da3004    ...0    LDR      r3,[r10,#4]
        0x002095f4:    2b00        .+      CMP      r3,#0
        0x002095f6:    d0dc        ..      BEQ      0x2095b2 ; gaps_client_read_result_cb + 98
;;;428        {
;;;429            (*gaps_client_cb)(gaps_client, conn_id, &cb_data);
        0x002095f8:    4813        .H      LDR      r0,[pc,#76] ; [0x209648] = 0x20cf4e
        0x002095fa:    aa01        ..      ADD      r2,sp,#4
        0x002095fc:    4659        YF      MOV      r1,r11
        0x002095fe:    7800        .x      LDRB     r0,[r0,#0]
        0x00209600:    4798        .G      BLX      r3
;;;430        }
;;;431        return;
;;;432    }
        0x00209602:    e7d6        ..      B        0x2095b2 ; gaps_client_read_result_cb + 98
    gaps_client_disc_cb
;;;433    
;;;434    
;;;435    static void gaps_client_disc_cb(uint8_t conn_id)
;;;436    {
        0x00209604:    b510        ..      PUSH     {r4,lr}
        0x00209606:    4913        .I      LDR      r1,[pc,#76] ; [0x209654] = 0x88014a4
;;; .\..\..\..\src\ble\profile\client\gaps_client.c (436)
        0x00209608:    4604        .F      MOV      r4,r0
;;;437        PROFILE_PRINT_INFO0("gap_client_disc_cb.");
        0x0020960a:    2200        ."      MOVS     r2,#0
        0x0020960c:    3190        .1      ADDS     r1,r1,#0x90
        0x0020960e:    480c        .H      LDR      r0,[pc,#48] ; [0x209640] = 0x21103302
        0x00209610:    f5fefa25    ..%.    BL       log_buffer ; 0x7a5e
;;;438        if (conn_id >= gaps_link_num)
        0x00209614:    480b        .H      LDR      r0,[pc,#44] ; [0x209644] = 0x20cfe4
        0x00209616:    7801        .x      LDRB     r1,[r0,#0]
        0x00209618:    428c        .B      CMP      r4,r1
        0x0020961a:    d309        ..      BCC      0x209630 ; gaps_client_disc_cb + 44
;;;439        {
;;;440            PROFILE_PRINT_ERROR1("gaps_client_disc_cb: failed invalid conn_id %d", conn_id);
        0x0020961c:    490d        .I      LDR      r1,[pc,#52] ; [0x209654] = 0x88014a4
        0x0020961e:    4623        #F      MOV      r3,r4
        0x00209620:    4807        .H      LDR      r0,[pc,#28] ; [0x209640] = 0x21103302
        0x00209622:    2201        ."      MOVS     r2,#1
        0x00209624:    31a8        .1      ADDS     r1,r1,#0xa8
        0x00209626:    e8bd4010    ...@    POP      {r4,lr}
        0x0020962a:    1e80        ..      SUBS     r0,r0,#2
        0x0020962c:    f5feba17    ....    B        log_buffer ; 0x7a5e
;;;441            return;
;;;442        }
;;;443        memset(&gaps_table[conn_id], 0, sizeof(T_GAPS_LINK));
        0x00209630:    6880        .h      LDR      r0,[r0,#8]
        0x00209632:    ebc401c4    ....    RSB      r1,r4,r4,LSL #3
        0x00209636:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x0020963a:    e00d        ..      B        0x209658 ; gaps_client_disc_cb + 84
    $d
        0x0020963c:    08801128    (...    DCD    142610728
        0x00209640:    21103302    .3.!    DCD    554709762
        0x00209644:    0020cfe4    .. .    DCD    2150372
        0x00209648:    0020cf4e    N. .    DCD    2150222
        0x0020964c:    08801248    H...    DCD    142611016
        0x00209650:    08801398    ....    DCD    142611352
        0x00209654:    088014a4    ....    DCD    142611620
    $t
        0x00209658:    e8bd4010    ...@    POP      {r4,lr}
        0x0020965c:    210e        .!      MOVS     r1,#0xe
        0x0020965e:    f650bcdd    P...    B        __aeabi_memclr ; 0x5a01c
    gaps_add_client
;;;444        return;
;;;445    }
;;;446    /**
;;;447     * @brief GAPS Client Callbacks.
;;;448    */
;;;449    const T_FUN_CLIENT_CBS gaps_client_cbs =
;;;450    {
;;;451        gaps_client_discover_state_cb,   //!< Discovery State callback function pointer
;;;452        gaps_client_discover_result_cb,  //!< Discovery result callback function pointer
;;;453        gaps_client_read_result_cb,      //!< Read response callback function pointer
;;;454        NULL,     //!< Write result callback function pointer
;;;455        NULL,  //!< Notify Indicate callback function pointer
;;;456        gaps_client_disc_cb       //!< Link disconnection callback function pointer
;;;457    };
;;;458    
;;;459    /**
;;;460      * @brief  Add gap service client to application.
;;;461      * @param[in]  app_cb pointer of app callback function to handle specific client module data.
;;;462      * @param[in]  link_num initialize link num.
;;;463      * @return Client ID of the specific client module.
;;;464      * @retval 0xff failed.
;;;465      * @retval other success.
;;;466      *
;;;467      * <b>Example usage</b>
;;;468      * \code{.c}
;;;469        void app_le_profile_init(void)
;;;470        {
;;;471            client_init(1);
;;;472            gaps_client_id  = gaps_add_client(app_client_callback, APP_MAX_LINKS);
;;;473        }
;;;474     * \endcode
;;;475      */
;;;476    T_CLIENT_ID gaps_add_client(P_FUN_GENERAL_APP_CB app_cb, uint8_t link_num)
;;;477    {
        0x00209662:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00209666:    4d1a        .M      LDR      r5,[pc,#104] ; [0x2096d0] = 0x21103300
        0x00209668:    4607        .F      MOV      r7,r0
        0x0020966a:    460c        .F      MOV      r4,r1
        0x0020966c:    2904        .)      CMP      r1,#4
        0x0020966e:    d907        ..      BLS      0x209680 ; gaps_add_client + 30
;;;478        uint16_t size;
;;;479        if (link_num > GAPS_MAX_LINKS)
;;;480        {
;;;481            PROFILE_PRINT_ERROR1("gaps_add_client: invalid link_num %d", link_num);
        0x00209670:    460b        .F      MOV      r3,r1
        0x00209672:    2201        ."      MOVS     r2,#1
        0x00209674:    4917        .I      LDR      r1,[pc,#92] ; [0x2096d4] = 0x8801580
        0x00209676:    4628        (F      MOV      r0,r5
        0x00209678:    f5fef9f1    ....    BL       log_buffer ; 0x7a5e
;;;482            return 0xff;
        0x0020967c:    20ff        .       MOVS     r0,#0xff
        0x0020967e:    e73a        :.      B        0x2094f6 ; gaps_client_discover_result_cb + 62
;;;483        }
;;;484        if (false == client_register_spec_client_cb(&gaps_client, &gaps_client_cbs))
        0x00209680:    4915        .I      LDR      r1,[pc,#84] ; [0x2096d8] = 0x21c86c
        0x00209682:    4816        .H      LDR      r0,[pc,#88] ; [0x2096dc] = 0x20cf4e
        0x00209684:    f644fe76    D.v.    BL       client_register_spec_client_cb ; 0x4e374
        0x00209688:    4e14        .N      LDR      r6,[pc,#80] ; [0x2096dc] = 0x20cf4e
        0x0020968a:    b1b8        ..      CBZ      r0,0x2096bc ; gaps_add_client + 90
;;;485        {
;;;486            gaps_client = CLIENT_PROFILE_GENERAL_ID;
;;;487            PROFILE_PRINT_ERROR0("gaps_add_client Fail !!!");
;;;488            return gaps_client;
;;;489        }
;;;490        PROFILE_PRINT_INFO1("gaps_add_client: client ID = %d", gaps_client);
        0x0020968c:    4911        .I      LDR      r1,[pc,#68] ; [0x2096d4] = 0x8801580
        0x0020968e:    4810        .H      LDR      r0,[pc,#64] ; [0x2096d0] = 0x21103300
        0x00209690:    7833        3x      LDRB     r3,[r6,#0]
        0x00209692:    2201        ."      MOVS     r2,#1
        0x00209694:    3144        D1      ADDS     r1,r1,#0x44
        0x00209696:    1c80        ..      ADDS     r0,r0,#2
        0x00209698:    f5fef9e1    ....    BL       log_buffer ; 0x7a5e
;;;491    
;;;492        /* register callback for profile to inform application that some events happened. */
;;;493        gaps_client_cb = app_cb;
        0x0020969c:    4d10        .M      LDR      r5,[pc,#64] ; [0x2096e0] = 0x20cfe4
        0x0020969e:    ebc400c4    ....    RSB      r0,r4,r4,LSL #3
        0x002096a2:    4a0d        .J      LDR      r2,[pc,#52] ; [0x2096d8] = 0x21c86c
;;;494        gaps_link_num = link_num;
        0x002096a4:    606f        o`      STR      r7,[r5,#4]
        0x002096a6:    0041        A.      LSLS     r1,r0,#1
        0x002096a8:    702c        ,p      STRB     r4,[r5,#0]
;;;495        size = gaps_link_num * sizeof(T_GAPS_LINK);
;;;496        gaps_table = os_mem_zalloc(RAM_TYPE_DATA_ON, size);
        0x002096aa:    f44f73f8    O..s    MOV      r3,#0x1f0
        0x002096ae:    3218        .2      ADDS     r2,r2,#0x18
        0x002096b0:    2000        .       MOVS     r0,#0
        0x002096b2:    f61cfb81    ....    BL       os_mem_zalloc_intern ; 0x25db8
        0x002096b6:    60a8        .`      STR      r0,[r5,#8]
;;;497    
;;;498        return gaps_client;
        0x002096b8:    7830        0x      LDRB     r0,[r6,#0]
;;;499    }
        0x002096ba:    e71c        ..      B        0x2094f6 ; gaps_client_discover_result_cb + 62
        0x002096bc:    20ff        .       MOVS     r0,#0xff
        0x002096be:    4905        .I      LDR      r1,[pc,#20] ; [0x2096d4] = 0x8801580
        0x002096c0:    7030        0p      STRB     r0,[r6,#0]
        0x002096c2:    2200        ."      MOVS     r2,#0
        0x002096c4:    3128        (1      ADDS     r1,r1,#0x28
        0x002096c6:    4628        (F      MOV      r0,r5
        0x002096c8:    f5fef9c9    ....    BL       log_buffer ; 0x7a5e
        0x002096cc:    e7f4        ..      B        0x2096b8 ; gaps_add_client + 86
    $d
        0x002096ce:    0000        ..      DCW    0
        0x002096d0:    21103300    .3.!    DCD    554709760
        0x002096d4:    08801580    ....    DCD    142611840
        0x002096d8:    0021c86c    l.!.    DCD    2213996
        0x002096dc:    0020cf4e    N. .    DCD    2150222
        0x002096e0:    0020cfe4    .. .    DCD    2150372
    $t
    .text
    cmd_showcon
;;; ..\..\..\src\sample\ble_central\user_cmd.c
;;;71     {
        0x002096e4:    b510        ..      PUSH     {r4,lr}
        0x002096e6:    b088        ..      SUB      sp,sp,#0x20
;;;72         uint8_t conn_id;
;;;73         T_GAP_CONN_INFO conn_info;
;;;74         for (conn_id = 0; conn_id < APP_MAX_LINKS; conn_id++)
        0x002096e8:    2400        .$      MOVS     r4,#0
        0x002096ea:    a904        ..      ADD      r1,sp,#0x10
        0x002096ec:    4620         F      MOV      r0,r4
        0x002096ee:    f644fa43    D.C.    BL       le_get_conn_info ; 0x4db78
        0x002096f2:    b1a0        ..      CBZ      r0,0x20971e ; cmd_showcon + 58
        0x002096f4:    f89d0015    ....    LDRB     r0,[sp,#0x15]
        0x002096f8:    f89d3012    ...0    LDRB     r3,[sp,#0x12]
        0x002096fc:    f89d2013    ...     LDRB     r2,[sp,#0x13]
        0x00209700:    f89d1014    ....    LDRB     r1,[sp,#0x14]
        0x00209704:    e88d000f    ....    STM      sp,{r0-r3}
        0x00209708:    f89d3016    ...0    LDRB     r3,[sp,#0x16]
        0x0020970c:    f89d2017    ...     LDRB     r2,[sp,#0x17]
        0x00209710:    4621        !F      MOV      r1,r4
        0x00209712:    a0f8        ..      ADR      r0,{pc}+0x3e2 ; 0x209af4
        0x00209714:    f001faf4    ....    BL       data_uart_print ; 0x20ad00
        0x00209718:    2064        d       MOVS     r0,#0x64
        0x0020971a:    f61df829    ..).    BL       os_delay ; 0x26770
        0x0020971e:    1c64        d.      ADDS     r4,r4,#1
        0x00209720:    b2e4        ..      UXTB     r4,r4
        0x00209722:    2c04        .,      CMP      r4,#4
        0x00209724:    d3e1        ..      BCC      0x2096ea ; cmd_showcon + 6
        0x00209726:    b008        ..      ADD      sp,sp,#0x20
;;;75         {
;;;76             if (le_get_conn_info(conn_id, &conn_info))
;;;77             {
;;;78     #if 0   //by vsop     	
;;;79                 data_uart_print("ShowCon conn_id %d state 0x%x role %d\r\n", conn_id,
;;;80                                 conn_info.conn_state, conn_info.role);
;;;81                 data_uart_print("RemoteBd = [%02x:%02x:%02x:%02x:%02x:%02x] type = %d\r\n",
;;;82                                 conn_info.remote_bd[5], conn_info.remote_bd[4],
;;;83                                 conn_info.remote_bd[3], conn_info.remote_bd[2],
;;;84                                 conn_info.remote_bd[1], conn_info.remote_bd[0],
;;;85                                 conn_info.remote_bd_type);
;;;86     #else
;;;87     data_uart_print("#showcon#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",conn_id,
;;;88     				conn_info.remote_bd[5], conn_info.remote_bd[4],
;;;89     				conn_info.remote_bd[3], conn_info.remote_bd[2],
;;;90     				conn_info.remote_bd[1], conn_info.remote_bd[0]);
;;;91     os_delay(100);
;;;92     
;;;93     #endif
;;;94             }
;;;95         }
;;;96     #if 0	//by vsop
;;;97         data_uart_print("active link num %d,  idle link num %d\r\n",
;;;98                         le_get_active_link_num(), le_get_idle_link_num());
;;;99     #endif
;;;100        return (RESULT_SUCESS);
        0x00209728:    2000        .       MOVS     r0,#0
;;;101    }
        0x0020972a:    bd10        ..      POP      {r4,pc}
    cmd_conupdreq
;;;102    
;;;103    /**
;;;104     * @brief LE connection param update request
;;;105     *
;;;106     * <b>Command table define</b>
;;;107     * \code{.c}
;;;108        {
;;;109            "conupdreq",
;;;110            "conupdreq [conn_id] [interval_min] [interval_max] [latency] [supervision_timeout]\n\r",
;;;111            "LE connection param update request\r\n\
;;;112            sample: conupdreq 0 0x30 0x40 0 500\n\r",
;;;113            cmd_conupdreq
;;;114        },
;;;115     * \endcode
;;;116     */
;;;117    static T_USER_CMD_PARSE_RESULT cmd_conupdreq(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;118    {
        0x0020972c:    b5fe        ..      PUSH     {r1-r7,lr}
        0x0020972e:    8981        ..      LDRH     r1,[r0,#0xc]
        0x00209730:    8a02        ..      LDRH     r2,[r0,#0x10]
        0x00209732:    8a83        ..      LDRH     r3,[r0,#0x14]
;;;119        T_GAP_CAUSE cause;
;;;120        uint8_t  conn_id = p_parse_value->dw_param[0];
        0x00209734:    7a04        .z      LDRB     r4,[r0,#8]
;;;121        uint16_t conn_interval_min = p_parse_value->dw_param[1];
        0x00209736:    b289        ..      UXTH     r1,r1
        0x00209738:    8b00        ..      LDRH     r0,[r0,#0x18]
        0x0020973a:    004e        N.      LSLS     r6,r1,#1
        0x0020973c:    1eb6        ..      SUBS     r6,r6,#2
;;;122        uint16_t conn_interval_max = p_parse_value->dw_param[2];
        0x0020973e:    b292        ..      UXTH     r2,r2
        0x00209740:    b280        ..      UXTH     r0,r0
        0x00209742:    b2b6        ..      UXTH     r6,r6
        0x00209744:    0055        U.      LSLS     r5,r2,#1
        0x00209746:    e9cd0600    ....    STRD     r0,r6,[sp,#0]
        0x0020974a:    1ead        ..      SUBS     r5,r5,#2
        0x0020974c:    b2ad        ..      UXTH     r5,r5
;;;123        uint16_t conn_latency = p_parse_value->dw_param[3];
        0x0020974e:    b29b        ..      UXTH     r3,r3
;;;124        uint16_t supervision_timeout = p_parse_value->dw_param[4];
;;;125    
;;;126    
;;;127        cause = le_update_conn_param(conn_id,
        0x00209750:    9502        ..      STR      r5,[sp,#8]
        0x00209752:    4620         F      MOV      r0,r4
        0x00209754:    f644fa99    D...    BL       le_update_conn_param ; 0x4dc8a
;;;128                                     conn_interval_min,
;;;129                                     conn_interval_max,
;;;130                                     conn_latency,
;;;131                                     supervision_timeout,
;;;132                                     2 * (conn_interval_min - 1),
;;;133                                     2 * (conn_interval_max - 1)
;;;134                                    );
;;;135        return (T_USER_CMD_PARSE_RESULT)cause;
;;;136    }
        0x00209758:    bdfe        ..      POP      {r1-r7,pc}
    cmd_disc
;;;137    
;;;138    /**
;;;139     * @brief Disconnect to remote device
;;;140     *
;;;141     * <b>Command table define</b>
;;;142     * \code{.c}
;;;143        {
;;;144            "disc",
;;;145            "disc [conn_id]\n\r",
;;;146            "Disconnect to remote device\n\r",
;;;147            cmd_disc
;;;148        },
;;;149     * \endcode
;;;150     */
;;;151    static T_USER_CMD_PARSE_RESULT cmd_disc(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;152    {
;;;153        uint8_t conn_id = p_parse_value->dw_param[0];
        0x0020975a:    7a00        .z      LDRB     r0,[r0,#8]
;;;154        T_GAP_CAUSE cause;
;;;155        cause = le_disconnect(conn_id);
        0x0020975c:    f644ba62    D.b.    B        le_disconnect ; 0x4dc24
    cmd_authmode
;;;156        return (T_USER_CMD_PARSE_RESULT)cause;
;;;157    }
;;;158    
;;;159    /**
;;;160     * @brief Config authentication mode
;;;161     *
;;;162     * <b>Command table define</b>
;;;163     * \code{.c}
;;;164        {
;;;165            "authmode",
;;;166            "authmode [auth_flags] [io_cap] [sec_enable] [oob_enable]\n\r",
;;;167            "Config authentication mode\r\n\
;;;168            [auth_flags]:authentication req bit field: bit0-(bonding), bit2-(MITM), bit3-(SC)\r\n\
;;;169            [io_cap]:set io Capabilities: 0-(display only), 1-(display yes/no), 2-(keyboard noly), 3-(no IO), 4-(keyboard display)\r\n\
;;;170            [sec_enable]:Start smp pairing procedure when connected: 0-(disable), 1-(enable)\r\n\
;;;171            [oob_enable]:Enable oob flag: 0-(disable), 1-(enable)\r\n\
;;;172            sample: authmode 0x5 2 1 0\n\r",
;;;173            cmd_authmode
;;;174        },
;;;175     * \endcode
;;;176     */
;;;177    static T_USER_CMD_PARSE_RESULT cmd_authmode(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;178    {
        0x00209760:    b500        ..      PUSH     {lr}
        0x00209762:    b087        ..      SUB      sp,sp,#0x1c
;;;179        T_GAP_CAUSE cause;
;;;180        uint8_t  auth_pair_mode = GAP_PAIRING_MODE_PAIRABLE;
        0x00209764:    2101        .!      MOVS     r1,#1
        0x00209766:    2203        ."      MOVS     r2,#3
        0x00209768:    f88d2010    ...     STRB     r2,[sp,#0x10]
        0x0020976c:    2200        ."      MOVS     r2,#0
        0x0020976e:    f88d1014    ....    STRB     r1,[sp,#0x14]
;;;181        uint16_t auth_flags = GAP_AUTHEN_BIT_BONDING_FLAG;
        0x00209772:    f8ad100c    ....    STRH     r1,[sp,#0xc]
;;;182        uint8_t  auth_io_cap = GAP_IO_CAP_NO_INPUT_NO_OUTPUT;
;;;183        uint8_t  oob_enable = false;
        0x00209776:    f88d2000    ...     STRB     r2,[sp,#0]
;;;184        uint8_t  auth_sec_req_enable = false;
        0x0020977a:    f88d2004    ...     STRB     r2,[sp,#4]
;;;185        uint16_t auth_sec_req_flags = GAP_AUTHEN_BIT_BONDING_FLAG;
        0x0020977e:    f8ad1008    ....    STRH     r1,[sp,#8]
;;;186    
;;;187        if (p_parse_value->param_count > 0)
        0x00209782:    6841        Ah      LDR      r1,[r0,#4]
        0x00209784:    2900        .)      CMP      r1,#0
        0x00209786:    dd04        ..      BLE      0x209792 ; cmd_authmode + 50
;;;188        {
;;;189            auth_flags = p_parse_value->dw_param[0];
        0x00209788:    8902        ..      LDRH     r2,[r0,#8]
        0x0020978a:    f8ad200c    ...     STRH     r2,[sp,#0xc]
;;;190            auth_sec_req_flags = p_parse_value->dw_param[0];
        0x0020978e:    f8ad2008    ...     STRH     r2,[sp,#8]
;;;191        }
;;;192        if (p_parse_value->param_count > 1)
        0x00209792:    2901        .)      CMP      r1,#1
        0x00209794:    dd02        ..      BLE      0x20979c ; cmd_authmode + 60
;;;193        {
;;;194            auth_io_cap = p_parse_value->dw_param[1];
        0x00209796:    7b02        .{      LDRB     r2,[r0,#0xc]
        0x00209798:    f88d2010    ...     STRB     r2,[sp,#0x10]
;;;195        }
;;;196        if (p_parse_value->param_count > 2)
        0x0020979c:    2902        .)      CMP      r1,#2
        0x0020979e:    dd02        ..      BLE      0x2097a6 ; cmd_authmode + 70
;;;197        {
;;;198            auth_sec_req_enable = p_parse_value->dw_param[2];
        0x002097a0:    7c02        .|      LDRB     r2,[r0,#0x10]
        0x002097a2:    f88d2004    ...     STRB     r2,[sp,#4]
;;;199        }
;;;200        if (p_parse_value->param_count > 3)
        0x002097a6:    2903        .)      CMP      r1,#3
        0x002097a8:    dd02        ..      BLE      0x2097b0 ; cmd_authmode + 80
;;;201        {
;;;202            oob_enable = p_parse_value->dw_param[3];
        0x002097aa:    7d00        .}      LDRB     r0,[r0,#0x14]
        0x002097ac:    f88d0000    ....    STRB     r0,[sp,#0]
;;;203        }
;;;204        gap_set_param(GAP_PARAM_BOND_PAIRING_MODE, sizeof(auth_pair_mode), &auth_pair_mode);
        0x002097b0:    aa05        ..      ADD      r2,sp,#0x14
        0x002097b2:    2101        .!      MOVS     r1,#1
        0x002097b4:    f2402002    @..     MOV      r0,#0x202
        0x002097b8:    f642fbf7    B...    BL       gap_set_param ; 0x4bfaa
;;;205        gap_set_param(GAP_PARAM_BOND_AUTHEN_REQUIREMENTS_FLAGS, sizeof(auth_flags), &auth_flags);
        0x002097bc:    aa03        ..      ADD      r2,sp,#0xc
        0x002097be:    2102        .!      MOVS     r1,#2
        0x002097c0:    f2402003    @..     MOV      r0,#0x203
        0x002097c4:    f642fbf1    B...    BL       gap_set_param ; 0x4bfaa
;;;206        gap_set_param(GAP_PARAM_BOND_IO_CAPABILITIES, sizeof(auth_io_cap), &auth_io_cap);
        0x002097c8:    aa04        ..      ADD      r2,sp,#0x10
        0x002097ca:    2101        .!      MOVS     r1,#1
        0x002097cc:    f44f7001    O..p    MOV      r0,#0x204
        0x002097d0:    f642fbeb    B...    BL       gap_set_param ; 0x4bfaa
;;;207        gap_set_param(GAP_PARAM_BOND_OOB_ENABLED, sizeof(uint8_t), &oob_enable);
        0x002097d4:    466a        jF      MOV      r2,sp
        0x002097d6:    2101        .!      MOVS     r1,#1
        0x002097d8:    f2402005    @..     MOV      r0,#0x205
        0x002097dc:    f642fbe5    B...    BL       gap_set_param ; 0x4bfaa
;;;208        le_bond_set_param(GAP_PARAM_BOND_SEC_REQ_ENABLE, sizeof(auth_sec_req_enable), &auth_sec_req_enable);
        0x002097e0:    aa01        ..      ADD      r2,sp,#4
        0x002097e2:    2101        .!      MOVS     r1,#1
        0x002097e4:    f2402013    @..     MOV      r0,#0x213
        0x002097e8:    f642fd01    B...    BL       le_bond_set_param ; 0x4c1ee
;;;209        le_bond_set_param(GAP_PARAM_BOND_SEC_REQ_REQUIREMENT, sizeof(auth_sec_req_flags),
        0x002097ec:    aa02        ..      ADD      r2,sp,#8
        0x002097ee:    2102        .!      MOVS     r1,#2
        0x002097f0:    f44f7005    O..p    MOV      r0,#0x214
        0x002097f4:    f642fcfb    B...    BL       le_bond_set_param ; 0x4c1ee
;;;210                          &auth_sec_req_flags);
;;;211        cause = gap_set_pairable_mode();
        0x002097f8:    f642fb6f    B.o.    BL       gap_set_pairable_mode ; 0x4beda
;;;212        return (T_USER_CMD_PARSE_RESULT)cause;
;;;213    }
        0x002097fc:    b007        ..      ADD      sp,sp,#0x1c
        0x002097fe:    bd00        ..      POP      {pc}
    cmd_sauth
;;;214    
;;;215    /**
;;;216     * @brief Send authentication request
;;;217     *
;;;218     * <b>Command table define</b>
;;;219     * \code{.c}
;;;220        {
;;;221            "sauth",
;;;222            "sauth [conn_id]\n\r",
;;;223            "Send authentication request\n\r",
;;;224            cmd_sauth
;;;225        },
;;;226     * \endcode
;;;227     */
;;;228    static T_USER_CMD_PARSE_RESULT cmd_sauth(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;229    {
;;;230        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209800:    7a00        .z      LDRB     r0,[r0,#8]
;;;231        T_GAP_CAUSE cause;
;;;232        cause = le_bond_pair(conn_id);
        0x00209802:    f642bda6    B...    B        le_bond_pair ; 0x4c352
    cmd_userconf
        0x00209806:    7a02        .z      LDRB     r2,[r0,#8]
        0x00209808:    68c0        .h      LDR      r0,[r0,#0xc]
        0x0020980a:    2101        .!      MOVS     r1,#1
;;;233        return (T_USER_CMD_PARSE_RESULT)cause;
;;;234    }
;;;235    
;;;236    /**
;;;237     * @brief Send user confirmation when show GAP_MSG_LE_BOND_USER_CONFIRMATION
;;;238     *
;;;239     * <b>Command table define</b>
;;;240     * \code{.c}
;;;241        {
;;;242            "userconf",
;;;243            "userconf [conn_id] [conf]\n\r",
;;;244            "Send user confirmation when show GAP_MSG_LE_BOND_USER_CONFIRMATION\r\n\
;;;245            [conf]: 0-(Reject), 1-(Accept)\r\n\
;;;246            sample: userconf 0 1\n\r",
;;;247            cmd_userconf
;;;248        },
;;;249     * \endcode
;;;250     */
;;;251    static T_USER_CMD_PARSE_RESULT cmd_userconf(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;252    {
        0x0020980c:    b900        ..      CBNZ     r0,0x209810 ; cmd_userconf + 10
;;;253        uint8_t conn_id = p_parse_value->dw_param[0];
;;;254        T_GAP_CFM_CAUSE confirm = GAP_CFM_CAUSE_ACCEPT;
;;;255        T_GAP_CAUSE cause;
;;;256        if (p_parse_value->dw_param[1] == 0)
;;;257        {
;;;258            confirm = GAP_CFM_CAUSE_REJECT;
        0x0020980e:    2102        .!      MOVS     r1,#2
;;;259        }
;;;260        cause = le_bond_user_confirm(conn_id, confirm);
        0x00209810:    4610        .F      MOV      r0,r2
        0x00209812:    f642bdff    B...    B        le_bond_user_confirm ; 0x4c414
    cmd_authkey
;;;261        return (T_USER_CMD_PARSE_RESULT)cause;
;;;262    }
;;;263    
;;;264    /**
;;;265     * @brief Input passkey when show GAP_MSG_LE_BOND_PASSKEY_INPUT
;;;266     *
;;;267     * <b>Command table define</b>
;;;268     * \code{.c}
;;;269        {
;;;270            "authkey",
;;;271            "authkey [conn_id] [passkey]\n\r",
;;;272            "Input passkey when show GAP_MSG_LE_BOND_PASSKEY_INPUT\r\n\
;;;273            [passkey]: 0 - 999999\r\n\
;;;274            sample: authkey 0 123456\n\r",
;;;275            cmd_authkey
;;;276        },
;;;277     * \endcode
;;;278     */
;;;279    static T_USER_CMD_PARSE_RESULT cmd_authkey(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;280    {
;;;281        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209816:    7a03        .z      LDRB     r3,[r0,#8]
        0x00209818:    68c1        .h      LDR      r1,[r0,#0xc]
        0x0020981a:    48c2        .H      LDR      r0,[pc,#776] ; [0x209b24] = 0xf423f
;;;282        uint32_t passcode = p_parse_value->dw_param[1];
;;;283        T_GAP_CAUSE cause;
;;;284        T_GAP_CFM_CAUSE confirm = GAP_CFM_CAUSE_ACCEPT;
        0x0020981c:    2201        ."      MOVS     r2,#1
;;;285        if (passcode > GAP_PASSCODE_MAX)
        0x0020981e:    4281        .B      CMP      r1,r0
        0x00209820:    d900        ..      BLS      0x209824 ; cmd_authkey + 14
;;;286        {
;;;287            confirm = GAP_CFM_CAUSE_REJECT;
        0x00209822:    2202        ."      MOVS     r2,#2
;;;288        }
;;;289        cause = le_bond_passkey_input_confirm(conn_id, passcode,
        0x00209824:    4618        .F      MOV      r0,r3
        0x00209826:    f642bdac    B...    B        le_bond_passkey_input_confirm ; 0x4c382
    cmd_bondclear
;;;290                                              confirm);
;;;291        return (T_USER_CMD_PARSE_RESULT)cause;
;;;292    }
;;;293    
;;;294    /**
;;;295     * @brief Clear all bonded devices information
;;;296     *
;;;297     * <b>Command table define</b>
;;;298     * \code{.c}
;;;299        {
;;;300            "bondclear",
;;;301            "bondclear\n\r",
;;;302            "Clear all bonded devices information\n\r",
;;;303            cmd_bondclear
;;;304        },
;;;305     * \endcode
;;;306     */
;;;307    static T_USER_CMD_PARSE_RESULT cmd_bondclear(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;308    {
        0x0020982a:    b510        ..      PUSH     {r4,lr}
;;;309        le_bond_clear_all_keys();
        0x0020982c:    f642fc90    B...    BL       le_bond_clear_all_keys ; 0x4c150
;;;310        return (RESULT_SUCESS);
        0x00209830:    2000        .       MOVS     r0,#0
;;;311    }
        0x00209832:    bd10        ..      POP      {r4,pc}
    cmd_bonddel
;;;312    
;;;313    /**
;;;314     * @brief Clear bonded devices information by connect id
;;;315     *
;;;316     * <b>Command table define</b>
;;;317     * \code{.c}
;;;318        {
;;;319            "bonddel",
;;;320            "bonddel [conn_id]\n\r",
;;;321            "Clear bonded devices information by connect id\n\r",
;;;322            cmd_bonddel
;;;323        },
;;;324     * \endcode
;;;325     */
;;;326    static T_USER_CMD_PARSE_RESULT cmd_bonddel(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;327    {
;;;328        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209834:    7a00        .z      LDRB     r0,[r0,#8]
;;;329        T_GAP_CAUSE cause;
;;;330        cause = le_bond_delete_by_idx(conn_id);
        0x00209836:    f642bc99    B...    B        le_bond_delete_by_idx ; 0x4c16c
    uarttest
;;;331        return (T_USER_CMD_PARSE_RESULT)cause;
;;;332    }
;;;333    
;;;334    /**
;;;335     * @brief use for pcba autotest ble module uart test
;;;336     *
;;;337     * <b>Command table define</b>
;;;338     * \code{.c}
;;;339        {
;;;340            "uarttest",
;;;341            "uarttest\n\r",
;;;342            "for autotest uart port test\n\r",
;;;343            uarttest
;;;344    
;;;345        },
;;;346     * \endcode
;;;347     */
;;;348    static T_USER_CMD_PARSE_RESULT uarttest(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;349    {
        0x0020983a:    b510        ..      PUSH     {r4,lr}
;;;350    	data_uart_print("bt uart test ok\r\n");
        0x0020983c:    a0ba        ..      ADR      r0,{pc}+0x2ec ; 0x209b28
        0x0020983e:    f001fa5f    .._.    BL       data_uart_print ; 0x20ad00
;;;351         return (RESULT_SUCESS);
        0x00209842:    2000        .       MOVS     r0,#0
;;;352    }
        0x00209844:    bd10        ..      POP      {r4,pc}
    cmd_bondinfo
;;;353    
;;;354    
;;;355    /**
;;;356     * @brief Get all Bonded devices information
;;;357     *
;;;358     * <b>Command table define</b>
;;;359     * \code{.c}
;;;360        {
;;;361            "bondinfo",
;;;362            "bondinfo\n\r",
;;;363            "Get all Bonded devices information\n\r",
;;;364            cmd_bondinfo
;;;365        },
;;;366     * \endcode
;;;367     */
;;;368    static T_USER_CMD_PARSE_RESULT cmd_bondinfo(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;369    {
        0x00209846:    b57f        ..      PUSH     {r0-r6,lr}
        0x00209848:    2400        .$      MOVS     r4,#0
        0x0020984a:    4dbc        .M      LDR      r5,[pc,#752] ; [0x209b3c] = 0x202ebc
        0x0020984c:    e014        ..      B        0x209878 ; cmd_bondinfo + 50
;;;370        uint8_t i;
;;;371        T_LE_KEY_ENTRY *p_entry;
;;;372        for (i = 0; i < bond_storage_num; i++)
;;;373        {
;;;374            p_entry = le_find_key_entry_by_idx(i);
        0x0020984e:    4620         F      MOV      r0,r4
        0x00209850:    f646fd26    F.&.    BL       le_find_key_entry_by_idx ; 0x502a0
;;;375            if (p_entry != NULL)
        0x00209854:    b170        p.      CBZ      r0,0x209874 ; cmd_bondinfo + 46
;;;376            {
;;;377    #if 0        
;;;378                data_uart_print("bond_dev[%d]: bd 0x%02x%02x%02x%02x%02x%02x, addr_type %d, flags 0x%x\r\n",
;;;379                                p_entry->idx,
;;;380                                p_entry->remote_bd.addr[5],
;;;381                                p_entry->remote_bd.addr[4],
;;;382                                p_entry->remote_bd.addr[3],
;;;383                                p_entry->remote_bd.addr[2],
;;;384                                p_entry->remote_bd.addr[1],
;;;385                                p_entry->remote_bd.addr[0],
;;;386                                p_entry->remote_bd.remote_bd_type,
;;;387                                p_entry->flags);
;;;388    #else
;;;389    			data_uart_print("#bondinfo#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
        0x00209856:    7ac1        .z      LDRB     r1,[r0,#0xb]
        0x00209858:    7a06        .z      LDRB     r6,[r0,#8]
        0x0020985a:    7a43        Cz      LDRB     r3,[r0,#9]
        0x0020985c:    7a82        .z      LDRB     r2,[r0,#0xa]
        0x0020985e:    e88d004e    ..N.    STM      sp,{r1-r3,r6}
        0x00209862:    7b03        .{      LDRB     r3,[r0,#0xc]
        0x00209864:    7b42        B{      LDRB     r2,[r0,#0xd]
        0x00209866:    7841        Ax      LDRB     r1,[r0,#1]
        0x00209868:    a0b5        ..      ADR      r0,{pc}+0x2d8 ; 0x209b40
        0x0020986a:    f001fa49    ..I.    BL       data_uart_print ; 0x20ad00
;;;390    							p_entry->idx,
;;;391    							p_entry->remote_bd.addr[5],
;;;392    							p_entry->remote_bd.addr[4],
;;;393    							p_entry->remote_bd.addr[3],
;;;394    							p_entry->remote_bd.addr[2],
;;;395    							p_entry->remote_bd.addr[1],
;;;396    							p_entry->remote_bd.addr[0]);
;;;397    os_delay(100);
        0x0020986e:    2064        d       MOVS     r0,#0x64
        0x00209870:    f61cff7e    ..~.    BL       os_delay ; 0x26770
        0x00209874:    1c64        d.      ADDS     r4,r4,#1
        0x00209876:    b2e4        ..      UXTB     r4,r4
        0x00209878:    7828        (x      LDRB     r0,[r5,#0]
        0x0020987a:    4284        .B      CMP      r4,r0
        0x0020987c:    d3e7        ..      BCC      0x20984e ; cmd_bondinfo + 8
        0x0020987e:    b004        ..      ADD      sp,sp,#0x10
;;;398    #endif
;;;399            }
;;;400        }
;;;401    
;;;402    	//data_uart_print("#bondinfo#!0![112233445566]<Y>\r\n");
;;;403    	//data_uart_print("#bondinfo#!1![aabbccddeeff]<Y>\r\n");
;;;404    	//data_uart_print("#bondinfo#!2![001122334455]<Y>\r\n");
;;;405    
;;;406    
;;;407        return (RESULT_SUCESS);
        0x00209880:    2000        .       MOVS     r0,#0
;;;408    }
        0x00209882:    bd70        p.      POP      {r4-r6,pc}
    cmd_scan
;;;409    /************************** Central only *************************************/
;;;410    /**
;;;411     * @brief Start scan
;;;412     *
;;;413     * <b>Command table define</b>
;;;414     * \code{.c}
;;;415        {
;;;416            "scan",
;;;417            "scan [filter_policy] [filter_duplicate]\n\r",
;;;418            "Start scan\r\n\
;;;419            [filter_policy]: 0-(any), 1-(whitelist), 2-(any RPA), 3-(whitelist RPA) \r\n\
;;;420            [filter_duplicate]: 0-(disable), 1-(enable) \n\r",
;;;421            cmd_scan
;;;422        },
;;;423     * \endcode
;;;424     */
;;;425    static T_USER_CMD_PARSE_RESULT cmd_scan(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;426    {
        0x00209884:    b51c        ..      PUSH     {r2-r4,lr}
;;;427        T_GAP_CAUSE cause;
;;;428        uint8_t scan_filter_policy = GAP_SCAN_FILTER_ANY;
        0x00209886:    2100        .!      MOVS     r1,#0
        0x00209888:    f88d1000    ....    STRB     r1,[sp,#0]
;;;429        uint8_t scan_filter_duplicate = GAP_SCAN_FILTER_DUPLICATE_ENABLE;
        0x0020988c:    2101        .!      MOVS     r1,#1
        0x0020988e:    f88d1004    ....    STRB     r1,[sp,#4]
;;;430    
;;;431        if (p_parse_value->param_count > 0)
        0x00209892:    6841        Ah      LDR      r1,[r0,#4]
        0x00209894:    2900        .)      CMP      r1,#0
        0x00209896:    dd02        ..      BLE      0x20989e ; cmd_scan + 26
;;;432        {
;;;433            scan_filter_policy = p_parse_value->dw_param[0];
        0x00209898:    7a02        .z      LDRB     r2,[r0,#8]
        0x0020989a:    f88d2000    ...     STRB     r2,[sp,#0]
;;;434        }
;;;435        if (p_parse_value->param_count > 1)
        0x0020989e:    2901        .)      CMP      r1,#1
        0x002098a0:    dd02        ..      BLE      0x2098a8 ; cmd_scan + 36
;;;436        {
;;;437            scan_filter_duplicate = p_parse_value->dw_param[1];
        0x002098a2:    7b00        .{      LDRB     r0,[r0,#0xc]
        0x002098a4:    f88d0004    ....    STRB     r0,[sp,#4]
;;;438        }
;;;439    
;;;440        link_mgr_clear_device_list();
        0x002098a8:    f012fcb9    ....    BL       link_mgr_clear_device_list ; 0x21c21e
;;;441        le_scan_set_param(GAP_PARAM_SCAN_FILTER_POLICY, sizeof(scan_filter_policy),
        0x002098ac:    466a        jF      MOV      r2,sp
        0x002098ae:    2101        .!      MOVS     r1,#1
        0x002098b0:    f44f7011    O..p    MOV      r0,#0x244
        0x002098b4:    f648fd5e    H.^.    BL       le_scan_set_param ; 0x52374
;;;442                          &scan_filter_policy);
;;;443        le_scan_set_param(GAP_PARAM_SCAN_FILTER_DUPLICATES, sizeof(scan_filter_duplicate),
        0x002098b8:    aa01        ..      ADD      r2,sp,#4
        0x002098ba:    2101        .!      MOVS     r1,#1
        0x002098bc:    f2402045    @.E     MOV      r0,#0x245
        0x002098c0:    f648fd58    H.X.    BL       le_scan_set_param ; 0x52374
;;;444                          &scan_filter_duplicate);
;;;445        cause = le_scan_start();
        0x002098c4:    f648fdd6    H...    BL       le_scan_start ; 0x52474
;;;446        return (T_USER_CMD_PARSE_RESULT)cause;
;;;447    }
        0x002098c8:    bd1c        ..      POP      {r2-r4,pc}
    cmd_stopscan
;;;448    
;;;449    /**
;;;450     * @brief Stop scan
;;;451     *
;;;452     * <b>Command table define</b>
;;;453     * \code{.c}
;;;454        {
;;;455            "stopscan",
;;;456            "stopscan\n\r",
;;;457            "Stop scan\n\r",
;;;458            cmd_stopscan
;;;459        },
;;;460     * \endcode
;;;461     */
;;;462    static T_USER_CMD_PARSE_RESULT cmd_stopscan(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;463    {
;;;464        T_GAP_CAUSE cause;
;;;465        cause = le_scan_stop();
        0x002098ca:    f648be02    H...    B        le_scan_stop ; 0x524d2
    cmd_showdev
;;;466        return (T_USER_CMD_PARSE_RESULT)cause;
;;;467    }
;;;468    
;;;469    /**
;;;470     * @brief Show scan dev list: filter simple ble service
;;;471     *
;;;472     * <b>Command table define</b>
;;;473     * \code{.c}
;;;474        {
;;;475            "showdev",
;;;476            "showdev\n\r",
;;;477            "Show scan dev list: filter simple ble service\n\r",
;;;478            cmd_showdev
;;;479        },
;;;480     * \endcode
;;;481     */
;;;482    static T_USER_CMD_PARSE_RESULT cmd_showdev(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;483    {
        0x002098ce:    e92d41ff    -..A    PUSH     {r0-r8,lr}
        0x002098d2:    2500        .%      MOVS     r5,#0
        0x002098d4:    4fa6        .O      LDR      r7,[pc,#664] ; [0x209b70] = 0x20d1a5
        0x002098d6:    4ea7        .N      LDR      r6,[pc,#668] ; [0x209b74] = 0x20d1a4
        0x002098d8:    e015        ..      B        0x209906 ; cmd_showdev + 56
        0x002098da:    ebc500c5    ....    RSB      r0,r5,r5,LSL #3
        0x002098de:    19c4        ..      ADDS     r4,r0,r7
        0x002098e0:    5c39        9\      LDRB     r1,[r7,r0]
        0x002098e2:    78a2        .x      LDRB     r2,[r4,#2]
        0x002098e4:    7860        `x      LDRB     r0,[r4,#1]
        0x002098e6:    78e3        .x      LDRB     r3,[r4,#3]
        0x002098e8:    e9cd3200    ...2    STRD     r3,r2,[sp,#0]
        0x002098ec:    e9cd0102    ....    STRD     r0,r1,[sp,#8]
        0x002098f0:    7923        #y      LDRB     r3,[r4,#4]
        0x002098f2:    7962        by      LDRB     r2,[r4,#5]
        0x002098f4:    4629        )F      MOV      r1,r5
        0x002098f6:    a0a0        ..      ADR      r0,{pc}+0x282 ; 0x209b78
        0x002098f8:    f001fa02    ....    BL       data_uart_print ; 0x20ad00
        0x002098fc:    2064        d       MOVS     r0,#0x64
        0x002098fe:    f61cff37    ..7.    BL       os_delay ; 0x26770
        0x00209902:    1c6d        m.      ADDS     r5,r5,#1
;;;484        uint8_t i;
;;;485    #if 0 //by vsop	
;;;486        data_uart_print("Advertising and Scan response: filter uuid = 0xA00A dev list\r\n");
;;;487    #endif
;;;488        for (i = 0; i < dev_list_count; i++)
        0x00209904:    b2ed        ..      UXTB     r5,r5
        0x00209906:    7830        0x      LDRB     r0,[r6,#0]
        0x00209908:    4285        .B      CMP      r5,r0
        0x0020990a:    d3e6        ..      BCC      0x2098da ; cmd_showdev + 12
;;;489        {
;;;490    #if 0 //by vsop    
;;;491            data_uart_print("RemoteBd[%d] = [%02x:%02x:%02x:%02x:%02x:%02x] type = %d\r\n",
;;;492                            i,
;;;493                            dev_list[i].bd_addr[5], dev_list[i].bd_addr[4],
;;;494                            dev_list[i].bd_addr[3], dev_list[i].bd_addr[2],
;;;495                            dev_list[i].bd_addr[1], dev_list[i].bd_addr[0],
;;;496                            dev_list[i].bd_type);
;;;497    #else
;;;498    		data_uart_print("#showdev#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;499    						i,
;;;500    						dev_list[i].bd_addr[5], dev_list[i].bd_addr[4],
;;;501    						dev_list[i].bd_addr[3], dev_list[i].bd_addr[2],
;;;502    						dev_list[i].bd_addr[1], dev_list[i].bd_addr[0]);
;;;503    
;;;504    #endif
;;;505            if (dev_list[i].bd_type == GAP_REMOTE_ADDR_LE_RANDOM)
;;;506            {
;;;507                uint8_t addr = dev_list[i].bd_addr[5] & RANDOM_ADDR_MASK;
;;;508                if (addr == RANDOM_ADDR_MASK_STATIC)
;;;509                {
;;;510                    //data_uart_print("Static Random Addr\r\n");
;;;511                }
;;;512                else if (addr == RANDOM_ADDR_MASK_RESOLVABLE)
;;;513                {
;;;514                    //data_uart_print("Resolv Random Addr\r\n");
;;;515                }
;;;516                else if (addr == RANDOM_ADDR_MASK_NON_RESOLVABLE)
;;;517                {
;;;518                    //data_uart_print("Non-resolv Random Addr\r\n");
;;;519                }
;;;520                else
;;;521                {
;;;522                    //data_uart_print("Unknown Random Addr\r\n");
;;;523                }
;;;524            }
;;;525    				os_delay(100);
;;;526        }
;;;527    	if(dev_list_count==0)
        0x0020990c:    f0100fff    ....    TST      r0,#0xff
        0x00209910:    d102        ..      BNE      0x209918 ; cmd_showdev + 74
;;;528    	{
;;;529    		data_uart_print("#showdev#<Y>\r\n");
        0x00209912:    a0a5        ..      ADR      r0,{pc}+0x296 ; 0x209ba8
        0x00209914:    f001f9f4    ....    BL       data_uart_print ; 0x20ad00
        0x00209918:    b004        ..      ADD      sp,sp,#0x10
;;;530    	}
;;;531    
;;;532        return (RESULT_SUCESS);
        0x0020991a:    2000        .       MOVS     r0,#0
;;;533    }
        0x0020991c:    e8bd81f0    ....    POP      {r4-r8,pc}
    cmd_con
;;;534    
;;;535    /**
;;;536     * @brief Connect to remote device: use address
;;;537     *
;;;538     * <b>Command table define</b>
;;;539     * \code{.c}
;;;540        {
;;;541            "con",
;;;542            "con [BD0] [BD1] [BD2] [BD3] [BD4] [BD5] [addr_type]\n\r",
;;;543            "Connect to remote device: use address\r\n\
;;;544            [BD0] [BD1] [BD2] [BD3] [BD4] [BD5]: remote device address\r\n\
;;;545            [addr_type]: 0-(public), 1-(random)\r\n\
;;;546            sample: con x11 x22 x33 x44 x55 x66 0 \n\r",
;;;547            cmd_con
;;;548        },
;;;549     * \endcode
;;;550     */
;;;551    static T_USER_CMD_PARSE_RESULT cmd_con(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;552    {
        0x00209920:    b570        p.      PUSH     {r4-r6,lr}
        0x00209922:    4604        .F      MOV      r4,r0
        0x00209924:    b088        ..      SUB      sp,sp,#0x20
;;;553        T_GAP_CAUSE cause;
;;;554        uint8_t addr[6] = {0};
        0x00209926:    2000        .       MOVS     r0,#0
        0x00209928:    9006        ..      STR      r0,[sp,#0x18]
        0x0020992a:    2110        .!      MOVS     r1,#0x10
        0x0020992c:    f8ad1004    ....    STRH     r1,[sp,#4]
        0x00209930:    f8ad000c    ....    STRH     r0,[sp,#0xc]
        0x00209934:    9005        ..      STR      r0,[sp,#0x14]
;;;555        uint8_t addr_len;
;;;556        uint8_t addr_type = GAP_REMOTE_ADDR_LE_PUBLIC;
        0x00209936:    4605        .F      MOV      r5,r0
;;;557        T_GAP_LE_CONN_REQ_PARAM conn_req_param;
;;;558    
;;;559        conn_req_param.scan_interval = 0x10;
;;;560        conn_req_param.scan_window = 0x10;
        0x00209938:    f8ad1006    ....    STRH     r1,[sp,#6]
;;;561        conn_req_param.conn_interval_min = 80;
        0x0020993c:    2150        P!      MOVS     r1,#0x50
        0x0020993e:    209e        .       MOVS     r0,#0x9e
        0x00209940:    f8ad1008    ....    STRH     r1,[sp,#8]
        0x00209944:    f8ad0010    ....    STRH     r0,[sp,#0x10]
;;;562        conn_req_param.conn_interval_max = 80;
        0x00209948:    f8ad100a    ....    STRH     r1,[sp,#0xa]
;;;563        conn_req_param.conn_latency = 0;
;;;564        conn_req_param.supv_tout = 1000;
        0x0020994c:    f44f767a    O.zv    MOV      r6,#0x3e8
        0x00209950:    f8ad0012    ....    STRH     r0,[sp,#0x12]
        0x00209954:    f8ad600e    ...`    STRH     r6,[sp,#0xe]
;;;565        conn_req_param.ce_len_min = 2 * (conn_req_param.conn_interval_min - 1);
;;;566        conn_req_param.ce_len_max = 2 * (conn_req_param.conn_interval_max - 1);
;;;567        le_set_conn_param(GAP_CONN_PARAM_1M, &conn_req_param);
        0x00209958:    a901        ..      ADD      r1,sp,#4
        0x0020995a:    2000        .       MOVS     r0,#0
        0x0020995c:    f644f9b7    D...    BL       le_set_conn_param ; 0x4dcce
;;;568    
;;;569        for (addr_len = 0; addr_len < GAP_BD_ADDR_LEN; addr_len++)
        0x00209960:    2100        .!      MOVS     r1,#0
        0x00209962:    a805        ..      ADD      r0,sp,#0x14
        0x00209964:    f1c10205    ....    RSB      r2,r1,#5
        0x00209968:    eb040282    ....    ADD      r2,r4,r2,LSL #2
        0x0020996c:    7a12        .z      LDRB     r2,[r2,#8]
        0x0020996e:    5442        BT      STRB     r2,[r0,r1]
        0x00209970:    1c49        I.      ADDS     r1,r1,#1
        0x00209972:    b2c9        ..      UXTB     r1,r1
        0x00209974:    2906        .)      CMP      r1,#6
        0x00209976:    d3f5        ..      BCC      0x209964 ; cmd_con + 68
;;;570        {
;;;571            addr[addr_len] = p_parse_value->dw_param[GAP_BD_ADDR_LEN - addr_len - 1];
;;;572        }
;;;573        if (p_parse_value->param_count >= 7)
        0x00209978:    6860        `h      LDR      r0,[r4,#4]
        0x0020997a:    2807        .(      CMP      r0,#7
        0x0020997c:    db01        ..      BLT      0x209982 ; cmd_con + 98
;;;574        {
;;;575            addr_type = p_parse_value->dw_param[6];
        0x0020997e:    f8945020    .. P    LDRB     r5,[r4,#0x20]
;;;576        }
;;;577    
;;;578        cause = le_connect(GAP_PHYS_CONN_INIT_1M_BIT, addr, (T_GAP_REMOTE_ADDR_TYPE)addr_type,
        0x00209982:    2300        .#      MOVS     r3,#0
        0x00209984:    462a        *F      MOV      r2,r5
        0x00209986:    a905        ..      ADD      r1,sp,#0x14
        0x00209988:    2001        .       MOVS     r0,#1
        0x0020998a:    9600        ..      STR      r6,[sp,#0]
        0x0020998c:    f644f9f4    D...    BL       le_connect ; 0x4dd78
;;;579                           GAP_LOCAL_ADDR_LE_PUBLIC,
;;;580                           1000);
;;;581    
;;;582        return (T_USER_CMD_PARSE_RESULT)cause;
;;;583    }
        0x00209990:    b008        ..      ADD      sp,sp,#0x20
        0x00209992:    bd70        p.      POP      {r4-r6,pc}
    cmd_condev
;;;584    
;;;585    /**
;;;586     * @brief Connect to remote device: use showdev to show idx
;;;587     *
;;;588     * <b>Command table define</b>
;;;589     * \code{.c}
;;;590        {
;;;591            "condev",
;;;592            "condev [idx]\n\r",
;;;593            "Connect to remote device: use showdev to show idx\r\n\
;;;594            [idx]: use cmd showdev to show idx before use this cmd\r\n\
;;;595            sample: condev 0\n\r",
;;;596            cmd_condev
;;;597        },
;;;598     * \endcode
;;;599     */
;;;600    static T_USER_CMD_PARSE_RESULT cmd_condev(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;601    {
        0x00209994:    b530        0.      PUSH     {r4,r5,lr}
        0x00209996:    7a04        .z      LDRB     r4,[r0,#8]
        0x00209998:    4876        vH      LDR      r0,[pc,#472] ; [0x209b74] = 0x20d1a4
;;; ..\..\..\src\sample\ble_central\user_cmd.c (601)
        0x0020999a:    b085        ..      SUB      sp,sp,#0x14
        0x0020999c:    7800        .x      LDRB     r0,[r0,#0]
        0x0020999e:    4284        .B      CMP      r4,r0
        0x002099a0:    d225        %.      BCS      0x2099ee ; cmd_condev + 90
;;;602        uint8_t dev_idx = p_parse_value->dw_param[0];
;;;603        if (dev_idx < dev_list_count)
;;;604        {
;;;605            T_GAP_CAUSE cause;
;;;606            T_GAP_LE_CONN_REQ_PARAM conn_req_param;
;;;607    
;;;608            conn_req_param.scan_interval = 0x10;
        0x002099a2:    2010        .       MOVS     r0,#0x10
        0x002099a4:    f8ad0004    ....    STRH     r0,[sp,#4]
;;;609            conn_req_param.scan_window = 0x10;
        0x002099a8:    f8ad0006    ....    STRH     r0,[sp,#6]
;;;610            conn_req_param.conn_interval_min = 80;
        0x002099ac:    2050        P       MOVS     r0,#0x50
        0x002099ae:    f8ad0008    ....    STRH     r0,[sp,#8]
;;;611            conn_req_param.conn_interval_max = 80;
        0x002099b2:    f8ad000a    ....    STRH     r0,[sp,#0xa]
;;;612            conn_req_param.conn_latency = 0;
        0x002099b6:    2000        .       MOVS     r0,#0
        0x002099b8:    f8ad000c    ....    STRH     r0,[sp,#0xc]
        0x002099bc:    209e        .       MOVS     r0,#0x9e
        0x002099be:    f8ad0010    ....    STRH     r0,[sp,#0x10]
;;;613            conn_req_param.supv_tout = 1000;
        0x002099c2:    f44f757a    O.zu    MOV      r5,#0x3e8
        0x002099c6:    f8ad0012    ....    STRH     r0,[sp,#0x12]
        0x002099ca:    f8ad500e    ...P    STRH     r5,[sp,#0xe]
;;;614            conn_req_param.ce_len_min = 2 * (conn_req_param.conn_interval_min - 1);
;;;615            conn_req_param.ce_len_max = 2 * (conn_req_param.conn_interval_max - 1);
;;;616            le_set_conn_param(GAP_CONN_PARAM_1M, &conn_req_param);
        0x002099ce:    a901        ..      ADD      r1,sp,#4
        0x002099d0:    2000        .       MOVS     r0,#0
        0x002099d2:    f644f97c    D.|.    BL       le_set_conn_param ; 0x4dcce
;;;617            cause = le_connect(GAP_PHYS_CONN_INIT_1M_BIT,
        0x002099d6:    4866        fH      LDR      r0,[pc,#408] ; [0x209b70] = 0x20d1a5
        0x002099d8:    ebc401c4    ....    RSB      r1,r4,r4,LSL #3
        0x002099dc:    4401        .D      ADD      r1,r1,r0
        0x002099de:    9500        ..      STR      r5,[sp,#0]
        0x002099e0:    798a        .y      LDRB     r2,[r1,#6]
        0x002099e2:    2300        .#      MOVS     r3,#0
        0x002099e4:    2001        .       MOVS     r0,#1
        0x002099e6:    f644f9c7    D...    BL       le_connect ; 0x4dd78
        0x002099ea:    b005        ..      ADD      sp,sp,#0x14
        0x002099ec:    bd30        0.      POP      {r4,r5,pc}
;;;618                               dev_list[dev_idx].bd_addr,
;;;619                               (T_GAP_REMOTE_ADDR_TYPE)dev_list[dev_idx].bd_type,
;;;620                               GAP_LOCAL_ADDR_LE_PUBLIC,
;;;621                               1000);
;;;622            return (T_USER_CMD_PARSE_RESULT)cause;
;;;623        }
;;;624        else
;;;625        {
;;;626            return RESULT_ERR;
        0x002099ee:    2020                MOVS     r0,#0x20
;;;627        }
;;;628    }
        0x002099f0:    e7fb        ..      B        0x2099ea ; cmd_condev + 86
    cmd_gapread
;;;629    /************************** GATT client *************************************/
;;;630    /**
;;;631     * @brief Read GAP service characteristic value
;;;632     *
;;;633     * <b>Command table define</b>
;;;634     * \code{.c}
;;;635        {
;;;636            "gapread",
;;;637            "gapread [conn_id] [type]\n\r",
;;;638            "Read GAP service characteristic value\r\n\
;;;639            [type]: 0-(read device name), 1-(read appearance)\r\n\
;;;640            simple: gapread 0 0\n\r",
;;;641            cmd_gapread
;;;642        },
;;;643     * \endcode
;;;644     */
;;;645    static T_USER_CMD_PARSE_RESULT cmd_gapread(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;646    {
        0x002099f2:    b510        ..      PUSH     {r4,lr}
;;;647        uint8_t conn_id = p_parse_value->dw_param[0];
        0x002099f4:    7a02        .z      LDRB     r2,[r0,#8]
;;;648        T_GAPS_READ_TYPE read_type = (T_GAPS_READ_TYPE)p_parse_value->dw_param[1];
        0x002099f6:    7b01        .{      LDRB     r1,[r0,#0xc]
;;;649        bool ret = gaps_read(conn_id, read_type);
        0x002099f8:    4610        .F      MOV      r0,r2
        0x002099fa:    f7fffc4b    ..K.    BL       gaps_read ; 0x209294
;;;650        if (ret)
        0x002099fe:    b108        ..      CBZ      r0,0x209a04 ; cmd_gapread + 18
;;;651        {
;;;652            return (RESULT_SUCESS);
        0x00209a00:    2000        .       MOVS     r0,#0
        0x00209a02:    bd10        ..      POP      {r4,pc}
;;;653        }
;;;654        else
;;;655        {
;;;656            return (RESULT_ERR);
        0x00209a04:    2020                MOVS     r0,#0x20
;;;657        }
;;;658    }
        0x00209a06:    bd10        ..      POP      {r4,pc}
    cmd_gaphdl
;;;659    
;;;660    /**
;;;661     * @brief List GAP service handle cache
;;;662     *
;;;663     * <b>Command table define</b>
;;;664     * \code{.c}
;;;665        {
;;;666            "gaphdl",
;;;667            "gaphdl [conn_id]\n\r",
;;;668            "List GAP service handle cache\n\r",
;;;669            cmd_gaphdl
;;;670        },
;;;671     * \endcode
;;;672     */
;;;673    static T_USER_CMD_PARSE_RESULT cmd_gaphdl(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;674    {
        0x00209a08:    b50e        ..      PUSH     {r1-r3,lr}
;;;675        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209a0a:    7a00        .z      LDRB     r0,[r0,#8]
;;;676        uint16_t hdl_cache[HDL_GAPS_CACHE_LEN];
;;;677        uint8_t hdl_idx;
;;;678        bool ret = gaps_get_hdl_cache(conn_id, hdl_cache,
        0x00209a0c:    220c        ."      MOVS     r2,#0xc
        0x00209a0e:    4669        iF      MOV      r1,sp
        0x00209a10:    f7fffc7a    ..z.    BL       gaps_get_hdl_cache ; 0x209308
;;;679                                      sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;680    
;;;681        if (ret)
        0x00209a14:    b130        0.      CBZ      r0,0x209a24 ; cmd_gaphdl + 28
;;;682        {
;;;683            for (hdl_idx = HDL_GAPS_SRV_START; hdl_idx < HDL_GAPS_CACHE_LEN; hdl_idx++)
        0x00209a16:    2000        .       MOVS     r0,#0
        0x00209a18:    1c40        @.      ADDS     r0,r0,#1
        0x00209a1a:    b2c0        ..      UXTB     r0,r0
        0x00209a1c:    2806        .(      CMP      r0,#6
        0x00209a1e:    d3fb        ..      BCC      0x209a18 ; cmd_gaphdl + 16
;;;684            {
;;;685                //data_uart_print("-->Index %d -- Handle 0x%x\r\n", hdl_idx, hdl_cache[hdl_idx]);
;;;686            }
;;;687            return (RESULT_SUCESS);
        0x00209a20:    2000        .       MOVS     r0,#0
        0x00209a22:    bd0e        ..      POP      {r1-r3,pc}
;;;688        }
;;;689        else
;;;690        {
;;;691            return (RESULT_ERR);
        0x00209a24:    2020                MOVS     r0,#0x20
;;;692        }
;;;693    }
        0x00209a26:    bd0e        ..      POP      {r1-r3,pc}
    cmd_simpread
;;;694    
;;;695    /**
;;;696     * @brief Read simple ble service characteristic and descriptor value
;;;697     *
;;;698     * <b>Command table define</b>
;;;699     * \code{.c}
;;;700        {
;;;701            "simpread",
;;;702            "simpread [conn_id] [type] [pattern]\n\r",
;;;703            "Read simple ble service characteristic and descriptor value\r\n\
;;;704            [type]: 0-(read v1), 1-(v3 cccd), 2-(v4 cccd)\r\n\
;;;705            [pattern]: 0-(read by handle), 1-(read by uuid)\r\n\
;;;706            sample: simpread 0 1 0 \n\r",
;;;707            cmd_simpread
;;;708        },
;;;709     * \endcode
;;;710     */
;;;711    static T_USER_CMD_PARSE_RESULT cmd_simpread(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;712    {
        0x00209a28:    b510        ..      PUSH     {r4,lr}
;;;713        /* Indicate which char to be read. */
;;;714        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209a2a:    7a02        .z      LDRB     r2,[r0,#8]
;;;715        bool ret;
;;;716        T_SIMP_READ_TYPE read_type = (T_SIMP_READ_TYPE)p_parse_value->dw_param[1];
        0x00209a2c:    7b01        .{      LDRB     r1,[r0,#0xc]
;;;717        /* Read by handle or UUID, 1--by UUID, 0--by handle. */
;;;718        uint8_t read_pattern = (uint8_t)p_parse_value->dw_param[2];
        0x00209a2e:    7c00        .|      LDRB     r0,[r0,#0x10]
        0x00209a30:    f0100fff    ....    TST      r0,#0xff
;;;719    
;;;720        if (read_pattern)
;;;721        {
;;;722            ret = simp_ble_client_read_by_uuid(conn_id, read_type);
;;;723        }
;;;724        else
;;;725        {
;;;726            ret = simp_ble_client_read_by_handle(conn_id, read_type);
        0x00209a34:    4610        .F      MOV      r0,r2
        0x00209a36:    d002        ..      BEQ      0x209a3e ; cmd_simpread + 22
        0x00209a38:    f7fefd65    ..e.    BL       simp_ble_client_read_by_uuid ; 0x208506
        0x00209a3c:    e001        ..      B        0x209a42 ; cmd_simpread + 26
        0x00209a3e:    f7fefd0b    ....    BL       simp_ble_client_read_by_handle ; 0x208458
;;;727        }
;;;728    
;;;729        if (ret)
        0x00209a42:    b108        ..      CBZ      r0,0x209a48 ; cmd_simpread + 32
;;;730        {
;;;731            return (RESULT_SUCESS);
        0x00209a44:    2000        .       MOVS     r0,#0
        0x00209a46:    bd10        ..      POP      {r4,pc}
;;;732        }
;;;733        else
;;;734        {
;;;735            return (RESULT_ERR);
        0x00209a48:    2020                MOVS     r0,#0x20
;;;736        }
;;;737    }
        0x00209a4a:    bd10        ..      POP      {r4,pc}
    cmd_simpcccd
;;;738    
;;;739    /**
;;;740     * @brief Config simple ble service client characteristic configuration descriptor value
;;;741     *
;;;742     * <b>Command table define</b>
;;;743     * \code{.c}
;;;744        {
;;;745            "simpcccd",
;;;746            "simpcccd [conn_id] [type] [enable]\n\r",
;;;747            "Config simple ble service client characteristic configuration descriptor value\r\n\
;;;748            [type]: 0-(v3 notify), 1-(v4 indication)\r\n\
;;;749            [enable]: 0-(disable), 1-(enable) \r\n\
;;;750            sample: simpcccd 0 1 1\n\r",
;;;751            cmd_simpcccd
;;;752        },
;;;753     * \endcode
;;;754     */
;;;755    static T_USER_CMD_PARSE_RESULT cmd_simpcccd(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;756    {
        0x00209a4c:    b510        ..      PUSH     {r4,lr}
;;;757        /* Indicate which char CCCD command. */
;;;758        bool ret = false;
;;;759        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209a4e:    7a02        .z      LDRB     r2,[r0,#8]
;;;760        uint8_t type = p_parse_value->dw_param[1];
        0x00209a50:    7b03        .{      LDRB     r3,[r0,#0xc]
;;;761        /* Enable or disable, 1--enable, 0--disable. */
;;;762        bool cccd_data = (bool)p_parse_value->dw_param[2];
        0x00209a52:    6900        .i      LDR      r0,[r0,#0x10]
        0x00209a54:    b108        ..      CBZ      r0,0x209a5a ; cmd_simpcccd + 14
        0x00209a56:    2101        .!      MOVS     r1,#1
        0x00209a58:    e000        ..      B        0x209a5c ; cmd_simpcccd + 16
        0x00209a5a:    2100        .!      MOVS     r1,#0
;;;763    
;;;764        switch (type)
        0x00209a5c:    b113        ..      CBZ      r3,0x209a64 ; cmd_simpcccd + 24
        0x00209a5e:    2b01        .+      CMP      r3,#1
        0x00209a60:    d10a        ..      BNE      0x209a78 ; cmd_simpcccd + 44
        0x00209a62:    e003        ..      B        0x209a6c ; cmd_simpcccd + 32
;;;765        {
;;;766        case 0:/* V3 Notify char notif enable/disable. */
;;;767            ret = simp_ble_client_set_v3_notify(conn_id, cccd_data);
        0x00209a64:    4610        .F      MOV      r0,r2
        0x00209a66:    f7fefd9b    ....    BL       simp_ble_client_set_v3_notify ; 0x2085a0
;;;768            break;
        0x00209a6a:    e002        ..      B        0x209a72 ; cmd_simpcccd + 38
;;;769        case 1:/* V4 Indicate char indicate enable/disable. */
;;;770            ret = simp_ble_client_set_v4_ind(conn_id, cccd_data);
        0x00209a6c:    4610        .F      MOV      r0,r2
        0x00209a6e:    f7fefdd0    ....    BL       simp_ble_client_set_v4_ind ; 0x208612
;;;771            break;
;;;772        default:
;;;773            break;
;;;774        }
;;;775    
;;;776        if (ret)
        0x00209a72:    b108        ..      CBZ      r0,0x209a78 ; cmd_simpcccd + 44
;;;777        {
;;;778            return (RESULT_SUCESS);
        0x00209a74:    2000        .       MOVS     r0,#0
        0x00209a76:    bd10        ..      POP      {r4,pc}
;;;779        }
;;;780        else
;;;781        {
;;;782            return (RESULT_ERR);
        0x00209a78:    2020                MOVS     r0,#0x20
;;;783        }
;;;784    }
        0x00209a7a:    bd10        ..      POP      {r4,pc}
    cmd_simpwritev2
;;;785    
;;;786    /**
;;;787     * @brief Write simple ble service V2 characteristic value
;;;788     *
;;;789     * <b>Command table define</b>
;;;790     * \code{.c}
;;;791        {
;;;792            "simpwritev2",
;;;793            "simpwritev2 [conn_id] [type] [len]\n\r",
;;;794            "Write simple ble service V2 characteristic value\r\n\
;;;795            [type]: 1-(write request), 2-(write command) \r\n\
;;;796            [len]: type=1 len range:0-270, type=2 len range: 0-(mtu-3)\r\n\
;;;797            sample: simpwritev2 0 1 10\n\r",
;;;798            cmd_simpwritev2
;;;799        },
;;;800     * \endcode
;;;801     */
;;;802    static T_USER_CMD_PARSE_RESULT cmd_simpwritev2(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;803    {
        0x00209a7c:    b5fe        ..      PUSH     {r1-r7,lr}
        0x00209a7e:    7b03        .{      LDRB     r3,[r0,#0xc]
;;;804        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209a80:    7a06        .z      LDRB     r6,[r0,#8]
;;;805        T_GATT_WRITE_TYPE write_type = (T_GATT_WRITE_TYPE)p_parse_value->dw_param[1];
;;;806    	uint8_t data[12];
;;;807    	uint8_t length = 12;
        0x00209a82:    210c        .!      MOVS     r1,#0xc
;;;808    	uint8_t i;
;;;809    
;;;810    	if (write_type > GATT_WRITE_TYPE_CMD)
        0x00209a84:    2b02        .+      CMP      r3,#2
        0x00209a86:    d818        ..      BHI      0x209aba ; cmd_simpwritev2 + 62
;;;811    	{
;;;812    		return (RESULT_ERR);
;;;813    	}
;;;814    
;;;815    	if (p_parse_value->param_count > 2)
        0x00209a88:    6842        Bh      LDR      r2,[r0,#4]
        0x00209a8a:    2a02        .*      CMP      r2,#2
        0x00209a8c:    dd03        ..      BLE      0x209a96 ; cmd_simpwritev2 + 26
;;;816    	{
;;;817    		length = p_parse_value->dw_param[2];
        0x00209a8e:    7c01        .|      LDRB     r1,[r0,#0x10]
;;;818    		if (length > 12)
        0x00209a90:    290c        .)      CMP      r1,#0xc
        0x00209a92:    d900        ..      BLS      0x209a96 ; cmd_simpwritev2 + 26
;;;819    		{
;;;820    			length = 12;
        0x00209a94:    210c        .!      MOVS     r1,#0xc
;;;821    		}
;;;822    	}
;;;823    	
;;;824    	
;;;825        for (i = 0; i < length; i++)
        0x00209a96:    2200        ."      MOVS     r2,#0
        0x00209a98:    466c        lF      MOV      r4,sp
        0x00209a9a:    e005        ..      B        0x209aa8 ; cmd_simpwritev2 + 44
        0x00209a9c:    eb000582    ....    ADD      r5,r0,r2,LSL #2
        0x00209aa0:    7d2d        -}      LDRB     r5,[r5,#0x14]
        0x00209aa2:    54a5        .T      STRB     r5,[r4,r2]
        0x00209aa4:    1c52        R.      ADDS     r2,r2,#1
        0x00209aa6:    b2d2        ..      UXTB     r2,r2
        0x00209aa8:    428a        .B      CMP      r2,r1
        0x00209aaa:    d3f7        ..      BCC      0x209a9c ; cmd_simpwritev2 + 32
;;;826        {
;;;827            data[i] = p_parse_value->dw_param[3+i];
;;;828        }
;;;829    
;;;830        if (simp_ble_client_write_v2_char(conn_id, length, data, write_type))
        0x00209aac:    4622        "F      MOV      r2,r4
        0x00209aae:    4630        0F      MOV      r0,r6
        0x00209ab0:    f7fefded    ....    BL       simp_ble_client_write_v2_char ; 0x20868e
        0x00209ab4:    b108        ..      CBZ      r0,0x209aba ; cmd_simpwritev2 + 62
;;;831        {
;;;832            return (RESULT_SUCESS);
        0x00209ab6:    2000        .       MOVS     r0,#0
        0x00209ab8:    bdfe        ..      POP      {r1-r7,pc}
;;;833        }
;;;834        else
;;;835        {
;;;836            return (RESULT_ERR);
        0x00209aba:    2020                MOVS     r0,#0x20
;;;837        }
;;;838    }
        0x00209abc:    bdfe        ..      POP      {r1-r7,pc}
    cmd_simphdl
;;;839    
;;;840    /**
;;;841     * @brief List simple ble service handle cache
;;;842     *
;;;843     * <b>Command table define</b>
;;;844     * \code{.c}
;;;845        {
;;;846            "simphdl",
;;;847            "simphdl [conn_id]\n\r",
;;;848            "List simple ble service handle cache\n\r",
;;;849            cmd_simphdl
;;;850        },
;;;851     * \endcode
;;;852     */
;;;853    static T_USER_CMD_PARSE_RESULT cmd_simphdl(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;854    {
        0x00209abe:    b51f        ..      PUSH     {r0-r4,lr}
;;;855        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209ac0:    7a00        .z      LDRB     r0,[r0,#8]
;;;856        uint16_t hdl_cache[HDL_SIMBLE_CACHE_LEN];
;;;857        uint8_t hdl_idx;
;;;858        bool ret = simp_ble_client_get_hdl_cache(conn_id, hdl_cache,
        0x00209ac2:    2210        ."      MOVS     r2,#0x10
        0x00209ac4:    4669        iF      MOV      r1,sp
        0x00209ac6:    f7fefe0b    ....    BL       simp_ble_client_get_hdl_cache ; 0x2086e0
;;;859                                                 sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN);
;;;860    
;;;861        if (ret)
        0x00209aca:    b138        8.      CBZ      r0,0x209adc ; cmd_simphdl + 30
;;;862        {
;;;863            for (hdl_idx = HDL_SIMBLE_SRV_START; hdl_idx < HDL_SIMBLE_CACHE_LEN; hdl_idx++)
        0x00209acc:    2000        .       MOVS     r0,#0
        0x00209ace:    1c40        @.      ADDS     r0,r0,#1
        0x00209ad0:    b2c0        ..      UXTB     r0,r0
        0x00209ad2:    2808        .(      CMP      r0,#8
        0x00209ad4:    d3fb        ..      BCC      0x209ace ; cmd_simphdl + 16
;;;864            {
;;;865                //data_uart_print("-->Index %d -- Handle 0x%x\r\n", hdl_idx, hdl_cache[hdl_idx]);
;;;866            }
;;;867            return (RESULT_SUCESS);
        0x00209ad6:    2000        .       MOVS     r0,#0
        0x00209ad8:    b004        ..      ADD      sp,sp,#0x10
        0x00209ada:    bd10        ..      POP      {r4,pc}
;;;868        }
;;;869        else
;;;870        {
;;;871            return (RESULT_ERR);
        0x00209adc:    2020                MOVS     r0,#0x20
;;;872        }
;;;873    }
        0x00209ade:    e7fb        ..      B        0x209ad8 ; cmd_simphdl + 26
    cmd_basread
;;;874    
;;;875    /**
;;;876     * @brief Read battery service characteristic and descriptor value
;;;877     *
;;;878     * <b>Command table define</b>
;;;879     * \code{.c}
;;;880        {
;;;881            "basread",
;;;882            "basread [conn_id] [type]\n\r",
;;;883            "Read battery service characteristic and descriptor value\r\n\
;;;884            [type]: 0-(battery level value), 1-(battery cccd)\r\n\
;;;885            sample: basread 0 1 \n\r",
;;;886            cmd_basread
;;;887        },
;;;888     * \endcode
;;;889     */
;;;890    static T_USER_CMD_PARSE_RESULT cmd_basread(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;891    {
        0x00209ae0:    b510        ..      PUSH     {r4,lr}
        0x00209ae2:    4601        .F      MOV      r1,r0
        0x00209ae4:    7a00        .z      LDRB     r0,[r0,#8]
        0x00209ae6:    68c9        .h      LDR      r1,[r1,#0xc]
;;; ..\..\..\src\sample\ble_central\user_cmd.c (891)
        0x00209ae8:    b111        ..      CBZ      r1,0x209af0 ; cmd_basread + 16
        0x00209aea:    2901        .)      CMP      r1,#1
        0x00209aec:    d067        g.      BEQ      0x209bbe ; cmd_basread + 222
        0x00209aee:    e06b        k.      B        0x209bc8 ; cmd_basread + 232
        0x00209af0:    e062        b.      B        0x209bb8 ; cmd_basread + 216
        0x00209af2:    e064        d.      B        0x209bbe ; cmd_basread + 222
    $d
        0x00209af4:    6f687323    #sho    DCD    1869116195
        0x00209af8:    6e6f6377    wcon    DCD    1852793719
        0x00209afc:    64252123    #!%d    DCD    1680154915
        0x00209b00:    30255b21    ![%0    DCD    807754529
        0x00209b04:    30257832    2x%0    DCD    807761970
        0x00209b08:    30257832    2x%0    DCD    807761970
        0x00209b0c:    30257832    2x%0    DCD    807761970
        0x00209b10:    30257832    2x%0    DCD    807761970
        0x00209b14:    30257832    2x%0    DCD    807761970
        0x00209b18:    3c5d7832    2x]<    DCD    1012758578
        0x00209b1c:    0a0d3e59    Y>..    DCD    168640089
        0x00209b20:    00000000    ....    DCD    0
        0x00209b24:    000f423f    ?B..    DCD    999999
        0x00209b28:    75207462    bt u    DCD    1965061218
        0x00209b2c:    20747261    art     DCD    544502369
        0x00209b30:    74736574    test    DCD    1953719668
        0x00209b34:    0d6b6f20     ok.    DCD    225144608
        0x00209b38:    0000000a    ....    DCD    10
        0x00209b3c:    00202ebc    .. .    DCD    2109116
        0x00209b40:    6e6f6223    #bon    DCD    1852793379
        0x00209b44:    666e6964    dinf    DCD    1718511972
        0x00209b48:    2521236f    o#!%    DCD    622928751
        0x00209b4c:    255b2164    d![%    DCD    626729316
        0x00209b50:    25783230    02x%    DCD    628634160
        0x00209b54:    25783230    02x%    DCD    628634160
        0x00209b58:    25783230    02x%    DCD    628634160
        0x00209b5c:    25783230    02x%    DCD    628634160
        0x00209b60:    25783230    02x%    DCD    628634160
        0x00209b64:    5d783230    02x]    DCD    1568158256
        0x00209b68:    0d3e593c    <Y>.    DCD    222189884
        0x00209b6c:    0000000a    ....    DCD    10
        0x00209b70:    0020d1a5    .. .    DCD    2150821
        0x00209b74:    0020d1a4    .. .    DCD    2150820
        0x00209b78:    6f687323    #sho    DCD    1869116195
        0x00209b7c:    76656477    wdev    DCD    1986356343
        0x00209b80:    64252123    #!%d    DCD    1680154915
        0x00209b84:    30255b21    ![%0    DCD    807754529
        0x00209b88:    30257832    2x%0    DCD    807761970
        0x00209b8c:    30257832    2x%0    DCD    807761970
        0x00209b90:    30257832    2x%0    DCD    807761970
        0x00209b94:    30257832    2x%0    DCD    807761970
        0x00209b98:    30257832    2x%0    DCD    807761970
        0x00209b9c:    3c5d7832    2x]<    DCD    1012758578
        0x00209ba0:    0a0d3e59    Y>..    DCD    168640089
        0x00209ba4:    00000000    ....    DCD    0
        0x00209ba8:    6f687323    #sho    DCD    1869116195
        0x00209bac:    76656477    wdev    DCD    1986356343
        0x00209bb0:    3e593c23    #<Y>    DCD    1046035491
        0x00209bb4:    00000a0d    ....    DCD    2573
    $t
;;;892        uint8_t conn_id = p_parse_value->dw_param[0];
;;;893        bool ret = false;
;;;894        if (p_parse_value->dw_param[1] == 0)
;;;895        {
;;;896            ret = bas_read_battery_level(conn_id);
        0x00209bb8:    f7fff8a4    ....    BL       bas_read_battery_level ; 0x208d04
        0x00209bbc:    e001        ..      B        0x209bc2 ; cmd_basread + 226
;;;897        }
;;;898        else if (p_parse_value->dw_param[1] == 1)
;;;899        {
;;;900            ret = bas_read_notify(conn_id);
        0x00209bbe:    f7fff8f8    ....    BL       bas_read_notify ; 0x208db2
;;;901        }
;;;902    
;;;903        if (ret)
        0x00209bc2:    b108        ..      CBZ      r0,0x209bc8 ; cmd_basread + 232
;;;904        {
;;;905            return (RESULT_SUCESS);
        0x00209bc4:    2000        .       MOVS     r0,#0
        0x00209bc6:    bd10        ..      POP      {r4,pc}
;;;906        }
;;;907        else
;;;908        {
;;;909            return (RESULT_ERR);
        0x00209bc8:    2020                MOVS     r0,#0x20
;;;910        }
;;;911    }
        0x00209bca:    bd10        ..      POP      {r4,pc}
    cmd_bascccd
;;;912    
;;;913    /**
;;;914     * @brief Config battery service client characteristic configuration descriptor value
;;;915     *
;;;916     * <b>Command table define</b>
;;;917     * \code{.c}
;;;918        {
;;;919            "bascccd",
;;;920            "bascccd [conn_id] [notify]\n\r",
;;;921            "Config battery service client characteristic configuration descriptor value\r\n\
;;;922            [notify]: 0-(disable), 1-(enable)\n\r",
;;;923            cmd_bascccd
;;;924        },
;;;925     * \endcode
;;;926     */
;;;927    static T_USER_CMD_PARSE_RESULT cmd_bascccd(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;928    {
        0x00209bcc:    b510        ..      PUSH     {r4,lr}
        0x00209bce:    7a02        .z      LDRB     r2,[r0,#8]
        0x00209bd0:    68c0        .h      LDR      r0,[r0,#0xc]
;;; ..\..\..\src\sample\ble_central\user_cmd.c (928)
        0x00209bd2:    b108        ..      CBZ      r0,0x209bd8 ; cmd_bascccd + 12
;;;929        uint8_t conn_id = p_parse_value->dw_param[0];
;;;930        bool notify = p_parse_value->dw_param[1];
        0x00209bd4:    2101        .!      MOVS     r1,#1
        0x00209bd6:    e000        ..      B        0x209bda ; cmd_bascccd + 14
        0x00209bd8:    2100        .!      MOVS     r1,#0
;;;931        bool ret;
;;;932        ret = bas_set_notify(conn_id, notify);
        0x00209bda:    4610        .F      MOV      r0,r2
        0x00209bdc:    f7fff8b7    ....    BL       bas_set_notify ; 0x208d4e
;;;933    
;;;934        if (ret)
        0x00209be0:    b108        ..      CBZ      r0,0x209be6 ; cmd_bascccd + 26
;;;935        {
;;;936            return (RESULT_SUCESS);
        0x00209be2:    2000        .       MOVS     r0,#0
        0x00209be4:    bd10        ..      POP      {r4,pc}
;;;937        }
;;;938        else
;;;939        {
;;;940            return (RESULT_ERR);
        0x00209be6:    2020                MOVS     r0,#0x20
;;;941        }
;;;942    }
        0x00209be8:    bd10        ..      POP      {r4,pc}
    cmd_bashdl
;;;943    
;;;944    /**
;;;945     * @brief List battery service handle cache
;;;946     *
;;;947     * <b>Command table define</b>
;;;948     * \code{.c}
;;;949        {
;;;950            "bashdl",
;;;951            "bashdl [conn_id]\n\r",
;;;952            "List battery service handle cache\n\r",
;;;953            cmd_bashdl
;;;954        },
;;;955     * \endcode
;;;956     */
;;;957    static T_USER_CMD_PARSE_RESULT cmd_bashdl(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;958    {
        0x00209bea:    b51c        ..      PUSH     {r2-r4,lr}
;;;959        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209bec:    7a00        .z      LDRB     r0,[r0,#8]
;;;960        uint16_t hdl_cache[HDL_BAS_CACHE_LEN];
;;;961        uint8_t hdl_idx;
;;;962        bool ret = bas_get_hdl_cache(conn_id, hdl_cache,
        0x00209bee:    2208        ."      MOVS     r2,#8
        0x00209bf0:    4669        iF      MOV      r1,sp
        0x00209bf2:    f7fff902    ....    BL       bas_get_hdl_cache ; 0x208dfa
;;;963                                     sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;964    
;;;965        if (ret)
        0x00209bf6:    b130        0.      CBZ      r0,0x209c06 ; cmd_bashdl + 28
;;;966        {
;;;967            for (hdl_idx = HDL_BAS_SRV_START; hdl_idx < HDL_BAS_CACHE_LEN; hdl_idx++)
        0x00209bf8:    2000        .       MOVS     r0,#0
        0x00209bfa:    1c40        @.      ADDS     r0,r0,#1
        0x00209bfc:    b2c0        ..      UXTB     r0,r0
        0x00209bfe:    2804        .(      CMP      r0,#4
        0x00209c00:    d3fb        ..      BCC      0x209bfa ; cmd_bashdl + 16
;;;968            {
;;;969                //data_uart_print("-->Index %d -- Handle 0x%x\r\n", hdl_idx, hdl_cache[hdl_idx]);
;;;970            }
;;;971            return (RESULT_SUCESS);
        0x00209c02:    2000        .       MOVS     r0,#0
        0x00209c04:    bd1c        ..      POP      {r2-r4,pc}
;;;972        }
;;;973        else
;;;974        {
;;;975            return (RESULT_ERR);
        0x00209c06:    2020                MOVS     r0,#0x20
;;;976        }
;;;977    }
        0x00209c08:    bd1c        ..      POP      {r2-r4,pc}
        0x00209c0a:    0000        ..      MOVS     r0,r0
    .text
    app_main_task
;;; ..\..\..\src\sample\ble_central\app_task.c
;;;75     {
        0x00209c0c:    b51f        ..      PUSH     {r0-r4,lr}
;;;76         uint8_t event;
;;;77     
;;;78         os_msg_queue_create(&io_queue_handle, MAX_NUMBER_OF_IO_MESSAGE, sizeof(T_IO_MSG));
        0x00209c0e:    204e        N       MOVS     r0,#0x4e
        0x00209c10:    9000        ..      STR      r0,[sp,#0]
        0x00209c12:    4b2a        *K      LDR      r3,[pc,#168] ; [0x209cbc] = 0x20be34
        0x00209c14:    2208        ."      MOVS     r2,#8
        0x00209c16:    2120         !      MOVS     r1,#0x20
        0x00209c18:    4829        )H      LDR      r0,[pc,#164] ; [0x209cc0] = 0x20d19c
        0x00209c1a:    f61cf96b    ..k.    BL       os_msg_queue_create_intern ; 0x25ef4
;;;79         os_msg_queue_create(&evt_queue_handle, MAX_NUMBER_OF_EVENT_MESSAGE, sizeof(uint8_t));
        0x00209c1e:    204f        O       MOVS     r0,#0x4f
        0x00209c20:    9000        ..      STR      r0,[sp,#0]
        0x00209c22:    4827        'H      LDR      r0,[pc,#156] ; [0x209cc0] = 0x20d19c
        0x00209c24:    4b25        %K      LDR      r3,[pc,#148] ; [0x209cbc] = 0x20be34
        0x00209c26:    2201        ."      MOVS     r2,#1
        0x00209c28:    2140        @!      MOVS     r1,#0x40
        0x00209c2a:    1f00        ..      SUBS     r0,r0,#4
        0x00209c2c:    f61cf962    ..b.    BL       os_msg_queue_create_intern ; 0x25ef4
;;;80     
;;;81         gap_start_bt_stack(evt_queue_handle, io_queue_handle, MAX_NUMBER_OF_GAP_MESSAGE);
        0x00209c30:    4c23        #L      LDR      r4,[pc,#140] ; [0x209cc0] = 0x20d19c
        0x00209c32:    2220         "      MOVS     r2,#0x20
        0x00209c34:    3c08        .<      SUBS     r4,r4,#8
        0x00209c36:    e9d40101    ....    LDRD     r0,r1,[r4,#4]
        0x00209c3a:    f642f916    B...    BL       gap_start_bt_stack ; 0x4be6a
        0x00209c3e:    e9d40101    ....    LDRD     r0,r1,[r4,#4]
;;;82     
;;;83         data_uart_init(evt_queue_handle, io_queue_handle);
        0x00209c42:    f001f8a6    ....    BL       data_uart_init ; 0x20ad92
;;;84         user_cmd_init(&user_cmd_if, "central-vsop");
        0x00209c46:    a11f        ..      ADR      r1,{pc}+0x7e ; 0x209cc4
        0x00209c48:    4822        "H      LDR      r0,[pc,#136] ; [0x209cd4] = 0x20cff0
        0x00209c4a:    f001fbd8    ....    BL       user_cmd_init ; 0x20b3fe
;;;85     	APP_PRINT_INFO0("app_main_task by vsop enter");
        0x00209c4e:    2200        ."      MOVS     r2,#0
        0x00209c50:    4921        !I      LDR      r1,[pc,#132] ; [0x209cd8] = 0x88015e8
        0x00209c52:    4822        "H      LDR      r0,[pc,#136] ; [0x209cdc] = 0x21103002
        0x00209c54:    f5fdff03    ....    BL       log_buffer ; 0x7a5e
;;;86     
;;;87         driver_init();
        0x00209c58:    f000ff73    ..s.    BL       driver_init ; 0x20ab42
;;;88         while (true)
;;;89         {
;;;90             if (os_msg_recv(evt_queue_handle, &event, 0xFFFFFFFF) == true)
        0x00209c5c:    255a        Z%      MOVS     r5,#0x5a
        0x00209c5e:    f04f37ff    O..7    MOV      r7,#0xffffffff
        0x00209c62:    265f        _&      MOVS     r6,#0x5f
        0x00209c64:    9500        ..      STR      r5,[sp,#0]
        0x00209c66:    4b15        .K      LDR      r3,[pc,#84] ; [0x209cbc] = 0x20be34
        0x00209c68:    463a        :F      MOV      r2,r7
        0x00209c6a:    a903        ..      ADD      r1,sp,#0xc
        0x00209c6c:    6860        `h      LDR      r0,[r4,#4]
        0x00209c6e:    f61cf9e9    ....    BL       os_msg_recv_intern ; 0x26044
        0x00209c72:    2800        .(      CMP      r0,#0
        0x00209c74:    d0f6        ..      BEQ      0x209c64 ; app_main_task + 88
;;;91             {
;;;92                 if (event == EVENT_IO_TO_APP)
        0x00209c76:    f89d000c    ....    LDRB     r0,[sp,#0xc]
        0x00209c7a:    2802        .(      CMP      r0,#2
        0x00209c7c:    d002        ..      BEQ      0x209c84 ; app_main_task + 120
        0x00209c7e:    f642f961    B.a.    BL       gap_handle_msg ; 0x4bf44
        0x00209c82:    e7ef        ..      B        0x209c64 ; app_main_task + 88
;;;93                 {
;;;94                     T_IO_MSG io_msg;
;;;95                     if (os_msg_recv(io_queue_handle, &io_msg, 0) == true)
        0x00209c84:    9600        ..      STR      r6,[sp,#0]
        0x00209c86:    4b0d        .K      LDR      r3,[pc,#52] ; [0x209cbc] = 0x20be34
        0x00209c88:    2200        ."      MOVS     r2,#0
        0x00209c8a:    a901        ..      ADD      r1,sp,#4
        0x00209c8c:    68a0        .h      LDR      r0,[r4,#8]
        0x00209c8e:    f61cf9d9    ....    BL       os_msg_recv_intern ; 0x26044
        0x00209c92:    2800        .(      CMP      r0,#0
        0x00209c94:    d0e6        ..      BEQ      0x209c64 ; app_main_task + 88
        0x00209c96:    e9dd0101    ....    LDRD     r0,r1,[sp,#4]
;;;96                     {
;;;97                         app_handle_io_msg(io_msg);
        0x00209c9a:    f000fa83    ....    BL       app_handle_io_msg ; 0x20a1a4
        0x00209c9e:    e7e1        ..      B        0x209c64 ; app_main_task + 88
    app_task_init
        0x00209ca0:    b51c        ..      PUSH     {r2-r4,lr}
;;; ..\..\..\src\sample\ble_central\app_task.c (65)
        0x00209ca2:    2101        .!      MOVS     r1,#1
        0x00209ca4:    0288        ..      LSLS     r0,r1,#10
        0x00209ca6:    2300        .#      MOVS     r3,#0
        0x00209ca8:    f2af029f    ....    ADR      r2,{pc}-0x9b ; 0x209c0d
        0x00209cac:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x00209cb0:    4803        .H      LDR      r0,[pc,#12] ; [0x209cc0] = 0x20d19c
        0x00209cb2:    a10b        ..      ADR      r1,{pc}+0x2e ; 0x209ce0
        0x00209cb4:    3808        .8      SUBS     r0,r0,#8
        0x00209cb6:    f61cfe8b    ....    BL       os_task_create ; 0x269d0
;;;66                        APP_TASK_PRIORITY);
;;;67     }
        0x00209cba:    bd1c        ..      POP      {r2-r4,pc}
    $d
        0x00209cbc:    0020be34    4. .    DCD    2145844
        0x00209cc0:    0020d19c    .. .    DCD    2150812
        0x00209cc4:    746e6563    cent    DCD    1953391971
        0x00209cc8:    2d6c6172    ral-    DCD    762077554
        0x00209ccc:    706f7376    vsop    DCD    1886352246
        0x00209cd0:    00000000    ....    DCD    0
        0x00209cd4:    0020cff0    .. .    DCD    2150384
        0x00209cd8:    088015e8    ....    DCD    142611944
        0x00209cdc:    21103002    .0.!    DCD    554708994
        0x00209ce0:    00707061    app.    DCD    7368801
    $t
    .text
    app_handle_authen_state_evt
;;; ..\..\..\src\sample\ble_central\central_app.c
;;;223    {
        0x00209ce4:    e92d41ff    -..A    PUSH     {r0-r8,lr}
        0x00209ce8:    4efa        .N      LDR      r6,[pc,#1000] ; [0x20a0d4] = 0x21103002
;;; ..\..\..\src\sample\ble_central\central_app.c (223)
        0x00209cea:    4614        .F      MOV      r4,r2
        0x00209cec:    460f        .F      MOV      r7,r1
        0x00209cee:    4605        .F      MOV      r5,r0
;;;224        APP_PRINT_INFO2("app_handle_authen_state_evt:conn_id %d, cause 0x%x", conn_id, cause);
        0x00209cf0:    4603        .F      MOV      r3,r0
        0x00209cf2:    9200        ..      STR      r2,[sp,#0]
        0x00209cf4:    2202        ."      MOVS     r2,#2
        0x00209cf6:    49f6        .I      LDR      r1,[pc,#984] ; [0x20a0d0] = 0x8801724
        0x00209cf8:    4630        0F      MOV      r0,r6
        0x00209cfa:    f5fdfeb0    ....    BL       log_buffer ; 0x7a5e
;;;225    
;;;226        switch (new_state)
        0x00209cfe:    b157        W.      CBZ      r7,0x209d16 ; app_handle_authen_state_evt + 50
        0x00209d00:    2f01        ./      CMP      r7,#1
        0x00209d02:    d00c        ..      BEQ      0x209d1e ; app_handle_authen_state_evt + 58
        0x00209d04:    2201        ."      MOVS     r2,#1
        0x00209d06:    b004        ..      ADD      sp,sp,#0x10
        0x00209d08:    463b        ;F      MOV      r3,r7
        0x00209d0a:    1eb0        ..      SUBS     r0,r6,#2
        0x00209d0c:    e8bd41f0    ...A    POP      {r4-r8,lr}
        0x00209d10:    49f1        .I      LDR      r1,[pc,#964] ; [0x20a0d8] = 0x8801828
        0x00209d12:    f5fdbea4    ....    B        log_buffer ; 0x7a5e
;;;227        {
;;;228        case GAP_AUTHEN_STATE_STARTED:
;;;229            {
;;;230                APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_STARTED");
        0x00209d16:    49ee        .I      LDR      r1,[pc,#952] ; [0x20a0d0] = 0x8801724
        0x00209d18:    2200        ."      MOVS     r2,#0
        0x00209d1a:    3138        81      ADDS     r1,r1,#0x38
;;;231            }
;;;232            break;
        0x00209d1c:    e015        ..      B        0x209d4a ; app_handle_authen_state_evt + 102
        0x00209d1e:    48ef        .H      LDR      r0,[pc,#956] ; [0x20a0dc] = 0x20d1cf
        0x00209d20:    eb050185    ....    ADD      r1,r5,r5,LSL #2
        0x00209d24:    eb000141    ..A.    ADD      r1,r0,r1,LSL #1
;;;233    
;;;234        case GAP_AUTHEN_STATE_COMPLETE:
;;;235            {
;;;236                if (cause == GAP_SUCCESS)
        0x00209d28:    2c00        .,      CMP      r4,#0
        0x00209d2a:    79c8        .y      LDRB     r0,[r1,#7]
        0x00209d2c:    790c        .y      LDRB     r4,[r1,#4]
        0x00209d2e:    794b        Ky      LDRB     r3,[r1,#5]
        0x00209d30:    798a        .y      LDRB     r2,[r1,#6]
        0x00209d32:    e88d001d    ....    STM      sp,{r0,r2-r4}
        0x00209d36:    7a0b        .z      LDRB     r3,[r1,#8]
        0x00209d38:    7a4a        Jz      LDRB     r2,[r1,#9]
        0x00209d3a:    4629        )F      MOV      r1,r5
        0x00209d3c:    d00b        ..      BEQ      0x209d56 ; app_handle_authen_state_evt + 114
        0x00209d3e:    a0e8        ..      ADR      r0,{pc}+0x3a2 ; 0x20a0e0
        0x00209d40:    f000ffde    ....    BL       data_uart_print ; 0x20ad00
        0x00209d44:    49e4        .I      LDR      r1,[pc,#912] ; [0x20a0d8] = 0x8801828
        0x00209d46:    2200        ."      MOVS     r2,#0
        0x00209d48:    3948        H9      SUBS     r1,r1,#0x48
        0x00209d4a:    b004        ..      ADD      sp,sp,#0x10
        0x00209d4c:    4630        0F      MOV      r0,r6
        0x00209d4e:    e8bd41f0    ...A    POP      {r4-r8,lr}
        0x00209d52:    f5fdbe84    ....    B        log_buffer ; 0x7a5e
;;;237                {
;;;238    #if 0 //by vsop            
;;;239                    data_uart_print("Pair success\r\n");
;;;240    #else
;;;241    				//data_uart_print("#sauth#!%d!<Y>\r\n",conn_id);
;;;242    				data_uart_print("#sauth#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
        0x00209d56:    a0ed        ..      ADR      r0,{pc}+0x3b6 ; 0x20a10c
        0x00209d58:    f000ffd2    ....    BL       data_uart_print ; 0x20ad00
;;;243    						conn_id,
;;;244    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;245    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;246    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;247    #if 0
;;;248    			//os_delay(1000);
;;;249    			//simpcccd dev
;;;250    			//cause = simp_ble_client_set_v3_notify(conn_id, true);
;;;251    			 cause = simp_ble_client_set_v4_ind(conn_id, true);
;;;252    			data_uart_print("simp_ble_client_set_v3_notify cause=%d\r\n",cause);
;;;253    #endif
;;;254    
;;;255    #endif
;;;256                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair success");
        0x00209d5c:    49dc        .I      LDR      r1,[pc,#880] ; [0x20a0d0] = 0x8801724
        0x00209d5e:    2200        ."      MOVS     r2,#0
        0x00209d60:    3174        t1      ADDS     r1,r1,#0x74
        0x00209d62:    e7f2        ..      B        0x209d4a ; app_handle_authen_state_evt + 102
    app_handle_conn_param_update_evt
;;;257    
;;;258                }
;;;259                else
;;;260                {
;;;261    #if 0 //by vsop            
;;;262                    data_uart_print("Pair failed: cause 0x%x\r\n", cause);
;;;263    #else
;;;264    				//data_uart_print("#sauth#!%d!<N>\r\n",conn_id);
;;;265    				data_uart_print("#sauth#!%d![%02x%02x%02x%02x%02x%02x]<N>\r\n",
;;;266    						conn_id,
;;;267    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;268    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;269    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;270    
;;;271    #endif            
;;;272                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair failed");
;;;273                }
;;;274            }
;;;275            break;
;;;276    
;;;277        default:
;;;278            {
;;;279                APP_PRINT_ERROR1("app_handle_authen_state_evt: unknown newstate %d", new_state);
;;;280            }
;;;281            break;
;;;282        }
;;;283    }
;;;284    
;;;285    /**
;;;286     * @brief    Handle msg GAP_MSG_LE_CONN_MTU_INFO
;;;287     * @note     This msg is used to inform APP that exchange mtu procedure is completed.
;;;288     * @param[in] conn_id Connection ID
;;;289     * @param[in] mtu_size  New mtu size
;;;290     * @return   void
;;;291     */
;;;292    void app_handle_conn_mtu_info_evt(uint8_t conn_id, uint16_t mtu_size)
;;;293    {
;;;294        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
;;;295        app_discov_services(conn_id, true);
;;;296    }
;;;297    
;;;298    /**
;;;299     * @brief    Handle msg GAP_MSG_LE_CONN_PARAM_UPDATE
;;;300     * @note     All the connection parameter update change  events are pre-handled in this function.
;;;301     * @param[in] conn_id Connection ID
;;;302     * @param[in] status  New update state
;;;303     * @param[in] cause Use this cause when status is GAP_CONN_PARAM_UPDATE_STATUS_FAIL
;;;304     * @return   void
;;;305     */
;;;306    void app_handle_conn_param_update_evt(uint8_t conn_id, uint8_t status, uint16_t cause)
;;;307    {
        0x00209d64:    b530        0.      PUSH     {r4,r5,lr}
        0x00209d66:    4cdb        .L      LDR      r4,[pc,#876] ; [0x20a0d4] = 0x21103002
;;; ..\..\..\src\sample\ble_central\central_app.c (307)
        0x00209d68:    b087        ..      SUB      sp,sp,#0x1c
        0x00209d6a:    4605        .F      MOV      r5,r0
        0x00209d6c:    b161        a.      CBZ      r1,0x209d88 ; app_handle_conn_param_update_evt + 36
;;;308        switch (status)
        0x00209d6e:    2901        .)      CMP      r1,#1
        0x00209d70:    d02d        -.      BEQ      0x209dce ; app_handle_conn_param_update_evt + 106
        0x00209d72:    2902        .)      CMP      r1,#2
        0x00209d74:    d129        ).      BNE      0x209dca ; app_handle_conn_param_update_evt + 102
        0x00209d76:    4603        .F      MOV      r3,r0
        0x00209d78:    b007        ..      ADD      sp,sp,#0x1c
        0x00209d7a:    4620         F      MOV      r0,r4
        0x00209d7c:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x00209d80:    2201        ."      MOVS     r2,#1
        0x00209d82:    49ed        .I      LDR      r1,[pc,#948] ; [0x20a138] = 0x8801970
        0x00209d84:    f5fdbe6b    ..k.    B        log_buffer ; 0x7a5e
;;;309        {
;;;310        case GAP_CONN_PARAM_UPDATE_STATUS_SUCCESS:
;;;311            {
;;;312                uint16_t conn_interval;
;;;313                uint16_t conn_slave_latency;
;;;314                uint16_t conn_supervision_timeout;
;;;315    
;;;316                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
        0x00209d88:    4602        .F      MOV      r2,r0
        0x00209d8a:    a905        ..      ADD      r1,sp,#0x14
        0x00209d8c:    f2402072    @.r     MOV      r0,#0x272
        0x00209d90:    f643fe75    C.u.    BL       le_get_conn_param ; 0x4da7e
;;;317                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_slave_latency, conn_id);
        0x00209d94:    462a        *F      MOV      r2,r5
        0x00209d96:    a904        ..      ADD      r1,sp,#0x10
        0x00209d98:    f2402073    @.s     MOV      r0,#0x273
        0x00209d9c:    f643fe6f    C.o.    BL       le_get_conn_param ; 0x4da7e
;;;318                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
        0x00209da0:    462a        *F      MOV      r2,r5
        0x00209da2:    a903        ..      ADD      r1,sp,#0xc
        0x00209da4:    f44f701d    O..p    MOV      r0,#0x274
        0x00209da8:    f643fe69    C.i.    BL       le_get_conn_param ; 0x4da7e
;;;319                APP_PRINT_INFO4("app_handle_conn_param_update_evt update success:conn_id %d, conn_interval 0x%x, conn_slave_latency 0x%x, conn_supervision_timeout 0x%x",
        0x00209dac:    f8bd0014    ....    LDRH     r0,[sp,#0x14]
        0x00209db0:    f8bd200c    ...     LDRH     r2,[sp,#0xc]
        0x00209db4:    f8bd1010    ....    LDRH     r1,[sp,#0x10]
        0x00209db8:    e88d0007    ....    STM      sp,{r0-r2}
        0x00209dbc:    49c6        .I      LDR      r1,[pc,#792] ; [0x20a0d8] = 0x8801828
        0x00209dbe:    462b        +F      MOV      r3,r5
        0x00209dc0:    2204        ."      MOVS     r2,#4
        0x00209dc2:    3170        p1      ADDS     r1,r1,#0x70
        0x00209dc4:    4620         F      MOV      r0,r4
        0x00209dc6:    f5fdfe4a    ..J.    BL       log_buffer ; 0x7a5e
        0x00209dca:    b007        ..      ADD      sp,sp,#0x1c
        0x00209dcc:    bd30        0.      POP      {r4,r5,pc}
;;;320                                conn_id, conn_interval, conn_slave_latency, conn_supervision_timeout);
;;;321            }
;;;322            break;
;;;323    
;;;324        case GAP_CONN_PARAM_UPDATE_STATUS_FAIL:
;;;325            {
;;;326                APP_PRINT_ERROR2("app_handle_conn_param_update_evt update failed: conn_id %d, cause 0x%x",
        0x00209dce:    4603        .F      MOV      r3,r0
        0x00209dd0:    49d9        .I      LDR      r1,[pc,#868] ; [0x20a138] = 0x8801970
        0x00209dd2:    48c0        .H      LDR      r0,[pc,#768] ; [0x20a0d4] = 0x21103002
        0x00209dd4:    9200        ..      STR      r2,[sp,#0]
        0x00209dd6:    2202        ."      MOVS     r2,#2
        0x00209dd8:    394c        L9      SUBS     r1,r1,#0x4c
        0x00209dda:    1e80        ..      SUBS     r0,r0,#2
        0x00209ddc:    f5fdfe3f    ..?.    BL       log_buffer ; 0x7a5e
;;;327                                 conn_id, cause);
;;;328            }
;;;329            break;
;;;330    
;;;331        case GAP_CONN_PARAM_UPDATE_STATUS_PENDING:
;;;332            {
;;;333                APP_PRINT_INFO1("app_handle_conn_param_update_evt update pending: conn_id %d", conn_id);
;;;334            }
;;;335            break;
;;;336    
;;;337        default:
;;;338            break;
;;;339        }
;;;340    }
        0x00209de0:    e7f3        ..      B        0x209dca ; app_handle_conn_param_update_evt + 102
    app_discov_services
;;;341    
;;;342    /**
;;;343     * @brief    All the BT GAP MSG are pre-handled in this function.
;;;344     * @note     Then the event handling function shall be called according to the
;;;345     *           subtype of T_IO_MSG
;;;346     * @param[in] p_gap_msg Pointer to GAP msg
;;;347     * @return   void
;;;348     */
;;;349    void app_handle_gap_msg(T_IO_MSG *p_gap_msg)
;;;350    {
;;;351        T_LE_GAP_MSG gap_msg;
;;;352        uint8_t conn_id;
;;;353        memcpy(&gap_msg, &p_gap_msg->u.param, sizeof(p_gap_msg->u.param));
;;;354    
;;;355        APP_PRINT_TRACE1("app_handle_gap_msg: subtype %d", p_gap_msg->subtype);
;;;356        switch (p_gap_msg->subtype)
;;;357        {
;;;358        case GAP_MSG_LE_DEV_STATE_CHANGE:
;;;359            {
;;;360                app_handle_dev_state_evt(gap_msg.msg_data.gap_dev_state_change.new_state,
;;;361                                         gap_msg.msg_data.gap_dev_state_change.cause);
;;;362            }
;;;363            break;
;;;364    
;;;365        case GAP_MSG_LE_CONN_STATE_CHANGE:
;;;366            {
;;;367                app_handle_conn_state_evt(gap_msg.msg_data.gap_conn_state_change.conn_id,
;;;368                                          (T_GAP_CONN_STATE)gap_msg.msg_data.gap_conn_state_change.new_state,
;;;369                                          gap_msg.msg_data.gap_conn_state_change.disc_cause);
;;;370            }
;;;371            break;
;;;372    
;;;373        case GAP_MSG_LE_CONN_MTU_INFO:
;;;374            {
;;;375                app_handle_conn_mtu_info_evt(gap_msg.msg_data.gap_conn_mtu_info.conn_id,
;;;376                                             gap_msg.msg_data.gap_conn_mtu_info.mtu_size);
;;;377            }
;;;378            break;
;;;379    
;;;380        case GAP_MSG_LE_CONN_PARAM_UPDATE:
;;;381            {
;;;382                app_handle_conn_param_update_evt(gap_msg.msg_data.gap_conn_param_update.conn_id,
;;;383                                                 gap_msg.msg_data.gap_conn_param_update.status,
;;;384                                                 gap_msg.msg_data.gap_conn_param_update.cause);
;;;385            }
;;;386            break;
;;;387    
;;;388        case GAP_MSG_LE_AUTHEN_STATE_CHANGE:
;;;389            {
;;;390                app_handle_authen_state_evt(gap_msg.msg_data.gap_authen_state.conn_id,
;;;391                                            gap_msg.msg_data.gap_authen_state.new_state,
;;;392                                            gap_msg.msg_data.gap_authen_state.status);
;;;393            }
;;;394            break;
;;;395    
;;;396        case GAP_MSG_LE_BOND_JUST_WORK:
;;;397            {
;;;398                conn_id = gap_msg.msg_data.gap_bond_just_work_conf.conn_id;
;;;399                le_bond_just_work_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;400                APP_PRINT_INFO0("GAP_MSG_LE_BOND_JUST_WORK");
;;;401            }
;;;402            break;
;;;403    
;;;404        case GAP_MSG_LE_BOND_PASSKEY_DISPLAY:
;;;405            {
;;;406                uint32_t display_value = 0;
;;;407                conn_id = gap_msg.msg_data.gap_bond_passkey_display.conn_id;
;;;408                le_bond_get_display_key(conn_id, &display_value);
;;;409                APP_PRINT_INFO2("GAP_MSG_LE_BOND_PASSKEY_DISPLAY: conn_id %d, passkey %d",
;;;410                                conn_id, display_value);
;;;411                le_bond_passkey_display_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;412    #if 0 //by vsop			
;;;413                data_uart_print("GAP_MSG_LE_BOND_PASSKEY_DISPLAY: conn_id %d, passkey %d\r\n",
;;;414                                conn_id,
;;;415                                display_value);
;;;416    #endif
;;;417            }
;;;418            break;
;;;419    
;;;420        case GAP_MSG_LE_BOND_USER_CONFIRMATION:
;;;421            {
;;;422                uint32_t display_value = 0;
;;;423                conn_id = gap_msg.msg_data.gap_bond_user_conf.conn_id;
;;;424                le_bond_get_display_key(conn_id, &display_value);
;;;425                APP_PRINT_INFO2("GAP_MSG_LE_BOND_USER_CONFIRMATION: conn_id %d, passkey %d",
;;;426                                conn_id, display_value);
;;;427    #if 0 //by vsop			
;;;428                data_uart_print("GAP_MSG_LE_BOND_USER_CONFIRMATION: conn_id %d, passkey %d\r\n",
;;;429                                conn_id,
;;;430                                display_value);
;;;431    #endif
;;;432                //le_bond_user_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;433            }
;;;434            break;
;;;435    
;;;436        case GAP_MSG_LE_BOND_PASSKEY_INPUT:
;;;437            {
;;;438                //uint32_t passkey = 888888;
;;;439                conn_id = gap_msg.msg_data.gap_bond_passkey_input.conn_id;
;;;440                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d", conn_id);
;;;441    #if 0 //by vsop			
;;;442                data_uart_print("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d\r\n", conn_id);
;;;443    #endif
;;;444                //le_bond_passkey_input_confirm(conn_id, passkey, GAP_CFM_CAUSE_ACCEPT);
;;;445            }
;;;446            break;
;;;447    
;;;448        case GAP_MSG_LE_BOND_OOB_INPUT:
;;;449            {
;;;450                uint8_t oob_data[GAP_OOB_LEN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
;;;451                conn_id = gap_msg.msg_data.gap_bond_oob_input.conn_id;
;;;452                APP_PRINT_INFO1("GAP_MSG_LE_BOND_OOB_INPUT: conn_id %d", conn_id);
;;;453                le_bond_set_param(GAP_PARAM_BOND_OOB_DATA, GAP_OOB_LEN, oob_data);
;;;454                le_bond_oob_input_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;455            }
;;;456            break;
;;;457    
;;;458        default:
;;;459            APP_PRINT_ERROR1("app_handle_gap_msg: unknown subtype %d", p_gap_msg->subtype);
;;;460            break;
;;;461        }
;;;462    }
;;;463    
;;;464    bool filter_scan_info_by_name(uint8_t *name, T_LE_SCAN_INFO *scan_info)
;;;465    {
;;;466        uint8_t buffer[32];
;;;467        uint8_t pos = 0;
;;;468    
;;;469        while (pos < scan_info->data_len)
;;;470        {
;;;471            /* Length of the AD structure. */
;;;472            uint8_t length = scan_info->data[pos++];
;;;473            uint8_t type;
;;;474    
;;;475            if ((length > 0x01) && ((pos + length) <= 31))
;;;476            {
;;;477                /* Copy the AD Data to buffer. */
;;;478                memcpy(buffer, scan_info->data + pos + 1, length - 1);
;;;479                /* AD Type, one octet. */
;;;480                type = scan_info->data[pos];
;;;481                switch (type)
;;;482                {
;;;483    	            case GAP_ADTYPE_LOCAL_NAME_COMPLETE:
;;;484    	                {
;;;485    	                    buffer[length - 1] = '\0';
;;;486    	                    //data_uart_print("GAP_ADTYPE_LOCAL_NAME_XXX: %s\r\n", buffer);
;;;487    						if(strncmp(buffer,name,5)==0)return true;
;;;488    	                }
;;;489    	                break;
;;;490    	            default:
;;;491    	                break;
;;;492    	            }
;;;493            }
;;;494            pos += length;
;;;495        }
;;;496    	return false;
;;;497    }
;;;498    
;;;499    
;;;500    /** @} */ /* End of group CENTRAL_GAP_MSG */
;;;501    void app_parse_scan_info(T_LE_SCAN_INFO *scan_info)
;;;502    {
;;;503        uint8_t buffer[32];
;;;504        uint8_t pos = 0;
;;;505    	data_uart_print("+++++++++++++++++++++++++++++\r\n");
;;;506    
;;;507        while (pos < scan_info->data_len)
;;;508        {
;;;509            /* Length of the AD structure. */
;;;510            uint8_t length = scan_info->data[pos++];
;;;511            uint8_t type;
;;;512    
;;;513            if ((length > 0x01) && ((pos + length) <= 31))
;;;514            {
;;;515                /* Copy the AD Data to buffer. */
;;;516                memcpy(buffer, scan_info->data + pos + 1, length - 1);
;;;517                /* AD Type, one octet. */
;;;518                type = scan_info->data[pos];
;;;519    
;;;520                data_uart_print("app_parse_scan_info: AD Structure Info: AD type 0x%x, AD Data Length %d\r\n", type,
;;;521                                 length - 1);
;;;522    
;;;523                switch (type)
;;;524                {
;;;525                case GAP_ADTYPE_FLAGS:
;;;526                    {
;;;527                        /* (flags & 0x01) -- LE Limited Discoverable Mode */
;;;528                        /* (flags & 0x02) -- LE General Discoverable Mode */
;;;529                        /* (flags & 0x04) -- BR/EDR Not Supported */
;;;530                        /* (flags & 0x08) -- Simultaneous LE and BR/EDR to Same Device Capable (Controller) */
;;;531                        /* (flags & 0x10) -- Simultaneous LE and BR/EDR to Same Device Capable (Host) */
;;;532                        uint8_t flags = scan_info->data[pos + 1];
;;;533                        data_uart_print("GAP_ADTYPE_FLAGS: 0x%x\r\n", flags);
;;;534                    }
;;;535                    break;
;;;536    
;;;537                case GAP_ADTYPE_16BIT_MORE:
;;;538                case GAP_ADTYPE_16BIT_COMPLETE:
;;;539                case GAP_ADTYPE_SERVICES_LIST_16BIT:
;;;540                    {
;;;541                        uint16_t *p_uuid = (uint16_t *)(buffer);
;;;542                        uint8_t i = length - 1;
;;;543    
;;;544                        while (i >= 2)
;;;545                        {
;;;546                            data_uart_print("GAP_ADTYPE_16BIT_XXX: 0x%x\r\n", *p_uuid++);
;;;547                            i -= 2;
;;;548                        }
;;;549                    }
;;;550                    break;
;;;551    
;;;552                case GAP_ADTYPE_32BIT_MORE:
;;;553                case GAP_ADTYPE_32BIT_COMPLETE:
;;;554                    {
;;;555                        uint32_t *p_uuid = (uint32_t *)(buffer);
;;;556                        uint8_t    i     = length - 1;
;;;557    
;;;558                        while (i >= 4)
;;;559                        {
;;;560                            data_uart_print("GAP_ADTYPE_32BIT_XXX: 0x%x\r\n", *p_uuid++);
;;;561                            i -= 4;
;;;562                        }
;;;563                    }
;;;564                    break;
;;;565    
;;;566                case GAP_ADTYPE_128BIT_MORE:
;;;567                case GAP_ADTYPE_128BIT_COMPLETE:
;;;568                case GAP_ADTYPE_SERVICES_LIST_128BIT:
;;;569                    {
;;;570                        uint32_t *p_uuid = (uint32_t *)(buffer);
;;;571                        data_uart_print("GAP_ADTYPE_128BIT_XXX: 0x%8.8x%8.8x%8.8x%8.8x\r\n",
;;;572                                        p_uuid[3], p_uuid[2], p_uuid[1], p_uuid[0]);
;;;573                    }
;;;574                    break;
;;;575    
;;;576                case GAP_ADTYPE_LOCAL_NAME_SHORT:
;;;577                case GAP_ADTYPE_LOCAL_NAME_COMPLETE:
;;;578                    {
;;;579                        buffer[length - 1] = '\0';
;;;580                        data_uart_print("GAP_ADTYPE_LOCAL_NAME_XXX: %s\r\n", buffer);
;;;581                    }
;;;582                    break;
;;;583    
;;;584                case GAP_ADTYPE_POWER_LEVEL:
;;;585                    {
;;;586                        data_uart_print("GAP_ADTYPE_POWER_LEVEL: 0x%x\r\n", scan_info->data[pos + 1]);
;;;587                    }
;;;588                    break;
;;;589    
;;;590                case GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE:
;;;591                    {
;;;592                        uint16_t *p_min = (uint16_t *)(buffer);
;;;593                        uint16_t *p_max = p_min + 1;
;;;594                        APP_PRINT_INFO2("GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE: 0x%x - 0x%x", *p_min,
;;;595                                        *p_max);
;;;596                    }
;;;597                    break;
;;;598    
;;;599                case GAP_ADTYPE_SERVICE_DATA:
;;;600                    {
;;;601                        uint16_t *p_uuid = (uint16_t *)(buffer);
;;;602                        uint8_t data_len = length - 3;
;;;603    
;;;604                        data_uart_print("GAP_ADTYPE_SERVICE_DATA: UUID 0x%x, len %d, data %b\r\n", *p_uuid,
;;;605                                        data_len, TRACE_BINARY(data_len, &buffer[2]));
;;;606                    }
;;;607                    break;
;;;608                case GAP_ADTYPE_APPEARANCE:
;;;609                    {
;;;610                        uint16_t *p_appearance = (uint16_t *)(buffer);
;;;611                        data_uart_print("GAP_ADTYPE_APPEARANCE: %d\r\n", *p_appearance);
;;;612                    }
;;;613                    break;
;;;614    
;;;615                case GAP_ADTYPE_MANUFACTURER_SPECIFIC:
;;;616                    {
;;;617                        uint8_t data_len = length - 3;
;;;618                        uint16_t *p_company_id = (uint16_t *)(buffer);
;;;619                        data_uart_print("GAP_ADTYPE_MANUFACTURER_SPECIFIC: company_id 0x%x, len %d, data %b\r\n",
;;;620                                        *p_company_id, data_len, TRACE_BINARY(data_len, &buffer[2]));
;;;621                    }
;;;622                    break;
;;;623    
;;;624                default:
;;;625                    {
;;;626                        uint8_t i = 0;
;;;627    
;;;628                        for (i = 0; i < (length - 1); i++)
;;;629                        {
;;;630                            data_uart_print("  AD Data: Unhandled Data = 0x%x\r\n", scan_info->data[pos + i]);
;;;631                        }
;;;632                    }
;;;633                    break;
;;;634                }
;;;635            }
;;;636    
;;;637            pos += length;
;;;638        }
;;;639    		data_uart_print("------------------------------\r\n");
;;;640    }
;;;641    
;;;642    /** @defgroup  CENTRAL_SCAN_MGR Scan Information manager
;;;643        * @brief Scan Information manager
;;;644        * @{
;;;645        */
;;;646    /**
;;;647      * @brief Use 16 bit uuid to filter scan information
;;;648      * @param[in] uuid 16 bit UUID.
;;;649      * @param[in] scan_info point to scan information data.
;;;650      * @return filter result
;;;651      * @retval true found success
;;;652      * @retval false not found
;;;653      */
;;;654    bool filter_scan_info_by_uuid(uint16_t uuid, T_LE_SCAN_INFO *scan_info)
;;;655    {
;;;656        uint8_t buffer[32];
;;;657        uint8_t pos = 0;
;;;658    
;;;659        while (pos < scan_info->data_len)
;;;660        {
;;;661            /* Length of the AD structure. */
;;;662            uint8_t length = scan_info->data[pos++];
;;;663            uint8_t type;
;;;664    
;;;665            if ((length > 0x01) && ((pos + length) <= 31))
;;;666            {
;;;667                /* Copy the AD Data to buffer. */
;;;668                memcpy(buffer, scan_info->data + pos + 1, length - 1);
;;;669                /* AD Type, one octet. */
;;;670                type = scan_info->data[pos];
;;;671    
;;;672                switch (type)
;;;673                {
;;;674                case GAP_ADTYPE_16BIT_MORE:
;;;675                case GAP_ADTYPE_16BIT_COMPLETE:
;;;676                case GAP_ADTYPE_SERVICES_LIST_16BIT:
;;;677                    {
;;;678                        uint16_t *p_uuid = (uint16_t *)(buffer);
;;;679                        uint8_t i = length - 1;
;;;680    
;;;681                        while (i >= 2)
;;;682                        {
;;;683                            APP_PRINT_INFO2("  AD Data: UUID16 List Item %d = 0x%x", i / 2, *p_uuid);
;;;684    						//data_uart_print("  AD Data: UUID16 List Item %d = 0x%x\r\n", i / 2, *p_uuid);
;;;685                            if (*p_uuid == uuid)
;;;686                            {
;;;687                                return true;
;;;688                            }
;;;689                            p_uuid++;
;;;690                            i -= 2;
;;;691                        }
;;;692                    }
;;;693                    break;
;;;694    
;;;695                default:
;;;696                    break;
;;;697                }
;;;698            }
;;;699    
;;;700            pos += length;
;;;701        }
;;;702        return false;
;;;703    }
;;;704    /** @} */ /* End of group CENTRAL_SCAN_MGR */
;;;705    
;;;706    /** @defgroup  CENTRAL_GAP_CALLBACK GAP Callback Event Handler
;;;707        * @brief Handle GAP callback event
;;;708        * @{
;;;709        */
;;;710    /**
;;;711      * @brief Callback for gap le to notify app
;;;712      * @param[in] cb_type callback msy type @ref GAP_LE_MSG_Types.
;;;713      * @param[in] p_cb_data point to callback data @ref T_LE_CB_DATA.
;;;714      * @retval result @ref T_APP_RESULT
;;;715      */
;;;716    T_APP_RESULT app_gap_callback(uint8_t cb_type, void *p_cb_data)
;;;717    {
;;;718        T_APP_RESULT result = APP_RESULT_SUCCESS;
;;;719        T_LE_CB_DATA *p_data = (T_LE_CB_DATA *)p_cb_data;
;;;720    
;;;721    	uint8_t devname[]="CMT4501-a11005e2";
;;;722    
;;;723        switch (cb_type)
;;;724        {
;;;725        case GAP_MSG_LE_SCAN_INFO:
;;;726            APP_PRINT_INFO5("GAP_MSG_LE_SCAN_INFO:adv_type 0x%x, bd_addr %s, remote_addr_type %d, rssi %d, data_len %d",
;;;727                            p_data->p_le_scan_info->adv_type,
;;;728                            TRACE_BDADDR(p_data->p_le_scan_info->bd_addr),
;;;729                            p_data->p_le_scan_info->remote_addr_type,
;;;730                            p_data->p_le_scan_info->rssi,
;;;731                            p_data->p_le_scan_info->data_len);
;;;732            /* User can split interested information by using the function as follow. */
;;;733    
;;;734    #if 1
;;;735    		//app_parse_scan_info(p_data->p_le_scan_info);
;;;736    		if (filter_scan_info_by_name(devname, p_data->p_le_scan_info))
;;;737            {
;;;738                //data_uart_print("Found simple ble service\r\n");
;;;739                link_mgr_add_device(p_data->p_le_scan_info->bd_addr, p_data->p_le_scan_info->remote_addr_type);
;;;740            }
;;;741    #endif
;;;742    
;;;743            if (filter_scan_info_by_uuid(GATT_UUID_SIMPLE_PROFILE, p_data->p_le_scan_info))
;;;744            {
;;;745                APP_PRINT_INFO0("Found simple ble service");
;;;746                link_mgr_add_device(p_data->p_le_scan_info->bd_addr, p_data->p_le_scan_info->remote_addr_type);
;;;747            }
;;;748            /* If you want to parse the scan info, please reference function app_parse_scan_info in observer app. */
;;;749            break;
;;;750    
;;;751        case GAP_MSG_LE_CONN_UPDATE_IND:
;;;752            APP_PRINT_INFO5("GAP_MSG_LE_CONN_UPDATE_IND: conn_id %d, conn_interval_max 0x%x, conn_interval_min 0x%x, conn_latency 0x%x,supervision_timeout 0x%x",
;;;753                            p_data->p_le_conn_update_ind->conn_id,
;;;754                            p_data->p_le_conn_update_ind->conn_interval_max,
;;;755                            p_data->p_le_conn_update_ind->conn_interval_min,
;;;756                            p_data->p_le_conn_update_ind->conn_latency,
;;;757                            p_data->p_le_conn_update_ind->supervision_timeout);
;;;758            /* if reject the proposed connection parameter from peer device, use APP_RESULT_REJECT. */
;;;759            result = APP_RESULT_ACCEPT;
;;;760            break;
;;;761    
;;;762        default:
;;;763            APP_PRINT_ERROR1("app_gap_callback: unhandled cb_type 0x%x", cb_type);
;;;764            break;
;;;765        }
;;;766        return result;
;;;767    }
;;;768    /** @} */ /* End of group CENTRAL_GAP_CALLBACK */
;;;769    
;;;770    /** @defgroup  CENTRAL_SRV_DIS GATT Services discovery and storage
;;;771        * @brief GATT Services discovery and storage
;;;772        * @{
;;;773        */
;;;774    /**
;;;775     * @brief  Discovery GATT services
;;;776     * @param  conn_id connection ID.
;;;777     * @param  start first call. true - first call this function after conncection, false - not first
;;;778     * @retval None
;;;779     */
;;;780    void app_discov_services(uint8_t conn_id, bool start)
;;;781    {
        0x00209de2:    b538        8.      PUSH     {r3-r5,lr}
        0x00209de4:    4604        .F      MOV      r4,r0
;;;782        if (app_link_table[conn_id].conn_state != GAP_CONN_STATE_CONNECTED)
        0x00209de6:    4abd        .J      LDR      r2,[pc,#756] ; [0x20a0dc] = 0x20d1cf
        0x00209de8:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00209dec:    4db9        .M      LDR      r5,[pc,#740] ; [0x20a0d4] = 0x21103002
        0x00209dee:    f8123010    ...0    LDRB     r3,[r2,r0,LSL #1]
        0x00209df2:    1ead        ..      SUBS     r5,r5,#2
        0x00209df4:    2b02        .+      CMP      r3,#2
        0x00209df6:    d003        ..      BEQ      0x209e00 ; app_discov_services + 30
;;;783        {
;;;784            APP_PRINT_ERROR1("app_discov_services: conn_id %d not connected ", conn_id);
        0x00209df8:    4623        #F      MOV      r3,r4
        0x00209dfa:    2201        ."      MOVS     r2,#1
        0x00209dfc:    49cf        .I      LDR      r1,[pc,#828] ; [0x20a13c] = 0x8801c88
;;;785            return;
        0x00209dfe:    e024        $.      B        0x209e4a ; app_discov_services + 104
;;;786        }
;;;787        if (start)
        0x00209e00:    b149        I.      CBZ      r1,0x209e16 ; app_discov_services + 52
;;;788        {
;;;789    #if F_BT_GATT_SRV_HANDLE_STORAGE
;;;790            bool is_disc = true;
;;;791            T_APP_SRVS_HDL_TABLE app_srvs_table;
;;;792            if (app_load_srvs_hdl_table(&app_srvs_table) == 0)
;;;793            {
;;;794                if ((app_srvs_table.srv_found_flags != 0) &&
;;;795                    (app_srvs_table.bd_type == app_link_table[conn_id].bd_type) &&
;;;796                    (memcmp(app_srvs_table.bd_addr, app_link_table[conn_id].bd_addr, GAP_BD_ADDR_LEN) == 0))
;;;797                {
;;;798                    APP_PRINT_INFO1("app_discov_services: load from flash, srv_found_flags 0x%x",
;;;799                                    app_srvs_table.srv_found_flags);
;;;800                    app_link_table[conn_id].srv_found_flags = app_srvs_table.srv_found_flags;
;;;801                    if (app_srvs_table.srv_found_flags & APP_DISCOV_GAPS_FLAG)
;;;802                    {
;;;803                        gaps_set_hdl_cache(conn_id, app_srvs_table.gaps_hdl_cache, sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;804                    }
;;;805                    if (app_srvs_table.srv_found_flags & APP_DISCOV_SIMP_FLAG)
;;;806                    {
;;;807                        simp_ble_client_set_hdl_cache(conn_id, app_srvs_table.simp_hdl_cache,
;;;808                                                      sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN);
;;;809                    }
;;;810                    if (app_srvs_table.srv_found_flags & APP_DISCOV_BAS_FLAG)
;;;811                    {
;;;812                        bas_set_hdl_cache(conn_id, app_srvs_table.bas_hdl_cache, sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;813                    }
;;;814                    is_disc = false;
;;;815                }
;;;816            }
;;;817            else
;;;818            {
;;;819                APP_PRINT_ERROR0("app_load_srvs_hdl_table: failed");
;;;820            }
;;;821    
;;;822            if (is_disc)
;;;823            {
;;;824                if (gaps_start_discovery(conn_id) == false)
;;;825                {
;;;826                    APP_PRINT_ERROR1("app_discov_services: discover gaps failed conn_id %d", conn_id);
;;;827                }
;;;828            }
;;;829    #else
;;;830            if (gaps_start_discovery(conn_id) == false)
        0x00209e02:    4620         F      MOV      r0,r4
        0x00209e04:    f7fffa1a    ....    BL       gaps_start_discovery ; 0x20923c
        0x00209e08:    2800        .(      CMP      r0,#0
        0x00209e0a:    d12d        -.      BNE      0x209e68 ; app_discov_services + 134
;;;831            {
;;;832                APP_PRINT_ERROR1("app_discov_services: discover gaps failed conn_id %d", conn_id);
        0x00209e0c:    49cb        .I      LDR      r1,[pc,#812] ; [0x20a13c] = 0x8801c88
        0x00209e0e:    2201        ."      MOVS     r2,#1
        0x00209e10:    4623        #F      MOV      r3,r4
        0x00209e12:    3134        41      ADDS     r1,r1,#0x34
        0x00209e14:    e019        ..      B        0x209e4a ; app_discov_services + 104
;;;833            }
;;;834    #endif
;;;835            return;
;;;836        }
;;;837        if ((app_link_table[conn_id].discovered_flags & APP_DISCOV_SIMP_FLAG) == 0)
        0x00209e16:    eb020140    ..@.    ADD      r1,r2,r0,LSL #1
        0x00209e1a:    784a        Jx      LDRB     r2,[r1,#1]
        0x00209e1c:    0790        ..      LSLS     r0,r2,#30
        0x00209e1e:    d409        ..      BMI      0x209e34 ; app_discov_services + 82
;;;838        {
;;;839            if (simp_ble_client_start_discovery(conn_id) == false)
        0x00209e20:    4620         F      MOV      r0,r4
        0x00209e22:    f7fefaf3    ....    BL       simp_ble_client_start_discovery ; 0x20840c
        0x00209e26:    2800        .(      CMP      r0,#0
        0x00209e28:    d11e        ..      BNE      0x209e68 ; app_discov_services + 134
;;;840            {
;;;841                APP_PRINT_ERROR1("app_discov_services: discover simp failed conn_id %d", conn_id);
        0x00209e2a:    49c4        .I      LDR      r1,[pc,#784] ; [0x20a13c] = 0x8801c88
        0x00209e2c:    2201        ."      MOVS     r2,#1
        0x00209e2e:    4623        #F      MOV      r3,r4
        0x00209e30:    316c        l1      ADDS     r1,r1,#0x6c
        0x00209e32:    e00a        ..      B        0x209e4a ; app_discov_services + 104
;;;842            }
;;;843        }
;;;844        else if ((app_link_table[conn_id].discovered_flags & APP_DISCOV_BAS_FLAG) == 0)
        0x00209e34:    0750        P.      LSLS     r0,r2,#29
        0x00209e36:    d40e        ..      BMI      0x209e56 ; app_discov_services + 116
;;;845        {
;;;846            if (bas_start_discovery(conn_id) == false)
        0x00209e38:    4620         F      MOV      r0,r4
        0x00209e3a:    f7feff37    ..7.    BL       bas_start_discovery ; 0x208cac
        0x00209e3e:    2800        .(      CMP      r0,#0
        0x00209e40:    d112        ..      BNE      0x209e68 ; app_discov_services + 134
;;;847            {
;;;848                APP_PRINT_ERROR1("app_discov_services: discover bas failed conn_id %d", conn_id);
        0x00209e42:    49be        .I      LDR      r1,[pc,#760] ; [0x20a13c] = 0x8801c88
        0x00209e44:    2201        ."      MOVS     r2,#1
        0x00209e46:    4623        #F      MOV      r3,r4
        0x00209e48:    31a4        .1      ADDS     r1,r1,#0xa4
        0x00209e4a:    b001        ..      ADD      sp,sp,#4
        0x00209e4c:    4628        (F      MOV      r0,r5
        0x00209e4e:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x00209e52:    f5fdbe04    ....    B        log_buffer ; 0x7a5e
;;;849            }
;;;850        }
;;;851        else
;;;852        {
;;;853            APP_PRINT_INFO2("app_discov_services: discover complete, conn_id %d, srv_found_flags 0x%x",
        0x00209e56:    7888        .x      LDRB     r0,[r1,#2]
        0x00209e58:    49b8        .I      LDR      r1,[pc,#736] ; [0x20a13c] = 0x8801c88
        0x00209e5a:    9000        ..      STR      r0,[sp,#0]
        0x00209e5c:    4623        #F      MOV      r3,r4
        0x00209e5e:    2202        ."      MOVS     r2,#2
        0x00209e60:    31dc        .1      ADDS     r1,r1,#0xdc
        0x00209e62:    489c        .H      LDR      r0,[pc,#624] ; [0x20a0d4] = 0x21103002
        0x00209e64:    f5fdfdfb    ....    BL       log_buffer ; 0x7a5e
;;;854                            conn_id, app_link_table[conn_id].srv_found_flags);
;;;855    #if F_BT_GATT_SRV_HANDLE_STORAGE
;;;856            if (app_link_table[conn_id].srv_found_flags != 0)
;;;857            {
;;;858                T_APP_SRVS_HDL_TABLE app_srvs_table;
;;;859                memset(&app_srvs_table, 0, sizeof(T_APP_SRVS_HDL_TABLE));
;;;860                app_srvs_table.bd_type = app_link_table[conn_id].bd_type;
;;;861                app_srvs_table.srv_found_flags = app_link_table[conn_id].srv_found_flags;
;;;862                memcpy(app_srvs_table.bd_addr, app_link_table[conn_id].bd_addr, GAP_BD_ADDR_LEN);
;;;863                gaps_get_hdl_cache(conn_id, app_srvs_table.gaps_hdl_cache, sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;864                simp_ble_client_get_hdl_cache(conn_id, app_srvs_table.simp_hdl_cache,
;;;865                                              sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN);
;;;866                bas_get_hdl_cache(conn_id, app_srvs_table.bas_hdl_cache, sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;867                if (app_save_srvs_hdl_table(&app_srvs_table) != 0)
;;;868                {
;;;869                    APP_PRINT_ERROR0("app_save_srvs_hdl_table: failed");
;;;870                }
;;;871            }
;;;872    #endif
;;;873        }
;;;874    
;;;875        return;
;;;876    }
        0x00209e68:    bd38        8.      POP      {r3-r5,pc}
    app_handle_conn_mtu_info_evt
;;; ..\..\..\src\sample\ble_central\central_app.c (293)
        0x00209e6a:    b538        8.      PUSH     {r3-r5,lr}
        0x00209e6c:    4604        .F      MOV      r4,r0
;;;294        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
        0x00209e6e:    9100        ..      STR      r1,[sp,#0]
        0x00209e70:    4999        .I      LDR      r1,[pc,#612] ; [0x20a0d8] = 0x8801828
        0x00209e72:    4603        .F      MOV      r3,r0
        0x00209e74:    2202        ."      MOVS     r2,#2
        0x00209e76:    3134        41      ADDS     r1,r1,#0x34
        0x00209e78:    4896        .H      LDR      r0,[pc,#600] ; [0x20a0d4] = 0x21103002
        0x00209e7a:    f5fdfdf0    ....    BL       log_buffer ; 0x7a5e
;;;295        app_discov_services(conn_id, true);
        0x00209e7e:    4620         F      MOV      r0,r4
        0x00209e80:    e8bd4038    ..8@    POP      {r3-r5,lr}
        0x00209e84:    2101        .!      MOVS     r1,#1
        0x00209e86:    e7ac        ..      B        app_discov_services ; 0x209de2
    app_handle_conn_state_evt
;;; ..\..\..\src\sample\ble_central\central_app.c (149)
        0x00209e88:    e92d41ff    -..A    PUSH     {r0-r8,lr}
        0x00209e8c:    4615        .F      MOV      r5,r2
        0x00209e8e:    460e        .F      MOV      r6,r1
        0x00209e90:    4607        .F      MOV      r7,r0
        0x00209e92:    2804        .(      CMP      r0,#4
;;; ..\..\..\src\sample\ble_central\central_app.c (149)
        0x00209e94:    d228        (.      BCS      0x209ee8 ; app_handle_conn_state_evt + 96
;;;150        if (conn_id >= APP_MAX_LINKS)
;;;151        {
;;;152            return;
;;;153        }
;;;154    
;;;155        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d, conn_state(%d -> %d), disc_cause 0x%x",
        0x00209e96:    f8df8244    ..D.    LDR      r8,[pc,#580] ; [0x20a0dc] = 0x20d1cf
        0x00209e9a:    eb070487    ....    ADD      r4,r7,r7,LSL #2
        0x00209e9e:    498c        .I      LDR      r1,[pc,#560] ; [0x20a0d0] = 0x8801724
        0x00209ea0:    f8180014    ....    LDRB     r0,[r8,r4,LSL #1]
        0x00209ea4:    e9cd0600    ....    STRD     r0,r6,[sp,#0]
        0x00209ea8:    463b        ;F      MOV      r3,r7
        0x00209eaa:    2204        ."      MOVS     r2,#4
        0x00209eac:    3998        .9      SUBS     r1,r1,#0x98
        0x00209eae:    9502        ..      STR      r5,[sp,#8]
        0x00209eb0:    4888        .H      LDR      r0,[pc,#544] ; [0x20a0d4] = 0x21103002
        0x00209eb2:    f5fdfdd4    ....    BL       log_buffer ; 0x7a5e
        0x00209eb6:    f8086014    ...`    STRB     r6,[r8,r4,LSL #1]
        0x00209eba:    4640        @F      MOV      r0,r8
        0x00209ebc:    eb000444    ..D.    ADD      r4,r0,r4,LSL #1
;;;156                        conn_id, app_link_table[conn_id].conn_state, new_state, disc_cause);
;;;157    
;;;158        app_link_table[conn_id].conn_state = new_state;
;;;159        switch (new_state)
        0x00209ec0:    b1a6        ..      CBZ      r6,0x209eec ; app_handle_conn_state_evt + 100
        0x00209ec2:    2e02        ..      CMP      r6,#2
        0x00209ec4:    d110        ..      BNE      0x209ee8 ; app_handle_conn_state_evt + 96
        0x00209ec6:    1ce2        ..      ADDS     r2,r4,#3
        0x00209ec8:    1d21        !.      ADDS     r1,r4,#4
        0x00209eca:    4638        8F      MOV      r0,r7
        0x00209ecc:    f643fe8f    C...    BL       le_get_conn_addr ; 0x4dbee
        0x00209ed0:    79e0        .y      LDRB     r0,[r4,#7]
        0x00209ed2:    7923        #y      LDRB     r3,[r4,#4]
        0x00209ed4:    7962        by      LDRB     r2,[r4,#5]
        0x00209ed6:    79a1        .y      LDRB     r1,[r4,#6]
        0x00209ed8:    e88d000f    ....    STM      sp,{r0-r3}
        0x00209edc:    7a23        #z      LDRB     r3,[r4,#8]
        0x00209ede:    7a62        bz      LDRB     r2,[r4,#9]
        0x00209ee0:    4639        9F      MOV      r1,r7
        0x00209ee2:    a097        ..      ADR      r0,{pc}+0x25e ; 0x20a140
        0x00209ee4:    f000ff0c    ....    BL       data_uart_print ; 0x20ad00
        0x00209ee8:    e8bd81ff    ....    POP      {r0-r8,pc}
;;;160        {
;;;161        case GAP_CONN_STATE_DISCONNECTED:
;;;162            {
;;;163                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
        0x00209eec:    f5a57080    ...p    SUB      r0,r5,#0x100
        0x00209ef0:    3813        .8      SUBS     r0,r0,#0x13
        0x00209ef2:    d00b        ..      BEQ      0x209f0c ; app_handle_conn_state_evt + 132
;;;164                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
        0x00209ef4:    f5b57f8b    ....    CMP      r5,#0x116
        0x00209ef8:    d008        ..      BEQ      0x209f0c ; app_handle_conn_state_evt + 132
;;;165                {
;;;166                    APP_PRINT_ERROR2("app_handle_conn_state_evt: connection lost, conn_id %d, cause 0x%x", conn_id,
        0x00209efa:    4975        uI      LDR      r1,[pc,#468] ; [0x20a0d0] = 0x8801724
        0x00209efc:    4875        uH      LDR      r0,[pc,#468] ; [0x20a0d4] = 0x21103002
        0x00209efe:    463b        ;F      MOV      r3,r7
        0x00209f00:    2202        ."      MOVS     r2,#2
        0x00209f02:    3948        H9      SUBS     r1,r1,#0x48
        0x00209f04:    1e80        ..      SUBS     r0,r0,#2
        0x00209f06:    9500        ..      STR      r5,[sp,#0]
        0x00209f08:    f5fdfda9    ....    BL       log_buffer ; 0x7a5e
;;;167                                     disc_cause);
;;;168                }
;;;169    #if 0 //by vsop	
;;;170                data_uart_print("Disconnect conn_id %d\r\n", conn_id);
;;;171    #else
;;;172    			//data_uart_print("#disc#!%d!<Y>\r\n", conn_id);
;;;173    			data_uart_print("#disc#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
        0x00209f0c:    79e0        .y      LDRB     r0,[r4,#7]
        0x00209f0e:    7923        #y      LDRB     r3,[r4,#4]
        0x00209f10:    7962        by      LDRB     r2,[r4,#5]
        0x00209f12:    79a1        .y      LDRB     r1,[r4,#6]
        0x00209f14:    e88d000f    ....    STM      sp,{r0-r3}
        0x00209f18:    7a23        #z      LDRB     r3,[r4,#8]
        0x00209f1a:    7a62        bz      LDRB     r2,[r4,#9]
        0x00209f1c:    4639        9F      MOV      r1,r7
        0x00209f1e:    a093        ..      ADR      r0,{pc}+0x24e ; 0x20a16c
        0x00209f20:    f000feee    ....    BL       data_uart_print ; 0x20ad00
;;;174    						conn_id,
;;;175    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;176    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;177    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;178    #endif
;;;179                memset(&app_link_table[conn_id], 0, sizeof(T_APP_LINK));
        0x00209f24:    2000        .       MOVS     r0,#0
        0x00209f26:    6020         `      STR      r0,[r4,#0]
        0x00209f28:    6060        ``      STR      r0,[r4,#4]
        0x00209f2a:    8120         .      STRH     r0,[r4,#8]
;;;180            }
;;;181            break;
;;;182    
;;;183        case GAP_CONN_STATE_CONNECTED:
;;;184            {
;;;185            	//T_GAP_CAUSE cause;
;;;186                le_get_conn_addr(conn_id, app_link_table[conn_id].bd_addr,
;;;187                                 &app_link_table[conn_id].bd_type);
;;;188    #if 0 //by vsop			
;;;189                data_uart_print("Connected success conn_id %d\r\n", conn_id);
;;;190    #else
;;;191               // data_uart_print("#condev#!%d!<Y>\r\n", conn_id);	
;;;192    			data_uart_print("#condev#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;193    						conn_id,
;;;194    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;195    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;196    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;197    #if 0
;;;198    			//os_delay(1000);
;;;199    			//sauth dev
;;;200    			//cause = le_bond_pair(conn_id);
;;;201    			//data_uart_print("e_bond_pair cause=%d\r\n",cause);
;;;202    #endif															 
;;;203    #endif
;;;204            }
;;;205            break;
;;;206    
;;;207        default:
;;;208            break;
;;;209    
;;;210        }
;;;211    }
        0x00209f2c:    e7dc        ..      B        0x209ee8 ; app_handle_conn_state_evt + 96
    app_handle_dev_state_evt
        0x00209f2e:    e92d41fc    -..A    PUSH     {r2-r8,lr}
        0x00209f32:    b2c4        ..      UXTB     r4,r0
;;; ..\..\..\src\sample\ble_central\central_app.c (99)
        0x00209f34:    f3c41501    ....    UBFX     r5,r4,#4,#2
        0x00209f38:    e9cd5100    ...Q    STRD     r5,r1,[sp,#0]
        0x00209f3c:    f8df8194    ....    LDR      r8,[pc,#404] ; [0x20a0d4] = 0x21103002
        0x00209f40:    f0040601    ....    AND      r6,r4,#1
        0x00209f44:    4633        3F      MOV      r3,r6
        0x00209f46:    2203        ."      MOVS     r2,#3
        0x00209f48:    4993        .I      LDR      r1,[pc,#588] ; [0x20a198] = 0x8801608
        0x00209f4a:    4640        @F      MOV      r0,r8
        0x00209f4c:    f5fdfd87    ....    BL       log_buffer ; 0x7a5e
;;;100                        new_state.gap_init_state,
;;;101                        new_state.gap_scan_state, cause);
;;;102        if (gap_dev_state.gap_init_state != new_state.gap_init_state)
        0x00209f50:    4f92        .O      LDR      r7,[pc,#584] ; [0x20a19c] = 0x20d1a0
        0x00209f52:    7838        8x      LDRB     r0,[r7,#0]
        0x00209f54:    f0000001    ....    AND      r0,r0,#1
        0x00209f58:    42b0        .B      CMP      r0,r6
        0x00209f5a:    d00c        ..      BEQ      0x209f76 ; app_handle_dev_state_evt + 72
;;;103        {
;;;104            if (new_state.gap_init_state == GAP_INIT_STATE_STACK_READY)
        0x00209f5c:    07e0        ..      LSLS     r0,r4,#31
        0x00209f5e:    d00a        ..      BEQ      0x209f76 ; app_handle_dev_state_evt + 72
;;;105            {
;;;106                uint8_t bt_addr[6];
;;;107                APP_PRINT_INFO0("GAP stack ready");
        0x00209f60:    498d        .I      LDR      r1,[pc,#564] ; [0x20a198] = 0x8801608
        0x00209f62:    2200        ."      MOVS     r2,#0
        0x00209f64:    3148        H1      ADDS     r1,r1,#0x48
        0x00209f66:    4640        @F      MOV      r0,r8
        0x00209f68:    f5fdfd79    ..y.    BL       log_buffer ; 0x7a5e
;;;108                /*stack ready*/
;;;109                gap_get_param(GAP_PARAM_BD_ADDR, bt_addr);
        0x00209f6c:    4669        iF      MOV      r1,sp
        0x00209f6e:    f44f7000    O..p    MOV      r0,#0x200
        0x00209f72:    f642f860    B.`.    BL       gap_get_param ; 0x4c036
;;;110    #if 0	//by vsop	
;;;111                data_uart_print("local bd addr: 0x%2x:%2x:%2x:%2x:%2x:%2x\r\n",
;;;112                                bt_addr[5],
;;;113                                bt_addr[4],
;;;114                                bt_addr[3],
;;;115                                bt_addr[2],
;;;116                                bt_addr[1],
;;;117                                bt_addr[0]);
;;;118    #endif
;;;119            }
;;;120        }
;;;121    
;;;122        if (gap_dev_state.gap_scan_state != new_state.gap_scan_state)
        0x00209f76:    7838        8x      LDRB     r0,[r7,#0]
        0x00209f78:    f3c01001    ....    UBFX     r0,r0,#4,#2
        0x00209f7c:    42a8        .B      CMP      r0,r5
        0x00209f7e:    d00f        ..      BEQ      0x209fa0 ; app_handle_dev_state_evt + 114
;;;123        {
;;;124            if (new_state.gap_scan_state == GAP_SCAN_STATE_IDLE)
        0x00209f80:    f0140f30    ..0.    TST      r4,#0x30
        0x00209f84:    d002        ..      BEQ      0x209f8c ; app_handle_dev_state_evt + 94
        0x00209f86:    2d02        .-      CMP      r5,#2
        0x00209f88:    d004        ..      BEQ      0x209f94 ; app_handle_dev_state_evt + 102
        0x00209f8a:    e009        ..      B        0x209fa0 ; app_handle_dev_state_evt + 114
;;;125            {
;;;126                APP_PRINT_INFO0("GAP scan stop");
        0x00209f8c:    4982        .I      LDR      r1,[pc,#520] ; [0x20a198] = 0x8801608
        0x00209f8e:    2200        ."      MOVS     r2,#0
        0x00209f90:    315c        \1      ADDS     r1,r1,#0x5c
        0x00209f92:    e002        ..      B        0x209f9a ; app_handle_dev_state_evt + 108
;;;127                //data_uart_print("GAP scan stop\r\n"); 	//by vsop
;;;128            }
;;;129            else if (new_state.gap_scan_state == GAP_SCAN_STATE_SCANNING)
;;;130            {
;;;131                APP_PRINT_INFO0("GAP scan start");
        0x00209f94:    4980        .I      LDR      r1,[pc,#512] ; [0x20a198] = 0x8801608
        0x00209f96:    2200        ."      MOVS     r2,#0
        0x00209f98:    3170        p1      ADDS     r1,r1,#0x70
        0x00209f9a:    4640        @F      MOV      r0,r8
        0x00209f9c:    f5fdfd5f    .._.    BL       log_buffer ; 0x7a5e
;;;132                //data_uart_print("GAP scan start\r\n");	//by vsop
;;;133            }
;;;134        }
;;;135    
;;;136        gap_dev_state = new_state;
        0x00209fa0:    703c        <p      STRB     r4,[r7,#0]
;;;137    }
        0x00209fa2:    e8bd81fc    ....    POP      {r2-r8,pc}
    app_handle_gap_msg
;;;138    
;;;139    /**
;;;140     * @brief    Handle msg GAP_MSG_LE_CONN_STATE_CHANGE
;;;141     * @note     All the gap conn state events are pre-handled in this function.
;;;142     *           Then the event handling function shall be called according to the new_state
;;;143     * @param[in] conn_id Connection ID
;;;144     * @param[in] new_state  New gap connection state
;;;145     * @param[in] disc_cause Use this cause when new_state is GAP_CONN_STATE_DISCONNECTED
;;;146     * @return   void
;;;147     */
;;;148    void app_handle_conn_state_evt(uint8_t conn_id, T_GAP_CONN_STATE new_state, uint16_t disc_cause)
;;;149    {
;;;150        if (conn_id >= APP_MAX_LINKS)
;;;151        {
;;;152            return;
;;;153        }
;;;154    
;;;155        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d, conn_state(%d -> %d), disc_cause 0x%x",
;;;156                        conn_id, app_link_table[conn_id].conn_state, new_state, disc_cause);
;;;157    
;;;158        app_link_table[conn_id].conn_state = new_state;
;;;159        switch (new_state)
;;;160        {
;;;161        case GAP_CONN_STATE_DISCONNECTED:
;;;162            {
;;;163                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
;;;164                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
;;;165                {
;;;166                    APP_PRINT_ERROR2("app_handle_conn_state_evt: connection lost, conn_id %d, cause 0x%x", conn_id,
;;;167                                     disc_cause);
;;;168                }
;;;169    #if 0 //by vsop	
;;;170                data_uart_print("Disconnect conn_id %d\r\n", conn_id);
;;;171    #else
;;;172    			//data_uart_print("#disc#!%d!<Y>\r\n", conn_id);
;;;173    			data_uart_print("#disc#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;174    						conn_id,
;;;175    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;176    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;177    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;178    #endif
;;;179                memset(&app_link_table[conn_id], 0, sizeof(T_APP_LINK));
;;;180            }
;;;181            break;
;;;182    
;;;183        case GAP_CONN_STATE_CONNECTED:
;;;184            {
;;;185            	//T_GAP_CAUSE cause;
;;;186                le_get_conn_addr(conn_id, app_link_table[conn_id].bd_addr,
;;;187                                 &app_link_table[conn_id].bd_type);
;;;188    #if 0 //by vsop			
;;;189                data_uart_print("Connected success conn_id %d\r\n", conn_id);
;;;190    #else
;;;191               // data_uart_print("#condev#!%d!<Y>\r\n", conn_id);	
;;;192    			data_uart_print("#condev#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;193    						conn_id,
;;;194    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;195    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;196    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;197    #if 0
;;;198    			//os_delay(1000);
;;;199    			//sauth dev
;;;200    			//cause = le_bond_pair(conn_id);
;;;201    			//data_uart_print("e_bond_pair cause=%d\r\n",cause);
;;;202    #endif															 
;;;203    #endif
;;;204            }
;;;205            break;
;;;206    
;;;207        default:
;;;208            break;
;;;209    
;;;210        }
;;;211    }
;;;212    
;;;213    /**
;;;214     * @brief    Handle msg GAP_MSG_LE_AUTHEN_STATE_CHANGE
;;;215     * @note     All the gap authentication state events are pre-handled in this function.
;;;216     *           Then the event handling function shall be called according to the new_state
;;;217     * @param[in] conn_id Connection ID
;;;218     * @param[in] new_state  New authentication state
;;;219     * @param[in] cause Use this cause when new_state is GAP_AUTHEN_STATE_COMPLETE
;;;220     * @return   void
;;;221     */
;;;222    void app_handle_authen_state_evt(uint8_t conn_id, uint8_t new_state, uint16_t cause)
;;;223    {
;;;224        APP_PRINT_INFO2("app_handle_authen_state_evt:conn_id %d, cause 0x%x", conn_id, cause);
;;;225    
;;;226        switch (new_state)
;;;227        {
;;;228        case GAP_AUTHEN_STATE_STARTED:
;;;229            {
;;;230                APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_STARTED");
;;;231            }
;;;232            break;
;;;233    
;;;234        case GAP_AUTHEN_STATE_COMPLETE:
;;;235            {
;;;236                if (cause == GAP_SUCCESS)
;;;237                {
;;;238    #if 0 //by vsop            
;;;239                    data_uart_print("Pair success\r\n");
;;;240    #else
;;;241    				//data_uart_print("#sauth#!%d!<Y>\r\n",conn_id);
;;;242    				data_uart_print("#sauth#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;243    						conn_id,
;;;244    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;245    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;246    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;247    #if 0
;;;248    			//os_delay(1000);
;;;249    			//simpcccd dev
;;;250    			//cause = simp_ble_client_set_v3_notify(conn_id, true);
;;;251    			 cause = simp_ble_client_set_v4_ind(conn_id, true);
;;;252    			data_uart_print("simp_ble_client_set_v3_notify cause=%d\r\n",cause);
;;;253    #endif
;;;254    
;;;255    #endif
;;;256                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair success");
;;;257    
;;;258                }
;;;259                else
;;;260                {
;;;261    #if 0 //by vsop            
;;;262                    data_uart_print("Pair failed: cause 0x%x\r\n", cause);
;;;263    #else
;;;264    				//data_uart_print("#sauth#!%d!<N>\r\n",conn_id);
;;;265    				data_uart_print("#sauth#!%d![%02x%02x%02x%02x%02x%02x]<N>\r\n",
;;;266    						conn_id,
;;;267    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;268    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;269    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;270    
;;;271    #endif            
;;;272                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair failed");
;;;273                }
;;;274            }
;;;275            break;
;;;276    
;;;277        default:
;;;278            {
;;;279                APP_PRINT_ERROR1("app_handle_authen_state_evt: unknown newstate %d", new_state);
;;;280            }
;;;281            break;
;;;282        }
;;;283    }
;;;284    
;;;285    /**
;;;286     * @brief    Handle msg GAP_MSG_LE_CONN_MTU_INFO
;;;287     * @note     This msg is used to inform APP that exchange mtu procedure is completed.
;;;288     * @param[in] conn_id Connection ID
;;;289     * @param[in] mtu_size  New mtu size
;;;290     * @return   void
;;;291     */
;;;292    void app_handle_conn_mtu_info_evt(uint8_t conn_id, uint16_t mtu_size)
;;;293    {
;;;294        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
;;;295        app_discov_services(conn_id, true);
;;;296    }
;;;297    
;;;298    /**
;;;299     * @brief    Handle msg GAP_MSG_LE_CONN_PARAM_UPDATE
;;;300     * @note     All the connection parameter update change  events are pre-handled in this function.
;;;301     * @param[in] conn_id Connection ID
;;;302     * @param[in] status  New update state
;;;303     * @param[in] cause Use this cause when status is GAP_CONN_PARAM_UPDATE_STATUS_FAIL
;;;304     * @return   void
;;;305     */
;;;306    void app_handle_conn_param_update_evt(uint8_t conn_id, uint8_t status, uint16_t cause)
;;;307    {
;;;308        switch (status)
;;;309        {
;;;310        case GAP_CONN_PARAM_UPDATE_STATUS_SUCCESS:
;;;311            {
;;;312                uint16_t conn_interval;
;;;313                uint16_t conn_slave_latency;
;;;314                uint16_t conn_supervision_timeout;
;;;315    
;;;316                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;317                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_slave_latency, conn_id);
;;;318                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;319                APP_PRINT_INFO4("app_handle_conn_param_update_evt update success:conn_id %d, conn_interval 0x%x, conn_slave_latency 0x%x, conn_supervision_timeout 0x%x",
;;;320                                conn_id, conn_interval, conn_slave_latency, conn_supervision_timeout);
;;;321            }
;;;322            break;
;;;323    
;;;324        case GAP_CONN_PARAM_UPDATE_STATUS_FAIL:
;;;325            {
;;;326                APP_PRINT_ERROR2("app_handle_conn_param_update_evt update failed: conn_id %d, cause 0x%x",
;;;327                                 conn_id, cause);
;;;328            }
;;;329            break;
;;;330    
;;;331        case GAP_CONN_PARAM_UPDATE_STATUS_PENDING:
;;;332            {
;;;333                APP_PRINT_INFO1("app_handle_conn_param_update_evt update pending: conn_id %d", conn_id);
;;;334            }
;;;335            break;
;;;336    
;;;337        default:
;;;338            break;
;;;339        }
;;;340    }
;;;341    
;;;342    /**
;;;343     * @brief    All the BT GAP MSG are pre-handled in this function.
;;;344     * @note     Then the event handling function shall be called according to the
;;;345     *           subtype of T_IO_MSG
;;;346     * @param[in] p_gap_msg Pointer to GAP msg
;;;347     * @return   void
;;;348     */
;;;349    void app_handle_gap_msg(T_IO_MSG *p_gap_msg)
;;;350    {
        0x00209fa6:    b57f        ..      PUSH     {r0-r6,lr}
        0x00209fa8:    4605        .F      MOV      r5,r0
;;;351        T_LE_GAP_MSG gap_msg;
;;;352        uint8_t conn_id;
;;;353        memcpy(&gap_msg, &p_gap_msg->u.param, sizeof(p_gap_msg->u.param));
;;;354    
;;;355        APP_PRINT_TRACE1("app_handle_gap_msg: subtype %d", p_gap_msg->subtype);
        0x00209faa:    8843        C.      LDRH     r3,[r0,#2]
        0x00209fac:    6844        Dh      LDR      r4,[r0,#4]
        0x00209fae:    4962        bI      LDR      r1,[pc,#392] ; [0x20a138] = 0x8801970
        0x00209fb0:    4848        HH      LDR      r0,[pc,#288] ; [0x20a0d4] = 0x21103002
        0x00209fb2:    2201        ."      MOVS     r2,#1
        0x00209fb4:    3140        @1      ADDS     r1,r1,#0x40
        0x00209fb6:    1c40        @.      ADDS     r0,r0,#1
        0x00209fb8:    f5fdfd51    ..Q.    BL       log_buffer ; 0x7a5e
;;;356        switch (p_gap_msg->subtype)
        0x00209fbc:    886b        k.      LDRH     r3,[r5,#2]
        0x00209fbe:    2000        .       MOVS     r0,#0
        0x00209fc0:    4d44        DM      LDR      r5,[pc,#272] ; [0x20a0d4] = 0x21103002
        0x00209fc2:    2b0b        .+      CMP      r3,#0xb
        0x00209fc4:    d27d        }.      BCS      0x20a0c2 ; app_handle_gap_msg + 284
        0x00209fc6:    e8dff003    ....    TBB      [pc,r3]
    $d
        0x00209fca:    067c        |.      DCW    1660
        0x00209fcc:    22141a0c    ..."    DCD    571742732
        0x00209fd0:    4b655b37    7[eK    DCD    1264933687
        0x00209fd4:    002a        *.      DCW    42
    $t
;;;357        {
;;;358        case GAP_MSG_LE_DEV_STATE_CHANGE:
;;;359            {
;;;360                app_handle_dev_state_evt(gap_msg.msg_data.gap_dev_state_change.new_state,
        0x00209fd6:    b004        ..      ADD      sp,sp,#0x10
        0x00209fd8:    4620         F      MOV      r0,r4
        0x00209fda:    0c21        !.      LSRS     r1,r4,#16
        0x00209fdc:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00209fe0:    e7a5        ..      B        app_handle_dev_state_evt ; 0x209f2e
        0x00209fe2:    b004        ..      ADD      sp,sp,#0x10
        0x00209fe4:    0c22        ".      LSRS     r2,r4,#16
        0x00209fe6:    f3c42107    ...!    UBFX     r1,r4,#8,#8
        0x00209fea:    b2e0        ..      UXTB     r0,r4
;;;361                                         gap_msg.msg_data.gap_dev_state_change.cause);
;;;362            }
;;;363            break;
;;;364    
;;;365        case GAP_MSG_LE_CONN_STATE_CHANGE:
;;;366            {
;;;367                app_handle_conn_state_evt(gap_msg.msg_data.gap_conn_state_change.conn_id,
        0x00209fec:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00209ff0:    e74a        J.      B        app_handle_conn_state_evt ; 0x209e88
        0x00209ff2:    b004        ..      ADD      sp,sp,#0x10
        0x00209ff4:    0c21        !.      LSRS     r1,r4,#16
        0x00209ff6:    b2e0        ..      UXTB     r0,r4
;;;368                                          (T_GAP_CONN_STATE)gap_msg.msg_data.gap_conn_state_change.new_state,
;;;369                                          gap_msg.msg_data.gap_conn_state_change.disc_cause);
;;;370            }
;;;371            break;
;;;372    
;;;373        case GAP_MSG_LE_CONN_MTU_INFO:
;;;374            {
;;;375                app_handle_conn_mtu_info_evt(gap_msg.msg_data.gap_conn_mtu_info.conn_id,
        0x00209ff8:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00209ffc:    e735        5.      B        app_handle_conn_mtu_info_evt ; 0x209e6a
        0x00209ffe:    b004        ..      ADD      sp,sp,#0x10
        0x0020a000:    0c22        ".      LSRS     r2,r4,#16
        0x0020a002:    f3c42107    ...!    UBFX     r1,r4,#8,#8
        0x0020a006:    b2e0        ..      UXTB     r0,r4
;;;376                                             gap_msg.msg_data.gap_conn_mtu_info.mtu_size);
;;;377            }
;;;378            break;
;;;379    
;;;380        case GAP_MSG_LE_CONN_PARAM_UPDATE:
;;;381            {
;;;382                app_handle_conn_param_update_evt(gap_msg.msg_data.gap_conn_param_update.conn_id,
        0x0020a008:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020a00c:    e6aa        ..      B        app_handle_conn_param_update_evt ; 0x209d64
        0x0020a00e:    b004        ..      ADD      sp,sp,#0x10
        0x0020a010:    0c22        ".      LSRS     r2,r4,#16
        0x0020a012:    f3c42107    ...!    UBFX     r1,r4,#8,#8
        0x0020a016:    b2e0        ..      UXTB     r0,r4
;;;383                                                 gap_msg.msg_data.gap_conn_param_update.status,
;;;384                                                 gap_msg.msg_data.gap_conn_param_update.cause);
;;;385            }
;;;386            break;
;;;387    
;;;388        case GAP_MSG_LE_AUTHEN_STATE_CHANGE:
;;;389            {
;;;390                app_handle_authen_state_evt(gap_msg.msg_data.gap_authen_state.conn_id,
        0x0020a018:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020a01c:    e662        b.      B        app_handle_authen_state_evt ; 0x209ce4
        0x0020a01e:    b2e0        ..      UXTB     r0,r4
;;;391                                            gap_msg.msg_data.gap_authen_state.new_state,
;;;392                                            gap_msg.msg_data.gap_authen_state.status);
;;;393            }
;;;394            break;
;;;395    
;;;396        case GAP_MSG_LE_BOND_JUST_WORK:
;;;397            {
;;;398                conn_id = gap_msg.msg_data.gap_bond_just_work_conf.conn_id;
;;;399                le_bond_just_work_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x0020a020:    2101        .!      MOVS     r1,#1
        0x0020a022:    f012f96c    ..l.    BL       le_bond_just_work_confirm ; 0x21c2fe
;;;400                APP_PRINT_INFO0("GAP_MSG_LE_BOND_JUST_WORK");
        0x0020a026:    b004        ..      ADD      sp,sp,#0x10
        0x0020a028:    4628        (F      MOV      r0,r5
        0x0020a02a:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020a02e:    4942        BI      LDR      r1,[pc,#264] ; [0x20a138] = 0x8801970
        0x0020a030:    2200        ."      MOVS     r2,#0
        0x0020a032:    3160        `1      ADDS     r1,r1,#0x60
        0x0020a034:    f5fdbd13    ....    B        log_buffer ; 0x7a5e
;;;401            }
;;;402            break;
;;;403    
;;;404        case GAP_MSG_LE_BOND_PASSKEY_DISPLAY:
;;;405            {
;;;406                uint32_t display_value = 0;
        0x0020a038:    b2e4        ..      UXTB     r4,r4
;;;407                conn_id = gap_msg.msg_data.gap_bond_passkey_display.conn_id;
;;;408                le_bond_get_display_key(conn_id, &display_value);
        0x0020a03a:    9001        ..      STR      r0,[sp,#4]
        0x0020a03c:    a901        ..      ADD      r1,sp,#4
        0x0020a03e:    4620         F      MOV      r0,r4
        0x0020a040:    f642f9d3    B...    BL       le_bond_get_display_key ; 0x4c3ea
;;;409                APP_PRINT_INFO2("GAP_MSG_LE_BOND_PASSKEY_DISPLAY: conn_id %d, passkey %d",
        0x0020a044:    9801        ..      LDR      r0,[sp,#4]
        0x0020a046:    493c        <I      LDR      r1,[pc,#240] ; [0x20a138] = 0x8801970
        0x0020a048:    9000        ..      STR      r0,[sp,#0]
        0x0020a04a:    4623        #F      MOV      r3,r4
        0x0020a04c:    2202        ."      MOVS     r2,#2
        0x0020a04e:    3180        .1      ADDS     r1,r1,#0x80
        0x0020a050:    4628        (F      MOV      r0,r5
        0x0020a052:    f5fdfd04    ....    BL       log_buffer ; 0x7a5e
;;;410                                conn_id, display_value);
;;;411                le_bond_passkey_display_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x0020a056:    2101        .!      MOVS     r1,#1
        0x0020a058:    4620         F      MOV      r0,r4
        0x0020a05a:    f642fa0b    B...    BL       le_bond_passkey_display_confirm ; 0x4c474
        0x0020a05e:    bd7f        ..      POP      {r0-r6,pc}
;;;412    #if 0 //by vsop			
;;;413                data_uart_print("GAP_MSG_LE_BOND_PASSKEY_DISPLAY: conn_id %d, passkey %d\r\n",
;;;414                                conn_id,
;;;415                                display_value);
;;;416    #endif
;;;417            }
;;;418            break;
;;;419    
;;;420        case GAP_MSG_LE_BOND_USER_CONFIRMATION:
;;;421            {
;;;422                uint32_t display_value = 0;
        0x0020a060:    b2e4        ..      UXTB     r4,r4
;;;423                conn_id = gap_msg.msg_data.gap_bond_user_conf.conn_id;
;;;424                le_bond_get_display_key(conn_id, &display_value);
        0x0020a062:    9001        ..      STR      r0,[sp,#4]
        0x0020a064:    a901        ..      ADD      r1,sp,#4
        0x0020a066:    4620         F      MOV      r0,r4
        0x0020a068:    f642f9bf    B...    BL       le_bond_get_display_key ; 0x4c3ea
;;;425                APP_PRINT_INFO2("GAP_MSG_LE_BOND_USER_CONFIRMATION: conn_id %d, passkey %d",
        0x0020a06c:    9801        ..      LDR      r0,[sp,#4]
        0x0020a06e:    4932        2I      LDR      r1,[pc,#200] ; [0x20a138] = 0x8801970
        0x0020a070:    9000        ..      STR      r0,[sp,#0]
        0x0020a072:    4623        #F      MOV      r3,r4
        0x0020a074:    2202        ."      MOVS     r2,#2
        0x0020a076:    31bc        .1      ADDS     r1,r1,#0xbc
        0x0020a078:    4628        (F      MOV      r0,r5
        0x0020a07a:    f5fdfcf0    ....    BL       log_buffer ; 0x7a5e
        0x0020a07e:    bd7f        ..      POP      {r0-r6,pc}
;;;426                                conn_id, display_value);
;;;427    #if 0 //by vsop			
;;;428                data_uart_print("GAP_MSG_LE_BOND_USER_CONFIRMATION: conn_id %d, passkey %d\r\n",
;;;429                                conn_id,
;;;430                                display_value);
;;;431    #endif
;;;432                //le_bond_user_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;433            }
;;;434            break;
;;;435    
;;;436        case GAP_MSG_LE_BOND_PASSKEY_INPUT:
;;;437            {
;;;438                //uint32_t passkey = 888888;
;;;439                conn_id = gap_msg.msg_data.gap_bond_passkey_input.conn_id;
;;;440                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d", conn_id);
        0x0020a080:    492d        -I      LDR      r1,[pc,#180] ; [0x20a138] = 0x8801970
        0x0020a082:    2201        ."      MOVS     r2,#1
        0x0020a084:    b2e3        ..      UXTB     r3,r4
        0x0020a086:    31fc        .1      ADDS     r1,r1,#0xfc
        0x0020a088:    4628        (F      MOV      r0,r5
        0x0020a08a:    b004        ..      ADD      sp,sp,#0x10
        0x0020a08c:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020a090:    f5fdbce5    ....    B        log_buffer ; 0x7a5e
;;;441    #if 0 //by vsop			
;;;442                data_uart_print("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d\r\n", conn_id);
;;;443    #endif
;;;444                //le_bond_passkey_input_confirm(conn_id, passkey, GAP_CFM_CAUSE_ACCEPT);
;;;445            }
;;;446            break;
;;;447    
;;;448        case GAP_MSG_LE_BOND_OOB_INPUT:
;;;449            {
;;;450                uint8_t oob_data[GAP_OOB_LEN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        0x0020a094:    9000        ..      STR      r0,[sp,#0]
        0x0020a096:    9001        ..      STR      r0,[sp,#4]
        0x0020a098:    9002        ..      STR      r0,[sp,#8]
        0x0020a09a:    b2e4        ..      UXTB     r4,r4
;;;451                conn_id = gap_msg.msg_data.gap_bond_oob_input.conn_id;
;;;452                APP_PRINT_INFO1("GAP_MSG_LE_BOND_OOB_INPUT: conn_id %d", conn_id);
        0x0020a09c:    9003        ..      STR      r0,[sp,#0xc]
        0x0020a09e:    4623        #F      MOV      r3,r4
        0x0020a0a0:    2201        ."      MOVS     r2,#1
        0x0020a0a2:    493f        ?I      LDR      r1,[pc,#252] ; [0x20a1a0] = 0x8801a9c
        0x0020a0a4:    4628        (F      MOV      r0,r5
        0x0020a0a6:    f5fdfcda    ....    BL       log_buffer ; 0x7a5e
;;;453                le_bond_set_param(GAP_PARAM_BOND_OOB_DATA, GAP_OOB_LEN, oob_data);
        0x0020a0aa:    466a        jF      MOV      r2,sp
        0x0020a0ac:    2110        .!      MOVS     r1,#0x10
        0x0020a0ae:    f44f7004    O..p    MOV      r0,#0x210
        0x0020a0b2:    f642f89c    B...    BL       le_bond_set_param ; 0x4c1ee
;;;454                le_bond_oob_input_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x0020a0b6:    2101        .!      MOVS     r1,#1
        0x0020a0b8:    4620         F      MOV      r0,r4
        0x0020a0ba:    f642f97c    B.|.    BL       le_bond_oob_input_confirm ; 0x4c3b6
        0x0020a0be:    bd7f        ..      POP      {r0-r6,pc}
        0x0020a0c0:    e7ff        ..      B        0x20a0c2 ; app_handle_gap_msg + 284
;;;455            }
;;;456            break;
;;;457    
;;;458        default:
;;;459            APP_PRINT_ERROR1("app_handle_gap_msg: unknown subtype %d", p_gap_msg->subtype);
        0x0020a0c2:    4937        7I      LDR      r1,[pc,#220] ; [0x20a1a0] = 0x8801a9c
        0x0020a0c4:    4803        .H      LDR      r0,[pc,#12] ; [0x20a0d4] = 0x21103002
        0x0020a0c6:    2201        ."      MOVS     r2,#1
        0x0020a0c8:    312c        ,1      ADDS     r1,r1,#0x2c
        0x0020a0ca:    1e80        ..      SUBS     r0,r0,#2
;;;460            break;
        0x0020a0cc:    e7dd        ..      B        0x20a08a ; app_handle_gap_msg + 228
    $d
        0x0020a0ce:    0000        ..      DCW    0
        0x0020a0d0:    08801724    $...    DCD    142612260
        0x0020a0d4:    21103002    .0.!    DCD    554708994
        0x0020a0d8:    08801828    (...    DCD    142612520
        0x0020a0dc:    0020d1cf    .. .    DCD    2150863
        0x0020a0e0:    75617323    #sau    DCD    1969320739
        0x0020a0e4:    21236874    th#!    DCD    555968628
        0x0020a0e8:    5b216425    %d![    DCD    1528914981
        0x0020a0ec:    78323025    %02x    DCD    2016555045
        0x0020a0f0:    78323025    %02x    DCD    2016555045
        0x0020a0f4:    78323025    %02x    DCD    2016555045
        0x0020a0f8:    78323025    %02x    DCD    2016555045
        0x0020a0fc:    78323025    %02x    DCD    2016555045
        0x0020a100:    78323025    %02x    DCD    2016555045
        0x0020a104:    3e4e3c5d    ]<N>    DCD    1045314653
        0x0020a108:    00000a0d    ....    DCD    2573
        0x0020a10c:    75617323    #sau    DCD    1969320739
        0x0020a110:    21236874    th#!    DCD    555968628
        0x0020a114:    5b216425    %d![    DCD    1528914981
        0x0020a118:    78323025    %02x    DCD    2016555045
        0x0020a11c:    78323025    %02x    DCD    2016555045
        0x0020a120:    78323025    %02x    DCD    2016555045
        0x0020a124:    78323025    %02x    DCD    2016555045
        0x0020a128:    78323025    %02x    DCD    2016555045
        0x0020a12c:    78323025    %02x    DCD    2016555045
        0x0020a130:    3e593c5d    ]<Y>    DCD    1046035549
        0x0020a134:    00000a0d    ....    DCD    2573
        0x0020a138:    08801970    p...    DCD    142612848
        0x0020a13c:    08801c88    ....    DCD    142613640
        0x0020a140:    6e6f6323    #con    DCD    1852793635
        0x0020a144:    23766564    dev#    DCD    594961764
        0x0020a148:    21642521    !%d!    DCD    560211233
        0x0020a14c:    3230255b    [%02    DCD    842016091
        0x0020a150:    32302578    x%02    DCD    842016120
        0x0020a154:    32302578    x%02    DCD    842016120
        0x0020a158:    32302578    x%02    DCD    842016120
        0x0020a15c:    32302578    x%02    DCD    842016120
        0x0020a160:    32302578    x%02    DCD    842016120
        0x0020a164:    593c5d78    x]<Y    DCD    1497128312
        0x0020a168:    000a0d3e    >...    DCD    658750
        0x0020a16c:    73696423    #dis    DCD    1936286755
        0x0020a170:    25212363    c#!%    DCD    622928739
        0x0020a174:    255b2164    d![%    DCD    626729316
        0x0020a178:    25783230    02x%    DCD    628634160
        0x0020a17c:    25783230    02x%    DCD    628634160
        0x0020a180:    25783230    02x%    DCD    628634160
        0x0020a184:    25783230    02x%    DCD    628634160
        0x0020a188:    25783230    02x%    DCD    628634160
        0x0020a18c:    5d783230    02x]    DCD    1568158256
        0x0020a190:    0d3e593c    <Y>.    DCD    222189884
        0x0020a194:    0000000a    ....    DCD    10
        0x0020a198:    08801608    ....    DCD    142611976
        0x0020a19c:    0020d1a0    .. .    DCD    2150816
        0x0020a1a0:    08801a9c    ....    DCD    142613148
    $t
    app_handle_io_msg
;;; ..\..\..\src\sample\ble_central\central_app.c (68)
        0x0020a1a4:    b503        ..      PUSH     {r0,r1,lr}
        0x0020a1a6:    b081        ..      SUB      sp,sp,#4
        0x0020a1a8:    f8bd0004    ....    LDRH     r0,[sp,#4]
;;; ..\..\..\src\sample\ble_central\central_app.c (68)
        0x0020a1ac:    b160        `.      CBZ      r0,0x20a1c8 ; app_handle_io_msg + 36
;;;69         uint16_t msg_type = io_msg.type;
;;;70         uint8_t rx_char;
;;;71     
;;;72         switch (msg_type)
        0x0020a1ae:    2803        .(      CMP      r0,#3
        0x0020a1b0:    d109        ..      BNE      0x20a1c6 ; app_handle_io_msg + 34
;;;73         {
;;;74         case IO_MSG_TYPE_BT_STATUS:
;;;75             {
;;;76                 app_handle_gap_msg(&io_msg);
;;;77             }
;;;78             break;
;;;79         case IO_MSG_TYPE_UART:
;;;80             /* We handle user command informations from Data UART in this branch. */
;;;81             rx_char = (uint8_t)io_msg.subtype;
        0x0020a1b2:    f8bd0006    ....    LDRH     r0,[sp,#6]
        0x0020a1b6:    f88d0000    ....    STRB     r0,[sp,#0]
;;;82             user_cmd_collect(&user_cmd_if, &rx_char, sizeof(rx_char), user_cmd_table);
        0x0020a1ba:    4bf8        .K      LDR      r3,[pc,#992] ; [0x20a59c] = 0x21c894
        0x0020a1bc:    2201        ."      MOVS     r2,#1
        0x0020a1be:    4669        iF      MOV      r1,sp
        0x0020a1c0:    48f7        .H      LDR      r0,[pc,#988] ; [0x20a5a0] = 0x20cff0
        0x0020a1c2:    f000ff0a    ....    BL       user_cmd_collect ; 0x20afda
;;;83             break;
;;;84         default:
;;;85             break;
;;;86         }
;;;87     }
        0x0020a1c6:    bd0e        ..      POP      {r1-r3,pc}
        0x0020a1c8:    a801        ..      ADD      r0,sp,#4
        0x0020a1ca:    f7fffeec    ....    BL       app_handle_gap_msg ; 0x209fa6
        0x0020a1ce:    bd0e        ..      POP      {r1-r3,pc}
    filter_scan_info_by_name
;;;88     
;;;89     /**
;;;90      * @brief    Handle msg GAP_MSG_LE_DEV_STATE_CHANGE
;;;91      * @note     All the gap device state events are pre-handled in this function.
;;;92      *           Then the event handling function shall be called according to the new_state
;;;93      * @param[in] new_state  New gap device state
;;;94      * @param[in] cause GAP device state change cause
;;;95      * @return   void
;;;96      */
;;;97     void app_handle_dev_state_evt(T_GAP_DEV_STATE new_state, uint16_t cause)
;;;98     {
;;;99         APP_PRINT_INFO3("app_handle_dev_state_evt: init state  %d, scan state %d, cause 0x%x",
;;;100                        new_state.gap_init_state,
;;;101                        new_state.gap_scan_state, cause);
;;;102        if (gap_dev_state.gap_init_state != new_state.gap_init_state)
;;;103        {
;;;104            if (new_state.gap_init_state == GAP_INIT_STATE_STACK_READY)
;;;105            {
;;;106                uint8_t bt_addr[6];
;;;107                APP_PRINT_INFO0("GAP stack ready");
;;;108                /*stack ready*/
;;;109                gap_get_param(GAP_PARAM_BD_ADDR, bt_addr);
;;;110    #if 0	//by vsop	
;;;111                data_uart_print("local bd addr: 0x%2x:%2x:%2x:%2x:%2x:%2x\r\n",
;;;112                                bt_addr[5],
;;;113                                bt_addr[4],
;;;114                                bt_addr[3],
;;;115                                bt_addr[2],
;;;116                                bt_addr[1],
;;;117                                bt_addr[0]);
;;;118    #endif
;;;119            }
;;;120        }
;;;121    
;;;122        if (gap_dev_state.gap_scan_state != new_state.gap_scan_state)
;;;123        {
;;;124            if (new_state.gap_scan_state == GAP_SCAN_STATE_IDLE)
;;;125            {
;;;126                APP_PRINT_INFO0("GAP scan stop");
;;;127                //data_uart_print("GAP scan stop\r\n"); 	//by vsop
;;;128            }
;;;129            else if (new_state.gap_scan_state == GAP_SCAN_STATE_SCANNING)
;;;130            {
;;;131                APP_PRINT_INFO0("GAP scan start");
;;;132                //data_uart_print("GAP scan start\r\n");	//by vsop
;;;133            }
;;;134        }
;;;135    
;;;136        gap_dev_state = new_state;
;;;137    }
;;;138    
;;;139    /**
;;;140     * @brief    Handle msg GAP_MSG_LE_CONN_STATE_CHANGE
;;;141     * @note     All the gap conn state events are pre-handled in this function.
;;;142     *           Then the event handling function shall be called according to the new_state
;;;143     * @param[in] conn_id Connection ID
;;;144     * @param[in] new_state  New gap connection state
;;;145     * @param[in] disc_cause Use this cause when new_state is GAP_CONN_STATE_DISCONNECTED
;;;146     * @return   void
;;;147     */
;;;148    void app_handle_conn_state_evt(uint8_t conn_id, T_GAP_CONN_STATE new_state, uint16_t disc_cause)
;;;149    {
;;;150        if (conn_id >= APP_MAX_LINKS)
;;;151        {
;;;152            return;
;;;153        }
;;;154    
;;;155        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d, conn_state(%d -> %d), disc_cause 0x%x",
;;;156                        conn_id, app_link_table[conn_id].conn_state, new_state, disc_cause);
;;;157    
;;;158        app_link_table[conn_id].conn_state = new_state;
;;;159        switch (new_state)
;;;160        {
;;;161        case GAP_CONN_STATE_DISCONNECTED:
;;;162            {
;;;163                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
;;;164                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
;;;165                {
;;;166                    APP_PRINT_ERROR2("app_handle_conn_state_evt: connection lost, conn_id %d, cause 0x%x", conn_id,
;;;167                                     disc_cause);
;;;168                }
;;;169    #if 0 //by vsop	
;;;170                data_uart_print("Disconnect conn_id %d\r\n", conn_id);
;;;171    #else
;;;172    			//data_uart_print("#disc#!%d!<Y>\r\n", conn_id);
;;;173    			data_uart_print("#disc#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;174    						conn_id,
;;;175    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;176    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;177    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;178    #endif
;;;179                memset(&app_link_table[conn_id], 0, sizeof(T_APP_LINK));
;;;180            }
;;;181            break;
;;;182    
;;;183        case GAP_CONN_STATE_CONNECTED:
;;;184            {
;;;185            	//T_GAP_CAUSE cause;
;;;186                le_get_conn_addr(conn_id, app_link_table[conn_id].bd_addr,
;;;187                                 &app_link_table[conn_id].bd_type);
;;;188    #if 0 //by vsop			
;;;189                data_uart_print("Connected success conn_id %d\r\n", conn_id);
;;;190    #else
;;;191               // data_uart_print("#condev#!%d!<Y>\r\n", conn_id);	
;;;192    			data_uart_print("#condev#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;193    						conn_id,
;;;194    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;195    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;196    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;197    #if 0
;;;198    			//os_delay(1000);
;;;199    			//sauth dev
;;;200    			//cause = le_bond_pair(conn_id);
;;;201    			//data_uart_print("e_bond_pair cause=%d\r\n",cause);
;;;202    #endif															 
;;;203    #endif
;;;204            }
;;;205            break;
;;;206    
;;;207        default:
;;;208            break;
;;;209    
;;;210        }
;;;211    }
;;;212    
;;;213    /**
;;;214     * @brief    Handle msg GAP_MSG_LE_AUTHEN_STATE_CHANGE
;;;215     * @note     All the gap authentication state events are pre-handled in this function.
;;;216     *           Then the event handling function shall be called according to the new_state
;;;217     * @param[in] conn_id Connection ID
;;;218     * @param[in] new_state  New authentication state
;;;219     * @param[in] cause Use this cause when new_state is GAP_AUTHEN_STATE_COMPLETE
;;;220     * @return   void
;;;221     */
;;;222    void app_handle_authen_state_evt(uint8_t conn_id, uint8_t new_state, uint16_t cause)
;;;223    {
;;;224        APP_PRINT_INFO2("app_handle_authen_state_evt:conn_id %d, cause 0x%x", conn_id, cause);
;;;225    
;;;226        switch (new_state)
;;;227        {
;;;228        case GAP_AUTHEN_STATE_STARTED:
;;;229            {
;;;230                APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_STARTED");
;;;231            }
;;;232            break;
;;;233    
;;;234        case GAP_AUTHEN_STATE_COMPLETE:
;;;235            {
;;;236                if (cause == GAP_SUCCESS)
;;;237                {
;;;238    #if 0 //by vsop            
;;;239                    data_uart_print("Pair success\r\n");
;;;240    #else
;;;241    				//data_uart_print("#sauth#!%d!<Y>\r\n",conn_id);
;;;242    				data_uart_print("#sauth#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;243    						conn_id,
;;;244    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;245    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;246    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;247    #if 0
;;;248    			//os_delay(1000);
;;;249    			//simpcccd dev
;;;250    			//cause = simp_ble_client_set_v3_notify(conn_id, true);
;;;251    			 cause = simp_ble_client_set_v4_ind(conn_id, true);
;;;252    			data_uart_print("simp_ble_client_set_v3_notify cause=%d\r\n",cause);
;;;253    #endif
;;;254    
;;;255    #endif
;;;256                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair success");
;;;257    
;;;258                }
;;;259                else
;;;260                {
;;;261    #if 0 //by vsop            
;;;262                    data_uart_print("Pair failed: cause 0x%x\r\n", cause);
;;;263    #else
;;;264    				//data_uart_print("#sauth#!%d!<N>\r\n",conn_id);
;;;265    				data_uart_print("#sauth#!%d![%02x%02x%02x%02x%02x%02x]<N>\r\n",
;;;266    						conn_id,
;;;267    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;268    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;269    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;270    
;;;271    #endif            
;;;272                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair failed");
;;;273                }
;;;274            }
;;;275            break;
;;;276    
;;;277        default:
;;;278            {
;;;279                APP_PRINT_ERROR1("app_handle_authen_state_evt: unknown newstate %d", new_state);
;;;280            }
;;;281            break;
;;;282        }
;;;283    }
;;;284    
;;;285    /**
;;;286     * @brief    Handle msg GAP_MSG_LE_CONN_MTU_INFO
;;;287     * @note     This msg is used to inform APP that exchange mtu procedure is completed.
;;;288     * @param[in] conn_id Connection ID
;;;289     * @param[in] mtu_size  New mtu size
;;;290     * @return   void
;;;291     */
;;;292    void app_handle_conn_mtu_info_evt(uint8_t conn_id, uint16_t mtu_size)
;;;293    {
;;;294        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
;;;295        app_discov_services(conn_id, true);
;;;296    }
;;;297    
;;;298    /**
;;;299     * @brief    Handle msg GAP_MSG_LE_CONN_PARAM_UPDATE
;;;300     * @note     All the connection parameter update change  events are pre-handled in this function.
;;;301     * @param[in] conn_id Connection ID
;;;302     * @param[in] status  New update state
;;;303     * @param[in] cause Use this cause when status is GAP_CONN_PARAM_UPDATE_STATUS_FAIL
;;;304     * @return   void
;;;305     */
;;;306    void app_handle_conn_param_update_evt(uint8_t conn_id, uint8_t status, uint16_t cause)
;;;307    {
;;;308        switch (status)
;;;309        {
;;;310        case GAP_CONN_PARAM_UPDATE_STATUS_SUCCESS:
;;;311            {
;;;312                uint16_t conn_interval;
;;;313                uint16_t conn_slave_latency;
;;;314                uint16_t conn_supervision_timeout;
;;;315    
;;;316                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;317                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_slave_latency, conn_id);
;;;318                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;319                APP_PRINT_INFO4("app_handle_conn_param_update_evt update success:conn_id %d, conn_interval 0x%x, conn_slave_latency 0x%x, conn_supervision_timeout 0x%x",
;;;320                                conn_id, conn_interval, conn_slave_latency, conn_supervision_timeout);
;;;321            }
;;;322            break;
;;;323    
;;;324        case GAP_CONN_PARAM_UPDATE_STATUS_FAIL:
;;;325            {
;;;326                APP_PRINT_ERROR2("app_handle_conn_param_update_evt update failed: conn_id %d, cause 0x%x",
;;;327                                 conn_id, cause);
;;;328            }
;;;329            break;
;;;330    
;;;331        case GAP_CONN_PARAM_UPDATE_STATUS_PENDING:
;;;332            {
;;;333                APP_PRINT_INFO1("app_handle_conn_param_update_evt update pending: conn_id %d", conn_id);
;;;334            }
;;;335            break;
;;;336    
;;;337        default:
;;;338            break;
;;;339        }
;;;340    }
;;;341    
;;;342    /**
;;;343     * @brief    All the BT GAP MSG are pre-handled in this function.
;;;344     * @note     Then the event handling function shall be called according to the
;;;345     *           subtype of T_IO_MSG
;;;346     * @param[in] p_gap_msg Pointer to GAP msg
;;;347     * @return   void
;;;348     */
;;;349    void app_handle_gap_msg(T_IO_MSG *p_gap_msg)
;;;350    {
;;;351        T_LE_GAP_MSG gap_msg;
;;;352        uint8_t conn_id;
;;;353        memcpy(&gap_msg, &p_gap_msg->u.param, sizeof(p_gap_msg->u.param));
;;;354    
;;;355        APP_PRINT_TRACE1("app_handle_gap_msg: subtype %d", p_gap_msg->subtype);
;;;356        switch (p_gap_msg->subtype)
;;;357        {
;;;358        case GAP_MSG_LE_DEV_STATE_CHANGE:
;;;359            {
;;;360                app_handle_dev_state_evt(gap_msg.msg_data.gap_dev_state_change.new_state,
;;;361                                         gap_msg.msg_data.gap_dev_state_change.cause);
;;;362            }
;;;363            break;
;;;364    
;;;365        case GAP_MSG_LE_CONN_STATE_CHANGE:
;;;366            {
;;;367                app_handle_conn_state_evt(gap_msg.msg_data.gap_conn_state_change.conn_id,
;;;368                                          (T_GAP_CONN_STATE)gap_msg.msg_data.gap_conn_state_change.new_state,
;;;369                                          gap_msg.msg_data.gap_conn_state_change.disc_cause);
;;;370            }
;;;371            break;
;;;372    
;;;373        case GAP_MSG_LE_CONN_MTU_INFO:
;;;374            {
;;;375                app_handle_conn_mtu_info_evt(gap_msg.msg_data.gap_conn_mtu_info.conn_id,
;;;376                                             gap_msg.msg_data.gap_conn_mtu_info.mtu_size);
;;;377            }
;;;378            break;
;;;379    
;;;380        case GAP_MSG_LE_CONN_PARAM_UPDATE:
;;;381            {
;;;382                app_handle_conn_param_update_evt(gap_msg.msg_data.gap_conn_param_update.conn_id,
;;;383                                                 gap_msg.msg_data.gap_conn_param_update.status,
;;;384                                                 gap_msg.msg_data.gap_conn_param_update.cause);
;;;385            }
;;;386            break;
;;;387    
;;;388        case GAP_MSG_LE_AUTHEN_STATE_CHANGE:
;;;389            {
;;;390                app_handle_authen_state_evt(gap_msg.msg_data.gap_authen_state.conn_id,
;;;391                                            gap_msg.msg_data.gap_authen_state.new_state,
;;;392                                            gap_msg.msg_data.gap_authen_state.status);
;;;393            }
;;;394            break;
;;;395    
;;;396        case GAP_MSG_LE_BOND_JUST_WORK:
;;;397            {
;;;398                conn_id = gap_msg.msg_data.gap_bond_just_work_conf.conn_id;
;;;399                le_bond_just_work_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;400                APP_PRINT_INFO0("GAP_MSG_LE_BOND_JUST_WORK");
;;;401            }
;;;402            break;
;;;403    
;;;404        case GAP_MSG_LE_BOND_PASSKEY_DISPLAY:
;;;405            {
;;;406                uint32_t display_value = 0;
;;;407                conn_id = gap_msg.msg_data.gap_bond_passkey_display.conn_id;
;;;408                le_bond_get_display_key(conn_id, &display_value);
;;;409                APP_PRINT_INFO2("GAP_MSG_LE_BOND_PASSKEY_DISPLAY: conn_id %d, passkey %d",
;;;410                                conn_id, display_value);
;;;411                le_bond_passkey_display_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;412    #if 0 //by vsop			
;;;413                data_uart_print("GAP_MSG_LE_BOND_PASSKEY_DISPLAY: conn_id %d, passkey %d\r\n",
;;;414                                conn_id,
;;;415                                display_value);
;;;416    #endif
;;;417            }
;;;418            break;
;;;419    
;;;420        case GAP_MSG_LE_BOND_USER_CONFIRMATION:
;;;421            {
;;;422                uint32_t display_value = 0;
;;;423                conn_id = gap_msg.msg_data.gap_bond_user_conf.conn_id;
;;;424                le_bond_get_display_key(conn_id, &display_value);
;;;425                APP_PRINT_INFO2("GAP_MSG_LE_BOND_USER_CONFIRMATION: conn_id %d, passkey %d",
;;;426                                conn_id, display_value);
;;;427    #if 0 //by vsop			
;;;428                data_uart_print("GAP_MSG_LE_BOND_USER_CONFIRMATION: conn_id %d, passkey %d\r\n",
;;;429                                conn_id,
;;;430                                display_value);
;;;431    #endif
;;;432                //le_bond_user_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;433            }
;;;434            break;
;;;435    
;;;436        case GAP_MSG_LE_BOND_PASSKEY_INPUT:
;;;437            {
;;;438                //uint32_t passkey = 888888;
;;;439                conn_id = gap_msg.msg_data.gap_bond_passkey_input.conn_id;
;;;440                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d", conn_id);
;;;441    #if 0 //by vsop			
;;;442                data_uart_print("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d\r\n", conn_id);
;;;443    #endif
;;;444                //le_bond_passkey_input_confirm(conn_id, passkey, GAP_CFM_CAUSE_ACCEPT);
;;;445            }
;;;446            break;
;;;447    
;;;448        case GAP_MSG_LE_BOND_OOB_INPUT:
;;;449            {
;;;450                uint8_t oob_data[GAP_OOB_LEN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
;;;451                conn_id = gap_msg.msg_data.gap_bond_oob_input.conn_id;
;;;452                APP_PRINT_INFO1("GAP_MSG_LE_BOND_OOB_INPUT: conn_id %d", conn_id);
;;;453                le_bond_set_param(GAP_PARAM_BOND_OOB_DATA, GAP_OOB_LEN, oob_data);
;;;454                le_bond_oob_input_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;455            }
;;;456            break;
;;;457    
;;;458        default:
;;;459            APP_PRINT_ERROR1("app_handle_gap_msg: unknown subtype %d", p_gap_msg->subtype);
;;;460            break;
;;;461        }
;;;462    }
;;;463    
;;;464    bool filter_scan_info_by_name(uint8_t *name, T_LE_SCAN_INFO *scan_info)
;;;465    {
        0x0020a1d0:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020a1d4:    4680        .F      MOV      r8,r0
        0x0020a1d6:    b088        ..      SUB      sp,sp,#0x20
        0x0020a1d8:    460e        .F      MOV      r6,r1
        0x0020a1da:    2000        .       MOVS     r0,#0
;;; ..\..\..\src\sample\ble_central\central_app.c (465)
        0x0020a1dc:    e01f        ..      B        0x20a21e ; filter_scan_info_by_name + 78
;;;466        uint8_t buffer[32];
;;;467        uint8_t pos = 0;
;;;468    
;;;469        while (pos < scan_info->data_len)
;;;470        {
;;;471            /* Length of the AD structure. */
;;;472            uint8_t length = scan_info->data[pos++];
        0x0020a1de:    1831        1.      ADDS     r1,r6,r0
        0x0020a1e0:    1c40        @.      ADDS     r0,r0,#1
        0x0020a1e2:    7a8c        .z      LDRB     r4,[r1,#0xa]
        0x0020a1e4:    b2c5        ..      UXTB     r5,r0
;;;473            uint8_t type;
;;;474    
;;;475            if ((length > 0x01) && ((pos + length) <= 31))
        0x0020a1e6:    2c01        .,      CMP      r4,#1
        0x0020a1e8:    d917        ..      BLS      0x20a21a ; filter_scan_info_by_name + 74
        0x0020a1ea:    1928        (.      ADDS     r0,r5,r4
        0x0020a1ec:    281f        .(      CMP      r0,#0x1f
        0x0020a1ee:    d814        ..      BHI      0x20a21a ; filter_scan_info_by_name + 74
;;;476            {
;;;477                /* Copy the AD Data to buffer. */
;;;478                memcpy(buffer, scan_info->data + pos + 1, length - 1);
        0x0020a1f0:    1977        w.      ADDS     r7,r6,r5
        0x0020a1f2:    f107010b    ....    ADD      r1,r7,#0xb
        0x0020a1f6:    1e62        b.      SUBS     r2,r4,#1
        0x0020a1f8:    4668        hF      MOV      r0,sp
        0x0020a1fa:    f64ffe4e    O.N.    BL       __aeabi_memcpy ; 0x59e9a
;;;479                /* AD Type, one octet. */
;;;480                type = scan_info->data[pos];
        0x0020a1fe:    7ab8        .z      LDRB     r0,[r7,#0xa]
;;;481                switch (type)
        0x0020a200:    2809        .(      CMP      r0,#9
        0x0020a202:    d10a        ..      BNE      0x20a21a ; filter_scan_info_by_name + 74
;;;482                {
;;;483    	            case GAP_ADTYPE_LOCAL_NAME_COMPLETE:
;;;484    	                {
;;;485    	                    buffer[length - 1] = '\0';
        0x0020a204:    eb0d0104    ....    ADD      r1,sp,r4
        0x0020a208:    2000        .       MOVS     r0,#0
        0x0020a20a:    f8010c01    ....    STRB     r0,[r1,#-1]
;;;486    	                    //data_uart_print("GAP_ADTYPE_LOCAL_NAME_XXX: %s\r\n", buffer);
;;;487    						if(strncmp(buffer,name,5)==0)return true;
        0x0020a20e:    2205        ."      MOVS     r2,#5
        0x0020a210:    4641        AF      MOV      r1,r8
        0x0020a212:    4668        hF      MOV      r0,sp
        0x0020a214:    f012fa26    ..&.    BL       strncmp ; 0x21c664
        0x0020a218:    b140        @.      CBZ      r0,0x20a22c ; filter_scan_info_by_name + 92
;;;488    	                }
;;;489    	                break;
;;;490    	            default:
;;;491    	                break;
;;;492    	            }
;;;493            }
;;;494            pos += length;
        0x0020a21a:    1928        (.      ADDS     r0,r5,r4
        0x0020a21c:    b2c0        ..      UXTB     r0,r0
        0x0020a21e:    7a71        qz      LDRB     r1,[r6,#9]
        0x0020a220:    4281        .B      CMP      r1,r0
        0x0020a222:    d8dc        ..      BHI      0x20a1de ; filter_scan_info_by_name + 14
;;;495        }
;;;496    	return false;
        0x0020a224:    2000        .       MOVS     r0,#0
;;;497    }
        0x0020a226:    b008        ..      ADD      sp,sp,#0x20
        0x0020a228:    e8bd81f0    ....    POP      {r4-r8,pc}
        0x0020a22c:    2001        .       MOVS     r0,#1
        0x0020a22e:    e7fa        ..      B        0x20a226 ; filter_scan_info_by_name + 86
    app_parse_scan_info
;;;498    
;;;499    
;;;500    /** @} */ /* End of group CENTRAL_GAP_MSG */
;;;501    void app_parse_scan_info(T_LE_SCAN_INFO *scan_info)
;;;502    {
        0x0020a230:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0020a234:    4680        .F      MOV      r8,r0
        0x0020a236:    b08a        ..      SUB      sp,sp,#0x28
        0x0020a238:    2500        .%      MOVS     r5,#0
        0x0020a23a:    a0da        ..      ADR      r0,{pc}+0x36a ; 0x20a5a4
        0x0020a23c:    f000fd60    ..`.    BL       data_uart_print ; 0x20ad00
;;;503        uint8_t buffer[32];
        0x0020a240:    f10d0904    ....    ADD      r9,sp,#4
        0x0020a244:    f8dfa37c    ..|.    LDR      r10,[pc,#892] ; [0x20a5c4] = 0x21500000
;;;504        uint8_t pos = 0;
;;;505    	data_uart_print("+++++++++++++++++++++++++++++\r\n");
;;;506    
;;;507        while (pos < scan_info->data_len)
        0x0020a248:    e0a3        ..      B        0x20a392 ; app_parse_scan_info + 354
;;;508        {
;;;509            /* Length of the AD structure. */
;;;510            uint8_t length = scan_info->data[pos++];
        0x0020a24a:    eb080005    ....    ADD      r0,r8,r5
        0x0020a24e:    1c6d        m.      ADDS     r5,r5,#1
        0x0020a250:    7a84        .z      LDRB     r4,[r0,#0xa]
        0x0020a252:    b2ee        ..      UXTB     r6,r5
;;;511            uint8_t type;
;;;512    
;;;513            if ((length > 0x01) && ((pos + length) <= 31))
        0x0020a254:    2c01        .,      CMP      r4,#1
        0x0020a256:    d93e        >.      BLS      0x20a2d6 ; app_parse_scan_info + 166
        0x0020a258:    1930        0.      ADDS     r0,r6,r4
        0x0020a25a:    281f        .(      CMP      r0,#0x1f
        0x0020a25c:    d83b        ;.      BHI      0x20a2d6 ; app_parse_scan_info + 166
;;;514            {
;;;515                /* Copy the AD Data to buffer. */
;;;516                memcpy(buffer, scan_info->data + pos + 1, length - 1);
        0x0020a25e:    eb080706    ....    ADD      r7,r8,r6
        0x0020a262:    f107010b    ....    ADD      r1,r7,#0xb
        0x0020a266:    1e62        b.      SUBS     r2,r4,#1
        0x0020a268:    a801        ..      ADD      r0,sp,#4
        0x0020a26a:    f64ffe16    O...    BL       __aeabi_memcpy ; 0x59e9a
;;;517                /* AD Type, one octet. */
;;;518                type = scan_info->data[pos];
        0x0020a26e:    7abd        .z      LDRB     r5,[r7,#0xa]
;;;519    
;;;520                data_uart_print("app_parse_scan_info: AD Structure Info: AD type 0x%x, AD Data Length %d\r\n", type,
        0x0020a270:    1e62        b.      SUBS     r2,r4,#1
        0x0020a272:    4629        )F      MOV      r1,r5
        0x0020a274:    48d4        .H      LDR      r0,[pc,#848] ; [0x20a5c8] = 0x21caac
        0x0020a276:    f000fd43    ..C.    BL       data_uart_print ; 0x20ad00
;;;521                                 length - 1);
;;;522    
;;;523                switch (type)
        0x0020a27a:    2d09        .-      CMP      r5,#9
        0x0020a27c:    d042        B.      BEQ      0x20a304 ; app_parse_scan_info + 212
        0x0020a27e:    dc07        ..      BGT      0x20a290 ; app_parse_scan_info + 96
        0x0020a280:    d216        ..      BCS      0x20a2b0 ; app_parse_scan_info + 128
        0x0020a282:    e8dff005    ....    TBB      [pc,r5]
    $d
        0x0020a286:    1815        ..      DCW    6165
        0x0020a288:    29291b1b    ..))    DCD    690559771
        0x0020a28c:    003f3636    66?.    DCD    4142646
    $t
        0x0020a290:    2d15        .-      CMP      r5,#0x15
        0x0020a292:    d02e        ..      BEQ      0x20a2f2 ; app_parse_scan_info + 194
        0x0020a294:    dc06        ..      BGT      0x20a2a4 ; app_parse_scan_info + 116
        0x0020a296:    2d0a        .-      CMP      r5,#0xa
        0x0020a298:    d03c        <.      BEQ      0x20a314 ; app_parse_scan_info + 228
        0x0020a29a:    2d12        .-      CMP      r5,#0x12
        0x0020a29c:    d03d        =.      BEQ      0x20a31a ; app_parse_scan_info + 234
        0x0020a29e:    2d14        .-      CMP      r5,#0x14
        0x0020a2a0:    d106        ..      BNE      0x20a2b0 ; app_parse_scan_info + 128
        0x0020a2a2:    e00b        ..      B        0x20a2bc ; app_parse_scan_info + 140
        0x0020a2a4:    2d16        .-      CMP      r5,#0x16
        0x0020a2a6:    d043        C.      BEQ      0x20a330 ; app_parse_scan_info + 256
        0x0020a2a8:    2d19        .-      CMP      r5,#0x19
        0x0020a2aa:    d04f        O.      BEQ      0x20a34c ; app_parse_scan_info + 284
        0x0020a2ac:    2dff        .-      CMP      r5,#0xff
        0x0020a2ae:    d053        S.      BEQ      0x20a358 ; app_parse_scan_info + 296
        0x0020a2b0:    2500        .%      MOVS     r5,#0
        0x0020a2b2:    1e67        g.      SUBS     r7,r4,#1
        0x0020a2b4:    e069        i.      B        0x20a38a ; app_parse_scan_info + 346
;;;524                {
;;;525                case GAP_ADTYPE_FLAGS:
;;;526                    {
;;;527                        /* (flags & 0x01) -- LE Limited Discoverable Mode */
;;;528                        /* (flags & 0x02) -- LE General Discoverable Mode */
;;;529                        /* (flags & 0x04) -- BR/EDR Not Supported */
;;;530                        /* (flags & 0x08) -- Simultaneous LE and BR/EDR to Same Device Capable (Controller) */
;;;531                        /* (flags & 0x10) -- Simultaneous LE and BR/EDR to Same Device Capable (Host) */
;;;532                        uint8_t flags = scan_info->data[pos + 1];
        0x0020a2b6:    7af9        .z      LDRB     r1,[r7,#0xb]
;;;533                        data_uart_print("GAP_ADTYPE_FLAGS: 0x%x\r\n", flags);
        0x0020a2b8:    a0c4        ..      ADR      r0,{pc}+0x314 ; 0x20a5cc
;;;534                    }
;;;535                    break;
        0x0020a2ba:    e04a        J.      B        0x20a352 ; app_parse_scan_info + 290
        0x0020a2bc:    1e60        `.      SUBS     r0,r4,#1
;;;536    
;;;537                case GAP_ADTYPE_16BIT_MORE:
;;;538                case GAP_ADTYPE_16BIT_COMPLETE:
;;;539                case GAP_ADTYPE_SERVICES_LIST_16BIT:
;;;540                    {
;;;541                        uint16_t *p_uuid = (uint16_t *)(buffer);
        0x0020a2be:    af01        ..      ADD      r7,sp,#4
;;;542                        uint8_t i = length - 1;
        0x0020a2c0:    b2c5        ..      UXTB     r5,r0
;;;543    
;;;544                        while (i >= 2)
        0x0020a2c2:    e006        ..      B        0x20a2d2 ; app_parse_scan_info + 162
        0x0020a2c4:    f8371b02    7...    LDRH     r1,[r7],#2
        0x0020a2c8:    a0c7        ..      ADR      r0,{pc}+0x320 ; 0x20a5e8
        0x0020a2ca:    f000fd19    ....    BL       data_uart_print ; 0x20ad00
        0x0020a2ce:    1ead        ..      SUBS     r5,r5,#2
        0x0020a2d0:    b2ed        ..      UXTB     r5,r5
        0x0020a2d2:    2d02        .-      CMP      r5,#2
        0x0020a2d4:    d2f6        ..      BCS      0x20a2c4 ; app_parse_scan_info + 148
        0x0020a2d6:    e05a        Z.      B        0x20a38e ; app_parse_scan_info + 350
        0x0020a2d8:    1e60        `.      SUBS     r0,r4,#1
;;;545                        {
;;;546                            data_uart_print("GAP_ADTYPE_16BIT_XXX: 0x%x\r\n", *p_uuid++);
;;;547                            i -= 2;
;;;548                        }
;;;549                    }
;;;550                    break;
;;;551    
;;;552                case GAP_ADTYPE_32BIT_MORE:
;;;553                case GAP_ADTYPE_32BIT_COMPLETE:
;;;554                    {
;;;555                        uint32_t *p_uuid = (uint32_t *)(buffer);
        0x0020a2da:    af01        ..      ADD      r7,sp,#4
;;;556                        uint8_t    i     = length - 1;
        0x0020a2dc:    b2c5        ..      UXTB     r5,r0
;;;557    
;;;558                        while (i >= 4)
        0x0020a2de:    e005        ..      B        0x20a2ec ; app_parse_scan_info + 188
        0x0020a2e0:    cf02        ..      LDM      r7!,{r1}
        0x0020a2e2:    a0c9        ..      ADR      r0,{pc}+0x326 ; 0x20a608
        0x0020a2e4:    f000fd0c    ....    BL       data_uart_print ; 0x20ad00
        0x0020a2e8:    1f2d        -.      SUBS     r5,r5,#4
        0x0020a2ea:    b2ed        ..      UXTB     r5,r5
        0x0020a2ec:    2d04        .-      CMP      r5,#4
        0x0020a2ee:    d2f7        ..      BCS      0x20a2e0 ; app_parse_scan_info + 176
        0x0020a2f0:    e04d        M.      B        0x20a38e ; app_parse_scan_info + 350
;;;559                        {
;;;560                            data_uart_print("GAP_ADTYPE_32BIT_XXX: 0x%x\r\n", *p_uuid++);
;;;561                            i -= 4;
;;;562                        }
;;;563                    }
;;;564                    break;
;;;565    
;;;566                case GAP_ADTYPE_128BIT_MORE:
;;;567                case GAP_ADTYPE_128BIT_COMPLETE:
;;;568                case GAP_ADTYPE_SERVICES_LIST_128BIT:
;;;569                    {
;;;570                        uint32_t *p_uuid = (uint32_t *)(buffer);
;;;571                        data_uart_print("GAP_ADTYPE_128BIT_XXX: 0x%8.8x%8.8x%8.8x%8.8x\r\n",
        0x0020a2f2:    9801        ..      LDR      r0,[sp,#4]
        0x0020a2f4:    9000        ..      STR      r0,[sp,#0]
        0x0020a2f6:    e9dd2103    ...!    LDRD     r2,r1,[sp,#0xc]
        0x0020a2fa:    a0cb        ..      ADR      r0,{pc}+0x32e ; 0x20a628
        0x0020a2fc:    9b02        ..      LDR      r3,[sp,#8]
        0x0020a2fe:    f000fcff    ....    BL       data_uart_print ; 0x20ad00
;;;572                                        p_uuid[3], p_uuid[2], p_uuid[1], p_uuid[0]);
;;;573                    }
;;;574                    break;
        0x0020a302:    e044        D.      B        0x20a38e ; app_parse_scan_info + 350
;;;575    
;;;576                case GAP_ADTYPE_LOCAL_NAME_SHORT:
;;;577                case GAP_ADTYPE_LOCAL_NAME_COMPLETE:
;;;578                    {
;;;579                        buffer[length - 1] = '\0';
        0x0020a304:    eb090004    ....    ADD      r0,r9,r4
        0x0020a308:    2100        .!      MOVS     r1,#0
        0x0020a30a:    f8001c01    ....    STRB     r1,[r0,#-1]
;;;580                        data_uart_print("GAP_ADTYPE_LOCAL_NAME_XXX: %s\r\n", buffer);
        0x0020a30e:    a901        ..      ADD      r1,sp,#4
        0x0020a310:    a0d1        ..      ADR      r0,{pc}+0x348 ; 0x20a658
;;;581                    }
;;;582                    break;
        0x0020a312:    e01e        ..      B        0x20a352 ; app_parse_scan_info + 290
;;;583    
;;;584                case GAP_ADTYPE_POWER_LEVEL:
;;;585                    {
;;;586                        data_uart_print("GAP_ADTYPE_POWER_LEVEL: 0x%x\r\n", scan_info->data[pos + 1]);
        0x0020a314:    7af9        .z      LDRB     r1,[r7,#0xb]
        0x0020a316:    a0d8        ..      ADR      r0,{pc}+0x362 ; 0x20a678
;;;587                    }
;;;588                    break;
        0x0020a318:    e01b        ..      B        0x20a352 ; app_parse_scan_info + 290
;;;589    
;;;590                case GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE:
;;;591                    {
;;;592                        uint16_t *p_min = (uint16_t *)(buffer);
;;;593                        uint16_t *p_max = p_min + 1;
;;;594                        APP_PRINT_INFO2("GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE: 0x%x - 0x%x", *p_min,
        0x0020a31a:    f8bd0006    ....    LDRH     r0,[sp,#6]
        0x0020a31e:    9000        ..      STR      r0,[sp,#0]
        0x0020a320:    f8bd3004    ...0    LDRH     r3,[sp,#4]
        0x0020a324:    2202        ."      MOVS     r2,#2
        0x0020a326:    49dc        .I      LDR      r1,[pc,#880] ; [0x20a698] = 0x8801af4
        0x0020a328:    48dc        .H      LDR      r0,[pc,#880] ; [0x20a69c] = 0x21103002
        0x0020a32a:    f5fdfb98    ....    BL       log_buffer ; 0x7a5e
;;;595                                        *p_max);
;;;596                    }
;;;597                    break;
        0x0020a32e:    e02e        ..      B        0x20a38e ; app_parse_scan_info + 350
;;;598    
;;;599                case GAP_ADTYPE_SERVICE_DATA:
;;;600                    {
;;;601                        uint16_t *p_uuid = (uint16_t *)(buffer);
;;;602                        uint8_t data_len = length - 3;
        0x0020a330:    1ee0        ..      SUBS     r0,r4,#3
        0x0020a332:    b2c5        ..      UXTB     r5,r0
;;;603    
;;;604                        data_uart_print("GAP_ADTYPE_SERVICE_DATA: UUID 0x%x, len %d, data %b\r\n", *p_uuid,
        0x0020a334:    f1090202    ....    ADD      r2,r9,#2
        0x0020a338:    4629        )F      MOV      r1,r5
        0x0020a33a:    4650        PF      MOV      r0,r10
        0x0020a33c:    f5fdfde5    ....    BL       trace_binary ; 0x7f0a
        0x0020a340:    4603        .F      MOV      r3,r0
        0x0020a342:    f8bd1004    ....    LDRH     r1,[sp,#4]
        0x0020a346:    462a        *F      MOV      r2,r5
        0x0020a348:    a0d5        ..      ADR      r0,{pc}+0x358 ; 0x20a6a0
;;;605                                        data_len, TRACE_BINARY(data_len, &buffer[2]));
;;;606                    }
;;;607                    break;
        0x0020a34a:    e012        ..      B        0x20a372 ; app_parse_scan_info + 322
;;;608                case GAP_ADTYPE_APPEARANCE:
;;;609                    {
;;;610                        uint16_t *p_appearance = (uint16_t *)(buffer);
;;;611                        data_uart_print("GAP_ADTYPE_APPEARANCE: %d\r\n", *p_appearance);
        0x0020a34c:    f8bd1004    ....    LDRH     r1,[sp,#4]
        0x0020a350:    a0e1        ..      ADR      r0,{pc}+0x388 ; 0x20a6d8
        0x0020a352:    f000fcd5    ....    BL       data_uart_print ; 0x20ad00
        0x0020a356:    e01a        ..      B        0x20a38e ; app_parse_scan_info + 350
;;;612                    }
;;;613                    break;
;;;614    
;;;615                case GAP_ADTYPE_MANUFACTURER_SPECIFIC:
;;;616                    {
;;;617                        uint8_t data_len = length - 3;
        0x0020a358:    1ee0        ..      SUBS     r0,r4,#3
        0x0020a35a:    b2c5        ..      UXTB     r5,r0
;;;618                        uint16_t *p_company_id = (uint16_t *)(buffer);
;;;619                        data_uart_print("GAP_ADTYPE_MANUFACTURER_SPECIFIC: company_id 0x%x, len %d, data %b\r\n",
        0x0020a35c:    f1090202    ....    ADD      r2,r9,#2
        0x0020a360:    4629        )F      MOV      r1,r5
        0x0020a362:    4650        PF      MOV      r0,r10
        0x0020a364:    f5fdfdd1    ....    BL       trace_binary ; 0x7f0a
        0x0020a368:    4603        .F      MOV      r3,r0
        0x0020a36a:    f8bd1004    ....    LDRH     r1,[sp,#4]
        0x0020a36e:    462a        *F      MOV      r2,r5
        0x0020a370:    48e0        .H      LDR      r0,[pc,#896] ; [0x20a6f4] = 0x21ca64
        0x0020a372:    f000fcc5    ....    BL       data_uart_print ; 0x20ad00
        0x0020a376:    e00a        ..      B        0x20a38e ; app_parse_scan_info + 350
        0x0020a378:    1971        q.      ADDS     r1,r6,r5
        0x0020a37a:    eb010008    ....    ADD      r0,r1,r8
        0x0020a37e:    7a81        .z      LDRB     r1,[r0,#0xa]
        0x0020a380:    a0dd        ..      ADR      r0,{pc}+0x378 ; 0x20a6f8
        0x0020a382:    f000fcbd    ....    BL       data_uart_print ; 0x20ad00
        0x0020a386:    1c6d        m.      ADDS     r5,r5,#1
;;;620                                        *p_company_id, data_len, TRACE_BINARY(data_len, &buffer[2]));
;;;621                    }
;;;622                    break;
;;;623    
;;;624                default:
;;;625                    {
;;;626                        uint8_t i = 0;
;;;627    
;;;628                        for (i = 0; i < (length - 1); i++)
        0x0020a388:    b2ed        ..      UXTB     r5,r5
        0x0020a38a:    42bd        .B      CMP      r5,r7
        0x0020a38c:    dbf4        ..      BLT      0x20a378 ; app_parse_scan_info + 328
;;;629                        {
;;;630                            data_uart_print("  AD Data: Unhandled Data = 0x%x\r\n", scan_info->data[pos + i]);
;;;631                        }
;;;632                    }
;;;633                    break;
;;;634                }
;;;635            }
;;;636    
;;;637            pos += length;
        0x0020a38e:    1930        0.      ADDS     r0,r6,r4
        0x0020a390:    b2c5        ..      UXTB     r5,r0
        0x0020a392:    f8980009    ....    LDRB     r0,[r8,#9]
        0x0020a396:    42a8        .B      CMP      r0,r5
        0x0020a398:    f63faf57    ?.W.    BHI      0x20a24a ; app_parse_scan_info + 26
;;;638        }
;;;639    		data_uart_print("------------------------------\r\n");
        0x0020a39c:    a0df        ..      ADR      r0,{pc}+0x380 ; 0x20a71c
        0x0020a39e:    f000fcaf    ....    BL       data_uart_print ; 0x20ad00
;;;640    }
        0x0020a3a2:    b00a        ..      ADD      sp,sp,#0x28
        0x0020a3a4:    e8bd87f0    ....    POP      {r4-r10,pc}
    filter_scan_info_by_uuid
;;;641    
;;;642    /** @defgroup  CENTRAL_SCAN_MGR Scan Information manager
;;;643        * @brief Scan Information manager
;;;644        * @{
;;;645        */
;;;646    /**
;;;647      * @brief Use 16 bit uuid to filter scan information
;;;648      * @param[in] uuid 16 bit UUID.
;;;649      * @param[in] scan_info point to scan information data.
;;;650      * @return filter result
;;;651      * @retval true found success
;;;652      * @retval false not found
;;;653      */
;;;654    bool filter_scan_info_by_uuid(uint16_t uuid, T_LE_SCAN_INFO *scan_info)
;;;655    {
        0x0020a3a8:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0020a3ac:    4681        .F      MOV      r9,r0
        0x0020a3ae:    b08a        ..      SUB      sp,sp,#0x28
        0x0020a3b0:    4688        .F      MOV      r8,r1
        0x0020a3b2:    2000        .       MOVS     r0,#0
;;; ..\..\..\src\sample\ble_central\central_app.c (655)
        0x0020a3b4:    e033        3.      B        0x20a41e ; filter_scan_info_by_uuid + 118
;;;656        uint8_t buffer[32];
;;;657        uint8_t pos = 0;
;;;658    
;;;659        while (pos < scan_info->data_len)
;;;660        {
;;;661            /* Length of the AD structure. */
;;;662            uint8_t length = scan_info->data[pos++];
        0x0020a3b6:    eb080100    ....    ADD      r1,r8,r0
        0x0020a3ba:    1c40        @.      ADDS     r0,r0,#1
        0x0020a3bc:    7a8e        .z      LDRB     r6,[r1,#0xa]
        0x0020a3be:    b2c7        ..      UXTB     r7,r0
;;;663            uint8_t type;
;;;664    
;;;665            if ((length > 0x01) && ((pos + length) <= 31))
        0x0020a3c0:    2e01        ..      CMP      r6,#1
        0x0020a3c2:    d92a        *.      BLS      0x20a41a ; filter_scan_info_by_uuid + 114
        0x0020a3c4:    19b8        ..      ADDS     r0,r7,r6
        0x0020a3c6:    281f        .(      CMP      r0,#0x1f
        0x0020a3c8:    d827        '.      BHI      0x20a41a ; filter_scan_info_by_uuid + 114
;;;666            {
;;;667                /* Copy the AD Data to buffer. */
;;;668                memcpy(buffer, scan_info->data + pos + 1, length - 1);
        0x0020a3ca:    eb080407    ....    ADD      r4,r8,r7
        0x0020a3ce:    f104010b    ....    ADD      r1,r4,#0xb
        0x0020a3d2:    1e72        r.      SUBS     r2,r6,#1
        0x0020a3d4:    a801        ..      ADD      r0,sp,#4
        0x0020a3d6:    f64ffd60    O.`.    BL       __aeabi_memcpy ; 0x59e9a
;;;669                /* AD Type, one octet. */
;;;670                type = scan_info->data[pos];
        0x0020a3da:    7aa0        .z      LDRB     r0,[r4,#0xa]
;;;671    
;;;672                switch (type)
        0x0020a3dc:    2802        .(      CMP      r0,#2
        0x0020a3de:    d003        ..      BEQ      0x20a3e8 ; filter_scan_info_by_uuid + 64
        0x0020a3e0:    2803        .(      CMP      r0,#3
        0x0020a3e2:    d001        ..      BEQ      0x20a3e8 ; filter_scan_info_by_uuid + 64
        0x0020a3e4:    2814        .(      CMP      r0,#0x14
        0x0020a3e6:    d118        ..      BNE      0x20a41a ; filter_scan_info_by_uuid + 114
        0x0020a3e8:    1e70        p.      SUBS     r0,r6,#1
;;;673                {
;;;674                case GAP_ADTYPE_16BIT_MORE:
;;;675                case GAP_ADTYPE_16BIT_COMPLETE:
;;;676                case GAP_ADTYPE_SERVICES_LIST_16BIT:
;;;677                    {
;;;678                        uint16_t *p_uuid = (uint16_t *)(buffer);
        0x0020a3ea:    ad01        ..      ADD      r5,sp,#4
;;;679                        uint8_t i = length - 1;
        0x0020a3ec:    b2c4        ..      UXTB     r4,r0
        0x0020a3ee:    f8dfa2ac    ....    LDR      r10,[pc,#684] ; [0x20a69c] = 0x21103002
;;;680    
;;;681                        while (i >= 2)
        0x0020a3f2:    e010        ..      B        0x20a416 ; filter_scan_info_by_uuid + 110
;;;682                        {
;;;683                            APP_PRINT_INFO2("  AD Data: UUID16 List Item %d = 0x%x", i / 2, *p_uuid);
        0x0020a3f4:    8828        (.      LDRH     r0,[r5,#0]
        0x0020a3f6:    49a8        .I      LDR      r1,[pc,#672] ; [0x20a698] = 0x8801af4
        0x0020a3f8:    9000        ..      STR      r0,[sp,#0]
        0x0020a3fa:    0863        c.      LSRS     r3,r4,#1
        0x0020a3fc:    2202        ."      MOVS     r2,#2
        0x0020a3fe:    3138        81      ADDS     r1,r1,#0x38
        0x0020a400:    4650        PF      MOV      r0,r10
        0x0020a402:    f5fdfb2c    ..,.    BL       log_buffer ; 0x7a5e
;;;684    						//data_uart_print("  AD Data: UUID16 List Item %d = 0x%x\r\n", i / 2, *p_uuid);
;;;685                            if (*p_uuid == uuid)
        0x0020a406:    8829        ).      LDRH     r1,[r5,#0]
        0x0020a408:    4549        IE      CMP      r1,r9
        0x0020a40a:    d101        ..      BNE      0x20a410 ; filter_scan_info_by_uuid + 104
;;;686                            {
;;;687                                return true;
        0x0020a40c:    2001        .       MOVS     r0,#1
        0x0020a40e:    e7c8        ..      B        0x20a3a2 ; app_parse_scan_info + 370
        0x0020a410:    1ea4        ..      SUBS     r4,r4,#2
;;;688                            }
;;;689                            p_uuid++;
;;;690                            i -= 2;
        0x0020a412:    b2e4        ..      UXTB     r4,r4
        0x0020a414:    1cad        ..      ADDS     r5,r5,#2
        0x0020a416:    2c02        .,      CMP      r4,#2
        0x0020a418:    d2ec        ..      BCS      0x20a3f4 ; filter_scan_info_by_uuid + 76
;;;691                        }
;;;692                    }
;;;693                    break;
;;;694    
;;;695                default:
;;;696                    break;
;;;697                }
;;;698            }
;;;699    
;;;700            pos += length;
        0x0020a41a:    19b8        ..      ADDS     r0,r7,r6
        0x0020a41c:    b2c0        ..      UXTB     r0,r0
        0x0020a41e:    f8981009    ....    LDRB     r1,[r8,#9]
        0x0020a422:    4281        .B      CMP      r1,r0
        0x0020a424:    d8c7        ..      BHI      0x20a3b6 ; filter_scan_info_by_uuid + 14
;;;701        }
;;;702        return false;
        0x0020a426:    2000        .       MOVS     r0,#0
;;;703    }
        0x0020a428:    e7bb        ..      B        0x20a3a2 ; app_parse_scan_info + 370
    app_gap_callback
;;;704    /** @} */ /* End of group CENTRAL_SCAN_MGR */
;;;705    
;;;706    /** @defgroup  CENTRAL_GAP_CALLBACK GAP Callback Event Handler
;;;707        * @brief Handle GAP callback event
;;;708        * @{
;;;709        */
;;;710    /**
;;;711      * @brief Callback for gap le to notify app
;;;712      * @param[in] cb_type callback msy type @ref GAP_LE_MSG_Types.
;;;713      * @param[in] p_cb_data point to callback data @ref T_LE_CB_DATA.
;;;714      * @retval result @ref T_APP_RESULT
;;;715      */
;;;716    T_APP_RESULT app_gap_callback(uint8_t cb_type, void *p_cb_data)
;;;717    {
        0x0020a42a:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0020a42c:    b089        ..      SUB      sp,sp,#0x24
        0x0020a42e:    460c        .F      MOV      r4,r1
        0x0020a430:    4607        .F      MOV      r7,r0
;;;718        T_APP_RESULT result = APP_RESULT_SUCCESS;
        0x0020a432:    2600        .&      MOVS     r6,#0
;;;719        T_LE_CB_DATA *p_data = (T_LE_CB_DATA *)p_cb_data;
;;;720    
;;;721    	uint8_t devname[]="CMT4501-a11005e2";
        0x0020a434:    2214        ."      MOVS     r2,#0x14
        0x0020a436:    a1c2        ..      ADR      r1,{pc}+0x30a ; 0x20a740
        0x0020a438:    a804        ..      ADD      r0,sp,#0x10
        0x0020a43a:    f64ffdb5    O...    BL       __aeabi_memcpy4 ; 0x59fa8
        0x0020a43e:    4d97        .M      LDR      r5,[pc,#604] ; [0x20a69c] = 0x21103002
;;;722    
;;;723        switch (cb_type)
        0x0020a440:    2f15        ./      CMP      r7,#0x15
        0x0020a442:    d038        8.      BEQ      0x20a4b6 ; app_gap_callback + 140
        0x0020a444:    2f30        0/      CMP      r7,#0x30
        0x0020a446:    d008        ..      BEQ      0x20a45a ; app_gap_callback + 48
        0x0020a448:    463b        ;F      MOV      r3,r7
        0x0020a44a:    2201        ."      MOVS     r2,#1
        0x0020a44c:    49c1        .I      LDR      r1,[pc,#772] ; [0x20a754] = 0x8801c5c
        0x0020a44e:    1ea8        ..      SUBS     r0,r5,#2
        0x0020a450:    f5fdfb05    ....    BL       log_buffer ; 0x7a5e
        0x0020a454:    b009        ..      ADD      sp,sp,#0x24
        0x0020a456:    4630        0F      MOV      r0,r6
        0x0020a458:    bdf0        ..      POP      {r4-r7,pc}
;;;724        {
;;;725        case GAP_MSG_LE_SCAN_INFO:
;;;726            APP_PRINT_INFO5("GAP_MSG_LE_SCAN_INFO:adv_type 0x%x, bd_addr %s, remote_addr_type %d, rssi %d, data_len %d",
        0x0020a45a:    48bf        .H      LDR      r0,[pc,#764] ; [0x20a758] = 0x21300000
        0x0020a45c:    6821        !h      LDR      r1,[r4,#0]
        0x0020a45e:    f5fdfcbb    ....    BL       trace_bdaddr ; 0x7dd8
        0x0020a462:    4601        .F      MOV      r1,r0
        0x0020a464:    6820         h      LDR      r0,[r4,#0]
        0x0020a466:    7a47        Gz      LDRB     r7,[r0,#9]
        0x0020a468:    f9903008    ...0    LDRSB    r3,[r0,#8]
        0x0020a46c:    7982        .y      LDRB     r2,[r0,#6]
        0x0020a46e:    e88d008e    ....    STM      sp,{r1-r3,r7}
        0x0020a472:    4989        .I      LDR      r1,[pc,#548] ; [0x20a698] = 0x8801af4
        0x0020a474:    79c3        .y      LDRB     r3,[r0,#7]
        0x0020a476:    2205        ."      MOVS     r2,#5
        0x0020a478:    3164        d1      ADDS     r1,r1,#0x64
        0x0020a47a:    4628        (F      MOV      r0,r5
        0x0020a47c:    f5fdfaef    ....    BL       log_buffer ; 0x7a5e
;;;727                            p_data->p_le_scan_info->adv_type,
;;;728                            TRACE_BDADDR(p_data->p_le_scan_info->bd_addr),
;;;729                            p_data->p_le_scan_info->remote_addr_type,
;;;730                            p_data->p_le_scan_info->rssi,
;;;731                            p_data->p_le_scan_info->data_len);
;;;732            /* User can split interested information by using the function as follow. */
;;;733    
;;;734    #if 1
;;;735    		//app_parse_scan_info(p_data->p_le_scan_info);
;;;736    		if (filter_scan_info_by_name(devname, p_data->p_le_scan_info))
        0x0020a480:    a804        ..      ADD      r0,sp,#0x10
        0x0020a482:    6821        !h      LDR      r1,[r4,#0]
        0x0020a484:    f7fffea4    ....    BL       filter_scan_info_by_name ; 0x20a1d0
        0x0020a488:    b118        ..      CBZ      r0,0x20a492 ; app_gap_callback + 104
;;;737            {
;;;738                //data_uart_print("Found simple ble service\r\n");
;;;739                link_mgr_add_device(p_data->p_le_scan_info->bd_addr, p_data->p_le_scan_info->remote_addr_type);
        0x0020a48a:    6820         h      LDR      r0,[r4,#0]
        0x0020a48c:    7981        .y      LDRB     r1,[r0,#6]
        0x0020a48e:    f011fe9d    ....    BL       link_mgr_add_device ; 0x21c1cc
;;;740            }
;;;741    #endif
;;;742    
;;;743            if (filter_scan_info_by_uuid(GATT_UUID_SIMPLE_PROFILE, p_data->p_le_scan_info))
        0x0020a492:    f64f70e0    O..p    MOV      r0,#0xffe0
        0x0020a496:    6821        !h      LDR      r1,[r4,#0]
        0x0020a498:    f7ffff86    ....    BL       filter_scan_info_by_uuid ; 0x20a3a8
        0x0020a49c:    2800        .(      CMP      r0,#0
        0x0020a49e:    d0d9        ..      BEQ      0x20a454 ; app_gap_callback + 42
;;;744            {
;;;745                APP_PRINT_INFO0("Found simple ble service");
        0x0020a4a0:    49ac        .I      LDR      r1,[pc,#688] ; [0x20a754] = 0x8801c5c
        0x0020a4a2:    2200        ."      MOVS     r2,#0
        0x0020a4a4:    39a4        .9      SUBS     r1,r1,#0xa4
        0x0020a4a6:    4628        (F      MOV      r0,r5
        0x0020a4a8:    f5fdfad9    ....    BL       log_buffer ; 0x7a5e
;;;746                link_mgr_add_device(p_data->p_le_scan_info->bd_addr, p_data->p_le_scan_info->remote_addr_type);
        0x0020a4ac:    6820         h      LDR      r0,[r4,#0]
        0x0020a4ae:    7981        .y      LDRB     r1,[r0,#6]
        0x0020a4b0:    f011fe8c    ....    BL       link_mgr_add_device ; 0x21c1cc
        0x0020a4b4:    e7ce        ..      B        0x20a454 ; app_gap_callback + 42
;;;747            }
;;;748            /* If you want to parse the scan info, please reference function app_parse_scan_info in observer app. */
;;;749            break;
;;;750    
;;;751        case GAP_MSG_LE_CONN_UPDATE_IND:
;;;752            APP_PRINT_INFO5("GAP_MSG_LE_CONN_UPDATE_IND: conn_id %d, conn_interval_max 0x%x, conn_interval_min 0x%x, conn_latency 0x%x,supervision_timeout 0x%x",
        0x0020a4b6:    6820         h      LDR      r0,[r4,#0]
        0x0020a4b8:    8881        ..      LDRH     r1,[r0,#4]
        0x0020a4ba:    8904        ..      LDRH     r4,[r0,#8]
        0x0020a4bc:    88c3        ..      LDRH     r3,[r0,#6]
        0x0020a4be:    8842        B.      LDRH     r2,[r0,#2]
        0x0020a4c0:    e88d001e    ....    STM      sp,{r1-r4}
        0x0020a4c4:    49a3        .I      LDR      r1,[pc,#652] ; [0x20a754] = 0x8801c5c
        0x0020a4c6:    7803        .x      LDRB     r3,[r0,#0]
        0x0020a4c8:    2205        ."      MOVS     r2,#5
        0x0020a4ca:    3988        .9      SUBS     r1,r1,#0x88
        0x0020a4cc:    4628        (F      MOV      r0,r5
        0x0020a4ce:    f5fdfac6    ....    BL       log_buffer ; 0x7a5e
;;;753                            p_data->p_le_conn_update_ind->conn_id,
;;;754                            p_data->p_le_conn_update_ind->conn_interval_max,
;;;755                            p_data->p_le_conn_update_ind->conn_interval_min,
;;;756                            p_data->p_le_conn_update_ind->conn_latency,
;;;757                            p_data->p_le_conn_update_ind->supervision_timeout);
;;;758            /* if reject the proposed connection parameter from peer device, use APP_RESULT_REJECT. */
;;;759            result = APP_RESULT_ACCEPT;
        0x0020a4d2:    f6405603    @..V    MOV      r6,#0xd03
;;;760            break;
        0x0020a4d6:    e7bd        ..      B        0x20a454 ; app_gap_callback + 42
    app_client_callback
;;;761    
;;;762        default:
;;;763            APP_PRINT_ERROR1("app_gap_callback: unhandled cb_type 0x%x", cb_type);
;;;764            break;
;;;765        }
;;;766        return result;
;;;767    }
;;;768    /** @} */ /* End of group CENTRAL_GAP_CALLBACK */
;;;769    
;;;770    /** @defgroup  CENTRAL_SRV_DIS GATT Services discovery and storage
;;;771        * @brief GATT Services discovery and storage
;;;772        * @{
;;;773        */
;;;774    /**
;;;775     * @brief  Discovery GATT services
;;;776     * @param  conn_id connection ID.
;;;777     * @param  start first call. true - first call this function after conncection, false - not first
;;;778     * @retval None
;;;779     */
;;;780    void app_discov_services(uint8_t conn_id, bool start)
;;;781    {
;;;782        if (app_link_table[conn_id].conn_state != GAP_CONN_STATE_CONNECTED)
;;;783        {
;;;784            APP_PRINT_ERROR1("app_discov_services: conn_id %d not connected ", conn_id);
;;;785            return;
;;;786        }
;;;787        if (start)
;;;788        {
;;;789    #if F_BT_GATT_SRV_HANDLE_STORAGE
;;;790            bool is_disc = true;
;;;791            T_APP_SRVS_HDL_TABLE app_srvs_table;
;;;792            if (app_load_srvs_hdl_table(&app_srvs_table) == 0)
;;;793            {
;;;794                if ((app_srvs_table.srv_found_flags != 0) &&
;;;795                    (app_srvs_table.bd_type == app_link_table[conn_id].bd_type) &&
;;;796                    (memcmp(app_srvs_table.bd_addr, app_link_table[conn_id].bd_addr, GAP_BD_ADDR_LEN) == 0))
;;;797                {
;;;798                    APP_PRINT_INFO1("app_discov_services: load from flash, srv_found_flags 0x%x",
;;;799                                    app_srvs_table.srv_found_flags);
;;;800                    app_link_table[conn_id].srv_found_flags = app_srvs_table.srv_found_flags;
;;;801                    if (app_srvs_table.srv_found_flags & APP_DISCOV_GAPS_FLAG)
;;;802                    {
;;;803                        gaps_set_hdl_cache(conn_id, app_srvs_table.gaps_hdl_cache, sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;804                    }
;;;805                    if (app_srvs_table.srv_found_flags & APP_DISCOV_SIMP_FLAG)
;;;806                    {
;;;807                        simp_ble_client_set_hdl_cache(conn_id, app_srvs_table.simp_hdl_cache,
;;;808                                                      sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN);
;;;809                    }
;;;810                    if (app_srvs_table.srv_found_flags & APP_DISCOV_BAS_FLAG)
;;;811                    {
;;;812                        bas_set_hdl_cache(conn_id, app_srvs_table.bas_hdl_cache, sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;813                    }
;;;814                    is_disc = false;
;;;815                }
;;;816            }
;;;817            else
;;;818            {
;;;819                APP_PRINT_ERROR0("app_load_srvs_hdl_table: failed");
;;;820            }
;;;821    
;;;822            if (is_disc)
;;;823            {
;;;824                if (gaps_start_discovery(conn_id) == false)
;;;825                {
;;;826                    APP_PRINT_ERROR1("app_discov_services: discover gaps failed conn_id %d", conn_id);
;;;827                }
;;;828            }
;;;829    #else
;;;830            if (gaps_start_discovery(conn_id) == false)
;;;831            {
;;;832                APP_PRINT_ERROR1("app_discov_services: discover gaps failed conn_id %d", conn_id);
;;;833            }
;;;834    #endif
;;;835            return;
;;;836        }
;;;837        if ((app_link_table[conn_id].discovered_flags & APP_DISCOV_SIMP_FLAG) == 0)
;;;838        {
;;;839            if (simp_ble_client_start_discovery(conn_id) == false)
;;;840            {
;;;841                APP_PRINT_ERROR1("app_discov_services: discover simp failed conn_id %d", conn_id);
;;;842            }
;;;843        }
;;;844        else if ((app_link_table[conn_id].discovered_flags & APP_DISCOV_BAS_FLAG) == 0)
;;;845        {
;;;846            if (bas_start_discovery(conn_id) == false)
;;;847            {
;;;848                APP_PRINT_ERROR1("app_discov_services: discover bas failed conn_id %d", conn_id);
;;;849            }
;;;850        }
;;;851        else
;;;852        {
;;;853            APP_PRINT_INFO2("app_discov_services: discover complete, conn_id %d, srv_found_flags 0x%x",
;;;854                            conn_id, app_link_table[conn_id].srv_found_flags);
;;;855    #if F_BT_GATT_SRV_HANDLE_STORAGE
;;;856            if (app_link_table[conn_id].srv_found_flags != 0)
;;;857            {
;;;858                T_APP_SRVS_HDL_TABLE app_srvs_table;
;;;859                memset(&app_srvs_table, 0, sizeof(T_APP_SRVS_HDL_TABLE));
;;;860                app_srvs_table.bd_type = app_link_table[conn_id].bd_type;
;;;861                app_srvs_table.srv_found_flags = app_link_table[conn_id].srv_found_flags;
;;;862                memcpy(app_srvs_table.bd_addr, app_link_table[conn_id].bd_addr, GAP_BD_ADDR_LEN);
;;;863                gaps_get_hdl_cache(conn_id, app_srvs_table.gaps_hdl_cache, sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;864                simp_ble_client_get_hdl_cache(conn_id, app_srvs_table.simp_hdl_cache,
;;;865                                              sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN);
;;;866                bas_get_hdl_cache(conn_id, app_srvs_table.bas_hdl_cache, sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;867                if (app_save_srvs_hdl_table(&app_srvs_table) != 0)
;;;868                {
;;;869                    APP_PRINT_ERROR0("app_save_srvs_hdl_table: failed");
;;;870                }
;;;871            }
;;;872    #endif
;;;873        }
;;;874    
;;;875        return;
;;;876    }
;;;877    /** @} */ /* End of group CENTRAL_SRV_DIS */
;;;878    
;;;879    /** @defgroup  CENTRAL_CLIIENT_CALLBACK Profile Client Callback Event Handler
;;;880        * @brief Handle profile client callback event
;;;881        * @{
;;;882        */
;;;883    
;;;884    /**
;;;885     * @brief  Callback will be called when data sent from profile client layer.
;;;886     * @param  client_id the ID distinguish which module sent the data.
;;;887     * @param  conn_id connection ID.
;;;888     * @param  p_data  pointer to data.
;;;889     * @retval   result @ref T_APP_RESULT
;;;890     */
;;;891    T_APP_RESULT app_client_callback(T_CLIENT_ID client_id, uint8_t conn_id, void *p_data)
;;;892    {
        0x0020a4d8:    e92d41fc    -..A    PUSH     {r2-r8,lr}
        0x0020a4dc:    4607        .F      MOV      r7,r0
        0x0020a4de:    460d        .F      MOV      r5,r1
        0x0020a4e0:    2000        .       MOVS     r0,#0
        0x0020a4e2:    e9cd5000    ...P    STRD     r5,r0,[sp,#0]
        0x0020a4e6:    f8df81b4    ....    LDR      r8,[pc,#436] ; [0x20a69c] = 0x21103002
;;; ..\..\..\src\sample\ble_central\central_app.c (892)
        0x0020a4ea:    4614        .F      MOV      r4,r2
;;;893    	char temp[2]={0};
;;;894        T_APP_RESULT  result = APP_RESULT_SUCCESS;
        0x0020a4ec:    4606        .F      MOV      r6,r0
;;;895        APP_PRINT_INFO2("app_client_callback: client_id %d, conn_id %d",
        0x0020a4ee:    463b        ;F      MOV      r3,r7
        0x0020a4f0:    2202        ."      MOVS     r2,#2
        0x0020a4f2:    499a        .I      LDR      r1,[pc,#616] ; [0x20a75c] = 0x8801db0
        0x0020a4f4:    4640        @F      MOV      r0,r8
        0x0020a4f6:    f5fdfab2    ....    BL       log_buffer ; 0x7a5e
;;;896                        client_id, conn_id);
;;;897        if (client_id == gaps_client_id)
        0x0020a4fa:    4999        .I      LDR      r1,[pc,#612] ; [0x20a760] = 0x20d1a0
        0x0020a4fc:    4899        .H      LDR      r0,[pc,#612] ; [0x20a764] = 0x20d1cf
        0x0020a4fe:    eb050385    ....    ADD      r3,r5,r5,LSL #2
        0x0020a502:    788a        .x      LDRB     r2,[r1,#2]
        0x0020a504:    eb000043    ..C.    ADD      r0,r0,r3,LSL #1
        0x0020a508:    4297        .B      CMP      r7,r2
        0x0020a50a:    d145        E.      BNE      0x20a598 ; app_client_callback + 192
;;;898        {
;;;899            T_GAPS_CLIENT_CB_DATA *p_gaps_cb_data = (T_GAPS_CLIENT_CB_DATA *)p_data;
;;;900            switch (p_gaps_cb_data->cb_type)
        0x0020a50c:    7821        !x      LDRB     r1,[r4,#0]
        0x0020a50e:    b111        ..      CBZ      r1,0x20a516 ; app_client_callback + 62
        0x0020a510:    2901        .)      CMP      r1,#1
        0x0020a512:    d140        @.      BNE      0x20a596 ; app_client_callback + 190
        0x0020a514:    e021        !.      B        0x20a55a ; app_client_callback + 130
;;;901            {
;;;902            case GAPS_CLIENT_CB_TYPE_DISC_STATE:
;;;903                switch (p_gaps_cb_data->cb_content.disc_state)
        0x0020a516:    7921        !y      LDRB     r1,[r4,#4]
        0x0020a518:    2902        .)      CMP      r1,#2
        0x0020a51a:    d002        ..      BEQ      0x20a522 ; app_client_callback + 74
        0x0020a51c:    2903        .)      CMP      r1,#3
        0x0020a51e:    d1f8        ..      BNE      0x20a512 ; app_client_callback + 58
        0x0020a520:    e00f        ..      B        0x20a542 ; app_client_callback + 106
;;;904                {
;;;905                case DISC_GAPS_DONE:
;;;906                    app_link_table[conn_id].discovered_flags |= APP_DISCOV_GAPS_FLAG;
        0x0020a522:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020a524:    f0410101    A...    ORR      r1,r1,#1
        0x0020a528:    7041        Ap      STRB     r1,[r0,#1]
;;;907                    app_link_table[conn_id].srv_found_flags |= APP_DISCOV_GAPS_FLAG;
        0x0020a52a:    7881        .x      LDRB     r1,[r0,#2]
        0x0020a52c:    f0410101    A...    ORR      r1,r1,#1
        0x0020a530:    7081        .p      STRB     r1,[r0,#2]
;;;908                    app_discov_services(conn_id, false);
        0x0020a532:    2100        .!      MOVS     r1,#0
        0x0020a534:    4628        (F      MOV      r0,r5
        0x0020a536:    f7fffc54    ..T.    BL       app_discov_services ; 0x209de2
;;;909                    /* Discovery Simple BLE service procedure successfully done. */
;;;910                    APP_PRINT_INFO0("app_client_callback: discover gaps procedure done.");
        0x0020a53a:    4988        .I      LDR      r1,[pc,#544] ; [0x20a75c] = 0x8801db0
        0x0020a53c:    2200        ."      MOVS     r2,#0
        0x0020a53e:    3134        41      ADDS     r1,r1,#0x34
;;;911                    break;
        0x0020a540:    e211        ..      B        0x20a966 ; app_client_callback + 1166
;;;912                case DISC_GAPS_FAILED:
;;;913                    app_link_table[conn_id].discovered_flags |= APP_DISCOV_GAPS_FLAG;
        0x0020a542:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020a544:    f0410101    A...    ORR      r1,r1,#1
        0x0020a548:    7041        Ap      STRB     r1,[r0,#1]
;;;914                    app_discov_services(conn_id, false);
        0x0020a54a:    2100        .!      MOVS     r1,#0
        0x0020a54c:    4628        (F      MOV      r0,r5
        0x0020a54e:    f7fffc48    ..H.    BL       app_discov_services ; 0x209de2
;;;915                    /* Discovery Request failed. */
;;;916                    APP_PRINT_INFO0("app_client_callback: discover gaps request failed.");
        0x0020a552:    4982        .I      LDR      r1,[pc,#520] ; [0x20a75c] = 0x8801db0
        0x0020a554:    2200        ."      MOVS     r2,#0
        0x0020a556:    316c        l1      ADDS     r1,r1,#0x6c
;;;917                    break;
        0x0020a558:    e205        ..      B        0x20a966 ; app_client_callback + 1166
;;;918                default:
;;;919                    break;
;;;920                }
;;;921                break;
;;;922            case GAPS_CLIENT_CB_TYPE_READ_RESULT:
;;;923                switch (p_gaps_cb_data->cb_content.read_result.type)
        0x0020a55a:    7920         y      LDRB     r0,[r4,#4]
        0x0020a55c:    b120         .      CBZ      r0,0x20a568 ; app_client_callback + 144
        0x0020a55e:    2801        .(      CMP      r0,#1
        0x0020a560:    d01b        ..      BEQ      0x20a59a ; app_client_callback + 194
        0x0020a562:    2802        .(      CMP      r0,#2
        0x0020a564:    d1d5        ..      BNE      0x20a512 ; app_client_callback + 58
        0x0020a566:    e115        ..      B        0x20a794 ; app_client_callback + 700
;;;924                {
;;;925                case GAPS_READ_DEVICE_NAME:
;;;926                    if (p_gaps_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a568:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x0020a56a:    b11b        ..      CBZ      r3,0x20a574 ; app_client_callback + 156
        0x0020a56c:    497b        {I      LDR      r1,[pc,#492] ; [0x20a75c] = 0x8801db0
        0x0020a56e:    2201        ."      MOVS     r2,#1
        0x0020a570:    31d0        .1      ADDS     r1,r1,#0xd0
        0x0020a572:    e114        ..      B        0x20a79e ; app_client_callback + 710
;;;927                    {
;;;928                        APP_PRINT_INFO1("GAPS_READ_DEVICE_NAME: device name %s.",
        0x0020a574:    f04f5005    O..P    MOV      r0,#0x21400000
        0x0020a578:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0020a57a:    f5fdfc76    ..v.    BL       trace_string ; 0x7e6a
        0x0020a57e:    4977        wI      LDR      r1,[pc,#476] ; [0x20a75c] = 0x8801db0
        0x0020a580:    4603        .F      MOV      r3,r0
        0x0020a582:    2201        ."      MOVS     r2,#1
        0x0020a584:    31a4        .1      ADDS     r1,r1,#0xa4
        0x0020a586:    4640        @F      MOV      r0,r8
        0x0020a588:    f5fdfa69    ..i.    BL       log_buffer ; 0x7a5e
;;;929                                        TRACE_STRING(p_gaps_cb_data->cb_content.read_result.data.device_name.p_value));
;;;930    					data_uart_print("#gapread#!%d!@%s@<Y>\r\n",conn_id,p_gaps_cb_data->cb_content.read_result.data.device_name.p_value);
        0x0020a58c:    4629        )F      MOV      r1,r5
        0x0020a58e:    a076        v.      ADR      r0,{pc}+0x1da ; 0x20a768
        0x0020a590:    68e2        .h      LDR      r2,[r4,#0xc]
        0x0020a592:    f000fbb5    ....    BL       data_uart_print ; 0x20ad00
        0x0020a596:    e207        ..      B        0x20a9a8 ; app_client_callback + 1232
        0x0020a598:    e108        ..      B        0x20a7ac ; app_client_callback + 724
        0x0020a59a:    e0f1        ..      B        0x20a780 ; app_client_callback + 680
    $d
        0x0020a59c:    0021c894    ..!.    DCD    2214036
        0x0020a5a0:    0020cff0    .. .    DCD    2150384
        0x0020a5a4:    2b2b2b2b    ++++    DCD    724249387
        0x0020a5a8:    2b2b2b2b    ++++    DCD    724249387
        0x0020a5ac:    2b2b2b2b    ++++    DCD    724249387
        0x0020a5b0:    2b2b2b2b    ++++    DCD    724249387
        0x0020a5b4:    2b2b2b2b    ++++    DCD    724249387
        0x0020a5b8:    2b2b2b2b    ++++    DCD    724249387
        0x0020a5bc:    2b2b2b2b    ++++    DCD    724249387
        0x0020a5c0:    000a0d2b    +...    DCD    658731
        0x0020a5c4:    21500000    ..P!    DCD    558891008
        0x0020a5c8:    0021caac    ..!.    DCD    2214572
        0x0020a5cc:    5f504147    GAP_    DCD    1599095111
        0x0020a5d0:    59544441    ADTY    DCD    1498694721
        0x0020a5d4:    465f4550    PE_F    DCD    1180648784
        0x0020a5d8:    5347414c    LAGS    DCD    1397178700
        0x0020a5dc:    7830203a    : 0x    DCD    2016419898
        0x0020a5e0:    0a0d7825    %x..    DCD    168654885
        0x0020a5e4:    00000000    ....    DCD    0
        0x0020a5e8:    5f504147    GAP_    DCD    1599095111
        0x0020a5ec:    59544441    ADTY    DCD    1498694721
        0x0020a5f0:    315f4550    PE_1    DCD    828327248
        0x0020a5f4:    54494236    6BIT    DCD    1414087222
        0x0020a5f8:    5858585f    _XXX    DCD    1482184799
        0x0020a5fc:    7830203a    : 0x    DCD    2016419898
        0x0020a600:    0a0d7825    %x..    DCD    168654885
        0x0020a604:    00000000    ....    DCD    0
        0x0020a608:    5f504147    GAP_    DCD    1599095111
        0x0020a60c:    59544441    ADTY    DCD    1498694721
        0x0020a610:    335f4550    PE_3    DCD    861881680
        0x0020a614:    54494232    2BIT    DCD    1414087218
        0x0020a618:    5858585f    _XXX    DCD    1482184799
        0x0020a61c:    7830203a    : 0x    DCD    2016419898
        0x0020a620:    0a0d7825    %x..    DCD    168654885
        0x0020a624:    00000000    ....    DCD    0
        0x0020a628:    5f504147    GAP_    DCD    1599095111
        0x0020a62c:    59544441    ADTY    DCD    1498694721
        0x0020a630:    315f4550    PE_1    DCD    828327248
        0x0020a634:    49423832    28BI    DCD    1229076530
        0x0020a638:    58585f54    T_XX    DCD    1482186580
        0x0020a63c:    30203a58    X: 0    DCD    807418456
        0x0020a640:    2e382578    x%8.    DCD    775431544
        0x0020a644:    38257838    8x%8    DCD    941979704
        0x0020a648:    2578382e    .8x%    DCD    628635694
        0x0020a64c:    78382e38    8.8x    DCD    2016947768
        0x0020a650:    382e3825    %8.8    DCD    942553125
        0x0020a654:    000a0d78    x...    DCD    658808
        0x0020a658:    5f504147    GAP_    DCD    1599095111
        0x0020a65c:    59544441    ADTY    DCD    1498694721
        0x0020a660:    4c5f4550    PE_L    DCD    1281312080
        0x0020a664:    4c41434f    OCAL    DCD    1279345487
        0x0020a668:    4d414e5f    _NAM    DCD    1296125535
        0x0020a66c:    58585f45    E_XX    DCD    1482186565
        0x0020a670:    25203a58    X: %    DCD    622869080
        0x0020a674:    000a0d73    s...    DCD    658803
        0x0020a678:    5f504147    GAP_    DCD    1599095111
        0x0020a67c:    59544441    ADTY    DCD    1498694721
        0x0020a680:    505f4550    PE_P    DCD    1348420944
        0x0020a684:    5245574f    OWER    DCD    1380276047
        0x0020a688:    56454c5f    _LEV    DCD    1447382111
        0x0020a68c:    203a4c45    EL:     DCD    540691525
        0x0020a690:    78257830    0x%x    DCD    2015721520
        0x0020a694:    00000a0d    ....    DCD    2573
        0x0020a698:    08801af4    ....    DCD    142613236
        0x0020a69c:    21103002    .0.!    DCD    554708994
        0x0020a6a0:    5f504147    GAP_    DCD    1599095111
        0x0020a6a4:    59544441    ADTY    DCD    1498694721
        0x0020a6a8:    535f4550    PE_S    DCD    1398752592
        0x0020a6ac:    49565245    ERVI    DCD    1230393925
        0x0020a6b0:    445f4543    CE_D    DCD    1147094339
        0x0020a6b4:    3a415441    ATA:    DCD    977359937
        0x0020a6b8:    49555520     UUI    DCD    1230329120
        0x0020a6bc:    78302044    D 0x    DCD    2016419908
        0x0020a6c0:    202c7825    %x,     DCD    539785253
        0x0020a6c4:    206e656c    len     DCD    544105836
        0x0020a6c8:    202c6425    %d,     DCD    539780133
        0x0020a6cc:    61746164    data    DCD    1635017060
        0x0020a6d0:    0d622520     %b.    DCD    224535840
        0x0020a6d4:    0000000a    ....    DCD    10
        0x0020a6d8:    5f504147    GAP_    DCD    1599095111
        0x0020a6dc:    59544441    ADTY    DCD    1498694721
        0x0020a6e0:    415f4550    PE_A    DCD    1096762704
        0x0020a6e4:    41455050    PPEA    DCD    1095061584
        0x0020a6e8:    434e4152    RANC    DCD    1129202002
        0x0020a6ec:    25203a45    E: %    DCD    622869061
        0x0020a6f0:    000a0d64    d...    DCD    658788
        0x0020a6f4:    0021ca64    d.!.    DCD    2214500
        0x0020a6f8:    44412020      AD    DCD    1145118752
        0x0020a6fc:    74614420     Dat    DCD    1952531488
        0x0020a700:    55203a61    a: U    DCD    1428175457
        0x0020a704:    6e61686e    nhan    DCD    1851877486
        0x0020a708:    64656c64    dled    DCD    1684368484
        0x0020a70c:    74614420     Dat    DCD    1952531488
        0x0020a710:    203d2061    a =     DCD    540876897
        0x0020a714:    78257830    0x%x    DCD    2015721520
        0x0020a718:    00000a0d    ....    DCD    2573
        0x0020a71c:    2d2d2d2d    ----    DCD    757935405
        0x0020a720:    2d2d2d2d    ----    DCD    757935405
        0x0020a724:    2d2d2d2d    ----    DCD    757935405
        0x0020a728:    2d2d2d2d    ----    DCD    757935405
        0x0020a72c:    2d2d2d2d    ----    DCD    757935405
        0x0020a730:    2d2d2d2d    ----    DCD    757935405
        0x0020a734:    2d2d2d2d    ----    DCD    757935405
        0x0020a738:    0a0d2d2d    --..    DCD    168635693
        0x0020a73c:    00000000    ....    DCD    0
        0x0020a740:    34544d43    CMT4    DCD    877940035
        0x0020a744:    2d313035    501-    DCD    758198325
        0x0020a748:    30313161    a110    DCD    808530273
        0x0020a74c:    32653530    05e2    DCD    845493552
        0x0020a750:    00000000    ....    DCD    0
        0x0020a754:    08801c5c    \...    DCD    142613596
        0x0020a758:    21300000    ..0!    DCD    556793856
        0x0020a75c:    08801db0    ....    DCD    142613936
        0x0020a760:    0020d1a0    .. .    DCD    2150816
        0x0020a764:    0020d1cf    .. .    DCD    2150863
        0x0020a768:    70616723    #gap    DCD    1885431587
        0x0020a76c:    64616572    read    DCD    1684104562
        0x0020a770:    64252123    #!%d    DCD    1680154915
        0x0020a774:    73254021    !@%s    DCD    1931821089
        0x0020a778:    3e593c40    @<Y>    DCD    1046035520
        0x0020a77c:    00000a0d    ....    DCD    2573
    $t
;;;931    
;;;932                    }
;;;933                    else
;;;934                    {
;;;935                        APP_PRINT_INFO1("GAPS_READ_DEVICE_NAME: failded cause 0x%x",
;;;936                                        p_gaps_cb_data->cb_content.read_result.cause);
;;;937                    }
;;;938                    break;
;;;939                case GAPS_READ_APPEARANCE:
;;;940                    if (p_gaps_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a780:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x0020a782:    b113        ..      CBZ      r3,0x20a78a ; app_client_callback + 690
        0x0020a784:    2201        ."      MOVS     r2,#1
        0x0020a786:    4991        .I      LDR      r1,[pc,#580] ; [0x20a9cc] = 0x8801ed8
        0x0020a788:    e009        ..      B        0x20a79e ; app_client_callback + 710
;;;941                    {
;;;942                        APP_PRINT_INFO1("GAPS_READ_APPEARANCE: appearance %d",
        0x0020a78a:    4990        .I      LDR      r1,[pc,#576] ; [0x20a9cc] = 0x8801ed8
        0x0020a78c:    2201        ."      MOVS     r2,#1
        0x0020a78e:    8923        #.      LDRH     r3,[r4,#8]
        0x0020a790:    3928        (9      SUBS     r1,r1,#0x28
        0x0020a792:    e004        ..      B        0x20a79e ; app_client_callback + 710
;;;943                                        p_gaps_cb_data->cb_content.read_result.data.appearance);
;;;944                    }
;;;945                    else
;;;946                    {
;;;947                        APP_PRINT_INFO1("GAPS_READ_APPEARANCE: failded cause 0x%x",
;;;948                                        p_gaps_cb_data->cb_content.read_result.cause);
;;;949                    }
;;;950                    break;
;;;951                case GAPS_READ_CENTRAL_ADDR_RESOLUTION:
;;;952                    if (p_gaps_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a794:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x0020a796:    b123        #.      CBZ      r3,0x20a7a2 ; app_client_callback + 714
        0x0020a798:    498c        .I      LDR      r1,[pc,#560] ; [0x20a9cc] = 0x8801ed8
        0x0020a79a:    2201        ."      MOVS     r2,#1
        0x0020a79c:    3168        h1      ADDS     r1,r1,#0x68
        0x0020a79e:    4640        @F      MOV      r0,r8
        0x0020a7a0:    e05d        ].      B        0x20a85e ; app_client_callback + 902
;;;953                    {
;;;954                        APP_PRINT_INFO1("GAPS_READ_CENTRAL_ADDR_RESOLUTION: central_addr_res %d",
        0x0020a7a2:    498a        .I      LDR      r1,[pc,#552] ; [0x20a9cc] = 0x8801ed8
        0x0020a7a4:    2201        ."      MOVS     r2,#1
        0x0020a7a6:    7a23        #z      LDRB     r3,[r4,#8]
        0x0020a7a8:    312c        ,1      ADDS     r1,r1,#0x2c
        0x0020a7aa:    e7f8        ..      B        0x20a79e ; app_client_callback + 710
;;;955                                        p_gaps_cb_data->cb_content.read_result.data.central_addr_res);
;;;956                    }
;;;957                    else
;;;958                    {
;;;959                        APP_PRINT_INFO1("GAPS_READ_CENTRAL_ADDR_RESOLUTION: failded cause 0x%x",
;;;960                                        p_gaps_cb_data->cb_content.read_result.cause);
;;;961                    }
;;;962                    break;
;;;963                default:
;;;964                    break;
;;;965                }
;;;966                break;
;;;967    
;;;968            default:
;;;969                break;
;;;970            }
;;;971        }
;;;972        else if (client_id == simple_ble_client_id)
        0x0020a7ac:    784a        Jx      LDRB     r2,[r1,#1]
        0x0020a7ae:    f8dfc220    .. .    LDR      r12,[pc,#544] ; [0x20a9d0] = 0x21103000
        0x0020a7b2:    4297        .B      CMP      r7,r2
        0x0020a7b4:    d170        p.      BNE      0x20a898 ; app_client_callback + 960
;;;973        {
;;;974            T_SIMP_CLIENT_CB_DATA *p_simp_client_cb_data = (T_SIMP_CLIENT_CB_DATA *)p_data;
;;;975            uint16_t value_size;
;;;976            uint8_t *p_value;
;;;977            switch (p_simp_client_cb_data->cb_type)
        0x0020a7b6:    7821        !x      LDRB     r1,[r4,#0]
        0x0020a7b8:    b139        9.      CBZ      r1,0x20a7ca ; app_client_callback + 754
        0x0020a7ba:    4886        .H      LDR      r0,[pc,#536] ; [0x20a9d4] = 0x21500000
        0x0020a7bc:    2901        .)      CMP      r1,#1
        0x0020a7be:    d026        &.      BEQ      0x20a80e ; app_client_callback + 822
        0x0020a7c0:    2902        .)      CMP      r1,#2
        0x0020a7c2:    d054        T.      BEQ      0x20a86e ; app_client_callback + 918
        0x0020a7c4:    2903        .)      CMP      r1,#3
        0x0020a7c6:    d14c        L.      BNE      0x20a862 ; app_client_callback + 906
        0x0020a7c8:    e067        g.      B        0x20a89a ; app_client_callback + 962
;;;978            {
;;;979            case SIMP_CLIENT_CB_TYPE_DISC_STATE:
;;;980                switch (p_simp_client_cb_data->cb_content.disc_state)
        0x0020a7ca:    7921        !y      LDRB     r1,[r4,#4]
        0x0020a7cc:    2902        .)      CMP      r1,#2
        0x0020a7ce:    d002        ..      BEQ      0x20a7d6 ; app_client_callback + 766
        0x0020a7d0:    2903        .)      CMP      r1,#3
        0x0020a7d2:    d1f8        ..      BNE      0x20a7c6 ; app_client_callback + 750
        0x0020a7d4:    e00f        ..      B        0x20a7f6 ; app_client_callback + 798
;;;981                {
;;;982                case DISC_SIMP_DONE:
;;;983                    /* Discovery Simple BLE service procedure successfully done. */
;;;984                    app_link_table[conn_id].discovered_flags |= APP_DISCOV_SIMP_FLAG;
        0x0020a7d6:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020a7d8:    f0410102    A...    ORR      r1,r1,#2
        0x0020a7dc:    7041        Ap      STRB     r1,[r0,#1]
;;;985                    app_link_table[conn_id].srv_found_flags |= APP_DISCOV_SIMP_FLAG;
        0x0020a7de:    7881        .x      LDRB     r1,[r0,#2]
        0x0020a7e0:    f0410102    A...    ORR      r1,r1,#2
        0x0020a7e4:    7081        .p      STRB     r1,[r0,#2]
;;;986                    app_discov_services(conn_id, false);
        0x0020a7e6:    2100        .!      MOVS     r1,#0
        0x0020a7e8:    4628        (F      MOV      r0,r5
        0x0020a7ea:    f7fffafa    ....    BL       app_discov_services ; 0x209de2
;;;987                    APP_PRINT_INFO0("app_client_callback: discover simp procedure done.");
        0x0020a7ee:    4977        wI      LDR      r1,[pc,#476] ; [0x20a9cc] = 0x8801ed8
        0x0020a7f0:    2200        ."      MOVS     r2,#0
        0x0020a7f2:    31a4        .1      ADDS     r1,r1,#0xa4
;;;988                    break;
        0x0020a7f4:    e0b7        ..      B        0x20a966 ; app_client_callback + 1166
;;;989                case DISC_SIMP_FAILED:
;;;990                    /* Discovery Request failed. */
;;;991                    app_link_table[conn_id].discovered_flags |= APP_DISCOV_SIMP_FLAG;
        0x0020a7f6:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020a7f8:    f0410102    A...    ORR      r1,r1,#2
        0x0020a7fc:    7041        Ap      STRB     r1,[r0,#1]
;;;992                    app_discov_services(conn_id, false);
        0x0020a7fe:    2100        .!      MOVS     r1,#0
        0x0020a800:    4628        (F      MOV      r0,r5
        0x0020a802:    f7fffaee    ....    BL       app_discov_services ; 0x209de2
;;;993                    APP_PRINT_INFO0("app_client_callback: discover simp request failed.");
        0x0020a806:    4971        qI      LDR      r1,[pc,#452] ; [0x20a9cc] = 0x8801ed8
        0x0020a808:    2200        ."      MOVS     r2,#0
        0x0020a80a:    31dc        .1      ADDS     r1,r1,#0xdc
;;;994                    break;
        0x0020a80c:    e0ab        ..      B        0x20a966 ; app_client_callback + 1166
;;;995                default:
;;;996                    break;
;;;997                }
;;;998                break;
;;;999            case SIMP_CLIENT_CB_TYPE_READ_RESULT:
;;;1000               switch (p_simp_client_cb_data->cb_content.read_result.type)
        0x0020a80e:    7921        !y      LDRB     r1,[r4,#4]
        0x0020a810:    b121        !.      CBZ      r1,0x20a81c ; app_client_callback + 836
        0x0020a812:    2901        .)      CMP      r1,#1
        0x0020a814:    d012        ..      BEQ      0x20a83c ; app_client_callback + 868
        0x0020a816:    2902        .)      CMP      r1,#2
        0x0020a818:    d1d5        ..      BNE      0x20a7c6 ; app_client_callback + 750
        0x0020a81a:    e01a        ..      B        0x20a852 ; app_client_callback + 890
;;;1001               {
;;;1002               case SIMP_READ_V1_READ:
;;;1003                   if (p_simp_client_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a81c:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x0020a81e:    b113        ..      CBZ      r3,0x20a826 ; app_client_callback + 846
        0x0020a820:    2201        ."      MOVS     r2,#1
        0x0020a822:    496d        mI      LDR      r1,[pc,#436] ; [0x20a9d8] = 0x880201c
        0x0020a824:    e01a        ..      B        0x20a85c ; app_client_callback + 900
;;;1004                   {
;;;1005                       value_size = p_simp_client_cb_data->cb_content.read_result.data.v1_read.value_size;
        0x0020a826:    8925        %.      LDRH     r5,[r4,#8]
;;;1006                       p_value = p_simp_client_cb_data->cb_content.read_result.data.v1_read.p_value;
;;;1007                       APP_PRINT_INFO2("SIMP_READ_V1_READ: value_size %d, value %b",
        0x0020a828:    68e2        .h      LDR      r2,[r4,#0xc]
        0x0020a82a:    4629        )F      MOV      r1,r5
        0x0020a82c:    f5fdfb6d    ..m.    BL       trace_binary ; 0x7f0a
        0x0020a830:    4969        iI      LDR      r1,[pc,#420] ; [0x20a9d8] = 0x880201c
        0x0020a832:    2202        ."      MOVS     r2,#2
        0x0020a834:    462b        +F      MOV      r3,r5
        0x0020a836:    3930        09      SUBS     r1,r1,#0x30
        0x0020a838:    9000        ..      STR      r0,[sp,#0]
        0x0020a83a:    e063        c.      B        0x20a904 ; app_client_callback + 1068
;;;1008                                       value_size, TRACE_BINARY(value_size, p_value));
;;;1009                   }
;;;1010                   else
;;;1011                   {
;;;1012                       APP_PRINT_ERROR1("SIMP_READ_V1_READ: failed cause 0x%x",
;;;1013                                        p_simp_client_cb_data->cb_content.read_result.cause);
;;;1014                   }
;;;1015                   break;
;;;1016               case SIMP_READ_V3_NOTIFY_CCCD:
;;;1017                   if (p_simp_client_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a83c:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x0020a83e:    b11b        ..      CBZ      r3,0x20a848 ; app_client_callback + 880
        0x0020a840:    4965        eI      LDR      r1,[pc,#404] ; [0x20a9d8] = 0x880201c
        0x0020a842:    2201        ."      MOVS     r2,#1
        0x0020a844:    3150        P1      ADDS     r1,r1,#0x50
        0x0020a846:    e009        ..      B        0x20a85c ; app_client_callback + 900
;;;1018                   {
;;;1019                       APP_PRINT_INFO1("SIMP_READ_V3_NOTIFY_CCCD: notify %d",
        0x0020a848:    4963        cI      LDR      r1,[pc,#396] ; [0x20a9d8] = 0x880201c
        0x0020a84a:    2201        ."      MOVS     r2,#1
        0x0020a84c:    7a23        #z      LDRB     r3,[r4,#8]
        0x0020a84e:    3128        (1      ADDS     r1,r1,#0x28
        0x0020a850:    e7a5        ..      B        0x20a79e ; app_client_callback + 710
;;;1020                                       p_simp_client_cb_data->cb_content.read_result.data.v3_notify_cccd);
;;;1021                   }
;;;1022                   else
;;;1023                   {
;;;1024                       APP_PRINT_ERROR1("SIMP_READ_V3_NOTIFY_CCCD: failed cause 0x%x",
;;;1025                                        p_simp_client_cb_data->cb_content.read_result.cause);
;;;1026                   };
;;;1027                   break;
;;;1028               case SIMP_READ_V4_INDICATE_CCCD:
;;;1029                   if (p_simp_client_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a852:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x0020a854:    b133        3.      CBZ      r3,0x20a864 ; app_client_callback + 908
        0x0020a856:    4960        `I      LDR      r1,[pc,#384] ; [0x20a9d8] = 0x880201c
        0x0020a858:    2201        ."      MOVS     r2,#1
        0x0020a85a:    31ac        .1      ADDS     r1,r1,#0xac
        0x0020a85c:    4660        `F      MOV      r0,r12
        0x0020a85e:    f5fdf8fe    ....    BL       log_buffer ; 0x7a5e
        0x0020a862:    e0a1        ..      B        0x20a9a8 ; app_client_callback + 1232
;;;1030                   {
;;;1031                       APP_PRINT_INFO1("SIMP_READ_V4_INDICATE_CCCD: indicate %d",
        0x0020a864:    495c        \I      LDR      r1,[pc,#368] ; [0x20a9d8] = 0x880201c
        0x0020a866:    2201        ."      MOVS     r2,#1
        0x0020a868:    7a23        #z      LDRB     r3,[r4,#8]
        0x0020a86a:    3180        .1      ADDS     r1,r1,#0x80
        0x0020a86c:    e797        ..      B        0x20a79e ; app_client_callback + 710
;;;1032                                       p_simp_client_cb_data->cb_content.read_result.data.v4_indicate_cccd);
;;;1033                   }
;;;1034                   else
;;;1035                   {
;;;1036                       APP_PRINT_ERROR1("SIMP_READ_V4_INDICATE_CCCD: failed cause 0x%x",
;;;1037                                        p_simp_client_cb_data->cb_content.read_result.cause);
;;;1038                   };
;;;1039                   break;
;;;1040   
;;;1041               default:
;;;1042                   break;
;;;1043               }
;;;1044               break;
;;;1045           case SIMP_CLIENT_CB_TYPE_WRITE_RESULT:
;;;1046               switch (p_simp_client_cb_data->cb_content.write_result.type)
        0x0020a86e:    7920         y      LDRB     r0,[r4,#4]
        0x0020a870:    b120         .      CBZ      r0,0x20a87c ; app_client_callback + 932
        0x0020a872:    2801        .(      CMP      r0,#1
        0x0020a874:    d007        ..      BEQ      0x20a886 ; app_client_callback + 942
        0x0020a876:    2802        .(      CMP      r0,#2
        0x0020a878:    d139        9.      BNE      0x20a8ee ; app_client_callback + 1046
        0x0020a87a:    e008        ..      B        0x20a88e ; app_client_callback + 950
;;;1047               {
;;;1048               case SIMP_WRITE_V2_WRITE:
;;;1049                   APP_PRINT_INFO1("SIMP_WRITE_V2_WRITE: write result 0x%x",
        0x0020a87c:    4956        VI      LDR      r1,[pc,#344] ; [0x20a9d8] = 0x880201c
        0x0020a87e:    2201        ."      MOVS     r2,#1
        0x0020a880:    88e3        ..      LDRH     r3,[r4,#6]
        0x0020a882:    31e0        .1      ADDS     r1,r1,#0xe0
;;;1050                                   p_simp_client_cb_data->cb_content.write_result.cause);
;;;1051                   break;
        0x0020a884:    e78b        ..      B        0x20a79e ; app_client_callback + 710
;;;1052               case SIMP_WRITE_V3_NOTIFY_CCCD:
;;;1053                   APP_PRINT_INFO1("SIMP_WRITE_V3_NOTIFY_CCCD: write result 0x%x",
        0x0020a886:    88e3        ..      LDRH     r3,[r4,#6]
        0x0020a888:    2201        ."      MOVS     r2,#1
        0x0020a88a:    4954        TI      LDR      r1,[pc,#336] ; [0x20a9dc] = 0x8802128
;;;1054                                   p_simp_client_cb_data->cb_content.write_result.cause);
;;;1055                   break;
        0x0020a88c:    e787        ..      B        0x20a79e ; app_client_callback + 710
;;;1056               case SIMP_WRITE_V4_INDICATE_CCCD:
;;;1057                   APP_PRINT_INFO1("SIMP_WRITE_V4_INDICATE_CCCD: write result 0x%x",
        0x0020a88e:    4953        SI      LDR      r1,[pc,#332] ; [0x20a9dc] = 0x8802128
        0x0020a890:    2201        ."      MOVS     r2,#1
        0x0020a892:    88e3        ..      LDRH     r3,[r4,#6]
        0x0020a894:    3130        01      ADDS     r1,r1,#0x30
;;;1058                                   p_simp_client_cb_data->cb_content.write_result.cause);
;;;1059                   break;
        0x0020a896:    e782        ..      B        0x20a79e ; app_client_callback + 710
        0x0020a898:    e038        8.      B        0x20a90c ; app_client_callback + 1076
;;;1060               default:
;;;1061                   break;
;;;1062               }
;;;1063               break;
;;;1064           case SIMP_CLIENT_CB_TYPE_NOTIF_IND_RESULT:
;;;1065               switch (p_simp_client_cb_data->cb_content.notif_ind_data.type)
        0x0020a89a:    7921        !y      LDRB     r1,[r4,#4]
        0x0020a89c:    b111        ..      CBZ      r1,0x20a8a4 ; app_client_callback + 972
        0x0020a89e:    2901        .)      CMP      r1,#1
        0x0020a8a0:    d125        %.      BNE      0x20a8ee ; app_client_callback + 1046
        0x0020a8a2:    e025        %.      B        0x20a8f0 ; app_client_callback + 1048
;;;1066               {
;;;1067               case SIMP_V3_NOTIFY:
;;;1068                   value_size = p_simp_client_cb_data->cb_content.notif_ind_data.data.value_size;
        0x0020a8a4:    8927        '.      LDRH     r7,[r4,#8]
;;;1069                   p_value = p_simp_client_cb_data->cb_content.notif_ind_data.data.p_value;
        0x0020a8a6:    68e4        .h      LDR      r4,[r4,#0xc]
;;;1070   //by vsop for notify				
;;;1071                   APP_PRINT_INFO2("SIMP_V3_NOTIFY: value_size %d, value %b",
        0x0020a8a8:    4639        9F      MOV      r1,r7
        0x0020a8aa:    4622        "F      MOV      r2,r4
        0x0020a8ac:    f5fdfb2d    ..-.    BL       trace_binary ; 0x7f0a
        0x0020a8b0:    494a        JI      LDR      r1,[pc,#296] ; [0x20a9dc] = 0x8802128
        0x0020a8b2:    9000        ..      STR      r0,[sp,#0]
        0x0020a8b4:    463b        ;F      MOV      r3,r7
        0x0020a8b6:    2202        ."      MOVS     r2,#2
        0x0020a8b8:    3164        d1      ADDS     r1,r1,#0x64
        0x0020a8ba:    4640        @F      MOV      r0,r8
        0x0020a8bc:    f5fdf8cf    ....    BL       log_buffer ; 0x7a5e
;;;1072                                   value_size, TRACE_BINARY(value_size, p_value));
;;;1073   				data_uart_print("#notify#!%d![]@%d{ ",conn_id,value_size);
        0x0020a8c0:    463a        :F      MOV      r2,r7
        0x0020a8c2:    4629        )F      MOV      r1,r5
        0x0020a8c4:    a046        F.      ADR      r0,{pc}+0x11c ; 0x20a9e0
        0x0020a8c6:    f000fa1b    ....    BL       data_uart_print ; 0x20ad00
;;;1074   				for(uint16_t i=0;i<value_size;i++)
        0x0020a8ca:    2500        .%      MOVS     r5,#0
        0x0020a8cc:    e00a        ..      B        0x20a8e4 ; app_client_callback + 1036
        0x0020a8ce:    5d62        b]      LDRB     r2,[r4,r5]
        0x0020a8d0:    a148        H.      ADR      r1,{pc}+0x124 ; 0x20a9f4
        0x0020a8d2:    a801        ..      ADD      r0,sp,#4
        0x0020a8d4:    f011fdb2    ....    BL       __2sprintf ; 0x21c43c
        0x0020a8d8:    a901        ..      ADD      r1,sp,#4
        0x0020a8da:    a048        H.      ADR      r0,{pc}+0x122 ; 0x20a9fc
        0x0020a8dc:    f000fa10    ....    BL       data_uart_print ; 0x20ad00
        0x0020a8e0:    1c6d        m.      ADDS     r5,r5,#1
        0x0020a8e2:    b2ad        ..      UXTH     r5,r5
        0x0020a8e4:    42bd        .B      CMP      r5,r7
        0x0020a8e6:    d3f2        ..      BCC      0x20a8ce ; app_client_callback + 1014
;;;1075   				{
;;;1076   					sprintf(temp,"%02X",p_value[i]);
;;;1077   					data_uart_print("%s ",temp);					
;;;1078   				}
;;;1079   				data_uart_print("}\r\n");				
        0x0020a8e8:    a045        E.      ADR      r0,{pc}+0x118 ; 0x20aa00
        0x0020a8ea:    f000fa09    ....    BL       data_uart_print ; 0x20ad00
;;;1080                   break;
        0x0020a8ee:    e05b        [.      B        0x20a9a8 ; app_client_callback + 1232
;;;1081               case SIMP_V4_INDICATE:
;;;1082                   value_size = p_simp_client_cb_data->cb_content.notif_ind_data.data.value_size;
        0x0020a8f0:    8925        %.      LDRH     r5,[r4,#8]
;;;1083                   p_value = p_simp_client_cb_data->cb_content.notif_ind_data.data.p_value;
;;;1084                   APP_PRINT_INFO2("SIMP_V4_INDICATE: value_size %d, value %b",
        0x0020a8f2:    68e2        .h      LDR      r2,[r4,#0xc]
        0x0020a8f4:    4629        )F      MOV      r1,r5
        0x0020a8f6:    f5fdfb08    ....    BL       trace_binary ; 0x7f0a
        0x0020a8fa:    4938        8I      LDR      r1,[pc,#224] ; [0x20a9dc] = 0x8802128
        0x0020a8fc:    2202        ."      MOVS     r2,#2
        0x0020a8fe:    462b        +F      MOV      r3,r5
        0x0020a900:    3190        .1      ADDS     r1,r1,#0x90
        0x0020a902:    9000        ..      STR      r0,[sp,#0]
        0x0020a904:    4640        @F      MOV      r0,r8
        0x0020a906:    f5fdf8aa    ....    BL       log_buffer ; 0x7a5e
        0x0020a90a:    e04d        M.      B        0x20a9a8 ; app_client_callback + 1232
;;;1085                                   value_size, TRACE_BINARY(value_size, p_value));
;;;1086                   break;
;;;1087               default:
;;;1088                   break;
;;;1089               }
;;;1090               break;
;;;1091   
;;;1092           default:
;;;1093               break;
;;;1094           }
;;;1095       }
;;;1096       else if (client_id == bas_client_id)
        0x0020a90c:    78c9        .x      LDRB     r1,[r1,#3]
        0x0020a90e:    428f        .B      CMP      r7,r1
        0x0020a910:    d14a        J.      BNE      0x20a9a8 ; app_client_callback + 1232
;;;1097       {
;;;1098           T_BAS_CLIENT_CB_DATA *p_bas_cb_data = (T_BAS_CLIENT_CB_DATA *)p_data;
;;;1099           switch (p_bas_cb_data->cb_type)
        0x0020a912:    7821        !x      LDRB     r1,[r4,#0]
        0x0020a914:    b131        1.      CBZ      r1,0x20a924 ; app_client_callback + 1100
        0x0020a916:    2901        .)      CMP      r1,#1
        0x0020a918:    d029        ).      BEQ      0x20a96e ; app_client_callback + 1174
        0x0020a91a:    2902        .)      CMP      r1,#2
        0x0020a91c:    d040        @.      BEQ      0x20a9a0 ; app_client_callback + 1224
        0x0020a91e:    2903        .)      CMP      r1,#3
        0x0020a920:    d142        B.      BNE      0x20a9a8 ; app_client_callback + 1232
        0x0020a922:    e04e        N.      B        0x20a9c2 ; app_client_callback + 1258
;;;1100           {
;;;1101           case BAS_CLIENT_CB_TYPE_DISC_STATE:
;;;1102               switch (p_bas_cb_data->cb_content.disc_state)
        0x0020a924:    78a1        .x      LDRB     r1,[r4,#2]
        0x0020a926:    2902        .)      CMP      r1,#2
        0x0020a928:    d002        ..      BEQ      0x20a930 ; app_client_callback + 1112
        0x0020a92a:    2903        .)      CMP      r1,#3
        0x0020a92c:    d13c        <.      BNE      0x20a9a8 ; app_client_callback + 1232
        0x0020a92e:    e00f        ..      B        0x20a950 ; app_client_callback + 1144
;;;1103               {
;;;1104               case DISC_BAS_DONE:
;;;1105                   /* Discovery BAS procedure successfully done. */
;;;1106                   app_link_table[conn_id].discovered_flags |= APP_DISCOV_BAS_FLAG;
        0x0020a930:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020a932:    f0410104    A...    ORR      r1,r1,#4
        0x0020a936:    7041        Ap      STRB     r1,[r0,#1]
;;;1107                   app_link_table[conn_id].srv_found_flags |= APP_DISCOV_BAS_FLAG;
        0x0020a938:    7881        .x      LDRB     r1,[r0,#2]
        0x0020a93a:    f0410104    A...    ORR      r1,r1,#4
        0x0020a93e:    7081        .p      STRB     r1,[r0,#2]
;;;1108                   app_discov_services(conn_id, false);
        0x0020a940:    2100        .!      MOVS     r1,#0
        0x0020a942:    4628        (F      MOV      r0,r5
        0x0020a944:    f7fffa4d    ..M.    BL       app_discov_services ; 0x209de2
;;;1109                   APP_PRINT_INFO0("app_client_callback: discover bas procedure done");
        0x0020a948:    4924        $I      LDR      r1,[pc,#144] ; [0x20a9dc] = 0x8802128
        0x0020a94a:    2200        ."      MOVS     r2,#0
        0x0020a94c:    31c0        .1      ADDS     r1,r1,#0xc0
;;;1110                   break;
        0x0020a94e:    e00a        ..      B        0x20a966 ; app_client_callback + 1166
;;;1111               case DISC_BAS_FAILED:
;;;1112                   /* Discovery Request failed. */
;;;1113                   app_link_table[conn_id].discovered_flags |= APP_DISCOV_BAS_FLAG;
        0x0020a950:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020a952:    f0410104    A...    ORR      r1,r1,#4
        0x0020a956:    7041        Ap      STRB     r1,[r0,#1]
;;;1114                   app_discov_services(conn_id, false);
        0x0020a958:    2100        .!      MOVS     r1,#0
        0x0020a95a:    4628        (F      MOV      r0,r5
        0x0020a95c:    f7fffa41    ..A.    BL       app_discov_services ; 0x209de2
;;;1115                   APP_PRINT_INFO0("app_client_callback: discover bas procedure failed");
        0x0020a960:    491e        .I      LDR      r1,[pc,#120] ; [0x20a9dc] = 0x8802128
        0x0020a962:    2200        ."      MOVS     r2,#0
        0x0020a964:    31f4        .1      ADDS     r1,r1,#0xf4
        0x0020a966:    4640        @F      MOV      r0,r8
        0x0020a968:    f5fdf879    ..y.    BL       log_buffer ; 0x7a5e
        0x0020a96c:    e01c        ..      B        0x20a9a8 ; app_client_callback + 1232
;;;1116                   break;
;;;1117               default:
;;;1118                   break;
;;;1119               }
;;;1120               break;
;;;1121           case BAS_CLIENT_CB_TYPE_READ_RESULT:
;;;1122               switch (p_bas_cb_data->cb_content.read_result.type)
        0x0020a96e:    78a0        .x      LDRB     r0,[r4,#2]
        0x0020a970:    b158        X.      CBZ      r0,0x20a98a ; app_client_callback + 1202
        0x0020a972:    2801        .(      CMP      r0,#1
        0x0020a974:    d118        ..      BNE      0x20a9a8 ; app_client_callback + 1232
;;;1123               {
;;;1124               case BAS_READ_BATTERY_LEVEL:
;;;1125                   if (p_bas_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a976:    88a3        ..      LDRH     r3,[r4,#4]
        0x0020a978:    b113        ..      CBZ      r3,0x20a980 ; app_client_callback + 1192
        0x0020a97a:    2201        ."      MOVS     r2,#1
        0x0020a97c:    4921        !I      LDR      r1,[pc,#132] ; [0x20aa04] = 0x8802280
        0x0020a97e:    e76d        m.      B        0x20a85c ; app_client_callback + 900
;;;1126                   {
;;;1127                       APP_PRINT_INFO1("BAS_READ_BATTERY_LEVEL: battery level %d",
        0x0020a980:    4920         I      LDR      r1,[pc,#128] ; [0x20aa04] = 0x8802280
        0x0020a982:    2201        ."      MOVS     r2,#1
        0x0020a984:    78e3        .x      LDRB     r3,[r4,#3]
        0x0020a986:    392c        ,9      SUBS     r1,r1,#0x2c
        0x0020a988:    e709        ..      B        0x20a79e ; app_client_callback + 710
;;;1128                                       p_bas_cb_data->cb_content.read_result.data.battery_level);
;;;1129                   }
;;;1130                   else
;;;1131                   {
;;;1132                       APP_PRINT_ERROR1("BAS_READ_BATTERY_LEVEL: failed cause 0x%x",
;;;1133                                        p_bas_cb_data->cb_content.read_result.cause);
;;;1134                   }
;;;1135                   break;
;;;1136               case BAS_READ_NOTIFY:
;;;1137                   if (p_bas_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a98a:    88a3        ..      LDRH     r3,[r4,#4]
        0x0020a98c:    b11b        ..      CBZ      r3,0x20a996 ; app_client_callback + 1214
        0x0020a98e:    491d        .I      LDR      r1,[pc,#116] ; [0x20aa04] = 0x8802280
        0x0020a990:    2201        ."      MOVS     r2,#1
        0x0020a992:    3150        P1      ADDS     r1,r1,#0x50
        0x0020a994:    e762        b.      B        0x20a85c ; app_client_callback + 900
;;;1138                   {
;;;1139                       APP_PRINT_INFO1("BAS_READ_NOTIFY: notify %d",
        0x0020a996:    491b        .I      LDR      r1,[pc,#108] ; [0x20aa04] = 0x8802280
        0x0020a998:    2201        ."      MOVS     r2,#1
        0x0020a99a:    78e3        .x      LDRB     r3,[r4,#3]
        0x0020a99c:    3130        01      ADDS     r1,r1,#0x30
        0x0020a99e:    e6fe        ..      B        0x20a79e ; app_client_callback + 710
;;;1140                                       p_bas_cb_data->cb_content.read_result.data.notify);
;;;1141                   }
;;;1142                   else
;;;1143                   {
;;;1144                       APP_PRINT_ERROR1("BAS_READ_NOTIFY: failed cause 0x%x",
;;;1145                                        p_bas_cb_data->cb_content.read_result.cause);
;;;1146                   };
;;;1147                   break;
;;;1148   
;;;1149               default:
;;;1150                   break;
;;;1151               }
;;;1152               break;
;;;1153           case BAS_CLIENT_CB_TYPE_WRITE_RESULT:
;;;1154               switch (p_bas_cb_data->cb_content.write_result.type)
        0x0020a9a0:    78a0        .x      LDRB     r0,[r4,#2]
        0x0020a9a2:    b120         .      CBZ      r0,0x20a9ae ; app_client_callback + 1238
        0x0020a9a4:    2801        .(      CMP      r0,#1
        0x0020a9a6:    d007        ..      BEQ      0x20a9b8 ; app_client_callback + 1248
        0x0020a9a8:    4630        0F      MOV      r0,r6
        0x0020a9aa:    e8bd81fc    ....    POP      {r2-r8,pc}
;;;1155               {
;;;1156               case BAS_WRITE_NOTIFY_ENABLE:
;;;1157                   APP_PRINT_INFO1("BAS_WRITE_NOTIFY_ENABLE: write result 0x%x",
        0x0020a9ae:    4915        .I      LDR      r1,[pc,#84] ; [0x20aa04] = 0x8802280
        0x0020a9b0:    2201        ."      MOVS     r2,#1
        0x0020a9b2:    88a3        ..      LDRH     r3,[r4,#4]
        0x0020a9b4:    3178        x1      ADDS     r1,r1,#0x78
;;;1158                                   p_bas_cb_data->cb_content.write_result.cause);
;;;1159                   break;
        0x0020a9b6:    e6f2        ..      B        0x20a79e ; app_client_callback + 710
;;;1160               case BAS_WRITE_NOTIFY_DISABLE:
;;;1161                   APP_PRINT_INFO1("BAS_WRITE_NOTIFY_DISABLE: write result 0x%x",
        0x0020a9b8:    4912        .I      LDR      r1,[pc,#72] ; [0x20aa04] = 0x8802280
        0x0020a9ba:    2201        ."      MOVS     r2,#1
        0x0020a9bc:    88a3        ..      LDRH     r3,[r4,#4]
        0x0020a9be:    31a8        .1      ADDS     r1,r1,#0xa8
;;;1162                                   p_bas_cb_data->cb_content.write_result.cause);
;;;1163                   break;
        0x0020a9c0:    e6ed        ..      B        0x20a79e ; app_client_callback + 710
;;;1164               default:
;;;1165                   break;
;;;1166               }
;;;1167               break;
;;;1168           case BAS_CLIENT_CB_TYPE_NOTIF_IND_RESULT:
;;;1169               APP_PRINT_INFO1("BAS_CLIENT_CB_TYPE_NOTIF_IND_RESULT: battery level %d",
        0x0020a9c2:    4910        .I      LDR      r1,[pc,#64] ; [0x20aa04] = 0x8802280
        0x0020a9c4:    2201        ."      MOVS     r2,#1
        0x0020a9c6:    78a3        .x      LDRB     r3,[r4,#2]
        0x0020a9c8:    31d8        .1      ADDS     r1,r1,#0xd8
;;;1170                               p_bas_cb_data->cb_content.notify_data.battery_level);
;;;1171               break;
        0x0020a9ca:    e6e8        ..      B        0x20a79e ; app_client_callback + 710
    $d
        0x0020a9cc:    08801ed8    ....    DCD    142614232
        0x0020a9d0:    21103000    .0.!    DCD    554708992
        0x0020a9d4:    21500000    ..P!    DCD    558891008
        0x0020a9d8:    0880201c    . ..    DCD    142614556
        0x0020a9dc:    08802128    (!..    DCD    142614824
        0x0020a9e0:    746f6e23    #not    DCD    1953459747
        0x0020a9e4:    23796669    ify#    DCD    595158633
        0x0020a9e8:    21642521    !%d!    DCD    560211233
        0x0020a9ec:    25405d5b    []@%    DCD    624975195
        0x0020a9f0:    00207b64    d{ .    DCD    2128740
        0x0020a9f4:    58323025    %02X    DCD    1479684133
        0x0020a9f8:    00000000    ....    DCD    0
        0x0020a9fc:    00207325    %s .    DCD    2126629
        0x0020aa00:    000a0d7d    }...    DCD    658813
        0x0020aa04:    08802280    ."..    DCD    142615168
    $t
    .text
    app_le_gap_init
;;; ..\..\..\src\sample\ble_central\main.c
;;;73     {
        0x0020aa08:    b500        ..      PUSH     {lr}
        0x0020aa0a:    b099        ..      SUB      sp,sp,#0x64
;;;74         /* Device name and device appearance */
;;;75         uint8_t  device_name[GAP_DEVICE_NAME_LEN] = "BLE_CENTRAL";
        0x0020aa0c:    2228        ("      MOVS     r2,#0x28
        0x0020aa0e:    495a        ZI      LDR      r1,[pc,#360] ; [0x20ab78] = 0x20be44
        0x0020aa10:    4668        hF      MOV      r0,sp
        0x0020aa12:    f64ffac9    O...    BL       __aeabi_memcpy4 ; 0x59fa8
;;;76         uint16_t appearance = GAP_GATT_APPEARANCE_UNKNOWN;
        0x0020aa16:    2000        .       MOVS     r0,#0
        0x0020aa18:    2101        .!      MOVS     r1,#1
        0x0020aa1a:    2210        ."      MOVS     r2,#0x10
        0x0020aa1c:    f8ad0058    ..X.    STRH     r0,[sp,#0x58]
;;;77     
;;;78         /* Scan parameters */
;;;79         uint8_t  scan_mode = GAP_SCAN_MODE_ACTIVE;
        0x0020aa20:    f88d105c    ..\.    STRB     r1,[sp,#0x5c]
;;;80         uint16_t scan_interval = DEFAULT_SCAN_INTERVAL;
        0x0020aa24:    f8ad2030    ..0     STRH     r2,[sp,#0x30]
;;;81         uint16_t scan_window = DEFAULT_SCAN_WINDOW;
        0x0020aa28:    f8ad2034    ..4     STRH     r2,[sp,#0x34]
;;;82         uint8_t  scan_filter_policy = GAP_SCAN_FILTER_ANY;
;;;83         uint8_t  scan_filter_duplicate = GAP_SCAN_FILTER_DUPLICATE_ENABLE;
        0x0020aa2c:    f88d103c    ..<.    STRB     r1,[sp,#0x3c]
        0x0020aa30:    f8ad102c    ..,.    STRH     r1,[sp,#0x2c]
        0x0020aa34:    2203        ."      MOVS     r2,#3
;;;84     
;;;85         /* GAP Bond Manager parameters */
;;;86         uint8_t  auth_pair_mode = GAP_PAIRING_MODE_PAIRABLE;
        0x0020aa36:    f88d1028    ..(.    STRB     r1,[sp,#0x28]
;;;87         uint16_t auth_flags = GAP_AUTHEN_BIT_BONDING_FLAG;
;;;88         uint8_t  auth_io_cap = GAP_IO_CAP_NO_INPUT_NO_OUTPUT;
        0x0020aa3a:    f88d2040    ..@     STRB     r2,[sp,#0x40]
        0x0020aa3e:    f88d0038    ..8.    STRB     r0,[sp,#0x38]
;;;89         uint8_t  auth_oob = false;
        0x0020aa42:    f88d0044    ..D.    STRB     r0,[sp,#0x44]
;;;90         uint8_t  auth_use_fix_passkey = false;
        0x0020aa46:    f88d0048    ..H.    STRB     r0,[sp,#0x48]
;;;91         uint32_t auth_fix_passkey = 0;
;;;92         uint8_t  auth_sec_req_enable = false;
        0x0020aa4a:    9013        ..      STR      r0,[sp,#0x4c]
        0x0020aa4c:    f88d0050    ..P.    STRB     r0,[sp,#0x50]
;;;93         uint16_t auth_sec_req_flags = GAP_AUTHEN_BIT_BONDING_FLAG;
        0x0020aa50:    f8ad1054    ..T.    STRH     r1,[sp,#0x54]
;;;94     
;;;95         /* Set device name and device appearance */
;;;96         le_set_gap_param(GAP_PARAM_DEVICE_NAME, GAP_DEVICE_NAME_LEN, device_name);
        0x0020aa54:    466a        jF      MOV      r2,sp
        0x0020aa56:    2128        (!      MOVS     r1,#0x28
        0x0020aa58:    f2402022    @."     MOV      r0,#0x222
        0x0020aa5c:    f642f8f4    B...    BL       le_set_gap_param ; 0x4cc48
;;;97         le_set_gap_param(GAP_PARAM_APPEARANCE, sizeof(appearance), &appearance);
        0x0020aa60:    aa16        ..      ADD      r2,sp,#0x58
        0x0020aa62:    2102        .!      MOVS     r1,#2
        0x0020aa64:    f2402021    @.!     MOV      r0,#0x221
        0x0020aa68:    f642f8ee    B...    BL       le_set_gap_param ; 0x4cc48
;;;98     
;;;99         /* Set scan parameters */
;;;100        le_scan_set_param(GAP_PARAM_SCAN_MODE, sizeof(scan_mode), &scan_mode);
        0x0020aa6c:    aa17        ..      ADD      r2,sp,#0x5c
        0x0020aa6e:    2101        .!      MOVS     r1,#1
        0x0020aa70:    f2402041    @.A     MOV      r0,#0x241
        0x0020aa74:    f647fc7e    G.~.    BL       le_scan_set_param ; 0x52374
;;;101        le_scan_set_param(GAP_PARAM_SCAN_INTERVAL, sizeof(scan_interval), &scan_interval);
        0x0020aa78:    aa0c        ..      ADD      r2,sp,#0x30
        0x0020aa7a:    2102        .!      MOVS     r1,#2
        0x0020aa7c:    f2402042    @.B     MOV      r0,#0x242
        0x0020aa80:    f647fc78    G.x.    BL       le_scan_set_param ; 0x52374
;;;102        le_scan_set_param(GAP_PARAM_SCAN_WINDOW, sizeof(scan_window), &scan_window);
        0x0020aa84:    aa0d        ..      ADD      r2,sp,#0x34
        0x0020aa86:    2102        .!      MOVS     r1,#2
        0x0020aa88:    f2402043    @.C     MOV      r0,#0x243
        0x0020aa8c:    f647fc72    G.r.    BL       le_scan_set_param ; 0x52374
;;;103        le_scan_set_param(GAP_PARAM_SCAN_FILTER_POLICY, sizeof(scan_filter_policy),
        0x0020aa90:    aa0e        ..      ADD      r2,sp,#0x38
        0x0020aa92:    2101        .!      MOVS     r1,#1
        0x0020aa94:    f44f7011    O..p    MOV      r0,#0x244
        0x0020aa98:    f647fc6c    G.l.    BL       le_scan_set_param ; 0x52374
;;;104                          &scan_filter_policy);
;;;105        le_scan_set_param(GAP_PARAM_SCAN_FILTER_DUPLICATES, sizeof(scan_filter_duplicate),
        0x0020aa9c:    aa0f        ..      ADD      r2,sp,#0x3c
        0x0020aa9e:    2101        .!      MOVS     r1,#1
        0x0020aaa0:    f2402045    @.E     MOV      r0,#0x245
        0x0020aaa4:    f647fc66    G.f.    BL       le_scan_set_param ; 0x52374
;;;106                          &scan_filter_duplicate);
;;;107    
;;;108        /* Setup the GAP Bond Manager */
;;;109        gap_set_param(GAP_PARAM_BOND_PAIRING_MODE, sizeof(auth_pair_mode), &auth_pair_mode);
        0x0020aaa8:    aa0a        ..      ADD      r2,sp,#0x28
        0x0020aaaa:    2101        .!      MOVS     r1,#1
        0x0020aaac:    f2402002    @..     MOV      r0,#0x202
        0x0020aab0:    f641fa7b    A.{.    BL       gap_set_param ; 0x4bfaa
;;;110        gap_set_param(GAP_PARAM_BOND_AUTHEN_REQUIREMENTS_FLAGS, sizeof(auth_flags), &auth_flags);
        0x0020aab4:    aa0b        ..      ADD      r2,sp,#0x2c
        0x0020aab6:    2102        .!      MOVS     r1,#2
        0x0020aab8:    f2402003    @..     MOV      r0,#0x203
        0x0020aabc:    f641fa75    A.u.    BL       gap_set_param ; 0x4bfaa
;;;111        gap_set_param(GAP_PARAM_BOND_IO_CAPABILITIES, sizeof(auth_io_cap), &auth_io_cap);
        0x0020aac0:    aa10        ..      ADD      r2,sp,#0x40
        0x0020aac2:    2101        .!      MOVS     r1,#1
        0x0020aac4:    f44f7001    O..p    MOV      r0,#0x204
        0x0020aac8:    f641fa6f    A.o.    BL       gap_set_param ; 0x4bfaa
;;;112        gap_set_param(GAP_PARAM_BOND_OOB_ENABLED, sizeof(auth_oob), &auth_oob);
        0x0020aacc:    aa11        ..      ADD      r2,sp,#0x44
        0x0020aace:    2101        .!      MOVS     r1,#1
        0x0020aad0:    f2402005    @..     MOV      r0,#0x205
        0x0020aad4:    f641fa69    A.i.    BL       gap_set_param ; 0x4bfaa
;;;113        le_bond_set_param(GAP_PARAM_BOND_FIXED_PASSKEY, sizeof(auth_fix_passkey), &auth_fix_passkey);
        0x0020aad8:    aa13        ..      ADD      r2,sp,#0x4c
        0x0020aada:    2104        .!      MOVS     r1,#4
        0x0020aadc:    f2402011    @..     MOV      r0,#0x211
        0x0020aae0:    f641fb85    A...    BL       le_bond_set_param ; 0x4c1ee
;;;114        le_bond_set_param(GAP_PARAM_BOND_FIXED_PASSKEY_ENABLE, sizeof(auth_use_fix_passkey),
        0x0020aae4:    aa12        ..      ADD      r2,sp,#0x48
        0x0020aae6:    2101        .!      MOVS     r1,#1
        0x0020aae8:    f2402012    @..     MOV      r0,#0x212
        0x0020aaec:    f641fb7f    A...    BL       le_bond_set_param ; 0x4c1ee
;;;115                          &auth_use_fix_passkey);
;;;116        le_bond_set_param(GAP_PARAM_BOND_SEC_REQ_ENABLE, sizeof(auth_sec_req_enable), &auth_sec_req_enable);
        0x0020aaf0:    aa14        ..      ADD      r2,sp,#0x50
        0x0020aaf2:    2101        .!      MOVS     r1,#1
        0x0020aaf4:    f2402013    @..     MOV      r0,#0x213
        0x0020aaf8:    f641fb79    A.y.    BL       le_bond_set_param ; 0x4c1ee
;;;117        le_bond_set_param(GAP_PARAM_BOND_SEC_REQ_REQUIREMENT, sizeof(auth_sec_req_flags),
        0x0020aafc:    aa15        ..      ADD      r2,sp,#0x54
        0x0020aafe:    2102        .!      MOVS     r1,#2
        0x0020ab00:    f44f7005    O..p    MOV      r0,#0x214
        0x0020ab04:    f641fb73    A.s.    BL       le_bond_set_param ; 0x4c1ee
;;;118                          &auth_sec_req_flags);
;;;119    
;;;120        /* register gap message callback */
;;;121        le_register_app_cb(app_gap_callback);
        0x0020ab08:    481c        .H      LDR      r0,[pc,#112] ; [0x20ab7c] = 0x20a42b
        0x0020ab0a:    f642f89a    B...    BL       le_register_app_cb ; 0x4cc42
;;;122    }
        0x0020ab0e:    b019        ..      ADD      sp,sp,#0x64
        0x0020ab10:    bd00        ..      POP      {pc}
    app_le_profile_init
;;;123    
;;;124    /**
;;;125     * @brief  Add GATT clients and register callbacks
;;;126     * @return void
;;;127     */
;;;128    void app_le_profile_init(void)
;;;129    {
        0x0020ab12:    b510        ..      PUSH     {r4,lr}
;;;130        client_init(3);
        0x0020ab14:    2003        .       MOVS     r0,#3
        0x0020ab16:    f643fc13    C...    BL       client_init ; 0x4e340
;;;131        gaps_client_id  = gaps_add_client(app_client_callback, APP_MAX_LINKS);
        0x0020ab1a:    2104        .!      MOVS     r1,#4
        0x0020ab1c:    4818        .H      LDR      r0,[pc,#96] ; [0x20ab80] = 0x20a4d9
        0x0020ab1e:    f7fefda0    ....    BL       gaps_add_client ; 0x209662
        0x0020ab22:    4918        .I      LDR      r1,[pc,#96] ; [0x20ab84] = 0x20d1a2
        0x0020ab24:    7008        .p      STRB     r0,[r1,#0]
;;;132        simple_ble_client_id = simp_ble_add_client(app_client_callback, APP_MAX_LINKS);
        0x0020ab26:    2104        .!      MOVS     r1,#4
        0x0020ab28:    4815        .H      LDR      r0,[pc,#84] ; [0x20ab80] = 0x20a4d9
        0x0020ab2a:    f7fef87d    ..}.    BL       simp_ble_add_client ; 0x208c28
        0x0020ab2e:    4916        .I      LDR      r1,[pc,#88] ; [0x20ab88] = 0x20d1a1
        0x0020ab30:    7008        .p      STRB     r0,[r1,#0]
;;;133        bas_client_id = bas_add_client(app_client_callback, APP_MAX_LINKS);
        0x0020ab32:    2104        .!      MOVS     r1,#4
        0x0020ab34:    4812        .H      LDR      r0,[pc,#72] ; [0x20ab80] = 0x20a4d9
        0x0020ab36:    f7fefb3d    ..=.    BL       bas_add_client ; 0x2091b4
        0x0020ab3a:    4914        .I      LDR      r1,[pc,#80] ; [0x20ab8c] = 0x20d1a3
        0x0020ab3c:    7008        .p      STRB     r0,[r1,#0]
;;;134    }
        0x0020ab3e:    bd10        ..      POP      {r4,pc}
    board_init
;;;135    
;;;136    /**
;;;137     * @brief    Contains the initialization of pinmux settings and pad settings
;;;138     * @note     All the pinmux settings and pad settings shall be initiated in this function,
;;;139     *           but if legacy driver is used, the initialization of pinmux setting and pad setting
;;;140     *           should be peformed with the IO initializing.
;;;141     * @return   void
;;;142     */
;;;143    void board_init(void)
;;;144    {
;;;145    
;;;146    }
        0x0020ab40:    4770        pG      BX       lr
    driver_init
;;;147    
;;;148    /**
;;;149     * @brief    Contains the initialization of peripherals
;;;150     * @note     Both new architecture driver and legacy driver initialization method can be used
;;;151     * @return   void
;;;152     */
;;;153    void driver_init(void)
;;;154    {
;;;155    
;;;156    }
        0x0020ab42:    4770        pG      BX       lr
    pwr_mgr_init
;;;157    
;;;158    /**
;;;159     * @brief    Contains the power mode settings
;;;160     * @return   void
;;;161     */
;;;162    void pwr_mgr_init(void)
;;;163    {
;;;164    }
        0x0020ab44:    4770        pG      BX       lr
    task_init
;;;165    
;;;166    /**
;;;167     * @brief    Contains the initialization of all tasks
;;;168     * @note     There is only one task in BLE Central APP, thus only one APP task is init here
;;;169     * @return   void
;;;170     */
;;;171    void task_init(void)
;;;172    {
;;;173        app_task_init();
        0x0020ab46:    f7ffb8ab    ....    B        app_task_init ; 0x209ca0
    main
;;;174    }
;;;175    
;;;176    /**
;;;177     * @brief    Entry of APP code
;;;178     * @return   int (To avoid compile warning)
;;;179     */
;;;180    int main(void)
;;;181    {
        0x0020ab4a:    b510        ..      PUSH     {r4,lr}
;;;182    	mxchip_qc_init();
        0x0020ab4c:    f000febf    ....    BL       mxchip_qc_init ; 0x20b8ce
;;;183        extern uint32_t random_seed_value;
;;;184        srand(random_seed_value);
        0x0020ab50:    480f        .H      LDR      r0,[pc,#60] ; [0x20ab90] = 0x20cfc8
        0x0020ab52:    6800        .h      LDR      r0,[r0,#0]
        0x0020ab54:    f001f8c4    ....    BL       srand ; 0x20bce0
;;;185        board_init();
;;;186        le_gap_init(APP_MAX_LINKS);
        0x0020ab58:    2004        .       MOVS     r0,#4
        0x0020ab5a:    f642f82f    B./.    BL       le_gap_init ; 0x4cbbc
;;;187        gap_lib_init();
        0x0020ab5e:    f000ffe1    ....    BL       gap_lib_init ; 0x20bb24
;;;188        app_le_gap_init();
        0x0020ab62:    f7ffff51    ..Q.    BL       app_le_gap_init ; 0x20aa08
;;;189        app_le_profile_init();
        0x0020ab66:    f7ffffd4    ....    BL       app_le_profile_init ; 0x20ab12
        0x0020ab6a:    f7fff899    ....    BL       app_task_init ; 0x209ca0
;;;190        pwr_mgr_init();
;;;191        task_init();
;;;192        os_sched_start();
        0x0020ab6e:    f61bfe28    ..(.    BL       os_sched_start ; 0x267c2
;;;193    
;;;194        return 0;
        0x0020ab72:    2000        .       MOVS     r0,#0
;;;195    }
        0x0020ab74:    bd10        ..      POP      {r4,pc}
    $d
        0x0020ab76:    0000        ..      DCW    0
        0x0020ab78:    0020be44    D. .    DCD    2145860
        0x0020ab7c:    0020a42b    +. .    DCD    2139179
        0x0020ab80:    0020a4d9    .. .    DCD    2139353
        0x0020ab84:    0020d1a2    .. .    DCD    2150818
        0x0020ab88:    0020d1a1    .. .    DCD    2150817
        0x0020ab8c:    0020d1a3    .. .    DCD    2150819
        0x0020ab90:    0020cfc8    .. .    DCD    2150344
    $t
    .text
    data_uart_send_char
;;; ..\..\..\src\mcu\module\data_uart_cmd\data_uart.c
;;;18     {
        0x0020ab94:    b531        1.      PUSH     {r0,r4,r5,lr}
;;;19         UART_SendData(UART, (uint8_t *)&ch, 1);
        0x0020ab96:    4c9e        .L      LDR      r4,[pc,#632] ; [0x20ae10] = 0x40012000
        0x0020ab98:    2201        ."      MOVS     r2,#1
        0x0020ab9a:    4669        iF      MOV      r1,sp
        0x0020ab9c:    4620         F      MOV      r0,r4
        0x0020ab9e:    f7fdfbd9    ....    BL       UART_SendData ; 0x208354
;;;20         /* wait tx fifo empty */
;;;21         while (UART_GetFlagState(UART, UART_FLAG_THR_TSR_EMPTY) != SET);
        0x0020aba2:    2140        @!      MOVS     r1,#0x40
        0x0020aba4:    4620         F      MOV      r0,r4
        0x0020aba6:    f7fdfc08    ....    BL       UART_GetFlagState ; 0x2083ba
        0x0020abaa:    2801        .(      CMP      r0,#1
        0x0020abac:    d1f9        ..      BNE      0x20aba2 ; data_uart_send_char + 14
;;;22     
;;;23         return ch;
        0x0020abae:    9800        ..      LDR      r0,[sp,#0]
;;;24     }
        0x0020abb0:    bd38        8.      POP      {r3-r5,pc}
    data_uart_vsprintf
;;;25     
;;;26     int data_uart_vsprintf(char *buf, const char *fmt, const int *dp)
;;;27     {
        0x0020abb2:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x0020abb6:    b085        ..      SUB      sp,sp,#0x14
        0x0020abb8:    4616        .F      MOV      r6,r2
        0x0020abba:    460f        .F      MOV      r7,r1
        0x0020abbc:    4681        .F      MOV      r9,r0
        0x0020abbe:    4605        .F      MOV      r5,r0
        0x0020abc0:    e091        ..      B        0x20ace6 ; data_uart_vsprintf + 308
;;;28         char *p, *s;
;;;29     
;;;30         s = buf;
;;;31         for (; *fmt != '\0'; ++fmt)
;;;32         {
;;;33             if (*fmt != '%')
        0x0020abc2:    2825        %(      CMP      r0,#0x25
        0x0020abc4:    d008        ..      BEQ      0x20abd8 ; data_uart_vsprintf + 38
;;;34             {
;;;35                 buf ? *s++ = *fmt : data_uart_send_char(*fmt);
        0x0020abc6:    f1b90f00    ....    CMP      r9,#0
        0x0020abca:    d002        ..      BEQ      0x20abd2 ; data_uart_vsprintf + 32
        0x0020abcc:    f8050b01    ....    STRB     r0,[r5],#1
        0x0020abd0:    e088        ..      B        0x20ace4 ; data_uart_vsprintf + 306
        0x0020abd2:    f7ffffdf    ....    BL       data_uart_send_char ; 0x20ab94
        0x0020abd6:    e085        ..      B        0x20ace4 ; data_uart_vsprintf + 306
;;;36                 continue;
;;;37             }
;;;38             if (*++fmt == 's')
        0x0020abd8:    f8170f01    ....    LDRB     r0,[r7,#1]!
        0x0020abdc:    2873        s(      CMP      r0,#0x73
        0x0020abde:    d021        !.      BEQ      0x20ac24 ; data_uart_vsprintf + 114
        0x0020abe0:    211c        .!      MOVS     r1,#0x1c
        0x0020abe2:    f1a00230    ..0.    SUB      r2,r0,#0x30
        0x0020abe6:    466c        lF      MOV      r4,sp
        0x0020abe8:    2a09        .*      CMP      r2,#9
        0x0020abea:    d80d        ..      BHI      0x20ac08 ; data_uart_vsprintf + 86
        0x0020abec:    2100        .!      MOVS     r1,#0
        0x0020abee:    eb010181    ....    ADD      r1,r1,r1,LSL #2
        0x0020abf2:    eb000141    ..A.    ADD      r1,r0,r1,LSL #1
        0x0020abf6:    f8170f01    ....    LDRB     r0,[r7,#1]!
        0x0020abfa:    3930        09      SUBS     r1,r1,#0x30
        0x0020abfc:    f1a00230    ..0.    SUB      r2,r0,#0x30
        0x0020ac00:    2a09        .*      CMP      r2,#9
        0x0020ac02:    d9f4        ..      BLS      0x20abee ; data_uart_vsprintf + 60
        0x0020ac04:    0089        ..      LSLS     r1,r1,#2
        0x0020ac06:    1f09        ..      SUBS     r1,r1,#4
        0x0020ac08:    b2c0        ..      UXTB     r0,r0
        0x0020ac0a:    2878        x(      CMP      r0,#0x78
        0x0020ac0c:    d019        ..      BEQ      0x20ac42 ; data_uart_vsprintf + 144
        0x0020ac0e:    2858        X(      CMP      r0,#0x58
        0x0020ac10:    d017        ..      BEQ      0x20ac42 ; data_uart_vsprintf + 144
        0x0020ac12:    2870        p(      CMP      r0,#0x70
        0x0020ac14:    d015        ..      BEQ      0x20ac42 ; data_uart_vsprintf + 144
        0x0020ac16:    2850        P(      CMP      r0,#0x50
        0x0020ac18:    d013        ..      BEQ      0x20ac42 ; data_uart_vsprintf + 144
        0x0020ac1a:    2864        d(      CMP      r0,#0x64
        0x0020ac1c:    d02e        ..      BEQ      0x20ac7c ; data_uart_vsprintf + 202
        0x0020ac1e:    2863        c(      CMP      r0,#0x63
        0x0020ac20:    d04b        K.      BEQ      0x20acba ; data_uart_vsprintf + 264
        0x0020ac22:    e04c        L.      B        0x20acbe ; data_uart_vsprintf + 268
;;;39             {
;;;40                 for (p = (char *)*dp++; *p != '\0'; p++)
        0x0020ac24:    ce10        ..      LDM      r6!,{r4}
        0x0020ac26:    e008        ..      B        0x20ac3a ; data_uart_vsprintf + 136
;;;41                 {
;;;42                     buf ? *s++ = *p : data_uart_send_char(*p);
        0x0020ac28:    f1b90f00    ....    CMP      r9,#0
        0x0020ac2c:    d002        ..      BEQ      0x20ac34 ; data_uart_vsprintf + 130
        0x0020ac2e:    f8050b01    ....    STRB     r0,[r5],#1
        0x0020ac32:    e001        ..      B        0x20ac38 ; data_uart_vsprintf + 134
        0x0020ac34:    f7ffffae    ....    BL       data_uart_send_char ; 0x20ab94
        0x0020ac38:    1c64        d.      ADDS     r4,r4,#1
        0x0020ac3a:    7820         x      LDRB     r0,[r4,#0]
        0x0020ac3c:    2800        .(      CMP      r0,#0
        0x0020ac3e:    d1f3        ..      BNE      0x20ac28 ; data_uart_vsprintf + 118
        0x0020ac40:    e050        P.      B        0x20ace4 ; data_uart_vsprintf + 306
;;;43                 }
;;;44             }
;;;45             else    /* Length of item is bounded */
;;;46             {
;;;47                 char tmp[20], *q = tmp;
;;;48                 int shift = 28;
;;;49     
;;;50                 if ((*fmt  >= '0') && (*fmt  <= '9'))
;;;51                 {
;;;52                     int width;
;;;53                     unsigned char fch = *fmt;
;;;54                     for (width = 0; (fch >= '0') && (fch <= '9'); fch = *++fmt)
;;;55                     {
;;;56                         width = width * 10 + fch - '0';
;;;57                     }
;;;58                     shift = (width - 1) * 4;
;;;59                 }
;;;60                 /*
;;;61                  * Before each format q points to tmp buffer
;;;62                  * After each format q points past end of item
;;;63                  */
;;;64     
;;;65                 if ((*fmt == 'x') || (*fmt == 'X') || (*fmt == 'p') || (*fmt == 'P'))
;;;66                 {
;;;67                     /* With x86 gcc, sizeof(long) == sizeof(int) */
;;;68                     const long *lp = (const long *)dp;
;;;69                     long h = *lp++;
        0x0020ac42:    ce08        ..      LDM      r6!,{r3}
;;;70                     int ncase = (*fmt & 0x20);
        0x0020ac44:    f0000220    .. .    AND      r2,r0,#0x20
;;;71                     int alt = 0;
;;;72     
;;;73                     dp = (const int *)lp;
;;;74                     if ((*fmt == 'p') || (*fmt == 'P'))
        0x0020ac48:    2870        p(      CMP      r0,#0x70
        0x0020ac4a:    d001        ..      BEQ      0x20ac50 ; data_uart_vsprintf + 158
        0x0020ac4c:    2850        P(      CMP      r0,#0x50
        0x0020ac4e:    d106        ..      BNE      0x20ac5e ; data_uart_vsprintf + 172
;;;75                     {
;;;76                         alt = 1;
;;;77                     }
;;;78                     if (alt)
;;;79                     {
;;;80                         *q++ = '0';
        0x0020ac50:    2030        0       MOVS     r0,#0x30
        0x0020ac52:    f8040b01    ....    STRB     r0,[r4],#1
;;;81                         *q++ = 'X' | ncase;
        0x0020ac56:    f0420058    B.X.    ORR      r0,r2,#0x58
        0x0020ac5a:    f8040b01    ....    STRB     r0,[r4],#1
;;;82                     }
;;;83                     for (; shift >= 0; shift -= 4)
        0x0020ac5e:    2900        .)      CMP      r1,#0
        0x0020ac60:    db2f        /.      BLT      0x20acc2 ; data_uart_vsprintf + 272
        0x0020ac62:    fa43f001    C...    ASR      r0,r3,r1
        0x0020ac66:    f000000f    ....    AND      r0,r0,#0xf
        0x0020ac6a:    f20f1ca8    ....    ADR.W    r12,{pc}+0x1aa ; 0x20ae14
        0x0020ac6e:    f81c0000    ....    LDRB     r0,[r12,r0]
        0x0020ac72:    4310        .C      ORRS     r0,r0,r2
        0x0020ac74:    f8040b01    ....    STRB     r0,[r4],#1
        0x0020ac78:    1f09        ..      SUBS     r1,r1,#4
        0x0020ac7a:    e7f0        ..      B        0x20ac5e ; data_uart_vsprintf + 172
;;;84                     {
;;;85                         * q++ = "0123456789ABCDEF"[(h >> shift) & 0xF] | ncase;
;;;86                     }
;;;87                 }
;;;88                 else if (*fmt == 'd')
;;;89                 {
;;;90                     int i = *dp++;
        0x0020ac7c:    ce01        ..      LDM      r6!,{r0}
;;;91                     char *r;
;;;92                     if (i < 0)
        0x0020ac7e:    2800        .(      CMP      r0,#0
        0x0020ac80:    da03        ..      BGE      0x20ac8a ; data_uart_vsprintf + 216
;;;93                     {
;;;94                         *q++ = '-';
        0x0020ac82:    212d        -!      MOVS     r1,#0x2d
        0x0020ac84:    f8041b01    ....    STRB     r1,[r4],#1
;;;95                         i = -i;
        0x0020ac88:    4240        @B      RSBS     r0,r0,#0
;;;96                     }
;;;97                     p = q;      /* save beginning of digits */
        0x0020ac8a:    4621        !F      MOV      r1,r4
;;;98                     do
;;;99                     {
;;;100                        *q++ = '0' + (i % 10);
        0x0020ac8c:    220a        ."      MOVS     r2,#0xa
        0x0020ac8e:    fb90f3f2    ....    SDIV     r3,r0,r2
        0x0020ac92:    fb020313    ....    MLS      r3,r2,r3,r0
        0x0020ac96:    fb90f0f2    ....    SDIV     r0,r0,r2
        0x0020ac9a:    3330        03      ADDS     r3,r3,#0x30
        0x0020ac9c:    f8043b01    ...;    STRB     r3,[r4],#1
;;;101                        i /= 10;
;;;102                    }
;;;103                    while (i);
        0x0020aca0:    2800        .(      CMP      r0,#0
        0x0020aca2:    d1f4        ..      BNE      0x20ac8e ; data_uart_vsprintf + 220
;;;104                    /* reverse digits, stop in middle */
;;;105                    r = q;      /* don't alter q */
        0x0020aca4:    4620         F      MOV      r0,r4
;;;106                    while (--r > p)
        0x0020aca6:    e004        ..      B        0x20acb2 ; data_uart_vsprintf + 256
;;;107                    {
;;;108                        i = *r;
        0x0020aca8:    7802        .x      LDRB     r2,[r0,#0]
;;;109                        *r = *p;
        0x0020acaa:    780b        .x      LDRB     r3,[r1,#0]
        0x0020acac:    7003        .p      STRB     r3,[r0,#0]
;;;110                        *p++ = i;
        0x0020acae:    f8012b01    ...+    STRB     r2,[r1],#1
        0x0020acb2:    1e40        @.      SUBS     r0,r0,#1
        0x0020acb4:    4288        .B      CMP      r0,r1
        0x0020acb6:    d8f7        ..      BHI      0x20aca8 ; data_uart_vsprintf + 246
        0x0020acb8:    e003        ..      B        0x20acc2 ; data_uart_vsprintf + 272
;;;111                    }
;;;112                }
;;;113                else if (*fmt == 'c')
;;;114                {
;;;115                    *q++ = *dp++;
        0x0020acba:    f8160b04    ....    LDRB     r0,[r6],#4
;;;116                }
;;;117                else
;;;118                {
;;;119                    *q++ = *fmt;
        0x0020acbe:    f8040b01    ....    STRB     r0,[r4],#1
;;;120                }
;;;121                /* now output the saved string */
;;;122                for (p = tmp; p < q; ++p)
        0x0020acc2:    4668        hF      MOV      r0,sp
        0x0020acc4:    e00b        ..      B        0x20acde ; data_uart_vsprintf + 300
        0x0020acc6:    f8980000    ....    LDRB     r0,[r8,#0]
        0x0020acca:    f1b90f00    ....    CMP      r9,#0
        0x0020acce:    d002        ..      BEQ      0x20acd6 ; data_uart_vsprintf + 292
        0x0020acd0:    f8050b01    ....    STRB     r0,[r5],#1
        0x0020acd4:    e001        ..      B        0x20acda ; data_uart_vsprintf + 296
        0x0020acd6:    f7ffff5d    ..].    BL       data_uart_send_char ; 0x20ab94
        0x0020acda:    f1080001    ....    ADD      r0,r8,#1
        0x0020acde:    4680        .F      MOV      r8,r0
        0x0020ace0:    42a0        .B      CMP      r0,r4
        0x0020ace2:    d3f0        ..      BCC      0x20acc6 ; data_uart_vsprintf + 276
        0x0020ace4:    1c7f        ..      ADDS     r7,r7,#1
        0x0020ace6:    7838        8x      LDRB     r0,[r7,#0]
        0x0020ace8:    2800        .(      CMP      r0,#0
        0x0020acea:    f47faf6a    ..j.    BNE      0x20abc2 ; data_uart_vsprintf + 16
;;;123                {
;;;124                    buf ? *s++ = *p : data_uart_send_char(*p);
;;;125                }
;;;126            }
;;;127        }
;;;128        if (buf)
        0x0020acee:    f1b90f00    ....    CMP      r9,#0
        0x0020acf2:    d000        ..      BEQ      0x20acf6 ; data_uart_vsprintf + 324
;;;129        {
;;;130            *s = '\0';
        0x0020acf4:    7028        (p      STRB     r0,[r5,#0]
        0x0020acf6:    b005        ..      ADD      sp,sp,#0x14
;;;131        }
;;;132        return (s - buf);
        0x0020acf8:    eba50009    ....    SUB      r0,r5,r9
;;;133    }
        0x0020acfc:    e8bd83f0    ....    POP      {r4-r9,pc}
    data_uart_print
;;;134    
;;;135    /**
;;;136     * @brief  Print the trace information through data uart.
;;;137     * @param[in] fmt   Print parameters.
;;;138     * @return void
;;;139     *
;;;140     * <b>Example usage</b>
;;;141     * \code{.c}
;;;142        void test(void)
;;;143        {
;;;144            data_uart_print("GAP scan stop\r\n");
;;;145        }
;;;146     * \endcode
;;;147     */
;;;148    void data_uart_print(char *fmt, ...)
;;;149    {
        0x0020ad00:    b40f        ..      PUSH     {r0-r3}
        0x0020ad02:    2000        .       MOVS     r0,#0
;;; ..\..\..\src\mcu\module\data_uart_cmd\data_uart.c (149)
        0x0020ad04:    b510        ..      PUSH     {r4,lr}
;;;150        (void)data_uart_vsprintf(0, fmt, ((const int *)&fmt) + 1);
        0x0020ad06:    aa03        ..      ADD      r2,sp,#0xc
        0x0020ad08:    9902        ..      LDR      r1,[sp,#8]
        0x0020ad0a:    f7ffff52    ..R.    BL       data_uart_vsprintf ; 0x20abb2
;;;151    }
        0x0020ad0e:    bc10        ..      POP      {r4}
        0x0020ad10:    f85dfb14    ]...    LDR      pc,[sp],#0x14
    UART0_Handler
;;;152    
;;;153    /****************************************************************************/
;;;154    /* UART interrupt                                                           */
;;;155    /****************************************************************************/
;;;156    void UART0_Handler(void)
;;;157    {
        0x0020ad14:    b530        0.      PUSH     {r4,r5,lr}
        0x0020ad16:    b085        ..      SUB      sp,sp,#0x14
;;;158        uint8_t rx_char;
;;;159        T_IO_MSG io_driver_msg_send;
;;;160        uint8_t event  = EVENT_IO_TO_APP;
        0x0020ad18:    2002        .       MOVS     r0,#2
        0x0020ad1a:    f88d0010    ....    STRB     r0,[sp,#0x10]
;;; ..\..\..\inc\peripheral\rtl876x_uart.h
;;;426        return (uint16_t)(UARTx->INTID_FCR & (0x0000000E));
        0x0020ad1e:    4d3c        <M      LDR      r5,[pc,#240] ; [0x20ae10] = 0x40012000
;;; ..\..\..\src\mcu\module\data_uart_cmd\data_uart.c
;;;161        io_driver_msg_send.type = IO_MSG_TYPE_UART;
        0x0020ad20:    2003        .       MOVS     r0,#3
        0x0020ad22:    f8ad0004    ....    STRH     r0,[sp,#4]
;;; ..\..\..\inc\peripheral\rtl876x_uart.h
;;;426        return (uint16_t)(UARTx->INTID_FCR & (0x0000000E));
        0x0020ad26:    68a9        .h      LDR      r1,[r5,#8]
        0x0020ad28:    4628        (F      MOV      r0,r5
        0x0020ad2a:    f001040e    ....    AND      r4,r1,#0xe
;;; ..\..\..\src\mcu\module\data_uart_cmd\data_uart.c
;;;168        UART_INTConfig(UART, UART_INT_RD_AVA | UART_INT_LINE_STS, DISABLE);
        0x0020ad2e:    2200        ."      MOVS     r2,#0
        0x0020ad30:    2105        .!      MOVS     r1,#5
        0x0020ad32:    f7fdfb17    ....    BL       UART_INTConfig ; 0x208364
;;;169    
;;;170        switch (interrupt_id)
        0x0020ad36:    2c04        .,      CMP      r4,#4
        0x0020ad38:    d003        ..      BEQ      0x20ad42 ; UART0_Handler + 46
        0x0020ad3a:    dd23        #.      BLE      0x20ad84 ; UART0_Handler + 112
        0x0020ad3c:    2c06        .,      CMP      r4,#6
        0x0020ad3e:    d121        !.      BNE      0x20ad84 ; UART0_Handler + 112
        0x0020ad40:    e01b        ..      B        0x20ad7a ; UART0_Handler + 102
;;;171        {
;;;172        /* tx fifo empty, not enable */
;;;173        case UART_INT_ID_TX_EMPTY:
;;;174            break;
;;;175    
;;;176        /* rx data valiable */
;;;177        case UART_INT_ID_RX_LEVEL_REACH:
;;;178            UART_ReceiveData(UART, &rx_char, 1);
        0x0020ad42:    2201        ."      MOVS     r2,#1
        0x0020ad44:    a903        ..      ADD      r1,sp,#0xc
        0x0020ad46:    4628        (F      MOV      r0,r5
        0x0020ad48:    f7fdfafc    ....    BL       UART_ReceiveData ; 0x208344
;;;179            io_driver_msg_send.subtype = rx_char;
        0x0020ad4c:    f89d000c    ....    LDRB     r0,[sp,#0xc]
        0x0020ad50:    f8ad0006    ....    STRH     r0,[sp,#6]
;;;180    
;;;181            if (os_msg_send(h_io_q, &io_driver_msg_send, 0) == false)
        0x0020ad54:    4c35        5L      LDR      r4,[pc,#212] ; [0x20ae2c] = 0x20d1f8
        0x0020ad56:    20b5        .       MOVS     r0,#0xb5
        0x0020ad58:    9000        ..      STR      r0,[sp,#0]
        0x0020ad5a:    4b33        3K      LDR      r3,[pc,#204] ; [0x20ae28] = 0x21ca34
        0x0020ad5c:    2200        ."      MOVS     r2,#0
        0x0020ad5e:    a901        ..      ADD      r1,sp,#4
        0x0020ad60:    6860        `h      LDR      r0,[r4,#4]
        0x0020ad62:    f61bf93f    ..?.    BL       os_msg_send_intern ; 0x25fe4
        0x0020ad66:    b168        h.      CBZ      r0,0x20ad84 ; UART0_Handler + 112
;;;182            {
;;;183            }
;;;184            else if (os_msg_send(h_event_q, &event, 0) == false)
        0x0020ad68:    20b8        .       MOVS     r0,#0xb8
        0x0020ad6a:    9000        ..      STR      r0,[sp,#0]
        0x0020ad6c:    4b2e        .K      LDR      r3,[pc,#184] ; [0x20ae28] = 0x21ca34
        0x0020ad6e:    2200        ."      MOVS     r2,#0
        0x0020ad70:    a904        ..      ADD      r1,sp,#0x10
        0x0020ad72:    6820         h      LDR      r0,[r4,#0]
        0x0020ad74:    f61bf936    ..6.    BL       os_msg_send_intern ; 0x25fe4
        0x0020ad78:    e004        ..      B        0x20ad84 ; UART0_Handler + 112
;;;185            {
;;;186            }
;;;187            break;
;;;188    
;;;189        case UART_INT_ID_RX_TMEOUT:
;;;190            break;
;;;191    
;;;192        /* receive line status interrupt */
;;;193        case UART_INT_ID_LINE_STATUS:
;;;194            {
;;;195                DBG_DIRECT("Line status error!!!!\n");
        0x0020ad7a:    a12d        -.      ADR      r1,{pc}+0xb6 ; 0x20ae30
        0x0020ad7c:    f04f5004    O..P    MOV      r0,#0x21000000
        0x0020ad80:    f5fcfe16    ....    BL       log_direct ; 0x79b0
;;;196            }
;;;197            break;
;;;198    
;;;199        case UART_INT_ID_MODEM_STATUS:
;;;200            break;
;;;201    
;;;202        default:
;;;203            break;
;;;204        }
;;;205    
;;;206        /* enable interrupt again */
;;;207        UART_INTConfig(UART, UART_INT_RD_AVA, ENABLE);
        0x0020ad84:    2201        ."      MOVS     r2,#1
        0x0020ad86:    4611        .F      MOV      r1,r2
        0x0020ad88:    4628        (F      MOV      r0,r5
        0x0020ad8a:    f7fdfaeb    ....    BL       UART_INTConfig ; 0x208364
;;;208    
;;;209        return;
;;;210    }
        0x0020ad8e:    b005        ..      ADD      sp,sp,#0x14
        0x0020ad90:    bd30        0.      POP      {r4,r5,pc}
    data_uart_init
;;;211    
;;;212    /**
;;;213     * @brief  Initializes the Data UART.
;;;214     *
;;;215     * When data uart receives data, data uart will send an event IO_UART_MSG_TYPE to evt_queue_handle and send the data to io_queue_handle.
;;;216     * @param[in] event_queue_handle   Event queue handle which is created by APP.
;;;217     * @param[in] io_queue_handle      IO message queue handle which is created by APP.
;;;218     * @return void
;;;219     *
;;;220     * <b>Example usage</b>
;;;221     * \code{.c}
;;;222        void app_main_task(void *p_param)
;;;223        {
;;;224            char event;
;;;225    
;;;226            os_msg_queue_create(&io_queue_handle, MAX_NUMBER_OF_IO_MESSAGE, sizeof(T_IO_MSG));
;;;227            os_msg_queue_create(&evt_queue_handle, MAX_NUMBER_OF_EVENT_MESSAGE, sizeof(unsigned char));
;;;228    
;;;229            gap_start_bt_stack(evt_queue_handle, io_queue_handle, MAX_NUMBER_OF_GAP_MESSAGE);
;;;230    
;;;231            data_uart_init(evt_queue_handle, io_queue_handle);
;;;232            ......
;;;233        }
;;;234        void app_handle_io_msg(T_IO_MSG io_msg)
;;;235        {
;;;236            uint16_t msg_type = io_msg.type;
;;;237            uint8_t rx_char;
;;;238    
;;;239            switch (msg_type)
;;;240            {
;;;241            case IO_MSG_TYPE_UART:
;;;242                // We handle user command informations from Data UART in this branch.
;;;243                rx_char = (uint8_t)io_msg.subtype;
;;;244                user_cmd_collect(&user_cmd_if, &rx_char, sizeof(rx_char), user_cmd_table);
;;;245                break;
;;;246            default:
;;;247                break;
;;;248            }
;;;249        }
;;;250     * \endcode
;;;251     */
;;;252    void data_uart_init(void *event_queue_handle, void *io_queue_handle)
;;;253    {
        0x0020ad92:    b530        0.      PUSH     {r4,r5,lr}
        0x0020ad94:    4a25        %J      LDR      r2,[pc,#148] ; [0x20ae2c] = 0x20d1f8
        0x0020ad96:    b08d        ..      SUB      sp,sp,#0x34
;;;254    
;;;255        h_event_q = event_queue_handle;
        0x0020ad98:    e9c20100    ....    STRD     r0,r1,[r2,#0]
;;;256        h_io_q = io_queue_handle;
;;;257    
;;;258        RCC_PeriphClockCmd(APBPeriph_UART0, APBPeriph_UART0_CLOCK, ENABLE);
        0x0020ad9c:    2201        ."      MOVS     r2,#1
        0x0020ad9e:    492a        *I      LDR      r1,[pc,#168] ; [0x20ae48] = 0x40000001
        0x0020ada0:    482a        *H      LDR      r0,[pc,#168] ; [0x20ae4c] = 0x8000001
        0x0020ada2:    f7fdf895    ....    BL       RCC_PeriphClockCmd ; 0x207ed0
;;;259        Pinmux_Config(DATA_UART_TX_PIN, UART0_TX);
        0x0020ada6:    2123        #!      MOVS     r1,#0x23
        0x0020ada8:    2018        .       MOVS     r0,#0x18
        0x0020adaa:    f606fae3    ....    BL       Pinmux_Config ; 0x11374
;;;260        Pinmux_Config(DATA_UART_RX_PIN, UART0_RX);
        0x0020adae:    2124        $!      MOVS     r1,#0x24
        0x0020adb0:    2019        .       MOVS     r0,#0x19
        0x0020adb2:    f606fadf    ....    BL       Pinmux_Config ; 0x11374
;;;261        Pad_Config(DATA_UART_TX_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_ENABLE,
        0x0020adb6:    2401        .$      MOVS     r4,#1
        0x0020adb8:    9400        ..      STR      r4,[sp,#0]
        0x0020adba:    2300        .#      MOVS     r3,#0
        0x0020adbc:    4622        "F      MOV      r2,r4
        0x0020adbe:    4621        !F      MOV      r1,r4
        0x0020adc0:    2018        .       MOVS     r0,#0x18
        0x0020adc2:    9401        ..      STR      r4,[sp,#4]
        0x0020adc4:    f606fb0a    ....    BL       Pad_Config ; 0x113dc
;;;262                   PAD_OUT_HIGH);
;;;263        Pad_Config(DATA_UART_RX_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE,
        0x0020adc8:    2000        .       MOVS     r0,#0
        0x0020adca:    2301        .#      MOVS     r3,#1
        0x0020adcc:    9000        ..      STR      r0,[sp,#0]
        0x0020adce:    9001        ..      STR      r0,[sp,#4]
        0x0020add0:    461a        .F      MOV      r2,r3
        0x0020add2:    4619        .F      MOV      r1,r3
        0x0020add4:    2019        .       MOVS     r0,#0x19
        0x0020add6:    f606fb01    ....    BL       Pad_Config ; 0x113dc
;;;264                   PAD_OUT_LOW);
;;;265    
;;;266        /* uart init */
;;;267        UART_InitTypeDef uartInitStruct;
;;;268        UART_StructInit(&uartInitStruct);
        0x0020adda:    a802        ..      ADD      r0,sp,#8
        0x0020addc:    f7fdfa9b    ....    BL       UART_StructInit ; 0x208316
        0x0020ade0:    4d0b        .M      LDR      r5,[pc,#44] ; [0x20ae10] = 0x40012000
;;;269        uartInitStruct.rxTriggerLevel = UART_RX_FIFO_TRIGGER_LEVEL_1BYTE;
        0x0020ade2:    f8ad4016    ...@    STRH     r4,[sp,#0x16]
;;;270        UART_Init(UART, &uartInitStruct);
        0x0020ade6:    a902        ..      ADD      r1,sp,#8
        0x0020ade8:    4628        (F      MOV      r0,r5
        0x0020adea:    f7fdfa1b    ....    BL       UART_Init ; 0x208224
;;;271        UART_INTConfig(UART, UART_INT_RD_AVA, ENABLE);
        0x0020adee:    2201        ."      MOVS     r2,#1
        0x0020adf0:    4611        .F      MOV      r1,r2
        0x0020adf2:    4628        (F      MOV      r0,r5
        0x0020adf4:    f7fdfab6    ....    BL       UART_INTConfig ; 0x208364
;;;272    
;;;273        /*  Enable UART IRQ  */
;;;274        NVIC_InitTypeDef nvic_init_struct;
;;;275        nvic_init_struct.NVIC_IRQChannel         = UART0_IRQn;
        0x0020adf8:    200c        .       MOVS     r0,#0xc
        0x0020adfa:    f88d0024    ..$.    STRB     r0,[sp,#0x24]
        0x0020adfe:    2005        .       MOVS     r0,#5
        0x0020ae00:    900a        ..      STR      r0,[sp,#0x28]
;;;276        nvic_init_struct.NVIC_IRQChannelCmd      = ENABLE;
        0x0020ae02:    f88d402c    ..,@    STRB     r4,[sp,#0x2c]
;;;277        nvic_init_struct.NVIC_IRQChannelPriority = 5;
;;;278        NVIC_Init(&nvic_init_struct);
        0x0020ae06:    a809        ..      ADD      r0,sp,#0x24
        0x0020ae08:    f606fa5a    ..Z.    BL       NVIC_Init ; 0x112c0
;;;279    }
        0x0020ae0c:    b00d        ..      ADD      sp,sp,#0x34
        0x0020ae0e:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x0020ae10:    40012000    . .@    DCD    1073815552
        0x0020ae14:    33323130    0123    DCD    858927408
        0x0020ae18:    37363534    4567    DCD    926299444
        0x0020ae1c:    42413938    89AB    DCD    1111570744
        0x0020ae20:    46454443    CDEF    DCD    1178944579
        0x0020ae24:    00000000    ....    DCD    0
        0x0020ae28:    0021ca34    4.!.    DCD    2214452
        0x0020ae2c:    0020d1f8    .. .    DCD    2150904
        0x0020ae30:    656e694c    Line    DCD    1701734732
        0x0020ae34:    61747320     sta    DCD    1635021600
        0x0020ae38:    20737574    tus     DCD    544437620
        0x0020ae3c:    6f727265    erro    DCD    1869771365
        0x0020ae40:    21212172    r!!!    DCD    555819378
        0x0020ae44:    00000a21    !...    DCD    2593
        0x0020ae48:    40000001    ...@    DCD    1073741825
        0x0020ae4c:    08000001    ....    DCD    134217729
    $t
    .text
    cmd_send_result
;;; ..\..\..\src\mcu\module\data_uart_cmd\user_cmd_parse.c
;;;133        switch (result)
        0x0020ae50:    280a        .(      CMP      r0,#0xa
        0x0020ae52:    d033        3.      BEQ      0x20aebc ; cmd_send_result + 108
        0x0020ae54:    dc07        ..      BGT      0x20ae66 ; cmd_send_result + 22
        0x0020ae56:    d23d        =.      BCS      0x20aed4 ; cmd_send_result + 132
        0x0020ae58:    e8dff000    ....    TBB      [pc,r0]
    $d
        0x0020ae5c:    22201e3c    <. "    DCD    572530236
        0x0020ae60:    2a282624    $&(*    DCD    707274276
        0x0020ae64:    2e2c        ,.      DCW    11820
    $t
        0x0020ae66:    2824        $(      CMP      r0,#0x24
        0x0020ae68:    d02e        ..      BEQ      0x20aec8 ; cmd_send_result + 120
        0x0020ae6a:    dc09        ..      BGT      0x20ae80 ; cmd_send_result + 48
        0x0020ae6c:    280b        .(      CMP      r0,#0xb
        0x0020ae6e:    d027        '.      BEQ      0x20aec0 ; cmd_send_result + 112
        0x0020ae70:    2820         (      CMP      r0,#0x20
        0x0020ae72:    d00f        ..      BEQ      0x20ae94 ; cmd_send_result + 68
        0x0020ae74:    2822        "(      CMP      r0,#0x22
        0x0020ae76:    d025        %.      BEQ      0x20aec4 ; cmd_send_result + 116
        0x0020ae78:    2823        #(      CMP      r0,#0x23
        0x0020ae7a:    d12b        +.      BNE      0x20aed4 ; cmd_send_result + 132
        0x0020ae7c:    a1ab        ..      ADR      r1,{pc}+0x2b0 ; 0x20b12c
        0x0020ae7e:    e006        ..      B        0x20ae8e ; cmd_send_result + 62
;;; ..\..\..\src\mcu\module\data_uart_cmd\user_cmd_parse.c (133)
        0x0020ae80:    2825        %(      CMP      r0,#0x25
        0x0020ae82:    d023        #.      BEQ      0x20aecc ; cmd_send_result + 124
        0x0020ae84:    2826        &(      CMP      r0,#0x26
        0x0020ae86:    d023        #.      BEQ      0x20aed0 ; cmd_send_result + 128
        0x0020ae88:    28ff        .(      CMP      r0,#0xff
        0x0020ae8a:    d123        #.      BNE      0x20aed4 ; cmd_send_result + 132
        0x0020ae8c:    a1ac        ..      ADR      r1,{pc}+0x2b4 ; 0x20b140
        0x0020ae8e:    a0b2        ..      ADR      r0,{pc}+0x2ca ; 0x20b158
        0x0020ae90:    f7ffbf36    ..6.    B.W      data_uart_print ; 0x20ad00
;;;134        {
;;;135        case RESULT_ERR:
;;;136            data_uart_print("%s\r\n", "CMD:Error");
        0x0020ae94:    a1b2        ..      ADR      r1,{pc}+0x2cc ; 0x20b160
;;;137            break;
        0x0020ae96:    e7fa        ..      B        0x20ae8e ; cmd_send_result + 62
;;;138        case RESULT_GAP_CAUSE_ALREADY_IN_REQ:
;;;139            data_uart_print("%s\r\n", "GAP_CAUSE_ALREADY_IN_REQ");
        0x0020ae98:    a1b4        ..      ADR      r1,{pc}+0x2d4 ; 0x20b16c
;;;140            break;
        0x0020ae9a:    e7f8        ..      B        0x20ae8e ; cmd_send_result + 62
;;;141        case RESULT_GAP_CAUSE_INVALID_STATE:
;;;142            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_STATE");
        0x0020ae9c:    a1ba        ..      ADR      r1,{pc}+0x2ec ; 0x20b188
;;;143            break;
        0x0020ae9e:    e7f6        ..      B        0x20ae8e ; cmd_send_result + 62
;;;144        case RESULT_GAP_CAUSE_INVALID_PARAM:
;;;145            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PARAM");
        0x0020aea0:    a1bf        ..      ADR      r1,{pc}+0x300 ; 0x20b1a0
;;;146            break;
        0x0020aea2:    e7f4        ..      B        0x20ae8e ; cmd_send_result + 62
;;;147        case RESULT_GAP_CAUSE_NON_CONN:
;;;148            data_uart_print("%s\r\n", "GAP_CAUSE_NON_CONN");
        0x0020aea4:    a1c4        ..      ADR      r1,{pc}+0x314 ; 0x20b1b8
;;;149            break;
        0x0020aea6:    e7f2        ..      B        0x20ae8e ; cmd_send_result + 62
;;;150        case RESULT_GAP_CAUSE_NOT_FIND_IRK:
;;;151            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND_IRK");
        0x0020aea8:    a1c8        ..      ADR      r1,{pc}+0x324 ; 0x20b1cc
;;;152            break;
        0x0020aeaa:    e7f0        ..      B        0x20ae8e ; cmd_send_result + 62
;;;153        case RESULT_GAP_CAUSE_ERROR_CREDITS:
;;;154            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_CREDITS");
        0x0020aeac:    a1cd        ..      ADR      r1,{pc}+0x338 ; 0x20b1e4
;;;155            break;
        0x0020aeae:    e7ee        ..      B        0x20ae8e ; cmd_send_result + 62
;;;156        case RESULT_GAP_CAUSE_SEND_REQ_FAILED:
;;;157            data_uart_print("%s\r\n", "GAP_CAUSE_SEND_REQ_FAILED");
        0x0020aeb0:    a1d2        ..      ADR      r1,{pc}+0x34c ; 0x20b1fc
;;;158            break;
        0x0020aeb2:    e7ec        ..      B        0x20ae8e ; cmd_send_result + 62
;;;159        case RESULT_GAP_CAUSE_NO_RESOURCE:
;;;160            data_uart_print("%s\r\n", "GAP_CAUSE_NO_RESOURCE");
        0x0020aeb4:    a1d8        ..      ADR      r1,{pc}+0x364 ; 0x20b218
;;;161            break;
        0x0020aeb6:    e7ea        ..      B        0x20ae8e ; cmd_send_result + 62
;;;162        case RESULT_GAP_CAUSE_INVALID_PDU_SIZE:
;;;163            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PDU_SIZE");
        0x0020aeb8:    a1dd        ..      ADR      r1,{pc}+0x378 ; 0x20b230
;;;164            break;
        0x0020aeba:    e7e8        ..      B        0x20ae8e ; cmd_send_result + 62
;;;165        case RESULT_GAP_CAUSE_NOT_FIND:
;;;166            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND");
        0x0020aebc:    a1e3        ..      ADR      r1,{pc}+0x390 ; 0x20b24c
;;;167            break;
        0x0020aebe:    e7e6        ..      B        0x20ae8e ; cmd_send_result + 62
;;;168        case RESULT_GAP_CAUSE_CONN_LIMIT:
;;;169            data_uart_print("%s\r\n", "GAP_CAUSE_CONN_LIMIT");
        0x0020aec0:    a1e7        ..      ADR      r1,{pc}+0x3a0 ; 0x20b260
;;;170            break;
        0x0020aec2:    e7e4        ..      B        0x20ae8e ; cmd_send_result + 62
;;;171        case RESULT_CMD_NOT_FOUND:
;;;172            data_uart_print("%s\r\n", "CMD:Command not found");
        0x0020aec4:    a1ec        ..      ADR      r1,{pc}+0x3b4 ; 0x20b278
;;;173            break;
        0x0020aec6:    e7e2        ..      B        0x20ae8e ; cmd_send_result + 62
;;;174        case RESULT_CMD_ERR_PARAM_NUM:
;;;175            data_uart_print("%s\r\n", "CMD:Wrong number of parameters");
        0x0020aec8:    a1f1        ..      ADR      r1,{pc}+0x3c8 ; 0x20b290
;;;176            break;
        0x0020aeca:    e7e0        ..      B        0x20ae8e ; cmd_send_result + 62
;;;177        case RESULT_CMD_ERR_PARAM:
;;;178            data_uart_print("%s\r\n", "CMD:Wrong parameter");
;;;179            break;
;;;180        case RESULT_CMD_OUT_OF_RANGE:
;;;181            data_uart_print("%s\r\n", "CMD:Value out of range");
        0x0020aecc:    a1f8        ..      ADR      r1,{pc}+0x3e4 ; 0x20b2b0
;;;182            break;
        0x0020aece:    e7de        ..      B        0x20ae8e ; cmd_send_result + 62
;;;183        case RESULT_CMD_NOT_SUPPORT:
;;;184            data_uart_print("%s\r\n", "CMD:Not support");
        0x0020aed0:    a1fd        ..      ADR      r1,{pc}+0x3f8 ; 0x20b2c8
;;;185            break;
        0x0020aed2:    e7dc        ..      B        0x20ae8e ; cmd_send_result + 62
;;;186        case RESULT_GAP_CAUSE_ERROR_UNKNOWN:
;;;187            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_UNKNOWN");
;;;188            break;
;;;189        default:
;;;190            break;
;;;191        }
;;;192    }
        0x0020aed4:    4770        pG      BX       lr
    user_cmd_parse
        0x0020aed6:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020aeda:    2600        .&      MOVS     r6,#0
        0x0020aedc:    600e        .`      STR      r6,[r1,#0]
        0x0020aede:    460d        .F      MOV      r5,r1
        0x0020aee0:    604e        N`      STR      r6,[r1,#4]
        0x0020aee2:    4631        1F      MOV      r1,r6
        0x0020aee4:    eb050281    ....    ADD      r2,r5,r1,LSL #2
        0x0020aee8:    1c49        I.      ADDS     r1,r1,#1
        0x0020aeea:    6516        .e      STR      r6,[r2,#0x50]
        0x0020aeec:    6096        .`      STR      r6,[r2,#8]
        0x0020aeee:    2912        .)      CMP      r1,#0x12
        0x0020aef0:    dbf8        ..      BLT      0x20aee4 ; user_cmd_parse + 14
        0x0020aef2:    f000fa92    ....    BL       user_cmd_skip_spaces ; 0x20b41a
        0x0020aef6:    4604        .F      MOV      r4,r0
        0x0020aef8:    7800        .x      LDRB     r0,[r0,#0]
        0x0020aefa:    b120         .      CBZ      r0,0x20af06 ; user_cmd_parse + 48
        0x0020aefc:    4620         F      MOV      r0,r4
        0x0020aefe:    f000fa97    ....    BL       user_cmd_find_end_of_word ; 0x20b430
        0x0020af02:    4284        .B      CMP      r4,r0
        0x0020af04:    d102        ..      BNE      0x20af0c ; user_cmd_parse + 54
        0x0020af06:    2021        !       MOVS     r0,#0x21
        0x0020af08:    e8bd81f0    ....    POP      {r4-r8,pc}
        0x0020af0c:    602c        ,`      STR      r4,[r5,#0]
        0x0020af0e:    f8006b01    ...k    STRB     r6,[r0],#1
        0x0020af12:    7801        .x      LDRB     r1,[r0,#0]
        0x0020af14:    b391        ..      CBZ      r1,0x20af7c ; user_cmd_parse + 166
        0x0020af16:    2400        .$      MOVS     r4,#0
        0x0020af18:    f000fa7f    ....    BL       user_cmd_skip_spaces ; 0x20b41a
        0x0020af1c:    2200        ."      MOVS     r2,#0
        0x0020af1e:    7801        .x      LDRB     r1,[r0,#0]
        0x0020af20:    4607        .F      MOV      r7,r0
;;; ..\..\..\src\mcu\module\data_uart_cmd\user_cmd_parse.c (76)
        0x0020af22:    4613        .F      MOV      r3,r2
;;;77     
;;;78         /* check if value is dec */
;;;79         if (p[0] == 'x')
        0x0020af24:    2978        x)      CMP      r1,#0x78
        0x0020af26:    d002        ..      BEQ      0x20af2e ; user_cmd_parse + 88
        0x0020af28:    2930        0)      CMP      r1,#0x30
        0x0020af2a:    d003        ..      BEQ      0x20af34 ; user_cmd_parse + 94
        0x0020af2c:    e007        ..      B        0x20af3e ; user_cmd_parse + 104
;;;80         {
;;;81             hex = true;
        0x0020af2e:    2301        .#      MOVS     r3,#1
;;;82             p = &p[1];
        0x0020af30:    1c78        x.      ADDS     r0,r7,#1
        0x0020af32:    e004        ..      B        0x20af3e ; user_cmd_parse + 104
;;;83         }
;;;84         else if ((p[0] == '0') && (p[1] == 'x'))
        0x0020af34:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020af36:    2978        x)      CMP      r1,#0x78
        0x0020af38:    d101        ..      BNE      0x20af3e ; user_cmd_parse + 104
;;;85         {
;;;86             hex = true;
        0x0020af3a:    2301        .#      MOVS     r3,#1
;;;87             p = &p[2];
        0x0020af3c:    1cb8        ..      ADDS     r0,r7,#2
;;;88         }
;;;89     
;;;90         for (;;)
;;;91         {
;;;92             char     ch;
;;;93             ch = *(p++) | 0x20;                 /* convert to lower case */
        0x0020af3e:    f8101b01    ....    LDRB     r1,[r0],#1
        0x0020af42:    f0410120    A. .    ORR      r1,r1,#0x20
;;;94     
;;;95             if (hex)                            /* dec value */
        0x0020af46:    b173        s.      CBZ      r3,0x20af66 ; user_cmd_parse + 144
;;;96             {
;;;97                 /* hex value */
;;;98                 if ((ch >= 'a') && (ch <= 'f'))
        0x0020af48:    f1a10c61    ..a.    SUB      r12,r1,#0x61
        0x0020af4c:    f1bc0f05    ....    CMP      r12,#5
        0x0020af50:    d801        ..      BHI      0x20af56 ; user_cmd_parse + 128
        0x0020af52:    3957        W9      SUBS     r1,r1,#0x57
;;;99                 {
;;;100                    ch -= ('a' - 10);
        0x0020af54:    e002        ..      B        0x20af5c ; user_cmd_parse + 134
        0x0020af56:    3930        09      SUBS     r1,r1,#0x30
;;;101                }
;;;102                else if ((ch >= '0') && (ch <= '9'))
        0x0020af58:    2909        .)      CMP      r1,#9
        0x0020af5a:    d810        ..      BHI      0x20af7e ; user_cmd_parse + 168
        0x0020af5c:    f001010f    ....    AND      r1,r1,#0xf
        0x0020af60:    eb011202    ....    ADD      r2,r1,r2,LSL #4
;;;103                {
;;;104                    ch -= '0';
        0x0020af64:    e7eb        ..      B        0x20af3e ; user_cmd_parse + 104
;;;105                }
;;;106                else
;;;107                {
;;;108                    break;
;;;109                }
;;;110                result = (result << 4);
;;;111                result += (ch & 0x0f);
;;;112            }
;;;113            else
;;;114            {
;;;115                if (ch < '0' || ch > '9')
        0x0020af66:    f1a10c30    ..0.    SUB      r12,r1,#0x30
        0x0020af6a:    f1bc0f0a    ....    CMP      r12,#0xa
        0x0020af6e:    d206        ..      BCS      0x20af7e ; user_cmd_parse + 168
;;;116                {
;;;117                    break;    /* end of string reached */
;;;118                }
;;;119                result = 10 * result + ch - '0';
        0x0020af70:    eb020282    ....    ADD      r2,r2,r2,LSL #2
        0x0020af74:    eb010242    ..B.    ADD      r2,r1,r2,LSL #1
        0x0020af78:    3a30        0:      SUBS     r2,r2,#0x30
        0x0020af7a:    e7e0        ..      B        0x20af3e ; user_cmd_parse + 104
        0x0020af7c:    e00f        ..      B        0x20af9e ; user_cmd_parse + 200
;;;120            }
;;;121        }
;;;122        return (result);
;;;123    }
;;;124    
;;;125    /**
;;;126     * @brief  Send result, display in UART Assitant.
;;;127     *
;;;128     * @param result    Command parse result.
;;;129     * @return none
;;;130    */
;;;131    static void cmd_send_result(T_USER_CMD_PARSE_RESULT result)
;;;132    {
;;;133        switch (result)
;;;134        {
;;;135        case RESULT_ERR:
;;;136            data_uart_print("%s\r\n", "CMD:Error");
;;;137            break;
;;;138        case RESULT_GAP_CAUSE_ALREADY_IN_REQ:
;;;139            data_uart_print("%s\r\n", "GAP_CAUSE_ALREADY_IN_REQ");
;;;140            break;
;;;141        case RESULT_GAP_CAUSE_INVALID_STATE:
;;;142            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_STATE");
;;;143            break;
;;;144        case RESULT_GAP_CAUSE_INVALID_PARAM:
;;;145            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PARAM");
;;;146            break;
;;;147        case RESULT_GAP_CAUSE_NON_CONN:
;;;148            data_uart_print("%s\r\n", "GAP_CAUSE_NON_CONN");
;;;149            break;
;;;150        case RESULT_GAP_CAUSE_NOT_FIND_IRK:
;;;151            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND_IRK");
;;;152            break;
;;;153        case RESULT_GAP_CAUSE_ERROR_CREDITS:
;;;154            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_CREDITS");
;;;155            break;
;;;156        case RESULT_GAP_CAUSE_SEND_REQ_FAILED:
;;;157            data_uart_print("%s\r\n", "GAP_CAUSE_SEND_REQ_FAILED");
;;;158            break;
;;;159        case RESULT_GAP_CAUSE_NO_RESOURCE:
;;;160            data_uart_print("%s\r\n", "GAP_CAUSE_NO_RESOURCE");
;;;161            break;
;;;162        case RESULT_GAP_CAUSE_INVALID_PDU_SIZE:
;;;163            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PDU_SIZE");
;;;164            break;
;;;165        case RESULT_GAP_CAUSE_NOT_FIND:
;;;166            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND");
;;;167            break;
;;;168        case RESULT_GAP_CAUSE_CONN_LIMIT:
;;;169            data_uart_print("%s\r\n", "GAP_CAUSE_CONN_LIMIT");
;;;170            break;
;;;171        case RESULT_CMD_NOT_FOUND:
;;;172            data_uart_print("%s\r\n", "CMD:Command not found");
;;;173            break;
;;;174        case RESULT_CMD_ERR_PARAM_NUM:
;;;175            data_uart_print("%s\r\n", "CMD:Wrong number of parameters");
;;;176            break;
;;;177        case RESULT_CMD_ERR_PARAM:
;;;178            data_uart_print("%s\r\n", "CMD:Wrong parameter");
;;;179            break;
;;;180        case RESULT_CMD_OUT_OF_RANGE:
;;;181            data_uart_print("%s\r\n", "CMD:Value out of range");
;;;182            break;
;;;183        case RESULT_CMD_NOT_SUPPORT:
;;;184            data_uart_print("%s\r\n", "CMD:Not support");
;;;185            break;
;;;186        case RESULT_GAP_CAUSE_ERROR_UNKNOWN:
;;;187            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_UNKNOWN");
;;;188            break;
;;;189        default:
;;;190            break;
;;;191        }
;;;192    }
;;;193    
;;;194    /**
;;;195     * @brief   List cmd.
;;;196     *
;;;197     * @param p_cmd_table   Command table, include user self-definition command function.
;;;198     * @return  Command execute result.
;;;199    */
;;;200    static T_USER_CMD_PARSE_RESULT user_cmd_list(const T_USER_CMD_TABLE_ENTRY *p_cmd_table)
;;;201    {
;;;202        int32_t i = 0;
;;;203        T_USER_CMD_PARSE_RESULT result = RESULT_CMD_NOT_FOUND;
;;;204    
;;;205        /* find command in table */
;;;206        while ((p_cmd_table + i)->p_cmd != NULL)
;;;207        {
;;;208            data_uart_print("%s", (p_cmd_table + i)->p_option);
;;;209            data_uart_print("%s", "  *");
;;;210            data_uart_print("%s", (p_cmd_table + i)->p_help);
;;;211            result = RESULT_SUCESS;
;;;212            i++;
;;;213        };
;;;214    
;;;215        data_uart_print(",.\r\n  *up down\r\n");
;;;216        data_uart_print("[]\r\n  *left right\r\n");
;;;217        data_uart_print("/\\\r\n  *home end\r\n");
;;;218        data_uart_print("backspace\r\n  *delete\r\n");
;;;219    
;;;220        return result;
;;;221    }
;;;222    
;;;223    /**
;;;224     * @brief  Execute command.
;;;225     *
;;;226     * @param p_parse_value     Command parse value.
;;;227     * @param p_cmd_table       Command table, include user self-definition command function.
;;;228     * @return  Command execute result.
;;;229    */
;;;230    static T_USER_CMD_PARSE_RESULT user_cmd_execute(T_USER_CMD_PARSED_VALUE *p_parse_value,
;;;231                                                    const T_USER_CMD_TABLE_ENTRY *p_cmd_table)
;;;232    {
;;;233        int32_t i = 0;
;;;234        T_USER_CMD_PARSE_RESULT result = RESULT_CMD_NOT_FOUND;
;;;235    
;;;236        if (strcmp((const char *)p_parse_value->p_cmd, (const char *)"?") == 0)
;;;237        {
;;;238            user_cmd_list(p_cmd_table);
;;;239            return RESULT_SUCESS;
;;;240        }
;;;241    
;;;242        /* find command in table */
;;;243        while ((p_cmd_table + i)->p_cmd != NULL)
;;;244        {
;;;245            if (strcmp((const char *)(p_cmd_table + i)->p_cmd, (const char *)p_parse_value->p_cmd) == 0)
;;;246            {
;;;247                /* check if user wants help */
;;;248                if (p_parse_value->param_count && *p_parse_value->p_param[0] == '?')
;;;249                {
;;;250                    data_uart_print("%s", (p_cmd_table + i)->p_option);
;;;251                    data_uart_print("%s", "  *");
;;;252                    data_uart_print("%s", (p_cmd_table + i)->p_help);
;;;253                    result = RESULT_SUCESS;
;;;254                }
;;;255                else
;;;256                {
;;;257                    /* execute command function */
;;;258                    result = (p_cmd_table + i)->func(p_parse_value);
;;;259                }
;;;260                /* exit while */
;;;261                break;
;;;262            }
;;;263            i++;
;;;264        };
;;;265    
;;;266        return result;
;;;267    }
;;;268    
;;;269    /**
;;;270     * @brief  Parse a command line and return the found command and parameters in "p_parse_value"
;;;271     *
;;;272     * @param p_user_cmd_if     Command parsed.
;;;273     * @param p_parse_value     Command parse value.
;;;274     * @return  Command parse result.
;;;275    */
;;;276    static T_USER_CMD_PARSE_RESULT user_cmd_parse(T_USER_CMD_IF *p_user_cmd_if,
;;;277                                                  T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;278    {
;;;279        int32_t i;
;;;280        char *p, *q;
;;;281    
;;;282        /* clear all results */
;;;283        p_parse_value->p_cmd       = NULL;
;;;284        p_parse_value->param_count = 0;
;;;285        for (i = 0 ; i < USER_CMD_MAX_PARAMETERS; i++)
;;;286        {
;;;287            p_parse_value->p_param[i]  = NULL;
;;;288            p_parse_value->dw_param[i] = 0;
;;;289        }
;;;290    
;;;291        /* Parse line */
;;;292        p = p_user_cmd_if->cmdline_buf;
;;;293    
;;;294        /*ignore leading spaces */
;;;295        p = user_cmd_skip_spaces(p);
;;;296        if (*p == '\0')                     /* empty command line ? */
;;;297        {
;;;298            return RESULT_CMD_EMPTY_LINE;
;;;299        }
;;;300    
;;;301        /* find end of word */
;;;302        q = user_cmd_find_end_of_word(p);
;;;303        if (p == q)                         /* empty command line ? */
;;;304        {
;;;305            return RESULT_CMD_EMPTY_LINE;
;;;306        }
;;;307    
;;;308        p_parse_value->p_cmd = p;
;;;309        *q = '\0';                        /* mark end of command */
;;;310        p = q + 1;
;;;311    
;;;312        /* parse parameters */
;;;313        if (*p != '\0')                   /* end of line ? */
;;;314        {
;;;315            int32_t j;
;;;316    
;;;317            j = 0;
;;;318            do
;;;319            {
;;;320                uint32_t d;
;;;321                /* ignore leading spaces */
;;;322                p = user_cmd_skip_spaces(p);
;;;323                d = user_cmd_str_to_uint32(p);
;;;324    
;;;325                p_parse_value->p_param[j]    = p;
        0x0020af7e:    eb050084    ....    ADD      r0,r5,r4,LSL #2
;;;326                p_parse_value->dw_param[j++] = d;
        0x0020af82:    1c64        d.      ADDS     r4,r4,#1
;;;327    
;;;328                if (j >= USER_CMD_MAX_PARAMETERS)
        0x0020af84:    6507        .e      STR      r7,[r0,#0x50]
        0x0020af86:    6082        .`      STR      r2,[r0,#8]
        0x0020af88:    2c12        .,      CMP      r4,#0x12
        0x0020af8a:    da07        ..      BGE      0x20af9c ; user_cmd_parse + 198
;;;329                {
;;;330                    break;
;;;331                }
;;;332    
;;;333                /* find next parameter */
;;;334                p  = user_cmd_find_end_of_word(p);
        0x0020af8c:    4638        8F      MOV      r0,r7
        0x0020af8e:    f000fa4f    ..O.    BL       user_cmd_find_end_of_word ; 0x20b430
;;;335                *p++ = '\0';                        /* mark end of parameter */
        0x0020af92:    f8006b01    ...k    STRB     r6,[r0],#1
;;;336            }
;;;337            while (*p != '\0');
        0x0020af96:    7801        .x      LDRB     r1,[r0,#0]
        0x0020af98:    2900        .)      CMP      r1,#0
        0x0020af9a:    d1bd        ..      BNE      0x20af18 ; user_cmd_parse + 66
;;;338    
;;;339            p_parse_value->param_count = j;
        0x0020af9c:    606c        l`      STR      r4,[r5,#4]
;;;340        }
;;;341    
;;;342        return RESULT_SUCESS;
        0x0020af9e:    2000        .       MOVS     r0,#0
;;;343    }
        0x0020afa0:    e7b2        ..      B        0x20af08 ; user_cmd_parse + 50
    cmd_clear_screen
;;;344    
;;;345    /**
;;;346     * @brief  Clear command line buffer.
;;;347     *
;;;348     * @param p_user_cmd_if     Command parsed.
;;;349     * @return none.
;;;350    */
;;;351    static void cmd_clear(T_USER_CMD_IF *p_user_cmd_if)
;;;352    {
;;;353        p_user_cmd_if->accum_cmd_len = 0;
;;;354        p_user_cmd_if->cmd_cur = 0;
;;;355        memset(p_user_cmd_if->cmdline_buf, 0, sizeof(p_user_cmd_if->cmdline_buf));
;;;356    }
;;;357    
;;;358    static void cmd_move_back(T_USER_CMD_IF *p_user_cmd_if)
;;;359    {
;;;360        for (uint8_t loop = 0; loop < p_user_cmd_if->accum_cmd_len - p_user_cmd_if->cmd_cur; loop ++)
;;;361        {
;;;362            p_user_cmd_if->cmdline_buf[p_user_cmd_if->accum_cmd_len - loop] =
;;;363                p_user_cmd_if->cmdline_buf[p_user_cmd_if->accum_cmd_len - loop - 1];
;;;364        }
;;;365    }
;;;366    
;;;367    static void cmd_move_forward(T_USER_CMD_IF *p_user_cmd_if)
;;;368    {
;;;369        for (uint8_t loop = 0; loop < p_user_cmd_if->accum_cmd_len - p_user_cmd_if->cmd_cur; loop ++)
;;;370        {
;;;371            p_user_cmd_if->cmdline_buf[p_user_cmd_if->cmd_cur + loop - 1] =
;;;372                p_user_cmd_if->cmdline_buf[p_user_cmd_if->cmd_cur + loop];
;;;373        }
;;;374    }
;;;375    static void cmd_clear_screen(T_USER_CMD_IF *p_user_cmd_if)
;;;376    {
        0x0020afa2:    b570        p.      PUSH     {r4-r6,lr}
        0x0020afa4:    4604        .F      MOV      r4,r0
        0x0020afa6:    f8900066    ..f.    LDRB     r0,[r0,#0x66]
        0x0020afaa:    f8d411a0    ....    LDR      r1,[r4,#0x1a0]
        0x0020afae:    2500        .%      MOVS     r5,#0
        0x0020afb0:    4288        .B      CMP      r0,r1
        0x0020afb2:    da0b        ..      BGE      0x20afcc ; cmd_clear_screen + 42
;;;377        if (p_user_cmd_if->cmd_cur < p_user_cmd_if->accum_cmd_len)
;;;378        {
;;;379            data_uart_print("%s", p_user_cmd_if->cmdline_buf + p_user_cmd_if->cmd_cur);
        0x0020afb4:    1901        ..      ADDS     r1,r0,r4
        0x0020afb6:    a0c8        ..      ADR      r0,{pc}+0x322 ; 0x20b2d8
        0x0020afb8:    f7fffea2    ....    BL       data_uart_print ; 0x20ad00
        0x0020afbc:    e006        ..      B        0x20afcc ; cmd_clear_screen + 42
        0x0020afbe:    1e40        @.      SUBS     r0,r0,#1
        0x0020afc0:    f8c401a0    ....    STR      r0,[r4,#0x1a0]
        0x0020afc4:    5425        %T      STRB     r5,[r4,r0]
        0x0020afc6:    a0c5        ..      ADR      r0,{pc}+0x316 ; 0x20b2dc
        0x0020afc8:    f7fffe9a    ....    BL       data_uart_print ; 0x20ad00
;;;380        }
;;;381    
;;;382        while (p_user_cmd_if->accum_cmd_len != 0)
        0x0020afcc:    f8d401a0    ....    LDR      r0,[r4,#0x1a0]
        0x0020afd0:    2800        .(      CMP      r0,#0
        0x0020afd2:    d1f4        ..      BNE      0x20afbe ; cmd_clear_screen + 28
;;;383        {
;;;384            p_user_cmd_if->accum_cmd_len--;
;;;385            p_user_cmd_if->cmdline_buf[p_user_cmd_if->accum_cmd_len] = '\0';
;;;386            data_uart_print("\b \b");
;;;387        }
;;;388        p_user_cmd_if->cmd_cur = 0;
        0x0020afd4:    f8845066    ..fP    STRB     r5,[r4,#0x66]
;;;389    }
        0x0020afd8:    bd70        p.      POP      {r4-r6,pc}
    user_cmd_collect
;;;390    
;;;391    /**
;;;392     * @brief  Collect command characters.
;;;393     *
;;;394     * @param[in] p_user_cmd_if   Store parsed commands.
;;;395     * @param[in] p_data          Data to be parsed.
;;;396     * @param[in] len             Length of data to be command parsed.
;;;397     * @param[in] p_cmd_table     Command table to execute function.
;;;398     * @return  Command collect result.
;;;399     * @retval 1 true.
;;;400     * @retval 0 false.
;;;401     *
;;;402     * <b>Example usage</b>
;;;403     * \code{.c}
;;;404        void app_handle_io_msg(T_IO_MSG io_msg)
;;;405        {
;;;406            uint16_t msg_type = io_msg.type;
;;;407            uint8_t rx_char;
;;;408    
;;;409            switch (msg_type)
;;;410            {
;;;411            case IO_MSG_TYPE_UART:
;;;412                // We handle user command informations from Data UART in this branch.
;;;413                rx_char = (uint8_t)io_msg.subtype;
;;;414                user_cmd_collect(&user_cmd_if, &rx_char, sizeof(rx_char), user_cmd_table);
;;;415                break;
;;;416            default:
;;;417                break;
;;;418            }
;;;419        }
;;;420     * \endcode
;;;421     */
;;;422    bool user_cmd_collect(T_USER_CMD_IF *p_user_cmd_if, uint8_t *p_data, int32_t len,
;;;423                          const T_USER_CMD_TABLE_ENTRY *p_cmd_table)
;;;424    {
        0x0020afda:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0020afde:    b0a6        ..      SUB      sp,sp,#0x98
        0x0020afe0:    469a        .F      MOV      r10,r3
        0x0020afe2:    4691        .F      MOV      r9,r2
        0x0020afe4:    460e        .F      MOV      r6,r1
        0x0020afe6:    4604        .F      MOV      r4,r0
        0x0020afe8:    f04f0800    O...    MOV      r8,#0
        0x0020afec:    2703        .'      MOVS     r7,#3
        0x0020afee:    f2001599    ....    ADD      r5,r0,#0x199
        0x0020aff2:    e1fc        ..      B        0x20b3ee ; user_cmd_collect + 1044
;;;425        T_USER_CMD_PARSED_VALUE parse_result;
;;;426    
;;;427        while (len--)
;;;428        {
;;;429            char c = *p_data++;
        0x0020aff4:    f8160b01    ....    LDRB     r0,[r6],#1
;;;430    
;;;431            if (c != 0x0)                   /* not ESC character received */
        0x0020aff8:    2800        .(      CMP      r0,#0
        0x0020affa:    d0fa        ..      BEQ      0x20aff2 ; user_cmd_collect + 24
;;;432            {
;;;433                switch (c)                  /* Normal handling */
        0x0020affc:    282e        .(      CMP      r0,#0x2e
        0x0020affe:    d07c        |.      BEQ      0x20b0fa ; user_cmd_collect + 288
        0x0020b000:    dc08        ..      BGT      0x20b014 ; user_cmd_collect + 58
        0x0020b002:    2808        .(      CMP      r0,#8
        0x0020b004:    d060        `.      BEQ      0x20b0c8 ; user_cmd_collect + 238
        0x0020b006:    280a        .(      CMP      r0,#0xa
        0x0020b008:    d012        ..      BEQ      0x20b030 ; user_cmd_collect + 86
        0x0020b00a:    280d        .(      CMP      r0,#0xd
        0x0020b00c:    d010        ..      BEQ      0x20b030 ; user_cmd_collect + 86
        0x0020b00e:    282c        ,(      CMP      r0,#0x2c
        0x0020b010:    d108        ..      BNE      0x20b024 ; user_cmd_collect + 74
        0x0020b012:    e16a        j.      B        0x20b2ea ; user_cmd_collect + 784
        0x0020b014:    282f        /(      CMP      r0,#0x2f
        0x0020b016:    d071        q.      BEQ      0x20b0fc ; user_cmd_collect + 290
        0x0020b018:    285b        [(      CMP      r0,#0x5b
        0x0020b01a:    d070        p.      BEQ      0x20b0fe ; user_cmd_collect + 292
        0x0020b01c:    285c        \(      CMP      r0,#0x5c
        0x0020b01e:    d06f        o.      BEQ      0x20b100 ; user_cmd_collect + 294
        0x0020b020:    285d        ](      CMP      r0,#0x5d
        0x0020b022:    d06e        n.      BEQ      0x20b102 ; user_cmd_collect + 296
        0x0020b024:    f8d411a0    ....    LDR      r1,[r4,#0x1a0]
        0x0020b028:    2964        d)      CMP      r1,#0x64
        0x0020b02a:    dae2        ..      BGE      0x20aff2 ; user_cmd_collect + 24
        0x0020b02c:    2100        .!      MOVS     r1,#0
        0x0020b02e:    e1c1        ..      B        0x20b3b4 ; user_cmd_collect + 986
;;;434                {
;;;435                case '\n':
;;;436                case '\r':                  /* end of line */
;;;437                    //vsop data_uart_print("\r\n");
;;;438                    p_user_cmd_if->history_cur = USER_CMD_MAX_HISTORY_LINE;
        0x0020b030:    f884719e    ...q    STRB     r7,[r4,#0x19e]
;;;439    #if F_BT_DLPS_EN
;;;440                    data_uart_can_enter_dlps(true);
;;;441    #endif
;;;442                    if (p_user_cmd_if->accum_cmd_len > 0)  /* at least one character in command line ? */
        0x0020b034:    f8d421a0    ...!    LDR      r2,[r4,#0x1a0]
        0x0020b038:    2a00        .*      CMP      r2,#0
        0x0020b03a:    dd3c        <.      BLE      0x20b0b6 ; user_cmd_collect + 220
;;;443                    {
;;;444                        T_USER_CMD_PARSE_RESULT result;
;;;445    
;;;446                        // save cmd first
;;;447                        if (p_user_cmd_if->history_head == USER_CMD_MAX_HISTORY_LINE)
        0x0020b03c:    f894019c    ....    LDRB     r0,[r4,#0x19c]
        0x0020b040:    2803        .(      CMP      r0,#3
        0x0020b042:    d02c        ,.      BEQ      0x20b09e ; user_cmd_collect + 196
;;;448                        {
;;;449                            p_user_cmd_if->history_head = 0;
;;;450                            p_user_cmd_if->history_tail = 0;
;;;451                        }
;;;452                        else
;;;453                        {
;;;454                            p_user_cmd_if->history_tail = (p_user_cmd_if->history_tail + 1) % USER_CMD_MAX_HISTORY_LINE;
        0x0020b044:    f894119d    ....    LDRB     r1,[r4,#0x19d]
        0x0020b048:    1c49        I.      ADDS     r1,r1,#1
        0x0020b04a:    fbb1f3f7    ....    UDIV     r3,r1,r7
        0x0020b04e:    fb071113    ....    MLS      r1,r7,r3,r1
        0x0020b052:    f884119d    ....    STRB     r1,[r4,#0x19d]
;;;455                            if (p_user_cmd_if->history_tail == p_user_cmd_if->history_head)
        0x0020b056:    4281        .B      CMP      r1,r0
        0x0020b058:    d106        ..      BNE      0x20b068 ; user_cmd_collect + 142
        0x0020b05a:    1c40        @.      ADDS     r0,r0,#1
;;;456                            {
;;;457                                p_user_cmd_if->history_head = (p_user_cmd_if->history_head + 1) % USER_CMD_MAX_HISTORY_LINE;
        0x0020b05c:    fbb0f1f7    ....    UDIV     r1,r0,r7
        0x0020b060:    fb070011    ....    MLS      r0,r7,r1,r0
        0x0020b064:    f884019c    ....    STRB     r0,[r4,#0x19c]
;;;458                            }
;;;459                        }
;;;460                        p_user_cmd_if->cmd_history_len[p_user_cmd_if->history_tail] = p_user_cmd_if->accum_cmd_len;
        0x0020b068:    f894019d    ....    LDRB     r0,[r4,#0x19d]
        0x0020b06c:    4621        !F      MOV      r1,r4
        0x0020b06e:    5542        BU      STRB     r2,[r0,r5]
;;;461                        memcpy(p_user_cmd_if->cmd_history[p_user_cmd_if->history_tail], p_user_cmd_if->cmdline_buf,
        0x0020b070:    f894019d    ....    LDRB     r0,[r4,#0x19d]
        0x0020b074:    f8d421a0    ...!    LDR      r2,[r4,#0x1a0]
        0x0020b078:    eb001000    ....    ADD      r0,r0,r0,LSL #4
        0x0020b07c:    eb000040    ..@.    ADD      r0,r0,r0,LSL #1
        0x0020b080:    eb040040    ..@.    ADD      r0,r4,r0,LSL #1
        0x0020b084:    3067        g0      ADDS     r0,r0,#0x67
        0x0020b086:    f64eff08    N...    BL       __aeabi_memcpy ; 0x59e9a
;;;462                               p_user_cmd_if->accum_cmd_len);
;;;463    
;;;464                        p_user_cmd_if->cmdline_buf[p_user_cmd_if->accum_cmd_len] = '\0';
        0x0020b08a:    f8d411a0    ....    LDR      r1,[r4,#0x1a0]
        0x0020b08e:    4620         F      MOV      r0,r4
        0x0020b090:    f8048001    ....    STRB     r8,[r4,r1]
;;;465                        result = user_cmd_parse(p_user_cmd_if, &parse_result);
        0x0020b094:    4669        iF      MOV      r1,sp
        0x0020b096:    f7ffff1e    ....    BL       user_cmd_parse ; 0x20aed6
;;;466                        if (result == RESULT_SUCESS)
        0x0020b09a:    b128        (.      CBZ      r0,0x20b0a8 ; user_cmd_collect + 206
        0x0020b09c:    e009        ..      B        0x20b0b2 ; user_cmd_collect + 216
        0x0020b09e:    f884819c    ....    STRB     r8,[r4,#0x19c]
        0x0020b0a2:    f884819d    ....    STRB     r8,[r4,#0x19d]
        0x0020b0a6:    e7df        ..      B        0x20b068 ; user_cmd_collect + 142
;;;467                        {
;;;468                            result = user_cmd_execute(&parse_result, p_cmd_table);
        0x0020b0a8:    4651        QF      MOV      r1,r10
        0x0020b0aa:    4668        hF      MOV      r0,sp
        0x0020b0ac:    f000f9cd    ....    BL       user_cmd_execute ; 0x20b44a
        0x0020b0b0:    b108        ..      CBZ      r0,0x20b0b6 ; user_cmd_collect + 220
;;;469                        }
;;;470    
;;;471                        if (result != RESULT_SUCESS)
;;;472                        {
;;;473                            cmd_send_result(result);
        0x0020b0b2:    f7fffecd    ....    BL       cmd_send_result ; 0x20ae50
        0x0020b0b6:    f8c481a0    ....    STR      r8,[r4,#0x1a0]
;;;474                        }
;;;475                    }
;;;476    
;;;477                    cmd_clear(p_user_cmd_if);
        0x0020b0ba:    4620         F      MOV      r0,r4
        0x0020b0bc:    f8848066    ..f.    STRB     r8,[r4,#0x66]
        0x0020b0c0:    2166        f!      MOVS     r1,#0x66
        0x0020b0c2:    f64effcd    N...    BL       __aeabi_memclr4 ; 0x5a060
;;;478                    break;
        0x0020b0c6:    e192        ..      B        0x20b3ee ; user_cmd_collect + 1044
;;;479    
;;;480                case '\b':                        /* backspace */
;;;481                    if (p_user_cmd_if->accum_cmd_len > 0 && p_user_cmd_if->cmd_cur > 0)
        0x0020b0c8:    f8d401a0    ....    LDR      r0,[r4,#0x1a0]
        0x0020b0cc:    2800        .(      CMP      r0,#0
        0x0020b0ce:    dd2c        ,.      BLE      0x20b12a ; user_cmd_collect + 336
        0x0020b0d0:    f8940066    ..f.    LDRB     r0,[r4,#0x66]
        0x0020b0d4:    2800        .(      CMP      r0,#0
        0x0020b0d6:    d028        (.      BEQ      0x20b12a ; user_cmd_collect + 336
        0x0020b0d8:    2000        .       MOVS     r0,#0
;;;482                    {
;;;483                        uint8_t loop;
;;;484    
;;;485                        cmd_move_forward(p_user_cmd_if);
        0x0020b0da:    e006        ..      B        0x20b0ea ; user_cmd_collect + 272
        0x0020b0dc:    1822        ".      ADDS     r2,r4,r0
        0x0020b0de:    5c8b        .\      LDRB     r3,[r1,r2]
        0x0020b0e0:    190a        ..      ADDS     r2,r1,r4
        0x0020b0e2:    1e41        A.      SUBS     r1,r0,#1
        0x0020b0e4:    1c40        @.      ADDS     r0,r0,#1
        0x0020b0e6:    5453        ST      STRB     r3,[r2,r1]
        0x0020b0e8:    b2c0        ..      UXTB     r0,r0
        0x0020b0ea:    f8941066    ..f.    LDRB     r1,[r4,#0x66]
        0x0020b0ee:    f8d421a0    ...!    LDR      r2,[r4,#0x1a0]
        0x0020b0f2:    1a52        R.      SUBS     r2,r2,r1
        0x0020b0f4:    4282        .B      CMP      r2,r0
        0x0020b0f6:    dcf1        ..      BGT      0x20b0dc ; user_cmd_collect + 258
;;;486                        p_user_cmd_if->accum_cmd_len--;
        0x0020b0f8:    e004        ..      B        0x20b104 ; user_cmd_collect + 298
        0x0020b0fa:    e10d        ..      B        0x20b318 ; user_cmd_collect + 830
        0x0020b0fc:    e14f        O.      B        0x20b39e ; user_cmd_collect + 964
        0x0020b0fe:    e135        5.      B        0x20b36c ; user_cmd_collect + 914
        0x0020b100:    e143        C.      B        0x20b38a ; user_cmd_collect + 944
        0x0020b102:    e138        8.      B        0x20b376 ; user_cmd_collect + 924
        0x0020b104:    f8d401a0    ....    LDR      r0,[r4,#0x1a0]
        0x0020b108:    1e40        @.      SUBS     r0,r0,#1
;;;487                        p_user_cmd_if->cmd_cur--;
        0x0020b10a:    f8c401a0    ....    STR      r0,[r4,#0x1a0]
        0x0020b10e:    f8941066    ..f.    LDRB     r1,[r4,#0x66]
        0x0020b112:    1e49        I.      SUBS     r1,r1,#1
        0x0020b114:    f8841066    ..f.    STRB     r1,[r4,#0x66]
;;;488                        p_user_cmd_if->cmdline_buf[p_user_cmd_if->accum_cmd_len] = '\0';
        0x0020b118:    f8048000    ....    STRB     r8,[r4,r0]
        0x0020b11c:    f8941066    ..f.    LDRB     r1,[r4,#0x66]
;;;489                        //vsop data_uart_print("\b%s", p_user_cmd_if->cmdline_buf + p_user_cmd_if->cmd_cur);
;;;490                        //vsop data_uart_print(" \b");
;;;491                        for (loop = 0; loop < p_user_cmd_if->accum_cmd_len - p_user_cmd_if->cmd_cur; loop++)
        0x0020b120:    f8d421a0    ...!    LDR      r2,[r4,#0x1a0]
        0x0020b124:    2000        .       MOVS     r0,#0
        0x0020b126:    1a51        Q.      SUBS     r1,r2,r1
        0x0020b128:    e0dc        ..      B        0x20b2e4 ; user_cmd_collect + 778
        0x0020b12a:    e0f4        ..      B        0x20b316 ; user_cmd_collect + 828
    $d
        0x0020b12c:    3a444d43    CMD:    DCD    977554755
        0x0020b130:    6e6f7257    Wron    DCD    1852797527
        0x0020b134:    61702067    g pa    DCD    1634738279
        0x0020b138:    656d6172    rame    DCD    1701667186
        0x0020b13c:    00726574    ter.    DCD    7497076
        0x0020b140:    5f504147    GAP_    DCD    1599095111
        0x0020b144:    53554143    CAUS    DCD    1398096195
        0x0020b148:    52455f45    E_ER    DCD    1380278085
        0x0020b14c:    5f524f52    ROR_    DCD    1599229778
        0x0020b150:    4e4b4e55    UNKN    DCD    1313558101
        0x0020b154:    004e574f    OWN.    DCD    5134159
        0x0020b158:    0a0d7325    %s..    DCD    168653605
        0x0020b15c:    00000000    ....    DCD    0
        0x0020b160:    3a444d43    CMD:    DCD    977554755
        0x0020b164:    6f727245    Erro    DCD    1869771333
        0x0020b168:    00000072    r...    DCD    114
        0x0020b16c:    5f504147    GAP_    DCD    1599095111
        0x0020b170:    53554143    CAUS    DCD    1398096195
        0x0020b174:    4c415f45    E_AL    DCD    1279352645
        0x0020b178:    44414552    READ    DCD    1145128274
        0x0020b17c:    4e495f59    Y_IN    DCD    1313431385
        0x0020b180:    5145525f    _REQ    DCD    1363497567
        0x0020b184:    00000000    ....    DCD    0
        0x0020b188:    5f504147    GAP_    DCD    1599095111
        0x0020b18c:    53554143    CAUS    DCD    1398096195
        0x0020b190:    4e495f45    E_IN    DCD    1313431365
        0x0020b194:    494c4156    VALI    DCD    1229734230
        0x0020b198:    54535f44    D_ST    DCD    1414750020
        0x0020b19c:    00455441    ATE.    DCD    4543553
        0x0020b1a0:    5f504147    GAP_    DCD    1599095111
        0x0020b1a4:    53554143    CAUS    DCD    1398096195
        0x0020b1a8:    4e495f45    E_IN    DCD    1313431365
        0x0020b1ac:    494c4156    VALI    DCD    1229734230
        0x0020b1b0:    41505f44    D_PA    DCD    1095786308
        0x0020b1b4:    004d4152    RAM.    DCD    5062994
        0x0020b1b8:    5f504147    GAP_    DCD    1599095111
        0x0020b1bc:    53554143    CAUS    DCD    1398096195
        0x0020b1c0:    4f4e5f45    E_NO    DCD    1330536261
        0x0020b1c4:    4f435f4e    N_CO    DCD    1329815374
        0x0020b1c8:    00004e4e    NN..    DCD    20046
        0x0020b1cc:    5f504147    GAP_    DCD    1599095111
        0x0020b1d0:    53554143    CAUS    DCD    1398096195
        0x0020b1d4:    4f4e5f45    E_NO    DCD    1330536261
        0x0020b1d8:    49465f54    T_FI    DCD    1229348692
        0x0020b1dc:    495f444e    ND_I    DCD    1230980174
        0x0020b1e0:    00004b52    RK..    DCD    19282
        0x0020b1e4:    5f504147    GAP_    DCD    1599095111
        0x0020b1e8:    53554143    CAUS    DCD    1398096195
        0x0020b1ec:    52455f45    E_ER    DCD    1380278085
        0x0020b1f0:    5f524f52    ROR_    DCD    1599229778
        0x0020b1f4:    44455243    CRED    DCD    1145393731
        0x0020b1f8:    00535449    ITS.    DCD    5461065
        0x0020b1fc:    5f504147    GAP_    DCD    1599095111
        0x0020b200:    53554143    CAUS    DCD    1398096195
        0x0020b204:    45535f45    E_SE    DCD    1163091781
        0x0020b208:    525f444e    ND_R    DCD    1381975118
        0x0020b20c:    465f5145    EQ_F    DCD    1180651845
        0x0020b210:    454c4941    AILE    DCD    1162627393
        0x0020b214:    00000044    D...    DCD    68
        0x0020b218:    5f504147    GAP_    DCD    1599095111
        0x0020b21c:    53554143    CAUS    DCD    1398096195
        0x0020b220:    4f4e5f45    E_NO    DCD    1330536261
        0x0020b224:    5345525f    _RES    DCD    1397051999
        0x0020b228:    4352554f    OURC    DCD    1129469263
        0x0020b22c:    00000045    E...    DCD    69
        0x0020b230:    5f504147    GAP_    DCD    1599095111
        0x0020b234:    53554143    CAUS    DCD    1398096195
        0x0020b238:    4e495f45    E_IN    DCD    1313431365
        0x0020b23c:    494c4156    VALI    DCD    1229734230
        0x0020b240:    44505f44    D_PD    DCD    1146117956
        0x0020b244:    49535f55    U_SI    DCD    1230200661
        0x0020b248:    0000455a    ZE..    DCD    17754
        0x0020b24c:    5f504147    GAP_    DCD    1599095111
        0x0020b250:    53554143    CAUS    DCD    1398096195
        0x0020b254:    4f4e5f45    E_NO    DCD    1330536261
        0x0020b258:    49465f54    T_FI    DCD    1229348692
        0x0020b25c:    0000444e    ND..    DCD    17486
        0x0020b260:    5f504147    GAP_    DCD    1599095111
        0x0020b264:    53554143    CAUS    DCD    1398096195
        0x0020b268:    4f435f45    E_CO    DCD    1329815365
        0x0020b26c:    4c5f4e4e    NN_L    DCD    1281314382
        0x0020b270:    54494d49    IMIT    DCD    1414090057
        0x0020b274:    00000000    ....    DCD    0
        0x0020b278:    3a444d43    CMD:    DCD    977554755
        0x0020b27c:    6d6d6f43    Comm    DCD    1835888451
        0x0020b280:    20646e61    and     DCD    543452769
        0x0020b284:    20746f6e    not     DCD    544501614
        0x0020b288:    6e756f66    foun    DCD    1853189990
        0x0020b28c:    00000064    d...    DCD    100
        0x0020b290:    3a444d43    CMD:    DCD    977554755
        0x0020b294:    6e6f7257    Wron    DCD    1852797527
        0x0020b298:    756e2067    g nu    DCD    1970151527
        0x0020b29c:    7265626d    mber    DCD    1919246957
        0x0020b2a0:    20666f20     of     DCD    543584032
        0x0020b2a4:    61726170    para    DCD    1634886000
        0x0020b2a8:    6574656d    mete    DCD    1702126957
        0x0020b2ac:    00007372    rs..    DCD    29554
        0x0020b2b0:    3a444d43    CMD:    DCD    977554755
        0x0020b2b4:    756c6156    Valu    DCD    1970037078
        0x0020b2b8:    756f2065    e ou    DCD    1970217061
        0x0020b2bc:    666f2074    t of    DCD    1718558836
        0x0020b2c0:    6e617220     ran    DCD    1851879968
        0x0020b2c4:    00006567    ge..    DCD    25959
        0x0020b2c8:    3a444d43    CMD:    DCD    977554755
        0x0020b2cc:    20746f4e    Not     DCD    544501582
        0x0020b2d0:    70707573    supp    DCD    1886418291
        0x0020b2d4:    0074726f    ort.    DCD    7631471
        0x0020b2d8:    00007325    %s..    DCD    29477
        0x0020b2dc:    00082008    . ..    DCD    532488
    $t
        0x0020b2e0:    1c40        @.      ADDS     r0,r0,#1
        0x0020b2e2:    b2c0        ..      UXTB     r0,r0
        0x0020b2e4:    4281        .B      CMP      r1,r0
        0x0020b2e6:    dd16        ..      BLE      0x20b316 ; user_cmd_collect + 828
        0x0020b2e8:    e7fa        ..      B        0x20b2e0 ; user_cmd_collect + 774
;;;492                        {
;;;493                            //vsop data_uart_print("\b");
;;;494                        }
;;;495                    }
;;;496                    break;
;;;497    
;;;498                case 44:                            /* up: < */
;;;499                    if (p_user_cmd_if->history_head != USER_CMD_MAX_HISTORY_LINE)
        0x0020b2ea:    f894019c    ....    LDRB     r0,[r4,#0x19c]
        0x0020b2ee:    2803        .(      CMP      r0,#3
        0x0020b2f0:    d07d        }.      BEQ      0x20b3ee ; user_cmd_collect + 1044
;;;500                    {
;;;501                        cmd_clear_screen(p_user_cmd_if);
        0x0020b2f2:    4620         F      MOV      r0,r4
        0x0020b2f4:    f7fffe55    ..U.    BL       cmd_clear_screen ; 0x20afa2
;;;502                        if (p_user_cmd_if->history_cur == USER_CMD_MAX_HISTORY_LINE)
        0x0020b2f8:    f894019e    ....    LDRB     r0,[r4,#0x19e]
        0x0020b2fc:    2803        .(      CMP      r0,#3
        0x0020b2fe:    d005        ..      BEQ      0x20b30c ; user_cmd_collect + 818
        0x0020b300:    f894119c    ....    LDRB     r1,[r4,#0x19c]
        0x0020b304:    4288        .B      CMP      r0,r1
        0x0020b306:    d004        ..      BEQ      0x20b312 ; user_cmd_collect + 824
        0x0020b308:    1c80        ..      ADDS     r0,r0,#2
        0x0020b30a:    e015        ..      B        0x20b338 ; user_cmd_collect + 862
;;;503                        {
;;;504                            p_user_cmd_if->history_cur = p_user_cmd_if->history_tail;
        0x0020b30c:    f894019d    ....    LDRB     r0,[r4,#0x19d]
        0x0020b310:    e016        ..      B        0x20b340 ; user_cmd_collect + 870
;;;505                        }
;;;506                        else
;;;507                        {
;;;508                            if (p_user_cmd_if->history_cur != p_user_cmd_if->history_head)
;;;509                            {
;;;510                                p_user_cmd_if->history_cur = (p_user_cmd_if->history_cur + USER_CMD_MAX_HISTORY_LINE - 1) %
;;;511                                                             USER_CMD_MAX_HISTORY_LINE;
;;;512                            }
;;;513                            else
;;;514                            {
;;;515                                p_user_cmd_if->history_cur = USER_CMD_MAX_HISTORY_LINE;
        0x0020b312:    f884719e    ...q    STRB     r7,[r4,#0x19e]
;;;516                                break;
        0x0020b316:    e06a        j.      B        0x20b3ee ; user_cmd_collect + 1044
        0x0020b318:    f894019c    ....    LDRB     r0,[r4,#0x19c]
        0x0020b31c:    2803        .(      CMP      r0,#3
        0x0020b31e:    d066        f.      BEQ      0x20b3ee ; user_cmd_collect + 1044
        0x0020b320:    4620         F      MOV      r0,r4
        0x0020b322:    f7fffe3e    ..>.    BL       cmd_clear_screen ; 0x20afa2
        0x0020b326:    f894019e    ....    LDRB     r0,[r4,#0x19e]
        0x0020b32a:    2803        .(      CMP      r0,#3
        0x0020b32c:    d01b        ..      BEQ      0x20b366 ; user_cmd_collect + 908
        0x0020b32e:    f894119d    ....    LDRB     r1,[r4,#0x19d]
        0x0020b332:    4288        .B      CMP      r0,r1
        0x0020b334:    d0ed        ..      BEQ      0x20b312 ; user_cmd_collect + 824
        0x0020b336:    1c40        @.      ADDS     r0,r0,#1
        0x0020b338:    fbb0f1f7    ....    UDIV     r1,r0,r7
        0x0020b33c:    fb070011    ....    MLS      r0,r7,r1,r0
        0x0020b340:    f884019e    ....    STRB     r0,[r4,#0x19e]
;;;517                            }
;;;518                        }
;;;519                        p_user_cmd_if->accum_cmd_len = p_user_cmd_if->cmd_history_len[p_user_cmd_if->history_cur];
        0x0020b344:    b2c0        ..      UXTB     r0,r0
        0x0020b346:    5d42        B]      LDRB     r2,[r0,r5]
        0x0020b348:    eb001000    ....    ADD      r0,r0,r0,LSL #4
        0x0020b34c:    eb000040    ..@.    ADD      r0,r0,r0,LSL #1
        0x0020b350:    eb040140    ..@.    ADD      r1,r4,r0,LSL #1
;;;520                        p_user_cmd_if->cmd_cur = p_user_cmd_if->accum_cmd_len;
        0x0020b354:    f8c421a0    ...!    STR      r2,[r4,#0x1a0]
        0x0020b358:    f8842066    ..f     STRB     r2,[r4,#0x66]
;;;521                        memcpy(p_user_cmd_if->cmdline_buf, p_user_cmd_if->cmd_history[p_user_cmd_if->history_cur],
        0x0020b35c:    4620         F      MOV      r0,r4
        0x0020b35e:    3167        g1      ADDS     r1,r1,#0x67
        0x0020b360:    f64efd9b    N...    BL       __aeabi_memcpy ; 0x59e9a
        0x0020b364:    e043        C.      B        0x20b3ee ; user_cmd_collect + 1044
;;;522                               p_user_cmd_if->accum_cmd_len);
;;;523                        //vsop data_uart_print("%s", p_user_cmd_if->cmdline_buf);
;;;524                    }
;;;525                    break;
;;;526    
;;;527                case 46:                            /* down: > */
;;;528                    if (p_user_cmd_if->history_head != USER_CMD_MAX_HISTORY_LINE)
;;;529                    {
;;;530                        cmd_clear_screen(p_user_cmd_if);
;;;531                        if (p_user_cmd_if->history_cur == USER_CMD_MAX_HISTORY_LINE)
;;;532                        {
;;;533                            p_user_cmd_if->history_cur = p_user_cmd_if->history_head;
        0x0020b366:    f894019c    ....    LDRB     r0,[r4,#0x19c]
        0x0020b36a:    e7e9        ..      B        0x20b340 ; user_cmd_collect + 870
;;;534                        }
;;;535                        else
;;;536                        {
;;;537                            if (p_user_cmd_if->history_cur != p_user_cmd_if->history_tail)
;;;538                            {
;;;539                                p_user_cmd_if->history_cur = (p_user_cmd_if->history_cur + 1) % USER_CMD_MAX_HISTORY_LINE;
;;;540                            }
;;;541                            else
;;;542                            {
;;;543                                p_user_cmd_if->history_cur = USER_CMD_MAX_HISTORY_LINE;
;;;544                                break;
;;;545                            }
;;;546                        }
;;;547                        p_user_cmd_if->accum_cmd_len = p_user_cmd_if->cmd_history_len[p_user_cmd_if->history_cur];
;;;548                        p_user_cmd_if->cmd_cur = p_user_cmd_if->accum_cmd_len;
;;;549                        memcpy(p_user_cmd_if->cmdline_buf, p_user_cmd_if->cmd_history[p_user_cmd_if->history_cur],
;;;550                               p_user_cmd_if->accum_cmd_len);
;;;551                        //vsop data_uart_print("%s", p_user_cmd_if->cmdline_buf);
;;;552                    }
;;;553                    break;
;;;554    
;;;555                case 91:                           /* left: { */
;;;556                    if (p_user_cmd_if->cmd_cur > 0)
        0x0020b36c:    f8940066    ..f.    LDRB     r0,[r4,#0x66]
        0x0020b370:    b3c0        ..      CBZ      r0,0x20b3e4 ; user_cmd_collect + 1034
        0x0020b372:    1e40        @.      SUBS     r0,r0,#1
;;;557                    {
;;;558                        //vsop data_uart_print("\b");
;;;559                        p_user_cmd_if->cmd_cur--;
        0x0020b374:    e006        ..      B        0x20b384 ; user_cmd_collect + 938
        0x0020b376:    f8940066    ..f.    LDRB     r0,[r4,#0x66]
        0x0020b37a:    f8d411a0    ....    LDR      r1,[r4,#0x1a0]
        0x0020b37e:    4288        .B      CMP      r0,r1
        0x0020b380:    da35        5.      BGE      0x20b3ee ; user_cmd_collect + 1044
        0x0020b382:    1c40        @.      ADDS     r0,r0,#1
        0x0020b384:    f8840066    ..f.    STRB     r0,[r4,#0x66]
        0x0020b388:    e031        1.      B        0x20b3ee ; user_cmd_collect + 1044
;;;560                    }
;;;561                    break;
;;;562    
;;;563                case 93:                           /* right: } */
;;;564                    if (p_user_cmd_if->cmd_cur < p_user_cmd_if->accum_cmd_len)
;;;565                    {
;;;566                        //vsop data_uart_print("%c", p_user_cmd_if->cmdline_buf[p_user_cmd_if->cmd_cur]);
;;;567                        p_user_cmd_if->cmd_cur++;
;;;568                    }
;;;569                    break;
;;;570    
;;;571                case 92:                            /* end: \ */
;;;572                    if (p_user_cmd_if->cmd_cur < p_user_cmd_if->accum_cmd_len)
        0x0020b38a:    f8941066    ..f.    LDRB     r1,[r4,#0x66]
        0x0020b38e:    f8d401a0    ....    LDR      r0,[r4,#0x1a0]
        0x0020b392:    4281        .B      CMP      r1,r0
        0x0020b394:    da2b        +.      BGE      0x20b3ee ; user_cmd_collect + 1044
        0x0020b396:    e7f5        ..      B        0x20b384 ; user_cmd_collect + 938
        0x0020b398:    1e40        @.      SUBS     r0,r0,#1
        0x0020b39a:    f8840066    ..f.    STRB     r0,[r4,#0x66]
;;;573                    {
;;;574                        //vsop data_uart_print("%s", p_user_cmd_if->cmdline_buf + p_user_cmd_if->cmd_cur);
;;;575                        p_user_cmd_if->cmd_cur = p_user_cmd_if->accum_cmd_len;
;;;576                    }
;;;577                    break;
;;;578    
;;;579                case 47:                            /* begin: / */
;;;580                    while (p_user_cmd_if->cmd_cur > 0)
        0x0020b39e:    f8940066    ..f.    LDRB     r0,[r4,#0x66]
        0x0020b3a2:    b1f8        ..      CBZ      r0,0x20b3e4 ; user_cmd_collect + 1034
        0x0020b3a4:    e7f8        ..      B        0x20b398 ; user_cmd_collect + 958
        0x0020b3a6:    1a52        R.      SUBS     r2,r2,r1
        0x0020b3a8:    1913        ..      ADDS     r3,r2,r4
        0x0020b3aa:    1c49        I.      ADDS     r1,r1,#1
        0x0020b3ac:    f8133c01    ...<    LDRB     r3,[r3,#-1]
        0x0020b3b0:    54a3        .T      STRB     r3,[r4,r2]
        0x0020b3b2:    b2c9        ..      UXTB     r1,r1
        0x0020b3b4:    f8943066    ..f0    LDRB     r3,[r4,#0x66]
        0x0020b3b8:    f8d421a0    ...!    LDR      r2,[r4,#0x1a0]
        0x0020b3bc:    1ad3        ..      SUBS     r3,r2,r3
        0x0020b3be:    428b        .B      CMP      r3,r1
        0x0020b3c0:    dcf1        ..      BGT      0x20b3a6 ; user_cmd_collect + 972
;;;581                    {
;;;582                        //vsop data_uart_print("\b");
;;;583                        p_user_cmd_if->cmd_cur--;
;;;584                    }
;;;585                    break;
;;;586    
;;;587                default:
;;;588                    /* Put character in command buffer */
;;;589                    if (p_user_cmd_if->accum_cmd_len < USER_CMD_MAX_COMMAND_LINE)
;;;590                    {
;;;591                        uint8_t loop;
;;;592    
;;;593                        cmd_move_back(p_user_cmd_if);
;;;594                        p_user_cmd_if->cmdline_buf[p_user_cmd_if->cmd_cur] = c;
        0x0020b3c2:    f8941066    ..f.    LDRB     r1,[r4,#0x66]
        0x0020b3c6:    5460        `T      STRB     r0,[r4,r1]
;;;595                        //vsop data_uart_print("%s", p_user_cmd_if->cmdline_buf + p_user_cmd_if->cmd_cur);
;;;596                        p_user_cmd_if->accum_cmd_len++;
        0x0020b3c8:    f8d411a0    ....    LDR      r1,[r4,#0x1a0]
        0x0020b3cc:    1c49        I.      ADDS     r1,r1,#1
;;;597                        p_user_cmd_if->cmd_cur++;
        0x0020b3ce:    f8c411a0    ....    STR      r1,[r4,#0x1a0]
        0x0020b3d2:    f8940066    ..f.    LDRB     r0,[r4,#0x66]
        0x0020b3d6:    1c40        @.      ADDS     r0,r0,#1
        0x0020b3d8:    b2c2        ..      UXTB     r2,r0
        0x0020b3da:    2000        .       MOVS     r0,#0
        0x0020b3dc:    f8842066    ..f     STRB     r2,[r4,#0x66]
        0x0020b3e0:    1a89        ..      SUBS     r1,r1,r2
;;;598                        for (loop = 0; loop < p_user_cmd_if->accum_cmd_len - p_user_cmd_if->cmd_cur; loop++)
        0x0020b3e2:    e002        ..      B        0x20b3ea ; user_cmd_collect + 1040
        0x0020b3e4:    e003        ..      B        0x20b3ee ; user_cmd_collect + 1044
        0x0020b3e6:    1c40        @.      ADDS     r0,r0,#1
        0x0020b3e8:    b2c0        ..      UXTB     r0,r0
        0x0020b3ea:    4281        .B      CMP      r1,r0
        0x0020b3ec:    dcfb        ..      BGT      0x20b3e6 ; user_cmd_collect + 1036
        0x0020b3ee:    f1b90901    ....    SUBS     r9,r9,#1
        0x0020b3f2:    f4bfadff    ....    BCS      0x20aff4 ; user_cmd_collect + 26
        0x0020b3f6:    b026        &.      ADD      sp,sp,#0x98
;;;599                        {
;;;600                            //data_uart_print("\b");
;;;601                        }
;;;602                    }
;;;603                    break;
;;;604                }
;;;605            }
;;;606        }
;;;607    
;;;608        return true;
        0x0020b3f8:    2001        .       MOVS     r0,#1
;;;609    }
        0x0020b3fa:    e8bd87f0    ....    POP      {r4-r10,pc}
    user_cmd_init
;;;610    
;;;611    /**
;;;612     * @brief  Initiate command interface structure
;;;613     * @param[in] p_user_cmd_if   Store parsed commands.
;;;614     * @param[in] project_name    Initiate project name.
;;;615     * @return void
;;;616     *
;;;617     * <b>Example usage</b>
;;;618     * \code{.c}
;;;619        void app_main_task(void *p_param)
;;;620        {
;;;621            char event;
;;;622    
;;;623            os_msg_queue_create(&io_queue_handle, MAX_NUMBER_OF_IO_MESSAGE, sizeof(T_IO_MSG));
;;;624            os_msg_queue_create(&evt_queue_handle, MAX_NUMBER_OF_EVENT_MESSAGE, sizeof(unsigned char));
;;;625    
;;;626            gap_start_bt_stack(evt_queue_handle, io_queue_handle, MAX_NUMBER_OF_GAP_MESSAGE);
;;;627    
;;;628            data_uart_init(evt_queue_handle, io_queue_handle);
;;;629            user_cmd_init(&user_cmd_if, "central");
;;;630            ......
;;;631        }
;;;632     * \endcode
;;;633     */
;;;634    void user_cmd_init(T_USER_CMD_IF *p_user_cmd_if, char *project_name)
;;;635    {
        0x0020b3fe:    b510        ..      PUSH     {r4,lr}
        0x0020b400:    4604        .F      MOV      r4,r0
;;;636        memset(p_user_cmd_if, 0, sizeof(T_USER_CMD_IF));
        0x0020b402:    f44f71d2    O..q    MOV      r1,#0x1a4
        0x0020b406:    f64efe2b    N.+.    BL       __aeabi_memclr4 ; 0x5a060
;;;637        p_user_cmd_if->history_head = USER_CMD_MAX_HISTORY_LINE;
        0x0020b40a:    2003        .       MOVS     r0,#3
        0x0020b40c:    f884019c    ....    STRB     r0,[r4,#0x19c]
;;;638        p_user_cmd_if->history_tail = USER_CMD_MAX_HISTORY_LINE;
        0x0020b410:    f884019d    ....    STRB     r0,[r4,#0x19d]
;;;639        p_user_cmd_if->history_cur  = USER_CMD_MAX_HISTORY_LINE;
        0x0020b414:    f884019e    ....    STRB     r0,[r4,#0x19e]
;;;640        //data_uart_print(">> Command Parse Init (%s) <<\r\n", project_name);
;;;641    }
        0x0020b418:    bd10        ..      POP      {r4,pc}
    user_cmd_skip_spaces
;;; ..\..\..\src\mcu\module\data_uart_cmd\user_cmd_parse.c (40)
        0x0020b41a:    b510        ..      PUSH     {r4,lr}
        0x0020b41c:    4604        .F      MOV      r4,r0
        0x0020b41e:    e000        ..      B        0x20b422 ; user_cmd_skip_spaces + 8
        0x0020b420:    1c64        d.      ADDS     r4,r4,#1
;;;41         char *p = buffer;
;;;42     
;;;43         while (user_cmd_is_white_space(*p)) /* white space */
        0x0020b422:    7820         x      LDRB     r0,[r4,#0]
        0x0020b424:    f000f84b    ..K.    BL       user_cmd_is_white_space ; 0x20b4be
        0x0020b428:    2800        .(      CMP      r0,#0
        0x0020b42a:    d1f9        ..      BNE      0x20b420 ; user_cmd_skip_spaces + 6
;;;44         {
;;;45             p++;
;;;46         }
;;;47         return p;
        0x0020b42c:    4620         F      MOV      r0,r4
;;;48     }
        0x0020b42e:    bd10        ..      POP      {r4,pc}
    user_cmd_find_end_of_word
;;;49     
;;;50     /**
;;;51      * @brief  Find end of a word.
;;;52      *
;;;53      * @param buffer    Address of the buffer.
;;;54      * @return
;;;55      */
;;;56     static char *user_cmd_find_end_of_word(char *buffer)
;;;57     {
        0x0020b430:    b510        ..      PUSH     {r4,lr}
        0x0020b432:    4604        .F      MOV      r4,r0
        0x0020b434:    e000        ..      B        0x20b438 ; user_cmd_find_end_of_word + 8
        0x0020b436:    1c64        d.      ADDS     r4,r4,#1
;;;58         char *p = buffer;
;;;59     
;;;60         while (!user_cmd_is_white_space(*p) && (*p != '\0'))
        0x0020b438:    7820         x      LDRB     r0,[r4,#0]
        0x0020b43a:    f000f840    ..@.    BL       user_cmd_is_white_space ; 0x20b4be
        0x0020b43e:    b910        ..      CBNZ     r0,0x20b446 ; user_cmd_find_end_of_word + 22
        0x0020b440:    7820         x      LDRB     r0,[r4,#0]
        0x0020b442:    2800        .(      CMP      r0,#0
        0x0020b444:    d1f7        ..      BNE      0x20b436 ; user_cmd_find_end_of_word + 6
;;;61         {
;;;62             p++;
;;;63         }
;;;64         return p;
        0x0020b446:    4620         F      MOV      r0,r4
;;;65     }
        0x0020b448:    bd10        ..      POP      {r4,pc}
    user_cmd_execute
;;;66     
;;;67     /**
;;;68      * @brief  Read ASCII string and convert to uint32_t.
;;;69      *
;;;70      * @param p  String address.
;;;71      * @return
;;;72      */
;;;73     static uint32_t user_cmd_str_to_uint32(char *p)
;;;74     {
;;;75         uint32_t result = 0;
;;;76         bool     hex = false;
;;;77     
;;;78         /* check if value is dec */
;;;79         if (p[0] == 'x')
;;;80         {
;;;81             hex = true;
;;;82             p = &p[1];
;;;83         }
;;;84         else if ((p[0] == '0') && (p[1] == 'x'))
;;;85         {
;;;86             hex = true;
;;;87             p = &p[2];
;;;88         }
;;;89     
;;;90         for (;;)
;;;91         {
;;;92             char     ch;
;;;93             ch = *(p++) | 0x20;                 /* convert to lower case */
;;;94     
;;;95             if (hex)                            /* dec value */
;;;96             {
;;;97                 /* hex value */
;;;98                 if ((ch >= 'a') && (ch <= 'f'))
;;;99                 {
;;;100                    ch -= ('a' - 10);
;;;101                }
;;;102                else if ((ch >= '0') && (ch <= '9'))
;;;103                {
;;;104                    ch -= '0';
;;;105                }
;;;106                else
;;;107                {
;;;108                    break;
;;;109                }
;;;110                result = (result << 4);
;;;111                result += (ch & 0x0f);
;;;112            }
;;;113            else
;;;114            {
;;;115                if (ch < '0' || ch > '9')
;;;116                {
;;;117                    break;    /* end of string reached */
;;;118                }
;;;119                result = 10 * result + ch - '0';
;;;120            }
;;;121        }
;;;122        return (result);
;;;123    }
;;;124    
;;;125    /**
;;;126     * @brief  Send result, display in UART Assitant.
;;;127     *
;;;128     * @param result    Command parse result.
;;;129     * @return none
;;;130    */
;;;131    static void cmd_send_result(T_USER_CMD_PARSE_RESULT result)
;;;132    {
;;;133        switch (result)
;;;134        {
;;;135        case RESULT_ERR:
;;;136            data_uart_print("%s\r\n", "CMD:Error");
;;;137            break;
;;;138        case RESULT_GAP_CAUSE_ALREADY_IN_REQ:
;;;139            data_uart_print("%s\r\n", "GAP_CAUSE_ALREADY_IN_REQ");
;;;140            break;
;;;141        case RESULT_GAP_CAUSE_INVALID_STATE:
;;;142            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_STATE");
;;;143            break;
;;;144        case RESULT_GAP_CAUSE_INVALID_PARAM:
;;;145            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PARAM");
;;;146            break;
;;;147        case RESULT_GAP_CAUSE_NON_CONN:
;;;148            data_uart_print("%s\r\n", "GAP_CAUSE_NON_CONN");
;;;149            break;
;;;150        case RESULT_GAP_CAUSE_NOT_FIND_IRK:
;;;151            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND_IRK");
;;;152            break;
;;;153        case RESULT_GAP_CAUSE_ERROR_CREDITS:
;;;154            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_CREDITS");
;;;155            break;
;;;156        case RESULT_GAP_CAUSE_SEND_REQ_FAILED:
;;;157            data_uart_print("%s\r\n", "GAP_CAUSE_SEND_REQ_FAILED");
;;;158            break;
;;;159        case RESULT_GAP_CAUSE_NO_RESOURCE:
;;;160            data_uart_print("%s\r\n", "GAP_CAUSE_NO_RESOURCE");
;;;161            break;
;;;162        case RESULT_GAP_CAUSE_INVALID_PDU_SIZE:
;;;163            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PDU_SIZE");
;;;164            break;
;;;165        case RESULT_GAP_CAUSE_NOT_FIND:
;;;166            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND");
;;;167            break;
;;;168        case RESULT_GAP_CAUSE_CONN_LIMIT:
;;;169            data_uart_print("%s\r\n", "GAP_CAUSE_CONN_LIMIT");
;;;170            break;
;;;171        case RESULT_CMD_NOT_FOUND:
;;;172            data_uart_print("%s\r\n", "CMD:Command not found");
;;;173            break;
;;;174        case RESULT_CMD_ERR_PARAM_NUM:
;;;175            data_uart_print("%s\r\n", "CMD:Wrong number of parameters");
;;;176            break;
;;;177        case RESULT_CMD_ERR_PARAM:
;;;178            data_uart_print("%s\r\n", "CMD:Wrong parameter");
;;;179            break;
;;;180        case RESULT_CMD_OUT_OF_RANGE:
;;;181            data_uart_print("%s\r\n", "CMD:Value out of range");
;;;182            break;
;;;183        case RESULT_CMD_NOT_SUPPORT:
;;;184            data_uart_print("%s\r\n", "CMD:Not support");
;;;185            break;
;;;186        case RESULT_GAP_CAUSE_ERROR_UNKNOWN:
;;;187            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_UNKNOWN");
;;;188            break;
;;;189        default:
;;;190            break;
;;;191        }
;;;192    }
;;;193    
;;;194    /**
;;;195     * @brief   List cmd.
;;;196     *
;;;197     * @param p_cmd_table   Command table, include user self-definition command function.
;;;198     * @return  Command execute result.
;;;199    */
;;;200    static T_USER_CMD_PARSE_RESULT user_cmd_list(const T_USER_CMD_TABLE_ENTRY *p_cmd_table)
;;;201    {
;;;202        int32_t i = 0;
;;;203        T_USER_CMD_PARSE_RESULT result = RESULT_CMD_NOT_FOUND;
;;;204    
;;;205        /* find command in table */
;;;206        while ((p_cmd_table + i)->p_cmd != NULL)
;;;207        {
;;;208            data_uart_print("%s", (p_cmd_table + i)->p_option);
;;;209            data_uart_print("%s", "  *");
;;;210            data_uart_print("%s", (p_cmd_table + i)->p_help);
;;;211            result = RESULT_SUCESS;
;;;212            i++;
;;;213        };
;;;214    
;;;215        data_uart_print(",.\r\n  *up down\r\n");
;;;216        data_uart_print("[]\r\n  *left right\r\n");
;;;217        data_uart_print("/\\\r\n  *home end\r\n");
;;;218        data_uart_print("backspace\r\n  *delete\r\n");
;;;219    
;;;220        return result;
;;;221    }
;;;222    
;;;223    /**
;;;224     * @brief  Execute command.
;;;225     *
;;;226     * @param p_parse_value     Command parse value.
;;;227     * @param p_cmd_table       Command table, include user self-definition command function.
;;;228     * @return  Command execute result.
;;;229    */
;;;230    static T_USER_CMD_PARSE_RESULT user_cmd_execute(T_USER_CMD_PARSED_VALUE *p_parse_value,
;;;231                                                    const T_USER_CMD_TABLE_ENTRY *p_cmd_table)
;;;232    {
        0x0020b44a:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020b44e:    460e        .F      MOV      r6,r1
        0x0020b450:    4605        .F      MOV      r5,r0
;;;233        int32_t i = 0;
        0x0020b452:    2400        .$      MOVS     r4,#0
;;;234        T_USER_CMD_PARSE_RESULT result = RESULT_CMD_NOT_FOUND;
        0x0020b454:    f04f0822    O.".    MOV      r8,#0x22
;;;235    
;;;236        if (strcmp((const char *)p_parse_value->p_cmd, (const char *)"?") == 0)
        0x0020b458:    6800        .h      LDR      r0,[r0,#0]
        0x0020b45a:    a131        1.      ADR      r1,{pc}+0xc6 ; 0x20b520
        0x0020b45c:    f64ffcec    O...    BL       strcmp ; 0x5ae38
        0x0020b460:    b948        H.      CBNZ     r0,0x20b476 ; user_cmd_execute + 44
;;;237        {
;;;238            user_cmd_list(p_cmd_table);
        0x0020b462:    4630        0F      MOV      r0,r6
        0x0020b464:    f000f835    ..5.    BL       user_cmd_list ; 0x20b4d2
;;;239            return RESULT_SUCESS;
        0x0020b468:    2000        .       MOVS     r0,#0
        0x0020b46a:    e54d        M.      B        0x20af08 ; user_cmd_parse + 50
        0x0020b46c:    6829        )h      LDR      r1,[r5,#0]
        0x0020b46e:    f64ffce3    O...    BL       strcmp ; 0x5ae38
        0x0020b472:    b138        8.      CBZ      r0,0x20b484 ; user_cmd_execute + 58
        0x0020b474:    1c64        d.      ADDS     r4,r4,#1
;;;240        }
;;;241    
;;;242        /* find command in table */
;;;243        while ((p_cmd_table + i)->p_cmd != NULL)
        0x0020b476:    eb061704    ....    ADD      r7,r6,r4,LSL #4
        0x0020b47a:    6838        8h      LDR      r0,[r7,#0]
        0x0020b47c:    2800        .(      CMP      r0,#0
        0x0020b47e:    d1f5        ..      BNE      0x20b46c ; user_cmd_execute + 34
        0x0020b480:    4640        @F      MOV      r0,r8
        0x0020b482:    e541        A.      B        0x20af08 ; user_cmd_parse + 50
;;;244        {
;;;245            if (strcmp((const char *)(p_cmd_table + i)->p_cmd, (const char *)p_parse_value->p_cmd) == 0)
;;;246            {
;;;247                /* check if user wants help */
;;;248                if (p_parse_value->param_count && *p_parse_value->p_param[0] == '?')
        0x0020b484:    6868        hh      LDR      r0,[r5,#4]
        0x0020b486:    b118        ..      CBZ      r0,0x20b490 ; user_cmd_execute + 70
        0x0020b488:    6d28        (m      LDR      r0,[r5,#0x50]
        0x0020b48a:    7800        .x      LDRB     r0,[r0,#0]
        0x0020b48c:    283f        ?(      CMP      r0,#0x3f
        0x0020b48e:    d006        ..      BEQ      0x20b49e ; user_cmd_execute + 84
        0x0020b490:    eb061004    ....    ADD      r0,r6,r4,LSL #4
        0x0020b494:    68c1        .h      LDR      r1,[r0,#0xc]
        0x0020b496:    4628        (F      MOV      r0,r5
        0x0020b498:    4788        .G      BLX      r1
        0x0020b49a:    4680        .F      MOV      r8,r0
        0x0020b49c:    e7f0        ..      B        0x20b480 ; user_cmd_execute + 54
;;;249                {
;;;250                    data_uart_print("%s", (p_cmd_table + i)->p_option);
        0x0020b49e:    eb061004    ....    ADD      r0,r6,r4,LSL #4
        0x0020b4a2:    6841        Ah      LDR      r1,[r0,#4]
        0x0020b4a4:    a01f        ..      ADR      r0,{pc}+0x80 ; 0x20b524
        0x0020b4a6:    f7fffc2b    ..+.    BL       data_uart_print ; 0x20ad00
;;;251                    data_uart_print("%s", "  *");
        0x0020b4aa:    a11f        ..      ADR      r1,{pc}+0x7e ; 0x20b528
        0x0020b4ac:    a01d        ..      ADR      r0,{pc}+0x78 ; 0x20b524
        0x0020b4ae:    f7fffc27    ..'.    BL       data_uart_print ; 0x20ad00
;;;252                    data_uart_print("%s", (p_cmd_table + i)->p_help);
        0x0020b4b2:    a01c        ..      ADR      r0,{pc}+0x72 ; 0x20b524
        0x0020b4b4:    68b9        .h      LDR      r1,[r7,#8]
        0x0020b4b6:    f7fffc23    ..#.    BL       data_uart_print ; 0x20ad00
;;;253                    result = RESULT_SUCESS;
        0x0020b4ba:    2000        .       MOVS     r0,#0
        0x0020b4bc:    e7ed        ..      B        0x20b49a ; user_cmd_execute + 80
    user_cmd_is_white_space
        0x0020b4be:    f1a00109    ....    SUB      r1,r0,#9
        0x0020b4c2:    2904        .)      CMP      r1,#4
;;; ..\..\..\src\mcu\module\data_uart_cmd\user_cmd_parse.c (29)
        0x0020b4c4:    d903        ..      BLS      0x20b4ce ; user_cmd_is_white_space + 16
;;;30         return (((c >= 9) && (c <= 13)) || (c == 32));
        0x0020b4c6:    2820         (      CMP      r0,#0x20
        0x0020b4c8:    d001        ..      BEQ      0x20b4ce ; user_cmd_is_white_space + 16
        0x0020b4ca:    2000        .       MOVS     r0,#0
        0x0020b4cc:    4770        pG      BX       lr
        0x0020b4ce:    2001        .       MOVS     r0,#1
;;;31     }
        0x0020b4d0:    4770        pG      BX       lr
    user_cmd_list
;;;32     
;;;33     /**
;;;34      * @brief  Skip white spaces in buffer.
;;;35      *
;;;36      * @param  buffer    Address of the buffer.
;;;37      * @return pointer to skipped white spaces' new buffer.
;;;38      */
;;;39     static char *user_cmd_skip_spaces(char *buffer)
;;;40     {
;;;41         char *p = buffer;
;;;42     
;;;43         while (user_cmd_is_white_space(*p)) /* white space */
;;;44         {
;;;45             p++;
;;;46         }
;;;47         return p;
;;;48     }
;;;49     
;;;50     /**
;;;51      * @brief  Find end of a word.
;;;52      *
;;;53      * @param buffer    Address of the buffer.
;;;54      * @return
;;;55      */
;;;56     static char *user_cmd_find_end_of_word(char *buffer)
;;;57     {
;;;58         char *p = buffer;
;;;59     
;;;60         while (!user_cmd_is_white_space(*p) && (*p != '\0'))
;;;61         {
;;;62             p++;
;;;63         }
;;;64         return p;
;;;65     }
;;;66     
;;;67     /**
;;;68      * @brief  Read ASCII string and convert to uint32_t.
;;;69      *
;;;70      * @param p  String address.
;;;71      * @return
;;;72      */
;;;73     static uint32_t user_cmd_str_to_uint32(char *p)
;;;74     {
;;;75         uint32_t result = 0;
;;;76         bool     hex = false;
;;;77     
;;;78         /* check if value is dec */
;;;79         if (p[0] == 'x')
;;;80         {
;;;81             hex = true;
;;;82             p = &p[1];
;;;83         }
;;;84         else if ((p[0] == '0') && (p[1] == 'x'))
;;;85         {
;;;86             hex = true;
;;;87             p = &p[2];
;;;88         }
;;;89     
;;;90         for (;;)
;;;91         {
;;;92             char     ch;
;;;93             ch = *(p++) | 0x20;                 /* convert to lower case */
;;;94     
;;;95             if (hex)                            /* dec value */
;;;96             {
;;;97                 /* hex value */
;;;98                 if ((ch >= 'a') && (ch <= 'f'))
;;;99                 {
;;;100                    ch -= ('a' - 10);
;;;101                }
;;;102                else if ((ch >= '0') && (ch <= '9'))
;;;103                {
;;;104                    ch -= '0';
;;;105                }
;;;106                else
;;;107                {
;;;108                    break;
;;;109                }
;;;110                result = (result << 4);
;;;111                result += (ch & 0x0f);
;;;112            }
;;;113            else
;;;114            {
;;;115                if (ch < '0' || ch > '9')
;;;116                {
;;;117                    break;    /* end of string reached */
;;;118                }
;;;119                result = 10 * result + ch - '0';
;;;120            }
;;;121        }
;;;122        return (result);
;;;123    }
;;;124    
;;;125    /**
;;;126     * @brief  Send result, display in UART Assitant.
;;;127     *
;;;128     * @param result    Command parse result.
;;;129     * @return none
;;;130    */
;;;131    static void cmd_send_result(T_USER_CMD_PARSE_RESULT result)
;;;132    {
;;;133        switch (result)
;;;134        {
;;;135        case RESULT_ERR:
;;;136            data_uart_print("%s\r\n", "CMD:Error");
;;;137            break;
;;;138        case RESULT_GAP_CAUSE_ALREADY_IN_REQ:
;;;139            data_uart_print("%s\r\n", "GAP_CAUSE_ALREADY_IN_REQ");
;;;140            break;
;;;141        case RESULT_GAP_CAUSE_INVALID_STATE:
;;;142            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_STATE");
;;;143            break;
;;;144        case RESULT_GAP_CAUSE_INVALID_PARAM:
;;;145            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PARAM");
;;;146            break;
;;;147        case RESULT_GAP_CAUSE_NON_CONN:
;;;148            data_uart_print("%s\r\n", "GAP_CAUSE_NON_CONN");
;;;149            break;
;;;150        case RESULT_GAP_CAUSE_NOT_FIND_IRK:
;;;151            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND_IRK");
;;;152            break;
;;;153        case RESULT_GAP_CAUSE_ERROR_CREDITS:
;;;154            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_CREDITS");
;;;155            break;
;;;156        case RESULT_GAP_CAUSE_SEND_REQ_FAILED:
;;;157            data_uart_print("%s\r\n", "GAP_CAUSE_SEND_REQ_FAILED");
;;;158            break;
;;;159        case RESULT_GAP_CAUSE_NO_RESOURCE:
;;;160            data_uart_print("%s\r\n", "GAP_CAUSE_NO_RESOURCE");
;;;161            break;
;;;162        case RESULT_GAP_CAUSE_INVALID_PDU_SIZE:
;;;163            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PDU_SIZE");
;;;164            break;
;;;165        case RESULT_GAP_CAUSE_NOT_FIND:
;;;166            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND");
;;;167            break;
;;;168        case RESULT_GAP_CAUSE_CONN_LIMIT:
;;;169            data_uart_print("%s\r\n", "GAP_CAUSE_CONN_LIMIT");
;;;170            break;
;;;171        case RESULT_CMD_NOT_FOUND:
;;;172            data_uart_print("%s\r\n", "CMD:Command not found");
;;;173            break;
;;;174        case RESULT_CMD_ERR_PARAM_NUM:
;;;175            data_uart_print("%s\r\n", "CMD:Wrong number of parameters");
;;;176            break;
;;;177        case RESULT_CMD_ERR_PARAM:
;;;178            data_uart_print("%s\r\n", "CMD:Wrong parameter");
;;;179            break;
;;;180        case RESULT_CMD_OUT_OF_RANGE:
;;;181            data_uart_print("%s\r\n", "CMD:Value out of range");
;;;182            break;
;;;183        case RESULT_CMD_NOT_SUPPORT:
;;;184            data_uart_print("%s\r\n", "CMD:Not support");
;;;185            break;
;;;186        case RESULT_GAP_CAUSE_ERROR_UNKNOWN:
;;;187            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_UNKNOWN");
;;;188            break;
;;;189        default:
;;;190            break;
;;;191        }
;;;192    }
;;;193    
;;;194    /**
;;;195     * @brief   List cmd.
;;;196     *
;;;197     * @param p_cmd_table   Command table, include user self-definition command function.
;;;198     * @return  Command execute result.
;;;199    */
;;;200    static T_USER_CMD_PARSE_RESULT user_cmd_list(const T_USER_CMD_TABLE_ENTRY *p_cmd_table)
;;;201    {
        0x0020b4d2:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020b4d6:    2400        .$      MOVS     r4,#0
        0x0020b4d8:    4607        .F      MOV      r7,r0
        0x0020b4da:    2622        "&      MOVS     r6,#0x22
        0x0020b4dc:    e00d        ..      B        0x20b4fa ; user_cmd_list + 40
;;;202        int32_t i = 0;
;;;203        T_USER_CMD_PARSE_RESULT result = RESULT_CMD_NOT_FOUND;
;;;204    
;;;205        /* find command in table */
;;;206        while ((p_cmd_table + i)->p_cmd != NULL)
;;;207        {
;;;208            data_uart_print("%s", (p_cmd_table + i)->p_option);
        0x0020b4de:    a011        ..      ADR      r0,{pc}+0x46 ; 0x20b524
        0x0020b4e0:    6869        ih      LDR      r1,[r5,#4]
        0x0020b4e2:    f7fffc0d    ....    BL       data_uart_print ; 0x20ad00
;;;209            data_uart_print("%s", "  *");
        0x0020b4e6:    a110        ..      ADR      r1,{pc}+0x42 ; 0x20b528
        0x0020b4e8:    a00e        ..      ADR      r0,{pc}+0x3c ; 0x20b524
        0x0020b4ea:    f7fffc09    ....    BL       data_uart_print ; 0x20ad00
;;;210            data_uart_print("%s", (p_cmd_table + i)->p_help);
        0x0020b4ee:    a00d        ..      ADR      r0,{pc}+0x36 ; 0x20b524
        0x0020b4f0:    68a9        .h      LDR      r1,[r5,#8]
        0x0020b4f2:    f7fffc05    ....    BL       data_uart_print ; 0x20ad00
;;;211            result = RESULT_SUCESS;
        0x0020b4f6:    2600        .&      MOVS     r6,#0
        0x0020b4f8:    1c64        d.      ADDS     r4,r4,#1
        0x0020b4fa:    eb071504    ....    ADD      r5,r7,r4,LSL #4
        0x0020b4fe:    6828        (h      LDR      r0,[r5,#0]
        0x0020b500:    2800        .(      CMP      r0,#0
        0x0020b502:    d1ec        ..      BNE      0x20b4de ; user_cmd_list + 12
;;;212            i++;
;;;213        };
;;;214    
;;;215        data_uart_print(",.\r\n  *up down\r\n");
        0x0020b504:    a009        ..      ADR      r0,{pc}+0x28 ; 0x20b52c
        0x0020b506:    f7fffbfb    ....    BL       data_uart_print ; 0x20ad00
;;;216        data_uart_print("[]\r\n  *left right\r\n");
        0x0020b50a:    a00d        ..      ADR      r0,{pc}+0x36 ; 0x20b540
        0x0020b50c:    f7fffbf8    ....    BL       data_uart_print ; 0x20ad00
;;;217        data_uart_print("/\\\r\n  *home end\r\n");
        0x0020b510:    a010        ..      ADR      r0,{pc}+0x44 ; 0x20b554
        0x0020b512:    f7fffbf5    ....    BL       data_uart_print ; 0x20ad00
;;;218        data_uart_print("backspace\r\n  *delete\r\n");
        0x0020b516:    a014        ..      ADR      r0,{pc}+0x52 ; 0x20b568
        0x0020b518:    f7fffbf2    ....    BL       data_uart_print ; 0x20ad00
;;;219    
;;;220        return result;
        0x0020b51c:    4630        0F      MOV      r0,r6
;;;221    }
        0x0020b51e:    e4f3        ..      B        0x20af08 ; user_cmd_parse + 50
    $d
        0x0020b520:    0000003f    ?...    DCD    63
        0x0020b524:    00007325    %s..    DCD    29477
        0x0020b528:    002a2020      *.    DCD    2760736
        0x0020b52c:    0a0d2e2c    ,...    DCD    168635948
        0x0020b530:    752a2020      *u    DCD    1965695008
        0x0020b534:    6f642070    p do    DCD    1868832880
        0x0020b538:    0a0d6e77    wn..    DCD    168652407
        0x0020b53c:    00000000    ....    DCD    0
        0x0020b540:    0a0d5d5b    []..    DCD    168648027
        0x0020b544:    6c2a2020      *l    DCD    1814700064
        0x0020b548:    20746665    eft     DCD    544499301
        0x0020b54c:    68676972    righ    DCD    1751607666
        0x0020b550:    000a0d74    t...    DCD    658804
        0x0020b554:    0a0d5c2f    /\..    DCD    168647727
        0x0020b558:    682a2020      *h    DCD    1747591200
        0x0020b55c:    20656d6f    ome     DCD    543518063
        0x0020b560:    0d646e65    end.    DCD    224685669
        0x0020b564:    0000000a    ....    DCD    10
        0x0020b568:    6b636162    back    DCD    1801675106
        0x0020b56c:    63617073    spac    DCD    1667330163
        0x0020b570:    200a0d65    e..     DCD    537529701
        0x0020b574:    65642a20     *de    DCD    1701063200
        0x0020b578:    6574656c    lete    DCD    1702126956
        0x0020b57c:    00000a0d    ....    DCD    2573
    $t
    .text
    load_overlay
;;; .\..\..\..\src\mcu\rtl876x\overlay_mgr.c
;;;116    {
        0x0020b580:    b510        ..      PUSH     {r4,lr}
        0x0020b582:    2803        .(      CMP      r0,#3
;;; .\..\..\..\src\mcu\rtl876x\overlay_mgr.c (116)
        0x0020b584:    d301        ..      BCC      0x20b58a ; load_overlay + 10
;;;117        const T_OVERLAY_SECTION *selected_scenario;
;;;118    
;;;119        if (scenario_idx >= OVERLAY_SCENARIO_NUM)
;;;120        {
;;;121            return false;
        0x0020b586:    2000        .       MOVS     r0,#0
        0x0020b588:    bd10        ..      POP      {r4,pc}
;;;122        }
;;;123    
;;;124        selected_scenario = &overlay_sections[scenario_idx];
        0x0020b58a:    491a        .I      LDR      r1,[pc,#104] ; [0x20b5f4] = 0x20cf50
        0x0020b58c:    eb0000c0    ....    ADD      r0,r0,r0,LSL #3
        0x0020b590:    eb010480    ....    ADD      r4,r1,r0,LSL #2
;;;125    
;;;126        if (memcmp(selected_scenario->signature, scenario_name, 8) == 0)
        0x0020b594:    2208        ."      MOVS     r2,#8
        0x0020b596:    4918        .I      LDR      r1,[pc,#96] ; [0x20b5f8] = 0x20d200
        0x0020b598:    6820         h      LDR      r0,[r4,#0]
        0x0020b59a:    f64efc33    N.3.    BL       memcmp ; 0x59e04
        0x0020b59e:    b198        ..      CBZ      r0,0x20b5c8 ; load_overlay + 72
;;;127        {
;;;128            return true;
;;;129        }
;;;130    
;;;131        /* load code */
;;;132        memcpy(selected_scenario->image_ro_base, selected_scenario->load_ro_base,
        0x0020b5a0:    69a2        .i      LDR      r2,[r4,#0x18]
        0x0020b5a2:    6861        ah      LDR      r1,[r4,#4]
        0x0020b5a4:    68e0        .h      LDR      r0,[r4,#0xc]
        0x0020b5a6:    f64efc78    N.x.    BL       __aeabi_memcpy ; 0x59e9a
;;;133               selected_scenario->ro_length);
;;;134        /* load rw data */
;;;135        memcpy(selected_scenario->image_rw_base, selected_scenario->load_rw_base,
        0x0020b5aa:    69e2        .i      LDR      r2,[r4,#0x1c]
        0x0020b5ac:    68a1        .h      LDR      r1,[r4,#8]
        0x0020b5ae:    6920         i      LDR      r0,[r4,#0x10]
        0x0020b5b0:    f64efc73    N.s.    BL       __aeabi_memcpy ; 0x59e9a
;;;136               selected_scenario->rw_length);
;;;137        /* clear zi data */
;;;138        memset(selected_scenario->image_zi_base, 0x0, selected_scenario->zi_length);
        0x0020b5b4:    6a21        !j      LDR      r1,[r4,#0x20]
        0x0020b5b6:    6960        `i      LDR      r0,[r4,#0x14]
        0x0020b5b8:    f64efd30    N.0.    BL       __aeabi_memclr ; 0x5a01c
;;;139    
;;;140        memcpy(scenario_name, selected_scenario->signature, 8);
        0x0020b5bc:    6820         h      LDR      r0,[r4,#0]
        0x0020b5be:    490e        .I      LDR      r1,[pc,#56] ; [0x20b5f8] = 0x20d200
        0x0020b5c0:    6802        .h      LDR      r2,[r0,#0]
        0x0020b5c2:    600a        .`      STR      r2,[r1,#0]
        0x0020b5c4:    6840        @h      LDR      r0,[r0,#4]
        0x0020b5c6:    6048        H`      STR      r0,[r1,#4]
        0x0020b5c8:    2001        .       MOVS     r0,#1
;;;141    
;;;142        return true;
;;;143    }
        0x0020b5ca:    bd10        ..      POP      {r4,pc}
    get_current_scenario_index
;;;144    
;;;145    T_OVERLAY_SCENARIO_IDX get_current_scenario_index(void)
;;;146    {
        0x0020b5cc:    b570        p.      PUSH     {r4-r6,lr}
        0x0020b5ce:    4d09        .M      LDR      r5,[pc,#36] ; [0x20b5f4] = 0x20cf50
;;;147        const T_OVERLAY_SECTION *selected_scenario;
;;;148    
;;;149        for (int i = 0; i < (int)OVERLAY_SCENARIO_NUM; ++i)
        0x0020b5d0:    2400        .$      MOVS     r4,#0
        0x0020b5d2:    eb0400c4    ....    ADD      r0,r4,r4,LSL #3
        0x0020b5d6:    2208        ."      MOVS     r2,#8
        0x0020b5d8:    f8550020    U. .    LDR      r0,[r5,r0,LSL #2]
        0x0020b5dc:    4906        .I      LDR      r1,[pc,#24] ; [0x20b5f8] = 0x20d200
        0x0020b5de:    f64efc11    N...    BL       memcmp ; 0x59e04
        0x0020b5e2:    b120         .      CBZ      r0,0x20b5ee ; get_current_scenario_index + 34
        0x0020b5e4:    1c64        d.      ADDS     r4,r4,#1
        0x0020b5e6:    2c03        .,      CMP      r4,#3
        0x0020b5e8:    dbf3        ..      BLT      0x20b5d2 ; get_current_scenario_index + 6
        0x0020b5ea:    2003        .       MOVS     r0,#3
        0x0020b5ec:    bd70        p.      POP      {r4-r6,pc}
;;;150        {
;;;151            selected_scenario = &overlay_sections[i];
;;;152            if (memcmp(selected_scenario->signature, scenario_name, 8) == 0)
;;;153            {
;;;154                return (T_OVERLAY_SCENARIO_IDX)i;
        0x0020b5ee:    b2e0        ..      UXTB     r0,r4
;;;155            }
;;;156        }
;;;157    
;;;158        return OVERLAY_SCENARIO_NUM; //not found valid scenario
;;;159    }
        0x0020b5f0:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x0020b5f2:    0000        ..      DCW    0
        0x0020b5f4:    0020cf50    P. .    DCD    2150224
        0x0020b5f8:    0020d200    .. .    DCD    2150912
    $t
    .text
    qc_app_main_task
;;; ..\..\..\src\sample\ble_central\mxchip_qc.c
;;;55     {
        0x0020b5fc:    b51c        ..      PUSH     {r2-r4,lr}
;;;56         uint8_t event;
;;;57         os_msg_queue_create(&qc_io_queue_handle, MAX_NUMBER_OF_IO_MESSAGE, sizeof(T_IO_MSG));
        0x0020b5fe:    2039        9       MOVS     r0,#0x39
        0x0020b600:    9000        ..      STR      r0,[sp,#0]
        0x0020b602:    4bef        .K      LDR      r3,[pc,#956] ; [0x20b9c0] = 0x21ca42
        0x0020b604:    2208        ."      MOVS     r2,#8
        0x0020b606:    2120         !      MOVS     r1,#0x20
        0x0020b608:    48ee        .H      LDR      r0,[pc,#952] ; [0x20b9c4] = 0x20d214
        0x0020b60a:    f61afc73    ..s.    BL       os_msg_queue_create_intern ; 0x25ef4
;;;58         os_msg_queue_create(&qc_evt_queue_handle, MAX_NUMBER_OF_EVENT_MESSAGE, sizeof(uint8_t));
        0x0020b60e:    203a        :       MOVS     r0,#0x3a
        0x0020b610:    9000        ..      STR      r0,[sp,#0]
        0x0020b612:    48ec        .H      LDR      r0,[pc,#944] ; [0x20b9c4] = 0x20d214
        0x0020b614:    4bea        .K      LDR      r3,[pc,#936] ; [0x20b9c0] = 0x21ca42
        0x0020b616:    2201        ."      MOVS     r2,#1
        0x0020b618:    2140        @!      MOVS     r1,#0x40
        0x0020b61a:    1f00        ..      SUBS     r0,r0,#4
        0x0020b61c:    f61afc6a    ..j.    BL       os_msg_queue_create_intern ; 0x25ef4
        0x0020b620:    4ce8        .L      LDR      r4,[pc,#928] ; [0x20b9c4] = 0x20d214
        0x0020b622:    2220         "      MOVS     r2,#0x20
        0x0020b624:    3c0c        .<      SUBS     r4,r4,#0xc
        0x0020b626:    e9d40102    ....    LDRD     r0,r1,[r4,#8]
        0x0020b62a:    f640fc1e    @...    BL       gap_start_bt_stack ; 0x4be6a
        0x0020b62e:    2540        @%      MOVS     r5,#0x40
;;;59     
;;;60         gap_start_bt_stack(qc_evt_queue_handle, qc_io_queue_handle, MAX_NUMBER_OF_GAP_MESSAGE);
;;;61     
;;;62         while (true)
;;;63         {
;;;64             if (os_msg_recv(qc_evt_queue_handle, &event, 0xFFFFFFFF) == true)
        0x0020b630:    f04f36ff    O..6    MOV      r6,#0xffffffff
        0x0020b634:    9500        ..      STR      r5,[sp,#0]
        0x0020b636:    4be2        .K      LDR      r3,[pc,#904] ; [0x20b9c0] = 0x21ca42
        0x0020b638:    4632        2F      MOV      r2,r6
        0x0020b63a:    a901        ..      ADD      r1,sp,#4
        0x0020b63c:    68a0        .h      LDR      r0,[r4,#8]
        0x0020b63e:    f61afd01    ....    BL       os_msg_recv_intern ; 0x26044
        0x0020b642:    2800        .(      CMP      r0,#0
        0x0020b644:    d0f6        ..      BEQ      0x20b634 ; qc_app_main_task + 56
;;;65             {
;;;66                 if (event == EVENT_GAP_MSG)
        0x0020b646:    f89d0004    ....    LDRB     r0,[sp,#4]
        0x0020b64a:    2801        .(      CMP      r0,#1
        0x0020b64c:    d1f2        ..      BNE      0x20b634 ; qc_app_main_task + 56
;;;67                 {
;;;68                     gap_handle_msg(event);
        0x0020b64e:    f640fc79    @.y.    BL       gap_handle_msg ; 0x4bf44
        0x0020b652:    e7ef        ..      B        0x20b634 ; qc_app_main_task + 56
    qc_app_task_init
        0x0020b654:    b51c        ..      PUSH     {r2-r4,lr}
;;; ..\..\..\src\sample\ble_central\mxchip_qc.c (45)
        0x0020b656:    2101        .!      MOVS     r1,#1
        0x0020b658:    0288        ..      LSLS     r0,r1,#10
        0x0020b65a:    2300        .#      MOVS     r3,#0
        0x0020b65c:    f2af0263    ..c.    ADR      r2,{pc}-0x5f ; 0x20b5fd
        0x0020b660:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x0020b664:    48d7        .H      LDR      r0,[pc,#860] ; [0x20b9c4] = 0x20d214
        0x0020b666:    a1d8        ..      ADR      r1,{pc}+0x362 ; 0x20b9c8
        0x0020b668:    380c        .8      SUBS     r0,r0,#0xc
        0x0020b66a:    f61bf9b1    ....    BL       os_task_create ; 0x269d0
;;;46                        APP_TASK_PRIORITY);
;;;47     }
        0x0020b66e:    bd1c        ..      POP      {r2-r4,pc}
    mf_printf
;;;48     
;;;49     /**
;;;50      * @brief        App task to handle events & messages
;;;51      * @param[in]    p_param    Parameters sending to the task
;;;52      * @return       void
;;;53      */
;;;54     void qc_app_main_task(void *p_param)
;;;55     {
;;;56         uint8_t event;
;;;57         os_msg_queue_create(&qc_io_queue_handle, MAX_NUMBER_OF_IO_MESSAGE, sizeof(T_IO_MSG));
;;;58         os_msg_queue_create(&qc_evt_queue_handle, MAX_NUMBER_OF_EVENT_MESSAGE, sizeof(uint8_t));
;;;59     
;;;60         gap_start_bt_stack(qc_evt_queue_handle, qc_io_queue_handle, MAX_NUMBER_OF_GAP_MESSAGE);
;;;61     
;;;62         while (true)
;;;63         {
;;;64             if (os_msg_recv(qc_evt_queue_handle, &event, 0xFFFFFFFF) == true)
;;;65             {
;;;66                 if (event == EVENT_GAP_MSG)
;;;67                 {
;;;68                     gap_handle_msg(event);
;;;69                 }
;;;70             }
;;;71         }
;;;72     }
;;;73     
;;;74     static void _qc_uart_send(uint8_t *srt, uint8_t len)
;;;75     {
;;;76         uint8_t count = 0, remainder = 0, i = 0;
;;;77     
;;;78         count = len / 16;
;;;79         remainder = len % 16;
;;;80         for (i = 0; i < count; i++)
;;;81         {
;;;82             UART_SendData(UART, &srt[16 * i], 16);
;;;83             while (UART_GetFlagState(UART, UART_FLAG_THR_TSR_EMPTY) != SET)
;;;84                 ;
;;;85         }
;;;86         /* send left bytes */
;;;87         UART_SendData(UART, &srt[16 * i], remainder);
;;;88         /* wait tx fifo empty */
;;;89         while (UART_GetFlagState(UART, UART_FLAG_THR_TSR_EMPTY) != SET)
;;;90             ;
;;;91     }
;;;92     
;;;93     void mf_printf(char *str)
;;;94     {
        0x0020b670:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020b674:    0005        ..      MOVS     r5,r0
        0x0020b676:    d027        '.      BEQ      0x20b6c8 ; mf_printf + 88
        0x0020b678:    f64efbf0    N...    BL       strlen ; 0x59e5c
        0x0020b67c:    2800        .(      CMP      r0,#0
        0x0020b67e:    d023        #.      BEQ      0x20b6c8 ; mf_printf + 88
        0x0020b680:    4628        (F      MOV      r0,r5
        0x0020b682:    f64efbeb    N...    BL       strlen ; 0x59e5c
        0x0020b686:    b2c0        ..      UXTB     r0,r0
;;; ..\..\..\src\sample\ble_central\mxchip_qc.c (76)
        0x0020b688:    2400        .$      MOVS     r4,#0
;;;77     
;;;78         count = len / 16;
        0x0020b68a:    0906        ..      LSRS     r6,r0,#4
;;;79         remainder = len % 16;
        0x0020b68c:    f000080f    ....    AND      r8,r0,#0xf
        0x0020b690:    4fcf        .O      LDR      r7,[pc,#828] ; [0x20b9d0] = 0x40012000
        0x0020b692:    e00b        ..      B        0x20b6ac ; mf_printf + 60
        0x0020b694:    2210        ."      MOVS     r2,#0x10
        0x0020b696:    4638        8F      MOV      r0,r7
        0x0020b698:    f7fcfe5c    ..\.    BL       UART_SendData ; 0x208354
        0x0020b69c:    2140        @!      MOVS     r1,#0x40
        0x0020b69e:    4638        8F      MOV      r0,r7
        0x0020b6a0:    f7fcfe8b    ....    BL       UART_GetFlagState ; 0x2083ba
        0x0020b6a4:    2801        .(      CMP      r0,#1
        0x0020b6a6:    d1f9        ..      BNE      0x20b69c ; mf_printf + 44
        0x0020b6a8:    1c64        d.      ADDS     r4,r4,#1
;;;80         for (i = 0; i < count; i++)
        0x0020b6aa:    b2e4        ..      UXTB     r4,r4
        0x0020b6ac:    42b4        .B      CMP      r4,r6
        0x0020b6ae:    eb051104    ....    ADD      r1,r5,r4,LSL #4
        0x0020b6b2:    d3ef        ..      BCC      0x20b694 ; mf_printf + 36
;;;81         {
;;;82             UART_SendData(UART, &srt[16 * i], 16);
;;;83             while (UART_GetFlagState(UART, UART_FLAG_THR_TSR_EMPTY) != SET)
;;;84                 ;
;;;85         }
;;;86         /* send left bytes */
;;;87         UART_SendData(UART, &srt[16 * i], remainder);
        0x0020b6b4:    4642        BF      MOV      r2,r8
        0x0020b6b6:    4638        8F      MOV      r0,r7
        0x0020b6b8:    f7fcfe4c    ..L.    BL       UART_SendData ; 0x208354
;;;88         /* wait tx fifo empty */
;;;89         while (UART_GetFlagState(UART, UART_FLAG_THR_TSR_EMPTY) != SET)
        0x0020b6bc:    2140        @!      MOVS     r1,#0x40
        0x0020b6be:    4638        8F      MOV      r0,r7
        0x0020b6c0:    f7fcfe7b    ..{.    BL       UART_GetFlagState ; 0x2083ba
        0x0020b6c4:    2801        .(      CMP      r0,#1
        0x0020b6c6:    d1f9        ..      BNE      0x20b6bc ; mf_printf + 76
;;;90             ;
;;;91     }
;;;92     
;;;93     void mf_printf(char *str)
;;;94     {
;;;95         if ((str == NULL) || (strlen(str) == 0))
;;;96             return;
;;;97         _qc_uart_send((uint8_t *)str, strlen(str));
;;;98     }
        0x0020b6c8:    e8bd81f0    ....    POP      {r4-r8,pc}
    mf_putc
;;; ..\..\..\inc\peripheral\rtl876x_uart.h
;;;392        UARTx->RB_THR = data;
        0x0020b6cc:    49c0        .I      LDR      r1,[pc,#768] ; [0x20b9d0] = 0x40012000
        0x0020b6ce:    6248        Hb      STR      r0,[r1,#0x24]
;;; ..\..\..\src\sample\ble_central\mxchip_qc.c
;;;103    }
        0x0020b6d0:    4770        pG      BX       lr
    _qc_uart_io_init
;;;104    
;;;105    void _qc_uart_io_init(void)
;;;106    {
        0x0020b6d2:    b51c        ..      PUSH     {r2-r4,lr}
;;;107        Pinmux_Config(UART_TX, UART0_TX);
        0x0020b6d4:    2123        #!      MOVS     r1,#0x23
        0x0020b6d6:    2018        .       MOVS     r0,#0x18
        0x0020b6d8:    f605fe4c    ..L.    BL       Pinmux_Config ; 0x11374
;;;108        Pinmux_Config(UART_RX, UART0_RX);
        0x0020b6dc:    2124        $!      MOVS     r1,#0x24
        0x0020b6de:    2019        .       MOVS     r0,#0x19
        0x0020b6e0:    f605fe48    ..H.    BL       Pinmux_Config ; 0x11374
;;;109    
;;;110        Pad_Config(UART_TX, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0020b6e4:    2400        .$      MOVS     r4,#0
        0x0020b6e6:    2301        .#      MOVS     r3,#1
        0x0020b6e8:    9400        ..      STR      r4,[sp,#0]
        0x0020b6ea:    461a        .F      MOV      r2,r3
        0x0020b6ec:    4619        .F      MOV      r1,r3
        0x0020b6ee:    2018        .       MOVS     r0,#0x18
        0x0020b6f0:    9401        ..      STR      r4,[sp,#4]
        0x0020b6f2:    f605fe73    ..s.    BL       Pad_Config ; 0x113dc
;;;111        Pad_Config(UART_RX, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0020b6f6:    2301        .#      MOVS     r3,#1
        0x0020b6f8:    9400        ..      STR      r4,[sp,#0]
        0x0020b6fa:    461a        .F      MOV      r2,r3
        0x0020b6fc:    4619        .F      MOV      r1,r3
        0x0020b6fe:    2019        .       MOVS     r0,#0x19
        0x0020b700:    9401        ..      STR      r4,[sp,#4]
        0x0020b702:    f605fe6b    ..k.    BL       Pad_Config ; 0x113dc
;;;112    }
        0x0020b706:    bd1c        ..      POP      {r2-r4,pc}
    _qc_uart_config
;;;113    
;;;114    void _qc_uart_config(void)
;;;115    {
        0x0020b708:    b510        ..      PUSH     {r4,lr}
        0x0020b70a:    b088        ..      SUB      sp,sp,#0x20
;;;116        UART_InitTypeDef UART_InitStruct;
;;;117        UART_StructInit(&UART_InitStruct);
        0x0020b70c:    4668        hF      MOV      r0,sp
        0x0020b70e:    f7fcfe02    ....    BL       UART_StructInit ; 0x208316
;;;118        //    UART_InitStruct.div = 4; //921600
;;;119        //    UART_InitStruct.ovsr = 5;
;;;120        //    UART_InitStruct.ovsr_adj = 0x3F7;
;;;121    
;;;122        UART_Init(UART, &UART_InitStruct);
        0x0020b712:    4caf        .L      LDR      r4,[pc,#700] ; [0x20b9d0] = 0x40012000
        0x0020b714:    4669        iF      MOV      r1,sp
        0x0020b716:    4620         F      MOV      r0,r4
        0x0020b718:    f7fcfd84    ....    BL       UART_Init ; 0x208224
;;;123        /*  enable line status interrupt and rx data avaliable interrupt    */
;;;124        UART_INTConfig(UART, UART_INT_RD_AVA | UART_INT_LINE_STS | UART_INT_IDLE, ENABLE);
        0x0020b71c:    2201        ."      MOVS     r2,#1
        0x0020b71e:    2185        .!      MOVS     r1,#0x85
        0x0020b720:    4620         F      MOV      r0,r4
        0x0020b722:    f7fcfe1f    ....    BL       UART_INTConfig ; 0x208364
;;;125    }
        0x0020b726:    b008        ..      ADD      sp,sp,#0x20
        0x0020b728:    bd10        ..      POP      {r4,pc}
    _qc_test_uart_init
;;;126    
;;;127    /****************************************************************************/
;;;128    /* UART init                                                                */
;;;129    /****************************************************************************/
;;;130    void _qc_test_uart_init(void)
;;;131    {
        0x0020b72a:    b510        ..      PUSH     {r4,lr}
;;;132        RCC_PeriphClockCmd(APBPeriph_UART0, APBPeriph_UART0_CLOCK, ENABLE);
        0x0020b72c:    2201        ."      MOVS     r2,#1
        0x0020b72e:    49a9        .I      LDR      r1,[pc,#676] ; [0x20b9d4] = 0x40000001
        0x0020b730:    48a9        .H      LDR      r0,[pc,#676] ; [0x20b9d8] = 0x8000001
        0x0020b732:    f7fcfbcd    ....    BL       RCC_PeriphClockCmd ; 0x207ed0
;;;133        _qc_uart_io_init();
        0x0020b736:    f7ffffcc    ....    BL       _qc_uart_io_init ; 0x20b6d2
;;;134        /*  UART Init   */
;;;135        _qc_uart_config();
        0x0020b73a:    e8bd4010    ...@    POP      {r4,lr}
        0x0020b73e:    e7e3        ..      B        _qc_uart_config ; 0x20b708
    _qc_gap_callback
;;;136        return;
;;;137    }
;;;138    
;;;139    static char *sdk_version_get(void)
;;;140    {
;;;141        return "Bee2_SDK_v" VERSION_BUILD_STR;
;;;142    }
;;;143    
;;;144    static void _qc_get_mac_addr(uint8_t *mac)
;;;145    {
;;;146        gap_get_param(GAP_PARAM_BD_ADDR, mac);
;;;147    }
;;;148    
;;;149    static void _qc_ble_scan_start(void)
;;;150    {
;;;151        le_scan_start();
;;;152    }
;;;153    
;;;154    static void _qc_ble_scan_stop(void)
;;;155    {
;;;156        le_scan_stop();
;;;157    }
;;;158    
;;;159    T_APP_RESULT _qc_gap_callback(uint8_t cb_type, void *p_cb_data)
;;;160    {
        0x0020b740:    b570        p.      PUSH     {r4-r6,lr}
        0x0020b742:    b0a6        ..      SUB      sp,sp,#0x98
        0x0020b744:    460c        .F      MOV      r4,r1
        0x0020b746:    4606        .F      MOV      r6,r0
;;;161        T_APP_RESULT result = APP_RESULT_SUCCESS;
        0x0020b748:    2500        .%      MOVS     r5,#0
;;;162        T_LE_CB_DATA *p_data = (T_LE_CB_DATA *)p_cb_data;
;;;163        char str[128] = {0};
        0x0020b74a:    2180        .!      MOVS     r1,#0x80
        0x0020b74c:    a805        ..      ADD      r0,sp,#0x14
        0x0020b74e:    f64efc87    N...    BL       __aeabi_memclr4 ; 0x5a060
;;;164    
;;;165        switch (cb_type)
        0x0020b752:    2e30        0.      CMP      r6,#0x30
        0x0020b754:    d113        ..      BNE      0x20b77e ; _qc_gap_callback + 62
;;;166        {
;;;167        case GAP_MSG_LE_SCAN_INFO:
;;;168            sprintf(str, "ADDR: " BT_MAC_STR_FORMAT ", RSSI: %d\r\n",
        0x0020b756:    6821        !h      LDR      r1,[r4,#0]
        0x0020b758:    ae01        ..      ADD      r6,sp,#4
        0x0020b75a:    7888        .x      LDRB     r0,[r1,#2]
        0x0020b75c:    f9914008    ...@    LDRSB    r4,[r1,#8]
        0x0020b760:    780b        .x      LDRB     r3,[r1,#0]
        0x0020b762:    784a        Jx      LDRB     r2,[r1,#1]
        0x0020b764:    e886001d    ....    STM      r6,{r0,r2-r4}
        0x0020b768:    78c8        .x      LDRB     r0,[r1,#3]
        0x0020b76a:    9000        ..      STR      r0,[sp,#0]
        0x0020b76c:    790b        .y      LDRB     r3,[r1,#4]
        0x0020b76e:    794a        Jy      LDRB     r2,[r1,#5]
        0x0020b770:    a19a        ..      ADR      r1,{pc}+0x26c ; 0x20b9dc
        0x0020b772:    a805        ..      ADD      r0,sp,#0x14
        0x0020b774:    f010fe62    ..b.    BL       __2sprintf ; 0x21c43c
;;;169                    p_data->p_le_scan_info->bd_addr[5], p_data->p_le_scan_info->bd_addr[4],
;;;170                    p_data->p_le_scan_info->bd_addr[3], p_data->p_le_scan_info->bd_addr[2],
;;;171                    p_data->p_le_scan_info->bd_addr[1], p_data->p_le_scan_info->bd_addr[0],
;;;172                    p_data->p_le_scan_info->rssi);
;;;173            mf_printf(str);
        0x0020b778:    a805        ..      ADD      r0,sp,#0x14
        0x0020b77a:    f7ffff79    ..y.    BL       mf_printf ; 0x20b670
        0x0020b77e:    b026        &.      ADD      sp,sp,#0x98
;;;174        default:
;;;175            break;
;;;176        }
;;;177        return result;
        0x0020b780:    4628        (F      MOV      r0,r5
;;;178    }
        0x0020b782:    bd70        p.      POP      {r4-r6,pc}
    _qc_le_gap_init
;;;179    
;;;180    void _qc_le_gap_init(void)
;;;181    {
        0x0020b784:    b500        ..      PUSH     {lr}
        0x0020b786:    b085        ..      SUB      sp,sp,#0x14
;;;182        //scan patameters
;;;183        uint8_t scan_mode = GAP_SCAN_MODE_ACTIVE;
        0x0020b788:    2101        .!      MOVS     r1,#1
;;;184        uint16_t scan_interval = 0x10;
        0x0020b78a:    2010        .       MOVS     r0,#0x10
        0x0020b78c:    f8ad0008    ....    STRH     r0,[sp,#8]
;;;185        uint16_t scan_window = 0x10;
        0x0020b790:    f8ad000c    ....    STRH     r0,[sp,#0xc]
;;;186        uint8_t scan_filter_policy = GAP_SCAN_FILTER_ANY;
        0x0020b794:    2000        .       MOVS     r0,#0
        0x0020b796:    f88d1010    ....    STRB     r1,[sp,#0x10]
        0x0020b79a:    f88d0000    ....    STRB     r0,[sp,#0]
;;;187        uint8_t scan_filter_duplicate = GAP_SCAN_FILTER_DUPLICATE_ENABLE;
        0x0020b79e:    f88d1004    ....    STRB     r1,[sp,#4]
;;;188    
;;;189        //Register gap callback
;;;190        le_register_app_cb(_qc_gap_callback);
        0x0020b7a2:    f2af0063    ..c.    ADR      r0,{pc}-0x61 ; 0x20b741
        0x0020b7a6:    f641fa4c    A.L.    BL       le_register_app_cb ; 0x4cc42
;;;191    
;;;192        le_scan_set_param(GAP_PARAM_SCAN_MODE, sizeof(scan_mode), &scan_mode);
        0x0020b7aa:    aa04        ..      ADD      r2,sp,#0x10
        0x0020b7ac:    2101        .!      MOVS     r1,#1
        0x0020b7ae:    f2402041    @.A     MOV      r0,#0x241
        0x0020b7b2:    f646fddf    F...    BL       le_scan_set_param ; 0x52374
;;;193        le_scan_set_param(GAP_PARAM_SCAN_INTERVAL, sizeof(scan_interval), &scan_interval);
        0x0020b7b6:    aa02        ..      ADD      r2,sp,#8
        0x0020b7b8:    2102        .!      MOVS     r1,#2
        0x0020b7ba:    f2402042    @.B     MOV      r0,#0x242
        0x0020b7be:    f646fdd9    F...    BL       le_scan_set_param ; 0x52374
;;;194        le_scan_set_param(GAP_PARAM_SCAN_WINDOW, sizeof(scan_window), &scan_window);
        0x0020b7c2:    aa03        ..      ADD      r2,sp,#0xc
        0x0020b7c4:    2102        .!      MOVS     r1,#2
        0x0020b7c6:    f2402043    @.C     MOV      r0,#0x243
        0x0020b7ca:    f646fdd3    F...    BL       le_scan_set_param ; 0x52374
;;;195        le_scan_set_param(GAP_PARAM_SCAN_FILTER_POLICY, sizeof(scan_filter_policy),
        0x0020b7ce:    466a        jF      MOV      r2,sp
        0x0020b7d0:    2101        .!      MOVS     r1,#1
        0x0020b7d2:    f44f7011    O..p    MOV      r0,#0x244
        0x0020b7d6:    f646fdcd    F...    BL       le_scan_set_param ; 0x52374
;;;196                          &scan_filter_policy);
;;;197        le_scan_set_param(GAP_PARAM_SCAN_FILTER_DUPLICATES, sizeof(scan_filter_duplicate),
        0x0020b7da:    aa01        ..      ADD      r2,sp,#4
        0x0020b7dc:    2101        .!      MOVS     r1,#1
        0x0020b7de:    f2402045    @.E     MOV      r0,#0x245
        0x0020b7e2:    f646fdc7    F...    BL       le_scan_set_param ; 0x52374
;;;198                          &scan_filter_duplicate);
;;;199    }
        0x0020b7e6:    b005        ..      ADD      sp,sp,#0x14
        0x0020b7e8:    bd00        ..      POP      {pc}
    _mxchip_qc_test
        0x0020b7ea:    b500        ..      PUSH     {lr}
        0x0020b7ec:    b0a7        ..      SUB      sp,sp,#0x9c
        0x0020b7ee:    f7ffff9c    ....    BL       _qc_test_uart_init ; 0x20b72a
;;;200    
;;;201    static void _qc_ble_init(void)
;;;202    {
;;;203        le_gap_init(1);
        0x0020b7f2:    2001        .       MOVS     r0,#1
        0x0020b7f4:    f641f9e2    A...    BL       le_gap_init ; 0x4cbbc
;;;204        gap_lib_init();
        0x0020b7f8:    f000f994    ....    BL       gap_lib_init ; 0x20bb24
;;;205        _qc_le_gap_init();
        0x0020b7fc:    f7ffffc2    ....    BL       _qc_le_gap_init ; 0x20b784
;;;206    }
;;;207    
;;;208    /* MXCHIP standard QC test function main entrance, available for all modules */
;;;209    static void _mxchip_qc_test(void *arg)
;;;210    {
;;;211        char str[128];
;;;212        uint8_t mac[6];
;;;213    
;;;214        _qc_test_uart_init();
;;;215        _qc_ble_init();
;;;216        qc_app_task_init();
        0x0020b800:    f7ffff28    ..(.    BL       qc_app_task_init ; 0x20b654
;;;217    
;;;218        mf_printf("==== MXCHIP Manufacture Test ====\r\n");
        0x0020b804:    a081        ..      ADR      r0,{pc}+0x208 ; 0x20ba0c
        0x0020b806:    f7ffff33    ..3.    BL       mf_printf ; 0x20b670
;;;219        QC_TEST_PRINT_STRING("Serial Number:", SERIAL_NUMBER);
        0x0020b80a:    a089        ..      ADR      r0,{pc}+0x226 ; 0x20ba30
        0x0020b80c:    f7ffff30    ..0.    BL       mf_printf ; 0x20b670
        0x0020b810:    a08b        ..      ADR      r0,{pc}+0x230 ; 0x20ba40
        0x0020b812:    f7ffff2d    ..-.    BL       mf_printf ; 0x20b670
        0x0020b816:    a08b        ..      ADR      r0,{pc}+0x22e ; 0x20ba44
        0x0020b818:    f7ffff2a    ..*.    BL       mf_printf ; 0x20b670
        0x0020b81c:    a08d        ..      ADR      r0,{pc}+0x238 ; 0x20ba54
        0x0020b81e:    f7ffff27    ..'.    BL       mf_printf ; 0x20b670
;;;220        QC_TEST_PRINT_STRING("Library Version:", sdk_version_get());
        0x0020b822:    a08d        ..      ADR      r0,{pc}+0x236 ; 0x20ba58
        0x0020b824:    f7ffff24    ..$.    BL       mf_printf ; 0x20b670
        0x0020b828:    a085        ..      ADR      r0,{pc}+0x218 ; 0x20ba40
        0x0020b82a:    f7ffff21    ..!.    BL       mf_printf ; 0x20b670
        0x0020b82e:    a08f        ..      ADR      r0,{pc}+0x23e ; 0x20ba6c
        0x0020b830:    f7ffff1e    ....    BL       mf_printf ; 0x20b670
        0x0020b834:    a087        ..      ADR      r0,{pc}+0x220 ; 0x20ba54
        0x0020b836:    f7ffff1b    ....    BL       mf_printf ; 0x20b670
;;;221        QC_TEST_PRINT_STRING("APP Version:", APP_VERSION_STR);
        0x0020b83a:    a091        ..      ADR      r0,{pc}+0x246 ; 0x20ba80
        0x0020b83c:    f7ffff18    ....    BL       mf_printf ; 0x20b670
        0x0020b840:    a07f        ..      ADR      r0,{pc}+0x200 ; 0x20ba40
        0x0020b842:    f7ffff15    ....    BL       mf_printf ; 0x20b670
        0x0020b846:    a092        ..      ADR      r0,{pc}+0x24a ; 0x20ba90
        0x0020b848:    f7ffff12    ....    BL       mf_printf ; 0x20b670
        0x0020b84c:    a081        ..      ADR      r0,{pc}+0x208 ; 0x20ba54
        0x0020b84e:    f7ffff0f    ....    BL       mf_printf ; 0x20b670
;;;222    
;;;223        _qc_get_mac_addr(mac);
        0x0020b852:    a924        $.      ADD      r1,sp,#0x90
        0x0020b854:    f44f7000    O..p    MOV      r0,#0x200
        0x0020b858:    f640fbed    @...    BL       gap_get_param ; 0x4c036
;;;224        sprintf(str, MAC_STR_FORMAT, mac[5], mac[4], mac[3], mac[2], mac[1], mac[0]);
        0x0020b85c:    f89d0093    ....    LDRB     r0,[sp,#0x93]
        0x0020b860:    f89d3090    ...0    LDRB     r3,[sp,#0x90]
        0x0020b864:    f89d2091    ...     LDRB     r2,[sp,#0x91]
        0x0020b868:    f89d1092    ....    LDRB     r1,[sp,#0x92]
        0x0020b86c:    e88d000f    ....    STM      sp,{r0-r3}
        0x0020b870:    f89d3094    ...0    LDRB     r3,[sp,#0x94]
        0x0020b874:    f89d2095    ...     LDRB     r2,[sp,#0x95]
        0x0020b878:    a188        ..      ADR      r1,{pc}+0x224 ; 0x20ba9c
        0x0020b87a:    a804        ..      ADD      r0,sp,#0x10
        0x0020b87c:    f010fdde    ....    BL       __2sprintf ; 0x21c43c
;;;225        QC_TEST_PRINT_STRING("MAC:", str);
        0x0020b880:    a08e        ..      ADR      r0,{pc}+0x23c ; 0x20babc
        0x0020b882:    f7fffef5    ....    BL       mf_printf ; 0x20b670
        0x0020b886:    a06e        n.      ADR      r0,{pc}+0x1ba ; 0x20ba40
        0x0020b888:    f7fffef2    ....    BL       mf_printf ; 0x20b670
        0x0020b88c:    a804        ..      ADD      r0,sp,#0x10
        0x0020b88e:    f7fffeef    ....    BL       mf_printf ; 0x20b670
        0x0020b892:    a070        p.      ADR      r0,{pc}+0x1c2 ; 0x20ba54
        0x0020b894:    f7fffeec    ....    BL       mf_printf ; 0x20b670
;;;226        QC_TEST_PRINT_STRING("Local Bluetooth Address:", str);
        0x0020b898:    a08a        ..      ADR      r0,{pc}+0x22c ; 0x20bac4
        0x0020b89a:    f7fffee9    ....    BL       mf_printf ; 0x20b670
        0x0020b89e:    a068        h.      ADR      r0,{pc}+0x1a2 ; 0x20ba40
        0x0020b8a0:    f7fffee6    ....    BL       mf_printf ; 0x20b670
        0x0020b8a4:    a804        ..      ADD      r0,sp,#0x10
        0x0020b8a6:    f7fffee3    ....    BL       mf_printf ; 0x20b670
        0x0020b8aa:    a06a        j.      ADR      r0,{pc}+0x1aa ; 0x20ba54
        0x0020b8ac:    f7fffee0    ....    BL       mf_printf ; 0x20b670
        0x0020b8b0:    f646fde0    F...    BL       le_scan_start ; 0x52474
;;;227    
;;;228        _qc_ble_scan_start();
;;;229        os_delay(1000);
        0x0020b8b4:    f44f707a    O.zp    MOV      r0,#0x3e8
        0x0020b8b8:    f61aff5a    ..Z.    BL       os_delay ; 0x26770
        0x0020b8bc:    f646fe09    F...    BL       le_scan_stop ; 0x524d2
;;;230        _qc_ble_scan_stop();
;;;231    
;;;232        os_task_delete(mxchp_qc_task);
        0x0020b8c0:    4840        @H      LDR      r0,[pc,#256] ; [0x20b9c4] = 0x20d214
        0x0020b8c2:    380c        .8      SUBS     r0,r0,#0xc
        0x0020b8c4:    6840        @h      LDR      r0,[r0,#4]
        0x0020b8c6:    f61bf8a6    ....    BL       os_task_delete ; 0x26a16
;;;233    }
        0x0020b8ca:    b027        '.      ADD      sp,sp,#0x9c
        0x0020b8cc:    bd00        ..      POP      {pc}
    mxchip_qc_init
        0x0020b8ce:    b51c        ..      PUSH     {r2-r4,lr}
;;;234    
;;;235    static void _qc_init(void)
;;;236    {
;;;237        RCC_PeriphClockCmd(APBPeriph_GPIO, APBPeriph_GPIO_CLOCK, ENABLE);
;;;238        Pinmux_Config(MXCHIP_QC_CHECK_PIN, DWGPIO);
;;;239        Pinmux_Config(MXCHIP_ATE_CHECK_PIN, DWGPIO);
;;;240        Pad_Config(MXCHIP_QC_CHECK_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;241        Pad_Config(MXCHIP_ATE_CHECK_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;242        GPIO_InitTypeDef qc_pin_param;
;;;243        GPIO_StructInit(&qc_pin_param);
;;;244        qc_pin_param.GPIO_Pin = GPIO_GetPin(MXCHIP_QC_CHECK_PIN) | GPIO_GetPin(MXCHIP_ATE_CHECK_PIN);
;;;245        qc_pin_param.GPIO_Mode = GPIO_Mode_IN;
;;;246        GPIO_Init(&qc_pin_param);
;;;247    }
;;;248    
;;;249    static uint8_t _qc_check(void)
;;;250    {
;;;251        _qc_init();
        0x0020b8d0:    f000f842    ..B.    BL       _qc_init ; 0x20b958
;;;252        if (GPIO_ReadInputDataBit(GPIO_GetPin(MXCHIP_QC_CHECK_PIN)) == 0 && GPIO_ReadInputDataBit(GPIO_GetPin(MXCHIP_ATE_CHECK_PIN)) != 0)
        0x0020b8d4:    2001        .       MOVS     r0,#1
        0x0020b8d6:    f010fc3e    ..>.    BL       GPIO_GetPin ; 0x21c156
        0x0020b8da:    f000f835    ..5.    BL       GPIO_ReadInputDataBit ; 0x20b948
        0x0020b8de:    b938        8.      CBNZ     r0,0x20b8f0 ; mxchip_qc_init + 34
        0x0020b8e0:    2000        .       MOVS     r0,#0
        0x0020b8e2:    f010fc38    ..8.    BL       GPIO_GetPin ; 0x21c156
        0x0020b8e6:    f000f82f    ../.    BL       GPIO_ReadInputDataBit ; 0x20b948
        0x0020b8ea:    b108        ..      CBZ      r0,0x20b8f0 ; mxchip_qc_init + 34
;;;253        {
;;;254            return 1;
        0x0020b8ec:    2001        .       MOVS     r0,#1
        0x0020b8ee:    e00c        ..      B        0x20b90a ; mxchip_qc_init + 60
;;;255        }
;;;256        if (GPIO_ReadInputDataBit(GPIO_GetPin(MXCHIP_QC_CHECK_PIN)) == 0 && GPIO_ReadInputDataBit(GPIO_GetPin(MXCHIP_ATE_CHECK_PIN)) == 0)
        0x0020b8f0:    2001        .       MOVS     r0,#1
        0x0020b8f2:    f010fc30    ..0.    BL       GPIO_GetPin ; 0x21c156
        0x0020b8f6:    f000f827    ..'.    BL       GPIO_ReadInputDataBit ; 0x20b948
        0x0020b8fa:    b928        (.      CBNZ     r0,0x20b908 ; mxchip_qc_init + 58
        0x0020b8fc:    2000        .       MOVS     r0,#0
        0x0020b8fe:    f010fc2a    ..*.    BL       GPIO_GetPin ; 0x21c156
        0x0020b902:    f000f821    ..!.    BL       GPIO_ReadInputDataBit ; 0x20b948
        0x0020b906:    b168        h.      CBZ      r0,0x20b924 ; mxchip_qc_init + 86
        0x0020b908:    2000        .       MOVS     r0,#0
        0x0020b90a:    2801        .(      CMP      r0,#1
        0x0020b90c:    d00c        ..      BEQ      0x20b928 ; mxchip_qc_init + 90
        0x0020b90e:    2802        .(      CMP      r0,#2
        0x0020b910:    d119        ..      BNE      0x20b946 ; mxchip_qc_init + 120
;;; ..\..\..\inc\platform\test_mode.h
;;;146        set_hci_mode_flag(true);
        0x0020b912:    2001        .       MOVS     r0,#1
        0x0020b914:    f600ff14    ....    BL       set_hci_mode_flag ; 0xc740
;;;147        WDG_SystemReset(RESET_ALL_EXCEPT_AON, SWITCH_HCI_MODE);
        0x0020b918:    e8bd401c    ...@    POP      {r2-r4,lr}
        0x0020b91c:    21d5        .!      MOVS     r1,#0xd5
        0x0020b91e:    2001        .       MOVS     r0,#1
        0x0020b920:    f7fcba5b    ..[.    B        WDG_SystemReset ; 0x207dda
;;; ..\..\..\src\sample\ble_central\mxchip_qc.c
;;;258            return 2;
        0x0020b924:    2002        .       MOVS     r0,#2
        0x0020b926:    e7f0        ..      B        0x20b90a ; mxchip_qc_init + 60
;;;259        }
;;;260    
;;;261        return 0;
;;;262    }
;;;263    
;;;264    void mxchip_qc_init(void)
;;;265    {
;;;266        uint8_t qc_state = _qc_check();
;;;267        if (qc_state == 1)
;;;268        {
;;;269            os_task_create(&mxchp_qc_task, "qc", _mxchip_qc_test, 0, 2048,
        0x0020b928:    2101        .!      MOVS     r1,#1
        0x0020b92a:    02c8        ..      LSLS     r0,r1,#11
        0x0020b92c:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x0020b930:    4824        $H      LDR      r0,[pc,#144] ; [0x20b9c4] = 0x20d214
        0x0020b932:    2300        .#      MOVS     r3,#0
        0x0020b934:    4a6a        jJ      LDR      r2,[pc,#424] ; [0x20bae0] = 0x20b7eb
        0x0020b936:    a16b        k.      ADR      r1,{pc}+0x1ae ; 0x20bae4
        0x0020b938:    3808        .8      SUBS     r0,r0,#8
        0x0020b93a:    f61bf849    ..I.    BL       os_task_create ; 0x269d0
;;;270                           APP_TASK_PRIORITY);
;;;271    
;;;272            os_sched_start();
        0x0020b93e:    e8bd401c    ...@    POP      {r2-r4,lr}
        0x0020b942:    f61abf3e    ..>.    B        os_sched_start ; 0x267c2
;;;273        }
;;;274        else if (qc_state == 2)
;;;275        {
;;;276            switch_to_hci_mode();
;;;277        }
;;;278        else
;;;279        {
;;;280            ;
;;;281        }
;;;282    }
        0x0020b946:    bd1c        ..      POP      {r2-r4,pc}
    GPIO_ReadInputDataBit
;;; ..\..\..\inc\peripheral\rtl876x_gpio.h
;;;391        if (GPIO->DATAIN & GPIO_Pin)
        0x0020b948:    4a67        gJ      LDR      r2,[pc,#412] ; [0x20bae8] = 0x40001000
;;; ..\..\..\inc\peripheral\rtl876x_gpio.h (385)
        0x0020b94a:    4601        .F      MOV      r1,r0
        0x0020b94c:    2000        .       MOVS     r0,#0
        0x0020b94e:    6d12        .m      LDR      r2,[r2,#0x50]
        0x0020b950:    420a        .B      TST      r2,r1
        0x0020b952:    d000        ..      BEQ      0x20b956 ; GPIO_ReadInputDataBit + 14
;;;386        uint8_t bitstatus = RESET;
;;;387    
;;;388        /* Check the parameters */
;;;389        assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;390    
;;;391        if (GPIO->DATAIN & GPIO_Pin)
;;;392        {
;;;393            bitstatus = (uint8_t)SET;
        0x0020b954:    2001        .       MOVS     r0,#1
;;;394        }
;;;395    
;;;396        return bitstatus;
;;;397    }
        0x0020b956:    4770        pG      BX       lr
    _qc_init
;;; ..\..\..\src\sample\ble_central\mxchip_qc.c
;;;236    {
        0x0020b958:    b530        0.      PUSH     {r4,r5,lr}
        0x0020b95a:    b087        ..      SUB      sp,sp,#0x1c
;;;237        RCC_PeriphClockCmd(APBPeriph_GPIO, APBPeriph_GPIO_CLOCK, ENABLE);
        0x0020b95c:    2201        ."      MOVS     r2,#1
        0x0020b95e:    f04f5104    O..Q    MOV      r1,#0x21000000
        0x0020b962:    4862        bH      LDR      r0,[pc,#392] ; [0x20baec] = 0xc000100
        0x0020b964:    f7fcfab4    ....    BL       RCC_PeriphClockCmd ; 0x207ed0
;;;238        Pinmux_Config(MXCHIP_QC_CHECK_PIN, DWGPIO);
        0x0020b968:    215a        Z!      MOVS     r1,#0x5a
        0x0020b96a:    2001        .       MOVS     r0,#1
        0x0020b96c:    f605fd02    ....    BL       Pinmux_Config ; 0x11374
;;;239        Pinmux_Config(MXCHIP_ATE_CHECK_PIN, DWGPIO);
        0x0020b970:    215a        Z!      MOVS     r1,#0x5a
        0x0020b972:    2000        .       MOVS     r0,#0
        0x0020b974:    f605fcfe    ....    BL       Pinmux_Config ; 0x11374
;;;240        Pad_Config(MXCHIP_QC_CHECK_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0020b978:    2301        .#      MOVS     r3,#1
        0x0020b97a:    2400        .$      MOVS     r4,#0
        0x0020b97c:    9400        ..      STR      r4,[sp,#0]
        0x0020b97e:    461a        .F      MOV      r2,r3
        0x0020b980:    4619        .F      MOV      r1,r3
        0x0020b982:    4618        .F      MOV      r0,r3
        0x0020b984:    9401        ..      STR      r4,[sp,#4]
        0x0020b986:    f605fd29    ..).    BL       Pad_Config ; 0x113dc
;;;241        Pad_Config(MXCHIP_ATE_CHECK_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0020b98a:    2301        .#      MOVS     r3,#1
        0x0020b98c:    9400        ..      STR      r4,[sp,#0]
        0x0020b98e:    461a        .F      MOV      r2,r3
        0x0020b990:    4619        .F      MOV      r1,r3
        0x0020b992:    2000        .       MOVS     r0,#0
        0x0020b994:    9401        ..      STR      r4,[sp,#4]
        0x0020b996:    f605fd21    ..!.    BL       Pad_Config ; 0x113dc
;;;242        GPIO_InitTypeDef qc_pin_param;
;;;243        GPIO_StructInit(&qc_pin_param);
        0x0020b99a:    a802        ..      ADD      r0,sp,#8
        0x0020b99c:    f010fbb9    ....    BL       GPIO_StructInit ; 0x21c112
;;;244        qc_pin_param.GPIO_Pin = GPIO_GetPin(MXCHIP_QC_CHECK_PIN) | GPIO_GetPin(MXCHIP_ATE_CHECK_PIN);
        0x0020b9a0:    2001        .       MOVS     r0,#1
        0x0020b9a2:    f010fbd8    ....    BL       GPIO_GetPin ; 0x21c156
        0x0020b9a6:    4605        .F      MOV      r5,r0
        0x0020b9a8:    2000        .       MOVS     r0,#0
        0x0020b9aa:    f010fbd4    ....    BL       GPIO_GetPin ; 0x21c156
        0x0020b9ae:    4305        .C      ORRS     r5,r5,r0
;;;245        qc_pin_param.GPIO_Mode = GPIO_Mode_IN;
        0x0020b9b0:    9502        ..      STR      r5,[sp,#8]
        0x0020b9b2:    f88d400c    ...@    STRB     r4,[sp,#0xc]
;;;246        GPIO_Init(&qc_pin_param);
        0x0020b9b6:    a802        ..      ADD      r0,sp,#8
        0x0020b9b8:    f010fb4c    ..L.    BL       GPIO_Init ; 0x21c054
;;;247    }
        0x0020b9bc:    b007        ..      ADD      sp,sp,#0x1c
        0x0020b9be:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x0020b9c0:    0021ca42    B.!.    DCD    2214466
        0x0020b9c4:    0020d214    .. .    DCD    2150932
        0x0020b9c8:    615f6371    qc_a    DCD    1633641329
        0x0020b9cc:    00007070    pp..    DCD    28784
        0x0020b9d0:    40012000    . .@    DCD    1073815552
        0x0020b9d4:    40000001    ...@    DCD    1073741825
        0x0020b9d8:    08000001    ....    DCD    134217729
        0x0020b9dc:    52444441    ADDR    DCD    1380205633
        0x0020b9e0:    3025203a    : %0    DCD    807739450
        0x0020b9e4:    253a5832    2X:%    DCD    624580658
        0x0020b9e8:    3a583230    02X:    DCD    978858544
        0x0020b9ec:    58323025    %02X    DCD    1479684133
        0x0020b9f0:    3230253a    :%02    DCD    842016058
        0x0020b9f4:    30253a58    X:%0    DCD    807746136
        0x0020b9f8:    253a5832    2X:%    DCD    624580658
        0x0020b9fc:    2c583230    02X,    DCD    743977520
        0x0020ba00:    53535220     RSS    DCD    1397969440
        0x0020ba04:    25203a49    I: %    DCD    622869065
        0x0020ba08:    000a0d64    d...    DCD    658788
        0x0020ba0c:    3d3d3d3d    ====    DCD    1027423549
        0x0020ba10:    43584d20     MXC    DCD    1129860384
        0x0020ba14:    20504948    HIP     DCD    542132552
        0x0020ba18:    756e614d    Manu    DCD    1970168141
        0x0020ba1c:    74636166    fact    DCD    1952670054
        0x0020ba20:    20657275    ure     DCD    543519349
        0x0020ba24:    74736554    Test    DCD    1953719636
        0x0020ba28:    3d3d3d20     ===    DCD    1027423520
        0x0020ba2c:    000a0d3d    =...    DCD    658749
        0x0020ba30:    69726553    Seri    DCD    1769104723
        0x0020ba34:    4e206c61    al N    DCD    1310747745
        0x0020ba38:    65626d75    umbe    DCD    1700949365
        0x0020ba3c:    00003a72    r:..    DCD    14962
        0x0020ba40:    00000020     ...    DCD    32
        0x0020ba44:    30363630    0660    DCD    808859184
        0x0020ba48:    3046582e    .XF0    DCD    809916462
        0x0020ba4c:    594c2e31    1.LY    DCD    1498164785
        0x0020ba50:    00003130    01..    DCD    12592
        0x0020ba54:    00000a0d    ....    DCD    2573
        0x0020ba58:    7262694c    Libr    DCD    1919052108
        0x0020ba5c:    20797261    ary     DCD    544830049
        0x0020ba60:    73726556    Vers    DCD    1936876886
        0x0020ba64:    3a6e6f69    ion:    DCD    980316009
        0x0020ba68:    00000000    ....    DCD    0
        0x0020ba6c:    32656542    Bee2    DCD    845505858
        0x0020ba70:    4b44535f    _SDK    DCD    1262768991
        0x0020ba74:    2e31765f    _v1.    DCD    774993503
        0x0020ba78:    2e322e30    0.2.    DCD    775040560
        0x0020ba7c:    00000030    0...    DCD    48
        0x0020ba80:    20505041    APP     DCD    542134337
        0x0020ba84:    73726556    Vers    DCD    1936876886
        0x0020ba88:    3a6e6f69    ion:    DCD    980316009
        0x0020ba8c:    00000000    ....    DCD    0
        0x0020ba90:    5f505041    APP_    DCD    1599098945
        0x0020ba94:    302e3176    v1.0    DCD    808333686
        0x0020ba98:    0000312e    .1..    DCD    12590
        0x0020ba9c:    58323025    %02X    DCD    1479684133
        0x0020baa0:    3230252d    -%02    DCD    842016045
        0x0020baa4:    30252d58    X-%0    DCD    807742808
        0x0020baa8:    252d5832    2X-%    DCD    623728690
        0x0020baac:    2d583230    02X-    DCD    760754736
        0x0020bab0:    58323025    %02X    DCD    1479684133
        0x0020bab4:    3230252d    -%02    DCD    842016045
        0x0020bab8:    00000058    X...    DCD    88
        0x0020babc:    3a43414d    MAC:    DCD    977486157
        0x0020bac0:    00000000    ....    DCD    0
        0x0020bac4:    61636f4c    Loca    DCD    1633906508
        0x0020bac8:    6c42206c    l Bl    DCD    1816273004
        0x0020bacc:    6f746575    ueto    DCD    1869899125
        0x0020bad0:    2068746f    oth     DCD    543716463
        0x0020bad4:    72646441    Addr    DCD    1919181889
        0x0020bad8:    3a737365    ess:    DCD    980644709
        0x0020badc:    00000000    ....    DCD    0
        0x0020bae0:    0020b7eb    .. .    DCD    2144235
        0x0020bae4:    00006371    qc..    DCD    25457
        0x0020bae8:    40001000    ...@    DCD    1073745920
        0x0020baec:    0c000100    ....    DCD    201326848
    $t
    .text
    gap_lib_handle_btif_msg
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (31)
        0x0020baf0:    b510        ..      PUSH     {r4,lr}
        0x0020baf2:    2201        ."      MOVS     r2,#1
        0x0020baf4:    700a        .p      STRB     r2,[r1,#0]
        0x0020baf6:    8841        A.      LDRH     r1,[r0,#2]
        0x0020baf8:    2400        .$      MOVS     r4,#0
        0x0020bafa:    290e        .)      CMP      r1,#0xe
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (31)
        0x0020bafc:    d004        ..      BEQ      0x20bb08 ; gap_lib_handle_btif_msg + 24
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (35)
        0x0020bafe:    290f        .)      CMP      r1,#0xf
        0x0020bb00:    d00b        ..      BEQ      0x20bb1a ; gap_lib_handle_btif_msg + 42
        0x0020bb02:    2922        ")      CMP      r1,#0x22
        0x0020bb04:    d10c        ..      BNE      0x20bb20 ; gap_lib_handle_btif_msg + 48
        0x0020bb06:    e003        ..      B        0x20bb10 ; gap_lib_handle_btif_msg + 32
        0x0020bb08:    1d00        ..      ADDS     r0,r0,#4
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (39)
        0x0020bb0a:    f000f85a    ..Z.    BL       le_handle_vendor_cmd_rsp ; 0x20bbc2
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (40)
        0x0020bb0e:    e007        ..      B        0x20bb20 ; gap_lib_handle_btif_msg + 48
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (44)
        0x0020bb10:    8880        ..      LDRH     r0,[r0,#4]
        0x0020bb12:    f010fbaa    ....    BL       le_handle_sw_reset_rsp ; 0x21c26a
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (45)
        0x0020bb16:    2401        .$      MOVS     r4,#1
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (46)
        0x0020bb18:    e002        ..      B        0x20bb20 ; gap_lib_handle_btif_msg + 48
        0x0020bb1a:    1d00        ..      ADDS     r0,r0,#4
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (109)
        0x0020bb1c:    f000f87d    ..}.    BL       le_handle_vendor_evt_info ; 0x20bc1a
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (117)
        0x0020bb20:    4620         F      MOV      r0,r4
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (118)
        0x0020bb22:    bd10        ..      POP      {r4,pc}
    gap_lib_init
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (121)
        0x0020bb24:    b530        0.      PUSH     {r4,r5,lr}
        0x0020bb26:    b087        ..      SUB      sp,sp,#0x1c
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (122)
        0x0020bb28:    2000        .       MOVS     r0,#0
        0x0020bb2a:    9005        ..      STR      r0,[sp,#0x14]
        0x0020bb2c:    2401        .$      MOVS     r4,#1
        0x0020bb2e:    9006        ..      STR      r0,[sp,#0x18]
        0x0020bb30:    e9cd4000    ...@    STRD     r4,r0,[sp,#0]
        0x0020bb34:    4d0f        .M      LDR      r5,[pc,#60] ; [0x20bb74] = 0x21103500
        0x0020bb36:    9003        ..      STR      r0,[sp,#0xc]
        0x0020bb38:    9004        ..      STR      r0,[sp,#0x10]
        0x0020bb3a:    9002        ..      STR      r0,[sp,#8]
        0x0020bb3c:    230d        .#      MOVS     r3,#0xd
        0x0020bb3e:    2208        ."      MOVS     r2,#8
        0x0020bb40:    490b        .I      LDR      r1,[pc,#44] ; [0x20bb70] = 0x8802528
        0x0020bb42:    4628        (F      MOV      r0,r5
        0x0020bb44:    f5fbff8b    ....    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (126)
        0x0020bb48:    4909        .I      LDR      r1,[pc,#36] ; [0x20bb70] = 0x8802528
        0x0020bb4a:    9401        ..      STR      r4,[sp,#4]
        0x0020bb4c:    9402        ..      STR      r4,[sp,#8]
        0x0020bb4e:    9403        ..      STR      r4,[sp,#0xc]
        0x0020bb50:    9404        ..      STR      r4,[sp,#0x10]
        0x0020bb52:    2300        .#      MOVS     r3,#0
        0x0020bb54:    2206        ."      MOVS     r2,#6
        0x0020bb56:    31f0        .1      ADDS     r1,r1,#0xf0
        0x0020bb58:    4628        (F      MOV      r0,r5
        0x0020bb5a:    9400        ..      STR      r4,[sp,#0]
        0x0020bb5c:    f5fbff7f    ....    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (129)
        0x0020bb60:    f2af0073    ..s.    ADR      r0,{pc}-0x6f ; 0x20baf1
        0x0020bb64:    b007        ..      ADD      sp,sp,#0x1c
        0x0020bb66:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x0020bb6a:    f640b951    @.Q.    B        gap_register_extend_cb ; 0x4be10
    $d
        0x0020bb6e:    0000        ..      DCW    0
        0x0020bb70:    08802528    (%..    DCD    142615848
        0x0020bb74:    21103500    .5.!    DCD    554710272
    $t
    .text
    gap_set_lps_bootup_active_time
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (51)
        0x0020bb78:    b508        ..      PUSH     {r3,lr}
        0x0020bb7a:    1ec1        ..      SUBS     r1,r0,#3
        0x0020bb7c:    f24072fe    @..r    MOV      r2,#0x7fe
        0x0020bb80:    4291        .B      CMP      r1,r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (51)
        0x0020bb82:    d301        ..      BCC      0x20bb88 ; gap_set_lps_bootup_active_time + 16
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (56)
        0x0020bb84:    2000        .       MOVS     r0,#0
        0x0020bb86:    bd08        ..      POP      {r3,pc}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (58)
        0x0020bb88:    2105        .!      MOVS     r1,#5
        0x0020bb8a:    f88d1000    ....    STRB     r1,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (59)
        0x0020bb8e:    f88d0001    ....    STRB     r0,[sp,#1]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (60)
        0x0020bb92:    0a00        ..      LSRS     r0,r0,#8
        0x0020bb94:    f88d0002    ....    STRB     r0,[sp,#2]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (62)
        0x0020bb98:    466a        jF      MOV      r2,sp
        0x0020bb9a:    2103        .!      MOVS     r1,#3
        0x0020bb9c:    f64f406e    O.n@    MOV      r0,#0xfc6e
        0x0020bba0:    f615fca4    ....    BL       btif_vendor_cmd_req ; 0x214ec
        0x0020bba4:    2800        .(      CMP      r0,#0
        0x0020bba6:    d0ee        ..      BEQ      0x20bb86 ; gap_set_lps_bootup_active_time + 14
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (64)
        0x0020bba8:    2001        .       MOVS     r0,#1
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (67)
        0x0020bbaa:    bd08        ..      POP      {r3,pc}
    lps_get_wakeup_time
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (70)
        0x0020bbac:    b530        0.      PUSH     {r4,r5,lr}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (71)
        0x0020bbae:    4b33        3K      LDR      r3,[pc,#204] ; [0x20bc7c] = 0x201b1c
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (72)
        0x0020bbb0:    681d        .h      LDR      r5,[r3,#0]
        0x0020bbb2:    1d1b        ..      ADDS     r3,r3,#4
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (73)
        0x0020bbb4:    681c        .h      LDR      r4,[r3,#0]
        0x0020bbb6:    1d1b        ..      ADDS     r3,r3,#4
        0x0020bbb8:    681b        .h      LDR      r3,[r3,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (75)
        0x0020bbba:    6005        .`      STR      r5,[r0,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (76)
        0x0020bbbc:    600c        .`      STR      r4,[r1,#0]
        0x0020bbbe:    6013        .`      STR      r3,[r2,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (77)
        0x0020bbc0:    bd30        0.      POP      {r4,r5,pc}
    le_handle_vendor_cmd_rsp
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (177)
        0x0020bbc2:    b538        8.      PUSH     {r3-r5,lr}
        0x0020bbc4:    4604        .F      MOV      r4,r0
        0x0020bbc6:    8800        ..      LDRH     r0,[r0,#0]
        0x0020bbc8:    f64f456e    O.nE    MOV      r5,#0xfc6e
        0x0020bbcc:    42a8        .B      CMP      r0,r5
        0x0020bbce:    d108        ..      BNE      0x20bbe2 ; le_handle_vendor_cmd_rsp + 32
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (267)
        0x0020bbd0:    8860        `.      LDRH     r0,[r4,#2]
        0x0020bbd2:    f8ad0000    ....    STRH     r0,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (268)
        0x0020bbd6:    482a        *H      LDR      r0,[pc,#168] ; [0x20bc80] = 0x202e48
        0x0020bbd8:    6802        .h      LDR      r2,[r0,#0]
        0x0020bbda:    b112        ..      CBZ      r2,0x20bbe2 ; le_handle_vendor_cmd_rsp + 32
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (270)
        0x0020bbdc:    4669        iF      MOV      r1,sp
        0x0020bbde:    20a6        .       MOVS     r0,#0xa6
        0x0020bbe0:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (276)
        0x0020bbe2:    8820         .      LDRH     r0,[r4,#0]
        0x0020bbe4:    f5a0417d    ..}A    SUB      r1,r0,#0xfd00
        0x0020bbe8:    3980        .9      SUBS     r1,r1,#0x80
        0x0020bbea:    d00d        ..      BEQ      0x20bc08 ; le_handle_vendor_cmd_rsp + 70
        0x0020bbec:    1e49        I.      SUBS     r1,r1,#1
        0x0020bbee:    d00b        ..      BEQ      0x20bc08 ; le_handle_vendor_cmd_rsp + 70
        0x0020bbf0:    1e49        I.      SUBS     r1,r1,#1
        0x0020bbf2:    d009        ..      BEQ      0x20bc08 ; le_handle_vendor_cmd_rsp + 70
        0x0020bbf4:    42a8        .B      CMP      r0,r5
        0x0020bbf6:    d007        ..      BEQ      0x20bc08 ; le_handle_vendor_cmd_rsp + 70
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (279)
        0x0020bbf8:    4822        "H      LDR      r0,[pc,#136] ; [0x20bc84] = 0x202df4
        0x0020bbfa:    6802        .h      LDR      r2,[r0,#0]
        0x0020bbfc:    2a00        .*      CMP      r2,#0
        0x0020bbfe:    d003        ..      BEQ      0x20bc08 ; le_handle_vendor_cmd_rsp + 70
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (282)
        0x0020bc00:    2003        .       MOVS     r0,#3
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (284)
        0x0020bc02:    4669        iF      MOV      r1,sp
        0x0020bc04:    9400        ..      STR      r4,[sp,#0]
        0x0020bc06:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (287)
        0x0020bc08:    bd38        8.      POP      {r3-r5,pc}
    gap_vendor_cmd_req
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (291)
        0x0020bc0a:    b510        ..      PUSH     {r4,lr}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (292)
        0x0020bc0c:    f615fc6e    ..n.    BL       btif_vendor_cmd_req ; 0x214ec
        0x0020bc10:    b108        ..      CBZ      r0,0x20bc16 ; gap_vendor_cmd_req + 12
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (294)
        0x0020bc12:    2000        .       MOVS     r0,#0
        0x0020bc14:    bd10        ..      POP      {r4,pc}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (296)
        0x0020bc16:    2007        .       MOVS     r0,#7
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (297)
        0x0020bc18:    bd10        ..      POP      {r4,pc}
    le_handle_vendor_evt_info
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (300)
        0x0020bc1a:    4601        .F      MOV      r1,r0
        0x0020bc1c:    4819        .H      LDR      r0,[pc,#100] ; [0x20bc84] = 0x202df4
        0x0020bc1e:    b508        ..      PUSH     {r3,lr}
        0x0020bc20:    6802        .h      LDR      r2,[r0,#0]
        0x0020bc22:    2a00        .*      CMP      r2,#0
        0x0020bc24:    d003        ..      BEQ      0x20bc2e ; le_handle_vendor_evt_info + 20
        0x0020bc26:    9100        ..      STR      r1,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (304)
        0x0020bc28:    2004        .       MOVS     r0,#4
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (306)
        0x0020bc2a:    4669        iF      MOV      r1,sp
        0x0020bc2c:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (308)
        0x0020bc2e:    bd08        ..      POP      {r3,pc}
    le_vendor_modify_bt_le_fw_policy
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (313)
        0x0020bc30:    b50e        ..      PUSH     {r1-r3,lr}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (316)
        0x0020bc32:    2210        ."      MOVS     r2,#0x10
        0x0020bc34:    f88d2000    ...     STRB     r2,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (317)
        0x0020bc38:    f88d0001    ....    STRB     r0,[sp,#1]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (318)
        0x0020bc3c:    0a02        ..      LSRS     r2,r0,#8
        0x0020bc3e:    f88d2002    ...     STRB     r2,[sp,#2]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (319)
        0x0020bc42:    0c02        ..      LSRS     r2,r0,#16
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (320)
        0x0020bc44:    0e00        ..      LSRS     r0,r0,#24
        0x0020bc46:    f88d0004    ....    STRB     r0,[sp,#4]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (321)
        0x0020bc4a:    f88d1005    ....    STRB     r1,[sp,#5]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (322)
        0x0020bc4e:    0a08        ..      LSRS     r0,r1,#8
        0x0020bc50:    f88d0006    ....    STRB     r0,[sp,#6]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (323)
        0x0020bc54:    0c08        ..      LSRS     r0,r1,#16
        0x0020bc56:    f88d0007    ....    STRB     r0,[sp,#7]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (324)
        0x0020bc5a:    0e08        ..      LSRS     r0,r1,#24
        0x0020bc5c:    f88d2003    ...     STRB     r2,[sp,#3]
        0x0020bc60:    f88d0008    ....    STRB     r0,[sp,#8]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (326)
        0x0020bc64:    466a        jF      MOV      r2,sp
        0x0020bc66:    2109        .!      MOVS     r1,#9
        0x0020bc68:    f64f5080    O..P    MOV      r0,#0xfd80
        0x0020bc6c:    f615fc3e    ..>.    BL       btif_vendor_cmd_req ; 0x214ec
        0x0020bc70:    b108        ..      CBZ      r0,0x20bc76 ; le_vendor_modify_bt_le_fw_policy + 70
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (328)
        0x0020bc72:    2000        .       MOVS     r0,#0
        0x0020bc74:    bd0e        ..      POP      {r1-r3,pc}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (330)
        0x0020bc76:    2007        .       MOVS     r0,#7
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (337)
        0x0020bc78:    bd0e        ..      POP      {r1-r3,pc}
    $d
        0x0020bc7a:    0000        ..      DCW    0
        0x0020bc7c:    00201b1c    .. .    DCD    2104092
        0x0020bc80:    00202e48    H. .    DCD    2109000
        0x0020bc84:    00202df4    .- .    DCD    2108916
    $t
    .text
    _printf_int_hex
    _printf_longlong_hex
        0x0020bc88:    b570        p.      PUSH     {r4-r6,lr}
        0x0020bc8a:    4604        .F      MOV      r4,r0
        0x0020bc8c:    460d        .F      MOV      r5,r1
        0x0020bc8e:    4621        !F      MOV      r1,r4
        0x0020bc90:    6810        .h      LDR      r0,[r2,#0]
        0x0020bc92:    f3af8000    ....    NOP.W    
        0x0020bc96:    8821        !.      LDRH     r1,[r4,#0]
        0x0020bc98:    0509        ..      LSLS     r1,r1,#20
        0x0020bc9a:    d502        ..      BPL      0x20bca2 ; _printf_int_hex + 26
        0x0020bc9c:    4a0f        .J      LDR      r2,[pc,#60] ; [0x20bcdc] = 0x1ca
        0x0020bc9e:    447a        zD      ADD      r2,r2,pc
        0x0020bca0:    e002        ..      B        0x20bca8 ; _printf_int_hex + 32
        0x0020bca2:    4a0e        .J      LDR      r2,[pc,#56] ; [0x20bcdc] = 0x1ca
        0x0020bca4:    447a        zD      ADD      r2,r2,pc
        0x0020bca6:    320e        .2      ADDS     r2,r2,#0xe
        0x0020bca8:    2100        .!      MOVS     r1,#0
        0x0020bcaa:    f1040324    ..$.    ADD      r3,r4,#0x24
        0x0020bcae:    e005        ..      B        0x20bcbc ; _printf_int_hex + 52
        0x0020bcb0:    f000060f    ....    AND      r6,r0,#0xf
        0x0020bcb4:    0900        ..      LSRS     r0,r0,#4
        0x0020bcb6:    5d96        .]      LDRB     r6,[r2,r6]
        0x0020bcb8:    545e        ^T      STRB     r6,[r3,r1]
        0x0020bcba:    1c49        I.      ADDS     r1,r1,#1
        0x0020bcbc:    2800        .(      CMP      r0,#0
        0x0020bcbe:    d1f7        ..      BNE      0x20bcb0 ; _printf_int_hex + 40
        0x0020bcc0:    7820         x      LDRB     r0,[r4,#0]
        0x0020bcc2:    2300        .#      MOVS     r3,#0
        0x0020bcc4:    0700        ..      LSLS     r0,r0,#28
        0x0020bcc6:    d504        ..      BPL      0x20bcd2 ; _printf_int_hex + 74
        0x0020bcc8:    2d70        p-      CMP      r5,#0x70
        0x0020bcca:    d002        ..      BEQ      0x20bcd2 ; _printf_int_hex + 74
        0x0020bccc:    b109        ..      CBZ      r1,0x20bcd2 ; _printf_int_hex + 74
        0x0020bcce:    2302        .#      MOVS     r3,#2
        0x0020bcd0:    3211        .2      ADDS     r2,r2,#0x11
        0x0020bcd2:    4620         F      MOV      r0,r4
        0x0020bcd4:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020bcd8:    f000b820    .. .    B.W      _printf_int_common ; 0x20bd1c
    $d
        0x0020bcdc:    000001ca    ....    DCD    458
    $t
    .text
    srand
        0x0020bce0:    490b        .I      LDR      r1,[pc,#44] ; [0x20bd10] = 0x20d294
        0x0020bce2:    b510        ..      PUSH     {r4,lr}
        0x0020bce4:    f1a1027c    ..|.    SUB      r2,r1,#0x7c
        0x0020bce8:    4c0a        .L      LDR      r4,[pc,#40] ; [0x20bd14] = 0x66d619e1
        0x0020bcea:    e9c21237    ..7.    STRD     r1,r2,[r2,#0xdc]
        0x0020bcee:    2137        7!      MOVS     r1,#0x37
        0x0020bcf0:    e006        ..      B        0x20bd00 ; srand + 32
        0x0020bcf2:    eb004310    ...C    ADD      r3,r0,r0,LSR #16
        0x0020bcf6:    f8423021    B.!0    STR      r3,[r2,r1,LSL #2]
        0x0020bcfa:    4b07        .K      LDR      r3,[pc,#28] ; [0x20bd18] = 0x10dcd
        0x0020bcfc:    fb004003    ...@    MLA      r0,r0,r3,r4
        0x0020bd00:    1e0b        ..      SUBS     r3,r1,#0
        0x0020bd02:    f1a10101    ....    SUB      r1,r1,#1
        0x0020bd06:    dcf4        ..      BGT      0x20bcf2 ; srand + 18
        0x0020bd08:    bd10        ..      POP      {r4,pc}
    _rand_init
        0x0020bd0a:    2001        .       MOVS     r0,#1
        0x0020bd0c:    e7e8        ..      B        srand ; 0x20bce0
    $d
        0x0020bd0e:    0000        ..      DCW    0
        0x0020bd10:    0020d294    .. .    DCD    2151060
        0x0020bd14:    66d619e1    ...f    DCD    1725307361
        0x0020bd18:    00010dcd    ....    DCD    69069
    $t
    .text
    _printf_int_common
        0x0020bd1c:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0020bd20:    460d        .F      MOV      r5,r1
        0x0020bd22:    4699        .F      MOV      r9,r3
        0x0020bd24:    4692        .F      MOV      r10,r2
        0x0020bd26:    4604        .F      MOV      r4,r0
        0x0020bd28:    f1000824    ..$.    ADD      r8,r0,#0x24
        0x0020bd2c:    6801        .h      LDR      r1,[r0,#0]
        0x0020bd2e:    0688        ..      LSLS     r0,r1,#26
        0x0020bd30:    d504        ..      BPL      0x20bd3c ; _printf_int_common + 32
        0x0020bd32:    69e0        .i      LDR      r0,[r4,#0x1c]
        0x0020bd34:    f0210110    !...    BIC      r1,r1,#0x10
        0x0020bd38:    6021        !`      STR      r1,[r4,#0]
        0x0020bd3a:    e000        ..      B        0x20bd3e ; _printf_int_common + 34
        0x0020bd3c:    2001        .       MOVS     r0,#1
        0x0020bd3e:    42a8        .B      CMP      r0,r5
        0x0020bd40:    dd01        ..      BLE      0x20bd46 ; _printf_int_common + 42
        0x0020bd42:    1b47        G.      SUBS     r7,r0,r5
        0x0020bd44:    e000        ..      B        0x20bd48 ; _printf_int_common + 44
        0x0020bd46:    2700        .'      MOVS     r7,#0
        0x0020bd48:    69a1        .i      LDR      r1,[r4,#0x18]
        0x0020bd4a:    197a        z.      ADDS     r2,r7,r5
        0x0020bd4c:    eb020009    ....    ADD      r0,r2,r9
        0x0020bd50:    1a08        ..      SUBS     r0,r1,r0
        0x0020bd52:    61a0        .a      STR      r0,[r4,#0x18]
        0x0020bd54:    7820         x      LDRB     r0,[r4,#0]
        0x0020bd56:    06c0        ..      LSLS     r0,r0,#27
        0x0020bd58:    d402        ..      BMI      0x20bd60 ; _printf_int_common + 68
        0x0020bd5a:    4620         F      MOV      r0,r4
        0x0020bd5c:    f010fb82    ....    BL       _printf_pre_padding ; 0x21c464
        0x0020bd60:    2600        .&      MOVS     r6,#0
        0x0020bd62:    e008        ..      B        0x20bd76 ; _printf_int_common + 90
        0x0020bd64:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0020bd68:    f81a0006    ....    LDRB     r0,[r10,r6]
        0x0020bd6c:    4790        .G      BLX      r2
        0x0020bd6e:    6a20         j      LDR      r0,[r4,#0x20]
        0x0020bd70:    1c40        @.      ADDS     r0,r0,#1
        0x0020bd72:    1c76        v.      ADDS     r6,r6,#1
        0x0020bd74:    6220         b      STR      r0,[r4,#0x20]
        0x0020bd76:    454e        NE      CMP      r6,r9
        0x0020bd78:    dbf4        ..      BLT      0x20bd64 ; _printf_int_common + 72
        0x0020bd7a:    7820         x      LDRB     r0,[r4,#0]
        0x0020bd7c:    06c0        ..      LSLS     r0,r0,#27
        0x0020bd7e:    d50a        ..      BPL      0x20bd96 ; _printf_int_common + 122
        0x0020bd80:    4620         F      MOV      r0,r4
        0x0020bd82:    f010fb6f    ..o.    BL       _printf_pre_padding ; 0x21c464
        0x0020bd86:    e006        ..      B        0x20bd96 ; _printf_int_common + 122
        0x0020bd88:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0020bd8c:    2030        0       MOVS     r0,#0x30
        0x0020bd8e:    4790        .G      BLX      r2
        0x0020bd90:    6a20         j      LDR      r0,[r4,#0x20]
        0x0020bd92:    1c40        @.      ADDS     r0,r0,#1
        0x0020bd94:    6220         b      STR      r0,[r4,#0x20]
        0x0020bd96:    1e38        8.      SUBS     r0,r7,#0
        0x0020bd98:    f1a70701    ....    SUB      r7,r7,#1
        0x0020bd9c:    dcf4        ..      BGT      0x20bd88 ; _printf_int_common + 108
        0x0020bd9e:    e007        ..      B        0x20bdb0 ; _printf_int_common + 148
        0x0020bda0:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0020bda4:    f8180005    ....    LDRB     r0,[r8,r5]
        0x0020bda8:    4790        .G      BLX      r2
        0x0020bdaa:    6a20         j      LDR      r0,[r4,#0x20]
        0x0020bdac:    1c40        @.      ADDS     r0,r0,#1
        0x0020bdae:    6220         b      STR      r0,[r4,#0x20]
        0x0020bdb0:    1e28        (.      SUBS     r0,r5,#0
        0x0020bdb2:    f1a50501    ....    SUB      r5,r5,#1
        0x0020bdb6:    dcf3        ..      BGT      0x20bda0 ; _printf_int_common + 132
        0x0020bdb8:    4620         F      MOV      r0,r4
        0x0020bdba:    f010fb69    ..i.    BL       _printf_post_padding ; 0x21c490
        0x0020bdbe:    7820         x      LDRB     r0,[r4,#0]
        0x0020bdc0:    0600        ..      LSLS     r0,r0,#24
        0x0020bdc2:    d502        ..      BPL      0x20bdca ; _printf_int_common + 174
        0x0020bdc4:    2002        .       MOVS     r0,#2
        0x0020bdc6:    e8bd87f0    ....    POP      {r4-r10,pc}
        0x0020bdca:    2001        .       MOVS     r0,#1
        0x0020bdcc:    e7fb        ..      B        0x20bdc6 ; _printf_int_common + 170
    i._is_digit
    _is_digit
        0x0020bdce:    3830        08      SUBS     r0,r0,#0x30
        0x0020bdd0:    280a        .(      CMP      r0,#0xa
        0x0020bdd2:    d201        ..      BCS      0x20bdd8 ; _is_digit + 10
        0x0020bdd4:    2001        .       MOVS     r0,#1
        0x0020bdd6:    4770        pG      BX       lr
        0x0020bdd8:    2000        .       MOVS     r0,#0
        0x0020bdda:    4770        pG      BX       lr
    x$fpl$fpinit
    $v0
    _fp_init
        0x0020bddc:    f04f7040    O.@p    MOV      r0,#0x3000000
        0x0020bde0:    eee10a10    ....    VMSR     FPSCR,r0
    __fplib_config_fpu_vfp
    __fplib_config_pureend_doubles
        0x0020bde4:    4770        pG      BX       lr
        0x0020bde6:    0000        ..      MOVS     r0,r0
    $d.realdata
    .constdata
    app_cb_table
        0x0020bde8:    0e85d101    ....    DCD    243650817
        0x0020bdec:    00000006    ....    DCD    6
        0x0020bdf0:    00207e55    U~ .    DCD    2129493
        0x0020bdf4:    00000000    ....    DCD    0
        0x0020bdf8:    00000000    ....    DCD    0
        0x0020bdfc:    00000000    ....    DCD    0
        0x0020be00:    00000000    ....    DCD    0
        0x0020be04:    00207e65    e~ .    DCD    2129509
    .constdata
    simp_ble_client_cbs
        0x0020be08:    0020878f    .. .    DCD    2131855
        0x0020be0c:    0020889f    .. .    DCD    2132127
        0x0020be10:    002089bb    .. .    DCD    2132411
        0x0020be14:    00208abd    .. .    DCD    2132669
        0x0020be18:    00208b2b    +. .    DCD    2132779
        0x0020be1c:    00208bc5    .. .    DCD    2132933
    __func__
        0x0020be20:    706d6973    simp    DCD    1886218611
        0x0020be24:    656c625f    _ble    DCD    1701601887
        0x0020be28:    6464615f    _add    DCD    1684300127
        0x0020be2c:    696c635f    _cli    DCD    1768711007
        0x0020be30:    00746e65    ent.    DCD    7630437
    .constdata
    __func__
        0x0020be34:    5f707061    app_    DCD    1601204321
        0x0020be38:    6e69616d    main    DCD    1852399981
        0x0020be3c:    7361745f    _tas    DCD    1935766623
        0x0020be40:    0000006b    k...    DCD    107
    .constdata
        0x0020be44:    5f454c42    BLE_    DCD    1598377026
        0x0020be48:    544e4543    CENT    DCD    1414415683
        0x0020be4c:    004c4152    RAL.    DCD    4997458
        0x0020be50:    00000000    ....    DCD    0
        0x0020be54:    00000000    ....    DCD    0
        0x0020be58:    00000000    ....    DCD    0
        0x0020be5c:    00000000    ....    DCD    0
        0x0020be60:    00000000    ....    DCD    0
        0x0020be64:    00000000    ....    DCD    0
        0x0020be68:    00000000    ....    DCD    0
    .constdata
    uc_hextab
        0x0020be6c:    33323130    0123    DCD    858927408
        0x0020be70:    37363534    4567    DCD    926299444
        0x0020be74:    42413938    89AB    DCD    1111570744
        0x0020be78:    46454443    CDEF    DCD    1178944579
        0x0020be7c:    00583040    @0X.    DCD    5779520
    lc_hextab
        0x0020be80:    33323130    0123    DCD    858927408
        0x0020be84:    37363534    4567    DCD    926299444
        0x0020be88:    62613938    89ab    DCD    1650538808
        0x0020be8c:    66656463    cdef    DCD    1717920867
        0x0020be90:    00783040    @0x.    DCD    7876672
    .conststring
        0x0020be94:    30433249    I2C0    DCD    809710153
        0x0020be98:    00000000    ....    DCD    0
        0x0020be9c:    30495053    SPI0    DCD    810111059
        0x0020bea0:    00000000    ....    DCD    0
        0x0020bea4:    54524155    UART    DCD    1414676821
        0x0020bea8:    00000030    0...    DCD    48
        0x0020beac:    414d4447    GDMA    DCD    1095582791
        0x0020beb0:    68432030    0 Ch    DCD    1749229616
        0x0020beb4:    656e6e61    anne    DCD    1701736033
        0x0020beb8:    0000306c    l0..    DCD    12396
        0x0020bebc:    4f495047    GPIO    DCD    1330204743
        0x0020bec0:    6f72475f    _Gro    DCD    1869760351
        0x0020bec4:    00307075    up0.    DCD    3174517
        0x0020bec8:    31433249    I2C1    DCD    826487369
        0x0020becc:    00000000    ....    DCD    0
        0x0020bed0:    31495053    SPI1    DCD    826888275
        0x0020bed4:    00000000    ....    DCD    0
        0x0020bed8:    54524155    UART    DCD    1414676821
        0x0020bedc:    00000031    1...    DCD    49
        0x0020bee0:    414d4447    GDMA    DCD    1095582791
        0x0020bee4:    68432030    0 Ch    DCD    1749229616
        0x0020bee8:    656e6e61    anne    DCD    1701736033
        0x0020beec:    0000316c    l1..    DCD    12652
        0x0020bef0:    4f495047    GPIO    DCD    1330204743
        0x0020bef4:    6f72475f    _Gro    DCD    1869760351
        0x0020bef8:    00317075    up1.    DCD    3240053
        0x0020befc:    324d4954    TIM2    DCD    843925844
        0x0020bf00:    00000000    ....    DCD    0
        0x0020bf04:    54524155    UART    DCD    1414676821
        0x0020bf08:    00000032    2...    DCD    50
        0x0020bf0c:    414d4447    GDMA    DCD    1095582791
        0x0020bf10:    68432030    0 Ch    DCD    1749229616
        0x0020bf14:    656e6e61    anne    DCD    1701736033
        0x0020bf18:    0000326c    l2..    DCD    12908
        0x0020bf1c:    4f495047    GPIO    DCD    1330204743
        0x0020bf20:    6f72475f    _Gro    DCD    1869760351
        0x0020bf24:    00327075    up2.    DCD    3305589
        0x0020bf28:    334d4954    TIM3    DCD    860703060
        0x0020bf2c:    00000000    ....    DCD    0
        0x0020bf30:    414d4447    GDMA    DCD    1095582791
        0x0020bf34:    68432030    0 Ch    DCD    1749229616
        0x0020bf38:    656e6e61    anne    DCD    1701736033
        0x0020bf3c:    0000336c    l3..    DCD    13164
        0x0020bf40:    4f495047    GPIO    DCD    1330204743
        0x0020bf44:    6f72475f    _Gro    DCD    1869760351
        0x0020bf48:    00337075    up3.    DCD    3371125
        0x0020bf4c:    344d4954    TIM4    DCD    877480276
        0x0020bf50:    00000000    ....    DCD    0
        0x0020bf54:    4f495047    GPIO    DCD    1330204743
        0x0020bf58:    00000034    4...    DCD    52
        0x0020bf5c:    414d4447    GDMA    DCD    1095582791
        0x0020bf60:    68432030    0 Ch    DCD    1749229616
        0x0020bf64:    656e6e61    anne    DCD    1701736033
        0x0020bf68:    0000346c    l4..    DCD    13420
        0x0020bf6c:    354d4954    TIM5    DCD    894257492
        0x0020bf70:    00000000    ....    DCD    0
        0x0020bf74:    4f495047    GPIO    DCD    1330204743
        0x0020bf78:    00000035    5...    DCD    53
        0x0020bf7c:    414d4447    GDMA    DCD    1095582791
        0x0020bf80:    68432030    0 Ch    DCD    1749229616
        0x0020bf84:    656e6e61    anne    DCD    1701736033
        0x0020bf88:    0000356c    l5..    DCD    13676
        0x0020bf8c:    364d4954    TIM6    DCD    911034708
        0x0020bf90:    00000000    ....    DCD    0
        0x0020bf94:    656d6954    Time    DCD    1701669204
        0x0020bf98:    372d3472    r4-7    DCD    925709426
        0x0020bf9c:    00000000    ....    DCD    0
        0x0020bfa0:    374d4954    TIM7    DCD    927811924
        0x0020bfa4:    00000000    ....    DCD    0
        0x0020bfa8:    414d5442    BTMA    DCD    1095586882
        0x0020bfac:    00000043    C...    DCD    67
        0x0020bfb0:    00434441    ADC.    DCD    4408385
        0x0020bfb4:    00435452    RTC.    DCD    4412498
        0x0020bfb8:    00435653    SVC.    DCD    4413011
        0x0020bfbc:    0044434c    LCD.    DCD    4473676
        0x0020bfc0:    00474457    WDG.    DCD    4670551
        0x0020bfc4:    00494d4e    NMI.    DCD    4803918
        0x0020bfc8:    4f43504c    LPCO    DCD    1329811532
        0x0020bfcc:    0000504d    MP..    DCD    20557
        0x0020bfd0:    74696e49    Init    DCD    1953066569
        0x0020bfd4:    536c6169    ialS    DCD    1399611753
        0x0020bfd8:    00000050    P...    DCD    80
        0x0020bfdc:    00005249    IR..    DCD    21065
        0x0020bfe0:    646e6550    Pend    DCD    1684956496
        0x0020bfe4:    00005653    SV..    DCD    22099
        0x0020bfe8:    32495053    SPI2    DCD    843665491
        0x0020bfec:    00000057    W...    DCD    87
        0x0020bff0:    524f5053    SPOR    DCD    1380929619
        0x0020bff4:    52203154    T1 R    DCD    1377841492
        0x0020bff8:    00000058    X...    DCD    88
        0x0020bffc:    30533249    I2S0    DCD    810758729
        0x0020c000:    0058525f    _RX.    DCD    5788255
        0x0020c004:    524f5053    SPOR    DCD    1380929619
        0x0020c008:    54203154    T1 T    DCD    1411395924
        0x0020c00c:    00000058    X...    DCD    88
        0x0020c010:    30533249    I2S0    DCD    810758729
        0x0020c014:    0058545f    _TX.    DCD    5788767
        0x0020c018:    64767352    Rsvd    DCD    1685484370
        0x0020c01c:    00000000    ....    DCD    0
        0x0020c020:    63656451    Qdec    DCD    1667589201
        0x0020c024:    0065646f    ode.    DCD    6644847
        0x0020c028:    4d6d654d    MemM    DCD    1299014989
        0x0020c02c:    67616e61    anag    DCD    1734438497
        0x0020c030:    00000065    e...    DCD    101
        0x0020c034:    5f495053    SPI_    DCD    1598640211
        0x0020c038:    73616c46    Flas    DCD    1935764550
        0x0020c03c:    00000068    h...    DCD    104
        0x0020c040:    54737953    SysT    DCD    1416853843
        0x0020c044:    006b6369    ick.    DCD    7037801
        0x0020c048:    69726550    Peri    DCD    1769104720
        0x0020c04c:    72656870    pher    DCD    1919248496
        0x0020c050:    00006c61    al..    DCD    27745
        0x0020c054:    74737953    Syst    DCD    1953724755
        0x0020c058:    00006d65    em..    DCD    28005
        0x0020c05c:    74616c50    Plat    DCD    1952541776
        0x0020c060:    6d726f66    form    DCD    1836216166
        0x0020c064:    00000000    ....    DCD    0
        0x0020c068:    7379654b    Keys    DCD    1937335627
        0x0020c06c:    006e6163    can.    DCD    7233891
        0x0020c070:    75626544    Debu    DCD    1969382724
        0x0020c074:    6e6f4d67    gMon    DCD    1852788071
        0x0020c078:    00000000    ....    DCD    0
        0x0020c07c:    65736552    Rese    DCD    1702061394
        0x0020c080:    00000074    t...    DCD    116
        0x0020c084:    64726148    Hard    DCD    1685217608
        0x0020c088:    6c756146    Faul    DCD    1819631942
        0x0020c08c:    00000074    t...    DCD    116
        0x0020c090:    67617355    Usag    DCD    1734439765
        0x0020c094:    75614665    eFau    DCD    1969309285
        0x0020c098:    0000746c    lt..    DCD    29804
        0x0020c09c:    46737542    BusF    DCD    1181971778
        0x0020c0a0:    746c7561    ault    DCD    1953264993
        0x0020c0a4:    00000000    ....    DCD    0
        0x0020c0a8:    5f415450    PTA_    DCD    1598116944
        0x0020c0ac:    6c69614d    Mail    DCD    1818845517
        0x0020c0b0:    00786f62    box.    DCD    7892834
    .conststring
        0x0020c0b4:    72617453    Star    DCD    1918989395
        0x0020c0b8:    63732074    t sc    DCD    1668489332
        0x0020c0bc:    0a0d6e61    an..    DCD    168652385
        0x0020c0c0:    20202020            DCD    538976288
        0x0020c0c4:    20202020            DCD    538976288
        0x0020c0c8:    6c69665b    [fil    DCD    1818846811
        0x0020c0cc:    5f726574    ter_    DCD    1601332596
        0x0020c0d0:    696c6f70    poli    DCD    1768714096
        0x0020c0d4:    3a5d7963    cy]:    DCD    979204451
        0x0020c0d8:    282d3020     0-(    DCD    674050080
        0x0020c0dc:    29796e61    any)    DCD    695823969
        0x0020c0e0:    2d31202c    , 1-    DCD    758194220
        0x0020c0e4:    69687728    (whi    DCD    1768453928
        0x0020c0e8:    696c6574    teli    DCD    1768711540
        0x0020c0ec:    2c297473    st),    DCD    740914291
        0x0020c0f0:    282d3220     2-(    DCD    674050592
        0x0020c0f4:    20796e61    any     DCD    544829025
        0x0020c0f8:    29415052    RPA)    DCD    692146258
        0x0020c0fc:    2d33202c    , 3-    DCD    758325292
        0x0020c100:    69687728    (whi    DCD    1768453928
        0x0020c104:    696c6574    teli    DCD    1768711540
        0x0020c108:    52207473    st R    DCD    1377858675
        0x0020c10c:    20294150    PA)     DCD    539574608
        0x0020c110:    20200a0d    ..      DCD    538970637
        0x0020c114:    20202020            DCD    538976288
        0x0020c118:    665b2020      [f    DCD    1717248032
        0x0020c11c:    65746c69    ilte    DCD    1702128745
        0x0020c120:    75645f72    r_du    DCD    1969512306
        0x0020c124:    63696c70    plic    DCD    1667853424
        0x0020c128:    5d657461    ate]    DCD    1566930017
        0x0020c12c:    2d30203a    : 0-    DCD    758128698
        0x0020c130:    73696428    (dis    DCD    1936286760
        0x0020c134:    656c6261    able    DCD    1701601889
        0x0020c138:    31202c29    ), 1    DCD    824192041
        0x0020c13c:    6e65282d    -(en    DCD    1852123181
        0x0020c140:    656c6261    able    DCD    1701601889
        0x0020c144:    0d0a2029    ) ..    DCD    218767401
        0x0020c148:    00000000    ....    DCD    0
        0x0020c14c:    64616552    Read    DCD    1684104530
        0x0020c150:    6d697320     sim    DCD    1835627296
        0x0020c154:    20656c70    ple     DCD    543517808
        0x0020c158:    20656c62    ble     DCD    543517794
        0x0020c15c:    76726573    serv    DCD    1987208563
        0x0020c160:    20656369    ice     DCD    543515497
        0x0020c164:    72616863    char    DCD    1918986339
        0x0020c168:    65746361    acte    DCD    1702126433
        0x0020c16c:    74736972    rist    DCD    1953720690
        0x0020c170:    61206369    ic a    DCD    1629512553
        0x0020c174:    6420646e    nd d    DCD    1679844462
        0x0020c178:    72637365    escr    DCD    1919120229
        0x0020c17c:    6f747069    ipto    DCD    1869901929
        0x0020c180:    61762072    r va    DCD    1635131506
        0x0020c184:    0d65756c    lue.    DCD    224753004
        0x0020c188:    2020200a    .       DCD    538976266
        0x0020c18c:    20202020            DCD    538976288
        0x0020c190:    79745b20     [ty    DCD    2037668640
        0x0020c194:    3a5d6570    pe]:    DCD    979199344
        0x0020c198:    282d3020     0-(    DCD    674050080
        0x0020c19c:    64616572    read    DCD    1684104562
        0x0020c1a0:    29317620     v1)    DCD    691107360
        0x0020c1a4:    2d31202c    , 1-    DCD    758194220
        0x0020c1a8:    20337628    (v3     DCD    540243496
        0x0020c1ac:    64636363    cccd    DCD    1684235107
        0x0020c1b0:    32202c29    ), 2    DCD    840969257
        0x0020c1b4:    3476282d    -(v4    DCD    880158765
        0x0020c1b8:    63636320     ccc    DCD    1667457824
        0x0020c1bc:    0a0d2964    d)..    DCD    168634724
        0x0020c1c0:    20202020            DCD    538976288
        0x0020c1c4:    20202020            DCD    538976288
        0x0020c1c8:    7461705b    [pat    DCD    1952542811
        0x0020c1cc:    6e726574    tern    DCD    1852990836
        0x0020c1d0:    30203a5d    ]: 0    DCD    807418461
        0x0020c1d4:    6572282d    -(re    DCD    1701980205
        0x0020c1d8:    62206461    ad b    DCD    1646290017
        0x0020c1dc:    61682079    y ha    DCD    1634214009
        0x0020c1e0:    656c646e    ndle    DCD    1701602414
        0x0020c1e4:    31202c29    ), 1    DCD    824192041
        0x0020c1e8:    6572282d    -(re    DCD    1701980205
        0x0020c1ec:    62206461    ad b    DCD    1646290017
        0x0020c1f0:    75752079    y uu    DCD    1970610297
        0x0020c1f4:    0d296469    id).    DCD    220816489
        0x0020c1f8:    2020200a    .       DCD    538976266
        0x0020c1fc:    20202020            DCD    538976288
        0x0020c200:    6d617320     sam    DCD    1835103008
        0x0020c204:    3a656c70    ple:    DCD    979725424
        0x0020c208:    6d697320     sim    DCD    1835627296
        0x0020c20c:    61657270    prea    DCD    1634038384
        0x0020c210:    20302064    d 0     DCD    540024932
        0x0020c214:    20302031    1 0     DCD    540024881
        0x0020c218:    00000d0a    ....    DCD    3338
        0x0020c21c:    6e6e6f43    Conn    DCD    1852731203
        0x0020c220:    20746365    ect     DCD    544498533
        0x0020c224:    72206f74    to r    DCD    1914728308
        0x0020c228:    746f6d65    emot    DCD    1953459557
        0x0020c22c:    65642065    e de    DCD    1701060709
        0x0020c230:    65636976    vice    DCD    1701013878
        0x0020c234:    7375203a    : us    DCD    1937055802
        0x0020c238:    64612065    e ad    DCD    1684086885
        0x0020c23c:    73657264    dres    DCD    1936028260
        0x0020c240:    200a0d73    s..     DCD    537529715
        0x0020c244:    20202020            DCD    538976288
        0x0020c248:    5b202020       [    DCD    1528832032
        0x0020c24c:    5d304442    BD0]    DCD    1563444290
        0x0020c250:    44425b20     [BD    DCD    1145199392
        0x0020c254:    5b205d31    1] [    DCD    1528847665
        0x0020c258:    5d324442    BD2]    DCD    1563575362
        0x0020c25c:    44425b20     [BD    DCD    1145199392
        0x0020c260:    5b205d33    3] [    DCD    1528847667
        0x0020c264:    5d344442    BD4]    DCD    1563706434
        0x0020c268:    44425b20     [BD    DCD    1145199392
        0x0020c26c:    203a5d35    5]:     DCD    540695861
        0x0020c270:    6f6d6572    remo    DCD    1869440370
        0x0020c274:    64206574    te d    DCD    1679844724
        0x0020c278:    63697665    evic    DCD    1667855973
        0x0020c27c:    64612065    e ad    DCD    1684086885
        0x0020c280:    73657264    dres    DCD    1936028260
        0x0020c284:    200a0d73    s..     DCD    537529715
        0x0020c288:    20202020            DCD    538976288
        0x0020c28c:    5b202020       [    DCD    1528832032
        0x0020c290:    72646461    addr    DCD    1919181921
        0x0020c294:    7079745f    _typ    DCD    1887007839
        0x0020c298:    203a5d65    e]:     DCD    540695909
        0x0020c29c:    70282d30    0-(p    DCD    1881681200
        0x0020c2a0:    696c6275    ubli    DCD    1768710773
        0x0020c2a4:    202c2963    c),     DCD    539765091
        0x0020c2a8:    72282d31    1-(r    DCD    1915235633
        0x0020c2ac:    6f646e61    ando    DCD    1868852833
        0x0020c2b0:    0a0d296d    m)..    DCD    168634733
        0x0020c2b4:    20202020            DCD    538976288
        0x0020c2b8:    20202020            DCD    538976288
        0x0020c2bc:    706d6173    samp    DCD    1886216563
        0x0020c2c0:    203a656c    le:     DCD    540697964
        0x0020c2c4:    206e6f63    con     DCD    544108387
        0x0020c2c8:    20313178    x11     DCD    540094840
        0x0020c2cc:    20323278    x22     DCD    540160632
        0x0020c2d0:    20333378    x33     DCD    540226424
        0x0020c2d4:    20343478    x44     DCD    540292216
        0x0020c2d8:    20353578    x55     DCD    540358008
        0x0020c2dc:    20363678    x66     DCD    540423800
        0x0020c2e0:    0d0a2030    0 ..    DCD    218767408
        0x0020c2e4:    00000000    ....    DCD    0
        0x0020c2e8:    64616552    Read    DCD    1684104530
        0x0020c2ec:    74616220     bat    DCD    1952539168
        0x0020c2f0:    79726574    tery    DCD    2037540212
        0x0020c2f4:    72657320     ser    DCD    1919251232
        0x0020c2f8:    65636976    vice    DCD    1701013878
        0x0020c2fc:    61686320     cha    DCD    1634231072
        0x0020c300:    74636172    ract    DCD    1952670066
        0x0020c304:    73697265    eris    DCD    1936290405
        0x0020c308:    20636974    tic     DCD    543385972
        0x0020c30c:    20646e61    and     DCD    543452769
        0x0020c310:    63736564    desc    DCD    1668506980
        0x0020c314:    74706972    ript    DCD    1953524082
        0x0020c318:    7620726f    or v    DCD    1981837935
        0x0020c31c:    65756c61    alue    DCD    1702194273
        0x0020c320:    20200a0d    ..      DCD    538970637
        0x0020c324:    20202020            DCD    538976288
        0x0020c328:    745b2020      [t    DCD    1952129056
        0x0020c32c:    5d657079    ype]    DCD    1566929017
        0x0020c330:    2d30203a    : 0-    DCD    758128698
        0x0020c334:    74616228    (bat    DCD    1952539176
        0x0020c338:    79726574    tery    DCD    2037540212
        0x0020c33c:    76656c20     lev    DCD    1986358304
        0x0020c340:    76206c65    el v    DCD    1981836389
        0x0020c344:    65756c61    alue    DCD    1702194273
        0x0020c348:    31202c29    ), 1    DCD    824192041
        0x0020c34c:    6162282d    -(ba    DCD    1633822765
        0x0020c350:    72657474    tter    DCD    1919251572
        0x0020c354:    63632079    y cc    DCD    1667440761
        0x0020c358:    0d296463    cd).    DCD    220816483
        0x0020c35c:    2020200a    .       DCD    538976266
        0x0020c360:    20202020            DCD    538976288
        0x0020c364:    6d617320     sam    DCD    1835103008
        0x0020c368:    3a656c70    ple:    DCD    979725424
        0x0020c36c:    73616220     bas    DCD    1935761952
        0x0020c370:    64616572    read    DCD    1684104562
        0x0020c374:    31203020     0 1    DCD    824193056
        0x0020c378:    000d0a20     ...    DCD    854560
        0x0020c37c:    666e6f43    Conf    DCD    1718513475
        0x0020c380:    62206769    ig b    DCD    1646290793
        0x0020c384:    65747461    atte    DCD    1702130785
        0x0020c388:    73207972    ry s    DCD    1931508082
        0x0020c38c:    69767265    ervi    DCD    1769370213
        0x0020c390:    63206563    ce c    DCD    1663067491
        0x0020c394:    6e65696c    lien    DCD    1852139884
        0x0020c398:    68632074    t ch    DCD    1751326836
        0x0020c39c:    63617261    arac    DCD    1667330657
        0x0020c3a0:    69726574    teri    DCD    1769104756
        0x0020c3a4:    63697473    stic    DCD    1667855475
        0x0020c3a8:    6e6f6320     con    DCD    1852793632
        0x0020c3ac:    75676966    figu    DCD    1969711462
        0x0020c3b0:    69746172    rati    DCD    1769234802
        0x0020c3b4:    64206e6f    on d    DCD    1679847023
        0x0020c3b8:    72637365    escr    DCD    1919120229
        0x0020c3bc:    6f747069    ipto    DCD    1869901929
        0x0020c3c0:    61762072    r va    DCD    1635131506
        0x0020c3c4:    0d65756c    lue.    DCD    224753004
        0x0020c3c8:    2020200a    .       DCD    538976266
        0x0020c3cc:    20202020            DCD    538976288
        0x0020c3d0:    6f6e5b20     [no    DCD    1869503264
        0x0020c3d4:    79666974    tify    DCD    2036754804
        0x0020c3d8:    30203a5d    ]: 0    DCD    807418461
        0x0020c3dc:    6964282d    -(di    DCD    1768171565
        0x0020c3e0:    6c626173    sabl    DCD    1818386803
        0x0020c3e4:    202c2965    e),     DCD    539765093
        0x0020c3e8:    65282d31    1-(e    DCD    1697131825
        0x0020c3ec:    6c62616e    nabl    DCD    1818386798
        0x0020c3f0:    0d0a2965    e)..    DCD    218769765
        0x0020c3f4:    00000000    ....    DCD    0
        0x0020c3f8:    64616552    Read    DCD    1684104530
        0x0020c3fc:    50414720     GAP    DCD    1346455328
        0x0020c400:    72657320     ser    DCD    1919251232
        0x0020c404:    65636976    vice    DCD    1701013878
        0x0020c408:    61686320     cha    DCD    1634231072
        0x0020c40c:    74636172    ract    DCD    1952670066
        0x0020c410:    73697265    eris    DCD    1936290405
        0x0020c414:    20636974    tic     DCD    543385972
        0x0020c418:    756c6176    valu    DCD    1970037110
        0x0020c41c:    200a0d65    e..     DCD    537529701
        0x0020c420:    20202020            DCD    538976288
        0x0020c424:    5b202020       [    DCD    1528832032
        0x0020c428:    65707974    type    DCD    1701869940
        0x0020c42c:    30203a5d    ]: 0    DCD    807418461
        0x0020c430:    6572282d    -(re    DCD    1701980205
        0x0020c434:    64206461    ad d    DCD    1679844449
        0x0020c438:    63697665    evic    DCD    1667855973
        0x0020c43c:    616e2065    e na    DCD    1634607205
        0x0020c440:    2c29656d    me),    DCD    740910445
        0x0020c444:    282d3120     1-(    DCD    674050336
        0x0020c448:    64616572    read    DCD    1684104562
        0x0020c44c:    70706120     app    DCD    1886413088
        0x0020c450:    61726165    eara    DCD    1634885989
        0x0020c454:    2965636e    nce)    DCD    694510446
        0x0020c458:    20200a0d    ..      DCD    538970637
        0x0020c45c:    20202020            DCD    538976288
        0x0020c460:    69732020      si    DCD    1769152544
        0x0020c464:    656c706d    mple    DCD    1701605485
        0x0020c468:    6167203a    : ga    DCD    1634148410
        0x0020c46c:    61657270    prea    DCD    1634038384
        0x0020c470:    20302064    d 0     DCD    540024932
        0x0020c474:    000d0a30    0...    DCD    854576
        0x0020c478:    666e6f43    Conf    DCD    1718513475
        0x0020c47c:    61206769    ig a    DCD    1629513577
        0x0020c480:    65687475    uthe    DCD    1701344373
        0x0020c484:    6369746e    ntic    DCD    1667855470
        0x0020c488:    6f697461    atio    DCD    1869182049
        0x0020c48c:    6f6d206e    n mo    DCD    1869422702
        0x0020c490:    0a0d6564    de..    DCD    168650084
        0x0020c494:    20202020            DCD    538976288
        0x0020c498:    20202020            DCD    538976288
        0x0020c49c:    7475615b    [aut    DCD    1953849691
        0x0020c4a0:    6c665f68    h_fl    DCD    1818648424
        0x0020c4a4:    5d736761    ags]    DCD    1567844193
        0x0020c4a8:    7475613a    :aut    DCD    1953849658
        0x0020c4ac:    746e6568    hent    DCD    1953391976
        0x0020c4b0:    74616369    icat    DCD    1952539497
        0x0020c4b4:    206e6f69    ion     DCD    544108393
        0x0020c4b8:    20716572    req     DCD    544302450
        0x0020c4bc:    20746962    bit     DCD    544500066
        0x0020c4c0:    6c656966    fiel    DCD    1818585446
        0x0020c4c4:    62203a64    d: b    DCD    1646279268
        0x0020c4c8:    2d307469    it0-    DCD    758150249
        0x0020c4cc:    6e6f6228    (bon    DCD    1852793384
        0x0020c4d0:    676e6964    ding    DCD    1735289188
        0x0020c4d4:    62202c29    ), b    DCD    1646275625
        0x0020c4d8:    2d327469    it2-    DCD    758281321
        0x0020c4dc:    54494d28    (MIT    DCD    1414090024
        0x0020c4e0:    202c294d    M),     DCD    539765069
        0x0020c4e4:    33746962    bit3    DCD    863267170
        0x0020c4e8:    4353282d    -(SC    DCD    1129523245
        0x0020c4ec:    200a0d29    )..     DCD    537529641
        0x0020c4f0:    20202020            DCD    538976288
        0x0020c4f4:    5b202020       [    DCD    1528832032
        0x0020c4f8:    635f6f69    io_c    DCD    1667198825
        0x0020c4fc:    3a5d7061    ap]:    DCD    979202145
        0x0020c500:    20746573    set     DCD    544499059
        0x0020c504:    43206f69    io C    DCD    1126199145
        0x0020c508:    62617061    apab    DCD    1650552929
        0x0020c50c:    74696c69    ilit    DCD    1953066089
        0x0020c510:    3a736569    ies:    DCD    980641129
        0x0020c514:    282d3020     0-(    DCD    674050080
        0x0020c518:    70736964    disp    DCD    1886611812
        0x0020c51c:    2079616c    lay     DCD    544825708
        0x0020c520:    796c6e6f    only    DCD    2037149295
        0x0020c524:    31202c29    ), 1    DCD    824192041
        0x0020c528:    6964282d    -(di    DCD    1768171565
        0x0020c52c:    616c7073    spla    DCD    1634496627
        0x0020c530:    65792079    y ye    DCD    1702436985
        0x0020c534:    6f6e2f73    s/no    DCD    1869492083
        0x0020c538:    32202c29    ), 2    DCD    840969257
        0x0020c53c:    656b282d    -(ke    DCD    1701521453
        0x0020c540:    616f6279    yboa    DCD    1634689657
        0x0020c544:    6e206472    rd n    DCD    1847616626
        0x0020c548:    29796c6f    oly)    DCD    695823471
        0x0020c54c:    2d33202c    , 3-    DCD    758325292
        0x0020c550:    206f6e28    (no     DCD    544173608
        0x0020c554:    2c294f49    IO),    DCD    740904777
        0x0020c558:    282d3420     4-(    DCD    674051104
        0x0020c55c:    6279656b    keyb    DCD    1652122987
        0x0020c560:    6472616f    oard    DCD    1685217647
        0x0020c564:    73696420     dis    DCD    1936286752
        0x0020c568:    79616c70    play    DCD    2036427888
        0x0020c56c:    200a0d29    )..     DCD    537529641
        0x0020c570:    20202020            DCD    538976288
        0x0020c574:    5b202020       [    DCD    1528832032
        0x0020c578:    5f636573    sec_    DCD    1600349555
        0x0020c57c:    62616e65    enab    DCD    1650552421
        0x0020c580:    3a5d656c    le]:    DCD    979199340
        0x0020c584:    72617453    Star    DCD    1918989395
        0x0020c588:    6d732074    t sm    DCD    1836261492
        0x0020c58c:    61702070    p pa    DCD    1634738288
        0x0020c590:    6e697269    irin    DCD    1852404329
        0x0020c594:    72702067    g pr    DCD    1919950951
        0x0020c598:    6465636f    oced    DCD    1684366191
        0x0020c59c:    20657275    ure     DCD    543519349
        0x0020c5a0:    6e656877    when    DCD    1852139639
        0x0020c5a4:    6e6f6320     con    DCD    1852793632
        0x0020c5a8:    7463656e    nect    DCD    1952671086
        0x0020c5ac:    203a6465    ed:     DCD    540697701
        0x0020c5b0:    64282d30    0-(d    DCD    1680354608
        0x0020c5b4:    62617369    isab    DCD    1650553705
        0x0020c5b8:    2c29656c    le),    DCD    740910444
        0x0020c5bc:    282d3120     1-(    DCD    674050336
        0x0020c5c0:    62616e65    enab    DCD    1650552421
        0x0020c5c4:    0d29656c    le).    DCD    220816748
        0x0020c5c8:    2020200a    .       DCD    538976266
        0x0020c5cc:    20202020            DCD    538976288
        0x0020c5d0:    6f6f5b20     [oo    DCD    1869568800
        0x0020c5d4:    6e655f62    b_en    DCD    1852137314
        0x0020c5d8:    656c6261    able    DCD    1701601889
        0x0020c5dc:    6e453a5d    ]:En    DCD    1850030685
        0x0020c5e0:    656c6261    able    DCD    1701601889
        0x0020c5e4:    626f6f20     oob    DCD    1651470112
        0x0020c5e8:    616c6620     fla    DCD    1634493984
        0x0020c5ec:    30203a67    g: 0    DCD    807418471
        0x0020c5f0:    6964282d    -(di    DCD    1768171565
        0x0020c5f4:    6c626173    sabl    DCD    1818386803
        0x0020c5f8:    202c2965    e),     DCD    539765093
        0x0020c5fc:    65282d31    1-(e    DCD    1697131825
        0x0020c600:    6c62616e    nabl    DCD    1818386798
        0x0020c604:    0a0d2965    e)..    DCD    168634725
        0x0020c608:    20202020            DCD    538976288
        0x0020c60c:    20202020            DCD    538976288
        0x0020c610:    706d6173    samp    DCD    1886216563
        0x0020c614:    203a656c    le:     DCD    540697964
        0x0020c618:    68747561    auth    DCD    1752462689
        0x0020c61c:    65646f6d    mode    DCD    1701080941
        0x0020c620:    35783020     0x5    DCD    897069088
        0x0020c624:    31203220     2 1    DCD    824193568
        0x0020c628:    0d0a3020     0..    DCD    218771488
        0x0020c62c:    00000000    ....    DCD    0
        0x0020c630:    6e6e6f43    Conn    DCD    1852731203
        0x0020c634:    20746365    ect     DCD    544498533
        0x0020c638:    72206f74    to r    DCD    1914728308
        0x0020c63c:    746f6d65    emot    DCD    1953459557
        0x0020c640:    65642065    e de    DCD    1701060709
        0x0020c644:    65636976    vice    DCD    1701013878
        0x0020c648:    7375203a    : us    DCD    1937055802
        0x0020c64c:    68732065    e sh    DCD    1752375397
        0x0020c650:    6564776f    owde    DCD    1701082991
        0x0020c654:    6f742076    v to    DCD    1869881462
        0x0020c658:    6f687320     sho    DCD    1869116192
        0x0020c65c:    64692077    w id    DCD    1684611191
        0x0020c660:    200a0d78    x..     DCD    537529720
        0x0020c664:    20202020            DCD    538976288
        0x0020c668:    5b202020       [    DCD    1528832032
        0x0020c66c:    5d786469    idx]    DCD    1568171113
        0x0020c670:    7375203a    : us    DCD    1937055802
        0x0020c674:    6d632065    e cm    DCD    1835212901
        0x0020c678:    68732064    d sh    DCD    1752375396
        0x0020c67c:    6564776f    owde    DCD    1701082991
        0x0020c680:    6f742076    v to    DCD    1869881462
        0x0020c684:    6f687320     sho    DCD    1869116192
        0x0020c688:    64692077    w id    DCD    1684611191
        0x0020c68c:    65622078    x be    DCD    1700929656
        0x0020c690:    65726f66    fore    DCD    1701998438
        0x0020c694:    65737520     use    DCD    1702065440
        0x0020c698:    69687420     thi    DCD    1768453152
        0x0020c69c:    6d632073    s cm    DCD    1835212915
        0x0020c6a0:    200a0d64    d..     DCD    537529700
        0x0020c6a4:    20202020            DCD    538976288
        0x0020c6a8:    73202020       s    DCD    1931485216
        0x0020c6ac:    6c706d61    ampl    DCD    1819307361
        0x0020c6b0:    63203a65    e: c    DCD    1663056485
        0x0020c6b4:    65646e6f    onde    DCD    1701080687
        0x0020c6b8:    0a302076    v 0.    DCD    170926198
        0x0020c6bc:    0000000d    ....    DCD    13
        0x0020c6c0:    6320454c    LE c    DCD    1663059276
        0x0020c6c4:    656e6e6f    onne    DCD    1701736047
        0x0020c6c8:    6f697463    ctio    DCD    1869182051
        0x0020c6cc:    6170206e    n pa    DCD    1634738286
        0x0020c6d0:    206d6172    ram     DCD    544039282
        0x0020c6d4:    61647075    upda    DCD    1633972341
        0x0020c6d8:    72206574    te r    DCD    1914725748
        0x0020c6dc:    65757165    eque    DCD    1702195557
        0x0020c6e0:    0a0d7473    st..    DCD    168653939
        0x0020c6e4:    20202020            DCD    538976288
        0x0020c6e8:    20202020            DCD    538976288
        0x0020c6ec:    706d6173    samp    DCD    1886216563
        0x0020c6f0:    203a656c    le:     DCD    540697964
        0x0020c6f4:    756e6f63    conu    DCD    1970171747
        0x0020c6f8:    65726470    pdre    DCD    1701995632
        0x0020c6fc:    20302071    q 0     DCD    540024945
        0x0020c700:    30337830    0x30    DCD    808679472
        0x0020c704:    34783020     0x4    DCD    880291872
        0x0020c708:    20302030    0 0     DCD    540024880
        0x0020c70c:    0a303035    500.    DCD    170930229
        0x0020c710:    0000000d    ....    DCD    13
        0x0020c714:    74697257    Writ    DCD    1953067607
        0x0020c718:    69732065    e si    DCD    1769152613
        0x0020c71c:    656c706d    mple    DCD    1701605485
        0x0020c720:    656c6220     ble    DCD    1701601824
        0x0020c724:    72657320     ser    DCD    1919251232
        0x0020c728:    65636976    vice    DCD    1701013878
        0x0020c72c:    20325620     V2     DCD    540169760
        0x0020c730:    72616863    char    DCD    1918986339
        0x0020c734:    65746361    acte    DCD    1702126433
        0x0020c738:    74736972    rist    DCD    1953720690
        0x0020c73c:    76206369    ic v    DCD    1981834089
        0x0020c740:    65756c61    alue    DCD    1702194273
        0x0020c744:    20200a0d    ..      DCD    538970637
        0x0020c748:    20202020            DCD    538976288
        0x0020c74c:    745b2020      [t    DCD    1952129056
        0x0020c750:    5d657079    ype]    DCD    1566929017
        0x0020c754:    2d31203a    : 1-    DCD    758194234
        0x0020c758:    69727728    (wri    DCD    1769109288
        0x0020c75c:    72206574    te r    DCD    1914725748
        0x0020c760:    65757165    eque    DCD    1702195557
        0x0020c764:    2c297473    st),    DCD    740914291
        0x0020c768:    282d3220     2-(    DCD    674050592
        0x0020c76c:    74697277    writ    DCD    1953067639
        0x0020c770:    6f632065    e co    DCD    1868767333
        0x0020c774:    6e616d6d    mman    DCD    1851878765
        0x0020c778:    0d202964    d) .    DCD    220211556
        0x0020c77c:    2020200a    .       DCD    538976266
        0x0020c780:    20202020            DCD    538976288
        0x0020c784:    656c5b20     [le    DCD    1701600032
        0x0020c788:    203a5d6e    n]:     DCD    540695918
        0x0020c78c:    65707974    type    DCD    1701869940
        0x0020c790:    6c20313d    =1 l    DCD    1814049085
        0x0020c794:    72206e65    en r    DCD    1914728037
        0x0020c798:    65676e61    ange    DCD    1701277281
        0x0020c79c:    322d303a    :0-2    DCD    841822266
        0x0020c7a0:    202c3037    70,     DCD    539766839
        0x0020c7a4:    65707974    type    DCD    1701869940
        0x0020c7a8:    6c20323d    =2 l    DCD    1814049341
        0x0020c7ac:    72206e65    en r    DCD    1914728037
        0x0020c7b0:    65676e61    ange    DCD    1701277281
        0x0020c7b4:    2d30203a    : 0-    DCD    758128698
        0x0020c7b8:    75746d28    (mtu    DCD    1970564392
        0x0020c7bc:    0d29332d    -3).    DCD    220803885
        0x0020c7c0:    2020200a    .       DCD    538976266
        0x0020c7c4:    20202020            DCD    538976288
        0x0020c7c8:    6d617320     sam    DCD    1835103008
        0x0020c7cc:    3a656c70    ple:    DCD    979725424
        0x0020c7d0:    6d697320     sim    DCD    1835627296
        0x0020c7d4:    69727770    pwri    DCD    1769109360
        0x0020c7d8:    32766574    tev2    DCD    846620020
        0x0020c7dc:    31203020     0 1    DCD    824193056
        0x0020c7e0:    0a303120     10.    DCD    170930464
        0x0020c7e4:    0000000d    ....    DCD    13
        0x0020c7e8:    646e6553    Send    DCD    1684956499
        0x0020c7ec:    65737520     use    DCD    1702065440
        0x0020c7f0:    6f632072    r co    DCD    1868767346
        0x0020c7f4:    7269666e    nfir    DCD    1919510126
        0x0020c7f8:    6974616d    mati    DCD    1769234797
        0x0020c7fc:    77206e6f    on w    DCD    1998614127
        0x0020c800:    206e6568    hen     DCD    544105832
        0x0020c804:    776f6873    show    DCD    2003789939
        0x0020c808:    50414720     GAP    DCD    1346455328
        0x0020c80c:    47534d5f    _MSG    DCD    1196641631
        0x0020c810:    5f454c5f    _LE_    DCD    1598377055
        0x0020c814:    444e4f42    BOND    DCD    1145982786
        0x0020c818:    4553555f    _USE    DCD    1163089247
        0x0020c81c:    4f435f52    R_CO    DCD    1329815378
        0x0020c820:    5249464e    NFIR    DCD    1380533838
        0x0020c824:    4954414d    MATI    DCD    1230258509
        0x0020c828:    0a0d4e4f    ON..    DCD    168644175
        0x0020c82c:    20202020            DCD    538976288
        0x0020c830:    20202020            DCD    538976288
        0x0020c834:    6e6f635b    [con    DCD    1852793691
        0x0020c838:    203a5d66    f]:     DCD    540695910
        0x0020c83c:    52282d30    0-(R    DCD    1378364720
        0x0020c840:    63656a65    ejec    DCD    1667590757
        0x0020c844:    202c2974    t),     DCD    539765108
        0x0020c848:    41282d31    1-(A    DCD    1093152049
        0x0020c84c:    70656363    ccep    DCD    1885692771
        0x0020c850:    0a0d2974    t)..    DCD    168634740
        0x0020c854:    20202020            DCD    538976288
        0x0020c858:    20202020            DCD    538976288
        0x0020c85c:    706d6173    samp    DCD    1886216563
        0x0020c860:    203a656c    le:     DCD    540697964
        0x0020c864:    72657375    user    DCD    1919251317
        0x0020c868:    666e6f63    conf    DCD    1718513507
        0x0020c86c:    31203020     0 1    DCD    824193056
        0x0020c870:    00000d0a    ....    DCD    3338
        0x0020c874:    666e6f43    Conf    DCD    1718513475
        0x0020c878:    73206769    ig s    DCD    1931503465
        0x0020c87c:    6c706d69    impl    DCD    1819307369
        0x0020c880:    6c622065    e bl    DCD    1818370149
        0x0020c884:    65732065    e se    DCD    1702043749
        0x0020c888:    63697672    rvic    DCD    1667855986
        0x0020c88c:    6c632065    e cl    DCD    1818435685
        0x0020c890:    746e6569    ient    DCD    1953391977
        0x0020c894:    61686320     cha    DCD    1634231072
        0x0020c898:    74636172    ract    DCD    1952670066
        0x0020c89c:    73697265    eris    DCD    1936290405
        0x0020c8a0:    20636974    tic     DCD    543385972
        0x0020c8a4:    666e6f63    conf    DCD    1718513507
        0x0020c8a8:    72756769    igur    DCD    1920296809
        0x0020c8ac:    6f697461    atio    DCD    1869182049
        0x0020c8b0:    6564206e    n de    DCD    1701060718
        0x0020c8b4:    69726373    scri    DCD    1769104243
        0x0020c8b8:    726f7470    ptor    DCD    1919906928
        0x0020c8bc:    6c617620     val    DCD    1818326560
        0x0020c8c0:    0a0d6575    ue..    DCD    168650101
        0x0020c8c4:    20202020            DCD    538976288
        0x0020c8c8:    20202020            DCD    538976288
        0x0020c8cc:    7079745b    [typ    DCD    1887007835
        0x0020c8d0:    203a5d65    e]:     DCD    540695909
        0x0020c8d4:    76282d30    0-(v    DCD    1982344496
        0x0020c8d8:    6f6e2033    3 no    DCD    1869488179
        0x0020c8dc:    79666974    tify    DCD    2036754804
        0x0020c8e0:    31202c29    ), 1    DCD    824192041
        0x0020c8e4:    3476282d    -(v4    DCD    880158765
        0x0020c8e8:    646e6920     ind    DCD    1684957472
        0x0020c8ec:    74616369    icat    DCD    1952539497
        0x0020c8f0:    296e6f69    ion)    DCD    695103337
        0x0020c8f4:    20200a0d    ..      DCD    538970637
        0x0020c8f8:    20202020            DCD    538976288
        0x0020c8fc:    655b2020      [e    DCD    1700470816
        0x0020c900:    6c62616e    nabl    DCD    1818386798
        0x0020c904:    203a5d65    e]:     DCD    540695909
        0x0020c908:    64282d30    0-(d    DCD    1680354608
        0x0020c90c:    62617369    isab    DCD    1650553705
        0x0020c910:    2c29656c    le),    DCD    740910444
        0x0020c914:    282d3120     1-(    DCD    674050336
        0x0020c918:    62616e65    enab    DCD    1650552421
        0x0020c91c:    2029656c    le)     DCD    539583852
        0x0020c920:    20200a0d    ..      DCD    538970637
        0x0020c924:    20202020            DCD    538976288
        0x0020c928:    61732020      sa    DCD    1634934816
        0x0020c92c:    656c706d    mple    DCD    1701605485
        0x0020c930:    6973203a    : si    DCD    1769152570
        0x0020c934:    6363706d    mpcc    DCD    1667461229
        0x0020c938:    30206463    cd 0    DCD    807429219
        0x0020c93c:    31203120     1 1    DCD    824193312
        0x0020c940:    00000d0a    ....    DCD    3338
        0x0020c944:    75706e49    Inpu    DCD    1970302537
        0x0020c948:    61702074    t pa    DCD    1634738292
        0x0020c94c:    656b7373    sske    DCD    1701540723
        0x0020c950:    68772079    y wh    DCD    1752637561
        0x0020c954:    73206e65    en s    DCD    1931505253
        0x0020c958:    20776f68    how     DCD    544698216
        0x0020c95c:    5f504147    GAP_    DCD    1599095111
        0x0020c960:    5f47534d    MSG_    DCD    1598509901
        0x0020c964:    425f454c    LE_B    DCD    1113539916
        0x0020c968:    5f444e4f    OND_    DCD    1598312015
        0x0020c96c:    53534150    PASS    DCD    1397965136
        0x0020c970:    5f59454b    KEY_    DCD    1599685963
        0x0020c974:    55504e49    INPU    DCD    1431326281
        0x0020c978:    200a0d54    T..     DCD    537529684
        0x0020c97c:    20202020            DCD    538976288
        0x0020c980:    5b202020       [    DCD    1528832032
        0x0020c984:    73736170    pass    DCD    1936941424
        0x0020c988:    5d79656b    key]    DCD    1568236907
        0x0020c98c:    2030203a    : 0     DCD    540024890
        0x0020c990:    3939202d    - 99    DCD    960045101
        0x0020c994:    39393939    9999    DCD    960051513
        0x0020c998:    20200a0d    ..      DCD    538970637
        0x0020c99c:    20202020            DCD    538976288
        0x0020c9a0:    61732020      sa    DCD    1634934816
        0x0020c9a4:    656c706d    mple    DCD    1701605485
        0x0020c9a8:    7561203a    : au    DCD    1969299514
        0x0020c9ac:    656b6874    thke    DCD    1701537908
        0x0020c9b0:    20302079    y 0     DCD    540024953
        0x0020c9b4:    34333231    1234    DCD    875770417
        0x0020c9b8:    0d0a3635    56..    DCD    218773045
        0x0020c9bc:    00000000    ....    DCD    0
        0x0020c9c0:    63736964    disc    DCD    1668508004
        0x0020c9c4:    6f635b20     [co    DCD    1868782368
        0x0020c9c8:    695f6e6e    nn_i    DCD    1767861870
        0x0020c9cc:    0d0a5d64    d]..    DCD    218783076
        0x0020c9d0:    00000000    ....    DCD    0
        0x0020c9d4:    74756173    saut    DCD    1953849715
        0x0020c9d8:    635b2068    h [c    DCD    1666916456
        0x0020c9dc:    5f6e6e6f    onn_    DCD    1601072751
        0x0020c9e0:    0a5d6469    id].    DCD    173892713
        0x0020c9e4:    0000000d    ....    DCD    13
        0x0020c9e8:    68706167    gaph    DCD    1752195431
        0x0020c9ec:    5b206c64    dl [    DCD    1528851556
        0x0020c9f0:    6e6e6f63    conn    DCD    1852731235
        0x0020c9f4:    5d64695f    _id]    DCD    1566861663
        0x0020c9f8:    00000d0a    ....    DCD    3338
        0x0020c9fc:    706d6973    simp    DCD    1886218611
        0x0020ca00:    206c6468    hdl     DCD    543974504
        0x0020ca04:    6e6f635b    [con    DCD    1852793691
        0x0020ca08:    64695f6e    n_id    DCD    1684627310
        0x0020ca0c:    000d0a5d    ]...    DCD    854621
        0x0020ca10:    68736162    bash    DCD    1752392034
        0x0020ca14:    5b206c64    dl [    DCD    1528851556
        0x0020ca18:    6e6e6f63    conn    DCD    1852731235
        0x0020ca1c:    5d64695f    _id]    DCD    1566861663
        0x0020ca20:    00000d0a    ....    DCD    3338
        0x0020ca24:    646e6f62    bond    DCD    1684959074
        0x0020ca28:    206c6564    del     DCD    543974756
        0x0020ca2c:    6e6f635b    [con    DCD    1852793691
        0x0020ca30:    64695f6e    n_id    DCD    1684627310
        0x0020ca34:    000d0a5d    ]...    DCD    854621
        0x0020ca38:    706d6973    simp    DCD    1886218611
        0x0020ca3c:    64636363    cccd    DCD    1684235107
        0x0020ca40:    6f635b20     [co    DCD    1868782368
        0x0020ca44:    695f6e6e    nn_i    DCD    1767861870
        0x0020ca48:    5b205d64    d] [    DCD    1528847716
        0x0020ca4c:    65707974    type    DCD    1701869940
        0x0020ca50:    655b205d    ] [e    DCD    1700470877
        0x0020ca54:    6c62616e    nabl    DCD    1818386798
        0x0020ca58:    0d0a5d65    e]..    DCD    218783077
        0x0020ca5c:    00000000    ....    DCD    0
        0x0020ca60:    68747561    auth    DCD    1752462689
        0x0020ca64:    65646f6d    mode    DCD    1701080941
        0x0020ca68:    75615b20     [au    DCD    1969314592
        0x0020ca6c:    665f6874    th_f    DCD    1717528692
        0x0020ca70:    7367616c    lags    DCD    1936154988
        0x0020ca74:    695b205d    ] [i    DCD    1767579741
        0x0020ca78:    61635f6f    o_ca    DCD    1633902447
        0x0020ca7c:    5b205d70    p] [    DCD    1528847728
        0x0020ca80:    5f636573    sec_    DCD    1600349555
        0x0020ca84:    62616e65    enab    DCD    1650552421
        0x0020ca88:    205d656c    le]     DCD    542991724
        0x0020ca8c:    626f6f5b    [oob    DCD    1651470171
        0x0020ca90:    616e655f    _ena    DCD    1634624863
        0x0020ca94:    5d656c62    ble]    DCD    1566927970
        0x0020ca98:    00000d0a    ....    DCD    3338
        0x0020ca9c:    72706167    gapr    DCD    1919967591
        0x0020caa0:    20646165    ead     DCD    543449445
        0x0020caa4:    6e6f635b    [con    DCD    1852793691
        0x0020caa8:    64695f6e    n_id    DCD    1684627310
        0x0020caac:    745b205d    ] [t    DCD    1952129117
        0x0020cab0:    5d657079    ype]    DCD    1566929017
        0x0020cab4:    00000d0a    ....    DCD    3338
        0x0020cab8:    72736162    basr    DCD    1920164194
        0x0020cabc:    20646165    ead     DCD    543449445
        0x0020cac0:    6e6f635b    [con    DCD    1852793691
        0x0020cac4:    64695f6e    n_id    DCD    1684627310
        0x0020cac8:    745b205d    ] [t    DCD    1952129117
        0x0020cacc:    5d657079    ype]    DCD    1566929017
        0x0020cad0:    00000d0a    ....    DCD    3338
        0x0020cad4:    206e6f63    con     DCD    544108387
        0x0020cad8:    3044425b    [BD0    DCD    809779803
        0x0020cadc:    425b205d    ] [B    DCD    1113268317
        0x0020cae0:    205d3144    D1]     DCD    542978372
        0x0020cae4:    3244425b    [BD2    DCD    843334235
        0x0020cae8:    425b205d    ] [B    DCD    1113268317
        0x0020caec:    205d3344    D3]     DCD    542978884
        0x0020caf0:    3444425b    [BD4    DCD    876888667
        0x0020caf4:    425b205d    ] [B    DCD    1113268317
        0x0020caf8:    205d3544    D5]     DCD    542979396
        0x0020cafc:    6464615b    [add    DCD    1684300123
        0x0020cb00:    79745f72    r_ty    DCD    2037669746
        0x0020cb04:    0a5d6570    pe].    DCD    173892976
        0x0020cb08:    0000000d    ....    DCD    13
        0x0020cb0c:    6e616373    scan    DCD    1851876211
        0x0020cb10:    69665b20     [fi    DCD    1768315680
        0x0020cb14:    7265746c    lter    DCD    1919251564
        0x0020cb18:    6c6f705f    _pol    DCD    1819242591
        0x0020cb1c:    5d796369    icy]    DCD    1568236393
        0x0020cb20:    69665b20     [fi    DCD    1768315680
        0x0020cb24:    7265746c    lter    DCD    1919251564
        0x0020cb28:    7075645f    _dup    DCD    1886741599
        0x0020cb2c:    6163696c    lica    DCD    1633905004
        0x0020cb30:    0a5d6574    te].    DCD    173892980
        0x0020cb34:    0000000d    ....    DCD    13
        0x0020cb38:    72657375    user    DCD    1919251317
        0x0020cb3c:    666e6f63    conf    DCD    1718513507
        0x0020cb40:    6f635b20     [co    DCD    1868782368
        0x0020cb44:    695f6e6e    nn_i    DCD    1767861870
        0x0020cb48:    5b205d64    d] [    DCD    1528847716
        0x0020cb4c:    666e6f63    conf    DCD    1718513507
        0x0020cb50:    000d0a5d    ]...    DCD    854621
        0x0020cb54:    706d6973    simp    DCD    1886218611
        0x0020cb58:    74697277    writ    DCD    1953067639
        0x0020cb5c:    20327665    ev2     DCD    540178021
        0x0020cb60:    6e6f635b    [con    DCD    1852793691
        0x0020cb64:    64695f6e    n_id    DCD    1684627310
        0x0020cb68:    745b205d    ] [t    DCD    1952129117
        0x0020cb6c:    5d657079    ype]    DCD    1566929017
        0x0020cb70:    656c5b20     [le    DCD    1701600032
        0x0020cb74:    0d0a5d6e    n]..    DCD    218783086
        0x0020cb78:    00000000    ....    DCD    0
        0x0020cb7c:    706d6973    simp    DCD    1886218611
        0x0020cb80:    64616572    read    DCD    1684104562
        0x0020cb84:    6f635b20     [co    DCD    1868782368
        0x0020cb88:    695f6e6e    nn_i    DCD    1767861870
        0x0020cb8c:    5b205d64    d] [    DCD    1528847716
        0x0020cb90:    65707974    type    DCD    1701869940
        0x0020cb94:    705b205d    ] [p    DCD    1885020253
        0x0020cb98:    65747461    atte    DCD    1702130785
        0x0020cb9c:    0a5d6e72    rn].    DCD    173895282
        0x0020cba0:    0000000d    ....    DCD    13
        0x0020cba4:    756e6f63    conu    DCD    1970171747
        0x0020cba8:    65726470    pdre    DCD    1701995632
        0x0020cbac:    635b2071    q [c    DCD    1666916465
        0x0020cbb0:    5f6e6e6f    onn_    DCD    1601072751
        0x0020cbb4:    205d6469    id]     DCD    542991465
        0x0020cbb8:    746e695b    [int    DCD    1953392987
        0x0020cbbc:    61767265    erva    DCD    1635152485
        0x0020cbc0:    696d5f6c    l_mi    DCD    1768775532
        0x0020cbc4:    5b205d6e    n] [    DCD    1528847726
        0x0020cbc8:    65746e69    inte    DCD    1702129257
        0x0020cbcc:    6c617672    rval    DCD    1818326642
        0x0020cbd0:    78616d5f    _max    DCD    2019650911
        0x0020cbd4:    6c5b205d    ] [l    DCD    1817911389
        0x0020cbd8:    6e657461    aten    DCD    1852142689
        0x0020cbdc:    205d7963    cy]     DCD    542996835
        0x0020cbe0:    7075735b    [sup    DCD    1886745435
        0x0020cbe4:    69767265    ervi    DCD    1769370213
        0x0020cbe8:    6e6f6973    sion    DCD    1852795251
        0x0020cbec:    6d69745f    _tim    DCD    1835627615
        0x0020cbf0:    74756f65    eout    DCD    1953853285
        0x0020cbf4:    000d0a5d    ]...    DCD    854621
        0x0020cbf8:    646e6f63    cond    DCD    1684959075
        0x0020cbfc:    5b207665    ev [    DCD    1528854117
        0x0020cc00:    5d786469    idx]    DCD    1568171113
        0x0020cc04:    00000d0a    ....    DCD    3338
        0x0020cc08:    68747561    auth    DCD    1752462689
        0x0020cc0c:    2079656b    key     DCD    544826731
        0x0020cc10:    6e6f635b    [con    DCD    1852793691
        0x0020cc14:    64695f6e    n_id    DCD    1684627310
        0x0020cc18:    705b205d    ] [p    DCD    1885020253
        0x0020cc1c:    6b737361    assk    DCD    1802728289
        0x0020cc20:    0a5d7965    ey].    DCD    173898085
        0x0020cc24:    0000000d    ....    DCD    13
        0x0020cc28:    63736162    basc    DCD    1668505954
        0x0020cc2c:    20646363    ccd     DCD    543449955
        0x0020cc30:    6e6f635b    [con    DCD    1852793691
        0x0020cc34:    64695f6e    n_id    DCD    1684627310
        0x0020cc38:    6e5b205d    ] [n    DCD    1851465821
        0x0020cc3c:    6669746f    otif    DCD    1718187119
        0x0020cc40:    0d0a5d79    y]..    DCD    218783097
        0x0020cc44:    00000000    ....    DCD    0
        0x0020cc48:    61656c43    Clea    DCD    1634036803
        0x0020cc4c:    6f622072    r bo    DCD    1868701810
        0x0020cc50:    6465646e    nded    DCD    1684366446
        0x0020cc54:    76656420     dev    DCD    1986356256
        0x0020cc58:    73656369    ices    DCD    1936024425
        0x0020cc5c:    666e6920     inf    DCD    1718511904
        0x0020cc60:    616d726f    orma    DCD    1634562671
        0x0020cc64:    6e6f6974    tion    DCD    1852795252
        0x0020cc68:    20796220     by     DCD    544825888
        0x0020cc6c:    6e6e6f63    conn    DCD    1852731235
        0x0020cc70:    20746365    ect     DCD    544498533
        0x0020cc74:    0d0a6469    id..    DCD    218784873
        0x0020cc78:    00000000    ....    DCD    0
        0x0020cc7c:    63736944    Disc    DCD    1668507972
        0x0020cc80:    656e6e6f    onne    DCD    1701736047
        0x0020cc84:    74207463    ct t    DCD    1948284003
        0x0020cc88:    6572206f    o re    DCD    1701978223
        0x0020cc8c:    65746f6d    mote    DCD    1702129517
        0x0020cc90:    76656420     dev    DCD    1986356256
        0x0020cc94:    0a656369    ice.    DCD    174416745
        0x0020cc98:    0000000d    ....    DCD    13
        0x0020cc9c:    776f6853    Show    DCD    2003789907
        0x0020cca0:    61637320     sca    DCD    1633907488
        0x0020cca4:    6564206e    n de    DCD    1701060718
        0x0020cca8:    696c2076    v li    DCD    1768693878
        0x0020ccac:    203a7473    st:     DCD    540701811
        0x0020ccb0:    746c6966    filt    DCD    1953261926
        0x0020ccb4:    73207265    er s    DCD    1931506277
        0x0020ccb8:    6c706d69    impl    DCD    1819307369
        0x0020ccbc:    6c622065    e bl    DCD    1818370149
        0x0020ccc0:    65732065    e se    DCD    1702043749
        0x0020ccc4:    63697672    rvic    DCD    1667855986
        0x0020ccc8:    000d0a65    e...    DCD    854629
        0x0020cccc:    7473694c    List    DCD    1953720652
        0x0020ccd0:    50414720     GAP    DCD    1346455328
        0x0020ccd4:    72657320     ser    DCD    1919251232
        0x0020ccd8:    65636976    vice    DCD    1701013878
        0x0020ccdc:    6e616820     han    DCD    1851877408
        0x0020cce0:    20656c64    dle     DCD    543517796
        0x0020cce4:    68636163    cach    DCD    1751343459
        0x0020cce8:    000d0a65    e...    DCD    854629
        0x0020ccec:    7473694c    List    DCD    1953720652
        0x0020ccf0:    6d697320     sim    DCD    1835627296
        0x0020ccf4:    20656c70    ple     DCD    543517808
        0x0020ccf8:    20656c62    ble     DCD    543517794
        0x0020ccfc:    76726573    serv    DCD    1987208563
        0x0020cd00:    20656369    ice     DCD    543515497
        0x0020cd04:    646e6168    hand    DCD    1684955496
        0x0020cd08:    6320656c    le c    DCD    1663067500
        0x0020cd0c:    65686361    ache    DCD    1701340001
        0x0020cd10:    00000d0a    ....    DCD    3338
        0x0020cd14:    7473694c    List    DCD    1953720652
        0x0020cd18:    74616220     bat    DCD    1952539168
        0x0020cd1c:    79726574    tery    DCD    2037540212
        0x0020cd20:    72657320     ser    DCD    1919251232
        0x0020cd24:    65636976    vice    DCD    1701013878
        0x0020cd28:    6e616820     han    DCD    1851877408
        0x0020cd2c:    20656c64    dle     DCD    543517796
        0x0020cd30:    68636163    cach    DCD    1751343459
        0x0020cd34:    000d0a65    e...    DCD    854629
        0x0020cd38:    706f7453    Stop    DCD    1886352467
        0x0020cd3c:    61637320     sca    DCD    1633907488
        0x0020cd40:    000d0a6e    n...    DCD    854638
        0x0020cd44:    706f7473    stop    DCD    1886352499
        0x0020cd48:    6e616373    scan    DCD    1851876211
        0x0020cd4c:    00000d0a    ....    DCD    3338
        0x0020cd50:    776f6873    show    DCD    2003789939
        0x0020cd54:    0a6e6f63    con.    DCD    175009635
        0x0020cd58:    0000000d    ....    DCD    13
        0x0020cd5c:    20746547    Get     DCD    544499015
        0x0020cd60:    206c6c61    all     DCD    543976545
        0x0020cd64:    646e6f42    Bond    DCD    1684959042
        0x0020cd68:    64206465    ed d    DCD    1679844453
        0x0020cd6c:    63697665    evic    DCD    1667855973
        0x0020cd70:    69207365    es i    DCD    1763734373
        0x0020cd74:    726f666e    nfor    DCD    1919903342
        0x0020cd78:    6974616d    mati    DCD    1769234797
        0x0020cd7c:    0d0a6e6f    on..    DCD    218787439
        0x0020cd80:    00000000    ....    DCD    0
        0x0020cd84:    61656c43    Clea    DCD    1634036803
        0x0020cd88:    6c612072    r al    DCD    1818304626
        0x0020cd8c:    6f62206c    l bo    DCD    1868701804
        0x0020cd90:    6465646e    nded    DCD    1684366446
        0x0020cd94:    76656420     dev    DCD    1986356256
        0x0020cd98:    73656369    ices    DCD    1936024425
        0x0020cd9c:    666e6920     inf    DCD    1718511904
        0x0020cda0:    616d726f    orma    DCD    1634562671
        0x0020cda4:    6e6f6974    tion    DCD    1852795252
        0x0020cda8:    00000d0a    ....    DCD    3338
        0x0020cdac:    646e6f62    bond    DCD    1684959074
        0x0020cdb0:    6f666e69    info    DCD    1868983913
        0x0020cdb4:    00000d0a    ....    DCD    3338
        0x0020cdb8:    646e6f62    bond    DCD    1684959074
        0x0020cdbc:    61656c63    clea    DCD    1634036835
        0x0020cdc0:    000d0a72    r...    DCD    854642
        0x0020cdc4:    776f6853    Show    DCD    2003789907
        0x0020cdc8:    6c6c6120     all    DCD    1819042080
        0x0020cdcc:    76656420     dev    DCD    1986356256
        0x0020cdd0:    73656369    ices    DCD    1936024425
        0x0020cdd4:    6e6f6320     con    DCD    1852793632
        0x0020cdd8:    7463656e    nect    DCD    1952671086
        0x0020cddc:    20676e69    ing     DCD    543649385
        0x0020cde0:    74617473    stat    DCD    1952543859
        0x0020cde4:    0d0a7375    us..    DCD    218788725
        0x0020cde8:    00000000    ....    DCD    0
        0x0020cdec:    20726f66    for     DCD    544370534
        0x0020cdf0:    6f747561    auto    DCD    1869903201
        0x0020cdf4:    74736574    test    DCD    1953719668
        0x0020cdf8:    72617520     uar    DCD    1918989600
        0x0020cdfc:    6f702074    t po    DCD    1869619316
        0x0020ce00:    74207472    rt t    DCD    1948284018
        0x0020ce04:    0a747365    est.    DCD    175403877
        0x0020ce08:    0000000d    ....    DCD    13
        0x0020ce0c:    74726175    uart    DCD    1953653109
        0x0020ce10:    74736574    test    DCD    1953719668
        0x0020ce14:    00000d0a    ....    DCD    3338
        0x0020ce18:    646e6553    Send    DCD    1684956499
        0x0020ce1c:    74756120     aut    DCD    1953849632
        0x0020ce20:    746e6568    hent    DCD    1953391976
        0x0020ce24:    74616369    icat    DCD    1952539497
        0x0020ce28:    206e6f69    ion     DCD    544108393
        0x0020ce2c:    75716572    requ    DCD    1970365810
        0x0020ce30:    0a747365    est.    DCD    175403877
        0x0020ce34:    0000000d    ....    DCD    13
        0x0020ce38:    776f6873    show    DCD    2003789939
        0x0020ce3c:    0a766564    dev.    DCD    175531364
        0x0020ce40:    0000000d    ....    DCD    13
        0x0020ce44:    706d6973    simp    DCD    1886218611
        0x0020ce48:    74697277    writ    DCD    1953067639
        0x0020ce4c:    00327665    ev2.    DCD    3307109
        0x0020ce50:    63736964    disc    DCD    1668508004
        0x0020ce54:    00000000    ....    DCD    0
        0x0020ce58:    72706167    gapr    DCD    1919967591
        0x0020ce5c:    00646165    ead.    DCD    6578533
        0x0020ce60:    706d6973    simp    DCD    1886218611
        0x0020ce64:    64616572    read    DCD    1684104562
        0x0020ce68:    00000000    ....    DCD    0
        0x0020ce6c:    72736162    basr    DCD    1920164194
        0x0020ce70:    00646165    ead.    DCD    6578533
        0x0020ce74:    706d6973    simp    DCD    1886218611
        0x0020ce78:    64636363    cccd    DCD    1684235107
        0x0020ce7c:    00000000    ....    DCD    0
        0x0020ce80:    63736162    basc    DCD    1668505954
        0x0020ce84:    00646363    ccd.    DCD    6579043
        0x0020ce88:    68747561    auth    DCD    1752462689
        0x0020ce8c:    65646f6d    mode    DCD    1701080941
        0x0020ce90:    00000000    ....    DCD    0
        0x0020ce94:    72657375    user    DCD    1919251317
        0x0020ce98:    666e6f63    conf    DCD    1718513507
        0x0020ce9c:    00000000    ....    DCD    0
        0x0020cea0:    74756173    saut    DCD    1953849715
        0x0020cea4:    00000068    h...    DCD    104
        0x0020cea8:    68706167    gaph    DCD    1752195431
        0x0020ceac:    00006c64    dl..    DCD    27748
        0x0020ceb0:    706d6973    simp    DCD    1886218611
        0x0020ceb4:    006c6468    hdl.    DCD    7103592
        0x0020ceb8:    68736162    bash    DCD    1752392034
        0x0020cebc:    00006c64    dl..    DCD    27748
        0x0020cec0:    646e6f62    bond    DCD    1684959074
        0x0020cec4:    006c6564    del.    DCD    7103844
        0x0020cec8:    706f7473    stop    DCD    1886352499
        0x0020cecc:    6e616373    scan    DCD    1851876211
        0x0020ced0:    00000000    ....    DCD    0
        0x0020ced4:    6e616373    scan    DCD    1851876211
        0x0020ced8:    00000000    ....    DCD    0
        0x0020cedc:    776f6873    show    DCD    2003789939
        0x0020cee0:    006e6f63    con.    DCD    7237475
        0x0020cee4:    646e6f62    bond    DCD    1684959074
        0x0020cee8:    6f666e69    info    DCD    1868983913
        0x0020ceec:    00000000    ....    DCD    0
        0x0020cef0:    756e6f63    conu    DCD    1970171747
        0x0020cef4:    65726470    pdre    DCD    1701995632
        0x0020cef8:    00000071    q...    DCD    113
        0x0020cefc:    646e6f62    bond    DCD    1684959074
        0x0020cf00:    61656c63    clea    DCD    1634036835
        0x0020cf04:    00000072    r...    DCD    114
        0x0020cf08:    74726175    uart    DCD    1953653109
        0x0020cf0c:    74736574    test    DCD    1953719668
        0x0020cf10:    00000000    ....    DCD    0
        0x0020cf14:    646e6f63    cond    DCD    1684959075
        0x0020cf18:    00007665    ev..    DCD    30309
        0x0020cf1c:    776f6873    show    DCD    2003789939
        0x0020cf20:    00766564    dev.    DCD    7759204
        0x0020cf24:    68747561    auth    DCD    1752462689
        0x0020cf28:    0079656b    key.    DCD    7955819
    .conststring
        0x0020cf2c:    6e656353    Scen    DCD    1852138323
        0x0020cf30:    00425f65    e_B.    DCD    4349797
        0x0020cf34:    6e656353    Scen    DCD    1852138323
        0x0020cf38:    00435f65    e_C.    DCD    4415333
        0x0020cf3c:    746f6f42    Boot    DCD    1953460034
        0x0020cf40:    65636e4f    Once    DCD    1701015119
        0x0020cf44:    00000000    ....    DCD    0

** Section #6 'RAM_DATA_ON' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 116 bytes (alignment 4)
    Address: 0x0020cf48

    0x20cf48:   74 65 72 01 ff ff ff 00 3c cf 20 00 2c 3c 81 00    ter.....<. .,<..
    0x20cf58:   ec 3c 81 00 fc d2 20 00 bc d3 20 00 bc d3 20 00    .<.... ... ... .
    0x20cf68:   c0 00 00 00 00 00 00 00 00 00 00 00 2c cf 20 00    ............,. .
    0x20cf78:   ec 3c 81 00 ec 3c 81 00 fc d2 20 00 fc d2 20 00    .<...<.... ... .
    0x20cf88:   fc d2 20 00 00 00 00 00 00 00 00 00 00 00 00 00    .. .............
    0x20cf98:   34 cf 20 00 ec 3c 81 00 ec 3c 81 00 fc d2 20 00    4. ..<...<.... .
    0x20cfa8:   fc d2 20 00 fc d2 20 00 00 00 00 00 00 00 00 00    .. ... .........
    0x20cfb8:   00 00 00 00                                        ....


** Section #7 'RAM_DATA_ON' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 832 bytes (alignment 4)
    Address: 0x0020cfbc


** Section #8 'OVERLAY_A' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 192 bytes (alignment 4)
    Address: 0x0020d2fc

    $t
    .app.overlay_a
    AppUpdateVectorTable
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;628    static void AppUpdateVectorTable(void)
;;;628    {
        0x0020d2fc:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x0020d300:    b0bd        ..      SUB      sp,sp,#0xf4
;;;629        extern uint32_t Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;630        extern uint32_t Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;631        extern void Default_Handler(void);
;;;632        const char *SysException[] =
        0x0020d302:    2240        @"      MOVS     r2,#0x40
        0x0020d304:    4926        &I      LDR      r1,[pc,#152] ; [0x20d3a0] = 0x21c750
        0x0020d306:    a82d        -.      ADD      r0,sp,#0xb4
        0x0020d308:    f64cfe4e    L.N.    BL       __aeabi_memcpy4 ; 0x59fa8
;;;633        {
;;;634            "InitialSP", "Reset", "NMI", "HardFault", "MemManage", "BusFault", "UsageFault", "Rsvd",
;;;635            "Rsvd", "Rsvd", "Rsvd", "SVC", "DebugMon", "Rsvd", "PendSV", "SysTick"
;;;636        };
;;;637        const char *ExtIrq[] =
        0x0020d30c:    4924        $I      LDR      r1,[pc,#144] ; [0x20d3a0] = 0x21c750
        0x0020d30e:    22b4        ."      MOVS     r2,#0xb4
        0x0020d310:    3140        @1      ADDS     r1,r1,#0x40
        0x0020d312:    4668        hF      MOV      r0,sp
        0x0020d314:    f64cfe48    L.H.    BL       __aeabi_memcpy4 ; 0x59fa8
        0x0020d318:    4924        $I      LDR      r1,[pc,#144] ; [0x20d3ac] = 0xe000ed08
;;;638        {
;;;639            "System", "WDG", "BTMAC", "TIM3", "TIM2", "Platform", "I2S0_TX", "I2S0_RX", "Timer4-7",
;;;640            "GPIO4", "GPIO5", "UART1", "UART0", "RTC", "SPI0", "SPI1", "I2C0", "I2C1", "ADC",
;;;641            "Peripheral", "GDMA0 Channel0", "GDMA0 Channel1", "GDMA0 Channel2", "GDMA0 Channel3",
;;;642            "GDMA0 Channel4", "GDMA0 Channel5", "GPIO_Group3", "GPIO_Group2", "IR", "GPIO_Group1",
;;;643            "GPIO_Group0", "UART2", "TIM4", "TIM5", "TIM6", "TIM7", "SPI_Flash", "Qdecode",
;;;644            "Keyscan", "SPI2W", "LPCOMP", "PTA_Mailbox", "SPORT1 TX", "SPORT1 RX", "LCD"
;;;645        };
;;;646    
;;;647        IRQ_Fun *pRamVector    = (IRQ_Fun *)VTOR_RAM_ADDR;
        0x0020d31a:    f44f1000    O...    MOV      r0,#0x200000
        0x0020d31e:    4d21        !M      LDR      r5,[pc,#132] ; [0x20d3a4] = 0x80e77c
        0x0020d320:    4f21        !O      LDR      r7,[pc,#132] ; [0x20d3a8] = 0xf4
        0x0020d322:    6809        .h      LDR      r1,[r1,#0]
        0x0020d324:    4606        .F      MOV      r6,r0
;;;648        IRQ_Fun *pAppVector    = (IRQ_Fun *)&Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;649        uint32_t AppVectorSize = (uint32_t)&Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;650        uint32_t i             = 0;
        0x0020d326:    2400        .$      MOVS     r4,#0
;;;651    
;;;652        if (SCB->VTOR != VTOR_RAM_ADDR)
        0x0020d328:    42b1        .B      CMP      r1,r6
        0x0020d32a:    d001        ..      BEQ      0x20d330 ; AppUpdateVectorTable + 52
;;;653        {
;;;654            RamVectorTableInit(VTOR_RAM_ADDR);
        0x0020d32c:    f5f7fcbc    ....    BL       RamVectorTableInit ; 0x4ca8
        0x0020d330:    f04f5805    O..X    MOV      r8,#0x21400000
        0x0020d334:    f8df9078    ..x.    LDR      r9,[pc,#120] ; [0x20d3b0] = 0x21100101
;;;655        }
;;;656    
;;;657        /* Update APP defined handlers */
;;;658        for (i = 0; i < AppVectorSize / 4; ++i)
        0x0020d338:    e027        '.      B        0x20d38a ; AppUpdateVectorTable + 142
;;;659        {
;;;660            if (i == 1) //skip reset_handler remap
        0x0020d33a:    2c01        .,      CMP      r4,#1
        0x0020d33c:    d024        $.      BEQ      0x20d388 ; AppUpdateVectorTable + 140
;;;661            {
;;;662                continue;
;;;663            }
;;;664    
;;;665            if ((pAppVector[i] != Default_Handler) && (pAppVector[i] != 0))
        0x0020d33e:    f8550024    U.$.    LDR      r0,[r5,r4,LSL #2]
        0x0020d342:    491c        .I      LDR      r1,[pc,#112] ; [0x20d3b4] = 0x207d41
        0x0020d344:    4288        .B      CMP      r0,r1
        0x0020d346:    d01f        ..      BEQ      0x20d388 ; AppUpdateVectorTable + 140
        0x0020d348:    b1f0        ..      CBZ      r0,0x20d388 ; AppUpdateVectorTable + 140
;;;666            {
;;;667                if (i < System_VECTORn)
        0x0020d34a:    2c10        .,      CMP      r4,#0x10
        0x0020d34c:    d209        ..      BCS      0x20d362 ; AppUpdateVectorTable + 102
;;;668                {
;;;669                    OS_PRINT_WARN1("Warning! %s is updated by APP!", TRACE_STRING(SysException[i]));
        0x0020d34e:    a82d        -.      ADD      r0,sp,#0xb4
        0x0020d350:    f8501024    P.$.    LDR      r1,[r0,r4,LSL #2]
        0x0020d354:    4640        @F      MOV      r0,r8
        0x0020d356:    f5fafd88    ....    BL       trace_string ; 0x7e6a
        0x0020d35a:    4603        .F      MOV      r3,r0
        0x0020d35c:    2201        ."      MOVS     r2,#1
        0x0020d35e:    4916        .I      LDR      r1,[pc,#88] ; [0x20d3b8] = 0x880009c
        0x0020d360:    e00b        ..      B        0x20d37a ; AppUpdateVectorTable + 126
;;;670                }
;;;671                else
;;;672                {
;;;673                    OS_PRINT_WARN1("Warning! ISR %s is updated by APP!",
        0x0020d362:    4668        hF      MOV      r0,sp
        0x0020d364:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x0020d368:    f8501c40    P.@.    LDR      r1,[r0,#-0x40]
        0x0020d36c:    4640        @F      MOV      r0,r8
        0x0020d36e:    f5fafd7c    ..|.    BL       trace_string ; 0x7e6a
        0x0020d372:    4911        .I      LDR      r1,[pc,#68] ; [0x20d3b8] = 0x880009c
        0x0020d374:    2201        ."      MOVS     r2,#1
        0x0020d376:    4603        .F      MOV      r3,r0
        0x0020d378:    3124        $1      ADDS     r1,r1,#0x24
        0x0020d37a:    4648        HF      MOV      r0,r9
        0x0020d37c:    f5fafb6f    ..o.    BL       log_buffer ; 0x7a5e
;;;674                                   TRACE_STRING(ExtIrq[i - System_VECTORn]));
;;;675                }
;;;676    
;;;677                pRamVector[i] = pAppVector[i];
        0x0020d380:    f8550024    U.$.    LDR      r0,[r5,r4,LSL #2]
        0x0020d384:    f8460024    F.$.    STR      r0,[r6,r4,LSL #2]
        0x0020d388:    1c64        d.      ADDS     r4,r4,#1
        0x0020d38a:    ebb40f97    ....    CMP      r4,r7,LSR #2
        0x0020d38e:    d3d4        ..      BCC      0x20d33a ; AppUpdateVectorTable + 62
;;;678            }
;;;679        }
;;;680    
;;;681        __DMB();
        0x0020d390:    f3bf8f5f    .._.    DMB      
;;;682        __DSB();
        0x0020d394:    f3bf8f4f    ..O.    DSB      
;;;683    }
        0x0020d398:    b03d        =.      ADD      sp,sp,#0xf4
        0x0020d39a:    e8bd83f0    ....    POP      {r4-r9,pc}
    $d
        0x0020d39e:    0000        ..      DCW    0
        0x0020d3a0:    0021c750    P.!.    DCD    2213712
        0x0020d3a4:    0080e77c    |...    DCD    8447868
        0x0020d3a8:    000000f4    ....    DCD    244
        0x0020d3ac:    e000ed08    ....    DCD    3758157064
        0x0020d3b0:    21100101    ...!    DCD    554696961
        0x0020d3b4:    00207d41    A} .    DCD    2129217
        0x0020d3b8:    0880009c    ....    DCD    142606492

** Section #9 'CACHE_DATA_ON' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 2808 bytes (alignment 4)
    Address: 0x0021c000

    $t
    .ARM.Collect$$rtentry$$00000000
    .ARM.Collect$$rtentry$$00000002
    .ARM.Collect$$rtentry$$00000004
    __rt_entry
    __rt_entry_presh_1
    __rt_entry_sh
        0x0021c000:    f7ebfea6    ....    BL       __user_setup_stackheap ; 0x207d50
        0x0021c004:    4611        .F      MOV      r1,r2
    .ARM.Collect$$rtentry$$00000009
    .ARM.Collect$$rtentry$$0000000A
    __rt_entry_li
    __rt_entry_postsh_1
        0x0021c006:    f7ebfe03    ....    BL       __rt_lib_init ; 0x207c10
    .ARM.Collect$$rtentry$$0000000C
    .ARM.Collect$$rtentry$$0000000D
    __rt_entry_main
    __rt_entry_postli_1
        0x0021c00a:    f7eefd9e    ....    BL       main ; 0x20ab4a
        0x0021c00e:    f63eff09    >...    BL       exit ; 0x5ae24
        0x0021c012:    0000        ..      MOVS     r0,r0
    .emb_text
    rand
        0x0021c014:    490b        .I      LDR      r1,[pc,#44] ; [0x21c044] = 0x20d2f4
        0x0021c016:    f8d1c000    ....    LDR      r12,[r1,#0]
        0x0021c01a:    684a        Jh      LDR      r2,[r1,#4]
        0x0021c01c:    f85c3b04    \..;    LDR      r3,[r12],#4
        0x0021c020:    6810        .h      LDR      r0,[r2,#0]
        0x0021c022:    4418        .D      ADD      r0,r0,r3
        0x0021c024:    f8420b04    B...    STR      r0,[r2],#4
        0x0021c028:    458c        .E      CMP      r12,r1
        0x0021c02a:    bf28        (.      IT       CS
        0x0021c02c:    f1a10cdc    ....    SUBCS    r12,r1,#0xdc
        0x0021c030:    428a        .B      CMP      r2,r1
        0x0021c032:    bf28        (.      IT       CS
        0x0021c034:    f1a102dc    ....    SUBCS    r2,r1,#0xdc
        0x0021c038:    f8c1c000    ....    STR      r12,[r1,#0]
        0x0021c03c:    604a        J`      STR      r2,[r1,#4]
        0x0021c03e:    f0204000     ..@    BIC      r0,r0,#0x80000000
        0x0021c042:    4770        pG      BX       lr
    $d
        0x0021c044:    0020d2f4    .. .    DCD    2151156
    $t
    .text
    GPIO_DeInit
;;;33         RCC_PeriphClockCmd(APBPeriph_GPIO, APBPeriph_GPIO_CLOCK, DISABLE);
        0x0021c048:    2200        ."      MOVS     r2,#0
        0x0021c04a:    f04f5104    O..Q    MOV      r1,#0x21000000
        0x0021c04e:    485d        ]H      LDR      r0,[pc,#372] ; [0x21c1c4] = 0xc000100
        0x0021c050:    f7ebbf3e    ..>.    B        RCC_PeriphClockCmd ; 0x207ed0
    GPIO_Init
;;;34     }
;;;35     
;;;36     /**
;;;37       * @brief  Initializes the GPIO peripheral according to the specified
;;;38       *         parameters in the GPIO_InitStruct.
;;;39       * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
;;;40       *         contains the configuration information for the specified GPIO peripheral.
;;;41       * @retval None
;;;42       */
;;;43     void GPIO_Init(GPIO_InitTypeDef *GPIO_InitStruct)
;;;44     {
;;;45         /* Check the parameters */
;;;46         assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;47         assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;48         assert_param(IS_GPIOIT_LEVEL_TYPE(GPIO_InitStruct->GPIO_ITTrigger));
;;;49         assert_param(IS_GPIOIT_POLARITY_TYPE(GPIO_InitStruct->GPIO_ITPolarity));
;;;50         assert_param(IS_GPIOIT_DEBOUNCE_TYPE(GPIO_InitStruct->GPIO_ITDebounce));
;;;51     
;;;52         /* GPIO configure */
;;;53         if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
        0x0021c054:    7903        .y      LDRB     r3,[r0,#4]
        0x0021c056:    495c        \I      LDR      r1,[pc,#368] ; [0x21c1c8] = 0x40001000
        0x0021c058:    2b01        .+      CMP      r3,#1
        0x0021c05a:    6802        .h      LDR      r2,[r0,#0]
        0x0021c05c:    684b        Kh      LDR      r3,[r1,#4]
;;; .\..\..\..\src\mcu\peripheral\rtl876x_gpio.c (44)
        0x0021c05e:    d030        0.      BEQ      0x21c0c2 ; GPIO_Init + 110
;;;45         /* Check the parameters */
;;;46         assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;47         assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;48         assert_param(IS_GPIOIT_LEVEL_TYPE(GPIO_InitStruct->GPIO_ITTrigger));
;;;49         assert_param(IS_GPIOIT_POLARITY_TYPE(GPIO_InitStruct->GPIO_ITPolarity));
;;;50         assert_param(IS_GPIOIT_DEBOUNCE_TYPE(GPIO_InitStruct->GPIO_ITDebounce));
;;;51     
;;;52         /* GPIO configure */
;;;53         if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
;;;54         {
;;;55             GPIO->DATADIR |= GPIO_InitStruct->GPIO_Pin;
;;;56     
;;;57             if (GPIO_InitStruct->GPIO_ControlMode == GPIO_SOFTWARE_MODE)
;;;58             {
;;;59                 /* Config GPIO control software mode */
;;;60                 GPIO->DATASRC &= (~GPIO_InitStruct->GPIO_Pin);
;;;61             }
;;;62             else
;;;63             {
;;;64                 /* Config GPIO hardware control mode */
;;;65                 GPIO->DATASRC |= (GPIO_InitStruct->GPIO_Pin);
;;;66             }
;;;67     
;;;68         }
;;;69         else
;;;70         {
;;;71             /*Configure GPIO input mode */
;;;72             GPIO->DATADIR = GPIO->DATADIR & (~GPIO_InitStruct->GPIO_Pin);
        0x0021c060:    4393        .C      BICS     r3,r3,r2
        0x0021c062:    604b        K`      STR      r3,[r1,#4]
;;;73     
;;;74             if (GPIO_InitStruct->GPIO_ITCmd == ENABLE)
        0x0021c064:    7942        By      LDRB     r2,[r0,#5]
        0x0021c066:    2a01        .*      CMP      r2,#1
        0x0021c068:    d12a        *.      BNE      0x21c0c0 ; GPIO_Init + 108
;;;75             {
;;;76     
;;;77                 GPIO->INTMASK = ~GPIO_Pin_All;
        0x0021c06a:    2200        ."      MOVS     r2,#0
        0x0021c06c:    634a        Jc      STR      r2,[r1,#0x34]
;;;78     
;;;79                 /* configure GPIO interrupt trigger type */
;;;80                 if (GPIO_InitStruct->GPIO_ITTrigger == GPIO_INT_Trigger_LEVEL)
        0x0021c06e:    7982        .y      LDRB     r2,[r0,#6]
        0x0021c070:    b38a        ..      CBZ      r2,0x21c0d6 ; GPIO_Init + 130
;;;81                 {
;;;82                     GPIO->INTTYPE = GPIO->INTTYPE & (~GPIO_InitStruct->GPIO_Pin);
;;;83     
;;;84                     /* Level-sensitive synchronization enable register */
;;;85                     GPIO->LSSYNC |= GPIO_InitStruct->GPIO_Pin;
;;;86                 }
;;;87                 else if (GPIO_InitStruct->GPIO_ITTrigger == GPIO_INT_Trigger_EDGE)
        0x0021c072:    2a01        .*      CMP      r2,#1
        0x0021c074:    d03d        =.      BEQ      0x21c0f2 ; GPIO_Init + 158
;;;88                 {
;;;89                     GPIO->INTTYPE = (GPIO->INTTYPE & (~GPIO_InitStruct->GPIO_Pin))
;;;90                                     | GPIO_InitStruct->GPIO_Pin;
;;;91                 }
;;;92                 else
;;;93                 {
;;;94                     GPIO->INTBOTHEDGE |= GPIO_InitStruct->GPIO_Pin;
        0x0021c076:    6e8a        .n      LDR      r2,[r1,#0x68]
        0x0021c078:    6803        .h      LDR      r3,[r0,#0]
        0x0021c07a:    431a        .C      ORRS     r2,r2,r3
        0x0021c07c:    668a        .f      STR      r2,[r1,#0x68]
;;;95                 }
;;;96     
;;;97                 /* configure Interrupt polarity register */
;;;98                 if (GPIO_InitStruct->GPIO_ITPolarity == GPIO_INT_POLARITY_ACTIVE_LOW)
        0x0021c07e:    79c2        .y      LDRB     r2,[r0,#7]
        0x0021c080:    b352        R.      CBZ      r2,0x21c0d8 ; GPIO_Init + 132
;;;99                 {
;;;100                    GPIO->INTPOLARITY = GPIO->INTPOLARITY & (~GPIO_InitStruct->GPIO_Pin);
;;;101                }
;;;102                else
;;;103                {
;;;104                    GPIO->INTPOLARITY = (GPIO->INTPOLARITY & (~GPIO_InitStruct->GPIO_Pin))
        0x0021c082:    6bcb        .k      LDR      r3,[r1,#0x3c]
        0x0021c084:    6802        .h      LDR      r2,[r0,#0]
        0x0021c086:    4393        .C      BICS     r3,r3,r2
        0x0021c088:    4313        .C      ORRS     r3,r3,r2
        0x0021c08a:    63cb        .c      STR      r3,[r1,#0x3c]
;;;105                                        | GPIO_InitStruct->GPIO_Pin;
;;;106                }
;;;107                /* Configure Debounce enable register */
;;;108                if (GPIO_InitStruct->GPIO_ITDebounce == GPIO_INT_DEBOUNCE_DISABLE)
        0x0021c08c:    7a02        .z      LDRB     r2,[r0,#8]
        0x0021c08e:    b37a        z.      CBZ      r2,0x21c0f0 ; GPIO_Init + 156
;;;109                {
;;;110                    GPIO->DEBOUNCE = GPIO->DEBOUNCE & (~GPIO_InitStruct->GPIO_Pin);
;;;111                }
;;;112                else
;;;113                {
;;;114                    GPIO->DEBOUNCE = (GPIO->DEBOUNCE & (~GPIO_InitStruct->GPIO_Pin))
        0x0021c090:    6c8b        .l      LDR      r3,[r1,#0x48]
        0x0021c092:    6802        .h      LDR      r2,[r0,#0]
        0x0021c094:    4393        .C      BICS     r3,r3,r2
        0x0021c096:    4313        .C      ORRS     r3,r3,r2
        0x0021c098:    648b        .d      STR      r3,[r1,#0x48]
;;;115                                     | GPIO_InitStruct->GPIO_Pin;
;;;116    
;;;117    #ifdef _IS_ASIC_
;;;118                    /* Config debounce time , default debounce DIV is 14*/
;;;119                    GPIO_DBCLK_DIV = (((0xd) << 8) | (1 << 12));
;;;120                    GPIO_DBCLK_DIV |= ((((GPIO_InitStruct->GPIO_DebounceTime) * (GPIO_CLOCK_SOURCE_KHZ) >>
;;;121                                         (14)) - 1) & 0xff);
;;;122    #else
;;;123                    /* Config debounce time , default debounce DIV is 13*/
;;;124                    GPIO_DBCLK_DIV = (((0x3) << 10) | (1 << 12));
        0x0021c09a:    f04f4180    O..A    MOV      r1,#0x40000000
        0x0021c09e:    f44f52e0    O..R    MOV      r2,#0x1c00
        0x0021c0a2:    f8c12344    ..D#    STR      r2,[r1,#0x344]
;;;125                    GPIO_DBCLK_DIV |= ((((GPIO_InitStruct->GPIO_DebounceTime) * (GPIO_CLOCK_SOURCE_KHZ) >>
        0x0021c0a6:    f8d12344    ..D#    LDR      r2,[r1,#0x344]
        0x0021c0aa:    68c0        .h      LDR      r0,[r0,#0xc]
        0x0021c0ac:    f6446320    D. c    MOV      r3,#0x4e20
        0x0021c0b0:    4358        XC      MULS     r0,r3,r0
        0x0021c0b2:    23ff        .#      MOVS     r3,#0xff
        0x0021c0b4:    eb033050    ..P0    ADD      r0,r3,r0,LSR #13
        0x0021c0b8:    b2c0        ..      UXTB     r0,r0
        0x0021c0ba:    4302        .C      ORRS     r2,r2,r0
        0x0021c0bc:    f8c12344    ..D#    STR      r2,[r1,#0x344]
;;;126                                         (13)) - 1) & 0xff);
;;;127    #endif
;;;128                }
;;;129    
;;;130                /* Configure Interrupt enable register */
;;;131                //GPIO->INTEN |= GPIO_InitStruct->GPIO_Pin;
;;;132            }
;;;133        }
;;;134    }
        0x0021c0c0:    4770        pG      BX       lr
        0x0021c0c2:    4313        .C      ORRS     r3,r3,r2
        0x0021c0c4:    604b        K`      STR      r3,[r1,#4]
        0x0021c0c6:    7a42        Bz      LDRB     r2,[r0,#9]
        0x0021c0c8:    2a00        .*      CMP      r2,#0
        0x0021c0ca:    688a        .h      LDR      r2,[r1,#8]
        0x0021c0cc:    6800        .h      LDR      r0,[r0,#0]
        0x0021c0ce:    d004        ..      BEQ      0x21c0da ; GPIO_Init + 134
        0x0021c0d0:    4302        .C      ORRS     r2,r2,r0
        0x0021c0d2:    608a        .`      STR      r2,[r1,#8]
        0x0021c0d4:    4770        pG      BX       lr
        0x0021c0d6:    e002        ..      B        0x21c0de ; GPIO_Init + 138
        0x0021c0d8:    e011        ..      B        0x21c0fe ; GPIO_Init + 170
        0x0021c0da:    4382        .C      BICS     r2,r2,r0
        0x0021c0dc:    e7f9        ..      B        0x21c0d2 ; GPIO_Init + 126
        0x0021c0de:    6b8a        .k      LDR      r2,[r1,#0x38]
        0x0021c0e0:    6803        .h      LDR      r3,[r0,#0]
        0x0021c0e2:    439a        .C      BICS     r2,r2,r3
        0x0021c0e4:    638a        .c      STR      r2,[r1,#0x38]
        0x0021c0e6:    6e0a        .n      LDR      r2,[r1,#0x60]
        0x0021c0e8:    6803        .h      LDR      r3,[r0,#0]
        0x0021c0ea:    431a        .C      ORRS     r2,r2,r3
        0x0021c0ec:    660a        .f      STR      r2,[r1,#0x60]
        0x0021c0ee:    e7c6        ..      B        0x21c07e ; GPIO_Init + 42
        0x0021c0f0:    e00a        ..      B        0x21c108 ; GPIO_Init + 180
        0x0021c0f2:    6b8b        .k      LDR      r3,[r1,#0x38]
        0x0021c0f4:    6802        .h      LDR      r2,[r0,#0]
        0x0021c0f6:    4393        .C      BICS     r3,r3,r2
        0x0021c0f8:    4313        .C      ORRS     r3,r3,r2
        0x0021c0fa:    638b        .c      STR      r3,[r1,#0x38]
        0x0021c0fc:    e7bf        ..      B        0x21c07e ; GPIO_Init + 42
        0x0021c0fe:    6bca        .k      LDR      r2,[r1,#0x3c]
        0x0021c100:    6803        .h      LDR      r3,[r0,#0]
        0x0021c102:    439a        .C      BICS     r2,r2,r3
        0x0021c104:    63ca        .c      STR      r2,[r1,#0x3c]
        0x0021c106:    e7c1        ..      B        0x21c08c ; GPIO_Init + 56
        0x0021c108:    6c8a        .l      LDR      r2,[r1,#0x48]
        0x0021c10a:    6800        .h      LDR      r0,[r0,#0]
        0x0021c10c:    4382        .C      BICS     r2,r2,r0
        0x0021c10e:    648a        .d      STR      r2,[r1,#0x48]
        0x0021c110:    e7e0        ..      B        0x21c0d4 ; GPIO_Init + 128
    GPIO_StructInit
;;;135    
;;;136    /**
;;;137      * @brief    Fills each GPIO_InitStruct member with its default value.
;;;138      * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
;;;139      *    be initialized.
;;;140      * @retval None
;;;141      */
;;;142    void GPIO_StructInit(GPIO_InitTypeDef *GPIO_InitStruct)
;;;143    {
;;;144        /* Reset GPIO init structure parameters values */
;;;145        GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
        0x0021c112:    f04f31ff    O..1    MOV      r1,#0xffffffff
;;;146        GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
        0x0021c116:    6001        .`      STR      r1,[r0,#0]
        0x0021c118:    2100        .!      MOVS     r1,#0
        0x0021c11a:    7101        .q      STRB     r1,[r0,#4]
;;;147        GPIO_InitStruct->GPIO_ITCmd = DISABLE;
        0x0021c11c:    7141        Aq      STRB     r1,[r0,#5]
;;;148        GPIO_InitStruct->GPIO_ITTrigger = GPIO_INT_Trigger_LEVEL;
        0x0021c11e:    7181        .q      STRB     r1,[r0,#6]
;;;149        GPIO_InitStruct->GPIO_ITPolarity = GPIO_INT_POLARITY_ACTIVE_LOW;
        0x0021c120:    71c1        .q      STRB     r1,[r0,#7]
;;;150        GPIO_InitStruct->GPIO_ITDebounce = GPIO_INT_DEBOUNCE_DISABLE;
        0x0021c122:    7201        .r      STRB     r1,[r0,#8]
;;;151        GPIO_InitStruct->GPIO_ControlMode = GPIO_SOFTWARE_MODE;
        0x0021c124:    7241        Ar      STRB     r1,[r0,#9]
;;;152        GPIO_InitStruct->GPIO_DebounceTime = 20;                 /* ms , can be 1~64 ms */
        0x0021c126:    2114        .!      MOVS     r1,#0x14
        0x0021c128:    60c1        .`      STR      r1,[r0,#0xc]
;;;153    }
        0x0021c12a:    e7d3        ..      B        0x21c0d4 ; GPIO_Init + 128
    GPIO_INTConfig
;;;154    
;;;155    /**
;;;156      * @brief enable the specified GPIO interrupt.
;;;157      * @param  GPIO_Pin_x: where x can be 0 or 31.
;;;158      * @retval None
;;;159      */
;;;160    void GPIO_INTConfig(uint32_t GPIO_Pin, FunctionalState NewState)
;;;161    {
;;;162        /* Check the parameters */
;;;163        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;164        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;165    
;;;166        if (NewState != DISABLE)
;;;167        {
;;;168            /* Enable the selected GPIO pin interrupts */
;;;169            GPIO->INTEN |= GPIO_Pin;
        0x0021c12c:    4a26        &J      LDR      r2,[pc,#152] ; [0x21c1c8] = 0x40001000
        0x0021c12e:    2900        .)      CMP      r1,#0
        0x0021c130:    6b11        .k      LDR      r1,[r2,#0x30]
;;; .\..\..\..\src\mcu\peripheral\rtl876x_gpio.c (161)
        0x0021c132:    d001        ..      BEQ      0x21c138 ; GPIO_INTConfig + 12
;;;162        /* Check the parameters */
;;;163        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;164        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;165    
;;;166        if (NewState != DISABLE)
;;;167        {
;;;168            /* Enable the selected GPIO pin interrupts */
;;;169            GPIO->INTEN |= GPIO_Pin;
        0x0021c134:    4301        .C      ORRS     r1,r1,r0
        0x0021c136:    e000        ..      B        0x21c13a ; GPIO_INTConfig + 14
        0x0021c138:    4381        .C      BICS     r1,r1,r0
        0x0021c13a:    6311        .c      STR      r1,[r2,#0x30]
;;;170        }
;;;171        else
;;;172        {
;;;173            /* Disable the selected GPIO pin interrupts */
;;;174            GPIO->INTEN &= ~GPIO_Pin;
;;;175        }
;;;176    }
        0x0021c13c:    e7ca        ..      B        0x21c0d4 ; GPIO_Init + 128
    GPIO_ClearINTPendingBit
;;;177    
;;;178    /**
;;;179      * @brief clear the specified GPIO interrupt.
;;;180      * @param  GPIO_Pin_x: where x can be 0 or 31.
;;;181      * @retval None
;;;182      */
;;;183    void GPIO_ClearINTPendingBit(uint32_t GPIO_Pin)
;;;184    {
;;;185        /* Check the parameters */
;;;186        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;187    
;;;188        GPIO->INTCLR = GPIO_Pin;
        0x0021c13e:    4922        "I      LDR      r1,[pc,#136] ; [0x21c1c8] = 0x40001000
        0x0021c140:    64c8        .d      STR      r0,[r1,#0x4c]
;;;189    }
        0x0021c142:    e7c7        ..      B        0x21c0d4 ; GPIO_Init + 128
    GPIO_MaskINTConfig
;;;190    
;;;191    /**
;;;192      * @brief mask the specified GPIO interrupt.
;;;193      * @param  GPIO_Pin_x: where x can be 0 or 31.
;;;194      * @retval None
;;;195      */
;;;196    void GPIO_MaskINTConfig(uint32_t GPIO_Pin, FunctionalState NewState)
;;;197    {
;;;198        /* Check the parameters */
;;;199        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;200        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;201    
;;;202        if (NewState != DISABLE)
;;;203        {
;;;204            GPIO->INTMASK |= GPIO_Pin;
        0x0021c144:    4a20         J      LDR      r2,[pc,#128] ; [0x21c1c8] = 0x40001000
        0x0021c146:    2900        .)      CMP      r1,#0
        0x0021c148:    6b51        Qk      LDR      r1,[r2,#0x34]
;;; .\..\..\..\src\mcu\peripheral\rtl876x_gpio.c (197)
        0x0021c14a:    d001        ..      BEQ      0x21c150 ; GPIO_MaskINTConfig + 12
;;;198        /* Check the parameters */
;;;199        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;200        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;201    
;;;202        if (NewState != DISABLE)
;;;203        {
;;;204            GPIO->INTMASK |= GPIO_Pin;
        0x0021c14c:    4301        .C      ORRS     r1,r1,r0
        0x0021c14e:    e000        ..      B        0x21c152 ; GPIO_MaskINTConfig + 14
        0x0021c150:    4381        .C      BICS     r1,r1,r0
        0x0021c152:    6351        Qc      STR      r1,[r2,#0x34]
;;;205        }
;;;206        else
;;;207        {
;;;208            GPIO->INTMASK &= ~(GPIO_Pin);
;;;209        }
;;;210    }
        0x0021c154:    e7be        ..      B        0x21c0d4 ; GPIO_Init + 128
    GPIO_GetPin
        0x0021c156:    2101        .!      MOVS     r1,#1
        0x0021c158:    281e        .(      CMP      r0,#0x1e
;;;211    
;;;212    /**
;;;213      * @brief get the specified GPIO pin.
;;;214      * @param  Pin_num: This parameter is from ADC_0 to P4_1, please refer to rtl876x.h "Pin_Number" part.
;;;215      * @retval  GPIO pin for GPIO initialization.
;;;216      */
;;;217    uint32_t GPIO_GetPin(uint8_t Pin_num)
;;;218    {
        0x0021c15a:    d90e        ..      BLS      0x21c17a ; GPIO_GetPin + 36
;;;219        /* Check the parameters */
;;;220        assert_param(IS_PIN_NUM(Pin_num));
;;;221    
;;;222        if (Pin_num <= P3_6)
;;;223        {
;;;224            return  BIT(Pin_num);
;;;225        }
;;;226        else if ((Pin_num <= P4_3) && (Pin_num >= P4_0))
        0x0021c15c:    f1a00220    .. .    SUB      r2,r0,#0x20
        0x0021c160:    2a03        .*      CMP      r2,#3
        0x0021c162:    d801        ..      BHI      0x21c168 ; GPIO_GetPin + 18
        0x0021c164:    1f00        ..      SUBS     r0,r0,#4
;;;227        {
;;;228            return BIT(Pin_num - 4);
        0x0021c166:    e008        ..      B        0x21c17a ; GPIO_GetPin + 36
;;;229        }
;;;230        else if ((Pin_num == H_0) || (Pin_num == H_1) || (Pin_num == H_2))
        0x0021c168:    2824        $(      CMP      r0,#0x24
        0x0021c16a:    d005        ..      BEQ      0x21c178 ; GPIO_GetPin + 34
        0x0021c16c:    2825        %(      CMP      r0,#0x25
        0x0021c16e:    d003        ..      BEQ      0x21c178 ; GPIO_GetPin + 34
        0x0021c170:    2826        &(      CMP      r0,#0x26
        0x0021c172:    d001        ..      BEQ      0x21c178 ; GPIO_GetPin + 34
        0x0021c174:    20ff        .       MOVS     r0,#0xff
        0x0021c176:    e7ad        ..      B        0x21c0d4 ; GPIO_Init + 128
        0x0021c178:    380b        .8      SUBS     r0,r0,#0xb
;;;231        {
;;;232            return BIT(Pin_num - 11);
        0x0021c17a:    fa01f000    ....    LSL      r0,r1,r0
;;;233        }
;;;234    
;;;235        return 0xFF;
;;;236    }
        0x0021c17e:    e7a9        ..      B        0x21c0d4 ; GPIO_Init + 128
    GPIO_GetNum
;;;237    
;;;238    /**
;;;239      * @brief get the specified GPIO pin number.
;;;240      * @param  Pin_num: This parameter is from ADC_0 to P4_1, please refer to rtl876x.h "Pin_Number" part.
;;;241      * @retval  GPIO pin number.
;;;242      */
;;;243    uint8_t GPIO_GetNum(uint8_t Pin_num)
;;;244    {
;;;245        /* Check the parameters */
;;;246        assert_param(IS_PIN_NUM(Pin_num));
;;;247    
;;;248        if (Pin_num <= P3_6)
        0x0021c180:    281e        .(      CMP      r0,#0x1e
;;; .\..\..\..\src\mcu\peripheral\rtl876x_gpio.c (244)
        0x0021c182:    d9a7        ..      BLS      0x21c0d4 ; GPIO_Init + 128
;;;245        /* Check the parameters */
;;;246        assert_param(IS_PIN_NUM(Pin_num));
;;;247    
;;;248        if (Pin_num <= P3_6)
;;;249        {
;;;250            return (Pin_num);
;;;251        }
;;;252        else if ((Pin_num <= P4_3) && (Pin_num >= P4_0))
        0x0021c184:    f1a00120    .. .    SUB      r1,r0,#0x20
        0x0021c188:    2903        .)      CMP      r1,#3
        0x0021c18a:    d801        ..      BHI      0x21c190 ; GPIO_GetNum + 16
        0x0021c18c:    1f00        ..      SUBS     r0,r0,#4
;;;253        {
;;;254            return (Pin_num - 4);
        0x0021c18e:    e008        ..      B        0x21c1a2 ; GPIO_GetNum + 34
;;;255        }
;;;256        else if ((Pin_num == H_0) || (Pin_num == H_1) || (Pin_num == H_2))
        0x0021c190:    2824        $(      CMP      r0,#0x24
        0x0021c192:    d005        ..      BEQ      0x21c1a0 ; GPIO_GetNum + 32
        0x0021c194:    2825        %(      CMP      r0,#0x25
        0x0021c196:    d003        ..      BEQ      0x21c1a0 ; GPIO_GetNum + 32
        0x0021c198:    2826        &(      CMP      r0,#0x26
        0x0021c19a:    d001        ..      BEQ      0x21c1a0 ; GPIO_GetNum + 32
        0x0021c19c:    20ff        .       MOVS     r0,#0xff
        0x0021c19e:    e799        ..      B        0x21c0d4 ; GPIO_Init + 128
        0x0021c1a0:    380b        .8      SUBS     r0,r0,#0xb
;;;257        {
;;;258            return (Pin_num - 11);
        0x0021c1a2:    b2c0        ..      UXTB     r0,r0
;;;259        }
;;;260    
;;;261        return 0xFF;
;;;262    }
        0x0021c1a4:    e796        ..      B        0x21c0d4 ; GPIO_Init + 128
    GPIO_DBClkCmd
        0x0021c1a6:    f04f4180    O..A    MOV      r1,#0x40000000
        0x0021c1aa:    2800        .(      CMP      r0,#0
        0x0021c1ac:    f8d10344    ..D.    LDR      r0,[r1,#0x344]
;;;263    
;;;264    /**
;;;265      * @brief get the specified GPIO pin number.
;;;266      * @param  Pin_num: This parameter is from ADC_0 to P4_1, please refer to rtl876x.h "Pin_Number" part.
;;;267      * @retval  GPIO pin number.
;;;268      */
;;;269    void GPIO_DBClkCmd(FunctionalState NewState)
;;;270    {
        0x0021c1b0:    d002        ..      BEQ      0x21c1b8 ; GPIO_DBClkCmd + 18
;;;271        if (NewState != DISABLE)
;;;272        {
;;;273            GPIO_DBCLK_DIV |= BIT12;
        0x0021c1b2:    f4405080    @..P    ORR      r0,r0,#0x1000
        0x0021c1b6:    e001        ..      B        0x21c1bc ; GPIO_DBClkCmd + 22
        0x0021c1b8:    f4205080     ..P    BIC      r0,r0,#0x1000
        0x0021c1bc:    f8c10344    ..D.    STR      r0,[r1,#0x344]
;;;274        }
;;;275        else
;;;276        {
;;;277            GPIO_DBCLK_DIV &= ~BIT12;
;;;278        }
;;;279    }
        0x0021c1c0:    e788        ..      B        0x21c0d4 ; GPIO_Init + 128
    $d
        0x0021c1c2:    0000        ..      DCW    0
        0x0021c1c4:    0c000100    ....    DCD    201326848
        0x0021c1c8:    40001000    ...@    DCD    1073745920
    $t
    .text
    link_mgr_add_device
;;; ..\..\..\src\sample\ble_central\link_mgr.c
;;;66     {
        0x0021c1cc:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0021c1d0:    4d15        .M      LDR      r5,[pc,#84] ; [0x21c228] = 0x20d1a4
;;; ..\..\..\src\sample\ble_central\link_mgr.c (66)
        0x0021c1d2:    4607        .F      MOV      r7,r0
        0x0021c1d4:    4688        .F      MOV      r8,r1
        0x0021c1d6:    7828        (x      LDRB     r0,[r5,#0]
        0x0021c1d8:    2806        .(      CMP      r0,#6
        0x0021c1da:    d21e        ..      BCS      0x21c21a ; link_mgr_add_device + 78
;;;67         /* If result count not at max */
;;;68         if (dev_list_count < APP_MAX_DEVICE_INFO)
;;;69         {
;;;70             uint8_t i;
;;;71             /* Check if device is already in device list*/
;;;72             for (i = 0; i < dev_list_count; i++)
        0x0021c1dc:    2400        .$      MOVS     r4,#0
        0x0021c1de:    1c6e        n.      ADDS     r6,r5,#1
        0x0021c1e0:    e009        ..      B        0x21c1f6 ; link_mgr_add_device + 42
        0x0021c1e2:    ebc400c4    ....    RSB      r0,r4,r4,LSL #3
        0x0021c1e6:    1981        ..      ADDS     r1,r0,r6
        0x0021c1e8:    2206        ."      MOVS     r2,#6
        0x0021c1ea:    4638        8F      MOV      r0,r7
        0x0021c1ec:    f63dfe0a    =...    BL       memcmp ; 0x59e04
        0x0021c1f0:    b180        ..      CBZ      r0,0x21c214 ; link_mgr_add_device + 72
        0x0021c1f2:    1c64        d.      ADDS     r4,r4,#1
        0x0021c1f4:    b2e4        ..      UXTB     r4,r4
        0x0021c1f6:    7828        (x      LDRB     r0,[r5,#0]
        0x0021c1f8:    4284        .B      CMP      r4,r0
        0x0021c1fa:    d3f2        ..      BCC      0x21c1e2 ; link_mgr_add_device + 22
;;;73             {
;;;74                 if (memcmp(bd_addr, dev_list[i].bd_addr, GAP_BD_ADDR_LEN) == 0)
;;;75                 {
;;;76                     return true;
;;;77                 }
;;;78             }
;;;79     
;;;80             /*Add addr to device list list*/
;;;81             memcpy(dev_list[dev_list_count].bd_addr, bd_addr, GAP_BD_ADDR_LEN);
        0x0021c1fc:    b2c0        ..      UXTB     r0,r0
        0x0021c1fe:    ebc001c0    ....    RSB      r1,r0,r0,LSL #3
        0x0021c202:    4431        1D      ADD      r1,r1,r6
        0x0021c204:    683a        :h      LDR      r2,[r7,#0]
        0x0021c206:    600a        .`      STR      r2,[r1,#0]
        0x0021c208:    88ba        ..      LDRH     r2,[r7,#4]
        0x0021c20a:    808a        ..      STRH     r2,[r1,#4]
;;;82             dev_list[dev_list_count].bd_type = bd_type;
        0x0021c20c:    f8818006    ....    STRB     r8,[r1,#6]
        0x0021c210:    1c40        @.      ADDS     r0,r0,#1
;;;83     
;;;84             /*Increment device list count*/
;;;85             dev_list_count++;
        0x0021c212:    7028        (p      STRB     r0,[r5,#0]
        0x0021c214:    2001        .       MOVS     r0,#1
        0x0021c216:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;86         }
;;;87         else
;;;88         {
;;;89             return false;
        0x0021c21a:    2000        .       MOVS     r0,#0
;;;90         }
;;;91         return true;
;;;92     }
        0x0021c21c:    e7fb        ..      B        0x21c216 ; link_mgr_add_device + 74
    link_mgr_clear_device_list
;;;93     
;;;94     /**
;;;95      * @brief Clear device list.
;;;96      * @retval None.
;;;97      */
;;;98     void link_mgr_clear_device_list(void)
;;;99     {
;;;100        dev_list_count = 0;
        0x0021c21e:    4902        .I      LDR      r1,[pc,#8] ; [0x21c228] = 0x20d1a4
        0x0021c220:    2000        .       MOVS     r0,#0
        0x0021c222:    7008        .p      STRB     r0,[r1,#0]
;;;101    }
        0x0021c224:    4770        pG      BX       lr
    $d
        0x0021c226:    0000        ..      DCW    0
        0x0021c228:    0020d1a4    .. .    DCD    2150820
    $t
    .text
    gap_sw_reset_req
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (123)
        0x0021c22c:    b570        p.      PUSH     {r4-r6,lr}
        0x0021c22e:    2402        .$      MOVS     r4,#2
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (123)
        0x0021c230:    4605        .F      MOV      r5,r0
        0x0021c232:    2801        .(      CMP      r0,#1
        0x0021c234:    d002        ..      BEQ      0x21c23c ; gap_sw_reset_req + 16
        0x0021c236:    2403        .$      MOVS     r4,#3
        0x0021c238:    4620         F      MOV      r0,r4
        0x0021c23a:    bd70        p.      POP      {r4-r6,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (127)
        0x0021c23c:    f631fc98    1...    BL       le_get_active_link_num ; 0x4db70
        0x0021c240:    2800        .(      CMP      r0,#0
        0x0021c242:    d1f9        ..      BNE      0x21c238 ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (128)
        0x0021c244:    4873        sH      LDR      r0,[pc,#460] ; [0x21c414] = 0x202e38
        0x0021c246:    7801        .x      LDRB     r1,[r0,#0]
        0x0021c248:    07c8        ..      LSLS     r0,r1,#31
        0x0021c24a:    d0f5        ..      BEQ      0x21c238 ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (129)
        0x0021c24c:    f0110f0c    ....    TST      r1,#0xc
        0x0021c250:    d0f2        ..      BEQ      0x21c238 ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (130)
        0x0021c252:    f0110f30    ..0.    TST      r1,#0x30
        0x0021c256:    d1ef        ..      BNE      0x21c238 ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (131)
        0x0021c258:    0988        ..      LSRS     r0,r1,#6
        0x0021c25a:    d1ed        ..      BNE      0x21c238 ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (133)
        0x0021c25c:    4628        (F      MOV      r0,r5
        0x0021c25e:    f605fa40    ..@.    BL       btif_sw_reset_req ; 0x216e2
        0x0021c262:    2800        .(      CMP      r0,#0
        0x0021c264:    d0e8        ..      BEQ      0x21c238 ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (135)
        0x0021c266:    2400        .$      MOVS     r4,#0
        0x0021c268:    e7e6        ..      B        0x21c238 ; gap_sw_reset_req + 12
    le_handle_sw_reset_rsp
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (147)
        0x0021c26a:    b538        8.      PUSH     {r3-r5,lr}
        0x0021c26c:    0004        ..      MOVS     r4,r0
        0x0021c26e:    d107        ..      BNE      0x21c280 ; le_handle_sw_reset_rsp + 22
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (150)
        0x0021c270:    4968        hI      LDR      r1,[pc,#416] ; [0x21c414] = 0x202e38
        0x0021c272:    7808        .x      LDRB     r0,[r1,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (151)
        0x0021c274:    f020000e     ...    BIC      r0,r0,#0xe
        0x0021c278:    7008        .p      STRB     r0,[r1,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (152)
        0x0021c27a:    20fc        .       MOVS     r0,#0xfc
        0x0021c27c:    f630fe21    0.!.    BL       gap_send_dev_state ; 0x4cec2
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (154)
        0x0021c280:    4865        eH      LDR      r0,[pc,#404] ; [0x21c418] = 0x202e48
        0x0021c282:    6802        .h      LDR      r2,[r0,#0]
        0x0021c284:    2a00        .*      CMP      r2,#0
        0x0021c286:    d004        ..      BEQ      0x21c292 ; le_handle_sw_reset_rsp + 40
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (157)
        0x0021c288:    f8ad4000    ...@    STRH     r4,[sp,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (158)
        0x0021c28c:    4669        iF      MOV      r1,sp
        0x0021c28e:    20a5        .       MOVS     r0,#0xa5
        0x0021c290:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (160)
        0x0021c292:    bd38        8.      POP      {r3-r5,pc}
    le_check_privacy_bond
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (166)
        0x0021c294:    b530        0.      PUSH     {r4,r5,lr}
        0x0021c296:    b08b        ..      SUB      sp,sp,#0x2c
        0x0021c298:    f04f0100    O...    MOV      r1,#0
        0x0021c29c:    4d5f        _M      LDR      r5,[pc,#380] ; [0x21c41c] = 0x21103502
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (166)
        0x0021c29e:    0004        ..      MOVS     r4,r0
        0x0021c2a0:    9106        ..      STR      r1,[sp,#0x18]
        0x0021c2a2:    9107        ..      STR      r1,[sp,#0x1c]
        0x0021c2a4:    9108        ..      STR      r1,[sp,#0x20]
        0x0021c2a6:    9109        ..      STR      r1,[sp,#0x24]
        0x0021c2a8:    d002        ..      BEQ      0x21c2b0 ; le_check_privacy_bond + 28
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (169)
        0x0021c2aa:    7820         x      LDRB     r0,[r4,#0]
        0x0021c2ac:    2801        .(      CMP      r0,#1
        0x0021c2ae:    d008        ..      BEQ      0x21c2c2 ; le_check_privacy_bond + 46
        0x0021c2b0:    2301        .#      MOVS     r3,#1
        0x0021c2b2:    2201        ."      MOVS     r2,#1
        0x0021c2b4:    495a        ZI      LDR      r1,[pc,#360] ; [0x21c420] = 0x88026ec
        0x0021c2b6:    4628        (F      MOV      r0,r5
        0x0021c2b8:    f5ebfbd1    ....    BL       log_buffer ; 0x7a5e
        0x0021c2bc:    2000        .       MOVS     r0,#0
        0x0021c2be:    b00b        ..      ADD      sp,sp,#0x2c
        0x0021c2c0:    bd30        0.      POP      {r4,r5,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (171)
        0x0021c2c2:    78a0        .x      LDRB     r0,[r4,#2]
        0x0021c2c4:    0700        ..      LSLS     r0,r0,#28
        0x0021c2c6:    d518        ..      BPL      0x21c2fa ; le_check_privacy_bond + 102
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (174)
        0x0021c2c8:    466a        jF      MOV      r2,sp
        0x0021c2ca:    2114        .!      MOVS     r1,#0x14
        0x0021c2cc:    4620         F      MOV      r0,r4
        0x0021c2ce:    f634f849    4.I.    BL       le_get_key ; 0x50364
        0x0021c2d2:    b180        ..      CBZ      r0,0x21c2f6 ; le_check_privacy_bond + 98
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (176)
        0x0021c2d4:    2210        ."      MOVS     r2,#0x10
        0x0021c2d6:    a906        ..      ADD      r1,sp,#0x18
        0x0021c2d8:    4668        hF      MOV      r0,sp
        0x0021c2da:    f63dfd93    =...    BL       memcmp ; 0x59e04
        0x0021c2de:    b140        @.      CBZ      r0,0x21c2f2 ; le_check_privacy_bond + 94
        0x0021c2e0:    494f        OI      LDR      r1,[pc,#316] ; [0x21c420] = 0x88026ec
        0x0021c2e2:    7863        cx      LDRB     r3,[r4,#1]
        0x0021c2e4:    2201        ."      MOVS     r2,#1
        0x0021c2e6:    3930        09      SUBS     r1,r1,#0x30
        0x0021c2e8:    4628        (F      MOV      r0,r5
        0x0021c2ea:    f5ebfbb8    ....    BL       log_buffer ; 0x7a5e
        0x0021c2ee:    2001        .       MOVS     r0,#1
        0x0021c2f0:    e7e5        ..      B        0x21c2be ; le_check_privacy_bond + 42
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (178)
        0x0021c2f2:    2305        .#      MOVS     r3,#5
        0x0021c2f4:    e7dd        ..      B        0x21c2b2 ; le_check_privacy_bond + 30
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (188)
        0x0021c2f6:    2304        .#      MOVS     r3,#4
        0x0021c2f8:    e7db        ..      B        0x21c2b2 ; le_check_privacy_bond + 30
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (193)
        0x0021c2fa:    2302        .#      MOVS     r3,#2
        0x0021c2fc:    e7d9        ..      B        0x21c2b2 ; le_check_privacy_bond + 30
    le_bond_just_work_confirm
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (205)
        0x0021c2fe:    460a        .F      MOV      r2,r1
        0x0021c300:    eb000140    ..@.    ADD      r1,r0,r0,LSL #1
        0x0021c304:    4847        GH      LDR      r0,[pc,#284] ; [0x21c424] = 0x202e64
        0x0021c306:    b510        ..      PUSH     {r4,lr}
        0x0021c308:    6800        .h      LDR      r0,[r0,#0]
        0x0021c30a:    eb001001    ....    ADD      r0,r0,r1,LSL #4
        0x0021c30e:    7801        .x      LDRB     r1,[r0,#0]
        0x0021c310:    b129        ).      CBZ      r1,0x21c31e ; le_bond_just_work_confirm + 32
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (208)
        0x0021c312:    7981        .y      LDRB     r1,[r0,#6]
        0x0021c314:    1dc0        ..      ADDS     r0,r0,#7
        0x0021c316:    f605f9a0    ....    BL       btif_just_work_req_cfm ; 0x2165a
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (210)
        0x0021c31a:    2000        .       MOVS     r0,#0
        0x0021c31c:    bd10        ..      POP      {r4,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (214)
        0x0021c31e:    2004        .       MOVS     r0,#4
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (216)
        0x0021c320:    bd10        ..      POP      {r4,pc}
    le_gen_rand_addr
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (220)
        0x0021c322:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0021c324:    b085        ..      SUB      sp,sp,#0x14
        0x0021c326:    460c        .F      MOV      r4,r1
        0x0021c328:    0005        ..      MOVS     r5,r0
        0x0021c32a:    d006        ..      BEQ      0x21c33a ; le_gen_rand_addr + 24
        0x0021c32c:    f605fee1    ....    BL       btif_le_gen_rand_addr ; 0x220f2
        0x0021c330:    2800        .(      CMP      r0,#0
        0x0021c332:    d048        H.      BEQ      0x21c3c6 ; le_gen_rand_addr + 164
        0x0021c334:    2000        .       MOVS     r0,#0
        0x0021c336:    b005        ..      ADD      sp,sp,#0x14
        0x0021c338:    bdf0        ..      POP      {r4-r7,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (224)
        0x0021c33a:    2600        .&      MOVS     r6,#0
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (226)
        0x0021c33c:    b384        ..      CBZ      r4,0x21c3a0 ; le_gen_rand_addr + 126
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (232)
        0x0021c33e:    f7fffe69    ..i.    BL       rand ; 0x21c014
        0x0021c342:    7020         p      STRB     r0,[r4,#0]
        0x0021c344:    1c67        g.      ADDS     r7,r4,#1
        0x0021c346:    f7fffe65    ..e.    BL       rand ; 0x21c014
        0x0021c34a:    0a00        ..      LSRS     r0,r0,#8
        0x0021c34c:    7038        8p      STRB     r0,[r7,#0]
        0x0021c34e:    f7fffe61    ..a.    BL       rand ; 0x21c014
        0x0021c352:    0c00        ..      LSRS     r0,r0,#16
        0x0021c354:    7078        xp      STRB     r0,[r7,#1]
        0x0021c356:    f7fffe5d    ..].    BL       rand ; 0x21c014
        0x0021c35a:    0e00        ..      LSRS     r0,r0,#24
        0x0021c35c:    70b8        .p      STRB     r0,[r7,#2]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (233)
        0x0021c35e:    f7fffe59    ..Y.    BL       rand ; 0x21c014
        0x0021c362:    70f8        .p      STRB     r0,[r7,#3]
        0x0021c364:    f7fffe56    ..V.    BL       rand ; 0x21c014
        0x0021c368:    0a00        ..      LSRS     r0,r0,#8
        0x0021c36a:    7138        8q      STRB     r0,[r7,#4]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (235)
        0x0021c36c:    f04000c0    @...    ORR      r0,r0,#0xc0
        0x0021c370:    7160        `q      STRB     r0,[r4,#5]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (236)
        0x0021c372:    a02d        -.      ADR      r0,{pc}+0xb6 ; 0x21c428
        0x0021c374:    2206        ."      MOVS     r2,#6
        0x0021c376:    e9d01000    ....    LDRD     r1,r0,[r0,#0]
        0x0021c37a:    e9cd1001    ....    STRD     r1,r0,[sp,#4]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (237)
        0x0021c37e:    a02c        ,.      ADR      r0,{pc}+0xb2 ; 0x21c430
        0x0021c380:    e9d01000    ....    LDRD     r1,r0,[r0,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (238)
        0x0021c384:    e9cd1003    ....    STRD     r1,r0,[sp,#0xc]
        0x0021c388:    a901        ..      ADD      r1,sp,#4
        0x0021c38a:    4620         F      MOV      r0,r4
        0x0021c38c:    f63dfd3a    =.:.    BL       memcmp ; 0x59e04
        0x0021c390:    b148        H.      CBZ      r0,0x21c3a6 ; le_gen_rand_addr + 132
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (239)
        0x0021c392:    2206        ."      MOVS     r2,#6
        0x0021c394:    a903        ..      ADD      r1,sp,#0xc
        0x0021c396:    4620         F      MOV      r0,r4
        0x0021c398:    f63dfd34    =.4.    BL       memcmp ; 0x59e04
        0x0021c39c:    b118        ..      CBZ      r0,0x21c3a6 ; le_gen_rand_addr + 132
        0x0021c39e:    e004        ..      B        0x21c3aa ; le_gen_rand_addr + 136
        0x0021c3a0:    e7ff        ..      B        0x21c3a2 ; le_gen_rand_addr + 128
        0x0021c3a2:    2003        .       MOVS     r0,#3
        0x0021c3a4:    e7c7        ..      B        0x21c336 ; le_gen_rand_addr + 20
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (241)
        0x0021c3a6:    2066        f       MOVS     r0,#0x66
        0x0021c3a8:    7020         p      STRB     r0,[r4,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (243)
        0x0021c3aa:    4621        !F      MOV      r1,r4
        0x0021c3ac:    4822        "H      LDR      r0,[pc,#136] ; [0x21c438] = 0x21300000
        0x0021c3ae:    f5ebfd13    ....    BL       trace_bdaddr ; 0x7dd8
        0x0021c3b2:    491b        .I      LDR      r1,[pc,#108] ; [0x21c420] = 0x88026ec
        0x0021c3b4:    4603        .F      MOV      r3,r0
        0x0021c3b6:    2202        ."      MOVS     r2,#2
        0x0021c3b8:    3138        81      ADDS     r1,r1,#0x38
        0x0021c3ba:    4818        .H      LDR      r0,[pc,#96] ; [0x21c41c] = 0x21103502
        0x0021c3bc:    9500        ..      STR      r5,[sp,#0]
        0x0021c3be:    f5ebfb4e    ..N.    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (245)
        0x0021c3c2:    4630        0F      MOV      r0,r6
        0x0021c3c4:    e7b7        ..      B        0x21c336 ; le_gen_rand_addr + 20
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (251)
        0x0021c3c6:    2007        .       MOVS     r0,#7
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (252)
        0x0021c3c8:    e7b5        ..      B        0x21c336 ; le_gen_rand_addr + 20
    le_bond_get_sec_level
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (266)
        0x0021c3ca:    b510        ..      PUSH     {r4,lr}
        0x0021c3cc:    b08a        ..      SUB      sp,sp,#0x28
        0x0021c3ce:    460c        .F      MOV      r4,r1
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (269)
        0x0021c3d0:    2100        .!      MOVS     r1,#0
        0x0021c3d2:    7021        !p      STRB     r1,[r4,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (270)
        0x0021c3d4:    aa09        ..      ADD      r2,sp,#0x24
        0x0021c3d6:    a907        ..      ADD      r1,sp,#0x1c
        0x0021c3d8:    f631fc09    1...    BL       le_get_conn_addr ; 0x4dbee
        0x0021c3dc:    b1c0        ..      CBZ      r0,0x21c410 ; le_bond_get_sec_level + 70
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (273)
        0x0021c3de:    f89d1024    ..$.    LDRB     r1,[sp,#0x24]
        0x0021c3e2:    a807        ..      ADD      r0,sp,#0x1c
        0x0021c3e4:    f633fed3    3...    BL       le_find_key_entry ; 0x5018e
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (274)
        0x0021c3e8:    b190        ..      CBZ      r0,0x21c410 ; le_bond_get_sec_level + 70
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (277)
        0x0021c3ea:    466a        jF      MOV      r2,sp
        0x0021c3ec:    2111        .!      MOVS     r1,#0x11
        0x0021c3ee:    f633ffb9    3...    BL       le_get_key ; 0x50364
        0x0021c3f2:    b168        h.      CBZ      r0,0x21c410 ; le_bond_get_sec_level + 70
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (279)
        0x0021c3f4:    490a        .I      LDR      r1,[pc,#40] ; [0x21c420] = 0x88026ec
        0x0021c3f6:    f89d301b    ...0    LDRB     r3,[sp,#0x1b]
        0x0021c3fa:    2201        ."      MOVS     r2,#1
        0x0021c3fc:    3174        t1      ADDS     r1,r1,#0x74
        0x0021c3fe:    4807        .H      LDR      r0,[pc,#28] ; [0x21c41c] = 0x21103502
        0x0021c400:    f5ebfb2d    ..-.    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (280)
        0x0021c404:    f89d001b    ....    LDRB     r0,[sp,#0x1b]
        0x0021c408:    7020         p      STRB     r0,[r4,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (281)
        0x0021c40a:    2000        .       MOVS     r0,#0
        0x0021c40c:    b00a        ..      ADD      sp,sp,#0x28
        0x0021c40e:    bd10        ..      POP      {r4,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (285)
        0x0021c410:    2003        .       MOVS     r0,#3
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (286)
        0x0021c412:    e7fb        ..      B        0x21c40c ; le_bond_get_sec_level + 66
    $d
        0x0021c414:    00202e38    8. .    DCD    2108984
        0x0021c418:    00202e48    H. .    DCD    2109000
        0x0021c41c:    21103502    .5.!    DCD    554710274
        0x0021c420:    088026ec    .&..    DCD    142616300
        0x0021c424:    00202e64    d. .    DCD    2109028
        0x0021c428:    00000000    ....    DCD    0
        0x0021c42c:    0000c000    ....    DCD    49152
        0x0021c430:    ffffffff    ....    DCD    4294967295
        0x0021c434:    0000ffff    ....    DCD    65535
        0x0021c438:    21300000    ..0!    DCD    556793856
    $t
    .text
    __2sprintf
        0x0021c43c:    b40f        ..      PUSH     {r0-r3}
        0x0021c43e:    b51c        ..      PUSH     {r2-r4,lr}
        0x0021c440:    4b07        .K      LDR      r3,[pc,#28] ; [0x21c460] = 0x2e5
        0x0021c442:    aa06        ..      ADD      r2,sp,#0x18
        0x0021c444:    447b        {D      ADD      r3,r3,pc
        0x0021c446:    4669        iF      MOV      r1,sp
        0x0021c448:    9000        ..      STR      r0,[sp,#0]
        0x0021c44a:    9805        ..      LDR      r0,[sp,#0x14]
        0x0021c44c:    f000f95b    ..[.    BL       _printf_char_common ; 0x21c706
        0x0021c450:    2000        .       MOVS     r0,#0
        0x0021c452:    4669        iF      MOV      r1,sp
        0x0021c454:    f000f96a    ..j.    BL       _sputc ; 0x21c72c
        0x0021c458:    bc1c        ..      POP      {r2-r4}
        0x0021c45a:    f85dfb14    ]...    LDR      pc,[sp],#0x14
    $d
        0x0021c45e:    0000        ..      DCW    0
        0x0021c460:    000002e5    ....    DCD    741
    $t
    .text
    _printf_pre_padding
        0x0021c464:    b570        p.      PUSH     {r4-r6,lr}
        0x0021c466:    4604        .F      MOV      r4,r0
        0x0021c468:    6985        .i      LDR      r5,[r0,#0x18]
        0x0021c46a:    6800        .h      LDR      r0,[r0,#0]
        0x0021c46c:    06c1        ..      LSLS     r1,r0,#27
        0x0021c46e:    d501        ..      BPL      0x21c474 ; _printf_pre_padding + 16
        0x0021c470:    2630        0&      MOVS     r6,#0x30
        0x0021c472:    e000        ..      B        0x21c476 ; _printf_pre_padding + 18
        0x0021c474:    2620         &      MOVS     r6,#0x20
        0x0021c476:    07c0        ..      LSLS     r0,r0,#31
        0x0021c478:    d007        ..      BEQ      0x21c48a ; _printf_pre_padding + 38
        0x0021c47a:    bd70        p.      POP      {r4-r6,pc}
        0x0021c47c:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0021c480:    4630        0F      MOV      r0,r6
        0x0021c482:    4790        .G      BLX      r2
        0x0021c484:    6a20         j      LDR      r0,[r4,#0x20]
        0x0021c486:    1c40        @.      ADDS     r0,r0,#1
        0x0021c488:    6220         b      STR      r0,[r4,#0x20]
        0x0021c48a:    1e6d        m.      SUBS     r5,r5,#1
        0x0021c48c:    d5f6        ..      BPL      0x21c47c ; _printf_pre_padding + 24
        0x0021c48e:    bd70        p.      POP      {r4-r6,pc}
    _printf_post_padding
        0x0021c490:    b570        p.      PUSH     {r4-r6,lr}
        0x0021c492:    4604        .F      MOV      r4,r0
        0x0021c494:    6985        .i      LDR      r5,[r0,#0x18]
        0x0021c496:    7800        .x      LDRB     r0,[r0,#0]
        0x0021c498:    07c0        ..      LSLS     r0,r0,#31
        0x0021c49a:    d107        ..      BNE      0x21c4ac ; _printf_post_padding + 28
        0x0021c49c:    bd70        p.      POP      {r4-r6,pc}
        0x0021c49e:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0021c4a2:    2020                MOVS     r0,#0x20
        0x0021c4a4:    4790        .G      BLX      r2
        0x0021c4a6:    6a20         j      LDR      r0,[r4,#0x20]
        0x0021c4a8:    1c40        @.      ADDS     r0,r0,#1
        0x0021c4aa:    6220         b      STR      r0,[r4,#0x20]
        0x0021c4ac:    1e6d        m.      SUBS     r5,r5,#1
        0x0021c4ae:    d5f6        ..      BPL      0x21c49e ; _printf_post_padding + 14
        0x0021c4b0:    bd70        p.      POP      {r4-r6,pc}
        0x0021c4b2:    0000        ..      MOVS     r0,r0
    .text
    _printf_int_dec
        0x0021c4b4:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0021c4b8:    4606        .F      MOV      r6,r0
        0x0021c4ba:    2400        .$      MOVS     r4,#0
        0x0021c4bc:    6810        .h      LDR      r0,[r2,#0]
        0x0021c4be:    2975        u)      CMP      r1,#0x75
        0x0021c4c0:    4631        1F      MOV      r1,r6
        0x0021c4c2:    a516        ..      ADR      r5,{pc}+0x5a ; 0x21c51c
        0x0021c4c4:    d010        ..      BEQ      0x21c4e8 ; _printf_int_dec + 52
        0x0021c4c6:    f3af8000    ....    NOP.W    
        0x0021c4ca:    2800        .(      CMP      r0,#0
        0x0021c4cc:    da02        ..      BGE      0x21c4d4 ; _printf_int_dec + 32
        0x0021c4ce:    4240        @B      RSBS     r0,r0,#0
        0x0021c4d0:    a513        ..      ADR      r5,{pc}+0x50 ; 0x21c520
        0x0021c4d2:    e007        ..      B        0x21c4e4 ; _printf_int_dec + 48
        0x0021c4d4:    6831        1h      LDR      r1,[r6,#0]
        0x0021c4d6:    078a        ..      LSLS     r2,r1,#30
        0x0021c4d8:    d501        ..      BPL      0x21c4de ; _printf_int_dec + 42
        0x0021c4da:    a512        ..      ADR      r5,{pc}+0x4a ; 0x21c524
        0x0021c4dc:    e002        ..      B        0x21c4e4 ; _printf_int_dec + 48
        0x0021c4de:    0749        I.      LSLS     r1,r1,#29
        0x0021c4e0:    d504        ..      BPL      0x21c4ec ; _printf_int_dec + 56
        0x0021c4e2:    a511        ..      ADR      r5,{pc}+0x46 ; 0x21c528
        0x0021c4e4:    2401        .$      MOVS     r4,#1
        0x0021c4e6:    e001        ..      B        0x21c4ec ; _printf_int_dec + 56
        0x0021c4e8:    f3af8000    ....    NOP.W    
        0x0021c4ec:    2100        .!      MOVS     r1,#0
        0x0021c4ee:    220a        ."      MOVS     r2,#0xa
        0x0021c4f0:    f1060724    ..$.    ADD      r7,r6,#0x24
        0x0021c4f4:    e009        ..      B        0x21c50a ; _printf_int_dec + 86
        0x0021c4f6:    fbb0fcf2    ....    UDIV     r12,r0,r2
        0x0021c4fa:    fbb0f3f2    ....    UDIV     r3,r0,r2
        0x0021c4fe:    fb02001c    ....    MLS      r0,r2,r12,r0
        0x0021c502:    3030        00      ADDS     r0,r0,#0x30
        0x0021c504:    5478        xT      STRB     r0,[r7,r1]
        0x0021c506:    4618        .F      MOV      r0,r3
        0x0021c508:    1c49        I.      ADDS     r1,r1,#1
        0x0021c50a:    2800        .(      CMP      r0,#0
        0x0021c50c:    d1f3        ..      BNE      0x21c4f6 ; _printf_int_dec + 66
        0x0021c50e:    4623        #F      MOV      r3,r4
        0x0021c510:    462a        *F      MOV      r2,r5
        0x0021c512:    4630        0F      MOV      r0,r6
        0x0021c514:    e8bd41f0    ...A    POP      {r4-r8,lr}
        0x0021c518:    f7efbc00    ....    B        _printf_int_common ; 0x20bd1c
    $d
        0x0021c51c:    00000000    ....    DCD    0
        0x0021c520:    0000002d    -...    DCD    45
        0x0021c524:    0000002b    +...    DCD    43
        0x0021c528:    00000020     ...    DCD    32
    $t
    .text
    __printf
        0x0021c52c:    e92d5ff0    -.._    PUSH     {r4-r12,lr}
        0x0021c530:    4689        .F      MOV      r9,r1
        0x0021c532:    4604        .F      MOV      r4,r0
        0x0021c534:    f04f0a00    O...    MOV      r10,#0
        0x0021c538:    f8dfb124    ..$.    LDR      r11,[pc,#292] ; [0x21c660] = 0x513
        0x0021c53c:    44fb        .D      ADD      r11,r11,pc
        0x0021c53e:    f8c0a020    .. .    STR      r10,[r0,#0x20]
        0x0021c542:    4620         F      MOV      r0,r4
        0x0021c544:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0021c546:    4788        .G      BLX      r1
        0x0021c548:    2800        .(      CMP      r0,#0
        0x0021c54a:    d07d        }.      BEQ      0x21c648 ; __printf + 284
        0x0021c54c:    2825        %(      CMP      r0,#0x25
        0x0021c54e:    d006        ..      BEQ      0x21c55e ; __printf + 50
        0x0021c550:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0021c554:    4790        .G      BLX      r2
        0x0021c556:    6a20         j      LDR      r0,[r4,#0x20]
        0x0021c558:    1c40        @.      ADDS     r0,r0,#1
        0x0021c55a:    6220         b      STR      r0,[r4,#0x20]
        0x0021c55c:    e7f1        ..      B        0x21c542 ; __printf + 22
        0x0021c55e:    2500        .%      MOVS     r5,#0
        0x0021c560:    465f        _F      MOV      r7,r11
        0x0021c562:    4620         F      MOV      r0,r4
        0x0021c564:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0021c566:    4788        .G      BLX      r1
        0x0021c568:    2820         (      CMP      r0,#0x20
        0x0021c56a:    4606        .F      MOV      r6,r0
        0x0021c56c:    db07        ..      BLT      0x21c57e ; __printf + 82
        0x0021c56e:    2e31        1.      CMP      r6,#0x31
        0x0021c570:    d205        ..      BCS      0x21c57e ; __printf + 82
        0x0021c572:    19b8        ..      ADDS     r0,r7,r6
        0x0021c574:    f8100c20    .. .    LDRB     r0,[r0,#-0x20]
        0x0021c578:    b108        ..      CBZ      r0,0x21c57e ; __printf + 82
        0x0021c57a:    4305        .C      ORRS     r5,r5,r0
        0x0021c57c:    e7f1        ..      B        0x21c562 ; __printf + 54
        0x0021c57e:    07a8        ..      LSLS     r0,r5,#30
        0x0021c580:    d501        ..      BPL      0x21c586 ; __printf + 90
        0x0021c582:    f0250504    %...    BIC      r5,r5,#4
        0x0021c586:    f8c4a01c    ....    STR      r10,[r4,#0x1c]
        0x0021c58a:    2700        .'      MOVS     r7,#0
        0x0021c58c:    f8c4a018    ....    STR      r10,[r4,#0x18]
        0x0021c590:    2e2a        *.      CMP      r6,#0x2a
        0x0021c592:    d009        ..      BEQ      0x21c5a8 ; __printf + 124
        0x0021c594:    4630        0F      MOV      r0,r6
        0x0021c596:    f7effc1a    ....    BL       _is_digit ; 0x20bdce
        0x0021c59a:    b338        8.      CBZ      r0,0x21c5ec ; __printf + 192
        0x0021c59c:    eb040887    ....    ADD      r8,r4,r7,LSL #2
        0x0021c5a0:    3e30        0>      SUBS     r6,r6,#0x30
        0x0021c5a2:    f8c86018    ...`    STR      r6,[r8,#0x18]
        0x0021c5a6:    e019        ..      B        0x21c5dc ; __printf + 176
        0x0021c5a8:    f8591b04    Y...    LDR      r1,[r9],#4
        0x0021c5ac:    4620         F      MOV      r0,r4
        0x0021c5ae:    eb040287    ....    ADD      r2,r4,r7,LSL #2
        0x0021c5b2:    6191        .a      STR      r1,[r2,#0x18]
        0x0021c5b4:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0021c5b6:    4788        .G      BLX      r1
        0x0021c5b8:    2f01        ./      CMP      r7,#1
        0x0021c5ba:    4606        .F      MOV      r6,r0
        0x0021c5bc:    d118        ..      BNE      0x21c5f0 ; __printf + 196
        0x0021c5be:    69e0        .i      LDR      r0,[r4,#0x1c]
        0x0021c5c0:    2800        .(      CMP      r0,#0
        0x0021c5c2:    da20         .      BGE      0x21c606 ; __printf + 218
        0x0021c5c4:    f0250520    %. .    BIC      r5,r5,#0x20
        0x0021c5c8:    e01d        ..      B        0x21c606 ; __printf + 218
        0x0021c5ca:    f8d80018    ....    LDR      r0,[r8,#0x18]
        0x0021c5ce:    eb000080    ....    ADD      r0,r0,r0,LSL #2
        0x0021c5d2:    eb060040    ..@.    ADD      r0,r6,r0,LSL #1
        0x0021c5d6:    3830        08      SUBS     r0,r0,#0x30
        0x0021c5d8:    f8c80018    ....    STR      r0,[r8,#0x18]
        0x0021c5dc:    4620         F      MOV      r0,r4
        0x0021c5de:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0021c5e0:    4788        .G      BLX      r1
        0x0021c5e2:    4606        .F      MOV      r6,r0
        0x0021c5e4:    f7effbf3    ....    BL       _is_digit ; 0x20bdce
        0x0021c5e8:    2800        .(      CMP      r0,#0
        0x0021c5ea:    d1ee        ..      BNE      0x21c5ca ; __printf + 158
        0x0021c5ec:    2f01        ./      CMP      r7,#1
        0x0021c5ee:    d00a        ..      BEQ      0x21c606 ; __printf + 218
        0x0021c5f0:    2e2e        ..      CMP      r6,#0x2e
        0x0021c5f2:    d108        ..      BNE      0x21c606 ; __printf + 218
        0x0021c5f4:    4620         F      MOV      r0,r4
        0x0021c5f6:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0021c5f8:    4788        .G      BLX      r1
        0x0021c5fa:    1c7f        ..      ADDS     r7,r7,#1
        0x0021c5fc:    4606        .F      MOV      r6,r0
        0x0021c5fe:    2f02        ./      CMP      r7,#2
        0x0021c600:    f0450520    E. .    ORR      r5,r5,#0x20
        0x0021c604:    dbc4        ..      BLT      0x21c590 ; __printf + 100
        0x0021c606:    69a0        .i      LDR      r0,[r4,#0x18]
        0x0021c608:    2800        .(      CMP      r0,#0
        0x0021c60a:    da03        ..      BGE      0x21c614 ; __printf + 232
        0x0021c60c:    4240        @B      RSBS     r0,r0,#0
        0x0021c60e:    f0450501    E...    ORR      r5,r5,#1
        0x0021c612:    61a0        .a      STR      r0,[r4,#0x18]
        0x0021c614:    07e8        ..      LSLS     r0,r5,#31
        0x0021c616:    d001        ..      BEQ      0x21c61c ; __printf + 240
        0x0021c618:    f0250510    %...    BIC      r5,r5,#0x10
        0x0021c61c:    b1a6        ..      CBZ      r6,0x21c648 ; __printf + 284
        0x0021c61e:    f1a60041    ..A.    SUB      r0,r6,#0x41
        0x0021c622:    2819        .(      CMP      r0,#0x19
        0x0021c624:    d802        ..      BHI      0x21c62c ; __printf + 256
        0x0021c626:    3620         6      ADDS     r6,r6,#0x20
        0x0021c628:    f4456500    E..e    ORR      r5,r5,#0x800
        0x0021c62c:    464a        JF      MOV      r2,r9
        0x0021c62e:    4631        1F      MOV      r1,r6
        0x0021c630:    4620         F      MOV      r0,r4
        0x0021c632:    6025        %`      STR      r5,[r4,#0]
        0x0021c634:    464d        MF      MOV      r5,r9
        0x0021c636:    f7ebfae3    ....    BL       _printf_d ; 0x207c00
        0x0021c63a:    b160        `.      CBZ      r0,0x21c656 ; __printf + 298
        0x0021c63c:    2801        .(      CMP      r0,#1
        0x0021c63e:    d007        ..      BEQ      0x21c650 ; __printf + 292
        0x0021c640:    1ded        ..      ADDS     r5,r5,#7
        0x0021c642:    f0250007    %...    BIC      r0,r5,#7
        0x0021c646:    e000        ..      B        0x21c64a ; __printf + 286
        0x0021c648:    e007        ..      B        0x21c65a ; __printf + 302
        0x0021c64a:    f1000908    ....    ADD      r9,r0,#8
        0x0021c64e:    e778        x.      B        0x21c542 ; __printf + 22
        0x0021c650:    f1050904    ....    ADD      r9,r5,#4
        0x0021c654:    e775        u.      B        0x21c542 ; __printf + 22
        0x0021c656:    4630        0F      MOV      r0,r6
        0x0021c658:    e77a        z.      B        0x21c550 ; __printf + 36
        0x0021c65a:    6a20         j      LDR      r0,[r4,#0x20]
        0x0021c65c:    e8bd9ff0    ....    POP      {r4-r12,pc}
    $d
        0x0021c660:    00000513    ....    DCD    1299
    $t
    .text
    strncmp
        0x0021c664:    ea400301    @...    ORR      r3,r0,r1
        0x0021c668:    b570        p.      PUSH     {r4-r6,lr}
        0x0021c66a:    079b        ..      LSLS     r3,r3,#30
        0x0021c66c:    d12e        ..      BNE      0x21c6cc ; strncmp + 104
        0x0021c66e:    f04f3601    O..6    MOV      r6,#0x1010101
        0x0021c672:    2a04        .*      CMP      r2,#4
        0x0021c674:    d32a        *.      BCC      0x21c6cc ; strncmp + 104
        0x0021c676:    c808        ..      LDM      r0!,{r3}
        0x0021c678:    c910        ..      LDM      r1!,{r4}
        0x0021c67a:    1b9d        ..      SUBS     r5,r3,r6
        0x0021c67c:    439d        .C      BICS     r5,r5,r3
        0x0021c67e:    1f12        ..      SUBS     r2,r2,#4
        0x0021c680:    ea1515c6    ....    ANDS     r5,r5,r6,LSL #7
        0x0021c684:    d017        ..      BEQ      0x21c6b6 ; strncmp + 82
        0x0021c686:    b2d8        ..      UXTB     r0,r3
        0x0021c688:    b2e1        ..      UXTB     r1,r4
        0x0021c68a:    1a40        @.      SUBS     r0,r0,r1
        0x0021c68c:    ea506105    P..a    ORRS     r1,r0,r5,LSL #24
        0x0021c690:    d110        ..      BNE      0x21c6b4 ; strncmp + 80
        0x0021c692:    b298        ..      UXTH     r0,r3
        0x0021c694:    b2a1        ..      UXTH     r1,r4
        0x0021c696:    1a40        @.      SUBS     r0,r0,r1
        0x0021c698:    ea504105    P..A    ORRS     r1,r0,r5,LSL #16
        0x0021c69c:    d10a        ..      BNE      0x21c6b4 ; strncmp + 80
        0x0021c69e:    f023407f    #..@    BIC      r0,r3,#0xff000000
        0x0021c6a2:    f024417f    $..A    BIC      r1,r4,#0xff000000
        0x0021c6a6:    1a40        @.      SUBS     r0,r0,r1
        0x0021c6a8:    ea502105    P..!    ORRS     r1,r0,r5,LSL #8
        0x0021c6ac:    d102        ..      BNE      0x21c6b4 ; strncmp + 80
        0x0021c6ae:    0e18        ..      LSRS     r0,r3,#24
        0x0021c6b0:    eba06014    ...`    SUB      r0,r0,r4,LSR #24
        0x0021c6b4:    bd70        p.      POP      {r4-r6,pc}
        0x0021c6b6:    42a3        .B      CMP      r3,r4
        0x0021c6b8:    d0db        ..      BEQ      0x21c672 ; strncmp + 14
        0x0021c6ba:    ba18        ..      REV      r0,r3
        0x0021c6bc:    ba21        !.      REV      r1,r4
        0x0021c6be:    4288        .B      CMP      r0,r1
        0x0021c6c0:    d901        ..      BLS      0x21c6c6 ; strncmp + 98
        0x0021c6c2:    2001        .       MOVS     r0,#1
        0x0021c6c4:    bd70        p.      POP      {r4-r6,pc}
        0x0021c6c6:    f04f30ff    O..0    MOV      r0,#0xffffffff
        0x0021c6ca:    bd70        p.      POP      {r4-r6,pc}
        0x0021c6cc:    b90a        ..      CBNZ     r2,0x21c6d2 ; strncmp + 110
        0x0021c6ce:    2000        .       MOVS     r0,#0
        0x0021c6d0:    bd70        p.      POP      {r4-r6,pc}
        0x0021c6d2:    f8103b01    ...;    LDRB     r3,[r0],#1
        0x0021c6d6:    f8114b01    ...K    LDRB     r4,[r1],#1
        0x0021c6da:    b163        c.      CBZ      r3,0x21c6f6 ; strncmp + 146
        0x0021c6dc:    42a3        .B      CMP      r3,r4
        0x0021c6de:    d10a        ..      BNE      0x21c6f6 ; strncmp + 146
        0x0021c6e0:    1e52        R.      SUBS     r2,r2,#1
        0x0021c6e2:    d008        ..      BEQ      0x21c6f6 ; strncmp + 146
        0x0021c6e4:    f8103b01    ...;    LDRB     r3,[r0],#1
        0x0021c6e8:    f8114b01    ...K    LDRB     r4,[r1],#1
        0x0021c6ec:    b11b        ..      CBZ      r3,0x21c6f6 ; strncmp + 146
        0x0021c6ee:    42a3        .B      CMP      r3,r4
        0x0021c6f0:    d101        ..      BNE      0x21c6f6 ; strncmp + 146
        0x0021c6f2:    1e52        R.      SUBS     r2,r2,#1
        0x0021c6f4:    d1ed        ..      BNE      0x21c6d2 ; strncmp + 110
        0x0021c6f6:    1b18        ..      SUBS     r0,r3,r4
        0x0021c6f8:    bd70        p.      POP      {r4-r6,pc}
        0x0021c6fa:    0000        ..      MOVS     r0,r0
    .text
    _printf_input_char
        0x0021c6fc:    6901        .i      LDR      r1,[r0,#0x10]
        0x0021c6fe:    1c4a        J.      ADDS     r2,r1,#1
        0x0021c700:    6102        .a      STR      r2,[r0,#0x10]
        0x0021c702:    7808        .x      LDRB     r0,[r1,#0]
        0x0021c704:    4770        pG      BX       lr
    _printf_char_common
        0x0021c706:    b500        ..      PUSH     {lr}
        0x0021c708:    b08f        ..      SUB      sp,sp,#0x3c
        0x0021c70a:    e9cd3101    ...1    STRD     r3,r1,[sp,#4]
        0x0021c70e:    2100        .!      MOVS     r1,#0
        0x0021c710:    9105        ..      STR      r1,[sp,#0x14]
        0x0021c712:    4905        .I      LDR      r1,[pc,#20] ; [0x21c728] = 0xffffffe5
        0x0021c714:    4479        yD      ADD      r1,r1,pc
        0x0021c716:    e9cd1003    ....    STRD     r1,r0,[sp,#0xc]
        0x0021c71a:    4611        .F      MOV      r1,r2
        0x0021c71c:    4668        hF      MOV      r0,sp
        0x0021c71e:    f7ffff05    ....    BL       __printf ; 0x21c52c
        0x0021c722:    b00f        ..      ADD      sp,sp,#0x3c
        0x0021c724:    bd00        ..      POP      {pc}
    $d
        0x0021c726:    0000        ..      DCW    0
        0x0021c728:    ffffffe5    ....    DCD    4294967269
    $t
    .text
    _sputc
        0x0021c72c:    680a        .h      LDR      r2,[r1,#0]
        0x0021c72e:    f8020b01    ....    STRB     r0,[r2],#1
        0x0021c732:    600a        .`      STR      r2,[r1,#0]
        0x0021c734:    4770        pG      BX       lr
        0x0021c736:    0000        ..      MOVS     r0,r0
    $d.realdata
    .constdata
    __func__
        0x0021c738:    6c6c616d    mall    DCD    1819042157
        0x0021c73c:    636f        oc      DCW    25455
        0x0021c73e:    00          .       DCB    0
    __func__
        0x0021c73f:    63          c       DCB    99
        0x0021c740:    6f6c6c61    allo    DCD    1869376609
        0x0021c744:    0063        c.      DCW    99
    __func__
        0x0021c746:    6572        re      DCW    25970
        0x0021c748:    6f6c6c61    allo    DCD    1869376609
        0x0021c74c:    00000063    c...    DCD    99
        0x0021c750:    0020bfd0    .. .    DCD    2146256
        0x0021c754:    0020c07c    |. .    DCD    2146428
        0x0021c758:    0020bfc4    .. .    DCD    2146244
        0x0021c75c:    0020c084    .. .    DCD    2146436
        0x0021c760:    0020c028    (. .    DCD    2146344
        0x0021c764:    0020c09c    .. .    DCD    2146460
        0x0021c768:    0020c090    .. .    DCD    2146448
        0x0021c76c:    0020c018    .. .    DCD    2146328
        0x0021c770:    0020c018    .. .    DCD    2146328
        0x0021c774:    0020c018    .. .    DCD    2146328
        0x0021c778:    0020c018    .. .    DCD    2146328
        0x0021c77c:    0020bfb8    .. .    DCD    2146232
        0x0021c780:    0020c070    p. .    DCD    2146416
        0x0021c784:    0020c018    .. .    DCD    2146328
        0x0021c788:    0020bfe0    .. .    DCD    2146272
        0x0021c78c:    0020c040    @. .    DCD    2146368
        0x0021c790:    0020c054    T. .    DCD    2146388
        0x0021c794:    0020bfc0    .. .    DCD    2146240
        0x0021c798:    0020bfa8    .. .    DCD    2146216
        0x0021c79c:    0020bf28    (. .    DCD    2146088
        0x0021c7a0:    0020befc    .. .    DCD    2146044
        0x0021c7a4:    0020c05c    \. .    DCD    2146396
        0x0021c7a8:    0020c010    .. .    DCD    2146320
        0x0021c7ac:    0020bffc    .. .    DCD    2146300
        0x0021c7b0:    0020bf94    .. .    DCD    2146196
        0x0021c7b4:    0020bf54    T. .    DCD    2146132
        0x0021c7b8:    0020bf74    t. .    DCD    2146164
        0x0021c7bc:    0020bed8    .. .    DCD    2146008
        0x0021c7c0:    0020bea4    .. .    DCD    2145956
        0x0021c7c4:    0020bfb4    .. .    DCD    2146228
        0x0021c7c8:    0020be9c    .. .    DCD    2145948
        0x0021c7cc:    0020bed0    .. .    DCD    2146000
        0x0021c7d0:    0020be94    .. .    DCD    2145940
        0x0021c7d4:    0020bec8    .. .    DCD    2145992
        0x0021c7d8:    0020bfb0    .. .    DCD    2146224
        0x0021c7dc:    0020c048    H. .    DCD    2146376
        0x0021c7e0:    0020beac    .. .    DCD    2145964
        0x0021c7e4:    0020bee0    .. .    DCD    2146016
        0x0021c7e8:    0020bf0c    .. .    DCD    2146060
        0x0021c7ec:    0020bf30    0. .    DCD    2146096
        0x0021c7f0:    0020bf5c    \. .    DCD    2146140
        0x0021c7f4:    0020bf7c    |. .    DCD    2146172
        0x0021c7f8:    0020bf40    @. .    DCD    2146112
        0x0021c7fc:    0020bf1c    .. .    DCD    2146076
        0x0021c800:    0020bfdc    .. .    DCD    2146268
        0x0021c804:    0020bef0    .. .    DCD    2146032
        0x0021c808:    0020bebc    .. .    DCD    2145980
        0x0021c80c:    0020bf04    .. .    DCD    2146052
        0x0021c810:    0020bf4c    L. .    DCD    2146124
        0x0021c814:    0020bf6c    l. .    DCD    2146156
        0x0021c818:    0020bf8c    .. .    DCD    2146188
        0x0021c81c:    0020bfa0    .. .    DCD    2146208
        0x0021c820:    0020c034    4. .    DCD    2146356
        0x0021c824:    0020c020     . .    DCD    2146336
        0x0021c828:    0020c068    h. .    DCD    2146408
        0x0021c82c:    0020bfe8    .. .    DCD    2146280
        0x0021c830:    0020bfc8    .. .    DCD    2146248
        0x0021c834:    0020c0a8    .. .    DCD    2146472
        0x0021c838:    0020c004    .. .    DCD    2146308
        0x0021c83c:    0020bff0    .. .    DCD    2146288
        0x0021c840:    0020bfbc    .. .    DCD    2146236
    .constdata
    bas_client_cbs
        0x0021c844:    00208ea9    .. .    DCD    2133673
        0x0021c848:    00208f91    .. .    DCD    2133905
        0x0021c84c:    0020906b    k. .    DCD    2134123
        0x0021c850:    0020900d    .. .    DCD    2134029
        0x0021c854:    0020913b    ;. .    DCD    2134331
        0x0021c858:    00209175    u. .    DCD    2134389
    __func__
        0x0021c85c:    5f736162    bas_    DCD    1601397090
        0x0021c860:    5f646461    add_    DCD    1600414817
        0x0021c864:    65696c63    clie    DCD    1701407843
        0x0021c868:    0000746e    nt..    DCD    29806
    .constdata
    gaps_client_cbs
        0x0021c86c:    002093fd    .. .    DCD    2135037
        0x0021c870:    002094b9    .. .    DCD    2135225
        0x0021c874:    00209551    Q. .    DCD    2135377
        0x0021c878:    00000000    ....    DCD    0
        0x0021c87c:    00000000    ....    DCD    0
        0x0021c880:    00209605    .. .    DCD    2135557
    __func__
        0x0021c884:    73706167    gaps    DCD    1936744807
        0x0021c888:    6464615f    _add    DCD    1684300127
        0x0021c88c:    696c635f    _cli    DCD    1768711007
        0x0021c890:    00746e65    ent.    DCD    7630437
    .constdata
    user_cmd_table
        0x0021c894:    0020cef0    .. .    DCD    2150128
        0x0021c898:    0020cba4    .. .    DCD    2149284
        0x0021c89c:    0020c6c0    .. .    DCD    2148032
        0x0021c8a0:    0020972d    -. .    DCD    2135853
        0x0021c8a4:    0020cedc    .. .    DCD    2150108
        0x0021c8a8:    0020cd50    P. .    DCD    2149712
        0x0021c8ac:    0020cdc4    .. .    DCD    2149828
        0x0021c8b0:    002096e5    .. .    DCD    2135781
        0x0021c8b4:    0020ce50    P. .    DCD    2149968
        0x0021c8b8:    0020c9c0    .. .    DCD    2148800
        0x0021c8bc:    0020cc7c    |. .    DCD    2149500
        0x0021c8c0:    0020975b    [. .    DCD    2135899
        0x0021c8c4:    0020ce88    .. .    DCD    2150024
        0x0021c8c8:    0020ca60    `. .    DCD    2148960
        0x0021c8cc:    0020c478    x. .    DCD    2147448
        0x0021c8d0:    00209761    a. .    DCD    2135905
        0x0021c8d4:    0020cea0    .. .    DCD    2150048
        0x0021c8d8:    0020c9d4    .. .    DCD    2148820
        0x0021c8dc:    0020ce18    .. .    DCD    2149912
        0x0021c8e0:    00209801    .. .    DCD    2136065
        0x0021c8e4:    0020ce94    .. .    DCD    2150036
        0x0021c8e8:    0020cb38    8. .    DCD    2149176
        0x0021c8ec:    0020c7e8    .. .    DCD    2148328
        0x0021c8f0:    00209807    .. .    DCD    2136071
        0x0021c8f4:    0020cf24    $. .    DCD    2150180
        0x0021c8f8:    0020cc08    .. .    DCD    2149384
        0x0021c8fc:    0020c944    D. .    DCD    2148676
        0x0021c900:    00209817    .. .    DCD    2136087
        0x0021c904:    0020cee4    .. .    DCD    2150116
        0x0021c908:    0020cdac    .. .    DCD    2149804
        0x0021c90c:    0020cd5c    \. .    DCD    2149724
        0x0021c910:    00209847    G. .    DCD    2136135
        0x0021c914:    0020cefc    .. .    DCD    2150140
        0x0021c918:    0020cdb8    .. .    DCD    2149816
        0x0021c91c:    0020cd84    .. .    DCD    2149764
        0x0021c920:    0020982b    +. .    DCD    2136107
        0x0021c924:    0020cec0    .. .    DCD    2150080
        0x0021c928:    0020ca24    $. .    DCD    2148900
        0x0021c92c:    0020cc48    H. .    DCD    2149448
        0x0021c930:    00209835    5. .    DCD    2136117
        0x0021c934:    0020cf08    .. .    DCD    2150152
        0x0021c938:    0020ce0c    .. .    DCD    2149900
        0x0021c93c:    0020cdec    .. .    DCD    2149868
        0x0021c940:    0020983b    ;. .    DCD    2136123
        0x0021c944:    0020ced4    .. .    DCD    2150100
        0x0021c948:    0020cb0c    .. .    DCD    2149132
        0x0021c94c:    0020c0b4    .. .    DCD    2146484
        0x0021c950:    00209885    .. .    DCD    2136197
        0x0021c954:    0020cec8    .. .    DCD    2150088
        0x0021c958:    0020cd44    D. .    DCD    2149700
        0x0021c95c:    0020cd38    8. .    DCD    2149688
        0x0021c960:    002098cb    .. .    DCD    2136267
        0x0021c964:    0020cf1c    .. .    DCD    2150172
        0x0021c968:    0020ce38    8. .    DCD    2149944
        0x0021c96c:    0020cc9c    .. .    DCD    2149532
        0x0021c970:    002098cf    .. .    DCD    2136271
        0x0021c974:    0020cee0    .. .    DCD    2150112
        0x0021c978:    0020cad4    .. .    DCD    2149076
        0x0021c97c:    0020c21c    .. .    DCD    2146844
        0x0021c980:    00209921    !. .    DCD    2136353
        0x0021c984:    0020cf14    .. .    DCD    2150164
        0x0021c988:    0020cbf8    .. .    DCD    2149368
        0x0021c98c:    0020c630    0. .    DCD    2147888
        0x0021c990:    00209995    .. .    DCD    2136469
        0x0021c994:    0020ce58    X. .    DCD    2149976
        0x0021c998:    0020ca9c    .. .    DCD    2149020
        0x0021c99c:    0020c3f8    .. .    DCD    2147320
        0x0021c9a0:    002099f3    .. .    DCD    2136563
        0x0021c9a4:    0020cea8    .. .    DCD    2150056
        0x0021c9a8:    0020c9e8    .. .    DCD    2148840
        0x0021c9ac:    0020cccc    .. .    DCD    2149580
        0x0021c9b0:    00209a09    .. .    DCD    2136585
        0x0021c9b4:    0020ce60    `. .    DCD    2149984
        0x0021c9b8:    0020cb7c    |. .    DCD    2149244
        0x0021c9bc:    0020c14c    L. .    DCD    2146636
        0x0021c9c0:    00209a29    ). .    DCD    2136617
        0x0021c9c4:    0020ce74    t. .    DCD    2150004
        0x0021c9c8:    0020ca38    8. .    DCD    2148920
        0x0021c9cc:    0020c874    t. .    DCD    2148468
        0x0021c9d0:    00209a4d    M. .    DCD    2136653
        0x0021c9d4:    0020ce44    D. .    DCD    2149956
        0x0021c9d8:    0020cb54    T. .    DCD    2149204
        0x0021c9dc:    0020c714    .. .    DCD    2148116
        0x0021c9e0:    00209a7d    }. .    DCD    2136701
        0x0021c9e4:    0020ceb0    .. .    DCD    2150064
        0x0021c9e8:    0020c9fc    .. .    DCD    2148860
        0x0021c9ec:    0020ccec    .. .    DCD    2149612
        0x0021c9f0:    00209abf    .. .    DCD    2136767
        0x0021c9f4:    0020ce6c    l. .    DCD    2149996
        0x0021c9f8:    0020cab8    .. .    DCD    2149048
        0x0021c9fc:    0020c2e8    .. .    DCD    2147048
        0x0021ca00:    00209ae1    .. .    DCD    2136801
        0x0021ca04:    0020ce80    .. .    DCD    2150016
        0x0021ca08:    0020cc28    (. .    DCD    2149416
        0x0021ca0c:    0020c37c    |. .    DCD    2147196
        0x0021ca10:    00209bcd    .. .    DCD    2137037
        0x0021ca14:    0020ceb8    .. .    DCD    2150072
        0x0021ca18:    0020ca10    .. .    DCD    2148880
        0x0021ca1c:    0020cd14    .. .    DCD    2149652
        0x0021ca20:    00209beb    .. .    DCD    2137067
        0x0021ca24:    00000000    ....    DCD    0
        0x0021ca28:    00000000    ....    DCD    0
        0x0021ca2c:    00000000    ....    DCD    0
        0x0021ca30:    00000000    ....    DCD    0
    .constdata
    __func__
        0x0021ca34:    54524155    UART    DCD    1414676821
        0x0021ca38:    61485f30    0_Ha    DCD    1632132912
        0x0021ca3c:    656c646e    ndle    DCD    1701602414
        0x0021ca40:    0072        r.      DCW    114
    .constdata
    __func__
        0x0021ca42:    6371        qc      DCW    25457
        0x0021ca44:    7070615f    _app    DCD    1886413151
        0x0021ca48:    69616d5f    _mai    DCD    1767992671
        0x0021ca4c:    61745f6e    n_ta    DCD    1635016558
        0x0021ca50:    6b73        sk      DCW    27507
        0x0021ca52:    00          .       DCB    0
    .constdata
    maptable
        0x0021ca53:    04          .       DCB    4
        0x0021ca54:    00080000    ....    DCD    524288
        0x0021ca58:    00000000    ....    DCD    0
        0x0021ca5c:    00020000    ....    DCD    131072
        0x0021ca60:    10000001    ....    DCD    268435457
    .conststring
        0x0021ca64:    5f504147    GAP_    DCD    1599095111
        0x0021ca68:    59544441    ADTY    DCD    1498694721
        0x0021ca6c:    4d5f4550    PE_M    DCD    1298089296
        0x0021ca70:    46554e41    ANUF    DCD    1179995713
        0x0021ca74:    55544341    ACTU    DCD    1431585601
        0x0021ca78:    5f524552    RER_    DCD    1599227218
        0x0021ca7c:    43455053    SPEC    DCD    1128616019
        0x0021ca80:    43494649    IFIC    DCD    1128875593
        0x0021ca84:    6f63203a    : co    DCD    1868767290
        0x0021ca88:    6e61706d    mpan    DCD    1851879533
        0x0021ca8c:    64695f79    y_id    DCD    1684627321
        0x0021ca90:    25783020     0x%    DCD    628633632
        0x0021ca94:    6c202c78    x, l    DCD    1814047864
        0x0021ca98:    25206e65    en %    DCD    622882405
        0x0021ca9c:    64202c64    d, d    DCD    1679830116
        0x0021caa0:    20617461    ata     DCD    543257697
        0x0021caa4:    0a0d6225    %b..    DCD    168649253
        0x0021caa8:    00000000    ....    DCD    0
        0x0021caac:    5f707061    app_    DCD    1601204321
        0x0021cab0:    73726170    pars    DCD    1936875888
        0x0021cab4:    63735f65    e_sc    DCD    1668505445
        0x0021cab8:    695f6e61    an_i    DCD    1767861857
        0x0021cabc:    3a6f666e    nfo:    DCD    980379246
        0x0021cac0:    20444120     AD     DCD    541344032
        0x0021cac4:    75727453    Stru    DCD    1970435155
        0x0021cac8:    72757463    ctur    DCD    1920300131
        0x0021cacc:    6e492065    e In    DCD    1850286181
        0x0021cad0:    203a6f66    fo:     DCD    540700518
        0x0021cad4:    74204441    AD t    DCD    1948271681
        0x0021cad8:    20657079    ype     DCD    543518841
        0x0021cadc:    78257830    0x%x    DCD    2015721520
        0x0021cae0:    4441202c    , AD    DCD    1145118764
        0x0021cae4:    74614420     Dat    DCD    1952531488
        0x0021cae8:    654c2061    a Le    DCD    1699487841
        0x0021caec:    6874676e    ngth    DCD    1752459118
        0x0021caf0:    0d642520     %d.    DCD    224666912
        0x0021caf4:    0000000a    ....    DCD    10

** Section #10 'App.trace' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 10112 bytes (alignment 4)
    Address: 0x08800000

    0x8800000:   21 2a 2a 52 45 53 45 54 20 52 65 61 73 6f 6e 3a    !**RESET Reason:
    0x8800010:   20 48 57 20 6f 72 20 4f 54 41 00 00 21 2a 2a 52     HW or OTA..!**R
    0x8800020:   45 53 45 54 20 52 65 61 73 6f 6e 3a 20 53 57 28    ESET Reason: SW(
    0x8800030:   72 65 73 65 74 20 65 78 63 65 70 74 20 61 6f 6e    reset except aon
    0x8800040:   29 2c 20 54 59 50 45 20 30 78 25 78 00 00 00 00    ), TYPE 0x%x....
    0x8800050:   21 2a 2a 52 45 53 45 54 20 52 65 61 73 6f 6e 3a    !**RESET Reason:
    0x8800060:   20 53 57 28 72 65 73 65 74 20 61 6c 6c 29 2c 20     SW(reset all), 
    0x8800070:   54 59 50 45 20 30 78 25 78 00 00 00 21 21 21 53    TYPE 0x%x...!!!S
    0x8800080:   44 4b 20 56 65 72 3a 20 25 73 2c 20 42 75 69 6c    DK Ver: %s, Buil
    0x8800090:   64 20 54 69 6d 65 3a 20 25 73 00 00 21 21 2a 57    d Time: %s..!!*W
    0x88000a0:   61 72 6e 69 6e 67 21 20 25 73 20 69 73 20 75 70    arning! %s is up
    0x88000b0:   64 61 74 65 64 20 62 79 20 41 50 50 21 00 00 00    dated by APP!...
    0x88000c0:   21 21 2a 57 61 72 6e 69 6e 67 21 20 49 53 52 20    !!*Warning! ISR 
    0x88000d0:   25 73 20 69 73 20 75 70 64 61 74 65 64 20 62 79    %s is updated by
    0x88000e0:   20 41 50 50 21 00 00 00 21 2a 2a 73 69 6d 70 5f     APP!...!**simp_
    0x88000f0:   62 6c 65 5f 63 6c 69 65 6e 74 5f 73 74 61 72 74    ble_client_start
    0x8800100:   5f 64 69 73 63 6f 76 65 72 79 00 00 21 21 21 73    _discovery..!!!s
    0x8800110:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 73    imp_ble_client_s
    0x8800120:   74 61 72 74 5f 64 69 73 63 6f 76 65 72 79 3a 20    tart_discovery: 
    0x8800130:   66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63    failed invalid c
    0x8800140:   6f 6e 6e 5f 69 64 20 25 64 00 00 00 21 21 21 73    onn_id %d...!!!s
    0x8800150:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 72    imp_ble_client_r
    0x8800160:   65 61 64 5f 62 79 5f 68 61 6e 64 6c 65 3a 20 66    ead_by_handle: f
    0x8800170:   61 69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f    ailed invalid co
    0x8800180:   6e 6e 5f 69 64 20 25 64 00 00 00 00 21 2a 2a 76    nn_id %d....!**v
    0x8800190:   73 6f 70 2d 2d 2d 2d 72 65 61 64 5f 62 79 5f 68    sop----read_by_h
    0x88001a0:   61 6e 64 6c 65 2d 2d 2d 2d 2d 2d 72 65 74 75 72    andle------retur
    0x88001b0:   6e 3d 25 64 00 00 00 00 21 2a 2a 76 73 6f 70 2d    n=%d....!**vsop-
    0x88001c0:   2d 2d 2d 72 65 61 64 5f 62 79 5f 68 61 6e 64 6c    ---read_by_handl
    0x88001d0:   65 2d 2d 2d 2d 2d 2d 72 65 61 64 5f 74 79 70 65    e------read_type
    0x88001e0:   3d 25 64 00 21 2a 2a 76 73 6f 70 2d 2d 2d 2d 72    =%d.!**vsop----r
    0x88001f0:   65 61 64 5f 62 79 5f 68 61 6e 64 6c 65 2d 2d 2d    ead_by_handle---
    0x8800200:   2d 2d 2d 68 64 6c 5f 76 61 6c 69 64 3d 25 64 00    ---hdl_valid=%d.
    0x8800210:   21 2a 2a 76 73 6f 70 2d 2d 2d 2d 72 65 61 64 5f    !**vsop----read_
    0x8800220:   62 79 5f 68 61 6e 64 6c 65 2d 2d 2d 2d 2d 2d 6f    by_handle------o
    0x8800230:   6b 6b 6b 6b 6b 3d 25 64 00 00 00 00 21 21 2a 73    kkkkk=%d....!!*s
    0x8800240:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 72    imp_ble_client_r
    0x8800250:   65 61 64 5f 62 79 5f 68 61 6e 64 6c 65 3a 20 52    ead_by_handle: R
    0x8800260:   65 71 75 65 73 74 20 66 61 69 6c 21 20 50 6c 65    equest fail! Ple
    0x8800270:   61 73 65 20 63 68 65 63 6b 21 00 00 21 21 21 73    ase check!..!!!s
    0x8800280:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 72    imp_ble_client_r
    0x8800290:   65 61 64 5f 62 79 5f 75 75 69 64 3a 20 66 61 69    ead_by_uuid: fai
    0x88002a0:   6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f 6e 6e    led invalid conn
    0x88002b0:   5f 69 64 20 25 64 00 00 21 2a 2a 76 73 6f 70 2d    _id %d..!**vsop-
    0x88002c0:   2d 2d 2d 72 65 61 64 5f 62 79 5f 75 75 69 64 2d    ---read_by_uuid-
    0x88002d0:   2d 2d 2d 2d 2d 72 65 61 64 5f 74 79 70 65 3d 25    -----read_type=%
    0x88002e0:   64 00 00 00 21 2a 2a 76 73 6f 70 2d 2d 2d 2d 72    d...!**vsop----r
    0x88002f0:   65 61 64 5f 62 79 5f 75 75 69 64 2d 2d 2d 2d 2d    ead_by_uuid-----
    0x8800300:   2d 20 53 49 4d 50 5f 52 45 41 44 5f 56 33 5f 4e    - SIMP_READ_V3_N
    0x8800310:   4f 54 49 46 59 5f 43 43 43 44 00 00 21 21 21 73    OTIFY_CCCD..!!!s
    0x8800320:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 73    imp_ble_client_s
    0x8800330:   65 74 5f 76 33 5f 6e 6f 74 69 66 79 3a 20 66 61    et_v3_notify: fa
    0x8800340:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f 6e    iled invalid con
    0x8800350:   6e 5f 69 64 20 25 64 00 21 2a 2a 76 73 6f 70 2d    n_id %d.!**vsop-
    0x8800360:   2d 2d 2d 73 69 6d 70 5f 62 6c 65 5f 63 6c 69 65    ---simp_ble_clie
    0x8800370:   6e 74 5f 73 65 74 5f 76 33 5f 6e 6f 74 69 66 79    nt_set_v3_notify
    0x8800380:   20 3d 09 30 78 25 30 32 58 00 00 00 21 21 2a 73     =.0x%02X...!!*s
    0x8800390:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 73    imp_ble_client_s
    0x88003a0:   65 74 5f 76 33 5f 6e 6f 74 69 66 79 3a 20 52 65    et_v3_notify: Re
    0x88003b0:   71 75 65 73 74 20 66 61 69 6c 21 20 50 6c 65 61    quest fail! Plea
    0x88003c0:   73 65 20 63 68 65 63 6b 21 00 00 00 21 21 21 73    se check!...!!!s
    0x88003d0:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 73    imp_ble_client_s
    0x88003e0:   65 74 5f 76 34 5f 69 6e 64 3a 20 66 61 69 6c 65    et_v4_ind: faile
    0x88003f0:   64 20 69 6e 76 61 6c 69 64 20 63 6f 6e 6e 5f 69    d invalid conn_i
    0x8800400:   64 20 25 64 00 00 00 00 21 2a 2a 76 73 6f 70 2d    d %d....!**vsop-
    0x8800410:   2d 2d 2d 48 44 4c 5f 53 49 4d 42 4c 45 5f 56 34    ---HDL_SIMBLE_V4
    0x8800420:   5f 49 4e 44 49 43 41 54 45 5f 43 43 43 44 20 3d    _INDICATE_CCCD =
    0x8800430:   20 20 30 78 25 30 32 58 00 00 00 00 21 21 2a 73      0x%02X....!!*s
    0x8800440:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 73    imp_ble_client_s
    0x8800450:   65 74 5f 76 34 5f 69 6e 64 3a 20 52 65 71 75 65    et_v4_ind: Reque
    0x8800460:   73 74 20 66 61 69 6c 21 20 50 6c 65 61 73 65 20    st fail! Please 
    0x8800470:   63 68 65 63 6b 21 00 00 21 21 21 73 69 6d 70 5f    check!..!!!simp_
    0x8800480:   62 6c 65 5f 63 6c 69 65 6e 74 5f 77 72 69 74 65    ble_client_write
    0x8800490:   5f 76 32 5f 63 68 61 72 3a 20 66 61 69 6c 65 64    _v2_char: failed
    0x88004a0:   20 69 6e 76 61 6c 69 64 20 63 6f 6e 6e 5f 69 64     invalid conn_id
    0x88004b0:   20 25 64 00 21 21 2a 73 69 6d 70 5f 62 6c 65 5f     %d.!!*simp_ble_
    0x88004c0:   63 6c 69 65 6e 74 5f 77 72 69 74 65 5f 76 32 5f    client_write_v2_
    0x88004d0:   63 68 61 72 3a 20 52 65 71 75 65 73 74 20 66 61    char: Request fa
    0x88004e0:   69 6c 21 20 50 6c 65 61 73 65 20 63 68 65 63 6b    il! Please check
    0x88004f0:   21 00 00 00 21 21 21 73 69 6d 70 5f 62 6c 65 5f    !...!!!simp_ble_
    0x8800500:   63 6c 69 65 6e 74 5f 67 65 74 5f 68 64 6c 5f 63    client_get_hdl_c
    0x8800510:   61 63 68 65 3a 20 66 61 69 6c 65 64 20 69 6e 76    ache: failed inv
    0x8800520:   61 6c 69 64 20 63 6f 6e 6e 5f 69 64 20 25 64 00    alid conn_id %d.
    0x8800530:   21 21 21 73 69 6d 70 5f 62 6c 65 5f 63 6c 69 65    !!!simp_ble_clie
    0x8800540:   6e 74 5f 67 65 74 5f 68 64 6c 5f 63 61 63 68 65    nt_get_hdl_cache
    0x8800550:   3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64    : failed invalid
    0x8800560:   20 73 74 61 74 65 20 25 64 00 00 00 21 21 21 73     state %d...!!!s
    0x8800570:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 67    imp_ble_client_g
    0x8800580:   65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66 61    et_hdl_cache: fa
    0x8800590:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 6c 65 6e    iled invalid len
    0x88005a0:   20 25 64 00 21 21 21 73 69 6d 70 5f 62 6c 65 5f     %d.!!!simp_ble_
    0x88005b0:   63 6c 69 65 6e 74 5f 73 65 74 5f 68 64 6c 5f 63    client_set_hdl_c
    0x88005c0:   61 63 68 65 3a 20 66 61 69 6c 65 64 20 69 6e 76    ache: failed inv
    0x88005d0:   61 6c 69 64 20 63 6f 6e 6e 5f 69 64 20 25 64 00    alid conn_id %d.
    0x88005e0:   21 21 21 73 69 6d 70 5f 62 6c 65 5f 63 6c 69 65    !!!simp_ble_clie
    0x88005f0:   6e 74 5f 73 65 74 5f 68 64 6c 5f 63 61 63 68 65    nt_set_hdl_cache
    0x8800600:   3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64    : failed invalid
    0x8800610:   20 73 74 61 74 65 20 25 64 00 00 00 21 21 21 73     state %d...!!!s
    0x8800620:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 73    imp_ble_client_s
    0x8800630:   65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66 61    et_hdl_cache: fa
    0x8800640:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 6c 65 6e    iled invalid len
    0x8800650:   20 25 64 00 21 2a 2a 73 69 6d 70 5f 62 6c 65 5f     %d.!**simp_ble_
    0x8800660:   63 6c 69 65 6e 74 5f 73 74 61 72 74 5f 73 69 6d    client_start_sim
    0x8800670:   70 5f 63 68 61 72 5f 64 69 73 63 6f 76 65 72 79    p_char_discovery
    0x8800680:   00 00 00 00 21 2a 2a 73 69 6d 70 5f 62 6c 65 5f    ....!**simp_ble_
    0x8800690:   63 6c 69 65 6e 74 5f 73 74 61 72 74 5f 63 68 61    client_start_cha
    0x88006a0:   72 5f 64 65 73 63 72 69 70 74 6f 72 5f 64 69 73    r_descriptor_dis
    0x88006b0:   63 6f 76 65 72 79 00 00 21 2a 2a 73 69 6d 70 5f    covery..!**simp_
    0x88006c0:   62 6c 65 5f 63 6c 69 65 6e 74 5f 64 69 73 63 6f    ble_client_disco
    0x88006d0:   76 65 72 5f 73 74 61 74 65 5f 63 62 3a 20 64 69    ver_state_cb: di
    0x88006e0:   73 63 6f 76 65 72 79 5f 73 74 61 74 65 20 25 64    scovery_state %d
    0x88006f0:   00 00 00 00 21 21 21 73 69 6d 70 5f 68 61 6e 64    ....!!!simp_hand
    0x8800700:   6c 65 5f 64 69 73 63 6f 76 65 72 5f 73 74 61 74    le_discover_stat
    0x8800710:   65 3a 20 49 6e 76 61 6c 69 64 20 44 69 73 63 6f    e: Invalid Disco
    0x8800720:   76 65 72 79 20 53 74 61 74 65 21 00 21 2a 2a 73    very State!.!**s
    0x8800730:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 64    imp_ble_client_d
    0x8800740:   69 73 63 6f 76 65 72 5f 72 65 73 75 6c 74 5f 63    iscover_result_c
    0x8800750:   62 3a 20 72 65 73 75 6c 74 5f 74 79 70 65 20 25    b: result_type %
    0x8800760:   64 20 2c 20 30 78 25 30 32 58 00 00 21 2a 2a 76    d , 0x%02X..!**v
    0x8800770:   73 6f 70 20 73 69 6d 70 5f 62 6c 65 5f 63 6c 69    sop simp_ble_cli
    0x8800780:   65 6e 74 5f 64 69 73 63 6f 76 65 72 5f 72 65 73    ent_discover_res
    0x8800790:   75 6c 74 5f 63 62 3a 20 72 65 73 75 6c 74 5f 74    ult_cb: result_t
    0x88007a0:   79 70 65 20 25 64 20 2c 20 30 78 25 30 32 58 00    ype %d , 0x%02X.
    0x88007b0:   21 2a 2a 76 73 6f 70 20 72 65 73 75 6c 74 5f 64    !**vsop result_d
    0x88007c0:   61 74 61 20 44 49 53 43 5f 52 45 53 55 4c 54 5f    ata DISC_RESULT_
    0x88007d0:   43 48 41 52 5f 55 55 49 44 31 36 3a 20 30 78 25    CHAR_UUID16: 0x%
    0x88007e0:   30 32 58 00 21 2a 2a 76 73 6f 70 2b 2b 2b 2b 2b    02X.!**vsop+++++
    0x88007f0:   2b 2b 2b 2b 2b 2b 2b 2b 47 41 54 54 5f 55 55 49    ++++++++GATT_UUI
    0x8800800:   44 5f 43 48 41 52 5f 53 49 4d 50 4c 45 5f 56 33    D_CHAR_SIMPLE_V3
    0x8800810:   5f 4e 4f 54 49 46 59 2c 20 68 61 6e 64 6c 65 3d    _NOTIFY, handle=
    0x8800820:   25 64 00 00 21 2a 2a 76 73 6f 70 2b 2b 2b 2b 2b    %d..!**vsop+++++
    0x8800830:   2b 2b 2b 2b 2b 2b 2b 2b 47 41 54 54 5f 55 55 49    ++++++++GATT_UUI
    0x8800840:   44 5f 43 48 41 52 5f 53 49 4d 50 4c 45 5f 56 34    D_CHAR_SIMPLE_V4
    0x8800850:   5f 49 4e 44 49 43 41 54 45 2c 20 68 61 6e 64 6c    _INDICATE, handl
    0x8800860:   65 3d 25 64 00 00 00 00 21 2a 2a 76 73 6f 70 20    e=%d....!**vsop 
    0x8800870:   31 20 44 49 53 43 5f 52 45 53 55 4c 54 5f 43 48    1 DISC_RESULT_CH
    0x8800880:   41 52 5f 44 45 53 43 5f 55 55 49 44 31 36 3a 20    AR_DESC_UUID16: 
    0x8800890:   75 75 69 64 31 36 20 2c 20 30 78 25 30 32 58 00    uuid16 , 0x%02X.
    0x88008a0:   21 2a 2a 76 73 6f 70 20 32 20 44 49 53 43 5f 52    !**vsop 2 DISC_R
    0x88008b0:   45 53 55 4c 54 5f 43 48 41 52 5f 44 45 53 43 5f    ESULT_CHAR_DESC_
    0x88008c0:   55 55 49 44 31 36 3a 20 68 61 6e 64 6c 65 20 2c    UUID16: handle ,
    0x88008d0:   20 30 78 25 30 32 58 00 21 2a 2a 76 73 6f 70 78     0x%02X.!**vsopx
    0x88008e0:   78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78    xxxxxxxxxxxxxxxx
    0x88008f0:   31 2c 20 68 61 6e 64 6c 65 3d 25 64 00 00 00 00    1, handle=%d....
    0x8800900:   21 2a 2a 76 73 6f 70 78 78 78 78 78 78 78 78 78    !**vsopxxxxxxxxx
    0x8800910:   78 78 78 78 78 78 78 78 32 2c 20 68 61 6e 64 6c    xxxxxxxx2, handl
    0x8800920:   65 3d 25 64 00 00 00 00 21 21 21 73 69 6d 70 5f    e=%d....!!!simp_
    0x8800930:   68 61 6e 64 6c 65 5f 64 69 73 63 6f 76 65 72 5f    handle_discover_
    0x8800940:   72 65 73 75 6c 74 3a 20 49 6e 76 61 6c 69 64 20    result: Invalid 
    0x8800950:   44 69 73 63 6f 76 65 72 79 20 52 65 73 75 6c 74    Discovery Result
    0x8800960:   20 54 79 70 65 21 00 00 21 2a 2a 73 69 6d 70 5f     Type!..!**simp_
    0x8800970:   62 6c 65 5f 63 6c 69 65 6e 74 5f 72 65 61 64 5f    ble_client_read_
    0x8800980:   72 65 73 75 6c 74 5f 63 62 3a 20 68 61 6e 64 6c    result_cb: handl
    0x8800990:   65 20 30 78 25 78 2c 20 63 61 75 73 65 20 30 78    e 0x%x, cause 0x
    0x88009a0:   25 78 00 00 21 21 21 73 69 6d 70 5f 62 6c 65 5f    %x..!!!simp_ble_
    0x88009b0:   63 6c 69 65 6e 74 5f 72 65 61 64 5f 72 65 73 75    client_read_resu
    0x88009c0:   6c 74 5f 63 62 3a 20 69 6e 76 61 6c 69 64 20 63    lt_cb: invalid c
    0x88009d0:   63 63 64 20 6c 65 6e 20 25 64 00 00 21 2a 2a 76    ccd len %d..!**v
    0x88009e0:   73 6f 70 2d 2d 2d 2d 2d 2d 2d 20 69 6e 64 69 63    sop------- indic
    0x88009f0:   61 74 65 20 5f 63 63 63 64 20 31 00 21 21 21 73    ate _cccd 1.!!!s
    0x8800a00:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 72    imp_ble_client_r
    0x8800a10:   65 61 64 5f 72 65 73 75 6c 74 5f 63 62 3a 20 69    ead_result_cb: i
    0x8800a20:   6e 76 61 6c 69 64 20 63 63 63 64 20 6c 65 6e 20    nvalid cccd len 
    0x8800a30:   25 64 00 00 21 2a 2a 76 73 6f 70 2d 2d 2d 2d 2d    %d..!**vsop-----
    0x8800a40:   2d 2d 20 69 6e 64 69 63 61 74 65 20 5f 63 63 63    -- indicate _ccc
    0x8800a50:   64 20 3d 20 20 25 64 00 21 2a 2a 73 69 6d 70 5f    d =  %d.!**simp_
    0x8800a60:   62 6c 65 5f 63 6c 69 65 6e 74 5f 77 72 69 74 65    ble_client_write
    0x8800a70:   5f 72 65 73 75 6c 74 5f 63 62 3a 20 68 61 6e 64    _result_cb: hand
    0x8800a80:   6c 65 20 30 78 25 78 2c 20 63 61 75 73 65 20 30    le 0x%x, cause 0
    0x8800a90:   78 25 78 00 21 2a 2a 76 73 6f 70 2d 2d 2d 2d 2d    x%x.!**vsop-----
    0x8800aa0:   2d 2d 2d 2d 2d 2d 2d 48 44 4c 5f 53 49 4d 42 4c    -------HDL_SIMBL
    0x8800ab0:   45 5f 56 33 5f 4e 4f 54 49 46 59 20 25 64 00 00    E_V3_NOTIFY %d..
    0x8800ac0:   21 2a 2a 76 73 6f 70 2d 2d 2d 2d 2d 2d 2d 2d 2d    !**vsop---------
    0x8800ad0:   2d 2d 2d 48 44 4c 5f 53 49 4d 42 4c 45 5f 56 34    ---HDL_SIMBLE_V4
    0x8800ae0:   5f 49 4e 44 49 43 41 54 45 20 25 64 00 00 00 00    _INDICATE %d....
    0x8800af0:   21 2a 2a 76 73 6f 70 2d 2d 2d 2d 2d 2d 2d 2d 2d    !**vsop---------
    0x8800b00:   2d 2d 2d 6e 6f 20 68 61 6e 64 6c 65 20 25 64 00    ---no handle %d.
    0x8800b10:   21 2a 2a 76 73 6f 70 2d 2d 2d 2d 2d 2d 2d 2d 2d    !**vsop---------
    0x8800b20:   2d 2d 2d 73 69 6d 70 5f 63 6c 69 65 6e 74 5f 63    ---simp_client_c
    0x8800b30:   62 20 25 64 00 00 00 00 21 2a 2a 76 73 6f 70 2d    b %d....!**vsop-
    0x8800b40:   2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 72 65 74 75 72    -----------retur
    0x8800b50:   6e 20 25 64 00 00 00 00 21 2a 2a 73 69 6d 70 5f    n %d....!**simp_
    0x8800b60:   62 6c 65 5f 63 6c 69 65 6e 74 5f 64 69 73 63 6f    ble_client_disco
    0x8800b70:   6e 6e 65 63 74 5f 63 62 2e 00 00 00 21 21 21 73    nnect_cb....!!!s
    0x8800b80:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 64    imp_ble_client_d
    0x8800b90:   69 73 63 6f 6e 6e 65 63 74 5f 63 62 3a 20 66 61    isconnect_cb: fa
    0x8800ba0:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f 6e    iled invalid con
    0x8800bb0:   6e 5f 69 64 20 25 64 00 21 21 21 73 69 6d 70 5f    n_id %d.!!!simp_
    0x8800bc0:   62 6c 65 5f 61 64 64 5f 63 6c 69 65 6e 74 3a 20    ble_add_client: 
    0x8800bd0:   69 6e 76 61 6c 69 64 20 6c 69 6e 6b 5f 6e 75 6d    invalid link_num
    0x8800be0:   20 25 64 00 21 21 21 73 69 6d 70 5f 62 6c 65 5f     %d.!!!simp_ble_
    0x8800bf0:   61 64 64 5f 63 6c 69 65 6e 74 20 66 61 69 6c 65    add_client faile
    0x8800c00:   64 00 00 00 21 2a 2a 73 69 6d 70 5f 62 6c 65 5f    d...!**simp_ble_
    0x8800c10:   61 64 64 5f 63 6c 69 65 6e 74 3a 20 73 69 6d 70    add_client: simp
    0x8800c20:   5f 63 6c 69 65 6e 74 20 25 64 00 00 21 2a 2a 62    _client %d..!**b
    0x8800c30:   61 73 5f 73 74 61 72 74 5f 64 69 73 63 6f 76 65    as_start_discove
    0x8800c40:   72 79 00 00 21 21 21 62 61 73 5f 73 74 61 72 74    ry..!!!bas_start
    0x8800c50:   5f 64 69 73 63 6f 76 65 72 79 3a 20 66 61 69 6c    _discovery: fail
    0x8800c60:   65 64 20 69 6e 76 61 6c 69 64 20 63 6f 6e 6e 5f    ed invalid conn_
    0x8800c70:   69 64 20 25 64 00 00 00 21 21 21 62 61 73 5f 72    id %d...!!!bas_r
    0x8800c80:   65 61 64 5f 62 61 74 74 65 72 79 5f 6c 65 76 65    ead_battery_leve
    0x8800c90:   6c 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69    l: failed invali
    0x8800ca0:   64 20 63 6f 6e 6e 5f 69 64 20 25 64 00 00 00 00    d conn_id %d....
    0x8800cb0:   21 21 21 62 61 73 5f 72 65 61 64 5f 62 61 74 74    !!!bas_read_batt
    0x8800cc0:   65 72 79 5f 6c 65 76 65 6c 3a 20 66 61 6c 73 65    ery_level: false
    0x8800cd0:   20 68 61 6e 64 6c 65 20 3d 20 30 00 21 21 21 62     handle = 0.!!!b
    0x8800ce0:   61 73 5f 73 65 74 5f 6e 6f 74 69 66 79 3a 20 66    as_set_notify: f
    0x8800cf0:   61 69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f    ailed invalid co
    0x8800d00:   6e 6e 5f 69 64 20 25 64 00 00 00 00 21 21 21 62    nn_id %d....!!!b
    0x8800d10:   61 73 5f 73 65 74 5f 6e 6f 74 69 66 79 3a 20 66    as_set_notify: f
    0x8800d20:   61 6c 73 65 20 68 61 6e 64 6c 65 20 3d 20 30 00    alse handle = 0.
    0x8800d30:   21 21 21 62 61 73 5f 72 65 61 64 5f 6e 6f 74 69    !!!bas_read_noti
    0x8800d40:   66 79 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c    fy: failed inval
    0x8800d50:   69 64 20 63 6f 6e 6e 5f 69 64 20 25 64 00 00 00    id conn_id %d...
    0x8800d60:   21 21 21 62 61 73 5f 72 65 61 64 5f 62 61 74 74    !!!bas_read_batt
    0x8800d70:   65 72 79 5f 6c 65 76 65 6c 3a 20 66 61 6c 73 65    ery_level: false
    0x8800d80:   20 68 61 6e 64 6c 65 20 3d 20 30 00 21 21 21 62     handle = 0.!!!b
    0x8800d90:   61 73 5f 67 65 74 5f 68 64 6c 5f 63 61 63 68 65    as_get_hdl_cache
    0x8800da0:   3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64    : failed invalid
    0x8800db0:   20 63 6f 6e 6e 5f 69 64 20 25 64 00 21 21 21 62     conn_id %d.!!!b
    0x8800dc0:   61 73 5f 67 65 74 5f 68 64 6c 5f 63 61 63 68 65    as_get_hdl_cache
    0x8800dd0:   3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64    : failed invalid
    0x8800de0:   20 73 74 61 74 65 20 25 64 00 00 00 21 21 21 62     state %d...!!!b
    0x8800df0:   61 73 5f 67 65 74 5f 68 64 6c 5f 63 61 63 68 65    as_get_hdl_cache
    0x8800e00:   3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64    : failed invalid
    0x8800e10:   20 6c 65 6e 20 25 64 00 21 21 21 62 61 73 5f 73     len %d.!!!bas_s
    0x8800e20:   65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66 61    et_hdl_cache: fa
    0x8800e30:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f 6e    iled invalid con
    0x8800e40:   6e 5f 69 64 20 25 64 00 21 21 21 62 61 73 5f 73    n_id %d.!!!bas_s
    0x8800e50:   65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66 61    et_hdl_cache: fa
    0x8800e60:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 73 74 61    iled invalid sta
    0x8800e70:   74 65 20 25 64 00 00 00 21 21 21 62 61 73 5f 73    te %d...!!!bas_s
    0x8800e80:   65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66 61    et_hdl_cache: fa
    0x8800e90:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 6c 65 6e    iled invalid len
    0x8800ea0:   20 25 64 00 21 2a 2a 62 61 73 5f 73 74 61 72 74     %d.!**bas_start
    0x8800eb0:   5f 63 68 61 72 5f 64 69 73 63 6f 76 65 72 79 00    _char_discovery.
    0x8800ec0:   21 2a 2a 62 61 73 5f 73 74 61 72 74 5f 63 68 61    !**bas_start_cha
    0x8800ed0:   72 5f 64 65 73 63 72 69 70 74 6f 72 5f 64 69 73    r_descriptor_dis
    0x8800ee0:   63 6f 76 65 72 79 00 00 21 2a 2a 62 61 73 5f 63    covery..!**bas_c
    0x8800ef0:   6c 69 65 6e 74 5f 64 69 73 63 6f 76 65 72 5f 73    lient_discover_s
    0x8800f00:   74 61 74 65 5f 63 62 3a 20 64 69 73 63 6f 76 65    tate_cb: discove
    0x8800f10:   72 79 5f 73 74 61 74 65 20 3d 20 25 64 00 00 00    ry_state = %d...
    0x8800f20:   21 21 21 49 6e 76 61 6c 69 64 20 44 69 73 63 6f    !!!Invalid Disco
    0x8800f30:   76 65 72 79 20 53 74 61 74 65 21 00 21 2a 2a 62    very State!.!**b
    0x8800f40:   61 73 5f 63 6c 69 65 6e 74 5f 64 69 73 63 6f 76    as_client_discov
    0x8800f50:   65 72 5f 72 65 73 75 6c 74 5f 63 62 3a 20 72 65    er_result_cb: re
    0x8800f60:   73 75 6c 74 5f 74 79 70 65 20 3d 20 25 64 00 00    sult_type = %d..
    0x8800f70:   21 21 21 49 6e 76 61 6c 69 64 20 44 69 73 63 6f    !!!Invalid Disco
    0x8800f80:   76 65 72 79 20 52 65 73 75 6c 74 20 54 79 70 65    very Result Type
    0x8800f90:   21 00 00 00 21 2a 2a 62 61 73 5f 63 6c 69 65 6e    !...!**bas_clien
    0x8800fa0:   74 5f 77 72 69 74 65 5f 72 65 73 75 6c 74 5f 63    t_write_result_c
    0x8800fb0:   62 3a 20 68 61 6e 64 6c 65 20 30 78 25 78 2c 20    b: handle 0x%x, 
    0x8800fc0:   63 61 75 73 65 20 30 78 25 78 00 00 21 2a 2a 62    cause 0x%x..!**b
    0x8800fd0:   61 73 5f 63 6c 69 65 6e 74 5f 72 65 61 64 5f 72    as_client_read_r
    0x8800fe0:   65 73 75 6c 74 5f 63 62 3a 20 68 61 6e 64 6c 65    esult_cb: handle
    0x8800ff0:   20 30 78 25 78 2c 20 63 61 75 73 65 20 30 78 25     0x%x, cause 0x%
    0x8801000:   78 00 00 00 21 21 21 62 61 73 5f 63 6c 69 65 6e    x...!!!bas_clien
    0x8801010:   74 5f 72 65 61 64 5f 72 65 73 75 6c 74 5f 63 62    t_read_result_cb
    0x8801020:   3a 20 69 6e 76 61 6c 69 64 20 63 63 63 64 20 6c    : invalid cccd l
    0x8801030:   65 6e 20 25 64 00 00 00 21 21 21 62 61 73 5f 63    en %d...!!!bas_c
    0x8801040:   6c 69 65 6e 74 5f 72 65 61 64 5f 72 65 73 75 6c    lient_read_resul
    0x8801050:   74 5f 63 62 3a 20 69 6e 76 61 6c 69 64 20 62 61    t_cb: invalid ba
    0x8801060:   74 74 65 72 79 20 76 61 6c 75 65 20 6c 65 6e 20    ttery value len 
    0x8801070:   25 64 00 00 21 2a 2a 62 61 73 5f 63 6c 69 65 6e    %d..!**bas_clien
    0x8801080:   74 5f 64 69 73 63 5f 63 62 2e 00 00 21 21 21 62    t_disc_cb...!!!b
    0x8801090:   61 73 5f 63 6c 69 65 6e 74 5f 64 69 73 63 5f 63    as_client_disc_c
    0x88010a0:   62 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69    b: failed invali
    0x88010b0:   64 20 63 6f 6e 6e 5f 69 64 20 25 64 00 00 00 00    d conn_id %d....
    0x88010c0:   21 21 21 62 61 73 5f 61 64 64 5f 63 6c 69 65 6e    !!!bas_add_clien
    0x88010d0:   74 3a 20 69 6e 76 61 6c 69 64 20 6c 69 6e 6b 5f    t: invalid link_
    0x88010e0:   6e 75 6d 20 25 64 00 00 21 21 21 62 61 73 5f 61    num %d..!!!bas_a
    0x88010f0:   64 64 5f 63 6c 69 65 6e 74 3a 72 65 67 69 73 74    dd_client:regist
    0x8801100:   65 72 20 66 61 69 6c 00 21 2a 2a 62 61 73 5f 61    er fail.!**bas_a
    0x8801110:   64 64 5f 63 6c 69 65 6e 74 3a 20 63 6c 69 65 6e    dd_client: clien
    0x8801120:   74 20 69 64 20 25 64 00 21 2a 2a 67 61 70 73 5f    t id %d.!**gaps_
    0x8801130:   73 74 61 72 74 5f 64 69 73 63 6f 76 65 72 79 00    start_discovery.
    0x8801140:   21 21 21 67 61 70 73 5f 73 74 61 72 74 5f 64 69    !!!gaps_start_di
    0x8801150:   73 63 6f 76 65 72 79 3a 20 66 61 69 6c 65 64 20    scovery: failed 
    0x8801160:   69 6e 76 61 6c 69 64 20 63 6f 6e 6e 5f 69 64 20    invalid conn_id 
    0x8801170:   25 64 00 00 21 21 21 67 61 70 73 5f 72 65 61 64    %d..!!!gaps_read
    0x8801180:   3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64    : failed invalid
    0x8801190:   20 63 6f 6e 6e 5f 69 64 20 25 64 00 21 2a 2a 67     conn_id %d.!**g
    0x88011a0:   61 70 73 5f 72 65 61 64 3a 20 63 68 61 72 54 79    aps_read: charTy
    0x88011b0:   70 65 20 3d 20 25 64 00 21 21 2a 67 61 70 73 5f    pe = %d.!!*gaps_
    0x88011c0:   72 65 61 64 3a 20 52 65 71 75 65 73 74 20 66 61    read: Request fa
    0x88011d0:   69 6c 21 20 50 6c 65 61 73 65 20 63 68 65 63 6b    il! Please check
    0x88011e0:   21 00 00 00 21 21 21 67 61 70 73 5f 67 65 74 5f    !...!!!gaps_get_
    0x88011f0:   68 64 6c 5f 63 61 63 68 65 3a 20 66 61 69 6c 65    hdl_cache: faile
    0x8801200:   64 20 69 6e 76 61 6c 69 64 20 63 6f 6e 6e 5f 69    d invalid conn_i
    0x8801210:   64 20 25 64 00 00 00 00 21 21 21 67 61 70 73 5f    d %d....!!!gaps_
    0x8801220:   67 65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66    get_hdl_cache: f
    0x8801230:   61 69 6c 65 64 20 69 6e 76 61 6c 69 64 20 73 74    ailed invalid st
    0x8801240:   61 74 65 20 25 64 00 00 21 21 21 67 61 70 73 5f    ate %d..!!!gaps_
    0x8801250:   67 65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66    get_hdl_cache: f
    0x8801260:   61 69 6c 65 64 20 69 6e 76 61 6c 69 64 20 6c 65    ailed invalid le
    0x8801270:   6e 20 25 64 00 00 00 00 21 21 21 67 61 70 73 5f    n %d....!!!gaps_
    0x8801280:   73 65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66    set_hdl_cache: f
    0x8801290:   61 69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f    ailed invalid co
    0x88012a0:   6e 6e 5f 69 64 20 25 64 00 00 00 00 21 21 21 67    nn_id %d....!!!g
    0x88012b0:   61 70 73 5f 73 65 74 5f 68 64 6c 5f 63 61 63 68    aps_set_hdl_cach
    0x88012c0:   65 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69    e: failed invali
    0x88012d0:   64 20 73 74 61 74 65 20 25 64 00 00 21 21 21 67    d state %d..!!!g
    0x88012e0:   61 70 73 5f 73 65 74 5f 68 64 6c 5f 63 61 63 68    aps_set_hdl_cach
    0x88012f0:   65 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69    e: failed invali
    0x8801300:   64 20 6c 65 6e 20 25 64 00 00 00 00 21 21 21 67    d len %d....!!!g
    0x8801310:   61 70 73 5f 67 65 74 5f 68 64 6c 5f 63 61 63 68    aps_get_hdl_cach
    0x8801320:   65 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69    e: failed invali
    0x8801330:   64 20 63 6f 6e 6e 5f 69 64 20 25 64 00 00 00 00    d conn_id %d....
    0x8801340:   21 21 21 67 61 70 73 5f 67 65 74 5f 68 64 6c 5f    !!!gaps_get_hdl_
    0x8801350:   63 61 63 68 65 3a 20 66 61 69 6c 65 64 20 69 6e    cache: failed in
    0x8801360:   76 61 6c 69 64 20 73 74 61 74 65 20 25 64 00 00    valid state %d..
    0x8801370:   21 2a 2a 67 61 70 5f 63 6c 69 65 6e 74 5f 73 74    !**gap_client_st
    0x8801380:   61 72 74 5f 67 61 70 5f 63 68 61 72 5f 64 69 73    art_gap_char_dis
    0x8801390:   63 6f 76 65 72 79 00 00 21 2a 2a 67 61 70 73 5f    covery..!**gaps_
    0x88013a0:   63 6c 69 65 6e 74 5f 64 69 73 63 6f 76 65 72 5f    client_discover_
    0x88013b0:   73 74 61 74 65 5f 63 62 3a 20 64 69 73 63 6f 76    state_cb: discov
    0x88013c0:   65 72 79 5f 73 74 61 74 65 20 25 64 00 00 00 00    ery_state %d....
    0x88013d0:   21 21 21 44 49 53 43 5f 53 54 41 54 45 5f 46 41    !!!DISC_STATE_FA
    0x88013e0:   49 4c 45 44 00 00 00 00 21 21 21 49 6e 76 61 6c    ILED....!!!Inval
    0x88013f0:   69 64 20 44 69 73 63 6f 76 65 72 79 20 53 74 61    id Discovery Sta
    0x8801400:   74 65 21 00 21 2a 2a 67 61 70 5f 63 6c 69 65 6e    te!.!**gap_clien
    0x8801410:   74 5f 64 69 73 63 6f 76 65 72 5f 72 65 73 75 6c    t_discover_resul
    0x8801420:   74 5f 63 62 3a 20 72 65 73 75 6c 74 5f 74 79 70    t_cb: result_typ
    0x8801430:   65 20 3d 20 25 64 00 00 21 2a 2a 47 41 54 54 5f    e = %d..!**GATT_
    0x8801440:   55 55 49 44 5f 43 48 41 52 5f 43 45 4e 54 52 41    UUID_CHAR_CENTRA
    0x8801450:   4c 5f 41 44 44 52 45 53 53 5f 52 45 53 4f 4c 55    L_ADDRESS_RESOLU
    0x8801460:   54 49 4f 4e 20 66 6f 75 6e 64 00 00 21 2a 2a 47    TION found..!**G
    0x8801470:   41 54 54 5f 55 55 49 44 5f 43 48 41 52 5f 52 45    ATT_UUID_CHAR_RE
    0x8801480:   53 4f 4c 56 41 42 4c 45 5f 50 52 49 56 41 54 45    SOLVABLE_PRIVATE
    0x8801490:   5f 41 44 44 52 45 53 53 5f 4f 4e 4c 59 20 66 6f    _ADDRESS_ONLY fo
    0x88014a0:   75 6e 64 00 21 21 21 49 6e 76 61 6c 69 64 20 44    und.!!!Invalid D
    0x88014b0:   69 73 63 6f 76 65 72 79 20 52 65 73 75 6c 74 20    iscovery Result 
    0x88014c0:   54 79 70 65 21 00 00 00 21 2a 2a 67 61 70 5f 63    Type!...!**gap_c
    0x88014d0:   6c 69 65 6e 74 5f 72 65 61 64 5f 72 65 73 75 6c    lient_read_resul
    0x88014e0:   74 5f 63 62 3a 20 68 61 6e 64 6c 65 20 30 78 25    t_cb: handle 0x%
    0x88014f0:   78 2c 20 63 61 75 73 65 20 30 78 25 78 00 00 00    x, cause 0x%x...
    0x8801500:   21 21 21 67 61 70 73 5f 63 6c 69 65 6e 74 5f 72    !!!gaps_client_r
    0x8801510:   65 61 64 5f 72 65 73 75 6c 74 5f 63 62 3a 20 69    ead_result_cb: i
    0x8801520:   6e 76 61 6c 69 64 20 63 63 63 64 20 6c 65 6e 20    nvalid cccd len 
    0x8801530:   25 64 00 00 21 2a 2a 67 61 70 5f 63 6c 69 65 6e    %d..!**gap_clien
    0x8801540:   74 5f 64 69 73 63 5f 63 62 2e 00 00 21 21 21 67    t_disc_cb...!!!g
    0x8801550:   61 70 73 5f 63 6c 69 65 6e 74 5f 64 69 73 63 5f    aps_client_disc_
    0x8801560:   63 62 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c    cb: failed inval
    0x8801570:   69 64 20 63 6f 6e 6e 5f 69 64 20 25 64 00 00 00    id conn_id %d...
    0x8801580:   21 21 21 67 61 70 73 5f 61 64 64 5f 63 6c 69 65    !!!gaps_add_clie
    0x8801590:   6e 74 3a 20 69 6e 76 61 6c 69 64 20 6c 69 6e 6b    nt: invalid link
    0x88015a0:   5f 6e 75 6d 20 25 64 00 21 21 21 67 61 70 73 5f    _num %d.!!!gaps_
    0x88015b0:   61 64 64 5f 63 6c 69 65 6e 74 20 46 61 69 6c 20    add_client Fail 
    0x88015c0:   21 21 21 00 21 2a 2a 67 61 70 73 5f 61 64 64 5f    !!!.!**gaps_add_
    0x88015d0:   63 6c 69 65 6e 74 3a 20 63 6c 69 65 6e 74 20 49    client: client I
    0x88015e0:   44 20 3d 20 25 64 00 00 21 2a 2a 61 70 70 5f 6d    D = %d..!**app_m
    0x88015f0:   61 69 6e 5f 74 61 73 6b 20 62 79 20 76 73 6f 70    ain_task by vsop
    0x8801600:   20 65 6e 74 65 72 00 00 21 2a 2a 61 70 70 5f 68     enter..!**app_h
    0x8801610:   61 6e 64 6c 65 5f 64 65 76 5f 73 74 61 74 65 5f    andle_dev_state_
    0x8801620:   65 76 74 3a 20 69 6e 69 74 20 73 74 61 74 65 20    evt: init state 
    0x8801630:   20 25 64 2c 20 73 63 61 6e 20 73 74 61 74 65 20     %d, scan state 
    0x8801640:   25 64 2c 20 63 61 75 73 65 20 30 78 25 78 00 00    %d, cause 0x%x..
    0x8801650:   21 2a 2a 47 41 50 20 73 74 61 63 6b 20 72 65 61    !**GAP stack rea
    0x8801660:   64 79 00 00 21 2a 2a 47 41 50 20 73 63 61 6e 20    dy..!**GAP scan 
    0x8801670:   73 74 6f 70 00 00 00 00 21 2a 2a 47 41 50 20 73    stop....!**GAP s
    0x8801680:   63 61 6e 20 73 74 61 72 74 00 00 00 21 2a 2a 61    can start...!**a
    0x8801690:   70 70 5f 68 61 6e 64 6c 65 5f 63 6f 6e 6e 5f 73    pp_handle_conn_s
    0x88016a0:   74 61 74 65 5f 65 76 74 3a 20 63 6f 6e 6e 5f 69    tate_evt: conn_i
    0x88016b0:   64 20 25 64 2c 20 63 6f 6e 6e 5f 73 74 61 74 65    d %d, conn_state
    0x88016c0:   28 25 64 20 2d 3e 20 25 64 29 2c 20 64 69 73 63    (%d -> %d), disc
    0x88016d0:   5f 63 61 75 73 65 20 30 78 25 78 00 21 21 21 61    _cause 0x%x.!!!a
    0x88016e0:   70 70 5f 68 61 6e 64 6c 65 5f 63 6f 6e 6e 5f 73    pp_handle_conn_s
    0x88016f0:   74 61 74 65 5f 65 76 74 3a 20 63 6f 6e 6e 65 63    tate_evt: connec
    0x8801700:   74 69 6f 6e 20 6c 6f 73 74 2c 20 63 6f 6e 6e 5f    tion lost, conn_
    0x8801710:   69 64 20 25 64 2c 20 63 61 75 73 65 20 30 78 25    id %d, cause 0x%
    0x8801720:   78 00 00 00 21 2a 2a 61 70 70 5f 68 61 6e 64 6c    x...!**app_handl
    0x8801730:   65 5f 61 75 74 68 65 6e 5f 73 74 61 74 65 5f 65    e_authen_state_e
    0x8801740:   76 74 3a 63 6f 6e 6e 5f 69 64 20 25 64 2c 20 63    vt:conn_id %d, c
    0x8801750:   61 75 73 65 20 30 78 25 78 00 00 00 21 2a 2a 61    ause 0x%x...!**a
    0x8801760:   70 70 5f 68 61 6e 64 6c 65 5f 61 75 74 68 65 6e    pp_handle_authen
    0x8801770:   5f 73 74 61 74 65 5f 65 76 74 3a 20 47 41 50 5f    _state_evt: GAP_
    0x8801780:   41 55 54 48 45 4e 5f 53 54 41 54 45 5f 53 54 41    AUTHEN_STATE_STA
    0x8801790:   52 54 45 44 00 00 00 00 21 2a 2a 61 70 70 5f 68    RTED....!**app_h
    0x88017a0:   61 6e 64 6c 65 5f 61 75 74 68 65 6e 5f 73 74 61    andle_authen_sta
    0x88017b0:   74 65 5f 65 76 74 3a 20 47 41 50 5f 41 55 54 48    te_evt: GAP_AUTH
    0x88017c0:   45 4e 5f 53 54 41 54 45 5f 43 4f 4d 50 4c 45 54    EN_STATE_COMPLET
    0x88017d0:   45 20 70 61 69 72 20 73 75 63 63 65 73 73 00 00    E pair success..
    0x88017e0:   21 2a 2a 61 70 70 5f 68 61 6e 64 6c 65 5f 61 75    !**app_handle_au
    0x88017f0:   74 68 65 6e 5f 73 74 61 74 65 5f 65 76 74 3a 20    then_state_evt: 
    0x8801800:   47 41 50 5f 41 55 54 48 45 4e 5f 53 54 41 54 45    GAP_AUTHEN_STATE
    0x8801810:   5f 43 4f 4d 50 4c 45 54 45 20 70 61 69 72 20 66    _COMPLETE pair f
    0x8801820:   61 69 6c 65 64 00 00 00 21 21 21 61 70 70 5f 68    ailed...!!!app_h
    0x8801830:   61 6e 64 6c 65 5f 61 75 74 68 65 6e 5f 73 74 61    andle_authen_sta
    0x8801840:   74 65 5f 65 76 74 3a 20 75 6e 6b 6e 6f 77 6e 20    te_evt: unknown 
    0x8801850:   6e 65 77 73 74 61 74 65 20 25 64 00 21 2a 2a 61    newstate %d.!**a
    0x8801860:   70 70 5f 68 61 6e 64 6c 65 5f 63 6f 6e 6e 5f 6d    pp_handle_conn_m
    0x8801870:   74 75 5f 69 6e 66 6f 5f 65 76 74 3a 20 63 6f 6e    tu_info_evt: con
    0x8801880:   6e 5f 69 64 20 25 64 2c 20 6d 74 75 5f 73 69 7a    n_id %d, mtu_siz
    0x8801890:   65 20 25 64 00 00 00 00 21 2a 2a 61 70 70 5f 68    e %d....!**app_h
    0x88018a0:   61 6e 64 6c 65 5f 63 6f 6e 6e 5f 70 61 72 61 6d    andle_conn_param
    0x88018b0:   5f 75 70 64 61 74 65 5f 65 76 74 20 75 70 64 61    _update_evt upda
    0x88018c0:   74 65 20 73 75 63 63 65 73 73 3a 63 6f 6e 6e 5f    te success:conn_
    0x88018d0:   69 64 20 25 64 2c 20 63 6f 6e 6e 5f 69 6e 74 65    id %d, conn_inte
    0x88018e0:   72 76 61 6c 20 30 78 25 78 2c 20 63 6f 6e 6e 5f    rval 0x%x, conn_
    0x88018f0:   73 6c 61 76 65 5f 6c 61 74 65 6e 63 79 20 30 78    slave_latency 0x
    0x8801900:   25 78 2c 20 63 6f 6e 6e 5f 73 75 70 65 72 76 69    %x, conn_supervi
    0x8801910:   73 69 6f 6e 5f 74 69 6d 65 6f 75 74 20 30 78 25    sion_timeout 0x%
    0x8801920:   78 00 00 00 21 21 21 61 70 70 5f 68 61 6e 64 6c    x...!!!app_handl
    0x8801930:   65 5f 63 6f 6e 6e 5f 70 61 72 61 6d 5f 75 70 64    e_conn_param_upd
    0x8801940:   61 74 65 5f 65 76 74 20 75 70 64 61 74 65 20 66    ate_evt update f
    0x8801950:   61 69 6c 65 64 3a 20 63 6f 6e 6e 5f 69 64 20 25    ailed: conn_id %
    0x8801960:   64 2c 20 63 61 75 73 65 20 30 78 25 78 00 00 00    d, cause 0x%x...
    0x8801970:   21 2a 2a 61 70 70 5f 68 61 6e 64 6c 65 5f 63 6f    !**app_handle_co
    0x8801980:   6e 6e 5f 70 61 72 61 6d 5f 75 70 64 61 74 65 5f    nn_param_update_
    0x8801990:   65 76 74 20 75 70 64 61 74 65 20 70 65 6e 64 69    evt update pendi
    0x88019a0:   6e 67 3a 20 63 6f 6e 6e 5f 69 64 20 25 64 00 00    ng: conn_id %d..
    0x88019b0:   61 70 70 5f 68 61 6e 64 6c 65 5f 67 61 70 5f 6d    app_handle_gap_m
    0x88019c0:   73 67 3a 20 73 75 62 74 79 70 65 20 25 64 00 00    sg: subtype %d..
    0x88019d0:   21 2a 2a 47 41 50 5f 4d 53 47 5f 4c 45 5f 42 4f    !**GAP_MSG_LE_BO
    0x88019e0:   4e 44 5f 4a 55 53 54 5f 57 4f 52 4b 00 00 00 00    ND_JUST_WORK....
    0x88019f0:   21 2a 2a 47 41 50 5f 4d 53 47 5f 4c 45 5f 42 4f    !**GAP_MSG_LE_BO
    0x8801a00:   4e 44 5f 50 41 53 53 4b 45 59 5f 44 49 53 50 4c    ND_PASSKEY_DISPL
    0x8801a10:   41 59 3a 20 63 6f 6e 6e 5f 69 64 20 25 64 2c 20    AY: conn_id %d, 
    0x8801a20:   70 61 73 73 6b 65 79 20 25 64 00 00 21 2a 2a 47    passkey %d..!**G
    0x8801a30:   41 50 5f 4d 53 47 5f 4c 45 5f 42 4f 4e 44 5f 55    AP_MSG_LE_BOND_U
    0x8801a40:   53 45 52 5f 43 4f 4e 46 49 52 4d 41 54 49 4f 4e    SER_CONFIRMATION
    0x8801a50:   3a 20 63 6f 6e 6e 5f 69 64 20 25 64 2c 20 70 61    : conn_id %d, pa
    0x8801a60:   73 73 6b 65 79 20 25 64 00 00 00 00 21 2a 2a 47    sskey %d....!**G
    0x8801a70:   41 50 5f 4d 53 47 5f 4c 45 5f 42 4f 4e 44 5f 50    AP_MSG_LE_BOND_P
    0x8801a80:   41 53 53 4b 45 59 5f 49 4e 50 55 54 3a 20 63 6f    ASSKEY_INPUT: co
    0x8801a90:   6e 6e 5f 69 64 20 25 64 00 00 00 00 21 2a 2a 47    nn_id %d....!**G
    0x8801aa0:   41 50 5f 4d 53 47 5f 4c 45 5f 42 4f 4e 44 5f 4f    AP_MSG_LE_BOND_O
    0x8801ab0:   4f 42 5f 49 4e 50 55 54 3a 20 63 6f 6e 6e 5f 69    OB_INPUT: conn_i
    0x8801ac0:   64 20 25 64 00 00 00 00 21 21 21 61 70 70 5f 68    d %d....!!!app_h
    0x8801ad0:   61 6e 64 6c 65 5f 67 61 70 5f 6d 73 67 3a 20 75    andle_gap_msg: u
    0x8801ae0:   6e 6b 6e 6f 77 6e 20 73 75 62 74 79 70 65 20 25    nknown subtype %
    0x8801af0:   64 00 00 00 21 2a 2a 47 41 50 5f 41 44 54 59 50    d...!**GAP_ADTYP
    0x8801b00:   45 5f 53 4c 41 56 45 5f 43 4f 4e 4e 5f 49 4e 54    E_SLAVE_CONN_INT
    0x8801b10:   45 52 56 41 4c 5f 52 41 4e 47 45 3a 20 30 78 25    ERVAL_RANGE: 0x%
    0x8801b20:   78 20 2d 20 30 78 25 78 00 00 00 00 21 2a 2a 20    x - 0x%x....!** 
    0x8801b30:   20 41 44 20 44 61 74 61 3a 20 55 55 49 44 31 36     AD Data: UUID16
    0x8801b40:   20 4c 69 73 74 20 49 74 65 6d 20 25 64 20 3d 20     List Item %d = 
    0x8801b50:   30 78 25 78 00 00 00 00 21 2a 2a 47 41 50 5f 4d    0x%x....!**GAP_M
    0x8801b60:   53 47 5f 4c 45 5f 53 43 41 4e 5f 49 4e 46 4f 3a    SG_LE_SCAN_INFO:
    0x8801b70:   61 64 76 5f 74 79 70 65 20 30 78 25 78 2c 20 62    adv_type 0x%x, b
    0x8801b80:   64 5f 61 64 64 72 20 25 73 2c 20 72 65 6d 6f 74    d_addr %s, remot
    0x8801b90:   65 5f 61 64 64 72 5f 74 79 70 65 20 25 64 2c 20    e_addr_type %d, 
    0x8801ba0:   72 73 73 69 20 25 64 2c 20 64 61 74 61 5f 6c 65    rssi %d, data_le
    0x8801bb0:   6e 20 25 64 00 00 00 00 21 2a 2a 46 6f 75 6e 64    n %d....!**Found
    0x8801bc0:   20 73 69 6d 70 6c 65 20 62 6c 65 20 73 65 72 76     simple ble serv
    0x8801bd0:   69 63 65 00 21 2a 2a 47 41 50 5f 4d 53 47 5f 4c    ice.!**GAP_MSG_L
    0x8801be0:   45 5f 43 4f 4e 4e 5f 55 50 44 41 54 45 5f 49 4e    E_CONN_UPDATE_IN
    0x8801bf0:   44 3a 20 63 6f 6e 6e 5f 69 64 20 25 64 2c 20 63    D: conn_id %d, c
    0x8801c00:   6f 6e 6e 5f 69 6e 74 65 72 76 61 6c 5f 6d 61 78    onn_interval_max
    0x8801c10:   20 30 78 25 78 2c 20 63 6f 6e 6e 5f 69 6e 74 65     0x%x, conn_inte
    0x8801c20:   72 76 61 6c 5f 6d 69 6e 20 30 78 25 78 2c 20 63    rval_min 0x%x, c
    0x8801c30:   6f 6e 6e 5f 6c 61 74 65 6e 63 79 20 30 78 25 78    onn_latency 0x%x
    0x8801c40:   2c 73 75 70 65 72 76 69 73 69 6f 6e 5f 74 69 6d    ,supervision_tim
    0x8801c50:   65 6f 75 74 20 30 78 25 78 00 00 00 21 21 21 61    eout 0x%x...!!!a
    0x8801c60:   70 70 5f 67 61 70 5f 63 61 6c 6c 62 61 63 6b 3a    pp_gap_callback:
    0x8801c70:   20 75 6e 68 61 6e 64 6c 65 64 20 63 62 5f 74 79     unhandled cb_ty
    0x8801c80:   70 65 20 30 78 25 78 00 21 21 21 61 70 70 5f 64    pe 0x%x.!!!app_d
    0x8801c90:   69 73 63 6f 76 5f 73 65 72 76 69 63 65 73 3a 20    iscov_services: 
    0x8801ca0:   63 6f 6e 6e 5f 69 64 20 25 64 20 6e 6f 74 20 63    conn_id %d not c
    0x8801cb0:   6f 6e 6e 65 63 74 65 64 20 00 00 00 21 21 21 61    onnected ...!!!a
    0x8801cc0:   70 70 5f 64 69 73 63 6f 76 5f 73 65 72 76 69 63    pp_discov_servic
    0x8801cd0:   65 73 3a 20 64 69 73 63 6f 76 65 72 20 67 61 70    es: discover gap
    0x8801ce0:   73 20 66 61 69 6c 65 64 20 63 6f 6e 6e 5f 69 64    s failed conn_id
    0x8801cf0:   20 25 64 00 21 21 21 61 70 70 5f 64 69 73 63 6f     %d.!!!app_disco
    0x8801d00:   76 5f 73 65 72 76 69 63 65 73 3a 20 64 69 73 63    v_services: disc
    0x8801d10:   6f 76 65 72 20 73 69 6d 70 20 66 61 69 6c 65 64    over simp failed
    0x8801d20:   20 63 6f 6e 6e 5f 69 64 20 25 64 00 21 21 21 61     conn_id %d.!!!a
    0x8801d30:   70 70 5f 64 69 73 63 6f 76 5f 73 65 72 76 69 63    pp_discov_servic
    0x8801d40:   65 73 3a 20 64 69 73 63 6f 76 65 72 20 62 61 73    es: discover bas
    0x8801d50:   20 66 61 69 6c 65 64 20 63 6f 6e 6e 5f 69 64 20     failed conn_id 
    0x8801d60:   25 64 00 00 21 2a 2a 61 70 70 5f 64 69 73 63 6f    %d..!**app_disco
    0x8801d70:   76 5f 73 65 72 76 69 63 65 73 3a 20 64 69 73 63    v_services: disc
    0x8801d80:   6f 76 65 72 20 63 6f 6d 70 6c 65 74 65 2c 20 63    over complete, c
    0x8801d90:   6f 6e 6e 5f 69 64 20 25 64 2c 20 73 72 76 5f 66    onn_id %d, srv_f
    0x8801da0:   6f 75 6e 64 5f 66 6c 61 67 73 20 30 78 25 78 00    ound_flags 0x%x.
    0x8801db0:   21 2a 2a 61 70 70 5f 63 6c 69 65 6e 74 5f 63 61    !**app_client_ca
    0x8801dc0:   6c 6c 62 61 63 6b 3a 20 63 6c 69 65 6e 74 5f 69    llback: client_i
    0x8801dd0:   64 20 25 64 2c 20 63 6f 6e 6e 5f 69 64 20 25 64    d %d, conn_id %d
    0x8801de0:   00 00 00 00 21 2a 2a 61 70 70 5f 63 6c 69 65 6e    ....!**app_clien
    0x8801df0:   74 5f 63 61 6c 6c 62 61 63 6b 3a 20 64 69 73 63    t_callback: disc
    0x8801e00:   6f 76 65 72 20 67 61 70 73 20 70 72 6f 63 65 64    over gaps proced
    0x8801e10:   75 72 65 20 64 6f 6e 65 2e 00 00 00 21 2a 2a 61    ure done....!**a
    0x8801e20:   70 70 5f 63 6c 69 65 6e 74 5f 63 61 6c 6c 62 61    pp_client_callba
    0x8801e30:   63 6b 3a 20 64 69 73 63 6f 76 65 72 20 67 61 70    ck: discover gap
    0x8801e40:   73 20 72 65 71 75 65 73 74 20 66 61 69 6c 65 64    s request failed
    0x8801e50:   2e 00 00 00 21 2a 2a 47 41 50 53 5f 52 45 41 44    ....!**GAPS_READ
    0x8801e60:   5f 44 45 56 49 43 45 5f 4e 41 4d 45 3a 20 64 65    _DEVICE_NAME: de
    0x8801e70:   76 69 63 65 20 6e 61 6d 65 20 25 73 2e 00 00 00    vice name %s....
    0x8801e80:   21 2a 2a 47 41 50 53 5f 52 45 41 44 5f 44 45 56    !**GAPS_READ_DEV
    0x8801e90:   49 43 45 5f 4e 41 4d 45 3a 20 66 61 69 6c 64 65    ICE_NAME: failde
    0x8801ea0:   64 20 63 61 75 73 65 20 30 78 25 78 00 00 00 00    d cause 0x%x....
    0x8801eb0:   21 2a 2a 47 41 50 53 5f 52 45 41 44 5f 41 50 50    !**GAPS_READ_APP
    0x8801ec0:   45 41 52 41 4e 43 45 3a 20 61 70 70 65 61 72 61    EARANCE: appeara
    0x8801ed0:   6e 63 65 20 25 64 00 00 21 2a 2a 47 41 50 53 5f    nce %d..!**GAPS_
    0x8801ee0:   52 45 41 44 5f 41 50 50 45 41 52 41 4e 43 45 3a    READ_APPEARANCE:
    0x8801ef0:   20 66 61 69 6c 64 65 64 20 63 61 75 73 65 20 30     failded cause 0
    0x8801f00:   78 25 78 00 21 2a 2a 47 41 50 53 5f 52 45 41 44    x%x.!**GAPS_READ
    0x8801f10:   5f 43 45 4e 54 52 41 4c 5f 41 44 44 52 5f 52 45    _CENTRAL_ADDR_RE
    0x8801f20:   53 4f 4c 55 54 49 4f 4e 3a 20 63 65 6e 74 72 61    SOLUTION: centra
    0x8801f30:   6c 5f 61 64 64 72 5f 72 65 73 20 25 64 00 00 00    l_addr_res %d...
    0x8801f40:   21 2a 2a 47 41 50 53 5f 52 45 41 44 5f 43 45 4e    !**GAPS_READ_CEN
    0x8801f50:   54 52 41 4c 5f 41 44 44 52 5f 52 45 53 4f 4c 55    TRAL_ADDR_RESOLU
    0x8801f60:   54 49 4f 4e 3a 20 66 61 69 6c 64 65 64 20 63 61    TION: failded ca
    0x8801f70:   75 73 65 20 30 78 25 78 00 00 00 00 21 2a 2a 61    use 0x%x....!**a
    0x8801f80:   70 70 5f 63 6c 69 65 6e 74 5f 63 61 6c 6c 62 61    pp_client_callba
    0x8801f90:   63 6b 3a 20 64 69 73 63 6f 76 65 72 20 73 69 6d    ck: discover sim
    0x8801fa0:   70 20 70 72 6f 63 65 64 75 72 65 20 64 6f 6e 65    p procedure done
    0x8801fb0:   2e 00 00 00 21 2a 2a 61 70 70 5f 63 6c 69 65 6e    ....!**app_clien
    0x8801fc0:   74 5f 63 61 6c 6c 62 61 63 6b 3a 20 64 69 73 63    t_callback: disc
    0x8801fd0:   6f 76 65 72 20 73 69 6d 70 20 72 65 71 75 65 73    over simp reques
    0x8801fe0:   74 20 66 61 69 6c 65 64 2e 00 00 00 21 2a 2a 53    t failed....!**S
    0x8801ff0:   49 4d 50 5f 52 45 41 44 5f 56 31 5f 52 45 41 44    IMP_READ_V1_READ
    0x8802000:   3a 20 76 61 6c 75 65 5f 73 69 7a 65 20 25 64 2c    : value_size %d,
    0x8802010:   20 76 61 6c 75 65 20 25 62 00 00 00 21 21 21 53     value %b...!!!S
    0x8802020:   49 4d 50 5f 52 45 41 44 5f 56 31 5f 52 45 41 44    IMP_READ_V1_READ
    0x8802030:   3a 20 66 61 69 6c 65 64 20 63 61 75 73 65 20 30    : failed cause 0
    0x8802040:   78 25 78 00 21 2a 2a 53 49 4d 50 5f 52 45 41 44    x%x.!**SIMP_READ
    0x8802050:   5f 56 33 5f 4e 4f 54 49 46 59 5f 43 43 43 44 3a    _V3_NOTIFY_CCCD:
    0x8802060:   20 6e 6f 74 69 66 79 20 25 64 00 00 21 21 21 53     notify %d..!!!S
    0x8802070:   49 4d 50 5f 52 45 41 44 5f 56 33 5f 4e 4f 54 49    IMP_READ_V3_NOTI
    0x8802080:   46 59 5f 43 43 43 44 3a 20 66 61 69 6c 65 64 20    FY_CCCD: failed 
    0x8802090:   63 61 75 73 65 20 30 78 25 78 00 00 21 2a 2a 53    cause 0x%x..!**S
    0x88020a0:   49 4d 50 5f 52 45 41 44 5f 56 34 5f 49 4e 44 49    IMP_READ_V4_INDI
    0x88020b0:   43 41 54 45 5f 43 43 43 44 3a 20 69 6e 64 69 63    CATE_CCCD: indic
    0x88020c0:   61 74 65 20 25 64 00 00 21 21 21 53 49 4d 50 5f    ate %d..!!!SIMP_
    0x88020d0:   52 45 41 44 5f 56 34 5f 49 4e 44 49 43 41 54 45    READ_V4_INDICATE
    0x88020e0:   5f 43 43 43 44 3a 20 66 61 69 6c 65 64 20 63 61    _CCCD: failed ca
    0x88020f0:   75 73 65 20 30 78 25 78 00 00 00 00 21 2a 2a 53    use 0x%x....!**S
    0x8802100:   49 4d 50 5f 57 52 49 54 45 5f 56 32 5f 57 52 49    IMP_WRITE_V2_WRI
    0x8802110:   54 45 3a 20 77 72 69 74 65 20 72 65 73 75 6c 74    TE: write result
    0x8802120:   20 30 78 25 78 00 00 00 21 2a 2a 53 49 4d 50 5f     0x%x...!**SIMP_
    0x8802130:   57 52 49 54 45 5f 56 33 5f 4e 4f 54 49 46 59 5f    WRITE_V3_NOTIFY_
    0x8802140:   43 43 43 44 3a 20 77 72 69 74 65 20 72 65 73 75    CCCD: write resu
    0x8802150:   6c 74 20 30 78 25 78 00 21 2a 2a 53 49 4d 50 5f    lt 0x%x.!**SIMP_
    0x8802160:   57 52 49 54 45 5f 56 34 5f 49 4e 44 49 43 41 54    WRITE_V4_INDICAT
    0x8802170:   45 5f 43 43 43 44 3a 20 77 72 69 74 65 20 72 65    E_CCCD: write re
    0x8802180:   73 75 6c 74 20 30 78 25 78 00 00 00 21 2a 2a 53    sult 0x%x...!**S
    0x8802190:   49 4d 50 5f 56 33 5f 4e 4f 54 49 46 59 3a 20 76    IMP_V3_NOTIFY: v
    0x88021a0:   61 6c 75 65 5f 73 69 7a 65 20 25 64 2c 20 76 61    alue_size %d, va
    0x88021b0:   6c 75 65 20 25 62 00 00 21 2a 2a 53 49 4d 50 5f    lue %b..!**SIMP_
    0x88021c0:   56 34 5f 49 4e 44 49 43 41 54 45 3a 20 76 61 6c    V4_INDICATE: val
    0x88021d0:   75 65 5f 73 69 7a 65 20 25 64 2c 20 76 61 6c 75    ue_size %d, valu
    0x88021e0:   65 20 25 62 00 00 00 00 21 2a 2a 61 70 70 5f 63    e %b....!**app_c
    0x88021f0:   6c 69 65 6e 74 5f 63 61 6c 6c 62 61 63 6b 3a 20    lient_callback: 
    0x8802200:   64 69 73 63 6f 76 65 72 20 62 61 73 20 70 72 6f    discover bas pro
    0x8802210:   63 65 64 75 72 65 20 64 6f 6e 65 00 21 2a 2a 61    cedure done.!**a
    0x8802220:   70 70 5f 63 6c 69 65 6e 74 5f 63 61 6c 6c 62 61    pp_client_callba
    0x8802230:   63 6b 3a 20 64 69 73 63 6f 76 65 72 20 62 61 73    ck: discover bas
    0x8802240:   20 70 72 6f 63 65 64 75 72 65 20 66 61 69 6c 65     procedure faile
    0x8802250:   64 00 00 00 21 2a 2a 42 41 53 5f 52 45 41 44 5f    d...!**BAS_READ_
    0x8802260:   42 41 54 54 45 52 59 5f 4c 45 56 45 4c 3a 20 62    BATTERY_LEVEL: b
    0x8802270:   61 74 74 65 72 79 20 6c 65 76 65 6c 20 25 64 00    attery level %d.
    0x8802280:   21 21 21 42 41 53 5f 52 45 41 44 5f 42 41 54 54    !!!BAS_READ_BATT
    0x8802290:   45 52 59 5f 4c 45 56 45 4c 3a 20 66 61 69 6c 65    ERY_LEVEL: faile
    0x88022a0:   64 20 63 61 75 73 65 20 30 78 25 78 00 00 00 00    d cause 0x%x....
    0x88022b0:   21 2a 2a 42 41 53 5f 52 45 41 44 5f 4e 4f 54 49    !**BAS_READ_NOTI
    0x88022c0:   46 59 3a 20 6e 6f 74 69 66 79 20 25 64 00 00 00    FY: notify %d...
    0x88022d0:   21 21 21 42 41 53 5f 52 45 41 44 5f 4e 4f 54 49    !!!BAS_READ_NOTI
    0x88022e0:   46 59 3a 20 66 61 69 6c 65 64 20 63 61 75 73 65    FY: failed cause
    0x88022f0:   20 30 78 25 78 00 00 00 21 2a 2a 42 41 53 5f 57     0x%x...!**BAS_W
    0x8802300:   52 49 54 45 5f 4e 4f 54 49 46 59 5f 45 4e 41 42    RITE_NOTIFY_ENAB
    0x8802310:   4c 45 3a 20 77 72 69 74 65 20 72 65 73 75 6c 74    LE: write result
    0x8802320:   20 30 78 25 78 00 00 00 21 2a 2a 42 41 53 5f 57     0x%x...!**BAS_W
    0x8802330:   52 49 54 45 5f 4e 4f 54 49 46 59 5f 44 49 53 41    RITE_NOTIFY_DISA
    0x8802340:   42 4c 45 3a 20 77 72 69 74 65 20 72 65 73 75 6c    BLE: write resul
    0x8802350:   74 20 30 78 25 78 00 00 21 2a 2a 42 41 53 5f 43    t 0x%x..!**BAS_C
    0x8802360:   4c 49 45 4e 54 5f 43 42 5f 54 59 50 45 5f 4e 4f    LIENT_CB_TYPE_NO
    0x8802370:   54 49 46 5f 49 4e 44 5f 52 45 53 55 4c 54 3a 20    TIF_IND_RESULT: 
    0x8802380:   62 61 74 74 65 72 79 20 6c 65 76 65 6c 20 25 64    battery level %d
    0x8802390:   00 00 00 00 21 21 21 67 61 70 5f 63 6f 6e 66 69    ....!!!gap_confi
    0x88023a0:   67 5f 70 72 69 6e 74 5f 63 6f 6e 66 69 67 5f 70    g_print_config_p
    0x88023b0:   61 72 61 6d 3a 20 67 61 74 74 5f 63 63 63 64 5f    aram: gatt_cccd_
    0x88023c0:   6e 6f 74 5f 63 68 65 63 6b 20 25 64 2c 20 6c 65    not_check %d, le
    0x88023d0:   5f 6d 69 6e 5f 72 65 6d 5f 73 63 61 5f 66 6c 61    _min_rem_sca_fla
    0x88023e0:   67 20 25 64 2c 20 6c 65 5f 6d 69 6e 5f 72 65 6d    g %d, le_min_rem
    0x88023f0:   5f 73 63 61 5f 65 6e 63 6f 64 69 6e 67 20 25 64    _sca_encoding %d
    0x8802400:   2c 20 62 74 5f 72 65 70 6f 72 74 5f 62 75 66 5f    , bt_report_buf_
    0x8802410:   6e 75 6d 20 25 64 2c 20 67 61 74 74 5f 73 65 72    num %d, gatt_ser
    0x8802420:   76 65 72 5f 63 63 63 5f 62 69 74 73 5f 63 6f 75    ver_ccc_bits_cou
    0x8802430:   6e 74 20 25 64 2c 20 67 61 74 74 5f 73 74 6f 72    nt %d, gatt_stor
    0x8802440:   61 67 65 5f 63 63 63 5f 62 69 74 73 5f 63 6f 75    age_ccc_bits_cou
    0x8802450:   6e 74 20 25 64 2c 20 67 61 74 74 5f 6d 61 78 5f    nt %d, gatt_max_
    0x8802460:   61 74 74 72 69 62 75 74 65 5f 74 61 62 6c 65 5f    attribute_table_
    0x8802470:   63 6f 75 6e 74 20 25 64 2c 20 61 74 74 5f 6d 61    count %d, att_ma
    0x8802480:   78 5f 6d 74 75 5f 73 69 7a 65 20 25 64 00 00 00    x_mtu_size %d...
    0x8802490:   21 21 21 67 61 70 5f 63 6f 6e 66 69 67 5f 70 72    !!!gap_config_pr
    0x88024a0:   69 6e 74 5f 63 6f 6e 66 69 67 5f 70 61 72 61 6d    int_config_param
    0x88024b0:   3a 20 6c 65 5f 6b 65 79 5f 73 74 6f 72 61 67 65    : le_key_storage
    0x88024c0:   5f 66 6c 61 67 20 30 78 25 78 2c 20 6d 61 78 5f    _flag 0x%x, max_
    0x88024d0:   6c 65 5f 70 61 69 72 65 64 5f 64 65 76 69 63 65    le_paired_device
    0x88024e0:   20 25 64 2c 20 62 74 65 5f 70 6f 6f 6c 5f 73 69     %d, bte_pool_si
    0x88024f0:   7a 65 20 25 64 00 00 00 21 21 21 67 61 70 5f 63    ze %d...!!!gap_c
    0x8802500:   6f 6e 66 69 67 5f 70 72 69 6e 74 5f 63 6f 6e 66    onfig_print_conf
    0x8802510:   69 67 5f 70 61 72 61 6d 3a 62 74 5f 62 64 5f 61    ig_param:bt_bd_a
    0x8802520:   64 64 72 20 25 73 00 00 21 21 21 67 61 70 5f 6c    ddr %s..!!!gap_l
    0x8802530:   69 62 5f 69 6e 69 74 3a 20 76 65 72 20 25 64 2c    ib_init: ver %d,
    0x8802540:   20 46 5f 42 54 5f 4c 45 5f 35 5f 30 5f 53 55 50     F_BT_LE_5_0_SUP
    0x8802550:   50 4f 52 54 20 25 64 2c 20 46 5f 42 54 5f 4c 45    PORT %d, F_BT_LE
    0x8802560:   5f 35 5f 30 5f 41 45 5f 41 44 56 5f 53 55 50 50    _5_0_AE_ADV_SUPP
    0x8802570:   4f 52 54 20 25 64 2c 20 46 5f 42 54 5f 4c 45 5f    ORT %d, F_BT_LE_
    0x8802580:   35 5f 30 5f 41 45 5f 53 43 41 4e 5f 53 55 50 50    5_0_AE_SCAN_SUPP
    0x8802590:   4f 52 54 20 25 64 2c 20 46 5f 42 54 5f 4c 45 5f    ORT %d, F_BT_LE_
    0x88025a0:   34 5f 31 5f 43 42 43 5f 53 55 50 50 4f 52 54 20    4_1_CBC_SUPPORT 
    0x88025b0:   25 64 2c 20 46 5f 42 54 5f 56 45 4e 44 4f 52 5f    %d, F_BT_VENDOR_
    0x88025c0:   46 45 41 54 55 52 45 5f 53 55 50 50 4f 52 54 20    FEATURE_SUPPORT 
    0x88025d0:   25 64 2c 20 46 5f 42 54 5f 4c 45 5f 36 5f 30 5f    %d, F_BT_LE_6_0_
    0x88025e0:   41 4f 41 5f 41 4f 44 5f 53 55 50 50 4f 52 54 20    AOA_AOD_SUPPORT 
    0x88025f0:   25 64 2c 20 46 5f 42 54 5f 4c 45 5f 36 5f 30 5f    %d, F_BT_LE_6_0_
    0x8802600:   41 4f 58 5f 43 4f 4e 4e 4c 45 53 53 5f 53 55 50    AOX_CONNLESS_SUP
    0x8802610:   50 4f 52 54 20 25 64 00 21 21 21 67 61 70 5f 6c    PORT %d.!!!gap_l
    0x8802620:   69 62 5f 69 6e 69 74 3a 20 46 5f 42 54 5f 4c 45    ib_init: F_BT_LE
    0x8802630:   5f 53 4d 50 5f 53 43 5f 4f 4f 42 5f 53 55 50 50    _SMP_SC_OOB_SUPP
    0x8802640:   4f 52 54 20 25 64 2c 20 46 5f 42 54 5f 53 57 5f    ORT %d, F_BT_SW_
    0x8802650:   52 45 53 45 54 5f 53 55 50 50 4f 52 54 20 25 64    RESET_SUPPORT %d
    0x8802660:   2c 20 46 5f 42 54 5f 50 41 54 43 48 5f 46 4f 52    , F_BT_PATCH_FOR
    0x8802670:   5f 43 48 41 4e 47 45 5f 41 50 49 20 25 64 2c 20    _CHANGE_API %d, 
    0x8802680:   46 5f 42 54 5f 44 4c 50 53 5f 41 50 49 20 25 64    F_BT_DLPS_API %d
    0x8802690:   2c 20 46 5f 42 54 5f 43 4f 4e 46 49 47 5f 41 50    , F_BT_CONFIG_AP
    0x88026a0:   49 20 25 64 2c 20 46 5f 42 54 5f 56 45 4e 44 4f    I %d, F_BT_VENDO
    0x88026b0:   52 5f 41 50 49 20 25 64 00 00 00 00 21 2a 2a 6c    R_API %d....!**l
    0x88026c0:   65 5f 63 68 65 63 6b 5f 70 72 69 76 61 63 79 5f    e_check_privacy_
    0x88026d0:   62 6f 6e 64 3a 20 69 64 78 20 25 64 20 70 72 69    bond: idx %d pri
    0x88026e0:   76 61 63 79 20 64 65 76 69 63 65 00 21 2a 2a 6c    vacy device.!**l
    0x88026f0:   65 5f 63 68 65 63 6b 5f 70 72 69 76 61 63 79 5f    e_check_privacy_
    0x8802700:   62 6f 6e 64 3a 20 6e 6f 74 20 70 72 69 76 61 63    bond: not privac
    0x8802710:   79 20 64 65 76 69 63 65 2c 20 63 61 75 73 65 20    y device, cause 
    0x8802720:   25 64 00 00 21 2a 2a 6c 65 5f 67 65 6e 5f 72 61    %d..!**le_gen_ra
    0x8802730:   6e 64 5f 61 64 64 72 3a 20 67 61 70 5f 6c 69 62    nd_addr: gap_lib
    0x8802740:   2c 20 72 61 6e 64 6f 6d 20 61 64 64 72 20 25 73    , random addr %s
    0x8802750:   2c 20 61 64 64 72 20 74 79 70 65 20 25 64 00 00    , addr type %d..
    0x8802760:   21 2a 2a 6c 65 5f 62 6f 6e 64 5f 67 65 74 5f 73    !**le_bond_get_s
    0x8802770:   65 63 5f 6c 65 76 65 6c 3a 20 25 64 00 00 00 00    ec_level: %d....


** Section #11 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 1476 bytes


** Section #12 '.debug_frame' (SHT_PROGBITS)
    Size   : 6444 bytes


** Section #13 '.debug_info' (SHT_PROGBITS)
    Size   : 170224 bytes


** Section #14 '.debug_line' (SHT_PROGBITS)
    Size   : 30588 bytes


** Section #15 '.debug_loc' (SHT_PROGBITS)
    Size   : 19632 bytes


** Section #16 '.debug_macinfo' (SHT_PROGBITS)
    Size   : 78508 bytes


** Section #17 '.debug_pubnames' (SHT_PROGBITS)
    Size   : 6173 bytes


** Section #18 '.symtab' (SHT_SYMTAB)
    Size   : 25936 bytes (alignment 4)
    String table #19 '.strtab'
    Last local symbol no. 782


** Section #19 '.strtab' (SHT_STRTAB)
    Size   : 20800 bytes


** Section #20 '.note' (SHT_NOTE)
    Size   : 56 bytes (alignment 4)


** Section #21 '.comment' (SHT_PROGBITS)
    Size   : 23464 bytes


** Section #22 '.shstrtab' (SHT_STRTAB)
    Size   : 276 bytes


address     size       variable name                            type
0x0020d20c  0x4        mxchp_qc_task                            pointer to unknown Type 

address     size       variable name                            type
0x0020d208  0x4        qc_app_task_handle                       pointer to unknown Type 

address     size       variable name                            type
0x0020d210  0x4        qc_evt_queue_handle                      pointer to unknown Type 

address     size       variable name                            type
0x0020d214  0x4        qc_io_queue_handle                       pointer to unknown Type 

address     size       variable name                            type
0x0020cf50  0x6c       overlay_sections                         array[3] of T_OVERLAY_SECTION

address     size       variable name                            type
0x0020d200  0x8        scenario_name                            array[8] of char

address     size       variable name                            type
0x0020d1f8  0x4        h_event_q                                pointer to unknown Type 

address     size       variable name                            type
0x0020d1fc  0x4        h_io_q                                   pointer to unknown Type 

address     size       variable name                            type
0x0020d1cf  0x28       app_link_table                           array[4] of T_APP_LINK

address     size       variable name                            type
0x0020d1a5  0x2a       dev_list                                 array[6] of T_DEV_INFO

address     size       variable name                            type
0x0020d1a4  0x1        dev_list_count                           uint8_t

address     size       variable name                            type
0x0020d1a3  0x1        bas_client_id                            T_CLIENT_ID

address     size       variable name                            type
0x0020d1a0  0x1        gap_dev_state                            T_GAP_DEV_STATE
0x0020d1a0  0x1(7:1)   gap_dev_state.gap_init_state             uint8_t
0x0020d1a0  0x1(6:1)   gap_dev_state.gap_adv_sub_state          uint8_t
0x0020d1a0  0x1(4:2)   gap_dev_state.gap_adv_state              uint8_t
0x0020d1a0  0x1(2:2)   gap_dev_state.gap_scan_state             uint8_t
0x0020d1a0  0x1(0:2)   gap_dev_state.gap_conn_state             uint8_t

address     size       variable name                            type
0x0020d1a2  0x1        gaps_client_id                           T_CLIENT_ID

address     size       variable name                            type
0x0020d1a1  0x1        simple_ble_client_id                     T_CLIENT_ID

address     size       variable name                            type
0x0020d194  0x4        app_task_handle                          pointer to unknown Type 

address     size       variable name                            type
0x0020d198  0x4        evt_queue_handle                         pointer to unknown Type 

address     size       variable name                            type
0x0020d19c  0x4        io_queue_handle                          pointer to unknown Type 

address     size       variable name                            type
0x0020cff0  0x1a4      user_cmd_if                              T_USER_CMD_IF
0x0020cff0  0x66       user_cmd_if.cmdline_buf                  array[102] of char
0x0020d056  0x1        user_cmd_if.cmd_cur                      uint8_t
0x0020d057  0x132      user_cmd_if.cmd_history                  array[3] of array[102] of uint8_t
0x0020d189  0x3        user_cmd_if.cmd_history_len              array[3] of uint8_t
0x0020d18c  0x1        user_cmd_if.history_head                 uint8_t
0x0020d18d  0x1        user_cmd_if.history_tail                 uint8_t
0x0020d18e  0x1      * user_cmd_if.history_cur                  uint8_t
0x0020d190  0x4        user_cmd_if.accum_cmd_len                int32_t

address     size       variable name                            type
0x0021c894  0x1a0      user_cmd_table                           array[26] of const T_USER_CMD_TABLE_ENTRY

address     size       variable name                            type
0x0020cf4e  0x1        gaps_client                              T_CLIENT_ID

address     size       variable name                            type
0x0020cfe8  0x4        gaps_client_cb                           P_FUN_GENERAL_APP_CB

address     size       variable name                            type
0x0021c86c  0x18       gaps_client_cbs                          const T_FUN_CLIENT_CBS
0x0021c86c  0x4        gaps_client_cbs.discover_state_cb        P_FUN_DISCOVER_STATE_CB
0x0021c870  0x4        gaps_client_cbs.discover_result_cb       P_FUN_DISCOVER_RESULT_CB
0x0021c874  0x4        gaps_client_cbs.read_result_cb           P_FUN_READ_RESULT_CB
0x0021c878  0x4        gaps_client_cbs.write_result_cb          P_FUN_WRITE_RESULT_CB
0x0021c87c  0x4        gaps_client_cbs.notify_ind_result_cb     P_FUN_NOTIFY_IND_RESULT_CB
0x0021c880  0x4        gaps_client_cbs.disconnect_cb            P_FUN_DISCONNECT_CB

address     size       variable name                            type
0x0020cfe4  0x1        gaps_link_num                            uint8_t

address     size       variable name                            type
0x0020cfec  0x4        gaps_table                               P_GAPS_LINK

address     size       variable name                            type
0x0020cf4d  0x1        bas_client                               T_CLIENT_ID

address     size       variable name                            type
0x0020cfdc  0x4        bas_client_cb                            P_FUN_GENERAL_APP_CB

address     size       variable name                            type
0x0021c844  0x18       bas_client_cbs                           const T_FUN_CLIENT_CBS
0x0021c844  0x4        bas_client_cbs.discover_state_cb         P_FUN_DISCOVER_STATE_CB
0x0021c848  0x4        bas_client_cbs.discover_result_cb        P_FUN_DISCOVER_RESULT_CB
0x0021c84c  0x4        bas_client_cbs.read_result_cb            P_FUN_READ_RESULT_CB
0x0021c850  0x4        bas_client_cbs.write_result_cb           P_FUN_WRITE_RESULT_CB
0x0021c854  0x4        bas_client_cbs.notify_ind_result_cb      P_FUN_NOTIFY_IND_RESULT_CB
0x0021c858  0x4        bas_client_cbs.disconnect_cb             P_FUN_DISCONNECT_CB

address     size       variable name                            type
0x0020cfd8  0x1        bas_link_num                             uint8_t

address     size       variable name                            type
0x0020cfe0  0x4        bas_table                                P_BAS_LINK

address     size       variable name                            type
0x0020be08  0x18       simp_ble_client_cbs                      const T_FUN_CLIENT_CBS
0x0020be08  0x4        simp_ble_client_cbs.discover_state_cb    P_FUN_DISCOVER_STATE_CB
0x0020be0c  0x4        simp_ble_client_cbs.discover_result_cb   P_FUN_DISCOVER_RESULT_CB
0x0020be10  0x4        simp_ble_client_cbs.read_result_cb       P_FUN_READ_RESULT_CB
0x0020be14  0x4        simp_ble_client_cbs.write_result_cb      P_FUN_WRITE_RESULT_CB
0x0020be18  0x4        simp_ble_client_cbs.notify_ind_result_cb P_FUN_NOTIFY_IND_RESULT_CB
0x0020be1c  0x4        simp_ble_client_cbs.disconnect_cb        P_FUN_DISCONNECT_CB

address     size       variable name                            type
0x0020cf4c  0x1        simp_client                              T_CLIENT_ID

address     size       variable name                            type
0x0020cfd0  0x4        simp_client_cb                           P_FUN_GENERAL_APP_CB

address     size       variable name                            type
0x0020cfcc  0x1        simp_link_num                            uint8_t

address     size       variable name                            type
0x0020cfd4  0x4        simp_table                               P_SIMP_LINK

address     size       variable name                            type
0x0020bde8  0x20       app_cb_table                             const T_APP_CB_TABLE
0x0020bde8  0x4        app_cb_table.app_cb_signature            uint32_t
0x0020bdec  0x4        app_cb_table.app_cb_numbers              uint32_t
0x0020bdf0  0x18       app_cb_table.app_cb_addr                 array[6] of uint32_t

address     size       variable name                            type
0x0020cfc4  0x4        app_pre_main_cb                          USER_CALL_BACK

address     size       variable name                            type
0x0080e1e0  0x220      auth_header                              const T_AUTH_HEADER_FORMAT
0x0080e1e0  0x100      auth_header.payload_signature            array[256] of uint8_t
0x0080e2e0  0x10       auth_header.payload_mac                  array[16] of uint8_t
0x0080e2f0  0x100      auth_header.header_signature             array[256] of uint8_t
0x0080e3f0  0x10       auth_header.header_mac                   array[16] of uint8_t

address     size       variable name                            type
0x0020cf48  0x4        check_reset_ram                          T_CHECK_RESET_RAM_RECORD
0x0020cf48  0x4(8:24)  check_reset_ram.check_reset_ram_pattern  uint32_t
0x0020cf48  0x4(0:8)   check_reset_ram.check_reset_ram_type     uint32_t

address     size       variable name                            type
0x0080e000  0x1e0      img_header                               const T_IMG_HEADER_FORMAT
0x0080e000  0xc        img_header.ctrl_header                   T_IMG_CTRL_HEADER_FORMAT
0x0080e000  0x1        img_header.ctrl_header.ic_type           uint8_t
0x0080e001  0x1        img_header.ctrl_header.secure_version    uint8_t
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag         anonymous
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag.value   uint16_t
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag.flag_value anonymous
0x0080e002  0x2(15:1)  img_header.ctrl_header.ctrl_flag.flag_value.xip uint16_t
0x0080e002  0x2(14:1)  img_header.ctrl_header.ctrl_flag.flag_value.enc uint16_t
0x0080e002  0x2(13:1)  img_header.ctrl_header.ctrl_flag.flag_value.load_when_boot uint16_t
0x0080e002  0x2(12:1)  img_header.ctrl_header.ctrl_flag.flag_value.enc_load uint16_t
0x0080e002  0x2(9:3)   img_header.ctrl_header.ctrl_flag.flag_value.enc_key_select uint16_t
0x0080e002  0x2(8:1)   img_header.ctrl_header.ctrl_flag.flag_value.not_ready uint16_t
0x0080e002  0x2(7:1)   img_header.ctrl_header.ctrl_flag.flag_value.not_obsolete uint16_t
0x0080e002  0x2(6:1)   img_header.ctrl_header.ctrl_flag.flag_value.integrity_check_en_in_boot uint16_t
0x0080e002  0x2(0:6)   img_header.ctrl_header.ctrl_flag.flag_value.rsvd uint16_t
0x0080e004  0x2        img_header.ctrl_header.image_id          uint16_t
0x0080e006  0x2        img_header.ctrl_header.crc16             uint16_t
0x0080e008  0x4        img_header.ctrl_header.payload_len       uint32_t
0x0080e00c  0x10       img_header.uuid                          array[16] of uint8_t
0x0080e01c  0x4        img_header.exe_base                      uint32_t
0x0080e020  0x4        img_header.load_base                     uint32_t
0x0080e024  0x4        img_header.load_len                      uint32_t
0x0080e028  0x4        img_header.img_base                      uint32_t
0x0080e02c  0x4        img_header.rsvd0                         array[4] of uint8_t
0x0080e030  0x4        img_header.magic_pattern                 uint32_t
0x0080e034  0x10       img_header.dec_key                       array[16] of uint8_t
0x0080e044  0x1c       img_header.rsvd1                         array[28] of uint8_t
0x0080e060  0x10       img_header.git_ver                       T_VERSION_FORMAT
0x0080e060  0x4        img_header.git_ver.ver_info              anonymous
0x0080e060  0x4        img_header.git_ver.ver_info.version      uint32_t
0x0080e060  0x4        img_header.git_ver.ver_info.sub_version  anonymous
0x0080e060  0x4(28:4)  img_header.git_ver.ver_info.sub_version._version_major uint32_t
0x0080e060  0x4(20:8)  img_header.git_ver.ver_info.sub_version._version_minor uint32_t
0x0080e060  0x4(5:15)  img_header.git_ver.ver_info.sub_version._version_revision uint32_t
0x0080e060  0x4(0:5)   img_header.git_ver.ver_info.sub_version._version_reserve uint32_t
0x0080e064  0x4        img_header.git_ver._version_commitid     uint32_t
0x0080e068  0x8        img_header.git_ver._customer_name        array[8] of uint8_t
0x0080e070  0x104      img_header.rsaPubKey                     T_RSA_PUBLIC_KEY
0x0080e070  0x100      img_header.rsaPubKey.N                   array[256] of uint8_t
0x0080e170  0x4        img_header.rsaPubKey.E                   array[4] of uint8_t
0x0080e174  0x20       img_header.sha256                        array[32] of uint8_t
0x0080e194  0x44       img_header.rsvd2                         array[68] of uint8_t
0x0080e1d8  0x4        img_header.app_cb_signature              uint32_t
0x0080e1dc  0x4        img_header.app_cb_table_base_address     uint32_t

address     size       variable name                            type
0x0020cfc8  0x4        random_seed_value                        uint32_t

address     size       variable name                            type
0x0020cfc0  0x4        user_dfu_status_cb                       BOOL_DFU_STATUS_CB

address     size       variable name                            type
0x0020cfbc  0x4        user_wdg_cb                              BOOL_WDG_CB

