
========================================================================

** ELF Header Information

    File Name: E:\work\project\P1871\source_2\BEE2-SDK-v1.1.0-git\ble\board\evb\ble_central\Objects\app.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: 0x0080e409
    Flags: EF_ARM_HASENTRY (0x05000002)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Base float procedure-call standard

    Built with
    Component: ARM Compiler 5.06 update 1 (build 61) Tool: armasm [4d35a5]
    Component: ARM Compiler 5.06 update 1 (build 61) Tool: armlink [4d35a8]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 2
    Section header entries: 23

    Program header offset: 422476 (0x0006724c)
    Section header offset: 422540 (0x0006728c)

    Section header string table index: 22

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_W + PF_R + PF_ARM_ENTRY]
    Size : 27868 bytes (27036 bytes in file)
    Virtual address: 0x0080e000 (Alignment 4)


====================================

** Program header #1 (PT_LOAD) [PF_R]
    Size : 10112 bytes
    Virtual address: 0x08800000 (Alignment 4)


========================================================================

** Section #1 'app.bin' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 1024 bytes (alignment 4)
    Address: 0x0080e000

    0x80e000:   05 00 01 01 93 27 00 00 00 01 00 00 6d 67 de f1    .....'......mg..
    0x80e010:   3e 33 e8 11 b1 02 4d 2d f4 0c de 01 00 e4 80 00    >3....M-........
    0x80e020:   00 e4 80 00 00 00 00 00 00 e0 80 00 00 00 00 00    ................
    0x80e030:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e040:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e050:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e060:   01 20 00 00 a8 ac 83 2a 73 64 6b 23 23 23 23 23    . .....*sdk#####
    0x80e070:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e080:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e090:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e0f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e100:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e110:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e120:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e130:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e140:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e150:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e160:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e170:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e180:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e190:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1d0:   00 00 00 00 00 00 00 00 01 d1 85 0e 38 bf 20 00    ............8. .
    0x80e1e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e1f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e200:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e210:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e220:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e230:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e240:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e250:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e260:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e270:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e280:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e290:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e2e0:   ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
    0x80e2f0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e300:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e310:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e320:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e330:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e340:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e350:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e360:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e370:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e380:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e390:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3a0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3b0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3c0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3d0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3e0:   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
    0x80e3f0:   ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................


** Section #2 'FLASH_START_ADDR' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 8 bytes (alignment 4)
    Address: 0x0080e400

    $t
    RESET
    $v0
    Reset_Handler
;;; ..\\..\\..\\src\\mcu\\rtl876x\\arm\\startup_rtl8762c.s
;;;96                     IMPORT SystemInit
;;;96                     LDR    R0, =SystemInit
        0x0080e400:    4800        .H      LDR      r0,[pc,#0] ; [0x80e404] = 0x80e55f
;;;97                     BX     R0
        0x0080e402:    4700        .G      BX       r0
    $d
        0x0080e404:    0080e55f    _...    DCD    8447327

** Section #3 'FLASH_TEXT' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 884 bytes (alignment 4)
    Address: 0x0080e408

    $t
    !!!main
    __main
        0x0080e408:    f3af8000    ....    NOP.W    
        0x0080e40c:    f5f9f3fe    ....    BL       __rt_entry ; 0x207c0c
    .app.flash.text
    ram_init
;;;369    {
        0x0080e410:    b510        ..      PUSH     {r4,lr}
;;;370        //copy data on ro
;;;371        extern char Image$$RAM_DATA_ON$$RO$$Base[];
;;;372        extern char Load$$RAM_DATA_ON$$RO$$Base[];
;;;373        extern unsigned int Image$$RAM_DATA_ON$$RO$$Length;
;;;374    
;;;375        memcpy(Image$$RAM_DATA_ON$$RO$$Base,
        0x0080e412:    4a7c        |J      LDR      r2,[pc,#496] ; [0x80e604] = 0x5424
        0x0080e414:    497c        |I      LDR      r1,[pc,#496] ; [0x80e608] = 0x80e870
        0x0080e416:    487d        }H      LDR      r0,[pc,#500] ; [0x80e60c] = 0x207c00
        0x0080e418:    f44bf53f    K.?.    BL       __aeabi_memcpy ; 0x59e9a
;;;376               Load$$RAM_DATA_ON$$RO$$Base,
;;;377               (unsigned int)&Image$$RAM_DATA_ON$$RO$$Length);
;;;378    
;;;379        //copy data on rw
;;;380        extern char Image$$RAM_DATA_ON$$RW$$Base[];
;;;381        extern char Load$$RAM_DATA_ON$$RW$$Base[];
;;;382        extern unsigned int Image$$RAM_DATA_ON$$RW$$Length;
;;;383    
;;;384        memcpy(Image$$RAM_DATA_ON$$RW$$Base,
        0x0080e41c:    4a7c        |J      LDR      r2,[pc,#496] ; [0x80e610] = 0x74
        0x0080e41e:    497d        }I      LDR      r1,[pc,#500] ; [0x80e614] = 0x813c94
        0x0080e420:    487d        }H      LDR      r0,[pc,#500] ; [0x80e618] = 0x20d024
        0x0080e422:    f44bf53a    K.:.    BL       __aeabi_memcpy ; 0x59e9a
;;;385               Load$$RAM_DATA_ON$$RW$$Base,
;;;386               (unsigned int)&Image$$RAM_DATA_ON$$RW$$Length);
;;;387    
;;;388        //clear data on zi
;;;389        extern char Image$$RAM_DATA_ON$$ZI$$Base[];
;;;390        extern unsigned int Image$$RAM_DATA_ON$$ZI$$Length;
;;;391    
;;;392        memset(Image$$RAM_DATA_ON$$ZI$$Base,
        0x0080e426:    497d        }I      LDR      r1,[pc,#500] ; [0x80e61c] = 0x340
        0x0080e428:    487d        }H      LDR      r0,[pc,#500] ; [0x80e620] = 0x20d098
        0x0080e42a:    f44bf5f7    K...    BL       __aeabi_memclr ; 0x5a01c
;;;393               0,
;;;394               (unsigned int)&Image$$RAM_DATA_ON$$ZI$$Length);
;;;395    
;;;396        //copy cache ro
;;;397        extern char Image$$CACHE_DATA_ON$$RO$$Base[];
;;;398        extern char Load$$CACHE_DATA_ON$$RO$$Base[];
;;;399        extern unsigned int Image$$CACHE_DATA_ON$$RO$$Length;
;;;400    
;;;401        memcpy(Image$$CACHE_DATA_ON$$RO$$Base,
        0x0080e42e:    4a7d        }J      LDR      r2,[pc,#500] ; [0x80e624] = 0xbd4
        0x0080e430:    497d        }I      LDR      r1,[pc,#500] ; [0x80e628] = 0x813dc8
        0x0080e432:    487e        ~H      LDR      r0,[pc,#504] ; [0x80e62c] = 0x21c000
        0x0080e434:    f44bf531    K.1.    BL       __aeabi_memcpy ; 0x59e9a
;;;402               Load$$CACHE_DATA_ON$$RO$$Base,
;;;403               (unsigned int)&Image$$CACHE_DATA_ON$$RO$$Length);
;;;404    
;;;405        //copy share cache ram rw
;;;406        extern char Image$$CACHE_DATA_ON$$RW$$Base[];
;;;407        extern char Load$$CACHE_DATA_ON$$RW$$Base[];
;;;408        extern unsigned int Image$$CACHE_DATA_ON$$RW$$Length;
;;;409    
;;;410        memcpy(Image$$CACHE_DATA_ON$$RW$$Base,
        0x0080e438:    4a7d        }J      LDR      r2,[pc,#500] ; [0x80e630] = 0
        0x0080e43a:    497e        ~I      LDR      r1,[pc,#504] ; [0x80e634] = 0x81499c
        0x0080e43c:    487e        ~H      LDR      r0,[pc,#504] ; [0x80e638] = 0x21cbd4
        0x0080e43e:    f44bf52c    K.,.    BL       __aeabi_memcpy ; 0x59e9a
;;;411               Load$$CACHE_DATA_ON$$RW$$Base,
;;;412               (unsigned int)&Image$$CACHE_DATA_ON$$RW$$Length);
;;;413    
;;;414        //clear share cache ram zi
;;;415        extern char Image$$CACHE_DATA_ON$$ZI$$Base[];
;;;416        extern unsigned int Image$$CACHE_DATA_ON$$ZI$$Length;
;;;417    
;;;418        memset(Image$$CACHE_DATA_ON$$ZI$$Base,
        0x0080e442:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e446:    497d        }I      LDR      r1,[pc,#500] ; [0x80e63c] = 0
        0x0080e448:    487d        }H      LDR      r0,[pc,#500] ; [0x80e640] = 0x21cbd4
        0x0080e44a:    f44bb5e7    K...    B        __aeabi_memclr ; 0x5a01c
    random_seed_init
;;;419               0,
;;;420               (unsigned int)&Image$$CACHE_DATA_ON$$ZI$$Length);
;;;421    }
;;;422    
;;;423    uint32_t random_seed_value;
;;;424    
;;;425    APP_FLASH_TEXT_SECTION
;;;426    void random_seed_init(void)
;;;427    {
        0x0080e44e:    b57f        ..      PUSH     {r0-r6,lr}
;;;428        uint16_t crc16;
;;;429        uint8_t buf[DATA_SIZE_FOR_RANDOM_SEED];
;;;430        uint8_t *sour_addr = (uint8_t *)(OTP->appDataAddr + OTP->appDataSize + OTP->heapDataONSize);
        0x0080e450:    f44f1000    O...    MOV      r0,#0x200000
        0x0080e454:    e9f012e0    ....    LDRD     r1,r2,[r0,#0x380]!
        0x0080e458:    4411        .D      ADD      r1,r1,r2
        0x0080e45a:    6880        .h      LDR      r0,[r0,#8]
        0x0080e45c:    2210        ."      MOVS     r2,#0x10
        0x0080e45e:    180d        ..      ADDS     r5,r1,r0
;;;431    
;;;432        memcpy(buf, sour_addr, DATA_SIZE_FOR_RANDOM_SEED);
        0x0080e460:    4629        )F      MOV      r1,r5
        0x0080e462:    4668        hF      MOV      r0,sp
        0x0080e464:    f44bf519    K...    BL       __aeabi_memcpy ; 0x59e9a
;;;433        crc16 = btxfcs(0, buf, DATA_SIZE_FOR_RANDOM_SEED);
        0x0080e468:    2210        ."      MOVS     r2,#0x10
        0x0080e46a:    4669        iF      MOV      r1,sp
        0x0080e46c:    2000        .       MOVS     r0,#0
        0x0080e46e:    f7f8dfb1    ....    BL       btxfcs ; 0x73d4
;;;434    
;;;435        random_seed_value = (crc16 << 16) | (*(volatile uint32_t *)(0x4005817C) & 0xFFFF);
        0x0080e472:    4974        tI      LDR      r1,[pc,#464] ; [0x80e644] = 0x40058000
        0x0080e474:    f8d1117c    ..|.    LDR      r1,[r1,#0x17c]
        0x0080e478:    4e73        sN      LDR      r6,[pc,#460] ; [0x80e648] = 0x20d098
        0x0080e47a:    f360411f    `..A    BFI      r1,r0,#16,#16
;;;436    
;;;437        random_seed_value *= platform_random(0xFFFFFFFF);
        0x0080e47e:    f04f30ff    O..0    MOV      r0,#0xffffffff
        0x0080e482:    60f1        .`      STR      r1,[r6,#0xc]
        0x0080e484:    f7f9d995    ....    BL       platform_random ; 0x77b2
        0x0080e488:    68f1        .h      LDR      r1,[r6,#0xc]
        0x0080e48a:    4348        HC      MULS     r0,r1,r0
;;;438    
;;;439        srand(random_seed_value);
        0x0080e48c:    60f0        .`      STR      r0,[r6,#0xc]
        0x0080e48e:    f5fdf4b1    ....    BL       srand ; 0x20bdf4
;;;440    
;;;441        for (int i = 0; i < (DATA_SIZE_FOR_RANDOM_SEED / 4); ++i)
        0x0080e492:    2400        .$      MOVS     r4,#0
        0x0080e494:    f60df5bc    ....    BL       rand ; 0x21c010
        0x0080e498:    f8450024    E.$.    STR      r0,[r5,r4,LSL #2]
        0x0080e49c:    1c64        d.      ADDS     r4,r4,#1
        0x0080e49e:    2c04        .,      CMP      r4,#4
        0x0080e4a0:    dbf8        ..      BLT      0x80e494 ; random_seed_init + 70
;;;442        {
;;;443            *(uint32_t *)(sour_addr + i * 4) = rand();
;;;444        }
;;;445    
;;;446        random_seed_value = rand();
        0x0080e4a2:    f60df5b5    ....    BL       rand ; 0x21c010
        0x0080e4a6:    60f0        .`      STR      r0,[r6,#0xc]
;;;447    }
        0x0080e4a8:    bd7f        ..      POP      {r0-r6,pc}
    print_reset_reason
;;;448    
;;;449    APP_FLASH_TEXT_SECTION
;;;450    void SystemInit(void)
;;;451    {
;;;452        //hci mode check and bypass app
;;;453        if (check_hci_mode_flag())
;;;454        {
;;;455            return;
;;;456        }
;;;457    
;;;458        //init pre_main and main functions
;;;459        extern void pre_main(void);
;;;460        app_pre_main = (APP_MAIN_FUNC)pre_main;
;;;461        app_main = (APP_MAIN_FUNC)common_main;
;;;462    
;;;463        /******** update otp here**********/
;;;464        //ram config
;;;465        OTP->appDataSize = APP_GLOBAL_SIZE;
;;;466        OTP->heapDataONSize = HEAP_DATA_ON_SIZE - DATA_SIZE_FOR_RANDOM_SEED;
;;;467    
;;;468        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;469    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;470        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
;;;471    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;472        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;473    #else
;;;474        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;475    #endif
;;;476    
;;;477        //sw timer config
;;;478    #ifdef TIMER_MAX_NUMBER
;;;479        //define TIMER_MAX_NUMBER in otp_config.h
;;;480        OTP->timerMaxNumber = TIMER_MAX_NUMBER;
;;;481    #endif
;;;482    
;;;483        //flash config
;;;484        /*config enable flash block proect depending on flash layout and flash id*/
;;;485    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;486        OTP->bp_enable = 1;
;;;487    #else
;;;488        OTP->bp_enable = 0;
;;;489    #endif
;;;490        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
;;;491    
;;;492    
;;;493        //os config
;;;494        /*config enable check task stack overflow*/
;;;495    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;496        OTP->checkForStackOverflow = 1;
;;;497    #else
;;;498        OTP->checkForStackOverflow = 0;
;;;499    #endif
;;;500    
;;;501    
;;;502        //platform config
;;;503        /*config enable platform assert*/
;;;504    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;505        OTP->enableASSERT = 1;
;;;506    #else
;;;507        OTP->enableASSERT = 0;
;;;508    #endif
;;;509    
;;;510        /*Print all log in log buffer before entering DLPS */
;;;511    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;512        OTP->printAllLogBeforeEnterDLPS = 1;
;;;513    #else
;;;514        OTP->printAllLogBeforeEnterDLPS = 0;
;;;515    #endif
;;;516    
;;;517        /*config enable log or not*/
;;;518    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;519        OTP->logDisable = 0;
;;;520    #else
;;;521        OTP->logDisable = 1;
;;;522    #endif
;;;523    
;;;524        /*config enable swd pinmux*/
;;;525    #if (SWD_PINMUX_ENABLE == 1)
;;;526        OTP->SWD_ENABLE = 1;
;;;527    #else
;;;528        OTP->SWD_ENABLE = 0;
;;;529    #endif
;;;530    
;;;531        /*config enable watch dog in rom*/
;;;532    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;533        OTP->wdgEnableInRom = 1;
;;;534    #else
;;;535        OTP->wdgEnableInRom = 0;
;;;536    #endif
;;;537    
;;;538        /*config watch dog mode in rom, defualt reset all*/
;;;539        OTP->wdgMode = ROM_WATCH_DOG_MODE;
;;;540    
;;;541        /*use os tick as log timestamp instead of TIM7*/
;;;542        OTP->log_timestamp_src = LOG_TIMESTAMP_OS;
;;;543    
;;;544    
;;;545        //app config
;;;546        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
;;;547        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
;;;548        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
;;;549        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
;;;550    
;;;551    #if ROM_OTA_LINKLOSS_RST
;;;552        OTP->ota_link_loss_reset = 1;
;;;553    #endif
;;;554        /*config bt stack parameters in rom*/
;;;555    #ifdef BT_STACK_CONFIG_ENABLE
;;;556        bt_stack_config_init();
;;;557    #endif
;;;558    
;;;559    //add more otp config here
;;;560    }
;;;561    
;;;562    //Note: call print_reset_reason() before ram_init();
;;;563    APP_FLASH_TEXT_SECTION
;;;564    void print_reset_reason(void)
;;;565    {
        0x0080e4aa:    b570        p.      PUSH     {r4-r6,lr}
;;;566        if (check_reset_ram.check_reset_ram_pattern != RESET_RAM_PATTERN)
        0x0080e4ac:    4d67        gM      LDR      r5,[pc,#412] ; [0x80e64c] = 0x20d024
        0x0080e4ae:    4968        hI      LDR      r1,[pc,#416] ; [0x80e650] = 0x72657400
        0x0080e4b0:    4c68        hL      LDR      r4,[pc,#416] ; [0x80e654] = 0x21100302
        0x0080e4b2:    6828        (h      LDR      r0,[r5,#0]
;;; ..\..\..\inc\peripheral\rtl876x_wdg.h
;;;135        return (T_SW_RESET_REASON)flash_ioctl(flash_ioctl_get_aon_record_reset_reason, 0, 0);
        0x0080e4b4:    f04f0200    O...    MOV      r2,#0
        0x0080e4b8:    ebb12f00    .../    CMP      r1,r0,LSL #8
        0x0080e4bc:    d005        ..      BEQ      0x80e4ca ; print_reset_reason + 32
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;568            BOOT_PRINT_INFO0("RESET Reason: HW or OTA");
        0x0080e4be:    4620         F      MOV      r0,r4
        0x0080e4c0:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080e4c4:    4964        dI      LDR      r1,[pc,#400] ; [0x80e658] = 0x8800000
        0x0080e4c6:    f7f99aca    ....    B        log_buffer ; 0x7a5e
;;; ..\..\..\inc\peripheral\rtl876x_wdg.h
;;;135        return (T_SW_RESET_REASON)flash_ioctl(flash_ioctl_get_aon_record_reset_reason, 0, 0);
        0x0080e4ca:    2100        .!      MOVS     r1,#0
        0x0080e4cc:    f2450006    E...    MOV      r0,#0x5006
        0x0080e4d0:    f7fdddcf    ....    BL       flash_ioctl ; 0xc072
        0x0080e4d4:    f01003ff    ....    ANDS     r3,r0,#0xff
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;574            if (sw_reset_type != (T_SW_RESET_REASON)0)
        0x0080e4d8:    d003        ..      BEQ      0x80e4e2 ; print_reset_reason + 56
;;;575            {
;;;576                BOOT_PRINT_INFO1("RESET Reason: SW(reset except aon), TYPE 0x%x", sw_reset_type);
        0x0080e4da:    495f        _I      LDR      r1,[pc,#380] ; [0x80e658] = 0x8800000
        0x0080e4dc:    2201        ."      MOVS     r2,#1
        0x0080e4de:    311c        .1      ADDS     r1,r1,#0x1c
        0x0080e4e0:    e004        ..      B        0x80e4ec ; print_reset_reason + 66
;;;577            }
;;;578            else //reset all will clear aon register
;;;579            {
;;;580                BOOT_PRINT_INFO1("RESET Reason: SW(reset all), TYPE 0x%x", check_reset_ram.check_reset_ram_type);
        0x0080e4e2:    6828        (h      LDR      r0,[r5,#0]
        0x0080e4e4:    495c        \I      LDR      r1,[pc,#368] ; [0x80e658] = 0x8800000
        0x0080e4e6:    0e03        ..      LSRS     r3,r0,#24
        0x0080e4e8:    2201        ."      MOVS     r2,#1
        0x0080e4ea:    3150        P1      ADDS     r1,r1,#0x50
        0x0080e4ec:    4620         F      MOV      r0,r4
        0x0080e4ee:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0080e4f2:    f7f99ab4    ....    B        log_buffer ; 0x7a5e
    pre_main
;;;581            }
;;;582        }
;;;583    }
;;;584    
;;;585    APP_FLASH_TEXT_SECTION
;;;586    void pre_main(void)
;;;587    {
        0x0080e4f6:    b538        8.      PUSH     {r3-r5,lr}
;;;588        __disable_irq();
        0x0080e4f8:    b672        r.      CPSID    i
;;;589    
;;;590        print_reset_reason();  //Note: call this function before ram_init();
        0x0080e4fa:    f7ffffd6    ....    BL       print_reset_reason ; 0x80e4aa
;;;591    
;;;592        ram_init();
        0x0080e4fe:    f7ffff87    ....    BL       ram_init ; 0x80e410
;;;593    
;;;594        random_seed_init();
        0x0080e502:    f7ffffa4    ....    BL       random_seed_init ; 0x80e44e
;;;595    
;;;596        load_overlay(OVERLAY_SCENARIO_BOOT_ONCE);
        0x0080e506:    2000        .       MOVS     r0,#0
        0x0080e508:    f5fcf7dc    ....    BL       load_overlay ; 0x20b4c4
;;;597    
;;;598        //reset NVIC of DMA channel used in image decryption
;;;599        NVIC_DisableIRQ(GDMA0_Channel2_IRQn);
        0x0080e50c:    2016        .       MOVS     r0,#0x16
        0x0080e50e:    f60df609    ....    BL       NVIC_DisableIRQ ; 0x21c124
;;;600        NVIC_DisableIRQ(GDMA0_Channel3_IRQn);
        0x0080e512:    2017        .       MOVS     r0,#0x17
        0x0080e514:    f60df606    ....    BL       NVIC_DisableIRQ ; 0x21c124
;;;601    
;;;602        setlocale(LC_ALL, "C");
        0x0080e518:    a150        P.      ADR      r1,{pc}+0x144 ; 0x80e65c
        0x0080e51a:    201f        .       MOVS     r0,#0x1f
        0x0080e51c:    f44bf46a    K.j.    BL       setlocale ; 0x59df4
;;;603    
;;;604        BOOT_PRINT_ERROR2("SDK Ver: %s, Build Time: %s",
        0x0080e520:    f04f5505    O..U    MOV      r5,#0x21400000
        0x0080e524:    a14e        N.      ADR      r1,{pc}+0x13c ; 0x80e660
        0x0080e526:    4628        (F      MOV      r0,r5
        0x0080e528:    f7f9dc9f    ....    BL       trace_string ; 0x7e6a
        0x0080e52c:    4604        .F      MOV      r4,r0
        0x0080e52e:    a153        S.      ADR      r1,{pc}+0x14e ; 0x80e67c
        0x0080e530:    4628        (F      MOV      r0,r5
        0x0080e532:    f7f9dc9a    ....    BL       trace_string ; 0x7e6a
        0x0080e536:    4603        .F      MOV      r3,r0
        0x0080e538:    4947        GI      LDR      r1,[pc,#284] ; [0x80e658] = 0x8800000
        0x0080e53a:    4846        FH      LDR      r0,[pc,#280] ; [0x80e654] = 0x21100302
        0x0080e53c:    2202        ."      MOVS     r2,#2
        0x0080e53e:    317c        |1      ADDS     r1,r1,#0x7c
        0x0080e540:    1e80        ..      SUBS     r0,r0,#2
        0x0080e542:    9400        ..      STR      r4,[sp,#0]
        0x0080e544:    f7f9da8b    ....    BL       log_buffer ; 0x7a5e
;;;605                          TRACE_STRING(VERSION_BUILD_STR),
;;;606                          TRACE_STRING(BUILDING_TIME));
;;;607    
;;;608        AppUpdateVectorTable();
        0x0080e548:    f5fef746    ..F.    BL       AppUpdateVectorTable ; 0x20d3d8
;;;609    
;;;610    #if (DEBUG_WATCHPOINT_ENABLE == 1)
;;;611        debug_monitor_enable();
;;;612    #endif
;;;613    
;;;614        if (app_pre_main_cb)
        0x0080e54c:    484d        MH      LDR      r0,[pc,#308] ; [0x80e684] = 0x20d0a0
        0x0080e54e:    6800        .h      LDR      r0,[r0,#0]
        0x0080e550:    2800        .(      CMP      r0,#0
        0x0080e552:    d003        ..      BEQ      0x80e55c ; pre_main + 102
;;;615        {
;;;616            app_pre_main_cb();
        0x0080e554:    b001        ..      ADD      sp,sp,#4
        0x0080e556:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x0080e55a:    4700        .G      BX       r0
;;;617        }
;;;618    
;;;619        return;
;;;620    }
        0x0080e55c:    bd38        8.      POP      {r3-r5,pc}
    SystemInit
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (451)
        0x0080e55e:    b510        ..      PUSH     {r4,lr}
;;;452        //hci mode check and bypass app
;;;453        if (check_hci_mode_flag())
        0x0080e560:    f7fed8fe    ....    BL       check_hci_mode_flag ; 0xc760
        0x0080e564:    2800        .(      CMP      r0,#0
        0x0080e566:    d14c        L.      BNE      0x80e602 ; SystemInit + 164
;;;454        {
;;;455            return;
;;;456        }
;;;457    
;;;458        //init pre_main and main functions
;;;459        extern void pre_main(void);
;;;460        app_pre_main = (APP_MAIN_FUNC)pre_main;
        0x0080e568:    f2af0075    ..u.    ADR      r0,{pc}-0x71 ; 0x80e4f7
        0x0080e56c:    4946        FI      LDR      r1,[pc,#280] ; [0x80e688] = 0x200c38
;;;461        app_main = (APP_MAIN_FUNC)common_main;
        0x0080e56e:    6008        .`      STR      r0,[r1,#0]
        0x0080e570:    4947        GI      LDR      r1,[pc,#284] ; [0x80e690] = 0x200c3c
        0x0080e572:    4846        FH      LDR      r0,[pc,#280] ; [0x80e68c] = 0x21c045
;;;462    
;;;463        /******** update otp here**********/
;;;464        //ram config
;;;465        OTP->appDataSize = APP_GLOBAL_SIZE;
        0x0080e574:    6008        .`      STR      r0,[r1,#0]
        0x0080e576:    f44f1000    O...    MOV      r0,#0x200000
        0x0080e57a:    f44f410c    O..A    MOV      r1,#0x8c00
;;;466        OTP->heapDataONSize = HEAP_DATA_ON_SIZE - DATA_SIZE_FOR_RANDOM_SEED;
        0x0080e57e:    f8c01384    ....    STR      r1,[r0,#0x384]
        0x0080e582:    f24771f0    G..q    MOV      r1,#0x77f0
;;;467    
;;;468        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;469    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;470        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
        0x0080e586:    f8c01388    ....    STR      r1,[r0,#0x388]
        0x0080e58a:    4942        BI      LDR      r1,[pc,#264] ; [0x80e694] = 0xa2aa0003
;;;471    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;472        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;473    #else
;;;474        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;475    #endif
;;;476    
;;;477        //sw timer config
;;;478    #ifdef TIMER_MAX_NUMBER
;;;479        //define TIMER_MAX_NUMBER in otp_config.h
;;;480        OTP->timerMaxNumber = TIMER_MAX_NUMBER;
;;;481    #endif
;;;482    
;;;483        //flash config
;;;484        /*config enable flash block proect depending on flash layout and flash id*/
;;;485    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;486        OTP->bp_enable = 1;
        0x0080e58c:    f8c013cc    ....    STR      r1,[r0,#0x3cc]
        0x0080e590:    f890134d    ..M.    LDRB     r1,[r0,#0x34d]
        0x0080e594:    f0410108    A...    ORR      r1,r1,#8
        0x0080e598:    f880134d    ..M.    STRB     r1,[r0,#0x34d]
;;;487    #else
;;;488        OTP->bp_enable = 0;
;;;489    #endif
;;;490        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
        0x0080e59c:    2106        .!      MOVS     r1,#6
        0x0080e59e:    f880134f    ..O.    STRB     r1,[r0,#0x34f]
;;;491    
;;;492    
;;;493        //os config
;;;494        /*config enable check task stack overflow*/
;;;495    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;496        OTP->checkForStackOverflow = 1;
        0x0080e5a2:    f8901378    ..x.    LDRB     r1,[r0,#0x378]
;;;497    #else
;;;498        OTP->checkForStackOverflow = 0;
;;;499    #endif
;;;500    
;;;501    
;;;502        //platform config
;;;503        /*config enable platform assert*/
;;;504    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;505        OTP->enableASSERT = 1;
;;;506    #else
;;;507        OTP->enableASSERT = 0;
;;;508    #endif
;;;509    
;;;510        /*Print all log in log buffer before entering DLPS */
;;;511    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;512        OTP->printAllLogBeforeEnterDLPS = 1;
        0x0080e5a6:    f0410126    A.&.    ORR      r1,r1,#0x26
        0x0080e5aa:    f8801378    ..x.    STRB     r1,[r0,#0x378]
;;;513    #else
;;;514        OTP->printAllLogBeforeEnterDLPS = 0;
;;;515    #endif
;;;516    
;;;517        /*config enable log or not*/
;;;518    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;519        OTP->logDisable = 0;
        0x0080e5ae:    f890139a    ....    LDRB     r1,[r0,#0x39a]
        0x0080e5b2:    f0210101    !...    BIC      r1,r1,#1
        0x0080e5b6:    f880139a    ....    STRB     r1,[r0,#0x39a]
;;;520    #else
;;;521        OTP->logDisable = 1;
;;;522    #endif
;;;523    
;;;524        /*config enable swd pinmux*/
;;;525    #if (SWD_PINMUX_ENABLE == 1)
;;;526        OTP->SWD_ENABLE = 1;
        0x0080e5ba:    f8901334    ..4.    LDRB     r1,[r0,#0x334]
        0x0080e5be:    f0410101    A...    ORR      r1,r1,#1
        0x0080e5c2:    f8801334    ..4.    STRB     r1,[r0,#0x334]
;;;527    #else
;;;528        OTP->SWD_ENABLE = 0;
;;;529    #endif
;;;530    
;;;531        /*config enable watch dog in rom*/
;;;532    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;533        OTP->wdgEnableInRom = 1;
;;;534    #else
;;;535        OTP->wdgEnableInRom = 0;
        0x0080e5c6:    f890137a    ..z.    LDRB     r1,[r0,#0x37a]
        0x0080e5ca:    f0210110    !...    BIC      r1,r1,#0x10
;;;536    #endif
;;;537    
;;;538        /*config watch dog mode in rom, defualt reset all*/
;;;539        OTP->wdgMode = ROM_WATCH_DOG_MODE;
        0x0080e5ce:    f04101c0    A...    ORR      r1,r1,#0xc0
        0x0080e5d2:    f880137a    ..z.    STRB     r1,[r0,#0x37a]
;;;540    
;;;541        /*use os tick as log timestamp instead of TIM7*/
;;;542        OTP->log_timestamp_src = LOG_TIMESTAMP_OS;
        0x0080e5d6:    f89013c3    ....    LDRB     r1,[r0,#0x3c3]
        0x0080e5da:    f02101c0    !...    BIC      r1,r1,#0xc0
        0x0080e5de:    f88013c3    ....    STRB     r1,[r0,#0x3c3]
;;;543    
;;;544    
;;;545        //app config
;;;546        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
        0x0080e5e2:    21f0        .!      MOVS     r1,#0xf0
        0x0080e5e4:    f8801320    .. .    STRB     r1,[r0,#0x320]
;;;547        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
        0x0080e5e8:    213c        <!      MOVS     r1,#0x3c
        0x0080e5ea:    f8801321    ..!.    STRB     r1,[r0,#0x321]
;;;548        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
        0x0080e5ee:    21c8        .!      MOVS     r1,#0xc8
        0x0080e5f0:    f8801322    ..".    STRB     r1,[r0,#0x322]
;;;549        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
        0x0080e5f4:    21ff        .!      MOVS     r1,#0xff
        0x0080e5f6:    f8801323    ..#.    STRB     r1,[r0,#0x323]
;;;550    
;;;551    #if ROM_OTA_LINKLOSS_RST
;;;552        OTP->ota_link_loss_reset = 1;
;;;553    #endif
;;;554        /*config bt stack parameters in rom*/
;;;555    #ifdef BT_STACK_CONFIG_ENABLE
;;;556        bt_stack_config_init();
        0x0080e5fa:    e8bd4010    ...@    POP      {r4,lr}
        0x0080e5fe:    f000b84b    ..K.    B.W      bt_stack_config_init ; 0x80e698
;;;557    #endif
;;;558    
;;;559    //add more otp config here
;;;560    }
        0x0080e602:    bd10        ..      POP      {r4,pc}
    $d
        0x0080e604:    00005424    $T..    DCD    21540
        0x0080e608:    0080e870    p...    DCD    8448112
        0x0080e60c:    00207c00    .| .    DCD    2128896
        0x0080e610:    00000074    t...    DCD    116
        0x0080e614:    00813c94    .<..    DCD    8469652
        0x0080e618:    0020d024    $. .    DCD    2150436
        0x0080e61c:    00000340    @...    DCD    832
        0x0080e620:    0020d098    .. .    DCD    2150552
        0x0080e624:    00000bd4    ....    DCD    3028
        0x0080e628:    00813dc8    .=..    DCD    8469960
        0x0080e62c:    0021c000    ..!.    DCD    2211840
        0x0080e630:    00000000    ....    DCD    0
        0x0080e634:    0081499c    .I..    DCD    8472988
        0x0080e638:    0021cbd4    ..!.    DCD    2214868
        0x0080e63c:    00000000    ....    DCD    0
        0x0080e640:    0021cbd4    ..!.    DCD    2214868
        0x0080e644:    40058000    ...@    DCD    1074102272
        0x0080e648:    0020d098    .. .    DCD    2150552
        0x0080e64c:    0020d024    $. .    DCD    2150436
        0x0080e650:    72657400    .ter    DCD    1919251456
        0x0080e654:    21100302    ...!    DCD    554697474
        0x0080e658:    08800000    ....    DCD    142606336
        0x0080e65c:    00000043    C...    DCD    67
        0x0080e660:    20697246    Fri     DCD    543781446
        0x0080e664:    20706553    Sep     DCD    544236883
        0x0080e668:    31203132    21 1    DCD    824193330
        0x0080e66c:    31303a33    3:01    DCD    825244211
        0x0080e670:    2037313a    :17     DCD    540487994
        0x0080e674:    38313032    2018    DCD    942747698
        0x0080e678:    00000000    ....    DCD    0
        0x0080e67c:    2e302e31    1.0.    DCD    774909489
        0x0080e680:    00302e32    2.0.    DCD    3157554
        0x0080e684:    0020d0a0    .. .    DCD    2150560
        0x0080e688:    00200c38    8. .    DCD    2100280
        0x0080e68c:    0021c045    E.!.    DCD    2211909
        0x0080e690:    00200c3c    <. .    DCD    2100284
        0x0080e694:    a2aa0003    ....    DCD    2729050115
    $t
    .app.flash.text
    bt_stack_config_init
;;; ..\..\..\src\sample\ble_central\main.c
;;;64         gap_config_max_le_paired_device(APP_MAX_LINKS);
        0x0080e698:    2004        .       MOVS     r0,#4
        0x0080e69a:    f000b854    ..T.    B.W      gap_config_max_le_paired_device ; 0x80e746
        0x0080e69e:    0000        ..      MOVS     r0,r0
    .app.flash.text
    gap_config_bt_bd_addr
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (32)
        0x0080e6a0:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e6a4:    7802        .x      LDRB     r2,[r0,#0]
        0x0080e6a6:    f8812197    ...!    STRB     r2,[r1,#0x197]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (33)
        0x0080e6aa:    7842        Bx      LDRB     r2,[r0,#1]
        0x0080e6ac:    f8812198    ...!    STRB     r2,[r1,#0x198]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (34)
        0x0080e6b0:    7882        .x      LDRB     r2,[r0,#2]
        0x0080e6b2:    f8812199    ...!    STRB     r2,[r1,#0x199]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (35)
        0x0080e6b6:    78c2        .x      LDRB     r2,[r0,#3]
        0x0080e6b8:    f881219a    ...!    STRB     r2,[r1,#0x19a]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (36)
        0x0080e6bc:    7902        .y      LDRB     r2,[r0,#4]
        0x0080e6be:    f881219b    ...!    STRB     r2,[r1,#0x19b]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (37)
        0x0080e6c2:    7940        @y      LDRB     r0,[r0,#5]
        0x0080e6c4:    f881019c    ....    STRB     r0,[r1,#0x19c]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (38)
        0x0080e6c8:    4770        pG      BX       lr
    gap_config_ae_parameter
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (42)
        0x0080e6ca:    482a        *H      LDR      r0,[pc,#168] ; [0x80e774] = 0x200236
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (43)
        0x0080e6cc:    492a        *I      LDR      r1,[pc,#168] ; [0x80e778] = 0x10420c6
        0x0080e6ce:    6001        .`      STR      r1,[r0,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (44)
        0x0080e6d0:    4770        pG      BX       lr
    gap_config_cccd_not_check
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (49)
        0x0080e6d2:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e6d6:    f8d12314    ...#    LDR      r2,[r1,#0x314]
        0x0080e6da:    f3600241    `.A.    BFI      r2,r0,#1,#1
        0x0080e6de:    f8c12314    ...#    STR      r2,[r1,#0x314]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (61)
        0x0080e6e2:    4770        pG      BX       lr
    gap_config_le_min_rem_sca
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (67)
        0x0080e6e4:    f44f1300    O...    MOV      r3,#0x200000
        0x0080e6e8:    f8b322dc    ..."    LDRH     r2,[r3,#0x2dc]
        0x0080e6ec:    f3602208    `.."    BFI      r2,r0,#8,#1
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (68)
        0x0080e6f0:    f361224b    a.K"    BFI      r2,r1,#9,#3
        0x0080e6f4:    f8a322dc    ..."    STRH     r2,[r3,#0x2dc]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (69)
        0x0080e6f8:    4770        pG      BX       lr
    gap_config_bte_pool_size
        0x0080e6fa:    280a        .(      CMP      r0,#0xa
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (72)
        0x0080e6fc:    d902        ..      BLS      0x80e704 ; gap_config_bte_pool_size + 10
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (73)
        0x0080e6fe:    f44f5020    O. P    MOV      r0,#0x2800
        0x0080e702:    e000        ..      B        0x80e706 ; gap_config_bte_pool_size + 12
        0x0080e704:    0280        ..      LSLS     r0,r0,#10
        0x0080e706:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e70a:    f8c102e8    ....    STR      r0,[r1,#0x2e8]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (74)
        0x0080e70e:    4770        pG      BX       lr
    gap_config_bt_report_buf_num
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (78)
        0x0080e710:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e714:    f88102f1    ....    STRB     r0,[r1,#0x2f1]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (79)
        0x0080e718:    4770        pG      BX       lr
    gap_config_ccc_bits_count
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (84)
        0x0080e71a:    f44f1200    O...    MOV      r2,#0x200000
        0x0080e71e:    f8820310    ....    STRB     r0,[r2,#0x310]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (85)
        0x0080e722:    f8821325    ..%.    STRB     r1,[r2,#0x325]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (86)
        0x0080e726:    4770        pG      BX       lr
    gap_config_max_attribute_table_count
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (91)
        0x0080e728:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e72c:    f8810311    ....    STRB     r0,[r1,#0x311]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (92)
        0x0080e730:    4770        pG      BX       lr
    gap_config_max_mtu_size
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (96)
        0x0080e732:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e736:    f8a10312    ....    STRH     r0,[r1,#0x312]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (97)
        0x0080e73a:    4770        pG      BX       lr
    gap_config_le_key_storage_flag
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (101)
        0x0080e73c:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e740:    f8a10326    ..&.    STRH     r0,[r1,#0x326]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (102)
        0x0080e744:    4770        pG      BX       lr
    gap_config_max_le_paired_device
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (106)
        0x0080e746:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e74a:    f881032f    ../.    STRB     r0,[r1,#0x32f]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (107)
        0x0080e74e:    4770        pG      BX       lr
    gap_config_bqb_en
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (132)
        0x0080e750:    f44f1100    O...    MOV      r1,#0x200000
        0x0080e754:    f8b122dc    ..."    LDRH     r2,[r1,#0x2dc]
        0x0080e758:    f3600241    `.A.    BFI      r2,r0,#1,#1
        0x0080e75c:    f8a122dc    ..."    STRH     r2,[r1,#0x2dc]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (133)
        0x0080e760:    4770        pG      BX       lr
    gap_config_l2c_param
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (138)
        0x0080e762:    f44f1300    O...    MOV      r3,#0x200000
        0x0080e766:    f88302fd    ....    STRB     r0,[r3,#0x2fd]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (139)
        0x0080e76a:    f883130e    ....    STRB     r1,[r3,#0x30e]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (140)
        0x0080e76e:    f883232e    ...#    STRB     r2,[r3,#0x32e]
;;; ..\..\..\src\app\gap_lib\extension\gap_config.c (141)
        0x0080e772:    4770        pG      BX       lr
    $d
        0x0080e774:    00200236    6. .    DCD    2097718
        0x0080e778:    010420c6    . ..    DCD    17047750

** Section #4 'RAM_VECTOR_TABLE' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 244 bytes (alignment 4)
    Address: 0x00200000

    0x200000:   00 38 20 00 01 e4 80 00 45 7d 20 00 45 7d 20 00    .8 .....E} .E} .
    0x200010:   45 7d 20 00 45 7d 20 00 45 7d 20 00 00 00 00 00    E} .E} .E} .....
    0x200020:   00 00 00 00 00 00 00 00 00 00 00 00 45 7d 20 00    ............E} .
    0x200030:   45 7d 20 00 00 00 00 00 45 7d 20 00 45 7d 20 00    E} .....E} .E} .
    0x200040:   45 7d 20 00 45 7d 20 00 45 7d 20 00 45 7d 20 00    E} .E} .E} .E} .
    0x200050:   45 7d 20 00 45 7d 20 00 45 7d 20 00 45 7d 20 00    E} .E} .E} .E} .
    0x200060:   45 7d 20 00 45 7d 20 00 45 7d 20 00 45 7d 20 00    E} .E} .E} .E} .
    0x200070:   57 ac 20 00 45 7d 20 00 45 7d 20 00 45 7d 20 00    W. .E} .E} .E} .
    0x200080:   45 7d 20 00 45 7d 20 00 45 7d 20 00 45 7d 20 00    E} .E} .E} .E} .
    0x200090:   45 7d 20 00 45 7d 20 00 45 7d 20 00 45 7d 20 00    E} .E} .E} .E} .
    0x2000a0:   45 7d 20 00 45 7d 20 00 21 7c 20 00 6d 7c 20 00    E} .E} .!| .m| .
    0x2000b0:   45 7d 20 00 b9 7c 20 00 fd 7c 20 00 45 7d 20 00    E} ..| ..| .E} .
    0x2000c0:   45 7d 20 00 45 7d 20 00 45 7d 20 00 45 7d 20 00    E} .E} .E} .E} .
    0x2000d0:   45 7d 20 00 45 7d 20 00 45 7d 20 00 45 7d 20 00    E} .E} .E} .E} .
    0x2000e0:   45 7d 20 00 45 7d 20 00 45 7d 20 00 45 7d 20 00    E} .E} .E} .E} .
    0x2000f0:   45 7d 20 00                                        E} .

    __Vectors_End

** Section #5 'RAM_DATA_ON' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 21540 bytes (alignment 4)
    Address: 0x00207c00

    $t
    .ARM.Collect$$libinit$$00000000
    __rt_lib_init
        0x00207c00:    b51f        ..      PUSH     {r0-r4,lr}
    .ARM.Collect$$libinit$$00000001
    __rt_lib_init_fp_1
        0x00207c02:    f014fdca    ....    BL       _fp_init ; 0x21c79a
    .ARM.Collect$$libinit$$00000004
    .ARM.Collect$$libinit$$0000000A
    .ARM.Collect$$libinit$$0000000C
    .ARM.Collect$$libinit$$0000000D
    __rt_lib_init_heap_1
    __rt_lib_init_preinit_1
    __rt_lib_init_rand_2
    __rt_lib_init_user_alloc_1
        0x00207c06:    f004f90a    ....    BL       _rand_init ; 0x20be1e
    .ARM.Collect$$libinit$$0000000E
    .ARM.Collect$$libinit$$00000011
    .ARM.Collect$$libinit$$00000013
    .ARM.Collect$$libinit$$00000015
    .ARM.Collect$$libinit$$00000017
    .ARM.Collect$$libinit$$00000019
    .ARM.Collect$$libinit$$0000001B
    .ARM.Collect$$libinit$$0000001D
    .ARM.Collect$$libinit$$0000001F
    .ARM.Collect$$libinit$$00000021
    .ARM.Collect$$libinit$$00000023
    .ARM.Collect$$libinit$$00000025
    .ARM.Collect$$libinit$$0000002C
    .ARM.Collect$$libinit$$0000002E
    .ARM.Collect$$libinit$$00000030
    .ARM.Collect$$libinit$$00000032
    .ARM.Collect$$libinit$$00000033
    __rt_lib_init_alloca_1
    __rt_lib_init_argv_1
    __rt_lib_init_atexit_1
    __rt_lib_init_clock_1
    __rt_lib_init_cpp_1
    __rt_lib_init_exceptions_1
    __rt_lib_init_fp_trap_1
    __rt_lib_init_getenv_1
    __rt_lib_init_lc_collate_1
    __rt_lib_init_lc_ctype_1
    __rt_lib_init_lc_monetary_1
    __rt_lib_init_lc_numeric_1
    __rt_lib_init_lc_time_1
    __rt_lib_init_rand_1
    __rt_lib_init_return
    __rt_lib_init_signal_1
    __rt_lib_init_stdio_1
        0x00207c0a:    bd1f        ..      POP      {r0-r4,pc}
    .ARM.Collect$$rtentry$$00000000
    .ARM.Collect$$rtentry$$00000002
    .ARM.Collect$$rtentry$$00000004
    __rt_entry
    __rt_entry_presh_1
    __rt_entry_sh
        0x00207c0c:    f000f8a2    ....    BL       __user_setup_stackheap ; 0x207d54
        0x00207c10:    4611        .F      MOV      r1,r2
    .ARM.Collect$$rtentry$$00000009
    .ARM.Collect$$rtentry$$0000000A
    __rt_entry_li
    __rt_entry_postsh_1
        0x00207c12:    f7fffff5    ....    BL       __rt_lib_init ; 0x207c00
    .ARM.Collect$$rtentry$$0000000C
    .ARM.Collect$$rtentry$$0000000D
    __rt_entry_main
    __rt_entry_postli_1
        0x00207c16:    f014fbc2    ....    BL       main ; 0x21c39e
        0x00207c1a:    f653f903    S...    BL       exit ; 0x5ae24
        0x00207c1e:    0000        ..      MOVS     r0,r0
    .ram.dataon.data
    GPIO_Group3_Handler
;;;691        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207c20:    4847        GH      LDR      r0,[pc,#284] ; [0x207d40] = 0x40001000
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (690)
        0x00207c22:    b510        ..      PUSH     {r4,lr}
        0x00207c24:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207c26:    0720         .      LSLS     r0,r4,#28
        0x00207c28:    d501        ..      BPL      0x207c2e ; GPIO_Group3_Handler + 14
;;;691        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;692    
;;;693        //Check exact IRQ function
;;;694        if (GPIOIrqStatus & BIT3)
;;;695        {
;;;696            GPIO3_Handler();
        0x00207c2a:    f000f88b    ....    BL       ADC_Handler ; 0x207d44
;;;697        }
;;;698        if (GPIOIrqStatus & BIT7)
        0x00207c2e:    0620         .      LSLS     r0,r4,#24
        0x00207c30:    d501        ..      BPL      0x207c36 ; GPIO_Group3_Handler + 22
;;;699        {
;;;700            GPIO7_Handler();
        0x00207c32:    f000f887    ....    BL       ADC_Handler ; 0x207d44
;;;701        }
;;;702        if (GPIOIrqStatus & BIT11)
        0x00207c36:    0520         .      LSLS     r0,r4,#20
        0x00207c38:    d501        ..      BPL      0x207c3e ; GPIO_Group3_Handler + 30
;;;703        {
;;;704            GPIO11_Handler();
        0x00207c3a:    f000f883    ....    BL       ADC_Handler ; 0x207d44
;;;705        }
;;;706        if (GPIOIrqStatus & BIT15)
        0x00207c3e:    0420         .      LSLS     r0,r4,#16
        0x00207c40:    d501        ..      BPL      0x207c46 ; GPIO_Group3_Handler + 38
;;;707        {
;;;708            GPIO15_Handler();
        0x00207c42:    f000f87f    ....    BL       ADC_Handler ; 0x207d44
;;;709        }
;;;710        if (GPIOIrqStatus & BIT19)
        0x00207c46:    0320         .      LSLS     r0,r4,#12
        0x00207c48:    d501        ..      BPL      0x207c4e ; GPIO_Group3_Handler + 46
;;;711        {
;;;712            GPIO19_Handler();
        0x00207c4a:    f000f87b    ..{.    BL       ADC_Handler ; 0x207d44
;;;713        }
;;;714        if (GPIOIrqStatus & BIT23)
        0x00207c4e:    0220         .      LSLS     r0,r4,#8
        0x00207c50:    d501        ..      BPL      0x207c56 ; GPIO_Group3_Handler + 54
;;;715        {
;;;716            GPIO23_Handler();
        0x00207c52:    f000f877    ..w.    BL       ADC_Handler ; 0x207d44
;;;717        }
;;;718        if (GPIOIrqStatus & BIT27)
        0x00207c56:    0120         .      LSLS     r0,r4,#4
        0x00207c58:    d501        ..      BPL      0x207c5e ; GPIO_Group3_Handler + 62
;;;719        {
;;;720            GPIO27_Handler();
        0x00207c5a:    f000f873    ..s.    BL       ADC_Handler ; 0x207d44
;;;721        }
;;;722        if (GPIOIrqStatus & BIT31)
        0x00207c5e:    2c00        .,      CMP      r4,#0
        0x00207c60:    da03        ..      BGE      0x207c6a ; GPIO_Group3_Handler + 74
;;;723        {
;;;724            GPIO31_Handler();
        0x00207c62:    e8bd4010    ...@    POP      {r4,lr}
        0x00207c66:    f000b86d    ..m.    B.W      ADC_Handler ; 0x207d44
;;;725        }
;;;726    }
        0x00207c6a:    bd10        ..      POP      {r4,pc}
    GPIO_Group2_Handler
;;;727    /**
;;;728     * @brief  GPIO Group2 Handler
;;;729     * @param  none
;;;730     * @return none
;;;731      */
;;;732    DATA_RAM_FUNCTION void GPIO_Group2_Handler(void)
;;;733    {
;;;734        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207c6c:    4834        4H      LDR      r0,[pc,#208] ; [0x207d40] = 0x40001000
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (733)
        0x00207c6e:    b510        ..      PUSH     {r4,lr}
        0x00207c70:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207c72:    0760        `.      LSLS     r0,r4,#29
        0x00207c74:    d501        ..      BPL      0x207c7a ; GPIO_Group2_Handler + 14
;;;734        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;735    
;;;736        //Check exact IRQ function
;;;737        if (GPIOIrqStatus & BIT2)
;;;738        {
;;;739            GPIO2_Handler();
        0x00207c76:    f000f865    ..e.    BL       ADC_Handler ; 0x207d44
;;;740        }
;;;741        if (GPIOIrqStatus & BIT6)
        0x00207c7a:    0660        `.      LSLS     r0,r4,#25
        0x00207c7c:    d501        ..      BPL      0x207c82 ; GPIO_Group2_Handler + 22
;;;742        {
;;;743            GPIO6_Handler();
        0x00207c7e:    f000f861    ..a.    BL       ADC_Handler ; 0x207d44
;;;744        }
;;;745        if (GPIOIrqStatus & BIT10)
        0x00207c82:    0560        `.      LSLS     r0,r4,#21
        0x00207c84:    d501        ..      BPL      0x207c8a ; GPIO_Group2_Handler + 30
;;;746        {
;;;747            GPIO10_Handler();
        0x00207c86:    f000f85d    ..].    BL       ADC_Handler ; 0x207d44
;;;748        }
;;;749        if (GPIOIrqStatus & BIT14)
        0x00207c8a:    0460        `.      LSLS     r0,r4,#17
        0x00207c8c:    d501        ..      BPL      0x207c92 ; GPIO_Group2_Handler + 38
;;;750        {
;;;751            GPIO14_Handler();
        0x00207c8e:    f000f859    ..Y.    BL       ADC_Handler ; 0x207d44
;;;752        }
;;;753        if (GPIOIrqStatus & BIT18)
        0x00207c92:    0360        `.      LSLS     r0,r4,#13
        0x00207c94:    d501        ..      BPL      0x207c9a ; GPIO_Group2_Handler + 46
;;;754        {
;;;755            GPIO18_Handler();
        0x00207c96:    f000f855    ..U.    BL       ADC_Handler ; 0x207d44
;;;756        }
;;;757        if (GPIOIrqStatus & BIT22)
        0x00207c9a:    0260        `.      LSLS     r0,r4,#9
        0x00207c9c:    d501        ..      BPL      0x207ca2 ; GPIO_Group2_Handler + 54
;;;758        {
;;;759            GPIO22_Handler();
        0x00207c9e:    f000f851    ..Q.    BL       ADC_Handler ; 0x207d44
;;;760        }
;;;761        if (GPIOIrqStatus & BIT26)
        0x00207ca2:    0160        `.      LSLS     r0,r4,#5
        0x00207ca4:    d501        ..      BPL      0x207caa ; GPIO_Group2_Handler + 62
;;;762        {
;;;763            GPIO26_Handler();
        0x00207ca6:    f000f84d    ..M.    BL       ADC_Handler ; 0x207d44
;;;764        }
;;;765        if (GPIOIrqStatus & BIT30)
        0x00207caa:    0060        `.      LSLS     r0,r4,#1
        0x00207cac:    d503        ..      BPL      0x207cb6 ; GPIO_Group2_Handler + 74
;;;766        {
;;;767            GPIO30_Handler();
        0x00207cae:    e8bd4010    ...@    POP      {r4,lr}
        0x00207cb2:    f000b847    ..G.    B.W      ADC_Handler ; 0x207d44
;;;768        }
;;;769    }
        0x00207cb6:    bd10        ..      POP      {r4,pc}
    GPIO_Group1_Handler
;;;770    /**
;;;771     * @brief  GPIO Group1 Handler
;;;772     * @param  none
;;;773     * @return none
;;;774      */
;;;775    DATA_RAM_FUNCTION void GPIO_Group1_Handler(void)
;;;776    {
;;;777        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207cb8:    4821        !H      LDR      r0,[pc,#132] ; [0x207d40] = 0x40001000
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (776)
        0x00207cba:    b510        ..      PUSH     {r4,lr}
        0x00207cbc:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207cbe:    07a0        ..      LSLS     r0,r4,#30
        0x00207cc0:    d501        ..      BPL      0x207cc6 ; GPIO_Group1_Handler + 14
;;;777        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;778    
;;;779        //Check exact IRQ function
;;;780        if (GPIOIrqStatus & BIT1)
;;;781        {
;;;782            GPIO1_Handler();
        0x00207cc2:    f000f83f    ..?.    BL       ADC_Handler ; 0x207d44
;;;783        }
;;;784        if (GPIOIrqStatus & BIT9)
        0x00207cc6:    05a0        ..      LSLS     r0,r4,#22
        0x00207cc8:    d501        ..      BPL      0x207cce ; GPIO_Group1_Handler + 22
;;;785        {
;;;786            GPIO9_Handler();
        0x00207cca:    f000f83b    ..;.    BL       ADC_Handler ; 0x207d44
;;;787        }
;;;788        if (GPIOIrqStatus & BIT13)
        0x00207cce:    04a0        ..      LSLS     r0,r4,#18
        0x00207cd0:    d501        ..      BPL      0x207cd6 ; GPIO_Group1_Handler + 30
;;;789        {
;;;790            GPIO13_Handler();
        0x00207cd2:    f000f837    ..7.    BL       ADC_Handler ; 0x207d44
;;;791        }
;;;792        if (GPIOIrqStatus & BIT17)
        0x00207cd6:    03a0        ..      LSLS     r0,r4,#14
        0x00207cd8:    d501        ..      BPL      0x207cde ; GPIO_Group1_Handler + 38
;;;793        {
;;;794            GPIO17_Handler();
        0x00207cda:    f000f833    ..3.    BL       ADC_Handler ; 0x207d44
;;;795        }
;;;796        if (GPIOIrqStatus & BIT21)
        0x00207cde:    02a0        ..      LSLS     r0,r4,#10
        0x00207ce0:    d501        ..      BPL      0x207ce6 ; GPIO_Group1_Handler + 46
;;;797        {
;;;798            GPIO21_Handler();
        0x00207ce2:    f000f82f    ../.    BL       ADC_Handler ; 0x207d44
;;;799        }
;;;800        if (GPIOIrqStatus & BIT25)
        0x00207ce6:    01a0        ..      LSLS     r0,r4,#6
        0x00207ce8:    d501        ..      BPL      0x207cee ; GPIO_Group1_Handler + 54
;;;801        {
;;;802            GPIO25_Handler();
        0x00207cea:    f000f82b    ..+.    BL       ADC_Handler ; 0x207d44
;;;803        }
;;;804        if (GPIOIrqStatus & BIT29)
        0x00207cee:    00a0        ..      LSLS     r0,r4,#2
        0x00207cf0:    d503        ..      BPL      0x207cfa ; GPIO_Group1_Handler + 66
;;;805        {
;;;806            GPIO29_Handler();
        0x00207cf2:    e8bd4010    ...@    POP      {r4,lr}
        0x00207cf6:    f000b825    ..%.    B.W      ADC_Handler ; 0x207d44
;;;807        }
;;;808    }
        0x00207cfa:    bd10        ..      POP      {r4,pc}
    GPIO_Group0_Handler
;;;809    /**
;;;810     * @brief  GPIO Group0 Handler
;;;811     * @param  none
;;;812     * @return none
;;;813      */
;;;814    DATA_RAM_FUNCTION void GPIO_Group0_Handler(void)
;;;815    {
;;;816        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
        0x00207cfc:    4810        .H      LDR      r0,[pc,#64] ; [0x207d40] = 0x40001000
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (815)
        0x00207cfe:    b510        ..      PUSH     {r4,lr}
        0x00207d00:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00207d02:    07e0        ..      LSLS     r0,r4,#31
        0x00207d04:    d001        ..      BEQ      0x207d0a ; GPIO_Group0_Handler + 14
;;;816        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;817    
;;;818        //Check exact IRQ function
;;;819        if (GPIOIrqStatus & BIT0)
;;;820        {
;;;821            GPIO0_Handler();
        0x00207d06:    f000f81d    ....    BL       ADC_Handler ; 0x207d44
;;;822        }
;;;823        if (GPIOIrqStatus & BIT8)
        0x00207d0a:    05e0        ..      LSLS     r0,r4,#23
        0x00207d0c:    d501        ..      BPL      0x207d12 ; GPIO_Group0_Handler + 22
;;;824        {
;;;825            GPIO8_Handler();
        0x00207d0e:    f000f819    ....    BL       ADC_Handler ; 0x207d44
;;;826        }
;;;827        if (GPIOIrqStatus & BIT12)
        0x00207d12:    04e0        ..      LSLS     r0,r4,#19
        0x00207d14:    d501        ..      BPL      0x207d1a ; GPIO_Group0_Handler + 30
;;;828        {
;;;829            GPIO12_Handler();
        0x00207d16:    f000f815    ....    BL       ADC_Handler ; 0x207d44
;;;830        }
;;;831        if (GPIOIrqStatus & BIT16)
        0x00207d1a:    03e0        ..      LSLS     r0,r4,#15
        0x00207d1c:    d501        ..      BPL      0x207d22 ; GPIO_Group0_Handler + 38
;;;832        {
;;;833            GPIO16_Handler();
        0x00207d1e:    f000f811    ....    BL       ADC_Handler ; 0x207d44
;;;834        }
;;;835        if (GPIOIrqStatus & BIT20)
        0x00207d22:    02e0        ..      LSLS     r0,r4,#11
        0x00207d24:    d501        ..      BPL      0x207d2a ; GPIO_Group0_Handler + 46
;;;836        {
;;;837            GPIO20_Handler();
        0x00207d26:    f000f80d    ....    BL       ADC_Handler ; 0x207d44
;;;838        }
;;;839        if (GPIOIrqStatus & BIT24)
        0x00207d2a:    01e0        ..      LSLS     r0,r4,#7
        0x00207d2c:    d501        ..      BPL      0x207d32 ; GPIO_Group0_Handler + 54
;;;840        {
;;;841            GPIO24_Handler();
        0x00207d2e:    f000f809    ....    BL       ADC_Handler ; 0x207d44
;;;842        }
;;;843        if (GPIOIrqStatus & BIT28)
        0x00207d32:    00e0        ..      LSLS     r0,r4,#3
        0x00207d34:    d503        ..      BPL      0x207d3e ; GPIO_Group0_Handler + 66
;;;844        {
;;;845            GPIO28_Handler();
        0x00207d36:    e8bd4010    ...@    POP      {r4,lr}
        0x00207d3a:    f000b803    ....    B.W      ADC_Handler ; 0x207d44
;;;846        }
;;;847    }
        0x00207d3e:    bd10        ..      POP      {r4,pc}
    $d
        0x00207d40:    40001000    ...@    DCD    1073745920
    $t
    .text
    $v0
    ADC_Handler
    BTMAC_Handler
    BusFault_Handler
    DebugMon_Handler
    Default_Handler
    GDMA0_Channel0_Handler
    GDMA0_Channel1_Handler
    GDMA0_Channel2_Handler
    GDMA0_Channel3_Handler
    GDMA0_Channel4_Handler
    GDMA0_Channel5_Handler
    GPIO0_Handler
    GPIO10_Handler
    GPIO11_Handler
    GPIO12_Handler
    GPIO13_Handler
    GPIO14_Handler
    GPIO15_Handler
    GPIO16_Handler
    GPIO17_Handler
    GPIO18_Handler
    GPIO19_Handler
    GPIO1_Handler
    GPIO20_Handler
    GPIO21_Handler
    GPIO22_Handler
    GPIO23_Handler
    GPIO24_Handler
    GPIO25_Handler
    GPIO26_Handler
    GPIO27_Handler
    GPIO28_Handler
    GPIO29_Handler
    GPIO2_Handler
    GPIO30_Handler
    GPIO31_Handler
    GPIO3_Handler
    GPIO4_Handler
    GPIO5_Handler
    GPIO6_Handler
    GPIO7_Handler
    GPIO8_Handler
    GPIO9_Handler
    HardFault_Handler
    I2C0_Handler
    I2C1_Handler
    I2S0_RX_Handler
    I2S0_TX_Handler
    I2S1_RX_Handler
    I2S1_TX_Handler
    IR_Handler
    Keyscan_Handler
    LCD_Handler
    LPCOMP_Handler
    MemManage_Handler
    NMI_Handler
    PTA_Mailbox_Handler
    PendSV_Handler
    Peripheral_Handler
    Qdecode_Handler
    RTC_Handler
    SPI0_Handler
    SPI1_Handler
    SPI2W_Handler
    SPI_Flash_Handler
    SVC_Handler
    SysTick_Handler
    System_Handler
    Timer2_Handler
    Timer3_Handler
    Timer4_7_Handler
    Timer4_Handler
    Timer5_Handler
    Timer6_Handler
    Timer7_Handler
    UART1_Handler
    UART2_Handler
    UsageFault_Handler
    WDG_Handler
;;; ..\\..\\..\\src\\mcu\\rtl876x\\arm\\startup_rtl8762c.s
;;;276                    LDR    R0, =0x20000000
        0x00207d44:    f04f5000    O..P    MOV      r0,#0x20000000
;;;277                    LDR    R1, =DEFAULT_HANDLER_TXT
        0x00207d48:    4910        .I      LDR      r1,[pc,#64] ; [0x207d8c] = 0x207d56
;;;278                    MRS    R2, IPSR
        0x00207d4a:    f3ef8205    ....    MRS      r2,IPSR
;;;279                    LDR    R3, =log_direct
        0x00207d4e:    4b10        .K      LDR      r3,[pc,#64] ; [0x207d90] = 0x79b1
;;;280                    BLX    R3
        0x00207d50:    4798        .G      BLX      r3
;;;281                    B      .
        0x00207d52:    e7fe        ..      B        0x207d52 ; ADC_Handler + 14
    __user_setup_stackheap
;;;282    
;;;283                    ENDP
;;;284    
;;;285    
;;;286    ; User Initial Stack
;;;287                    EXPORT  __user_setup_stackheap
;;;288    __user_setup_stackheap PROC
;;;289                    BX      LR
        0x00207d54:    4770        pG      BX       lr
    $d
    DEFAULT_HANDLER_TXT
        0x00207d56:    7245        Er      DCW    29253
        0x00207d58:    21726f72    ror!    DCD    561147762
        0x00207d5c:    656c5020     Ple    DCD    1701597216
        0x00207d60:    20657361    ase     DCD    543519585
        0x00207d64:    6c706d69    impl    DCD    1819307369
        0x00207d68:    6e656d65    emen    DCD    1852140901
        0x00207d6c:    6f792074    t yo    DCD    1870209140
        0x00207d70:    49207275    ur I    DCD    1226863221
        0x00207d74:    48205253    SR H    DCD    1210077779
        0x00207d78:    6c646e61    andl    DCD    1818521185
        0x00207d7c:    66207265    er f    DCD    1713402469
        0x00207d80:    4920726f    or I    DCD    1226863215
        0x00207d84:    25205152    RQ %    DCD    622874962
        0x00207d88:    000a2164    d!..    DCD    663908
        0x00207d8c:    00207d56    V} .    DCD    2129238
        0x00207d90:    000079b1    .y..    DCD    31153
    $t
    .text
    RCC_PeriphClockCmd
;;; .\..\..\..\src\mcu\peripheral\rtl876x_rcc.c
;;;66     {
        0x00207d94:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00207d96:    f44f7790    O..w    MOV      r7,#0x120
        0x00207d9a:    067b        {.      LSLS     r3,r7,#25
;;;67         /* Check the parameters */
;;;68         assert_param(IS_APB_PERIPH(APBPeriph));
;;;69         assert_param(IS_APB_PERIPH_CLOCK(APBPeriph_Clock));
;;;70         assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;71     
;;;72         uint32_t apbRegOff = ((APBPeriph & (0x03 << 26)) >> 26);
        0x00207d9c:    f3c06681    ...f    UBFX     r6,r0,#26,#2
;;;73         uint32_t clkRegOff = ((APBPeriph_Clock & (0x03 << 29)) >> 29);
        0x00207da0:    f3c17541    ..Au    UBFX     r5,r1,#29,#2
        0x00207da4:    f44f7ea0    O..~    MOV      lr,#0x140
        0x00207da8:    ea400401    @...    ORR      r4,r0,r1
;;;74     
;;;75         /*Open clock gating first*/
;;;76         if (NewState == ENABLE)
        0x00207dac:    2a01        .*      CMP      r2,#1
        0x00207dae:    d006        ..      BEQ      0x207dbe ; RCC_PeriphClockCmd + 42
        0x00207db0:    42b9        .B      CMP      r1,r7
        0x00207db2:    d06c        l.      BEQ      0x207e8e ; RCC_PeriphClockCmd + 250
        0x00207db4:    4571        qE      CMP      r1,lr
        0x00207db6:    d06a        j.      BEQ      0x207e8e ; RCC_PeriphClockCmd + 250
        0x00207db8:    2910        .)      CMP      r1,#0x10
        0x00207dba:    d068        h.      BEQ      0x207e8e ; RCC_PeriphClockCmd + 250
        0x00207dbc:    e049        I.      B        0x207e52 ; RCC_PeriphClockCmd + 190
;;;77         {
;;;78             if (APBPeriph_Clock == APBPeriph_KEYSCAN_CLOCK)
        0x00207dbe:    f1a14cc0    ...L    SUB      r12,r1,#0x60000000
        0x00207dc2:    f1bc0c40    ..@.    SUBS     r12,r12,#0x40
        0x00207dc6:    d016        ..      BEQ      0x207df6 ; RCC_PeriphClockCmd + 98
        0x00207dc8:    f1b14fc2    ...O    CMP      r1,#0x61000000
        0x00207dcc:    d01e        ..      BEQ      0x207e0c ; RCC_PeriphClockCmd + 120
        0x00207dce:    f11c0c30    ..0.    ADDS     r12,r12,#0x30
        0x00207dd2:    d003        ..      BEQ      0x207ddc ; RCC_PeriphClockCmd + 72
        0x00207dd4:    f8dfc2f0    ....    LDR      r12,[pc,#752] ; [0x2080c8] = 0x60010000
        0x00207dd8:    4561        aE      CMP      r1,r12
        0x00207dda:    d124        $.      BNE      0x207e26 ; RCC_PeriphClockCmd + 146
        0x00207ddc:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x00207de0:    f04c6c80    L..l    ORR      r12,r12,#0x4000000
        0x00207de4:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
        0x00207de8:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x00207dec:    f04c6c00    L..l    ORR      r12,r12,#0x8000000
        0x00207df0:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
        0x00207df4:    e027        '.      B        0x207e46 ; RCC_PeriphClockCmd + 178
;;;79             {
;;;80                 /*Open 5M clock source*/
;;;81                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
        0x00207df6:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x00207dfa:    f04c6c80    L..l    ORR      r12,r12,#0x4000000
        0x00207dfe:    f8c3c20c    ....    STR      r12,[r3,#0x20c]
;;;82                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT29;
        0x00207e02:    f8d3c20c    ....    LDR      r12,[r3,#0x20c]
        0x00207e06:    f04c5c00    L..\    ORR      r12,r12,#0x20000000
        0x00207e0a:    e7f1        ..      B        0x207df0 ; RCC_PeriphClockCmd + 92
;;;83             }
;;;84             else if (APBPeriph_Clock == APBPeriph_ADC_CLOCK)
;;;85             {
;;;86                 /*Open 10M clock source*/
;;;87                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
        0x00207e0c:    f8d3420c    ...B    LDR      r4,[r3,#0x20c]
        0x00207e10:    f0446480    D..d    ORR      r4,r4,#0x4000000
        0x00207e14:    f8c3420c    ...B    STR      r4,[r3,#0x20c]
;;;88                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT28;
        0x00207e18:    f8d3420c    ...B    LDR      r4,[r3,#0x20c]
        0x00207e1c:    f0445480    D..T    ORR      r4,r4,#0x10000000
        0x00207e20:    f8c3420c    ...B    STR      r4,[r3,#0x20c]
        0x00207e24:    e015        ..      B        0x207e52 ; RCC_PeriphClockCmd + 190
;;;89             }
;;;90             else if ((APBPeriph_Clock == APBPeriph_QDEC_CLOCK) || (APBPeriph_Clock == APBPeriph_SPI2W_CLOCK))
;;;91             {
;;;92                 /*Open 20M clock source*/
;;;93                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT26;
;;;94                 SYSBLKCTRL->u_20C.RSVD_20C |= BIT27;
;;;95             }
;;;96             else if (APBPeriph_Clock == APBPeriph_TIMER_CLOCK)
        0x00207e26:    f8dfc2a4    ....    LDR      r12,[pc,#676] ; [0x2080cc] = 0x20004000
        0x00207e2a:    4561        aE      CMP      r1,r12
        0x00207e2c:    d10b        ..      BNE      0x207e46 ; RCC_PeriphClockCmd + 178
;;;97             {
;;;98                 /* Enable TIM0~1 fixed 40M */
;;;99                 CLK_SOURCE_REG_2 |= BIT9;
        0x00207e2e:    f8d3c360    ..`.    LDR      r12,[r3,#0x360]
        0x00207e32:    f44c7c00    L..|    ORR      r12,r12,#0x200
        0x00207e36:    f8c3c360    ..`.    STR      r12,[r3,#0x360]
;;;100                /* enable TIM2~7 ICG*/
;;;101                CLK_SOURCE_REG_0 |= BIT4;
        0x00207e3a:    f8d3c348    ..H.    LDR      r12,[r3,#0x348]
        0x00207e3e:    f04c0c10    L...    ORR      r12,r12,#0x10
        0x00207e42:    f8c3c348    ..H.    STR      r12,[r3,#0x348]
;;;102            }
;;;103        }
;;;104    
;;;105        /* Special register handle */
;;;106        if (NewState == ENABLE)
;;;107        {
;;;108            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
        0x00207e46:    42b9        .B      CMP      r1,r7
        0x00207e48:    d01d        ..      BEQ      0x207e86 ; RCC_PeriphClockCmd + 242
        0x00207e4a:    4571        qE      CMP      r1,lr
        0x00207e4c:    d01b        ..      BEQ      0x207e86 ; RCC_PeriphClockCmd + 242
;;;109                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
        0x00207e4e:    2910        .)      CMP      r1,#0x10
        0x00207e50:    d019        ..      BEQ      0x207e86 ; RCC_PeriphClockCmd + 242
;;;110            {
;;;111                SYSBLKCTRL->u_220 |= APBPeriph | APBPeriph_Clock;
;;;112                return;
;;;113            }
;;;114        }
;;;115        else
;;;116        {
;;;117            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
;;;118                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
;;;119            {
;;;120                SYSBLKCTRL->u_220 &= ~(APBPeriph | APBPeriph_Clock);
;;;121                return;
;;;122            }
;;;123        }
;;;124    
;;;125        /* clear flag */
;;;126        APBPeriph &= (~(0x03 << 26));
        0x00207e52:    f0206340     .@c    BIC      r3,r0,#0xc000000
;;;127        APBPeriph_Clock &= (~(0x03 << 29));
        0x00207e56:    f02140c0    !..@    BIC      r0,r1,#0x60000000
        0x00207e5a:    ea4f0186    O...    LSL      r1,r6,#2
        0x00207e5e:    f1014180    ...A    ADD      r1,r1,#0x40000000
;;;128    
;;;129        if (NewState == ENABLE)
        0x00207e62:    2a01        .*      CMP      r2,#1
        0x00207e64:    f8d12210    ..."    LDR      r2,[r1,#0x210]
        0x00207e68:    d017        ..      BEQ      0x207e9a ; RCC_PeriphClockCmd + 262
;;;130        {
;;;131            //enable peripheral
;;;132            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) |= APBPeriph;
;;;133            //enable peripheral clock
;;;134            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= APBPeriph_Clock;
;;;135            //enable peripheral clock in sleep mode
;;;136            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= (APBPeriph_Clock << 1);
;;;137        }
;;;138        else
;;;139        {
;;;140            //disable peripheral
;;;141            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) &= (~APBPeriph);
        0x00207e6a:    439a        .C      BICS     r2,r2,r3
;;;142            //disable peripheral clock
;;;143            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~APBPeriph_Clock);
        0x00207e6c:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x00207e70:    00a9        ..      LSLS     r1,r5,#2
        0x00207e72:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x00207e76:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x00207e7a:    4382        .C      BICS     r2,r2,r0
;;;144            //disable peripheral clock in sleep mode
;;;145            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~(APBPeriph_Clock << 1));
        0x00207e7c:    ea220040    ".@.    BIC      r0,r2,r0,LSL #1
        0x00207e80:    f8c1022c    ..,.    STR      r0,[r1,#0x22c]
;;;146        }
;;;147    
;;;148        return;
;;;149    }
        0x00207e84:    bdf0        ..      POP      {r4-r7,pc}
        0x00207e86:    f8d30220    .. .    LDR      r0,[r3,#0x220]
        0x00207e8a:    4320         C      ORRS     r0,r0,r4
        0x00207e8c:    e002        ..      B        0x207e94 ; RCC_PeriphClockCmd + 256
        0x00207e8e:    f8d30220    .. .    LDR      r0,[r3,#0x220]
        0x00207e92:    43a0        .C      BICS     r0,r0,r4
        0x00207e94:    f8c30220    .. .    STR      r0,[r3,#0x220]
        0x00207e98:    bdf0        ..      POP      {r4-r7,pc}
        0x00207e9a:    431a        .C      ORRS     r2,r2,r3
        0x00207e9c:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x00207ea0:    00a9        ..      LSLS     r1,r5,#2
        0x00207ea2:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x00207ea6:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x00207eaa:    4302        .C      ORRS     r2,r2,r0
        0x00207eac:    ea420040    B.@.    ORR      r0,r2,r0,LSL #1
        0x00207eb0:    e7e6        ..      B        0x207e80 ; RCC_PeriphClockCmd + 236
    RCC_SPIClkDivConfig
        0x00207eb2:    4b87        .K      LDR      r3,[pc,#540] ; [0x2080d0] = 0x40013000
        0x00207eb4:    f04f4280    O..B    MOV      r2,#0x40000000
        0x00207eb8:    4298        .B      CMP      r0,r3
;;;150    
;;;151    /**
;;;152      * @brief  SPI clock divider config.
;;;153      * @param  SPIx: where x can be 0 or 1 to select the SPI peripheral.
;;;154      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;155      *      this parameter can be one of the following values:
;;;156      *     @arg SPI_CLOCK_DIV_1
;;;157      *     @arg SPI_CLOCK_DIV_2
;;;158      *     @arg SPI_CLOCK_DIV_4
;;;159      *     @arg SPI_CLOCK_DIV_8
;;;160      * @retval None
;;;161      */
;;;162    void RCC_SPIClkDivConfig(SPI_TypeDef *SPIx, uint16_t ClockDiv)
;;;163    {
        0x00207eba:    d116        ..      BNE      0x207eea ; RCC_SPIClkDivConfig + 56
;;;164        assert_param(IS_SPI_DIV(ClockDiv));
;;;165    
;;;166        /* Config I2C clock divider */
;;;167        if (SPIx == SPI0)
;;;168        {
;;;169            /* disable clock first */
;;;170            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_SPI0_EN_Msk;
        0x00207ebc:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00207ec0:    f4203080     ..0    BIC      r0,r0,#0x10000
        0x00207ec4:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;171            //platform_delay_us(1);
;;;172    
;;;173            CLK_SOURCE_REG_1 &= ~(0x03 << 19);
        0x00207ec8:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207ecc:    f42010c0     ...    BIC      r0,r0,#0x180000
        0x00207ed0:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;174            CLK_SOURCE_REG_1 |= (ClockDiv << 19);
        0x00207ed4:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207ed8:    ea4040c1    @..@    ORR      r0,r0,r1,LSL #19
        0x00207edc:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;175    
;;;176            //platform_delay_us(1);
;;;177            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_SPI0_EN_Msk;
        0x00207ee0:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00207ee4:    f4403080    @..0    ORR      r0,r0,#0x10000
        0x00207ee8:    e018        ..      B        0x207f1c ; RCC_SPIClkDivConfig + 106
;;;178        }
;;;179        else if (SPIx == SPI1)
        0x00207eea:    4b7a        zK      LDR      r3,[pc,#488] ; [0x2080d4] = 0x40013400
        0x00207eec:    4298        .B      CMP      r0,r3
        0x00207eee:    d117        ..      BNE      0x207f20 ; RCC_SPIClkDivConfig + 110
;;;180        {
;;;181            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_SPI1_EN_Msk;
        0x00207ef0:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00207ef4:    f4202080     ..     BIC      r0,r0,#0x40000
        0x00207ef8:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;182            //platform_delay_us(1);
;;;183    
;;;184            CLK_SOURCE_REG_1 &= ~(0x03 << 21);
        0x00207efc:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207f00:    f42000c0     ...    BIC      r0,r0,#0x600000
        0x00207f04:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;185            CLK_SOURCE_REG_1 |= (ClockDiv << 21);
        0x00207f08:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207f0c:    ea405041    @.AP    ORR      r0,r0,r1,LSL #21
        0x00207f10:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;186    
;;;187            //platform_delay_us(1);
;;;188            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_SPI1_EN_Msk;
        0x00207f14:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00207f18:    f4402080    @..     ORR      r0,r0,#0x40000
        0x00207f1c:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;189        }
;;;190        return;
;;;191    }
        0x00207f20:    4770        pG      BX       lr
    RCC_I2CClkDivConfig
        0x00207f22:    4b6d        mK      LDR      r3,[pc,#436] ; [0x2080d8] = 0x40015000
        0x00207f24:    049a        ..      LSLS     r2,r3,#18
        0x00207f26:    4298        .B      CMP      r0,r3
;;;192    
;;;193    /**
;;;194      * @brief  I2C clock divider config.
;;;195      * @param  I2Cx: where x can be 0 or 1 to select the I2C peripheral.
;;;196      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;197      *      this parameter can be one of the following values:
;;;198      *     @arg I2C_CLOCK_DIV_1
;;;199      *     @arg I2C_CLOCK_DIV_2
;;;200      *     @arg I2C_CLOCK_DIV_4
;;;201      *     @arg I2C_CLOCK_DIV_8
;;;202      * @retval None
;;;203      */
;;;204    void RCC_I2CClkDivConfig(I2C_TypeDef *I2Cx, uint16_t ClockDiv)
;;;205    {
        0x00207f28:    d116        ..      BNE      0x207f58 ; RCC_I2CClkDivConfig + 54
;;;206        assert_param(IS_I2C_DIV(ClockDiv));
;;;207    
;;;208        /* Config I2C clock divider */
;;;209        if (I2Cx == I2C0)
;;;210        {
;;;211            /* disable clock first */
;;;212            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 &= ~SYSBLK_ACTCK_I2C0_EN_Msk;
        0x00207f2a:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x00207f2e:    f0200001     ...    BIC      r0,r0,#1
        0x00207f32:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;213            //platform_delay_us(1);
;;;214    
;;;215            CLK_SOURCE_REG_1 &= ~(0x03 << 15);
        0x00207f36:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207f3a:    f42030c0     ..0    BIC      r0,r0,#0x18000
        0x00207f3e:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;216            CLK_SOURCE_REG_1 |= (ClockDiv << 15);
        0x00207f42:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207f46:    ea4030c1    @..0    ORR      r0,r0,r1,LSL #15
        0x00207f4a:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;217    
;;;218            //platform_delay_us(1);
;;;219            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= SYSBLK_ACTCK_I2C0_EN_Msk;
        0x00207f4e:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x00207f52:    f0400001    @...    ORR      r0,r0,#1
        0x00207f56:    e018        ..      B        0x207f8a ; RCC_I2CClkDivConfig + 104
;;;220        }
;;;221        else if (I2Cx == I2C1)
        0x00207f58:    4b60        `K      LDR      r3,[pc,#384] ; [0x2080dc] = 0x40015400
        0x00207f5a:    4298        .B      CMP      r0,r3
        0x00207f5c:    d117        ..      BNE      0x207f8e ; RCC_I2CClkDivConfig + 108
;;;222        {
;;;223            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 &= ~SYSBLK_ACTCK_I2C1_EN_Msk;
        0x00207f5e:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x00207f62:    f0200004     ...    BIC      r0,r0,#4
        0x00207f66:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;224            //platform_delay_us(1);
;;;225    
;;;226            CLK_SOURCE_REG_1 &= ~(0x03 << 17);
        0x00207f6a:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207f6e:    f42020c0     ..     BIC      r0,r0,#0x60000
        0x00207f72:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;227            CLK_SOURCE_REG_1 |= (ClockDiv << 17);
        0x00207f76:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207f7a:    ea404041    @.A@    ORR      r0,r0,r1,LSL #17
        0x00207f7e:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;228    
;;;229            //platform_delay_us(1);
;;;230            SYSBLKCTRL->u_238.PERI_CLK_CTRL1 |= SYSBLK_ACTCK_I2C1_EN_Msk;
        0x00207f82:    f8d20238    ..8.    LDR      r0,[r2,#0x238]
        0x00207f86:    f0400004    @...    ORR      r0,r0,#4
        0x00207f8a:    f8c20238    ..8.    STR      r0,[r2,#0x238]
;;;231        }
;;;232    
;;;233        return;
;;;234    }
        0x00207f8e:    4770        pG      BX       lr
    RCC_UARTClkDivConfig
;;;235    
;;;236    /**
;;;237      * @brief  UART clock divider config.
;;;238      * @param  UARTx: selected UART peripheral.
;;;239      * @param  ClockDiv: specifies the APB peripheral to gates its clock.
;;;240      *      this parameter can be one of the following values:
;;;241      *     @arg UART_CLOCK_DIV_1
;;;242      *     @arg UART_CLOCK_DIV_2
;;;243      *     @arg UART_CLOCK_DIV_4
;;;244      *     @arg UART_CLOCK_DIV_16
;;;245      * @retval None
;;;246      */
;;;247    void RCC_UARTClkDivConfig(UART_TypeDef *UARTx, uint16_t ClockDiv)
;;;248    {
;;;249        assert_param(IS_UART_DIV(ClockDiv));
;;;250    
;;;251        /* Config UART clock divider */
;;;252        if (UARTx == UART)
        0x00207f90:    4b53        SK      LDR      r3,[pc,#332] ; [0x2080e0] = 0x40012000
        0x00207f92:    045a        Z.      LSLS     r2,r3,#17
        0x00207f94:    4298        .B      CMP      r0,r3
;;; .\..\..\..\src\mcu\peripheral\rtl876x_rcc.c (248)
        0x00207f96:    d118        ..      BNE      0x207fca ; RCC_UARTClkDivConfig + 58
;;;249        assert_param(IS_UART_DIV(ClockDiv));
;;;250    
;;;251        /* Config UART clock divider */
;;;252        if (UARTx == UART)
;;;253        {
;;;254            /* disable clock first */
;;;255            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 &= ~SYSBLK_ACTCK_UART0DATA_EN_Msk;
        0x00207f98:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00207f9c:    f0200001     ...    BIC      r0,r0,#1
        0x00207fa0:    f8c20234    ..4.    STR      r0,[r2,#0x234]
;;;256            //platform_delay_us(1);
;;;257    
;;;258            CLK_SOURCE_REG_1 &= ~(0x03 << 9);
        0x00207fa4:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207fa8:    f42060c0     ..`    BIC      r0,r0,#0x600
        0x00207fac:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;259            CLK_SOURCE_REG_1 |= (ClockDiv << 9);
        0x00207fb0:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207fb4:    ea402041    @.A     ORR      r0,r0,r1,LSL #9
        0x00207fb8:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;260    
;;;261            //platform_delay_us(1);
;;;262            SYSBLKCTRL->u_234.PERI_CLK_CTRL0 |= SYSBLK_ACTCK_UART0DATA_EN_Msk;
        0x00207fbc:    f8d20234    ..4.    LDR      r0,[r2,#0x234]
        0x00207fc0:    f0400001    @...    ORR      r0,r0,#1
        0x00207fc4:    f8c20234    ..4.    STR      r0,[r2,#0x234]
        0x00207fc8:    4770        pG      BX       lr
;;;263        }
;;;264        else if (UARTx == UART1)
        0x00207fca:    4b46        FK      LDR      r3,[pc,#280] ; [0x2080e4] = 0x40011000
        0x00207fcc:    4298        .B      CMP      r0,r3
        0x00207fce:    d1fb        ..      BNE      0x207fc8 ; RCC_UARTClkDivConfig + 56
;;;265        {
;;;266            SYSBLKCTRL->u_230.CLK_CTRL &= ~SYSBLK_ACTCK_LOGUART_EN_Msk;
        0x00207fd0:    f8d20230    ..0.    LDR      r0,[r2,#0x230]
        0x00207fd4:    f4205080     ..P    BIC      r0,r0,#0x1000
        0x00207fd8:    f8c20230    ..0.    STR      r0,[r2,#0x230]
;;;267            //platform_delay_us(1);
;;;268    
;;;269            CLK_SOURCE_REG_1 &= ~(0x03 << 11);
        0x00207fdc:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207fe0:    f42050c0     ..P    BIC      r0,r0,#0x1800
        0x00207fe4:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;270            CLK_SOURCE_REG_1 |= (ClockDiv << 11);
        0x00207fe8:    f8d2035c    ..\.    LDR      r0,[r2,#0x35c]
        0x00207fec:    ea4020c1    @..     ORR      r0,r0,r1,LSL #11
        0x00207ff0:    f8c2035c    ..\.    STR      r0,[r2,#0x35c]
;;;271    
;;;272            //platform_delay_us(1);
;;;273            SYSBLKCTRL->u_230.CLK_CTRL |= SYSBLK_ACTCK_LOGUART_EN_Msk;
        0x00207ff4:    f8d20230    ..0.    LDR      r0,[r2,#0x230]
        0x00207ff8:    f4405080    @..P    ORR      r0,r0,#0x1000
        0x00207ffc:    f8c20230    ..0.    STR      r0,[r2,#0x230]
;;;274        }
;;;275    
;;;276        return;
;;;277    }
        0x00208000:    4770        pG      BX       lr
    RCC_PeriClockConfig
;;;278    
;;;279    /**
;;;280      * @brief  Enables or disables the APB peripheral clock.
;;;281      * @param  APBPeriph_Clock: specifies the APB peripheral clock config.
;;;282      *      this parameter can be one of the following values(must be the same with APBPeriph):
;;;283      *     @arg APBPeriph_TIMER_CLOCK
;;;284      *     @arg APBPeriph_GDMA_CLOCK
;;;285      *     @arg APBPeriph_SPI2W_CLOCK
;;;286      *     @arg APBPeriph_KEYSCAN_CLOCK
;;;287      *     @arg APBPeriph_QDEC_CLOCK
;;;288      *     @arg APBPeriph_I2C1_CLOCK
;;;289      *     @arg APBPeriph_I2C0_CLOCK
;;;290      *     @arg APBPeriph_IR_CLOCK
;;;291      *     @arg APBPeriph_SPI1_CLOCK
;;;292      *     @arg APBPeriph_SPI0_CLOCK
;;;293      *     @arg APBPeriph_UART0_CLOCK
;;;294      *     @arg APBPeriph_UART1_CLOCK
;;;295      *     @arg APBPeriph_UART2_CLOCK
;;;296      *     @arg APBPeriph_GPIO_CLOCK
;;;297      *     @arg APBPeriph_ADC_CLOCK
;;;298      *     @arg APBPeriph_I2S0_CLOCK
;;;299      *     @arg APBPeriph_I2S1_CLOCK
;;;300      *     @arg APBPeriph_CODEC_CLOCK
;;;301      * @param  NewState: new state of the specified peripheral clock.
;;;302      *   This parameter can be: ENABLE or DISABLE.
;;;303      * @retval None
;;;304      */
;;;305    void RCC_PeriClockConfig(uint32_t APBPeriph_Clock, FunctionalState NewState)
;;;306    {
        0x00208002:    b530        0.      PUSH     {r4,r5,lr}
        0x00208004:    f44f74a0    O..t    MOV      r4,#0x140
        0x00208008:    0623        #.      LSLS     r3,r4,#24
        0x0020800a:    f3c07241    ..Ar    UBFX     r2,r0,#29,#2
        0x0020800e:    f44f7590    O..u    MOV      r5,#0x120
        0x00208012:    2901        .)      CMP      r1,#1
        0x00208014:    d006        ..      BEQ      0x208024 ; RCC_PeriClockConfig + 34
        0x00208016:    42a8        .B      CMP      r0,r5
        0x00208018:    d01e        ..      BEQ      0x208058 ; RCC_PeriClockConfig + 86
        0x0020801a:    42a0        .B      CMP      r0,r4
        0x0020801c:    d01c        ..      BEQ      0x208058 ; RCC_PeriClockConfig + 86
        0x0020801e:    2810        .(      CMP      r0,#0x10
        0x00208020:    d01a        ..      BEQ      0x208058 ; RCC_PeriClockConfig + 86
        0x00208022:    e005        ..      B        0x208030 ; RCC_PeriClockConfig + 46
;;;307        /* Check the parameters */
;;;308        assert_param(IS_APB_PERIPH_CLOCK(APBPeriph_Clock));
;;;309        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;310    
;;;311        uint32_t clkRegOff = ((APBPeriph_Clock & (0x03 << 29)) >> 29);
;;;312    
;;;313        /* Special register handle */
;;;314        if (NewState == ENABLE)
;;;315        {
;;;316            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
        0x00208024:    42a8        .B      CMP      r0,r5
        0x00208026:    d013        ..      BEQ      0x208050 ; RCC_PeriClockConfig + 78
        0x00208028:    42a0        .B      CMP      r0,r4
        0x0020802a:    d011        ..      BEQ      0x208050 ; RCC_PeriClockConfig + 78
;;;317                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
        0x0020802c:    2810        .(      CMP      r0,#0x10
        0x0020802e:    d00f        ..      BEQ      0x208050 ; RCC_PeriClockConfig + 78
        0x00208030:    2901        .)      CMP      r1,#1
        0x00208032:    ea4f0182    O...    LSL      r1,r2,#2
        0x00208036:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x0020803a:    f02040c0     ..@    BIC      r0,r0,#0x60000000
        0x0020803e:    f8d1222c    ..,"    LDR      r2,[r1,#0x22c]
        0x00208042:    d00f        ..      BEQ      0x208064 ; RCC_PeriClockConfig + 98
        0x00208044:    4382        .C      BICS     r2,r2,r0
        0x00208046:    ea220040    ".@.    BIC      r0,r2,r0,LSL #1
        0x0020804a:    f8c1022c    ..,.    STR      r0,[r1,#0x22c]
        0x0020804e:    bd30        0.      POP      {r4,r5,pc}
;;;318            {
;;;319                SYSBLKCTRL->u_220 |= APBPeriph_Clock;
        0x00208050:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x00208054:    4301        .C      ORRS     r1,r1,r0
;;;320                return;
        0x00208056:    e002        ..      B        0x20805e ; RCC_PeriClockConfig + 92
;;;321            }
;;;322        }
;;;323        else
;;;324        {
;;;325            if ((APBPeriph_Clock == APBPeriph_I2S0_CLOCK) || ((APBPeriph_Clock == APBPeriph_I2S1_CLOCK)) ||
;;;326                (APBPeriph_Clock == APBPeriph_CODEC_CLOCK))
;;;327            {
;;;328                SYSBLKCTRL->u_220 &= ~(APBPeriph_Clock);
        0x00208058:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x0020805c:    4381        .C      BICS     r1,r1,r0
        0x0020805e:    f8c31220    .. .    STR      r1,[r3,#0x220]
        0x00208062:    bd30        0.      POP      {r4,r5,pc}
;;;329                return;
;;;330            }
;;;331        }
;;;332    
;;;333        APBPeriph_Clock &= (~(0x03 << 29));
;;;334    
;;;335        if (NewState == ENABLE)
;;;336        {
;;;337            //enable peripheral clock
;;;338            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= APBPeriph_Clock;
        0x00208064:    4302        .C      ORRS     r2,r2,r0
;;;339            //enable peripheral clock in sleep mode
;;;340            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) |= (APBPeriph_Clock << 1);
        0x00208066:    ea420040    B.@.    ORR      r0,r2,r0,LSL #1
        0x0020806a:    e7ee        ..      B        0x20804a ; RCC_PeriClockConfig + 72
    RCC_PeriFunctionConfig
;;;341        }
;;;342        else
;;;343        {
;;;344            //disable peripheral clock
;;;345            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~APBPeriph_Clock);
;;;346            //disable peripheral clock in sleep mode
;;;347            *((uint32_t *)(&(SYSBLKCTRL->u_230.CLK_CTRL)) + clkRegOff - 1) &= (~(APBPeriph_Clock << 1));
;;;348        }
;;;349    
;;;350        return;
;;;351    }
;;;352    
;;;353    /**
;;;354      * @brief  Enables or disables the APB peripheral clock.
;;;355      * @param  APBPeriph: specifies the APB peripheral to gates its clock.
;;;356      *      this parameter can be one of the following values:
;;;357      *     @arg APBPeriph_TIMER
;;;358      *     @arg APBPeriph_GDMA
;;;359      *     @arg APBPeriph_LCD
;;;360      *     @arg APBPeriph_SPI2W
;;;361      *     @arg APBPeriph_KEYSCAN
;;;362      *     @arg APBPeriph_QDEC
;;;363      *     @arg APBPeriph_I2C1
;;;364      *     @arg APBPeriph_I2C0
;;;365      *     @arg APBPeriph_IR
;;;366      *     @arg APBPeriph_SPI1
;;;367      *     @arg APBPeriph_SPI0
;;;368      *     @arg APBPeriph_UART0
;;;369      *     @arg APBPeriph_UART1
;;;370      *     @arg APBPeriph_UART2
;;;371      *     @arg APBPeriph_GPIO
;;;372      *     @arg APBPeriph_ADC
;;;373      *     @arg APBPeriph_I2S0
;;;374      *     @arg APBPeriph_I2S1
;;;375      *     @arg APBPeriph_CODEC
;;;376      * @param  NewState: new state of the specified peripheral clock.
;;;377      *   This parameter can be: ENABLE or DISABLE.
;;;378      * @retval None
;;;379      */
;;;380    void RCC_PeriFunctionConfig(uint32_t APBPeriph, FunctionalState NewState)
;;;381    {
;;;382        /* Check the parameters */
;;;383        assert_param(IS_APB_PERIPH(APBPeriph));
;;;384        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;385    
;;;386        uint32_t apbRegOff = ((APBPeriph & (0x03 << 26)) >> 26);
        0x0020806c:    f3c06281    ...b    UBFX     r2,r0,#26,#2
        0x00208070:    f04f4380    O..C    MOV      r3,#0x40000000
        0x00208074:    2901        .)      CMP      r1,#1
;;; .\..\..\..\src\mcu\peripheral\rtl876x_rcc.c (381)
        0x00208076:    d006        ..      BEQ      0x208086 ; RCC_PeriFunctionConfig + 26
        0x00208078:    2802        .(      CMP      r0,#2
        0x0020807a:    d01c        ..      BEQ      0x2080b6 ; RCC_PeriFunctionConfig + 74
        0x0020807c:    2804        .(      CMP      r0,#4
        0x0020807e:    d01a        ..      BEQ      0x2080b6 ; RCC_PeriFunctionConfig + 74
        0x00208080:    2801        .(      CMP      r0,#1
        0x00208082:    d018        ..      BEQ      0x2080b6 ; RCC_PeriFunctionConfig + 74
        0x00208084:    e005        ..      B        0x208092 ; RCC_PeriFunctionConfig + 38
;;;382        /* Check the parameters */
;;;383        assert_param(IS_APB_PERIPH(APBPeriph));
;;;384        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;385    
;;;386        uint32_t apbRegOff = ((APBPeriph & (0x03 << 26)) >> 26);
;;;387    
;;;388        /* Special register handle */
;;;389        if (NewState == ENABLE)
;;;390        {
;;;391            if ((APBPeriph == APBPeriph_I2S0) || ((APBPeriph == APBPeriph_I2S1)) ||
        0x00208086:    2802        .(      CMP      r0,#2
        0x00208088:    d011        ..      BEQ      0x2080ae ; RCC_PeriFunctionConfig + 66
        0x0020808a:    2804        .(      CMP      r0,#4
        0x0020808c:    d00f        ..      BEQ      0x2080ae ; RCC_PeriFunctionConfig + 66
;;;392                (APBPeriph == APBPeriph_CODEC))
        0x0020808e:    2801        .(      CMP      r0,#1
        0x00208090:    d00d        ..      BEQ      0x2080ae ; RCC_PeriFunctionConfig + 66
        0x00208092:    2901        .)      CMP      r1,#1
        0x00208094:    ea4f0182    O...    LSL      r1,r2,#2
        0x00208098:    f1014180    ...A    ADD      r1,r1,#0x40000000
        0x0020809c:    f0206040     .@`    BIC      r0,r0,#0xc000000
        0x002080a0:    f8d12210    ..."    LDR      r2,[r1,#0x210]
        0x002080a4:    d00d        ..      BEQ      0x2080c2 ; RCC_PeriFunctionConfig + 86
        0x002080a6:    4382        .C      BICS     r2,r2,r0
        0x002080a8:    f8c12210    ..."    STR      r2,[r1,#0x210]
        0x002080ac:    4770        pG      BX       lr
;;;393            {
;;;394                SYSBLKCTRL->u_220 |= APBPeriph;
        0x002080ae:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x002080b2:    4301        .C      ORRS     r1,r1,r0
;;;395                return;
        0x002080b4:    e002        ..      B        0x2080bc ; RCC_PeriFunctionConfig + 80
;;;396            }
;;;397        }
;;;398        else
;;;399        {
;;;400            if ((APBPeriph == APBPeriph_I2S0) || ((APBPeriph == APBPeriph_I2S1)) ||
;;;401                (APBPeriph == APBPeriph_CODEC))
;;;402            {
;;;403                SYSBLKCTRL->u_220 &= ~(APBPeriph);
        0x002080b6:    f8d31220    .. .    LDR      r1,[r3,#0x220]
        0x002080ba:    4381        .C      BICS     r1,r1,r0
        0x002080bc:    f8c31220    .. .    STR      r1,[r3,#0x220]
        0x002080c0:    4770        pG      BX       lr
;;;404                return;
;;;405            }
;;;406        }
;;;407    
;;;408        /* clear flag */
;;;409        APBPeriph &= (~(0x03 << 26));
;;;410    
;;;411        if (NewState == ENABLE)
;;;412        {
;;;413            //enable peripheral
;;;414            *((uint32_t *)(&(SYSBLKCTRL->u_210.SOC_FUNC_EN)) + apbRegOff) |= APBPeriph;
        0x002080c2:    4302        .C      ORRS     r2,r2,r0
        0x002080c4:    e7f0        ..      B        0x2080a8 ; RCC_PeriFunctionConfig + 60
    $d
        0x002080c6:    0000        ..      DCW    0
        0x002080c8:    60010000    ...`    DCD    1610678272
        0x002080cc:    20004000    .@.     DCD    536887296
        0x002080d0:    40013000    .0.@    DCD    1073819648
        0x002080d4:    40013400    .4.@    DCD    1073820672
        0x002080d8:    40015000    .P.@    DCD    1073827840
        0x002080dc:    40015400    .T.@    DCD    1073828864
        0x002080e0:    40012000    . .@    DCD    1073815552
        0x002080e4:    40011000    ...@    DCD    1073811456
    $t
    .text
    UART_Init
;;; .\..\..\..\src\mcu\peripheral\rtl876x_uart.c
;;;30     {
        0x002080e8:    b510        ..      PUSH     {r4,lr}
;;;31         assert_param(IS_UART_PERIPH(UARTx));
;;;32         assert_param(IS_UART_WORD_LENGTH(UART_InitStruct->wordLen));
;;;33         assert_param(IS_UART_PARITY(UART_InitStruct->parity));
;;;34         assert_param(IS_UART_STOPBITS(UART_InitStruct->stopBits));
;;;35         assert_param(IS_UART_AUTO_FLOW_CTRL(UART_InitStruct->autoFlowCtrl));
;;;36         assert_param(IS_UART_DMA_CFG(UART_InitStruct->dmaEn));
;;;37         assert_param(IS_UART_RX_FIFO_TRIGGER_LEVEL(UART_InitStruct->rxTriggerLevel));
;;;38         assert_param(IS_UART_IDLE_TIME(UART_InitStruct->idle_time));
;;;39     
;;;40         //clear DLAB bit
;;;41         UARTx->LCR &= LCR_DLAB_Reset;
        0x002080ea:    68c2        .h      LDR      r2,[r0,#0xc]
        0x002080ec:    f0220280    "...    BIC      r2,r2,#0x80
        0x002080f0:    60c2        .`      STR      r2,[r0,#0xc]
;;;42         //disable all interrupt
;;;43         UARTx->DLH_INTCR = 0x00;
        0x002080f2:    2200        ."      MOVS     r2,#0
        0x002080f4:    6042        B`      STR      r2,[r0,#4]
;;;44     
;;;45         //read to clear Line Status Reg
;;;46         UARTx->LSR;
        0x002080f6:    6942        Bi      LDR      r2,[r0,#0x14]
;;;47         //clear FIFO
;;;48         UARTx->INTID_FCR |= (FCR_CLEAR_RX_FIFO_Set | FCR_CLEAR_TX_FIFO_Set);
        0x002080f8:    6882        .h      LDR      r2,[r0,#8]
        0x002080fa:    f0420206    B...    ORR      r2,r2,#6
        0x002080fe:    6082        .`      STR      r2,[r0,#8]
;;;49     
;;;50         //set baudrate, firstly set DLAB bit
;;;51         UARTx->LCR |= LCR_DLAB_Set;
        0x00208100:    68c2        .h      LDR      r2,[r0,#0xc]
        0x00208102:    f0420280    B...    ORR      r2,r2,#0x80
        0x00208106:    60c2        .`      STR      r2,[r0,#0xc]
;;;52         //set calibration parameters(OVSR)
;;;53         UARTx->STSR &= ~0xF0;
        0x00208108:    6a02        .j      LDR      r2,[r0,#0x20]
        0x0020810a:    f02202f0    "...    BIC      r2,r2,#0xf0
        0x0020810e:    6202        .b      STR      r2,[r0,#0x20]
;;;54         UARTx->STSR |= (UART_InitStruct->ovsr << 4);
        0x00208110:    6a02        .j      LDR      r2,[r0,#0x20]
        0x00208112:    888b        ..      LDRH     r3,[r1,#4]
        0x00208114:    ea421203    B...    ORR      r2,r2,r3,LSL #4
        0x00208118:    6202        .b      STR      r2,[r0,#0x20]
;;;55         //set calibration parameters(OVSR_adj)
;;;56         UARTx->SPR &= (~(0x7ff << 16));
        0x0020811a:    69c2        .i      LDR      r2,[r0,#0x1c]
        0x0020811c:    4b64        dK      LDR      r3,[pc,#400] ; [0x2082b0] = 0xf800ffff
        0x0020811e:    401a        .@      ANDS     r2,r2,r3
        0x00208120:    61c2        .a      STR      r2,[r0,#0x1c]
;;;57         UARTx->SPR |= (UART_InitStruct->ovsr_adj << 16);
        0x00208122:    69c2        .i      LDR      r2,[r0,#0x1c]
        0x00208124:    880b        ..      LDRH     r3,[r1,#0]
        0x00208126:    ea424203    B..B    ORR      r2,r2,r3,LSL #16
        0x0020812a:    61c2        .a      STR      r2,[r0,#0x1c]
;;;58         //set DLL and DLH
;;;59         UARTx->DLL = (UART_InitStruct->div & 0x00FF);
        0x0020812c:    788a        .x      LDRB     r2,[r1,#2]
        0x0020812e:    6002        .`      STR      r2,[r0,#0]
;;;60         UARTx->DLH_INTCR = ((UART_InitStruct->div & 0xFF00) >> 8);
        0x00208130:    884a        J.      LDRH     r2,[r1,#2]
        0x00208132:    0a12        ..      LSRS     r2,r2,#8
        0x00208134:    6042        B`      STR      r2,[r0,#4]
;;;61         //after set baudrate, clear DLAB bit
;;;62         UARTx->LCR &= LCR_DLAB_Reset;
        0x00208136:    68c2        .h      LDR      r2,[r0,#0xc]
        0x00208138:    f0220280    "...    BIC      r2,r2,#0x80
        0x0020813c:    60c2        .`      STR      r2,[r0,#0xc]
;;;63     
;;;64         //set LCR reg
;;;65         UARTx->LCR = (UART_InitStruct->parity | UART_InitStruct->stopBits | UART_InitStruct->wordLen);
        0x0020813e:    890a        ..      LDRH     r2,[r1,#8]
        0x00208140:    894b        K.      LDRH     r3,[r1,#0xa]
        0x00208142:    431a        .C      ORRS     r2,r2,r3
        0x00208144:    88cb        ..      LDRH     r3,[r1,#6]
        0x00208146:    431a        .C      ORRS     r2,r2,r3
        0x00208148:    60c2        .`      STR      r2,[r0,#0xc]
;;;66         //set FCR reg, FIFO must enable
;;;67         UARTx->INTID_FCR = ((1 << 0) | UART_InitStruct->rxTriggerLevel << 8 | UART_InitStruct->dmaEn);
        0x0020814a:    89ca        ..      LDRH     r2,[r1,#0xe]
        0x0020814c:    2301        .#      MOVS     r3,#1
        0x0020814e:    eb032202    ..."    ADD      r2,r3,r2,LSL #8
        0x00208152:    8a0b        ..      LDRH     r3,[r1,#0x10]
        0x00208154:    431a        .C      ORRS     r2,r2,r3
        0x00208156:    6082        .`      STR      r2,[r0,#8]
;;;68     
;;;69         /* auto flow control */
;;;70         UARTx->MCR &= (~((1 << 5) | (1 << 1)));
        0x00208158:    6902        .i      LDR      r2,[r0,#0x10]
        0x0020815a:    f0220222    ".".    BIC      r2,r2,#0x22
        0x0020815e:    6102        .a      STR      r2,[r0,#0x10]
;;;71         UARTx->MCR |= UART_InitStruct->autoFlowCtrl;
        0x00208160:    6902        .i      LDR      r2,[r0,#0x10]
        0x00208162:    898b        ..      LDRH     r3,[r1,#0xc]
        0x00208164:    431a        .C      ORRS     r2,r2,r3
        0x00208166:    6102        .a      STR      r2,[r0,#0x10]
;;;72     
;;;73         /* set rx idle time */
;;;74         UARTx->RX_IDLE_INTTCR = (UART_InitStruct->idle_time);
        0x00208168:    8a4a        J.      LDRH     r2,[r1,#0x12]
        0x0020816a:    6402        .d      STR      r2,[r0,#0x40]
;;;75     
;;;76         if (UART_InitStruct->dmaEn == UART_DMA_ENABLE)
        0x0020816c:    8a0a        ..      LDRH     r2,[r1,#0x10]
        0x0020816e:    2a08        .*      CMP      r2,#8
        0x00208170:    d11a        ..      BNE      0x2081a8 ; UART_Init + 192
;;;77         {
;;;78             /* Config UART Tx dma parameter */
;;;79             if (UART_InitStruct->TxDmaEn != DISABLE)
        0x00208172:    8aca        ..      LDRH     r2,[r1,#0x16]
        0x00208174:    b152        R.      CBZ      r2,0x20818c ; UART_Init + 164
;;;80             {
;;;81                 /* Mask uart TX threshold value */
;;;82                 UARTx->MISCR &= ~(0x1f << 3);
        0x00208176:    6a82        .j      LDR      r2,[r0,#0x28]
        0x00208178:    f02202f8    "...    BIC      r2,r2,#0xf8
        0x0020817c:    6282        .b      STR      r2,[r0,#0x28]
;;;83                 UARTx->MISCR |= ((UART_InitStruct->TxWaterlevel) << 3) | BIT(1);
        0x0020817e:    6a82        .j      LDR      r2,[r0,#0x28]
        0x00208180:    7d0b        .}      LDRB     r3,[r1,#0x14]
        0x00208182:    2402        .$      MOVS     r4,#2
        0x00208184:    ea4403c3    D...    ORR      r3,r4,r3,LSL #3
        0x00208188:    431a        .C      ORRS     r2,r2,r3
        0x0020818a:    6282        .b      STR      r2,[r0,#0x28]
;;;84             }
;;;85             /* Config UART Rx dma parameter */
;;;86             if (UART_InitStruct->RxDmaEn != DISABLE)
        0x0020818c:    8b0a        ..      LDRH     r2,[r1,#0x18]
        0x0020818e:    2a00        .*      CMP      r2,#0
        0x00208190:    d00a        ..      BEQ      0x2081a8 ; UART_Init + 192
;;;87             {
;;;88                 /* Mask uart RX threshold value */
;;;89                 UARTx->MISCR &= ~(0x3f << 8);
        0x00208192:    6a82        .j      LDR      r2,[r0,#0x28]
        0x00208194:    f422527c    ".|R    BIC      r2,r2,#0x3f00
        0x00208198:    6282        .b      STR      r2,[r0,#0x28]
;;;90                 UARTx->MISCR |= (UART_InitStruct->RxWaterlevel << 8) | BIT(2);
        0x0020819a:    6a82        .j      LDR      r2,[r0,#0x28]
        0x0020819c:    7d49        I}      LDRB     r1,[r1,#0x15]
        0x0020819e:    2304        .#      MOVS     r3,#4
        0x002081a0:    ea432101    C..!    ORR      r1,r3,r1,LSL #8
        0x002081a4:    430a        .C      ORRS     r2,r2,r1
        0x002081a6:    6282        .b      STR      r2,[r0,#0x28]
;;;91             }
;;;92         }
;;;93     
;;;94         return;
;;;95     }
        0x002081a8:    bd10        ..      POP      {r4,pc}
    UART_DeInit
        0x002081aa:    4942        BI      LDR      r1,[pc,#264] ; [0x2082b4] = 0x40012000
        0x002081ac:    4288        .B      CMP      r0,r1
;;;96     
;;;97     /**
;;;98       * @brief  Deinitializes the UART peripheral registers to their default reset values(turn off UART clock).
;;;99       * @param  UARTx: selected UART peripheral.
;;;100      * @retval None
;;;101      */
;;;102    void UART_DeInit(UART_TypeDef *UARTx)
;;;103    {
        0x002081ae:    d103        ..      BNE      0x2081b8 ; UART_DeInit + 14
;;;104        assert_param(IS_UART_PERIPH(UARTx));
;;;105    
;;;106        if (UARTx == UART)
;;;107        {
;;;108            RCC_PeriphClockCmd(APBPeriph_UART0, APBPeriph_UART0_CLOCK, DISABLE);
        0x002081b0:    2200        ."      MOVS     r2,#0
        0x002081b2:    4941        AI      LDR      r1,[pc,#260] ; [0x2082b8] = 0x40000001
        0x002081b4:    4841        AH      LDR      r0,[pc,#260] ; [0x2082bc] = 0x8000001
        0x002081b6:    e00d        ..      B        0x2081d4 ; UART_DeInit + 42
;;;109        }
;;;110        else if (UARTx == UART1)
        0x002081b8:    4941        AI      LDR      r1,[pc,#260] ; [0x2082c0] = 0x40011000
        0x002081ba:    4288        .B      CMP      r0,r1
        0x002081bc:    d103        ..      BNE      0x2081c6 ; UART_DeInit + 28
;;;111        {
;;;112            RCC_PeriphClockCmd(APBPeriph_UART1, APBPeriph_UART1_CLOCK, DISABLE);
        0x002081be:    2200        ."      MOVS     r2,#0
        0x002081c0:    4940        @I      LDR      r1,[pc,#256] ; [0x2082c4] = 0x20001000
        0x002081c2:    1480        ..      ASRS     r0,r0,#18
        0x002081c4:    e006        ..      B        0x2081d4 ; UART_DeInit + 42
;;;113        }
;;;114        else if (UARTx == UART2)
        0x002081c6:    4940        @I      LDR      r1,[pc,#256] ; [0x2082c8] = 0x40024000
        0x002081c8:    4288        .B      CMP      r0,r1
        0x002081ca:    d105        ..      BNE      0x2081d8 ; UART_DeInit + 46
;;;115        {
;;;116            RCC_PeriphClockCmd(APBPeriph_UART2, APBPeriph_UART2_CLOCK, DISABLE);
        0x002081cc:    483b        ;H      LDR      r0,[pc,#236] ; [0x2082bc] = 0x8000001
        0x002081ce:    2200        ."      MOVS     r2,#0
        0x002081d0:    493e        >I      LDR      r1,[pc,#248] ; [0x2082cc] = 0x20000400
        0x002081d2:    1c40        @.      ADDS     r0,r0,#1
        0x002081d4:    f7ffbdde    ....    B.W      RCC_PeriphClockCmd ; 0x207d94
;;;117        }
;;;118        return;
;;;119    }
        0x002081d8:    4770        pG      BX       lr
    UART_StructInit
;;;120    
;;;121    /**
;;;122      * @brief  Fills each UART_InitStruct member with its default value.
;;;123      * @param  UART_InitStruct: pointer to an UART_InitTypeDef structure which will be initialized.
;;;124      * @retval None
;;;125      */
;;;126    void UART_StructInit(UART_InitTypeDef *UART_InitStruct)
;;;127    {
;;;128    		#if 0
;;;129        //115200 default
;;;130        UART_InitStruct->div            = 20;
;;;131        UART_InitStruct->ovsr           = 12;
;;;132        UART_InitStruct->ovsr_adj       = 0x252;
;;;133    	  #else
;;;134    	  //9600 bps
;;;135        UART_InitStruct->div            = 271;
        0x002081da:    f240110f    @...    MOV      r1,#0x10f
        0x002081de:    8041        A.      STRH     r1,[r0,#2]
;;;136        UART_InitStruct->ovsr           = 10;
        0x002081e0:    210a        .!      MOVS     r1,#0xa
        0x002081e2:    8081        ..      STRH     r1,[r0,#4]
;;;137        UART_InitStruct->ovsr_adj       = 0x24A;
        0x002081e4:    f240214a    @.J!    MOV      r1,#0x24a
        0x002081e8:    8001        ..      STRH     r1,[r0,#0]
;;;138    	
;;;139    		#endif
;;;140        UART_InitStruct->parity         = UART_PARITY_NO_PARTY;
        0x002081ea:    2100        .!      MOVS     r1,#0
        0x002081ec:    8101        ..      STRH     r1,[r0,#8]
;;;141        UART_InitStruct->stopBits       = UART_STOP_BITS_1;
        0x002081ee:    8141        A.      STRH     r1,[r0,#0xa]
;;;142        UART_InitStruct->wordLen        = UART_WROD_LENGTH_8BIT;
        0x002081f0:    2201        ."      MOVS     r2,#1
        0x002081f2:    80c2        ..      STRH     r2,[r0,#6]
;;;143        UART_InitStruct->dmaEn          = UART_DMA_DISABLE;
        0x002081f4:    8201        ..      STRH     r1,[r0,#0x10]
;;;144        UART_InitStruct->autoFlowCtrl   = UART_AUTO_FLOW_CTRL_DIS;
        0x002081f6:    8181        ..      STRH     r1,[r0,#0xc]
;;;145        UART_InitStruct->rxTriggerLevel = 16;                       //1~29
        0x002081f8:    2310        .#      MOVS     r3,#0x10
        0x002081fa:    81c3        ..      STRH     r3,[r0,#0xe]
;;;146        UART_InitStruct->idle_time      = UART_RX_IDLE_2BYTE;      //idle interrupt wait time
        0x002081fc:    8242        B.      STRH     r2,[r0,#0x12]
;;;147        UART_InitStruct->TxWaterlevel   = 15;     //Better to equal TX_FIFO_SIZE(16)- GDMA_MSize
        0x002081fe:    230f        .#      MOVS     r3,#0xf
        0x00208200:    7503        .u      STRB     r3,[r0,#0x14]
;;;148        UART_InitStruct->RxWaterlevel   = 1;      //Better to equal GDMA_MSize
        0x00208202:    7542        Bu      STRB     r2,[r0,#0x15]
;;;149        UART_InitStruct->TxDmaEn   = DISABLE;
        0x00208204:    82c1        ..      STRH     r1,[r0,#0x16]
;;;150        UART_InitStruct->RxDmaEn   = DISABLE;
        0x00208206:    8301        ..      STRH     r1,[r0,#0x18]
;;;151        return;
;;;152    }
        0x00208208:    4770        pG      BX       lr
    UART_ReceiveData
        0x0020820a:    e002        ..      B        0x208212 ; UART_ReceiveData + 8
        0x0020820c:    6a43        Cj      LDR      r3,[r0,#0x24]
        0x0020820e:    f8013b01    ...;    STRB     r3,[r1],#1
;;;153    
;;;154    /**
;;;155      * @brief  Receive data from rx FIFO.
;;;156      * @param  UARTx: selected UART peripheral.
;;;157      * @param[out]  outBuf: buffer to save data read from UART FIFO.
;;;158      * @param  count: number of data to be read.
;;;159      * @retval None
;;;160      */
;;;161    void UART_ReceiveData(UART_TypeDef *UARTx, uint8_t *outBuf, uint16_t count)
;;;162    {
;;;163        /* Check the parameters */
;;;164        assert_param(IS_UART_PERIPH(UARTx));
;;;165    
;;;166        while (count--)
        0x00208212:    1e52        R.      SUBS     r2,r2,#1
        0x00208214:    b292        ..      UXTH     r2,r2
        0x00208216:    d2f9        ..      BCS      0x20820c ; UART_ReceiveData + 2
;;;167        {
;;;168            *outBuf++ = (uint8_t)UARTx->RB_THR;
;;;169        }
;;;170    
;;;171        return;
;;;172    }
        0x00208218:    4770        pG      BX       lr
    UART_SendData
        0x0020821a:    e002        ..      B        0x208222 ; UART_SendData + 8
        0x0020821c:    f8113b01    ...;    LDRB     r3,[r1],#1
        0x00208220:    6243        Cb      STR      r3,[r0,#0x24]
;;;173    
;;;174    /**
;;;175      * @brief  Send data to tx FIFO.
;;;176      * @param  UARTx: selected UART peripheral.
;;;177      * @param  inBuf: buffer to be written to Tx FIFO.
;;;178      * @param  count: number of data to be written.
;;;179      * @retval None
;;;180      */
;;;181    void UART_SendData(UART_TypeDef *UARTx, const uint8_t *inBuf, uint16_t count)
;;;182    {
;;;183        /* Check the parameters */
;;;184        assert_param(IS_UART_PERIPH(UARTx));
;;;185    
;;;186        while (count--)
        0x00208222:    1e52        R.      SUBS     r2,r2,#1
        0x00208224:    b292        ..      UXTH     r2,r2
        0x00208226:    d2f9        ..      BCS      0x20821c ; UART_SendData + 2
;;;187        {
;;;188            UARTx->RB_THR = *inBuf++;
;;;189        }
;;;190    
;;;191        return;
;;;192    }
        0x00208228:    4770        pG      BX       lr
    UART_INTConfig
        0x0020822a:    060b        ..      LSLS     r3,r1,#24
;;;193    
;;;194    /**
;;;195      * @brief  Enables or disables the specified UART interrupts.
;;;196      * @param  UARTx: selected UARTx peripheral.
;;;197      * @param  UART_IT: specifies the UART interrupts sources to be enabled or disabled.
;;;198      *   This parameter can be any combination of the following values:
;;;199      *     @arg UART_INT_RD_AVA: enable Rx data avaliable interrupt.
;;;200      *     @arg UART_INT_FIFO_EMPTY: enable FIFO empty interrupt.
;;;201      *     @arg UART_INT_LINE_STS: enable line status interrupt.
;;;202      *     @arg UART_INT_MODEM_STS: enable modem status interrupt.
;;;203      * @param  NewState: new state of the specified UART interrupts.
;;;204      *   This parameter can be: ENABLE or DISABLE.
;;;205      * @retval None
;;;206      */
;;;207    void UART_INTConfig(UART_TypeDef *UARTx, uint32_t UART_IT, FunctionalState newState)
;;;208    {
        0x0020822c:    d50d        ..      BPL      0x20824a ; UART_INTConfig + 32
;;;209        /* Check the parameters */
;;;210        assert_param(IS_UART_PERIPH(UARTx));
;;;211        assert_param(IS_FUNCTIONAL_STATE(newState));
;;;212        assert_param(IS_UART_IT(UART_IT));
;;;213    
;;;214        if (UART_IT & UART_INT_IDLE)
;;;215        {
;;;216            if (newState == ENABLE)
        0x0020822e:    2a01        .*      CMP      r2,#1
        0x00208230:    d013        ..      BEQ      0x20825a ; UART_INTConfig + 48
;;;217            {
;;;218                UARTx->STSR  |= BIT3;
;;;219                UARTx->STSR  &= (~BIT3);
;;;220                UARTx->RXIDLE_INTCR |= BIT0;
;;;221                UARTx->RX_IDLE_INTTCR |= BIT31;
;;;222            }
;;;223            else
;;;224            {
;;;225                UARTx->RX_IDLE_INTTCR &= (~BIT31);
        0x00208232:    6c03        .l      LDR      r3,[r0,#0x40]
        0x00208234:    f0234300    #..C    BIC      r3,r3,#0x80000000
        0x00208238:    6403        .d      STR      r3,[r0,#0x40]
;;;226                UARTx->RX_IDLE_SR |= BIT0;
        0x0020823a:    6c43        Cl      LDR      r3,[r0,#0x44]
        0x0020823c:    f0430301    C...    ORR      r3,r3,#1
        0x00208240:    6443        Cd      STR      r3,[r0,#0x44]
;;;227                UARTx->RXIDLE_INTCR &= (~BIT0);
        0x00208242:    6c83        .l      LDR      r3,[r0,#0x48]
        0x00208244:    f0230301    #...    BIC      r3,r3,#1
        0x00208248:    6483        .d      STR      r3,[r0,#0x48]
;;;228            }
;;;229        }
;;;230        if (UART_IT & 0xf)
        0x0020824a:    070b        ..      LSLS     r3,r1,#28
        0x0020824c:    d004        ..      BEQ      0x208258 ; UART_INTConfig + 46
;;;231        {
;;;232            if (newState == ENABLE)
        0x0020824e:    2a01        .*      CMP      r2,#1
        0x00208250:    6842        Bh      LDR      r2,[r0,#4]
        0x00208252:    d013        ..      BEQ      0x20827c ; UART_INTConfig + 82
;;;233            {
;;;234                /* Enable the selected UARTx interrupts */
;;;235                UARTx->DLH_INTCR |= UART_IT;
;;;236            }
;;;237            else
;;;238            {
;;;239                /* Disable the selected UARTx interrupts */
;;;240                UARTx->DLH_INTCR &= (uint32_t)~UART_IT;
        0x00208254:    438a        .C      BICS     r2,r2,r1
        0x00208256:    6042        B`      STR      r2,[r0,#4]
;;;241            }
;;;242        }
;;;243        return;
;;;244    }
        0x00208258:    4770        pG      BX       lr
        0x0020825a:    6a03        .j      LDR      r3,[r0,#0x20]
        0x0020825c:    f0430308    C...    ORR      r3,r3,#8
        0x00208260:    6203        .b      STR      r3,[r0,#0x20]
        0x00208262:    6a03        .j      LDR      r3,[r0,#0x20]
        0x00208264:    f0230308    #...    BIC      r3,r3,#8
        0x00208268:    6203        .b      STR      r3,[r0,#0x20]
        0x0020826a:    6c83        .l      LDR      r3,[r0,#0x48]
        0x0020826c:    f0430301    C...    ORR      r3,r3,#1
        0x00208270:    6483        .d      STR      r3,[r0,#0x48]
        0x00208272:    6c03        .l      LDR      r3,[r0,#0x40]
        0x00208274:    f0434300    C..C    ORR      r3,r3,#0x80000000
        0x00208278:    6403        .d      STR      r3,[r0,#0x40]
        0x0020827a:    e7e6        ..      B        0x20824a ; UART_INTConfig + 32
        0x0020827c:    430a        .C      ORRS     r2,r2,r1
        0x0020827e:    e7ea        ..      B        0x208256 ; UART_INTConfig + 44
    UART_GetFlagState
;;;245    
;;;246    /**
;;;247      * @brief  Checks whether the specified UART flag is set or not.
;;;248      * @param  UARTx: selected UART peripheral.
;;;249      * @param  UART_FLAG: specifies the flag to check.
;;;250      *   This parameter can be one of the following values:
;;;251      *     @arg UART_FLAG_RX_DATA_RDY: rx data is avaliable.
;;;252      *     @arg UART_FLAG_RX_OVERRUN: rx overrun.
;;;253      *     @arg UART_FLAG_PARTY_ERR: parity error.
;;;254      *     @arg UART_FLAG_FRAME_ERR: UARTx frame error.
;;;255      *     @arg UART_FLAG_BREAK_ERR: UARTx break error.
;;;256      *     @arg UART_FLAG_THR_EMPTY: tx FIFO is empty.
;;;257      *     @arg UART_FLAG_THR_TSR_EMPTY: tx FIFO and tx shift reg are both empty.
;;;258      *     @arg UART_FLAG_RX_FIFO_ERR: rx FIFO error.
;;;259      *     @arg UART_FLAG_RX_IDLE.
;;;260      * @retval The new state of UART_FLAG (SET or RESET).
;;;261      */
;;;262    FlagStatus UART_GetFlagState(UART_TypeDef *UARTx, uint32_t UART_FLAG)
;;;263    {
        0x00208280:    4602        .F      MOV      r2,r0
        0x00208282:    2000        .       MOVS     r0,#0
        0x00208284:    f5b17f80    ....    CMP      r1,#0x100
;;; .\..\..\..\src\mcu\peripheral\rtl876x_uart.c (263)
        0x00208288:    d004        ..      BEQ      0x208294 ; UART_GetFlagState + 20
;;;264        FlagStatus bitstatus = RESET;
;;;265    
;;;266        /* Check the parameters */
;;;267        assert_param(IS_UART_PERIPH(UARTx));
;;;268        assert_param(IS_UART_GET_FLAG(UART_FLAG));
;;;269    
;;;270        if (UART_FLAG != UART_FLAG_RX_IDLE)
;;;271        {
;;;272            if (UARTx->LSR & UART_FLAG)
        0x0020828a:    6952        Ri      LDR      r2,[r2,#0x14]
        0x0020828c:    420a        .B      TST      r2,r1
        0x0020828e:    d000        ..      BEQ      0x208292 ; UART_GetFlagState + 18
;;;273            {
;;;274                bitstatus = SET;
        0x00208290:    2001        .       MOVS     r0,#1
        0x00208292:    4770        pG      BX       lr
;;;275            }
;;;276        }
;;;277        else
;;;278        {
;;;279            if (UARTx->RX_IDLE_SR & BIT(0))
        0x00208294:    6c51        Ql      LDR      r1,[r2,#0x44]
        0x00208296:    07c9        ..      LSLS     r1,r1,#31
        0x00208298:    d1fa        ..      BNE      0x208290 ; UART_GetFlagState + 16
;;;280            {
;;;281                bitstatus = SET;
;;;282            }
;;;283        }
;;;284        return bitstatus;
;;;285    
;;;286    }
        0x0020829a:    4770        pG      BX       lr
    UART_LoopBackCmd
;;;287    
;;;288    /**
;;;289      *@brief  UART loop back mode config.
;;;290      *@param  UARTx: selected UART peripheral.
;;;291      *@param  NewState: new state of the DMA Channelx.
;;;292      *   This parameter can be: ENABLE or DISABLE.
;;;293      *@retval None.
;;;294      */
;;;295    void UART_LoopBackCmd(UART_TypeDef *UARTx, FunctionalState NewState)
;;;296    {
;;;297        assert_param(IS_UART_PERIPH(UARTx));
;;;298    
;;;299        if (NewState == ENABLE)
        0x0020829c:    2901        .)      CMP      r1,#1
        0x0020829e:    6901        .i      LDR      r1,[r0,#0x10]
;;; .\..\..\..\src\mcu\peripheral\rtl876x_uart.c (296)
        0x002082a0:    d003        ..      BEQ      0x2082aa ; UART_LoopBackCmd + 14
        0x002082a2:    f0210110    !...    BIC      r1,r1,#0x10
;;;297        assert_param(IS_UART_PERIPH(UARTx));
;;;298    
;;;299        if (NewState == ENABLE)
;;;300        {
;;;301            UARTx->MCR |= BIT4;
        0x002082a6:    6101        .a      STR      r1,[r0,#0x10]
        0x002082a8:    4770        pG      BX       lr
        0x002082aa:    f0410110    A...    ORR      r1,r1,#0x10
        0x002082ae:    e7fa        ..      B        0x2082a6 ; UART_LoopBackCmd + 10
    $d
        0x002082b0:    f800ffff    ....    DCD    4160815103
        0x002082b4:    40012000    . .@    DCD    1073815552
        0x002082b8:    40000001    ...@    DCD    1073741825
        0x002082bc:    08000001    ....    DCD    134217729
        0x002082c0:    40011000    ...@    DCD    1073811456
        0x002082c4:    20001000    ...     DCD    536875008
        0x002082c8:    40024000    .@.@    DCD    1073889280
        0x002082cc:    20000400    ...     DCD    536871936
    $t
    .text
    GPIO_DeInit
;;; .\..\..\..\src\mcu\peripheral\rtl876x_gpio.c
;;;33         RCC_PeriphClockCmd(APBPeriph_GPIO, APBPeriph_GPIO_CLOCK, DISABLE);
        0x002082d0:    2200        ."      MOVS     r2,#0
        0x002082d2:    f04f5104    O..Q    MOV      r1,#0x21000000
        0x002082d6:    485d        ]H      LDR      r0,[pc,#372] ; [0x20844c] = 0xc000100
        0x002082d8:    f7ffbd5c    ..\.    B.W      RCC_PeriphClockCmd ; 0x207d94
    GPIO_Init
;;;34     }
;;;35     
;;;36     /**
;;;37       * @brief  Initializes the GPIO peripheral according to the specified
;;;38       *         parameters in the GPIO_InitStruct.
;;;39       * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
;;;40       *         contains the configuration information for the specified GPIO peripheral.
;;;41       * @retval None
;;;42       */
;;;43     void GPIO_Init(GPIO_InitTypeDef *GPIO_InitStruct)
;;;44     {
;;;45         /* Check the parameters */
;;;46         assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;47         assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;48         assert_param(IS_GPIOIT_LEVEL_TYPE(GPIO_InitStruct->GPIO_ITTrigger));
;;;49         assert_param(IS_GPIOIT_POLARITY_TYPE(GPIO_InitStruct->GPIO_ITPolarity));
;;;50         assert_param(IS_GPIOIT_DEBOUNCE_TYPE(GPIO_InitStruct->GPIO_ITDebounce));
;;;51     
;;;52         /* GPIO configure */
;;;53         if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
        0x002082dc:    7903        .y      LDRB     r3,[r0,#4]
        0x002082de:    495c        \I      LDR      r1,[pc,#368] ; [0x208450] = 0x40001000
        0x002082e0:    2b01        .+      CMP      r3,#1
        0x002082e2:    6802        .h      LDR      r2,[r0,#0]
        0x002082e4:    684b        Kh      LDR      r3,[r1,#4]
;;; .\..\..\..\src\mcu\peripheral\rtl876x_gpio.c (44)
        0x002082e6:    d030        0.      BEQ      0x20834a ; GPIO_Init + 110
;;;45         /* Check the parameters */
;;;46         assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;47         assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;48         assert_param(IS_GPIOIT_LEVEL_TYPE(GPIO_InitStruct->GPIO_ITTrigger));
;;;49         assert_param(IS_GPIOIT_POLARITY_TYPE(GPIO_InitStruct->GPIO_ITPolarity));
;;;50         assert_param(IS_GPIOIT_DEBOUNCE_TYPE(GPIO_InitStruct->GPIO_ITDebounce));
;;;51     
;;;52         /* GPIO configure */
;;;53         if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT)
;;;54         {
;;;55             GPIO->DATADIR |= GPIO_InitStruct->GPIO_Pin;
;;;56     
;;;57             if (GPIO_InitStruct->GPIO_ControlMode == GPIO_SOFTWARE_MODE)
;;;58             {
;;;59                 /* Config GPIO control software mode */
;;;60                 GPIO->DATASRC &= (~GPIO_InitStruct->GPIO_Pin);
;;;61             }
;;;62             else
;;;63             {
;;;64                 /* Config GPIO hardware control mode */
;;;65                 GPIO->DATASRC |= (GPIO_InitStruct->GPIO_Pin);
;;;66             }
;;;67     
;;;68         }
;;;69         else
;;;70         {
;;;71             /*Configure GPIO input mode */
;;;72             GPIO->DATADIR = GPIO->DATADIR & (~GPIO_InitStruct->GPIO_Pin);
        0x002082e8:    4393        .C      BICS     r3,r3,r2
        0x002082ea:    604b        K`      STR      r3,[r1,#4]
;;;73     
;;;74             if (GPIO_InitStruct->GPIO_ITCmd == ENABLE)
        0x002082ec:    7942        By      LDRB     r2,[r0,#5]
        0x002082ee:    2a01        .*      CMP      r2,#1
        0x002082f0:    d12a        *.      BNE      0x208348 ; GPIO_Init + 108
;;;75             {
;;;76     
;;;77                 GPIO->INTMASK = ~GPIO_Pin_All;
        0x002082f2:    2200        ."      MOVS     r2,#0
        0x002082f4:    634a        Jc      STR      r2,[r1,#0x34]
;;;78     
;;;79                 /* configure GPIO interrupt trigger type */
;;;80                 if (GPIO_InitStruct->GPIO_ITTrigger == GPIO_INT_Trigger_LEVEL)
        0x002082f6:    7982        .y      LDRB     r2,[r0,#6]
        0x002082f8:    b38a        ..      CBZ      r2,0x20835e ; GPIO_Init + 130
;;;81                 {
;;;82                     GPIO->INTTYPE = GPIO->INTTYPE & (~GPIO_InitStruct->GPIO_Pin);
;;;83     
;;;84                     /* Level-sensitive synchronization enable register */
;;;85                     GPIO->LSSYNC |= GPIO_InitStruct->GPIO_Pin;
;;;86                 }
;;;87                 else if (GPIO_InitStruct->GPIO_ITTrigger == GPIO_INT_Trigger_EDGE)
        0x002082fa:    2a01        .*      CMP      r2,#1
        0x002082fc:    d03d        =.      BEQ      0x20837a ; GPIO_Init + 158
;;;88                 {
;;;89                     GPIO->INTTYPE = (GPIO->INTTYPE & (~GPIO_InitStruct->GPIO_Pin))
;;;90                                     | GPIO_InitStruct->GPIO_Pin;
;;;91                 }
;;;92                 else
;;;93                 {
;;;94                     GPIO->INTBOTHEDGE |= GPIO_InitStruct->GPIO_Pin;
        0x002082fe:    6e8a        .n      LDR      r2,[r1,#0x68]
        0x00208300:    6803        .h      LDR      r3,[r0,#0]
        0x00208302:    431a        .C      ORRS     r2,r2,r3
        0x00208304:    668a        .f      STR      r2,[r1,#0x68]
;;;95                 }
;;;96     
;;;97                 /* configure Interrupt polarity register */
;;;98                 if (GPIO_InitStruct->GPIO_ITPolarity == GPIO_INT_POLARITY_ACTIVE_LOW)
        0x00208306:    79c2        .y      LDRB     r2,[r0,#7]
        0x00208308:    b352        R.      CBZ      r2,0x208360 ; GPIO_Init + 132
;;;99                 {
;;;100                    GPIO->INTPOLARITY = GPIO->INTPOLARITY & (~GPIO_InitStruct->GPIO_Pin);
;;;101                }
;;;102                else
;;;103                {
;;;104                    GPIO->INTPOLARITY = (GPIO->INTPOLARITY & (~GPIO_InitStruct->GPIO_Pin))
        0x0020830a:    6bcb        .k      LDR      r3,[r1,#0x3c]
        0x0020830c:    6802        .h      LDR      r2,[r0,#0]
        0x0020830e:    4393        .C      BICS     r3,r3,r2
        0x00208310:    4313        .C      ORRS     r3,r3,r2
        0x00208312:    63cb        .c      STR      r3,[r1,#0x3c]
;;;105                                        | GPIO_InitStruct->GPIO_Pin;
;;;106                }
;;;107                /* Configure Debounce enable register */
;;;108                if (GPIO_InitStruct->GPIO_ITDebounce == GPIO_INT_DEBOUNCE_DISABLE)
        0x00208314:    7a02        .z      LDRB     r2,[r0,#8]
        0x00208316:    b37a        z.      CBZ      r2,0x208378 ; GPIO_Init + 156
;;;109                {
;;;110                    GPIO->DEBOUNCE = GPIO->DEBOUNCE & (~GPIO_InitStruct->GPIO_Pin);
;;;111                }
;;;112                else
;;;113                {
;;;114                    GPIO->DEBOUNCE = (GPIO->DEBOUNCE & (~GPIO_InitStruct->GPIO_Pin))
        0x00208318:    6c8b        .l      LDR      r3,[r1,#0x48]
        0x0020831a:    6802        .h      LDR      r2,[r0,#0]
        0x0020831c:    4393        .C      BICS     r3,r3,r2
        0x0020831e:    4313        .C      ORRS     r3,r3,r2
        0x00208320:    648b        .d      STR      r3,[r1,#0x48]
;;;115                                     | GPIO_InitStruct->GPIO_Pin;
;;;116    
;;;117    #ifdef _IS_ASIC_
;;;118                    /* Config debounce time , default debounce DIV is 14*/
;;;119                    GPIO_DBCLK_DIV = (((0xd) << 8) | (1 << 12));
;;;120                    GPIO_DBCLK_DIV |= ((((GPIO_InitStruct->GPIO_DebounceTime) * (GPIO_CLOCK_SOURCE_KHZ) >>
;;;121                                         (14)) - 1) & 0xff);
;;;122    #else
;;;123                    /* Config debounce time , default debounce DIV is 13*/
;;;124                    GPIO_DBCLK_DIV = (((0x3) << 10) | (1 << 12));
        0x00208322:    f04f4180    O..A    MOV      r1,#0x40000000
        0x00208326:    f44f52e0    O..R    MOV      r2,#0x1c00
        0x0020832a:    f8c12344    ..D#    STR      r2,[r1,#0x344]
;;;125                    GPIO_DBCLK_DIV |= ((((GPIO_InitStruct->GPIO_DebounceTime) * (GPIO_CLOCK_SOURCE_KHZ) >>
        0x0020832e:    f8d12344    ..D#    LDR      r2,[r1,#0x344]
        0x00208332:    68c0        .h      LDR      r0,[r0,#0xc]
        0x00208334:    f6446320    D. c    MOV      r3,#0x4e20
        0x00208338:    4358        XC      MULS     r0,r3,r0
        0x0020833a:    23ff        .#      MOVS     r3,#0xff
        0x0020833c:    eb033050    ..P0    ADD      r0,r3,r0,LSR #13
        0x00208340:    b2c0        ..      UXTB     r0,r0
        0x00208342:    4302        .C      ORRS     r2,r2,r0
        0x00208344:    f8c12344    ..D#    STR      r2,[r1,#0x344]
;;;126                                         (13)) - 1) & 0xff);
;;;127    #endif
;;;128                }
;;;129    
;;;130                /* Configure Interrupt enable register */
;;;131                //GPIO->INTEN |= GPIO_InitStruct->GPIO_Pin;
;;;132            }
;;;133        }
;;;134    }
        0x00208348:    4770        pG      BX       lr
        0x0020834a:    4313        .C      ORRS     r3,r3,r2
        0x0020834c:    604b        K`      STR      r3,[r1,#4]
        0x0020834e:    7a42        Bz      LDRB     r2,[r0,#9]
        0x00208350:    2a00        .*      CMP      r2,#0
        0x00208352:    688a        .h      LDR      r2,[r1,#8]
        0x00208354:    6800        .h      LDR      r0,[r0,#0]
        0x00208356:    d004        ..      BEQ      0x208362 ; GPIO_Init + 134
        0x00208358:    4302        .C      ORRS     r2,r2,r0
        0x0020835a:    608a        .`      STR      r2,[r1,#8]
        0x0020835c:    4770        pG      BX       lr
        0x0020835e:    e002        ..      B        0x208366 ; GPIO_Init + 138
        0x00208360:    e011        ..      B        0x208386 ; GPIO_Init + 170
        0x00208362:    4382        .C      BICS     r2,r2,r0
        0x00208364:    e7f9        ..      B        0x20835a ; GPIO_Init + 126
        0x00208366:    6b8a        .k      LDR      r2,[r1,#0x38]
        0x00208368:    6803        .h      LDR      r3,[r0,#0]
        0x0020836a:    439a        .C      BICS     r2,r2,r3
        0x0020836c:    638a        .c      STR      r2,[r1,#0x38]
        0x0020836e:    6e0a        .n      LDR      r2,[r1,#0x60]
        0x00208370:    6803        .h      LDR      r3,[r0,#0]
        0x00208372:    431a        .C      ORRS     r2,r2,r3
        0x00208374:    660a        .f      STR      r2,[r1,#0x60]
        0x00208376:    e7c6        ..      B        0x208306 ; GPIO_Init + 42
        0x00208378:    e00a        ..      B        0x208390 ; GPIO_Init + 180
        0x0020837a:    6b8b        .k      LDR      r3,[r1,#0x38]
        0x0020837c:    6802        .h      LDR      r2,[r0,#0]
        0x0020837e:    4393        .C      BICS     r3,r3,r2
        0x00208380:    4313        .C      ORRS     r3,r3,r2
        0x00208382:    638b        .c      STR      r3,[r1,#0x38]
        0x00208384:    e7bf        ..      B        0x208306 ; GPIO_Init + 42
        0x00208386:    6bca        .k      LDR      r2,[r1,#0x3c]
        0x00208388:    6803        .h      LDR      r3,[r0,#0]
        0x0020838a:    439a        .C      BICS     r2,r2,r3
        0x0020838c:    63ca        .c      STR      r2,[r1,#0x3c]
        0x0020838e:    e7c1        ..      B        0x208314 ; GPIO_Init + 56
        0x00208390:    6c8a        .l      LDR      r2,[r1,#0x48]
        0x00208392:    6800        .h      LDR      r0,[r0,#0]
        0x00208394:    4382        .C      BICS     r2,r2,r0
        0x00208396:    648a        .d      STR      r2,[r1,#0x48]
        0x00208398:    e7e0        ..      B        0x20835c ; GPIO_Init + 128
    GPIO_StructInit
;;;135    
;;;136    /**
;;;137      * @brief    Fills each GPIO_InitStruct member with its default value.
;;;138      * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
;;;139      *    be initialized.
;;;140      * @retval None
;;;141      */
;;;142    void GPIO_StructInit(GPIO_InitTypeDef *GPIO_InitStruct)
;;;143    {
;;;144        /* Reset GPIO init structure parameters values */
;;;145        GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
        0x0020839a:    f04f31ff    O..1    MOV      r1,#0xffffffff
;;;146        GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
        0x0020839e:    6001        .`      STR      r1,[r0,#0]
        0x002083a0:    2100        .!      MOVS     r1,#0
        0x002083a2:    7101        .q      STRB     r1,[r0,#4]
;;;147        GPIO_InitStruct->GPIO_ITCmd = DISABLE;
        0x002083a4:    7141        Aq      STRB     r1,[r0,#5]
;;;148        GPIO_InitStruct->GPIO_ITTrigger = GPIO_INT_Trigger_LEVEL;
        0x002083a6:    7181        .q      STRB     r1,[r0,#6]
;;;149        GPIO_InitStruct->GPIO_ITPolarity = GPIO_INT_POLARITY_ACTIVE_LOW;
        0x002083a8:    71c1        .q      STRB     r1,[r0,#7]
;;;150        GPIO_InitStruct->GPIO_ITDebounce = GPIO_INT_DEBOUNCE_DISABLE;
        0x002083aa:    7201        .r      STRB     r1,[r0,#8]
;;;151        GPIO_InitStruct->GPIO_ControlMode = GPIO_SOFTWARE_MODE;
        0x002083ac:    7241        Ar      STRB     r1,[r0,#9]
;;;152        GPIO_InitStruct->GPIO_DebounceTime = 20;                 /* ms , can be 1~64 ms */
        0x002083ae:    2114        .!      MOVS     r1,#0x14
        0x002083b0:    60c1        .`      STR      r1,[r0,#0xc]
;;;153    }
        0x002083b2:    e7d3        ..      B        0x20835c ; GPIO_Init + 128
    GPIO_INTConfig
;;;154    
;;;155    /**
;;;156      * @brief enable the specified GPIO interrupt.
;;;157      * @param  GPIO_Pin_x: where x can be 0 or 31.
;;;158      * @retval None
;;;159      */
;;;160    void GPIO_INTConfig(uint32_t GPIO_Pin, FunctionalState NewState)
;;;161    {
;;;162        /* Check the parameters */
;;;163        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;164        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;165    
;;;166        if (NewState != DISABLE)
;;;167        {
;;;168            /* Enable the selected GPIO pin interrupts */
;;;169            GPIO->INTEN |= GPIO_Pin;
        0x002083b4:    4a26        &J      LDR      r2,[pc,#152] ; [0x208450] = 0x40001000
        0x002083b6:    2900        .)      CMP      r1,#0
        0x002083b8:    6b11        .k      LDR      r1,[r2,#0x30]
;;; .\..\..\..\src\mcu\peripheral\rtl876x_gpio.c (161)
        0x002083ba:    d001        ..      BEQ      0x2083c0 ; GPIO_INTConfig + 12
;;;162        /* Check the parameters */
;;;163        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;164        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;165    
;;;166        if (NewState != DISABLE)
;;;167        {
;;;168            /* Enable the selected GPIO pin interrupts */
;;;169            GPIO->INTEN |= GPIO_Pin;
        0x002083bc:    4301        .C      ORRS     r1,r1,r0
        0x002083be:    e000        ..      B        0x2083c2 ; GPIO_INTConfig + 14
        0x002083c0:    4381        .C      BICS     r1,r1,r0
        0x002083c2:    6311        .c      STR      r1,[r2,#0x30]
;;;170        }
;;;171        else
;;;172        {
;;;173            /* Disable the selected GPIO pin interrupts */
;;;174            GPIO->INTEN &= ~GPIO_Pin;
;;;175        }
;;;176    }
        0x002083c4:    e7ca        ..      B        0x20835c ; GPIO_Init + 128
    GPIO_ClearINTPendingBit
;;;177    
;;;178    /**
;;;179      * @brief clear the specified GPIO interrupt.
;;;180      * @param  GPIO_Pin_x: where x can be 0 or 31.
;;;181      * @retval None
;;;182      */
;;;183    void GPIO_ClearINTPendingBit(uint32_t GPIO_Pin)
;;;184    {
;;;185        /* Check the parameters */
;;;186        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;187    
;;;188        GPIO->INTCLR = GPIO_Pin;
        0x002083c6:    4922        "I      LDR      r1,[pc,#136] ; [0x208450] = 0x40001000
        0x002083c8:    64c8        .d      STR      r0,[r1,#0x4c]
;;;189    }
        0x002083ca:    e7c7        ..      B        0x20835c ; GPIO_Init + 128
    GPIO_MaskINTConfig
;;;190    
;;;191    /**
;;;192      * @brief mask the specified GPIO interrupt.
;;;193      * @param  GPIO_Pin_x: where x can be 0 or 31.
;;;194      * @retval None
;;;195      */
;;;196    void GPIO_MaskINTConfig(uint32_t GPIO_Pin, FunctionalState NewState)
;;;197    {
;;;198        /* Check the parameters */
;;;199        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;200        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;201    
;;;202        if (NewState != DISABLE)
;;;203        {
;;;204            GPIO->INTMASK |= GPIO_Pin;
        0x002083cc:    4a20         J      LDR      r2,[pc,#128] ; [0x208450] = 0x40001000
        0x002083ce:    2900        .)      CMP      r1,#0
        0x002083d0:    6b51        Qk      LDR      r1,[r2,#0x34]
;;; .\..\..\..\src\mcu\peripheral\rtl876x_gpio.c (197)
        0x002083d2:    d001        ..      BEQ      0x2083d8 ; GPIO_MaskINTConfig + 12
;;;198        /* Check the parameters */
;;;199        assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;200        assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;201    
;;;202        if (NewState != DISABLE)
;;;203        {
;;;204            GPIO->INTMASK |= GPIO_Pin;
        0x002083d4:    4301        .C      ORRS     r1,r1,r0
        0x002083d6:    e000        ..      B        0x2083da ; GPIO_MaskINTConfig + 14
        0x002083d8:    4381        .C      BICS     r1,r1,r0
        0x002083da:    6351        Qc      STR      r1,[r2,#0x34]
;;;205        }
;;;206        else
;;;207        {
;;;208            GPIO->INTMASK &= ~(GPIO_Pin);
;;;209        }
;;;210    }
        0x002083dc:    e7be        ..      B        0x20835c ; GPIO_Init + 128
    GPIO_GetPin
        0x002083de:    2101        .!      MOVS     r1,#1
        0x002083e0:    281e        .(      CMP      r0,#0x1e
;;;211    
;;;212    /**
;;;213      * @brief get the specified GPIO pin.
;;;214      * @param  Pin_num: This parameter is from ADC_0 to P4_1, please refer to rtl876x.h "Pin_Number" part.
;;;215      * @retval  GPIO pin for GPIO initialization.
;;;216      */
;;;217    uint32_t GPIO_GetPin(uint8_t Pin_num)
;;;218    {
        0x002083e2:    d90e        ..      BLS      0x208402 ; GPIO_GetPin + 36
;;;219        /* Check the parameters */
;;;220        assert_param(IS_PIN_NUM(Pin_num));
;;;221    
;;;222        if (Pin_num <= P3_6)
;;;223        {
;;;224            return  BIT(Pin_num);
;;;225        }
;;;226        else if ((Pin_num <= P4_3) && (Pin_num >= P4_0))
        0x002083e4:    f1a00220    .. .    SUB      r2,r0,#0x20
        0x002083e8:    2a03        .*      CMP      r2,#3
        0x002083ea:    d801        ..      BHI      0x2083f0 ; GPIO_GetPin + 18
        0x002083ec:    1f00        ..      SUBS     r0,r0,#4
;;;227        {
;;;228            return BIT(Pin_num - 4);
        0x002083ee:    e008        ..      B        0x208402 ; GPIO_GetPin + 36
;;;229        }
;;;230        else if ((Pin_num == H_0) || (Pin_num == H_1) || (Pin_num == H_2))
        0x002083f0:    2824        $(      CMP      r0,#0x24
        0x002083f2:    d005        ..      BEQ      0x208400 ; GPIO_GetPin + 34
        0x002083f4:    2825        %(      CMP      r0,#0x25
        0x002083f6:    d003        ..      BEQ      0x208400 ; GPIO_GetPin + 34
        0x002083f8:    2826        &(      CMP      r0,#0x26
        0x002083fa:    d001        ..      BEQ      0x208400 ; GPIO_GetPin + 34
        0x002083fc:    20ff        .       MOVS     r0,#0xff
        0x002083fe:    e7ad        ..      B        0x20835c ; GPIO_Init + 128
        0x00208400:    380b        .8      SUBS     r0,r0,#0xb
;;;231        {
;;;232            return BIT(Pin_num - 11);
        0x00208402:    fa01f000    ....    LSL      r0,r1,r0
;;;233        }
;;;234    
;;;235        return 0xFF;
;;;236    }
        0x00208406:    e7a9        ..      B        0x20835c ; GPIO_Init + 128
    GPIO_GetNum
;;;237    
;;;238    /**
;;;239      * @brief get the specified GPIO pin number.
;;;240      * @param  Pin_num: This parameter is from ADC_0 to P4_1, please refer to rtl876x.h "Pin_Number" part.
;;;241      * @retval  GPIO pin number.
;;;242      */
;;;243    uint8_t GPIO_GetNum(uint8_t Pin_num)
;;;244    {
;;;245        /* Check the parameters */
;;;246        assert_param(IS_PIN_NUM(Pin_num));
;;;247    
;;;248        if (Pin_num <= P3_6)
        0x00208408:    281e        .(      CMP      r0,#0x1e
;;; .\..\..\..\src\mcu\peripheral\rtl876x_gpio.c (244)
        0x0020840a:    d9a7        ..      BLS      0x20835c ; GPIO_Init + 128
;;;245        /* Check the parameters */
;;;246        assert_param(IS_PIN_NUM(Pin_num));
;;;247    
;;;248        if (Pin_num <= P3_6)
;;;249        {
;;;250            return (Pin_num);
;;;251        }
;;;252        else if ((Pin_num <= P4_3) && (Pin_num >= P4_0))
        0x0020840c:    f1a00120    .. .    SUB      r1,r0,#0x20
        0x00208410:    2903        .)      CMP      r1,#3
        0x00208412:    d801        ..      BHI      0x208418 ; GPIO_GetNum + 16
        0x00208414:    1f00        ..      SUBS     r0,r0,#4
;;;253        {
;;;254            return (Pin_num - 4);
        0x00208416:    e008        ..      B        0x20842a ; GPIO_GetNum + 34
;;;255        }
;;;256        else if ((Pin_num == H_0) || (Pin_num == H_1) || (Pin_num == H_2))
        0x00208418:    2824        $(      CMP      r0,#0x24
        0x0020841a:    d005        ..      BEQ      0x208428 ; GPIO_GetNum + 32
        0x0020841c:    2825        %(      CMP      r0,#0x25
        0x0020841e:    d003        ..      BEQ      0x208428 ; GPIO_GetNum + 32
        0x00208420:    2826        &(      CMP      r0,#0x26
        0x00208422:    d001        ..      BEQ      0x208428 ; GPIO_GetNum + 32
        0x00208424:    20ff        .       MOVS     r0,#0xff
        0x00208426:    e799        ..      B        0x20835c ; GPIO_Init + 128
        0x00208428:    380b        .8      SUBS     r0,r0,#0xb
;;;257        {
;;;258            return (Pin_num - 11);
        0x0020842a:    b2c0        ..      UXTB     r0,r0
;;;259        }
;;;260    
;;;261        return 0xFF;
;;;262    }
        0x0020842c:    e796        ..      B        0x20835c ; GPIO_Init + 128
    GPIO_DBClkCmd
        0x0020842e:    f04f4180    O..A    MOV      r1,#0x40000000
        0x00208432:    2800        .(      CMP      r0,#0
        0x00208434:    f8d10344    ..D.    LDR      r0,[r1,#0x344]
;;;263    
;;;264    /**
;;;265      * @brief get the specified GPIO pin number.
;;;266      * @param  Pin_num: This parameter is from ADC_0 to P4_1, please refer to rtl876x.h "Pin_Number" part.
;;;267      * @retval  GPIO pin number.
;;;268      */
;;;269    void GPIO_DBClkCmd(FunctionalState NewState)
;;;270    {
        0x00208438:    d002        ..      BEQ      0x208440 ; GPIO_DBClkCmd + 18
;;;271        if (NewState != DISABLE)
;;;272        {
;;;273            GPIO_DBCLK_DIV |= BIT12;
        0x0020843a:    f4405080    @..P    ORR      r0,r0,#0x1000
        0x0020843e:    e001        ..      B        0x208444 ; GPIO_DBClkCmd + 22
        0x00208440:    f4205080     ..P    BIC      r0,r0,#0x1000
        0x00208444:    f8c10344    ..D.    STR      r0,[r1,#0x344]
;;;274        }
;;;275        else
;;;276        {
;;;277            GPIO_DBCLK_DIV &= ~BIT12;
;;;278        }
;;;279    }
        0x00208448:    e788        ..      B        0x20835c ; GPIO_Init + 128
    $d
        0x0020844a:    0000        ..      DCW    0
        0x0020844c:    0c000100    ....    DCD    201326848
        0x00208450:    40001000    ...@    DCD    1073745920
    $t
    .text
    simp_ble_client_start_discovery
;;; .\..\..\..\src\ble\profile\client\simple_ble_client.c
;;;45     {
        0x00208454:    b510        ..      PUSH     {r4,lr}
        0x00208456:    4604        .F      MOV      r4,r0
;;;46         PROFILE_PRINT_INFO0("simp_ble_client_start_discovery");
        0x00208458:    2200        ."      MOVS     r2,#0
        0x0020845a:    49f9        .I      LDR      r1,[pc,#996] ; [0x208840] = 0x88000e8
        0x0020845c:    48f9        .H      LDR      r0,[pc,#996] ; [0x208844] = 0x21103302
        0x0020845e:    f5fffafe    ....    BL       log_buffer ; 0x7a5e
;;;47         if (conn_id >= simp_link_num)
        0x00208462:    48f9        .H      LDR      r0,[pc,#996] ; [0x208848] = 0x20d0a8
        0x00208464:    7801        .x      LDRB     r1,[r0,#0]
        0x00208466:    428c        .B      CMP      r4,r1
        0x00208468:    d308        ..      BCC      0x20847c ; simp_ble_client_start_discovery + 40
;;;48         {
;;;49             PROFILE_PRINT_ERROR1("simp_ble_client_start_discovery: failed invalid conn_id %d", conn_id);
        0x0020846a:    49f5        .I      LDR      r1,[pc,#980] ; [0x208840] = 0x88000e8
        0x0020846c:    48f5        .H      LDR      r0,[pc,#980] ; [0x208844] = 0x21103302
        0x0020846e:    4623        #F      MOV      r3,r4
        0x00208470:    2201        ."      MOVS     r2,#1
        0x00208472:    3124        $1      ADDS     r1,r1,#0x24
        0x00208474:    1e80        ..      SUBS     r0,r0,#2
        0x00208476:    f5fffaf2    ....    BL       log_buffer ; 0x7a5e
;;;50             return false;
        0x0020847a:    e00d        ..      B        0x208498 ; simp_ble_client_start_discovery + 68
;;;51         }
;;;52         /* First clear handle cache. */
;;;53         //memset(&simp_table[conn_id], 0, sizeof(T_SIMP_LINK));
;;;54         simp_table[conn_id].disc_state = DISC_SIMP_START;
        0x0020847c:    6880        .h      LDR      r0,[r0,#8]
        0x0020847e:    eb0402c4    ....    ADD      r2,r4,r4,LSL #3
        0x00208482:    2101        .!      MOVS     r1,#1
        0x00208484:    f8001012    ....    STRB     r1,[r0,r2,LSL #1]
;;;55         if (client_by_uuid_srv_discovery(conn_id, simp_client,
        0x00208488:    48f0        .H      LDR      r0,[pc,#960] ; [0x20884c] = 0x20d028
        0x0020848a:    f64f72e0    O..r    MOV      r2,#0xffe0
        0x0020848e:    7801        .x      LDRB     r1,[r0,#0]
        0x00208490:    4620         F      MOV      r0,r4
        0x00208492:    f646f849    F.I.    BL       client_by_uuid_srv_discovery ; 0x4e528
        0x00208496:    b108        ..      CBZ      r0,0x20849c ; simp_ble_client_start_discovery + 72
        0x00208498:    2000        .       MOVS     r0,#0
        0x0020849a:    bd10        ..      POP      {r4,pc}
;;;56                                          GATT_UUID_SIMPLE_PROFILE) == GAP_CAUSE_SUCCESS)
;;;57         {
;;;58             return true;
        0x0020849c:    2001        .       MOVS     r0,#1
;;;59         }
;;;60         return false;
;;;61     }
        0x0020849e:    bd10        ..      POP      {r4,pc}
    simp_ble_client_read_by_handle
;;;62     
;;;63     /**
;;;64       * @brief  Used by application, to read data from server by using handles.
;;;65       * @param[in]  conn_id connection ID.
;;;66       * @param[in]  read_type one of characteristic that has the readable property.
;;;67       * @retval true send request to upper stack success.
;;;68       * @retval false send request to upper stack failed.
;;;69       */
;;;70     bool simp_ble_client_read_by_handle(uint8_t conn_id, T_SIMP_READ_TYPE read_type)
;;;71     {
        0x002084a0:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x002084a4:    4ae8        .J      LDR      r2,[pc,#928] ; [0x208848] = 0x20d0a8
;;; .\..\..\..\src\ble\profile\client\simple_ble_client.c (71)
        0x002084a6:    4606        .F      MOV      r6,r0
        0x002084a8:    2400        .$      MOVS     r4,#0
        0x002084aa:    7810        .x      LDRB     r0,[r2,#0]
        0x002084ac:    4286        .B      CMP      r6,r0
        0x002084ae:    d306        ..      BCC      0x2084be ; simp_ble_client_read_by_handle + 30
;;;72         bool hdl_valid = false;
;;;73         uint16_t  handle;
;;;74         if (conn_id >= simp_link_num)
;;;75         {
;;;76             PROFILE_PRINT_ERROR1("simp_ble_client_read_by_handle: failed invalid conn_id %d", conn_id);
        0x002084b0:    49e3        .I      LDR      r1,[pc,#908] ; [0x208840] = 0x88000e8
        0x002084b2:    48e4        .H      LDR      r0,[pc,#912] ; [0x208844] = 0x21103302
        0x002084b4:    2201        ."      MOVS     r2,#1
        0x002084b6:    3164        d1      ADDS     r1,r1,#0x64
        0x002084b8:    4633        3F      MOV      r3,r6
        0x002084ba:    1e80        ..      SUBS     r0,r0,#2
        0x002084bc:    e00b        ..      B        0x2084d6 ; simp_ble_client_read_by_handle + 54
        0x002084be:    48e4        .H      LDR      r0,[pc,#912] ; [0x208850] = 0x21103002
        0x002084c0:    eb0603c6    ....    ADD      r3,r6,r6,LSL #3
        0x002084c4:    b151        Q.      CBZ      r1,0x2084dc ; simp_ble_client_read_by_handle + 60
        0x002084c6:    2901        .)      CMP      r1,#1
        0x002084c8:    d00d        ..      BEQ      0x2084e6 ; simp_ble_client_read_by_handle + 70
        0x002084ca:    2902        .)      CMP      r1,#2
        0x002084cc:    d010        ..      BEQ      0x2084f0 ; simp_ble_client_read_by_handle + 80
        0x002084ce:    460b        .F      MOV      r3,r1
        0x002084d0:    49db        .I      LDR      r1,[pc,#876] ; [0x208840] = 0x88000e8
        0x002084d2:    2201        ."      MOVS     r2,#1
        0x002084d4:    31a4        .1      ADDS     r1,r1,#0xa4
        0x002084d6:    f5fffac2    ....    BL       log_buffer ; 0x7a5e
        0x002084da:    e02c        ,.      B        0x208536 ; simp_ble_client_read_by_handle + 150
;;;77             return false;
;;;78         }
;;;79     
;;;80         switch (read_type)
;;;81         {
;;;82         case SIMP_READ_V1_READ:
;;;83             if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V1_READ])
        0x002084dc:    6892        .h      LDR      r2,[r2,#8]
        0x002084de:    eb020243    ..C.    ADD      r2,r2,r3,LSL #1
        0x002084e2:    88d2        ..      LDRH     r2,[r2,#6]
        0x002084e4:    e008        ..      B        0x2084f8 ; simp_ble_client_read_by_handle + 88
;;;84             {
;;;85                 handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V1_READ];
;;;86                 hdl_valid = true;
;;;87             }
;;;88             break;
;;;89         case SIMP_READ_V3_NOTIFY_CCCD:
;;;90             if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD])
        0x002084e6:    6892        .h      LDR      r2,[r2,#8]
        0x002084e8:    eb020243    ..C.    ADD      r2,r2,r3,LSL #1
        0x002084ec:    8992        ..      LDRH     r2,[r2,#0xc]
        0x002084ee:    e003        ..      B        0x2084f8 ; simp_ble_client_read_by_handle + 88
;;;91             {
;;;92                 handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD];
;;;93                 hdl_valid = true;
;;;94             }
;;;95             break;
;;;96         case SIMP_READ_V4_INDICATE_CCCD:
;;;97             if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD])
        0x002084f0:    6892        .h      LDR      r2,[r2,#8]
        0x002084f2:    eb020243    ..C.    ADD      r2,r2,r3,LSL #1
        0x002084f6:    8a12        ..      LDRH     r2,[r2,#0x10]
        0x002084f8:    b10a        ..      CBZ      r2,0x2084fe ; simp_ble_client_read_by_handle + 94
;;;98             {
;;;99                 handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD];
        0x002084fa:    4615        .F      MOV      r5,r2
;;;100                hdl_valid = true;
        0x002084fc:    2401        .$      MOVS     r4,#1
;;;101            }
;;;102            break;
;;;103    
;;;104        default:
;;;105    		APP_PRINT_INFO1("vsop----read_by_handle------return=%d",read_type); 		
;;;106            return false;
;;;107        }
;;;108    	APP_PRINT_INFO1("vsop----read_by_handle------read_type=%d",read_type); 
        0x002084fe:    460b        .F      MOV      r3,r1
        0x00208500:    49cf        .I      LDR      r1,[pc,#828] ; [0x208840] = 0x88000e8
        0x00208502:    2201        ."      MOVS     r2,#1
        0x00208504:    31d0        .1      ADDS     r1,r1,#0xd0
        0x00208506:    4607        .F      MOV      r7,r0
        0x00208508:    f5fffaa9    ....    BL       log_buffer ; 0x7a5e
;;;109    
;;;110        if (hdl_valid)
        0x0020850c:    b16c        l.      CBZ      r4,0x20852a ; simp_ble_client_read_by_handle + 138
;;;111        {
;;;112        	APP_PRINT_INFO1("vsop----read_by_handle------hdl_valid=%d",hdl_valid); 
        0x0020850e:    49cc        .I      LDR      r1,[pc,#816] ; [0x208840] = 0x88000e8
        0x00208510:    4623        #F      MOV      r3,r4
        0x00208512:    2201        ."      MOVS     r2,#1
        0x00208514:    31fc        .1      ADDS     r1,r1,#0xfc
        0x00208516:    4638        8F      MOV      r0,r7
        0x00208518:    f5fffaa1    ....    BL       log_buffer ; 0x7a5e
;;;113            if (client_attr_read(conn_id, simp_client, handle) == GAP_CAUSE_SUCCESS)
        0x0020851c:    48cb        .H      LDR      r0,[pc,#812] ; [0x20884c] = 0x20d028
        0x0020851e:    462a        *F      MOV      r2,r5
        0x00208520:    7801        .x      LDRB     r1,[r0,#0]
        0x00208522:    4630        0F      MOV      r0,r6
        0x00208524:    f646f8c5    F...    BL       client_attr_read ; 0x4e6b2
        0x00208528:    b140        @.      CBZ      r0,0x20853c ; simp_ble_client_read_by_handle + 156
        0x0020852a:    48c9        .H      LDR      r0,[pc,#804] ; [0x208850] = 0x21103002
        0x0020852c:    2200        ."      MOVS     r2,#0
        0x0020852e:    49c9        .I      LDR      r1,[pc,#804] ; [0x208854] = 0x880023c
        0x00208530:    1e40        @.      SUBS     r0,r0,#1
        0x00208532:    f5fffa94    ....    BL       log_buffer ; 0x7a5e
        0x00208536:    2000        .       MOVS     r0,#0
        0x00208538:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;114            {
;;;115               	APP_PRINT_INFO1("vsop----read_by_handle------okkkkk=%d",hdl_valid); 
        0x0020853c:    49c5        .I      LDR      r1,[pc,#788] ; [0x208854] = 0x880023c
        0x0020853e:    4623        #F      MOV      r3,r4
        0x00208540:    2201        ."      MOVS     r2,#1
        0x00208542:    392c        ,9      SUBS     r1,r1,#0x2c
        0x00208544:    4638        8F      MOV      r0,r7
        0x00208546:    f5fffa8a    ....    BL       log_buffer ; 0x7a5e
;;;116                return true;
        0x0020854a:    2001        .       MOVS     r0,#1
;;;117            }
;;;118        }
;;;119    
;;;120        APP_PRINT_WARN0("simp_ble_client_read_by_handle: Request fail! Please check!");
;;;121        return false;
;;;122    }
        0x0020854c:    e7f4        ..      B        0x208538 ; simp_ble_client_read_by_handle + 152
    simp_ble_client_read_by_uuid
;;;123    
;;;124    /**
;;;125      * @brief  Used by application, to read data from server by using UUIDs.
;;;126      * @param[in]  conn_id connection ID.
;;;127      * @param[in]  read_type one of characteristic that has the readable property.
;;;128      * @retval true send request to upper stack success.
;;;129      * @retval false send request to upper stack failed.
;;;130      */
;;;131    bool simp_ble_client_read_by_uuid(uint8_t conn_id, T_SIMP_READ_TYPE read_type)
;;;132    {
        0x0020854e:    e92d41fc    -..A    PUSH     {r2-r8,lr}
        0x00208552:    4fbd        .O      LDR      r7,[pc,#756] ; [0x208848] = 0x20d0a8
        0x00208554:    4606        .F      MOV      r6,r0
        0x00208556:    460d        .F      MOV      r5,r1
        0x00208558:    7838        8x      LDRB     r0,[r7,#0]
        0x0020855a:    4286        .B      CMP      r6,r0
        0x0020855c:    d308        ..      BCC      0x208570 ; simp_ble_client_read_by_uuid + 34
;;;133        uint16_t start_handle;
;;;134        uint16_t end_handle;
;;;135        uint16_t  uuid16;
;;;136        if (conn_id >= simp_link_num)
;;;137        {
;;;138            PROFILE_PRINT_ERROR1("simp_ble_client_read_by_uuid: failed invalid conn_id %d", conn_id);
        0x0020855e:    49bd        .I      LDR      r1,[pc,#756] ; [0x208854] = 0x880023c
        0x00208560:    48b8        .H      LDR      r0,[pc,#736] ; [0x208844] = 0x21103302
        0x00208562:    4633        3F      MOV      r3,r6
        0x00208564:    2201        ."      MOVS     r2,#1
        0x00208566:    3140        @1      ADDS     r1,r1,#0x40
        0x00208568:    1e80        ..      SUBS     r0,r0,#2
        0x0020856a:    f5fffa78    ..x.    BL       log_buffer ; 0x7a5e
;;;139            return false;
        0x0020856e:    e036        6.      B        0x2085de ; simp_ble_client_read_by_uuid + 144
;;;140        }
;;;141    	APP_PRINT_INFO1("vsop----read_by_uuid------read_type=%d",read_type); 
        0x00208570:    460b        .F      MOV      r3,r1
        0x00208572:    49b8        .I      LDR      r1,[pc,#736] ; [0x208854] = 0x880023c
        0x00208574:    f8df82d8    ....    LDR      r8,[pc,#728] ; [0x208850] = 0x21103002
        0x00208578:    2201        ."      MOVS     r2,#1
        0x0020857a:    317c        |1      ADDS     r1,r1,#0x7c
        0x0020857c:    4640        @F      MOV      r0,r8
        0x0020857e:    f5fffa6e    ..n.    BL       log_buffer ; 0x7a5e
        0x00208582:    eb0600c6    ....    ADD      r0,r6,r6,LSL #3
;;;142    
;;;143        switch (read_type)
        0x00208586:    b135        5.      CBZ      r5,0x208596 ; simp_ble_client_read_by_uuid + 72
        0x00208588:    f6421402    B...    MOV      r4,#0x2902
        0x0020858c:    2d01        .-      CMP      r5,#1
        0x0020858e:    d00a        ..      BEQ      0x2085a6 ; simp_ble_client_read_by_uuid + 88
        0x00208590:    2d02        .-      CMP      r5,#2
        0x00208592:    d124        $.      BNE      0x2085de ; simp_ble_client_read_by_uuid + 144
        0x00208594:    e013        ..      B        0x2085be ; simp_ble_client_read_by_uuid + 112
;;;144        {
;;;145        case SIMP_READ_V1_READ:
;;;146            start_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_SRV_START];
        0x00208596:    68b9        .h      LDR      r1,[r7,#8]
        0x00208598:    f64f74e5    O..t    MOV      r4,#0xffe5
        0x0020859c:    eb010040    ..@.    ADD      r0,r1,r0,LSL #1
        0x002085a0:    8847        G.      LDRH     r7,[r0,#2]
;;;147            end_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_SRV_END];
        0x002085a2:    8885        ..      LDRH     r5,[r0,#4]
;;;148            uuid16 = GATT_UUID_CHAR_SIMPLE_V1_READ;
;;;149            break;
        0x002085a4:    e010        ..      B        0x2085c8 ; simp_ble_client_read_by_uuid + 122
;;;150        case SIMP_READ_V3_NOTIFY_CCCD:
;;;151            start_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V3_NOTIFY];
        0x002085a6:    68b9        .h      LDR      r1,[r7,#8]
        0x002085a8:    2200        ."      MOVS     r2,#0
        0x002085aa:    eb010040    ..@.    ADD      r0,r1,r0,LSL #1
        0x002085ae:    49a9        .I      LDR      r1,[pc,#676] ; [0x208854] = 0x880023c
        0x002085b0:    8947        G.      LDRH     r7,[r0,#0xa]
;;;152            end_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE];
        0x002085b2:    89c5        ..      LDRH     r5,[r0,#0xe]
;;;153            uuid16 = GATT_UUID_CHAR_CLIENT_CONFIG;
;;;154       		APP_PRINT_INFO0("vsop----read_by_uuid------ SIMP_READ_V3_NOTIFY_CCCD");		 
        0x002085b4:    31a8        .1      ADDS     r1,r1,#0xa8
        0x002085b6:    4640        @F      MOV      r0,r8
        0x002085b8:    f5fffa51    ..Q.    BL       log_buffer ; 0x7a5e
;;;155            break;
        0x002085bc:    e004        ..      B        0x2085c8 ; simp_ble_client_read_by_uuid + 122
;;;156        case SIMP_READ_V4_INDICATE_CCCD:
;;;157            start_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE];
        0x002085be:    68b9        .h      LDR      r1,[r7,#8]
        0x002085c0:    eb010040    ..@.    ADD      r0,r1,r0,LSL #1
        0x002085c4:    89c7        ..      LDRH     r7,[r0,#0xe]
;;;158            end_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_SRV_END];
        0x002085c6:    8885        ..      LDRH     r5,[r0,#4]
;;;159            uuid16 = GATT_UUID_CHAR_CLIENT_CONFIG;
;;;160            break;
;;;161        default:
;;;162            return false;
;;;163        }
;;;164    
;;;165        if (client_attr_read_using_uuid(conn_id, simp_client, start_handle, end_handle,
        0x002085c8:    2000        .       MOVS     r0,#0
        0x002085ca:    e9cd4000    ...@    STRD     r4,r0,[sp,#0]
        0x002085ce:    489f        .H      LDR      r0,[pc,#636] ; [0x20884c] = 0x20d028
        0x002085d0:    462b        +F      MOV      r3,r5
        0x002085d2:    463a        :F      MOV      r2,r7
        0x002085d4:    7801        .x      LDRB     r1,[r0,#0]
        0x002085d6:    4630        0F      MOV      r0,r6
        0x002085d8:    f646f898    F...    BL       client_attr_read_using_uuid ; 0x4e70c
        0x002085dc:    b110        ..      CBZ      r0,0x2085e4 ; simp_ble_client_read_by_uuid + 150
        0x002085de:    2000        .       MOVS     r0,#0
        0x002085e0:    e8bd81fc    ....    POP      {r2-r8,pc}
;;;166                                        uuid16, NULL) == GAP_CAUSE_SUCCESS)
;;;167        {
;;;168            return true;
        0x002085e4:    2001        .       MOVS     r0,#1
;;;169        }
;;;170        return false;
;;;171    }
        0x002085e6:    e7fb        ..      B        0x2085e0 ; simp_ble_client_read_by_uuid + 146
    simp_ble_client_set_v3_notify
;;;172    
;;;173    /**
;;;174      * @brief  Used by application, to enable or disable the notification of peer server's V3 Notify Characteristic.
;;;175      * @param[in]  conn_id connection ID.
;;;176      * @param[in]  notify 0--disable the notification, 1--enable the notification.
;;;177      * @retval true send request to upper stack success.
;;;178      * @retval false send request to upper stack failed.
;;;179      */
;;;180    bool simp_ble_client_set_v3_notify(uint8_t conn_id, bool notify)
;;;181    {
        0x002085e8:    b5fe        ..      PUSH     {r1-r7,lr}
        0x002085ea:    4f97        .O      LDR      r7,[pc,#604] ; [0x208848] = 0x20d0a8
;;; .\..\..\..\src\ble\profile\client\simple_ble_client.c (181)
        0x002085ec:    4604        .F      MOV      r4,r0
        0x002085ee:    460e        .F      MOV      r6,r1
        0x002085f0:    7838        8x      LDRB     r0,[r7,#0]
        0x002085f2:    4284        .B      CMP      r4,r0
        0x002085f4:    d308        ..      BCC      0x208608 ; simp_ble_client_set_v3_notify + 32
;;;182    #if 0
;;;183        if (conn_id >= simp_link_num)
;;;184        {
;;;185            PROFILE_PRINT_ERROR1("simp_ble_client_set_v3_notify: failed invalid conn_id %d", conn_id);
;;;186            return false;
;;;187        }
;;;188    	APP_PRINT_INFO0("vsop----simp_ble_client_set_v3_notify enter");	
;;;189    
;;;190        if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD])
;;;191        {
;;;192            uint16_t handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD];
;;;193            uint16_t length = sizeof(uint16_t);
;;;194            uint16_t cccd_bits = notify ? 1 : 0;
;;;195            if (client_attr_write(conn_id, simp_client, GATT_WRITE_TYPE_REQ, handle,
;;;196                                  length, (uint8_t *)&cccd_bits) == GAP_CAUSE_SUCCESS)
;;;197            {
;;;198            	APP_PRINT_INFO0("vsop----simp_ble_client_set_v3_notify enter---write fail");	
;;;199                return true;
;;;200            }
;;;201        }
;;;202    
;;;203        APP_PRINT_WARN0("simp_ble_client_set_v3_notify: Request fail! Please check!");
;;;204        return false;
;;;205    #else
;;;206    	if (conn_id >= simp_link_num)
;;;207    	{
;;;208    		PROFILE_PRINT_ERROR1("simp_ble_client_set_v3_notify: failed invalid conn_id %d", conn_id);
        0x002085f6:    4997        .I      LDR      r1,[pc,#604] ; [0x208854] = 0x880023c
        0x002085f8:    4892        .H      LDR      r0,[pc,#584] ; [0x208844] = 0x21103302
        0x002085fa:    4623        #F      MOV      r3,r4
        0x002085fc:    2201        ."      MOVS     r2,#1
        0x002085fe:    31e0        .1      ADDS     r1,r1,#0xe0
        0x00208600:    1e80        ..      SUBS     r0,r0,#2
        0x00208602:    f5fffa2c    ..,.    BL       log_buffer ; 0x7a5e
;;;209    		return false;
        0x00208606:    e024        $.      B        0x208652 ; simp_ble_client_set_v3_notify + 106
;;;210    	}
;;;211    	APP_PRINT_INFO1("vsop----simp_ble_client_set_v3_notify =	0x%02X",simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD]);	
        0x00208608:    68b8        .h      LDR      r0,[r7,#8]
        0x0020860a:    eb0405c4    ....    ADD      r5,r4,r4,LSL #3
        0x0020860e:    eb000045    ..E.    ADD      r0,r0,r5,LSL #1
        0x00208612:    2201        ."      MOVS     r2,#1
        0x00208614:    8a03        ..      LDRH     r3,[r0,#0x10]
        0x00208616:    4990        .I      LDR      r1,[pc,#576] ; [0x208858] = 0x8800358
        0x00208618:    488d        .H      LDR      r0,[pc,#564] ; [0x208850] = 0x21103002
        0x0020861a:    f5fffa20    .. .    BL       log_buffer ; 0x7a5e
;;;212    
;;;213    	if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD])
        0x0020861e:    68b8        .h      LDR      r0,[r7,#8]
        0x00208620:    eb000045    ..E.    ADD      r0,r0,r5,LSL #1
        0x00208624:    8a01        ..      LDRH     r1,[r0,#0x10]
        0x00208626:    b169        i.      CBZ      r1,0x208644 ; simp_ble_client_set_v3_notify + 92
;;;214    	{
;;;215    		uint16_t handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD]; 
        0x00208628:    b28b        ..      UXTH     r3,r1
;;;216    		uint16_t length = sizeof(uint16_t);
        0x0020862a:    2002        .       MOVS     r0,#2
        0x0020862c:    a902        ..      ADD      r1,sp,#8
        0x0020862e:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x00208632:    4886        .H      LDR      r0,[pc,#536] ; [0x20884c] = 0x20d028
;;;217    		uint16_t cccd_bits = notify ? 1 : 0; 
        0x00208634:    f8ad6008    ...`    STRH     r6,[sp,#8]
;;;218    		if (client_attr_write(conn_id, simp_client, GATT_WRITE_TYPE_REQ, handle,
        0x00208638:    2201        ."      MOVS     r2,#1
        0x0020863a:    7801        .x      LDRB     r1,[r0,#0]
        0x0020863c:    4620         F      MOV      r0,r4
        0x0020863e:    f646f92f    F./.    BL       client_attr_write ; 0x4e8a0
        0x00208642:    b140        @.      CBZ      r0,0x208656 ; simp_ble_client_set_v3_notify + 110
;;;219    							  length, (uint8_t *)&cccd_bits) == GAP_CAUSE_SUCCESS)
;;;220    		{
;;;221    			return true;
;;;222    		}
;;;223    	}
;;;224    
;;;225    	APP_PRINT_WARN0("simp_ble_client_set_v3_notify: Request fail! Please check!");
        0x00208644:    4984        .I      LDR      r1,[pc,#528] ; [0x208858] = 0x8800358
        0x00208646:    4882        .H      LDR      r0,[pc,#520] ; [0x208850] = 0x21103002
        0x00208648:    2200        ."      MOVS     r2,#0
        0x0020864a:    3134        41      ADDS     r1,r1,#0x34
        0x0020864c:    1e40        @.      SUBS     r0,r0,#1
        0x0020864e:    f5fffa06    ....    BL       log_buffer ; 0x7a5e
;;;226    	return false;
        0x00208652:    2000        .       MOVS     r0,#0
;;;227    
;;;228    #endif
;;;229    }
        0x00208654:    bdfe        ..      POP      {r1-r7,pc}
        0x00208656:    2001        .       MOVS     r0,#1
        0x00208658:    bdfe        ..      POP      {r1-r7,pc}
    simp_ble_client_set_v4_ind
;;;230    
;;;231    /**
;;;232      * @brief  Used by application, to enable or disable the indication of peer server's V4 Indicate Characteristic.
;;;233      * @param[in]  conn_id connection ID.
;;;234      * @param[in]  ind 0--disable the indication, 1--enable the indication.
;;;235      * @retval true send request to upper stack success.
;;;236      * @retval false send request to upper stack failed.
;;;237      */
;;;238    bool simp_ble_client_set_v4_ind(uint8_t conn_id, bool ind)
;;;239    {
        0x0020865a:    b5fe        ..      PUSH     {r1-r7,lr}
        0x0020865c:    4f7a        zO      LDR      r7,[pc,#488] ; [0x208848] = 0x20d0a8
        0x0020865e:    4604        .F      MOV      r4,r0
        0x00208660:    460e        .F      MOV      r6,r1
        0x00208662:    7838        8x      LDRB     r0,[r7,#0]
        0x00208664:    4284        .B      CMP      r4,r0
        0x00208666:    d308        ..      BCC      0x20867a ; simp_ble_client_set_v4_ind + 32
;;;240        if (conn_id >= simp_link_num)
;;;241        {
;;;242            PROFILE_PRINT_ERROR1("simp_ble_client_set_v4_ind: failed invalid conn_id %d", conn_id);
        0x00208668:    497b        {I      LDR      r1,[pc,#492] ; [0x208858] = 0x8800358
        0x0020866a:    4876        vH      LDR      r0,[pc,#472] ; [0x208844] = 0x21103302
        0x0020866c:    4623        #F      MOV      r3,r4
        0x0020866e:    2201        ."      MOVS     r2,#1
        0x00208670:    3174        t1      ADDS     r1,r1,#0x74
        0x00208672:    1e80        ..      SUBS     r0,r0,#2
        0x00208674:    f5fff9f3    ....    BL       log_buffer ; 0x7a5e
;;;243            return false;
        0x00208678:    e029        ).      B        0x2086ce ; simp_ble_client_set_v4_ind + 116
;;;244        }
;;;245    	APP_PRINT_INFO1("vsop----HDL_SIMBLE_V4_INDICATE_CCCD =  0x%02X",simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD]);	
        0x0020867a:    68b8        .h      LDR      r0,[r7,#8]
        0x0020867c:    eb0405c4    ....    ADD      r5,r4,r4,LSL #3
        0x00208680:    eb000045    ..E.    ADD      r0,r0,r5,LSL #1
        0x00208684:    4974        tI      LDR      r1,[pc,#464] ; [0x208858] = 0x8800358
        0x00208686:    8a03        ..      LDRH     r3,[r0,#0x10]
        0x00208688:    2201        ."      MOVS     r2,#1
        0x0020868a:    31b0        .1      ADDS     r1,r1,#0xb0
        0x0020868c:    4870        pH      LDR      r0,[pc,#448] ; [0x208850] = 0x21103002
        0x0020868e:    f5fff9e6    ....    BL       log_buffer ; 0x7a5e
;;;246    
;;;247        if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD])
        0x00208692:    68b8        .h      LDR      r0,[r7,#8]
        0x00208694:    eb000045    ..E.    ADD      r0,r0,r5,LSL #1
        0x00208698:    8a01        ..      LDRH     r1,[r0,#0x10]
        0x0020869a:    b189        ..      CBZ      r1,0x2086c0 ; simp_ble_client_set_v4_ind + 102
;;;248        {
;;;249            uint16_t handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD]; 
        0x0020869c:    b28b        ..      UXTH     r3,r1
;;;250            uint16_t length = sizeof(uint16_t);
        0x0020869e:    2102        .!      MOVS     r1,#2
;;;251            uint16_t cccd_bits = ind ? 2 : 0;
        0x002086a0:    b10e        ..      CBZ      r6,0x2086a6 ; simp_ble_client_set_v4_ind + 76
        0x002086a2:    2002        .       MOVS     r0,#2
        0x002086a4:    e000        ..      B        0x2086a8 ; simp_ble_client_set_v4_ind + 78
        0x002086a6:    2000        .       MOVS     r0,#0
        0x002086a8:    f8ad0008    ....    STRH     r0,[sp,#8]
;;;252            if (client_attr_write(conn_id, simp_client, GATT_WRITE_TYPE_REQ, handle,
        0x002086ac:    a802        ..      ADD      r0,sp,#8
        0x002086ae:    e9cd1000    ....    STRD     r1,r0,[sp,#0]
        0x002086b2:    4866        fH      LDR      r0,[pc,#408] ; [0x20884c] = 0x20d028
        0x002086b4:    2201        ."      MOVS     r2,#1
        0x002086b6:    7801        .x      LDRB     r1,[r0,#0]
        0x002086b8:    4620         F      MOV      r0,r4
        0x002086ba:    f646f8f1    F...    BL       client_attr_write ; 0x4e8a0
        0x002086be:    b140        @.      CBZ      r0,0x2086d2 ; simp_ble_client_set_v4_ind + 120
;;;253                                  length, (uint8_t *)&cccd_bits) == GAP_CAUSE_SUCCESS)
;;;254            {
;;;255                return true;
;;;256            }
;;;257        }
;;;258    
;;;259        APP_PRINT_WARN0("simp_ble_client_set_v4_ind: Request fail! Please check!");
        0x002086c0:    4965        eI      LDR      r1,[pc,#404] ; [0x208858] = 0x8800358
        0x002086c2:    4863        cH      LDR      r0,[pc,#396] ; [0x208850] = 0x21103002
        0x002086c4:    2200        ."      MOVS     r2,#0
        0x002086c6:    31e4        .1      ADDS     r1,r1,#0xe4
        0x002086c8:    1e40        @.      SUBS     r0,r0,#1
        0x002086ca:    f5fff9c8    ....    BL       log_buffer ; 0x7a5e
;;;260        return false;
        0x002086ce:    2000        .       MOVS     r0,#0
;;;261    }
        0x002086d0:    bdfe        ..      POP      {r1-r7,pc}
        0x002086d2:    2001        .       MOVS     r0,#1
        0x002086d4:    bdfe        ..      POP      {r1-r7,pc}
    simp_ble_client_write_v2_char
;;;262    
;;;263    /**
;;;264      * @brief  Used by application, to write data of V2 write Characteristic.
;;;265      * @param[in]  conn_id connection ID.
;;;266      * @param[in]  length  write data length
;;;267      * @param[in]  p_value point the value to write
;;;268      * @param[in]  type    write type.
;;;269      * @retval true send request to upper stack success.
;;;270      * @retval false send request to upper stack failed.
;;;271      */
;;;272    bool simp_ble_client_write_v2_char(uint8_t conn_id, uint16_t length, uint8_t *p_value,
;;;273                                       T_GATT_WRITE_TYPE type)
;;;274    {
        0x002086d6:    b57c        |.      PUSH     {r2-r6,lr}
        0x002086d8:    4615        .F      MOV      r5,r2
        0x002086da:    4a5b        [J      LDR      r2,[pc,#364] ; [0x208848] = 0x20d0a8
        0x002086dc:    461c        .F      MOV      r4,r3
        0x002086de:    7813        .x      LDRB     r3,[r2,#0]
        0x002086e0:    4298        .B      CMP      r0,r3
        0x002086e2:    d307        ..      BCC      0x2086f4 ; simp_ble_client_write_v2_char + 30
;;;275        if (conn_id >= simp_link_num)
;;;276        {
;;;277            PROFILE_PRINT_ERROR1("simp_ble_client_write_v2_char: failed invalid conn_id %d", conn_id);
        0x002086e4:    4603        .F      MOV      r3,r0
        0x002086e6:    4857        WH      LDR      r0,[pc,#348] ; [0x208844] = 0x21103302
        0x002086e8:    2201        ."      MOVS     r2,#1
        0x002086ea:    495c        \I      LDR      r1,[pc,#368] ; [0x20885c] = 0x8800478
        0x002086ec:    1e80        ..      SUBS     r0,r0,#2
        0x002086ee:    f5fff9b6    ....    BL       log_buffer ; 0x7a5e
;;;278            return false;
        0x002086f2:    e015        ..      B        0x208720 ; simp_ble_client_write_v2_char + 74
;;;279        }
;;;280        if (simp_table[conn_id].hdl_cache[HDL_SIMBLE_V2_WRITE])
        0x002086f4:    6892        .h      LDR      r2,[r2,#8]
        0x002086f6:    eb0003c0    ....    ADD      r3,r0,r0,LSL #3
        0x002086fa:    eb020243    ..C.    ADD      r2,r2,r3,LSL #1
        0x002086fe:    8913        ..      LDRH     r3,[r2,#8]
        0x00208700:    b13b        ;.      CBZ      r3,0x208712 ; simp_ble_client_write_v2_char + 60
;;;281        {
;;;282            uint16_t handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V2_WRITE];
;;;283            if (client_attr_write(conn_id, simp_client, type, handle,
        0x00208702:    e9cd1500    ....    STRD     r1,r5,[sp,#0]
        0x00208706:    4951        QI      LDR      r1,[pc,#324] ; [0x20884c] = 0x20d028
        0x00208708:    4622        "F      MOV      r2,r4
        0x0020870a:    7809        .x      LDRB     r1,[r1,#0]
        0x0020870c:    f646f8c8    F...    BL       client_attr_write ; 0x4e8a0
        0x00208710:    b140        @.      CBZ      r0,0x208724 ; simp_ble_client_write_v2_char + 78
;;;284                                  length, p_value) == GAP_CAUSE_SUCCESS)
;;;285            {
;;;286                return true;
;;;287            }
;;;288        }
;;;289    
;;;290        APP_PRINT_WARN0("simp_ble_client_write_v2_char: Request fail! Please check!");
        0x00208712:    4952        RI      LDR      r1,[pc,#328] ; [0x20885c] = 0x8800478
        0x00208714:    484e        NH      LDR      r0,[pc,#312] ; [0x208850] = 0x21103002
        0x00208716:    2200        ."      MOVS     r2,#0
        0x00208718:    313c        <1      ADDS     r1,r1,#0x3c
        0x0020871a:    1e40        @.      SUBS     r0,r0,#1
        0x0020871c:    f5fff99f    ....    BL       log_buffer ; 0x7a5e
;;;291        return false;
        0x00208720:    2000        .       MOVS     r0,#0
;;;292    }
        0x00208722:    bd7c        |.      POP      {r2-r6,pc}
        0x00208724:    2001        .       MOVS     r0,#1
        0x00208726:    bd7c        |.      POP      {r2-r6,pc}
    simp_ble_client_get_hdl_cache
;;;293    
;;;294    /**
;;;295      * @brief  Used by application, to get handle cache.
;;;296      * @param[in]  conn_id connection ID.
;;;297      * @param[in]  p_hdl_cache pointer of the handle cache table
;;;298      * @param[in]  len the length of handle cache table
;;;299      * @retval true success.
;;;300      * @retval false failed.
;;;301      */
;;;302    bool simp_ble_client_get_hdl_cache(uint8_t conn_id, uint16_t *p_hdl_cache, uint8_t len)
;;;303    {
        0x00208728:    b570        p.      PUSH     {r4-r6,lr}
        0x0020872a:    460e        .F      MOV      r6,r1
;;;304        if (conn_id >= simp_link_num)
        0x0020872c:    4946        FI      LDR      r1,[pc,#280] ; [0x208848] = 0x20d0a8
        0x0020872e:    4d45        EM      LDR      r5,[pc,#276] ; [0x208844] = 0x21103302
        0x00208730:    780b        .x      LDRB     r3,[r1,#0]
        0x00208732:    1ead        ..      SUBS     r5,r5,#2
        0x00208734:    4298        .B      CMP      r0,r3
        0x00208736:    d304        ..      BCC      0x208742 ; simp_ble_client_get_hdl_cache + 26
;;;305        {
;;;306            PROFILE_PRINT_ERROR1("simp_ble_client_get_hdl_cache: failed invalid conn_id %d", conn_id);
        0x00208738:    4948        HI      LDR      r1,[pc,#288] ; [0x20885c] = 0x8800478
        0x0020873a:    2201        ."      MOVS     r2,#1
        0x0020873c:    4603        .F      MOV      r3,r0
        0x0020873e:    317c        |1      ADDS     r1,r1,#0x7c
;;;307            return false;
        0x00208740:    e011        ..      B        0x208766 ; simp_ble_client_get_hdl_cache + 62
;;;308        }
;;;309        if (simp_table[conn_id].disc_state != DISC_SIMP_DONE)
        0x00208742:    688b        .h      LDR      r3,[r1,#8]
        0x00208744:    eb0000c0    ....    ADD      r0,r0,r0,LSL #3
        0x00208748:    f8134010    ...@    LDRB     r4,[r3,r0,LSL #1]
        0x0020874c:    2c02        .,      CMP      r4,#2
        0x0020874e:    d004        ..      BEQ      0x20875a ; simp_ble_client_get_hdl_cache + 50
        0x00208750:    4942        BI      LDR      r1,[pc,#264] ; [0x20885c] = 0x8800478
        0x00208752:    2201        ."      MOVS     r2,#1
        0x00208754:    4623        #F      MOV      r3,r4
;;;310        {
;;;311            PROFILE_PRINT_ERROR1("simp_ble_client_get_hdl_cache: failed invalid state %d",
        0x00208756:    31b8        .1      ADDS     r1,r1,#0xb8
;;;312                                 simp_table[conn_id].disc_state);
;;;313            return false;
        0x00208758:    e005        ..      B        0x208766 ; simp_ble_client_get_hdl_cache + 62
;;;314        }
;;;315        if (len != sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN)
        0x0020875a:    2a10        .*      CMP      r2,#0x10
        0x0020875c:    d008        ..      BEQ      0x208770 ; simp_ble_client_get_hdl_cache + 72
;;;316        {
;;;317            PROFILE_PRINT_ERROR1("simp_ble_client_get_hdl_cache: failed invalid len %d", len);
        0x0020875e:    4613        .F      MOV      r3,r2
        0x00208760:    493e        >I      LDR      r1,[pc,#248] ; [0x20885c] = 0x8800478
        0x00208762:    2201        ."      MOVS     r2,#1
        0x00208764:    31f4        .1      ADDS     r1,r1,#0xf4
        0x00208766:    4628        (F      MOV      r0,r5
        0x00208768:    f5fff979    ..y.    BL       log_buffer ; 0x7a5e
;;;318            return false;
        0x0020876c:    2000        .       MOVS     r0,#0
        0x0020876e:    bd70        p.      POP      {r4-r6,pc}
;;;319        }
;;;320        memcpy(p_hdl_cache, simp_table[conn_id].hdl_cache, len);
        0x00208770:    eb030140    ..@.    ADD      r1,r3,r0,LSL #1
        0x00208774:    4630        0F      MOV      r0,r6
        0x00208776:    1c89        ..      ADDS     r1,r1,#2
        0x00208778:    f651fb8f    Q...    BL       __aeabi_memcpy ; 0x59e9a
;;;321        return true;
        0x0020877c:    2001        .       MOVS     r0,#1
;;;322    }
        0x0020877e:    bd70        p.      POP      {r4-r6,pc}
    simp_ble_client_set_hdl_cache
;;;323    
;;;324    /**
;;;325      * @brief  Used by application, to set handle cache.
;;;326      * @param[in]  conn_id connection ID.
;;;327      * @param[in]  p_hdl_cache pointer of the handle cache table
;;;328      * @param[in]  len the length of handle cache table
;;;329      * @retval true success.
;;;330      * @retval false failed.
;;;331      */
;;;332    bool simp_ble_client_set_hdl_cache(uint8_t conn_id, uint16_t *p_hdl_cache, uint8_t len)
;;;333    {
        0x00208780:    b570        p.      PUSH     {r4-r6,lr}
;;;334        if (conn_id >= simp_link_num)
        0x00208782:    4d31        1M      LDR      r5,[pc,#196] ; [0x208848] = 0x20d0a8
        0x00208784:    4e2f        /N      LDR      r6,[pc,#188] ; [0x208844] = 0x21103302
        0x00208786:    782b        +x      LDRB     r3,[r5,#0]
        0x00208788:    1eb6        ..      SUBS     r6,r6,#2
        0x0020878a:    4298        .B      CMP      r0,r3
        0x0020878c:    d303        ..      BCC      0x208796 ; simp_ble_client_set_hdl_cache + 22
;;;335        {
;;;336            PROFILE_PRINT_ERROR1("simp_ble_client_set_hdl_cache: failed invalid conn_id %d", conn_id);
        0x0020878e:    4603        .F      MOV      r3,r0
        0x00208790:    2201        ."      MOVS     r2,#1
        0x00208792:    4933        3I      LDR      r1,[pc,#204] ; [0x208860] = 0x88005a4
;;;337            return false;
        0x00208794:    e00f        ..      B        0x2087b6 ; simp_ble_client_set_hdl_cache + 54
;;;338        }
;;;339        if (simp_table[conn_id].disc_state != DISC_SIMP_IDLE)
        0x00208796:    eb0004c0    ....    ADD      r4,r0,r0,LSL #3
        0x0020879a:    68a8        .h      LDR      r0,[r5,#8]
        0x0020879c:    f8103014    ...0    LDRB     r3,[r0,r4,LSL #1]
        0x002087a0:    b11b        ..      CBZ      r3,0x2087aa ; simp_ble_client_set_hdl_cache + 42
;;;340        {
;;;341            PROFILE_PRINT_ERROR1("simp_ble_client_set_hdl_cache: failed invalid state %d",
        0x002087a2:    492f        /I      LDR      r1,[pc,#188] ; [0x208860] = 0x88005a4
        0x002087a4:    2201        ."      MOVS     r2,#1
        0x002087a6:    313c        <1      ADDS     r1,r1,#0x3c
;;;342                                 simp_table[conn_id].disc_state);
;;;343            return false;
        0x002087a8:    e005        ..      B        0x2087b6 ; simp_ble_client_set_hdl_cache + 54
;;;344        }
;;;345        if (len != sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN)
        0x002087aa:    2a10        .*      CMP      r2,#0x10
        0x002087ac:    d008        ..      BEQ      0x2087c0 ; simp_ble_client_set_hdl_cache + 64
;;;346        {
;;;347            PROFILE_PRINT_ERROR1("simp_ble_client_set_hdl_cache: failed invalid len %d", len);
        0x002087ae:    4613        .F      MOV      r3,r2
        0x002087b0:    492b        +I      LDR      r1,[pc,#172] ; [0x208860] = 0x88005a4
        0x002087b2:    2201        ."      MOVS     r2,#1
        0x002087b4:    3178        x1      ADDS     r1,r1,#0x78
        0x002087b6:    4630        0F      MOV      r0,r6
        0x002087b8:    f5fff951    ..Q.    BL       log_buffer ; 0x7a5e
;;;348            return false;
        0x002087bc:    2000        .       MOVS     r0,#0
        0x002087be:    bd70        p.      POP      {r4-r6,pc}
;;;349        }
;;;350        memcpy(simp_table[conn_id].hdl_cache, p_hdl_cache, len);
        0x002087c0:    eb000044    ..D.    ADD      r0,r0,r4,LSL #1
        0x002087c4:    1c80        ..      ADDS     r0,r0,#2
        0x002087c6:    f651fb68    Q.h.    BL       __aeabi_memcpy ; 0x59e9a
;;;351        simp_table[conn_id].disc_state = DISC_SIMP_DONE;
        0x002087ca:    68a9        .h      LDR      r1,[r5,#8]
        0x002087cc:    2002        .       MOVS     r0,#2
        0x002087ce:    f8010014    ....    STRB     r0,[r1,r4,LSL #1]
;;;352        return true;
        0x002087d2:    2001        .       MOVS     r0,#1
;;;353    }
        0x002087d4:    bd70        p.      POP      {r4-r6,pc}
    simp_ble_client_discover_state_cb
;;;354    
;;;355    static bool simp_ble_client_start_char_discovery(uint8_t conn_id)
;;;356    {
;;;357        uint16_t start_handle;
;;;358        uint16_t end_handle;
;;;359    
;;;360        APP_PRINT_INFO0("simp_ble_client_start_simp_char_discovery");
;;;361        start_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_SRV_START];
;;;362        end_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_SRV_END];
;;;363        if (client_all_char_discovery(conn_id, simp_client, start_handle,
;;;364                                      end_handle) == GAP_CAUSE_SUCCESS)
;;;365        {
;;;366            return true;
;;;367        }
;;;368        return false;
;;;369    }
;;;370    
;;;371    static bool simp_ble_client_start_char_descriptor_discovery(uint8_t conn_id)
;;;372    {
;;;373        uint16_t start_handle;
;;;374        uint16_t end_handle;
;;;375    
;;;376        PROFILE_PRINT_INFO0("simp_ble_client_start_char_descriptor_discovery");
;;;377        start_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_V3_NOTIFY];
;;;378        end_handle = simp_table[conn_id].hdl_cache[HDL_SIMBLE_SRV_END];
;;;379        if (client_all_char_descriptor_discovery(conn_id, simp_client, start_handle,
;;;380                                                 end_handle) == GAP_CAUSE_SUCCESS)
;;;381        {
;;;382            return true;
;;;383        }
;;;384        return false;
;;;385    }
;;;386    static void simp_ble_client_discover_state_cb(uint8_t conn_id,  T_DISCOVERY_STATE discovery_state)
;;;387    {
        0x002087d6:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x002087da:    b086        ..      SUB      sp,sp,#0x18
        0x002087dc:    4606        .F      MOV      r6,r0
        0x002087de:    2000        .       MOVS     r0,#0
        0x002087e0:    f8dfa06c    ..l.    LDR      r10,[pc,#108] ; [0x208850] = 0x21103002
        0x002087e4:    4688        .F      MOV      r8,r1
;;;388        bool cb_flag = false;
;;;389        T_SIMP_CLIENT_CB_DATA cb_data;
;;;390        cb_data.cb_type = SIMP_CLIENT_CB_TYPE_DISC_STATE;
        0x002087e6:    f88d0000    ....    STRB     r0,[sp,#0]
;;;391    
;;;392        APP_PRINT_INFO1("simp_ble_client_discover_state_cb: discovery_state %d", discovery_state);
        0x002087ea:    460b        .F      MOV      r3,r1
        0x002087ec:    2201        ."      MOVS     r2,#1
        0x002087ee:    491d        .I      LDR      r1,[pc,#116] ; [0x208864] = 0x88006b8
        0x002087f0:    4650        PF      MOV      r0,r10
        0x002087f2:    f5fff934    ..4.    BL       log_buffer ; 0x7a5e
;;;393        if (simp_table[conn_id].disc_state == DISC_SIMP_START)
        0x002087f6:    4f14        .O      LDR      r7,[pc,#80] ; [0x208848] = 0x20d0a8
        0x002087f8:    eb0604c6    ....    ADD      r4,r6,r6,LSL #3
        0x002087fc:    68b8        .h      LDR      r0,[r7,#8]
        0x002087fe:    f8101014    ....    LDRB     r1,[r0,r4,LSL #1]
        0x00208802:    2901        .)      CMP      r1,#1
        0x00208804:    d118        ..      BNE      0x208838 ; simp_ble_client_discover_state_cb + 98
;;;394        {
;;;395            uint16_t *hdl_cache;
;;;396            hdl_cache = simp_table[conn_id].hdl_cache;
        0x00208806:    eb000144    ..D.    ADD      r1,r0,r4,LSL #1
        0x0020880a:    2503        .%      MOVS     r5,#3
        0x0020880c:    f8df903c    ..<.    LDR      r9,[pc,#60] ; [0x20884c] = 0x20d028
        0x00208810:    1c89        ..      ADDS     r1,r1,#2
        0x00208812:    f1b80f02    ....    CMP      r8,#2
        0x00208816:    d027        '.      BEQ      0x208868 ; simp_ble_client_discover_state_cb + 146
        0x00208818:    f1b80f06    ....    CMP      r8,#6
        0x0020881c:    d03a        :.      BEQ      0x208894 ; simp_ble_client_discover_state_cb + 190
        0x0020881e:    f1b80f0a    ....    CMP      r8,#0xa
        0x00208822:    d04c        L.      BEQ      0x2088be ; simp_ble_client_discover_state_cb + 232
        0x00208824:    f1b80f0b    ....    CMP      r8,#0xb
        0x00208828:    d04d        M.      BEQ      0x2088c6 ; simp_ble_client_discover_state_cb + 240
        0x0020882a:    490e        .I      LDR      r1,[pc,#56] ; [0x208864] = 0x88006b8
        0x0020882c:    2200        ."      MOVS     r2,#0
        0x0020882e:    313c        <1      ADDS     r1,r1,#0x3c
        0x00208830:    f1aa0002    ....    SUB      r0,r10,#2
        0x00208834:    f5fff913    ....    BL       log_buffer ; 0x7a5e
        0x00208838:    b006        ..      ADD      sp,sp,#0x18
        0x0020883a:    e8bd87f0    ....    POP      {r4-r10,pc}
    $d
        0x0020883e:    0000        ..      DCW    0
        0x00208840:    088000e8    ....    DCD    142606568
        0x00208844:    21103302    .3.!    DCD    554709762
        0x00208848:    0020d0a8    .. .    DCD    2150568
        0x0020884c:    0020d028    (. .    DCD    2150440
        0x00208850:    21103002    .0.!    DCD    554708994
        0x00208854:    0880023c    <...    DCD    142606908
        0x00208858:    08800358    X...    DCD    142607192
        0x0020885c:    08800478    x...    DCD    142607480
        0x00208860:    088005a4    ....    DCD    142607780
        0x00208864:    088006b8    ....    DCD    142608056
    $t
;;;397    
;;;398            switch (discovery_state)
;;;399            {
;;;400            case DISC_STATE_SRV_DONE:
;;;401                /* Indicate that service handle found. Start discover characteristic. */
;;;402                if ((hdl_cache[HDL_SIMBLE_SRV_START] != 0)
        0x00208868:    880a        ..      LDRH     r2,[r1,#0]
        0x0020886a:    b90a        ..      CBNZ     r2,0x208870 ; simp_ble_client_discover_state_cb + 154
;;;403                    || (hdl_cache[HDL_SIMBLE_SRV_END] != 0))
        0x0020886c:    8849        I.      LDRH     r1,[r1,#2]
        0x0020886e:    b351        Q.      CBZ      r1,0x2088c6 ; simp_ble_client_discover_state_cb + 240
        0x00208870:    2200        ."      MOVS     r2,#0
        0x00208872:    49f6        .I      LDR      r1,[pc,#984] ; [0x208c4c] = 0x8800654
        0x00208874:    4650        PF      MOV      r0,r10
        0x00208876:    f5fff8f2    ....    BL       log_buffer ; 0x7a5e
        0x0020887a:    68b8        .h      LDR      r0,[r7,#8]
        0x0020887c:    f8991000    ....    LDRB     r1,[r9,#0]
        0x00208880:    eb000044    ..D.    ADD      r0,r0,r4,LSL #1
        0x00208884:    8842        B.      LDRH     r2,[r0,#2]
        0x00208886:    8883        ..      LDRH     r3,[r0,#4]
        0x00208888:    4630        0F      MOV      r0,r6
        0x0020888a:    f645fe98    E...    BL       client_all_char_discovery ; 0x4e5be
        0x0020888e:    e013        ..      B        0x2088b8 ; simp_ble_client_discover_state_cb + 226
;;;404                {
;;;405                    if (simp_ble_client_start_char_discovery(conn_id) == false)
;;;406                    {
;;;407                        simp_table[conn_id].disc_state = DISC_SIMP_FAILED;
;;;408                        cb_flag = true;
        0x00208890:    68b8        .h      LDR      r0,[r7,#8]
        0x00208892:    e018        ..      B        0x2088c6 ; simp_ble_client_discover_state_cb + 240
;;;409                    }
;;;410                }
;;;411                /* No Simple BLE service handle found. Discover procedure complete. */
;;;412                else
;;;413                {
;;;414                    simp_table[conn_id].disc_state = DISC_SIMP_FAILED;
;;;415                    cb_flag = true;
;;;416                }
;;;417                break;
;;;418            case DISC_STATE_CHAR_DONE:
;;;419                if (hdl_cache[HDL_SIMBLE_V3_NOTIFY] != 0)
        0x00208894:    8909        ..      LDRH     r1,[r1,#8]
        0x00208896:    b1b1        ..      CBZ      r1,0x2088c6 ; simp_ble_client_discover_state_cb + 240
        0x00208898:    49ec        .I      LDR      r1,[pc,#944] ; [0x208c4c] = 0x8800654
        0x0020889a:    2200        ."      MOVS     r2,#0
        0x0020889c:    3130        01      ADDS     r1,r1,#0x30
        0x0020889e:    48ec        .H      LDR      r0,[pc,#944] ; [0x208c50] = 0x21103302
        0x002088a0:    f5fff8dd    ....    BL       log_buffer ; 0x7a5e
        0x002088a4:    68b8        .h      LDR      r0,[r7,#8]
        0x002088a6:    f8991000    ....    LDRB     r1,[r9,#0]
        0x002088aa:    eb000044    ..D.    ADD      r0,r0,r4,LSL #1
        0x002088ae:    8942        B.      LDRH     r2,[r0,#0xa]
        0x002088b0:    8883        ..      LDRH     r3,[r0,#4]
        0x002088b2:    4630        0F      MOV      r0,r6
        0x002088b4:    f645fee6    E...    BL       client_all_char_descriptor_discovery ; 0x4e684
        0x002088b8:    2800        .(      CMP      r0,#0
        0x002088ba:    d0bd        ..      BEQ      0x208838 ; simp_ble_client_discover_state_cb + 98
        0x002088bc:    e7e8        ..      B        0x208890 ; simp_ble_client_discover_state_cb + 186
;;;420                {
;;;421                    if (simp_ble_client_start_char_descriptor_discovery(conn_id) == false)
;;;422                    {
;;;423                        simp_table[conn_id].disc_state = DISC_SIMP_FAILED;
;;;424                        cb_flag = true;
;;;425                    }
;;;426                }
;;;427                else
;;;428                {
;;;429                    simp_table[conn_id].disc_state = DISC_SIMP_FAILED;
;;;430                    cb_flag = true;
;;;431                }
;;;432                break;
;;;433            case DISC_STATE_CHAR_DESCRIPTOR_DONE:
;;;434                simp_table[conn_id].disc_state = DISC_SIMP_DONE;
        0x002088be:    2102        .!      MOVS     r1,#2
        0x002088c0:    f8001014    ....    STRB     r1,[r0,r4,LSL #1]
;;;435                cb_flag = true;
;;;436                break;
        0x002088c4:    e001        ..      B        0x2088ca ; simp_ble_client_discover_state_cb + 244
;;;437            case DISC_STATE_FAILED:
;;;438                simp_table[conn_id].disc_state = DISC_SIMP_FAILED;
        0x002088c6:    f8005014    ...P    STRB     r5,[r0,r4,LSL #1]
;;;439                cb_flag = true;
;;;440                break;
;;;441            default:
;;;442                APP_PRINT_ERROR0("simp_handle_discover_state: Invalid Discovery State!");
;;;443                break;
;;;444            }
;;;445        }
;;;446    
;;;447        /* Send discover state to application if needed. */
;;;448        if (cb_flag && simp_client_cb)
        0x002088ca:    687b        {h      LDR      r3,[r7,#4]
        0x002088cc:    2b00        .+      CMP      r3,#0
        0x002088ce:    d0b3        ..      BEQ      0x208838 ; simp_ble_client_discover_state_cb + 98
;;;449        {
;;;450            cb_data.cb_content.disc_state = simp_table[conn_id].disc_state;
        0x002088d0:    68b8        .h      LDR      r0,[r7,#8]
        0x002088d2:    466a        jF      MOV      r2,sp
        0x002088d4:    4631        1F      MOV      r1,r6
        0x002088d6:    f8100014    ....    LDRB     r0,[r0,r4,LSL #1]
        0x002088da:    f88d0004    ....    STRB     r0,[sp,#4]
;;;451            (*simp_client_cb)(simp_client, conn_id, &cb_data);
        0x002088de:    f8990000    ....    LDRB     r0,[r9,#0]
        0x002088e2:    4798        .G      BLX      r3
;;;452        }
;;;453        return;
;;;454    }
        0x002088e4:    e7a8        ..      B        0x208838 ; simp_ble_client_discover_state_cb + 98
    simp_ble_client_discover_result_cb
;;;455    
;;;456    /**
;;;457      * @brief  Called by profile client layer, when discover result fetched.
;;;458      * @param  conn_id: connection ID.
;;;459      * @param  result_type: indicate which type of value discovered in service discovery procedure.
;;;460      * @param  result_data: value discovered.
;;;461      * @retval None
;;;462      */
;;;463    static void simp_ble_client_discover_result_cb(uint8_t conn_id,
;;;464                                                   T_DISCOVERY_RESULT_TYPE result_type,
;;;465                                                   T_DISCOVERY_RESULT_DATA result_data)
;;;466    {
        0x002088e6:    b5f8        ..      PUSH     {r3-r7,lr}
        0x002088e8:    4604        .F      MOV      r4,r0
        0x002088ea:    460e        .F      MOV      r6,r1
        0x002088ec:    8890        ..      LDRH     r0,[r2,#4]
        0x002088ee:    460b        .F      MOV      r3,r1
        0x002088f0:    49d6        .I      LDR      r1,[pc,#856] ; [0x208c4c] = 0x8800654
        0x002088f2:    4fd8        .O      LDR      r7,[pc,#864] ; [0x208c54] = 0x21103002
        0x002088f4:    4615        .F      MOV      r5,r2
;;;467        APP_PRINT_INFO2("simp_ble_client_discover_result_cb: result_type %d , 0x%02X", result_type,result_data.p_char_uuid16_disc_data->value_handle);
        0x002088f6:    9000        ..      STR      r0,[sp,#0]
        0x002088f8:    2202        ."      MOVS     r2,#2
        0x002088fa:    31d8        .1      ADDS     r1,r1,#0xd8
        0x002088fc:    4638        8F      MOV      r0,r7
        0x002088fe:    f5fff8ae    ....    BL       log_buffer ; 0x7a5e
;;;468        if (simp_table[conn_id].disc_state == DISC_SIMP_START)
        0x00208902:    49d5        .I      LDR      r1,[pc,#852] ; [0x208c58] = 0x20d0a8
        0x00208904:    eb0400c4    ....    ADD      r0,r4,r4,LSL #3
        0x00208908:    6889        .h      LDR      r1,[r1,#8]
        0x0020890a:    f8112010    ...     LDRB     r2,[r1,r0,LSL #1]
        0x0020890e:    2a01        .*      CMP      r2,#1
        0x00208910:    d11b        ..      BNE      0x20894a ; simp_ble_client_discover_result_cb + 100
;;;469        {
;;;470            uint16_t handle;
;;;471            uint16_t *hdl_cache;
;;;472            hdl_cache = simp_table[conn_id].hdl_cache;
        0x00208912:    eb010440    ..@.    ADD      r4,r1,r0,LSL #1
;;;473    		APP_PRINT_INFO2("vsop simp_ble_client_discover_result_cb: result_type %d , 0x%02X", result_type,result_data.p_char_uuid16_disc_data->value_handle);
        0x00208916:    88a8        ..      LDRH     r0,[r5,#4]
        0x00208918:    9000        ..      STR      r0,[sp,#0]
        0x0020891a:    4633        3F      MOV      r3,r6
        0x0020891c:    2202        ."      MOVS     r2,#2
        0x0020891e:    49cf        .I      LDR      r1,[pc,#828] ; [0x208c5c] = 0x880076c
        0x00208920:    4638        8F      MOV      r0,r7
        0x00208922:    1ca4        ..      ADDS     r4,r4,#2
        0x00208924:    f5fff89b    ....    BL       log_buffer ; 0x7a5e
;;;474    
;;;475            switch (result_type)
        0x00208928:    2e02        ..      CMP      r6,#2
        0x0020892a:    d00a        ..      BEQ      0x208942 ; simp_ble_client_discover_result_cb + 92
        0x0020892c:    2e03        ..      CMP      r6,#3
        0x0020892e:    d00d        ..      BEQ      0x20894c ; simp_ble_client_discover_result_cb + 102
        0x00208930:    2e05        ..      CMP      r6,#5
        0x00208932:    d034        4.      BEQ      0x20899e ; simp_ble_client_discover_result_cb + 184
        0x00208934:    2200        ."      MOVS     r2,#0
        0x00208936:    1eb8        ..      SUBS     r0,r7,#2
        0x00208938:    e8bd40f8    ...@    POP      {r3-r7,lr}
        0x0020893c:    49c8        .I      LDR      r1,[pc,#800] ; [0x208c60] = 0x8800928
        0x0020893e:    f5ffb88e    ....    B        log_buffer ; 0x7a5e
;;;476            {
;;;477            case DISC_RESULT_SRV_DATA:
;;;478                hdl_cache[HDL_SIMBLE_SRV_START] = result_data.p_srv_disc_data->att_handle;
        0x00208942:    8828        (.      LDRH     r0,[r5,#0]
        0x00208944:    8020         .      STRH     r0,[r4,#0]
;;;479                hdl_cache[HDL_SIMBLE_SRV_END] = result_data.p_srv_disc_data->end_group_handle;
        0x00208946:    8868        h.      LDRH     r0,[r5,#2]
        0x00208948:    8060        `.      STRH     r0,[r4,#2]
        0x0020894a:    bdf8        ..      POP      {r3-r7,pc}
        0x0020894c:    49c3        .I      LDR      r1,[pc,#780] ; [0x208c5c] = 0x880076c
;;;480                break;
;;;481    
;;;482            case DISC_RESULT_CHAR_UUID16:
;;;483                handle = result_data.p_char_uuid16_disc_data->value_handle;
        0x0020894e:    88ae        ..      LDRH     r6,[r5,#4]
;;;484    			APP_PRINT_INFO1("vsop result_data DISC_RESULT_CHAR_UUID16: 0x%02X", result_data.p_char_uuid16_disc_data->uuid16);
        0x00208950:    88eb        ..      LDRH     r3,[r5,#6]
        0x00208952:    2201        ."      MOVS     r2,#1
        0x00208954:    3144        D1      ADDS     r1,r1,#0x44
        0x00208956:    4638        8F      MOV      r0,r7
        0x00208958:    f5fff881    ....    BL       log_buffer ; 0x7a5e
;;;485                switch (result_data.p_char_uuid16_disc_data->uuid16)
        0x0020895c:    88e8        ..      LDRH     r0,[r5,#6]
        0x0020895e:    301c        .0      ADDS     r0,r0,#0x1c
        0x00208960:    f5b03080    ...0    SUBS     r0,r0,#0x10000
        0x00208964:    d009        ..      BEQ      0x20897a ; simp_ble_client_discover_result_cb + 148
        0x00208966:    2801        .(      CMP      r0,#1
        0x00208968:    d005        ..      BEQ      0x208976 ; simp_ble_client_discover_result_cb + 144
        0x0020896a:    2803        .(      CMP      r0,#3
        0x0020896c:    d00e        ..      BEQ      0x20898c ; simp_ble_client_discover_result_cb + 166
        0x0020896e:    2805        .(      CMP      r0,#5
        0x00208970:    d1eb        ..      BNE      0x20894a ; simp_ble_client_discover_result_cb + 100
        0x00208972:    80e6        ..      STRH     r6,[r4,#6]
        0x00208974:    bdf8        ..      POP      {r3-r7,pc}
;;;486                {      
;;;487                case GATT_UUID_CHAR_SIMPLE_V1_READ:
;;;488                    hdl_cache[HDL_SIMBLE_V1_READ] = handle;
        0x00208976:    80a6        ..      STRH     r6,[r4,#4]
        0x00208978:    bdf8        ..      POP      {r3-r7,pc}
;;;489                    break;
;;;490    
;;;491                case GATT_UUID_CHAR_SIMPLE_V2_WRITE:
;;;492                    hdl_cache[HDL_SIMBLE_V2_WRITE] = handle;
;;;493                    break;
;;;494    
;;;495                case GATT_UUID_CHAR_SIMPLE_V3_NOTIFY:
;;;496    				APP_PRINT_INFO1("vsop+++++++++++++GATT_UUID_CHAR_SIMPLE_V3_NOTIFY, handle=%d",handle);
        0x0020897a:    49b8        .I      LDR      r1,[pc,#736] ; [0x208c5c] = 0x880076c
        0x0020897c:    4633        3F      MOV      r3,r6
        0x0020897e:    2201        ."      MOVS     r2,#1
        0x00208980:    3178        x1      ADDS     r1,r1,#0x78
        0x00208982:    4638        8F      MOV      r0,r7
        0x00208984:    f5fff86b    ..k.    BL       log_buffer ; 0x7a5e
;;;497                    hdl_cache[HDL_SIMBLE_V3_NOTIFY] = handle;
        0x00208988:    8126        &.      STRH     r6,[r4,#8]
        0x0020898a:    bdf8        ..      POP      {r3-r7,pc}
;;;498                    break;
;;;499    
;;;500                case GATT_UUID_CHAR_SIMPLE_V4_INDICATE:
;;;501    				APP_PRINT_INFO1("vsop+++++++++++++GATT_UUID_CHAR_SIMPLE_V4_INDICATE, handle=%d",handle);
        0x0020898c:    49b3        .I      LDR      r1,[pc,#716] ; [0x208c5c] = 0x880076c
        0x0020898e:    4633        3F      MOV      r3,r6
        0x00208990:    2201        ."      MOVS     r2,#1
        0x00208992:    31b8        .1      ADDS     r1,r1,#0xb8
        0x00208994:    4638        8F      MOV      r0,r7
        0x00208996:    f5fff862    ..b.    BL       log_buffer ; 0x7a5e
;;;502                    hdl_cache[HDL_SIMBLE_V4_INDICATE] = handle;
        0x0020899a:    81a6        ..      STRH     r6,[r4,#0xc]
        0x0020899c:    bdf8        ..      POP      {r3-r7,pc}
;;;503                    break;
;;;504    
;;;505                default:
;;;506                    /* have no intrest on this handle. */
;;;507                    break;
;;;508                }
;;;509    
;;;510                break;
;;;511    
;;;512            case DISC_RESULT_CHAR_DESC_UUID16:
;;;513                /* When use client_all_char_descriptor_discovery. */
;;;514    			APP_PRINT_INFO1("vsop 1 DISC_RESULT_CHAR_DESC_UUID16: uuid16 , 0x%02X", result_data.p_char_desc_uuid16_disc_data->uuid16);
        0x0020899e:    49b0        .I      LDR      r1,[pc,#704] ; [0x208c60] = 0x8800928
        0x002089a0:    886b        k.      LDRH     r3,[r5,#2]
        0x002089a2:    2201        ."      MOVS     r2,#1
        0x002089a4:    39c0        .9      SUBS     r1,r1,#0xc0
        0x002089a6:    4638        8F      MOV      r0,r7
        0x002089a8:    f5fff859    ..Y.    BL       log_buffer ; 0x7a5e
;;;515                if (result_data.p_char_desc_uuid16_disc_data->uuid16 == GATT_UUID_CHAR_CLIENT_CONFIG)
        0x002089ac:    8868        h.      LDRH     r0,[r5,#2]
        0x002089ae:    f5a05124    ..$Q    SUB      r1,r0,#0x2900
        0x002089b2:    3902        .9      SUBS     r1,#2
        0x002089b4:    d1f2        ..      BNE      0x20899c ; simp_ble_client_discover_result_cb + 182
;;;516                {
;;;517                    handle = result_data.p_char_desc_uuid16_disc_data->handle;
        0x002089b6:    882d        -.      LDRH     r5,[r5,#0]
;;;518    				APP_PRINT_INFO1("vsop 2 DISC_RESULT_CHAR_DESC_UUID16: handle , 0x%02X",handle);
        0x002089b8:    49a9        .I      LDR      r1,[pc,#676] ; [0x208c60] = 0x8800928
        0x002089ba:    462b        +F      MOV      r3,r5
        0x002089bc:    2201        ."      MOVS     r2,#1
        0x002089be:    3988        .9      SUBS     r1,r1,#0x88
        0x002089c0:    4638        8F      MOV      r0,r7
        0x002089c2:    f5fff84c    ..L.    BL       log_buffer ; 0x7a5e
;;;519    				
;;;520                    if ((handle > hdl_cache[HDL_SIMBLE_V3_NOTIFY])
        0x002089c6:    8920         .      LDRH     r0,[r4,#8]
        0x002089c8:    42a8        .B      CMP      r0,r5
        0x002089ca:    d20b        ..      BCS      0x2089e4 ; simp_ble_client_discover_result_cb + 254
;;;521                        && (handle < hdl_cache[HDL_SIMBLE_V4_INDICATE]))
        0x002089cc:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x002089ce:    42a8        .B      CMP      r0,r5
        0x002089d0:    d908        ..      BLS      0x2089e4 ; simp_ble_client_discover_result_cb + 254
;;;522                    {
;;;523                    	APP_PRINT_INFO1("vsopxxxxxxxxxxxxxxxxx1, handle=%d",handle);
        0x002089d2:    49a3        .I      LDR      r1,[pc,#652] ; [0x208c60] = 0x8800928
        0x002089d4:    462b        +F      MOV      r3,r5
        0x002089d6:    2201        ."      MOVS     r2,#1
        0x002089d8:    3950        P9      SUBS     r1,r1,#0x50
        0x002089da:    4638        8F      MOV      r0,r7
        0x002089dc:    f5fff83f    ..?.    BL       log_buffer ; 0x7a5e
;;;524                        hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD] = handle;
        0x002089e0:    8165        e.      STRH     r5,[r4,#0xa]
        0x002089e2:    bdf8        ..      POP      {r3-r7,pc}
;;;525                    }
;;;526                    else if ((handle > hdl_cache[HDL_SIMBLE_V4_INDICATE]) &&
        0x002089e4:    89a0        ..      LDRH     r0,[r4,#0xc]
        0x002089e6:    42a8        .B      CMP      r0,r5
        0x002089e8:    d2fb        ..      BCS      0x2089e2 ; simp_ble_client_discover_result_cb + 252
;;;527                             (hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD] == 0))
        0x002089ea:    89e0        ..      LDRH     r0,[r4,#0xe]
        0x002089ec:    2800        .(      CMP      r0,#0
        0x002089ee:    d1f8        ..      BNE      0x2089e2 ; simp_ble_client_discover_result_cb + 252
;;;528                    {
;;;529                    
;;;530    					APP_PRINT_INFO1("vsopxxxxxxxxxxxxxxxxx2, handle=%d",handle);
        0x002089f0:    499b        .I      LDR      r1,[pc,#620] ; [0x208c60] = 0x8800928
        0x002089f2:    462b        +F      MOV      r3,r5
        0x002089f4:    2201        ."      MOVS     r2,#1
        0x002089f6:    3928        (9      SUBS     r1,r1,#0x28
        0x002089f8:    4638        8F      MOV      r0,r7
        0x002089fa:    f5fff830    ..0.    BL       log_buffer ; 0x7a5e
;;;531                        hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD] = handle;
        0x002089fe:    81e5        ..      STRH     r5,[r4,#0xe]
;;;532                    }
;;;533                }
;;;534                break;
;;;535    
;;;536            default:
;;;537                APP_PRINT_ERROR0("simp_handle_discover_result: Invalid Discovery Result Type!");
;;;538                break;
;;;539            }
;;;540        }
;;;541    
;;;542        return;
;;;543    }
        0x00208a00:    bdf8        ..      POP      {r3-r7,pc}
    simp_ble_client_read_result_cb
;;;544    
;;;545    static void simp_ble_client_read_result_cb(uint8_t conn_id,  uint16_t cause,
;;;546                                               uint16_t handle, uint16_t value_size, uint8_t *p_value)
;;;547    {
        0x00208a02:    e92d4fff    -..O    PUSH     {r0-r11,lr}
        0x00208a06:    b087        ..      SUB      sp,sp,#0x1c
        0x00208a08:    f8dfb24c    ..L.    LDR      r11,[pc,#588] ; [0x208c58] = 0x20d0a8
        0x00208a0c:    9807        ..      LDR      r0,[sp,#0x1c]
        0x00208a0e:    460c        .F      MOV      r4,r1
        0x00208a10:    eb0001c0    ....    ADD      r1,r0,r0,LSL #3
        0x00208a14:    f8db0008    ....    LDR      r0,[r11,#8]
        0x00208a18:    4698        .F      MOV      r8,r3
        0x00208a1a:    eb000641    ..A.    ADD      r6,r0,r1,LSL #1
        0x00208a1e:    4990        .I      LDR      r1,[pc,#576] ; [0x208c60] = 0x8800928
        0x00208a20:    4617        .F      MOV      r7,r2
;;;548        T_SIMP_CLIENT_CB_DATA cb_data;
;;;549        uint16_t *hdl_cache;
;;;550        hdl_cache = simp_table[conn_id].hdl_cache;
        0x00208a22:    9d14        ..      LDR      r5,[sp,#0x50]
;;;551    
;;;552        cb_data.cb_type = SIMP_CLIENT_CB_TYPE_READ_RESULT;
        0x00208a24:    f04f0901    O...    MOV      r9,#1
        0x00208a28:    4613        .F      MOV      r3,r2
        0x00208a2a:    f88d9004    ....    STRB     r9,[sp,#4]
;;;553    
;;;554        APP_PRINT_INFO2("simp_ble_client_read_result_cb: handle 0x%x, cause 0x%x", handle, cause);
        0x00208a2e:    2202        ."      MOVS     r2,#2
        0x00208a30:    3140        @1      ADDS     r1,r1,#0x40
        0x00208a32:    4888        .H      LDR      r0,[pc,#544] ; [0x208c54] = 0x21103002
        0x00208a34:    1cb6        ..      ADDS     r6,r6,#2
        0x00208a36:    9400        ..      STR      r4,[sp,#0]
        0x00208a38:    f5fff811    ....    BL       log_buffer ; 0x7a5e
;;;555        cb_data.cb_content.read_result.cause = cause;
        0x00208a3c:    f8ad4014    ...@    STRH     r4,[sp,#0x14]
;;;556    
;;;557        if (handle == hdl_cache[HDL_SIMBLE_V1_READ])
        0x00208a40:    88b0        ..      LDRH     r0,[r6,#4]
        0x00208a42:    f04f0a00    O...    MOV      r10,#0
        0x00208a46:    42b8        .B      CMP      r0,r7
        0x00208a48:    d10a        ..      BNE      0x208a60 ; simp_ble_client_read_result_cb + 94
;;;558        {
;;;559            cb_data.cb_content.read_result.type = SIMP_READ_V1_READ;
        0x00208a4a:    4650        PF      MOV      r0,r10
        0x00208a4c:    f88da008    ....    STRB     r10,[sp,#8]
;;;560            if (cause == GAP_SUCCESS)
        0x00208a50:    b114        ..      CBZ      r4,0x208a58 ; simp_ble_client_read_result_cb + 86
        0x00208a52:    f8ad000c    ....    STRH     r0,[sp,#0xc]
        0x00208a56:    e04b        K.      B        0x208af0 ; simp_ble_client_read_result_cb + 238
;;;561            {
;;;562                cb_data.cb_content.read_result.data.v1_read.p_value = p_value;
;;;563                cb_data.cb_content.read_result.data.v1_read.value_size = value_size;
        0x00208a58:    9504        ..      STR      r5,[sp,#0x10]
        0x00208a5a:    f8ad800c    ....    STRH     r8,[sp,#0xc]
        0x00208a5e:    e047        G.      B        0x208af0 ; simp_ble_client_read_result_cb + 238
;;;564            }
;;;565            else
;;;566            {
;;;567                cb_data.cb_content.read_result.data.v1_read.value_size = 0;
;;;568            }
;;;569        }
;;;570        else if (handle == hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD])
        0x00208a60:    8970        p.      LDRH     r0,[r6,#0xa]
        0x00208a62:    42b8        .B      CMP      r0,r7
        0x00208a64:    d115        ..      BNE      0x208a92 ; simp_ble_client_read_result_cb + 144
;;;571        {
;;;572            cb_data.cb_content.read_result.type = SIMP_READ_V3_NOTIFY_CCCD;
        0x00208a66:    4649        IF      MOV      r1,r9
        0x00208a68:    f88d9008    ....    STRB     r9,[sp,#8]
;;;573            if (cause == GAP_SUCCESS)
        0x00208a6c:    bbec        ..      CBNZ     r4,0x208aea ; simp_ble_client_read_result_cb + 232
;;;574            {
;;;575                uint16_t ccc_bit;
;;;576                if (value_size != 2)
        0x00208a6e:    4640        @F      MOV      r0,r8
        0x00208a70:    f1b80f02    ....    CMP      r8,#2
        0x00208a74:    d004        ..      BEQ      0x208a80 ; simp_ble_client_read_result_cb + 126
;;;577                {
;;;578                    PROFILE_PRINT_ERROR1("simp_ble_client_read_result_cb: invalid cccd len %d", value_size);
        0x00208a76:    497a        zI      LDR      r1,[pc,#488] ; [0x208c60] = 0x8800928
        0x00208a78:    2201        ."      MOVS     r2,#1
        0x00208a7a:    4603        .F      MOV      r3,r0
        0x00208a7c:    317c        |1      ADDS     r1,r1,#0x7c
;;;579                    return;
        0x00208a7e:    e01e        ..      B        0x208abe ; simp_ble_client_read_result_cb + 188
;;;580                }
;;;581                LE_ARRAY_TO_UINT16(ccc_bit, p_value);
        0x00208a80:    7828        (x      LDRB     r0,[r5,#0]
        0x00208a82:    786a        jx      LDRB     r2,[r5,#1]
        0x00208a84:    eb002002    ...     ADD      r0,r0,r2,LSL #8
;;;582    
;;;583                if (ccc_bit & GATT_CLIENT_CHAR_CONFIG_NOTIFY)
        0x00208a88:    07c0        ..      LSLS     r0,r0,#31
        0x00208a8a:    d02f        /.      BEQ      0x208aec ; simp_ble_client_read_result_cb + 234
;;;584                {
;;;585                    cb_data.cb_content.read_result.data.v3_notify_cccd = true;
        0x00208a8c:    f88d100c    ....    STRB     r1,[sp,#0xc]
        0x00208a90:    e02e        ..      B        0x208af0 ; simp_ble_client_read_result_cb + 238
;;;586                }
;;;587                else
;;;588                {
;;;589                    cb_data.cb_content.read_result.data.v3_notify_cccd = false;
;;;590                }
;;;591            }
;;;592        }
;;;593        else if (handle == hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD])
        0x00208a92:    89f0        ..      LDRH     r0,[r6,#0xe]
        0x00208a94:    42b8        .B      CMP      r0,r7
        0x00208a96:    d116        ..      BNE      0x208ac6 ; simp_ble_client_read_result_cb + 196
;;;594        {
;;;595            cb_data.cb_content.read_result.type = SIMP_READ_V4_INDICATE_CCCD;
        0x00208a98:    2002        .       MOVS     r0,#2
        0x00208a9a:    4971        qI      LDR      r1,[pc,#452] ; [0x208c60] = 0x8800928
        0x00208a9c:    4e6d        mN      LDR      r6,[pc,#436] ; [0x208c54] = 0x21103002
        0x00208a9e:    f88d0008    ....    STRB     r0,[sp,#8]
;;;596    			APP_PRINT_INFO0("vsop------- indicate _cccd 1");		
        0x00208aa2:    2200        ."      MOVS     r2,#0
        0x00208aa4:    31b4        .1      ADDS     r1,r1,#0xb4
        0x00208aa6:    4630        0F      MOV      r0,r6
        0x00208aa8:    f5feffd9    ....    BL       log_buffer ; 0x7a5e
;;;597            if (cause == GAP_SUCCESS)
        0x00208aac:    b9ec        ..      CBNZ     r4,0x208aea ; simp_ble_client_read_result_cb + 232
;;;598            {
;;;599                uint16_t ccc_bit;
;;;600                if (value_size != 2)
        0x00208aae:    4640        @F      MOV      r0,r8
        0x00208ab0:    f1b80f02    ....    CMP      r8,#2
        0x00208ab4:    d00a        ..      BEQ      0x208acc ; simp_ble_client_read_result_cb + 202
;;;601                {
;;;602                    PROFILE_PRINT_ERROR1("simp_ble_client_read_result_cb: invalid cccd len %d", value_size);
        0x00208ab6:    496a        jI      LDR      r1,[pc,#424] ; [0x208c60] = 0x8800928
        0x00208ab8:    2201        ."      MOVS     r2,#1
        0x00208aba:    4603        .F      MOV      r3,r0
        0x00208abc:    31d4        .1      ADDS     r1,r1,#0xd4
        0x00208abe:    4864        dH      LDR      r0,[pc,#400] ; [0x208c50] = 0x21103302
        0x00208ac0:    1e80        ..      SUBS     r0,r0,#2
        0x00208ac2:    f5feffcc    ....    BL       log_buffer ; 0x7a5e
        0x00208ac6:    b00b        ..      ADD      sp,sp,#0x2c
        0x00208ac8:    e8bd8ff0    ....    POP      {r4-r11,pc}
;;;603                    return;
;;;604                }
;;;605                LE_ARRAY_TO_UINT16(ccc_bit, p_value);
        0x00208acc:    7828        (x      LDRB     r0,[r5,#0]
        0x00208ace:    7869        ix      LDRB     r1,[r5,#1]
        0x00208ad0:    2201        ."      MOVS     r2,#1
        0x00208ad2:    eb002001    ...     ADD      r0,r0,r1,LSL #8
        0x00208ad6:    b284        ..      UXTH     r4,r0
;;;606    			APP_PRINT_INFO1("vsop------- indicate _cccd =  %d",ccc_bit);
        0x00208ad8:    4623        #F      MOV      r3,r4
        0x00208ada:    4962        bI      LDR      r1,[pc,#392] ; [0x208c64] = 0x8800a34
        0x00208adc:    4630        0F      MOV      r0,r6
        0x00208ade:    f5feffbe    ....    BL       log_buffer ; 0x7a5e
;;;607    
;;;608                if (ccc_bit & GATT_CLIENT_CHAR_CONFIG_INDICATE)
        0x00208ae2:    07a0        ..      LSLS     r0,r4,#30
        0x00208ae4:    d502        ..      BPL      0x208aec ; simp_ble_client_read_result_cb + 234
;;;609                {
;;;610                    cb_data.cb_content.read_result.data.v4_indicate_cccd = true;
        0x00208ae6:    f88d900c    ....    STRB     r9,[sp,#0xc]
        0x00208aea:    e001        ..      B        0x208af0 ; simp_ble_client_read_result_cb + 238
;;;611                }
;;;612                else
;;;613                {
;;;614                   cb_data.cb_content.read_result.data.v4_indicate_cccd = false;
        0x00208aec:    f88da00c    ....    STRB     r10,[sp,#0xc]
;;;615                }
;;;616            }
;;;617        }
;;;618        else
;;;619        {
;;;620            return;
;;;621        }
;;;622        /* Inform application the read result. */
;;;623        if (simp_client_cb)
        0x00208af0:    f8db3004    ...0    LDR      r3,[r11,#4]
        0x00208af4:    2b00        .+      CMP      r3,#0
        0x00208af6:    d0e6        ..      BEQ      0x208ac6 ; simp_ble_client_read_result_cb + 196
;;;624        {
;;;625            (*simp_client_cb)(simp_client, conn_id, &cb_data);
        0x00208af8:    485b        [H      LDR      r0,[pc,#364] ; [0x208c68] = 0x20d028
        0x00208afa:    aa01        ..      ADD      r2,sp,#4
        0x00208afc:    9907        ..      LDR      r1,[sp,#0x1c]
        0x00208afe:    7800        .x      LDRB     r0,[r0,#0]
        0x00208b00:    4798        .G      BLX      r3
;;;626        }
;;;627    
;;;628        return;
;;;629    }
        0x00208b02:    e7e0        ..      B        0x208ac6 ; simp_ble_client_read_result_cb + 196
    simp_ble_client_write_result_cb
;;;630    
;;;631    static void simp_ble_client_write_result_cb(uint8_t conn_id, T_GATT_WRITE_TYPE type,
;;;632                                                uint16_t handle, uint16_t cause,
;;;633                                                uint8_t credits)
;;;634    {
        0x00208b04:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x00208b08:    4f53        SO      LDR      r7,[pc,#332] ; [0x208c58] = 0x20d0a8
;;; .\..\..\..\src\ble\profile\client\simple_ble_client.c (634)
        0x00208b0a:    4681        .F      MOV      r9,r0
        0x00208b0c:    b087        ..      SUB      sp,sp,#0x1c
        0x00208b0e:    68b9        .h      LDR      r1,[r7,#8]
        0x00208b10:    eb0000c9    ....    ADD      r0,r0,r9,LSL #3
        0x00208b14:    eb010440    ..@.    ADD      r4,r1,r0,LSL #1
        0x00208b18:    461e        .F      MOV      r6,r3
        0x00208b1a:    f04f0802    O...    MOV      r8,#2
        0x00208b1e:    9300        ..      STR      r3,[sp,#0]
        0x00208b20:    4950        PI      LDR      r1,[pc,#320] ; [0x208c64] = 0x8800a34
        0x00208b22:    4615        .F      MOV      r5,r2
        0x00208b24:    4613        .F      MOV      r3,r2
;;;635        T_SIMP_CLIENT_CB_DATA cb_data;
;;;636        uint16_t *hdl_cache;
;;;637        hdl_cache = simp_table[conn_id].hdl_cache;
;;;638        cb_data.cb_type = SIMP_CLIENT_CB_TYPE_WRITE_RESULT;
        0x00208b26:    f88d8004    ....    STRB     r8,[sp,#4]
;;;639    
;;;640        PROFILE_PRINT_INFO2("simp_ble_client_write_result_cb: handle 0x%x, cause 0x%x", handle, cause);
        0x00208b2a:    4642        BF      MOV      r2,r8
        0x00208b2c:    3124        $1      ADDS     r1,r1,#0x24
        0x00208b2e:    4848        HH      LDR      r0,[pc,#288] ; [0x208c50] = 0x21103302
        0x00208b30:    1ca4        ..      ADDS     r4,r4,#2
        0x00208b32:    f5feff94    ....    BL       log_buffer ; 0x7a5e
;;;641        cb_data.cb_content.write_result.cause = cause;
        0x00208b36:    f8ad600a    ...`    STRH     r6,[sp,#0xa]
;;;642    
;;;643        if (handle == hdl_cache[HDL_SIMBLE_V2_WRITE])
        0x00208b3a:    88e0        ..      LDRH     r0,[r4,#6]
        0x00208b3c:    42a8        .B      CMP      r0,r5
        0x00208b3e:    d101        ..      BNE      0x208b44 ; simp_ble_client_write_result_cb + 64
;;;644        {
;;;645            cb_data.cb_content.write_result.type = SIMP_WRITE_V2_WRITE;
        0x00208b40:    2000        .       MOVS     r0,#0
        0x00208b42:    e003        ..      B        0x208b4c ; simp_ble_client_write_result_cb + 72
;;;646        }
;;;647        else if (handle == hdl_cache[HDL_SIMBLE_V3_NOTIFY_CCCD])
        0x00208b44:    8960        `.      LDRH     r0,[r4,#0xa]
        0x00208b46:    42a8        .B      CMP      r0,r5
        0x00208b48:    d103        ..      BNE      0x208b52 ; simp_ble_client_write_result_cb + 78
;;;648        {
;;;649            cb_data.cb_content.write_result.type = SIMP_WRITE_V3_NOTIFY_CCCD;
        0x00208b4a:    2001        .       MOVS     r0,#1
        0x00208b4c:    f88d0008    ....    STRB     r0,[sp,#8]
        0x00208b50:    e004        ..      B        0x208b5c ; simp_ble_client_write_result_cb + 88
;;;650        }
;;;651        else if (handle == hdl_cache[HDL_SIMBLE_V4_INDICATE_CCCD])
        0x00208b52:    89e0        ..      LDRH     r0,[r4,#0xe]
        0x00208b54:    42a8        .B      CMP      r0,r5
        0x00208b56:    d109        ..      BNE      0x208b6c ; simp_ble_client_write_result_cb + 104
;;;652        {
;;;653            cb_data.cb_content.write_result.type = SIMP_WRITE_V4_INDICATE_CCCD;
        0x00208b58:    f88d8008    ....    STRB     r8,[sp,#8]
;;;654        }
;;;655        else
;;;656        {
;;;657            return;
;;;658        }
;;;659        /* Inform application the write result. */
;;;660        if (simp_client_cb)
        0x00208b5c:    687b        {h      LDR      r3,[r7,#4]
        0x00208b5e:    2b00        .+      CMP      r3,#0
        0x00208b60:    d004        ..      BEQ      0x208b6c ; simp_ble_client_write_result_cb + 104
;;;661        {
;;;662            (*simp_client_cb)(simp_client, conn_id, &cb_data);
        0x00208b62:    4841        AH      LDR      r0,[pc,#260] ; [0x208c68] = 0x20d028
        0x00208b64:    aa01        ..      ADD      r2,sp,#4
        0x00208b66:    4649        IF      MOV      r1,r9
        0x00208b68:    7800        .x      LDRB     r0,[r0,#0]
        0x00208b6a:    4798        .G      BLX      r3
;;;663        }
;;;664    
;;;665        return;
;;;666    }
        0x00208b6c:    b007        ..      ADD      sp,sp,#0x1c
        0x00208b6e:    e8bd83f0    ....    POP      {r4-r9,pc}
    simp_ble_client_notif_ind_result_cb
;;;667    
;;;668    static T_APP_RESULT simp_ble_client_notif_ind_result_cb(uint8_t conn_id, bool notify,
;;;669                                                            uint16_t handle,
;;;670                                                            uint16_t value_size, uint8_t *p_value)
;;;671    {
        0x00208b72:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x00208b76:    4f38        8O      LDR      r7,[pc,#224] ; [0x208c58] = 0x20d0a8
        0x00208b78:    4681        .F      MOV      r9,r0
        0x00208b7a:    b086        ..      SUB      sp,sp,#0x18
        0x00208b7c:    68b9        .h      LDR      r1,[r7,#8]
        0x00208b7e:    eb0000c9    ....    ADD      r0,r0,r9,LSL #3
        0x00208b82:    eb010040    ..@.    ADD      r0,r1,r0,LSL #1
        0x00208b86:    2103        .!      MOVS     r1,#3
        0x00208b88:    f88d1000    ....    STRB     r1,[sp,#0]
        0x00208b8c:    8941        A.      LDRH     r1,[r0,#0xa]
        0x00208b8e:    4614        .F      MOV      r4,r2
        0x00208b90:    9e0e        ..      LDR      r6,[sp,#0x38]
        0x00208b92:    f8dfa0c0    ....    LDR      r10,[pc,#192] ; [0x208c54] = 0x21103002
        0x00208b96:    1c80        ..      ADDS     r0,r0,#2
        0x00208b98:    461d        .F      MOV      r5,r3
        0x00208b9a:    f04f0800    O...    MOV      r8,#0
        0x00208b9e:    42a1        .B      CMP      r1,r4
        0x00208ba0:    d108        ..      BNE      0x208bb4 ; simp_ble_client_notif_ind_result_cb + 66
;;;672        T_APP_RESULT app_result = APP_RESULT_SUCCESS;
;;;673        T_SIMP_CLIENT_CB_DATA cb_data;
;;;674        uint16_t *hdl_cache;
;;;675        hdl_cache = simp_table[conn_id].hdl_cache;
;;;676    
;;;677        cb_data.cb_type = SIMP_CLIENT_CB_TYPE_NOTIF_IND_RESULT;
;;;678    
;;;679        if (handle == hdl_cache[HDL_SIMBLE_V3_NOTIFY])
;;;680        {
;;;681        	APP_PRINT_INFO1("vsop------------HDL_SIMBLE_V3_NOTIFY %d",handle);
        0x00208ba2:    4930        0I      LDR      r1,[pc,#192] ; [0x208c64] = 0x8800a34
        0x00208ba4:    4613        .F      MOV      r3,r2
        0x00208ba6:    2201        ."      MOVS     r2,#1
        0x00208ba8:    3160        `1      ADDS     r1,r1,#0x60
        0x00208baa:    4650        PF      MOV      r0,r10
        0x00208bac:    f5feff57    ..W.    BL       log_buffer ; 0x7a5e
;;;682            cb_data.cb_content.notif_ind_data.type = SIMP_V3_NOTIFY;
        0x00208bb0:    2000        .       MOVS     r0,#0
;;;683            cb_data.cb_content.notif_ind_data.data.value_size = value_size;
;;;684            cb_data.cb_content.notif_ind_data.data.p_value = p_value;
        0x00208bb2:    e00b        ..      B        0x208bcc ; simp_ble_client_notif_ind_result_cb + 90
;;;685        }
;;;686        else if (handle == hdl_cache[HDL_SIMBLE_V4_INDICATE])
        0x00208bb4:    8980        ..      LDRH     r0,[r0,#0xc]
        0x00208bb6:    4613        .F      MOV      r3,r2
        0x00208bb8:    42a0        .B      CMP      r0,r4
        0x00208bba:    f04f0201    O...    MOV      r2,#1
        0x00208bbe:    d122        ".      BNE      0x208c06 ; simp_ble_client_notif_ind_result_cb + 148
;;;687        {
;;;688        	APP_PRINT_INFO1("vsop------------HDL_SIMBLE_V4_INDICATE %d",handle);
        0x00208bc0:    4928        (I      LDR      r1,[pc,#160] ; [0x208c64] = 0x8800a34
        0x00208bc2:    4650        PF      MOV      r0,r10
        0x00208bc4:    318c        .1      ADDS     r1,r1,#0x8c
        0x00208bc6:    f5feff4a    ..J.    BL       log_buffer ; 0x7a5e
;;;689            cb_data.cb_content.notif_ind_data.type = SIMP_V4_INDICATE;
        0x00208bca:    2001        .       MOVS     r0,#1
        0x00208bcc:    f88d0004    ....    STRB     r0,[sp,#4]
;;;690            cb_data.cb_content.notif_ind_data.data.value_size = value_size;
        0x00208bd0:    f8ad5008    ...P    STRH     r5,[sp,#8]
;;;691            cb_data.cb_content.notif_ind_data.data.p_value = p_value;
;;;692        }
;;;693        else
;;;694        {
;;;695        	APP_PRINT_INFO1("vsop------------no handle %d",handle);
;;;696            return app_result;
;;;697        }
;;;698        /* Inform application the notif/ind result. */
;;;699        if (simp_client_cb)
        0x00208bd4:    9603        ..      STR      r6,[sp,#0xc]
        0x00208bd6:    6878        xh      LDR      r0,[r7,#4]
        0x00208bd8:    b168        h.      CBZ      r0,0x208bf6 ; simp_ble_client_notif_ind_result_cb + 132
;;;700        {
;;;701        	APP_PRINT_INFO1("vsop------------simp_client_cb %d",handle);
        0x00208bda:    4922        "I      LDR      r1,[pc,#136] ; [0x208c64] = 0x8800a34
        0x00208bdc:    4623        #F      MOV      r3,r4
        0x00208bde:    2201        ."      MOVS     r2,#1
        0x00208be0:    31dc        .1      ADDS     r1,r1,#0xdc
        0x00208be2:    4650        PF      MOV      r0,r10
        0x00208be4:    f5feff3b    ..;.    BL       log_buffer ; 0x7a5e
;;;702            app_result = (*simp_client_cb)(simp_client, conn_id, &cb_data);
        0x00208be8:    481f        .H      LDR      r0,[pc,#124] ; [0x208c68] = 0x20d028
        0x00208bea:    687b        {h      LDR      r3,[r7,#4]
        0x00208bec:    466a        jF      MOV      r2,sp
        0x00208bee:    4649        IF      MOV      r1,r9
        0x00208bf0:    7800        .x      LDRB     r0,[r0,#0]
        0x00208bf2:    4798        .G      BLX      r3
        0x00208bf4:    4680        .F      MOV      r8,r0
;;;703        }
;;;704    	APP_PRINT_INFO1("vsop------------return %d",handle);
        0x00208bf6:    491d        .I      LDR      r1,[pc,#116] ; [0x208c6c] = 0x8800b38
        0x00208bf8:    4623        #F      MOV      r3,r4
        0x00208bfa:    2201        ."      MOVS     r2,#1
        0x00208bfc:    4650        PF      MOV      r0,r10
        0x00208bfe:    f5feff2e    ....    BL       log_buffer ; 0x7a5e
;;;705    
;;;706        return app_result;
        0x00208c02:    4640        @F      MOV      r0,r8
;;;707    }
        0x00208c04:    e618        ..      B        0x208838 ; simp_ble_client_discover_state_cb + 98
        0x00208c06:    4919        .I      LDR      r1,[pc,#100] ; [0x208c6c] = 0x8800b38
        0x00208c08:    3948        H9      SUBS     r1,r1,#0x48
        0x00208c0a:    e7f7        ..      B        0x208bfc ; simp_ble_client_notif_ind_result_cb + 138
    simp_ble_client_disconnect_cb
;;;708    
;;;709    static void simp_ble_client_disconnect_cb(uint8_t conn_id)
;;;710    {
        0x00208c0c:    b510        ..      PUSH     {r4,lr}
        0x00208c0e:    4917        .I      LDR      r1,[pc,#92] ; [0x208c6c] = 0x8800b38
;;; .\..\..\..\src\ble\profile\client\simple_ble_client.c (710)
        0x00208c10:    4604        .F      MOV      r4,r0
;;;711        APP_PRINT_INFO0("simp_ble_client_disconnect_cb.");
        0x00208c12:    2200        ."      MOVS     r2,#0
        0x00208c14:    3120         1      ADDS     r1,r1,#0x20
        0x00208c16:    480f        .H      LDR      r0,[pc,#60] ; [0x208c54] = 0x21103002
        0x00208c18:    f5feff21    ..!.    BL       log_buffer ; 0x7a5e
;;;712        if (conn_id >= simp_link_num)
        0x00208c1c:    480e        .H      LDR      r0,[pc,#56] ; [0x208c58] = 0x20d0a8
        0x00208c1e:    7801        .x      LDRB     r1,[r0,#0]
        0x00208c20:    428c        .B      CMP      r4,r1
        0x00208c22:    d309        ..      BCC      0x208c38 ; simp_ble_client_disconnect_cb + 44
;;;713        {
;;;714            PROFILE_PRINT_ERROR1("simp_ble_client_disconnect_cb: failed invalid conn_id %d", conn_id);
        0x00208c24:    4911        .I      LDR      r1,[pc,#68] ; [0x208c6c] = 0x8800b38
        0x00208c26:    4623        #F      MOV      r3,r4
        0x00208c28:    4809        .H      LDR      r0,[pc,#36] ; [0x208c50] = 0x21103302
        0x00208c2a:    2201        ."      MOVS     r2,#1
        0x00208c2c:    3144        D1      ADDS     r1,r1,#0x44
        0x00208c2e:    e8bd4010    ...@    POP      {r4,lr}
        0x00208c32:    1e80        ..      SUBS     r0,r0,#2
        0x00208c34:    f5febf13    ....    B        log_buffer ; 0x7a5e
;;;715            return;
;;;716        }
;;;717        memset(&simp_table[conn_id], 0, sizeof(T_SIMP_LINK));
        0x00208c38:    eb0401c4    ....    ADD      r1,r4,r4,LSL #3
        0x00208c3c:    6880        .h      LDR      r0,[r0,#8]
        0x00208c3e:    e8bd4010    ...@    POP      {r4,lr}
        0x00208c42:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x00208c46:    2112        .!      MOVS     r1,#0x12
        0x00208c48:    f651b9e8    Q...    B        __aeabi_memclr ; 0x5a01c
    $d
        0x00208c4c:    08800654    T...    DCD    142607956
        0x00208c50:    21103302    .3.!    DCD    554709762
        0x00208c54:    21103002    .0.!    DCD    554708994
        0x00208c58:    0020d0a8    .. .    DCD    2150568
        0x00208c5c:    0880076c    l...    DCD    142608236
        0x00208c60:    08800928    (...    DCD    142608680
        0x00208c64:    08800a34    4...    DCD    142608948
        0x00208c68:    0020d028    (. .    DCD    2150440
        0x00208c6c:    08800b38    8...    DCD    142609208
    $t
    simp_ble_add_client
;;;718        return;
;;;719    }
;;;720    
;;;721    /**
;;;722     * @brief Simple BLE Client Callbacks.
;;;723    */
;;;724    const T_FUN_CLIENT_CBS simp_ble_client_cbs =
;;;725    {
;;;726        simp_ble_client_discover_state_cb,   //!< Discovery State callback function pointer
;;;727        simp_ble_client_discover_result_cb,  //!< Discovery result callback function pointer
;;;728        simp_ble_client_read_result_cb,      //!< Read response callback function pointer
;;;729        simp_ble_client_write_result_cb,     //!< Write result callback function pointer
;;;730        simp_ble_client_notif_ind_result_cb,  //!< Notify Indicate callback function pointer
;;;731        simp_ble_client_disconnect_cb       //!< Link disconnection callback function pointer
;;;732    };
;;;733    
;;;734    /**
;;;735      * @brief      Add simple ble service client to application.
;;;736      * @param[in]  app_cb pointer of app callback function to handle specific client module data.
;;;737      * @param[in]  link_num initialize link num.
;;;738      * @return Client ID of the specific client module.
;;;739      * @retval 0xff failed.
;;;740      * @retval other success.
;;;741      *
;;;742      * <b>Example usage</b>
;;;743      * \code{.c}
;;;744        void app_le_profile_init(void)
;;;745        {
;;;746            client_init(1);
;;;747            simple_ble_client_id = simp_ble_add_client(app_client_callback, APP_MAX_LINKS);
;;;748        }
;;;749      * \endcode
;;;750      */
;;;751    T_CLIENT_ID simp_ble_add_client(P_FUN_GENERAL_APP_CB app_cb, uint8_t link_num)
;;;752    {
        0x00208c70:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00208c74:    4607        .F      MOV      r7,r0
        0x00208c76:    460c        .F      MOV      r4,r1
        0x00208c78:    2904        .)      CMP      r1,#4
;;; .\..\..\..\src\ble\profile\client\simple_ble_client.c (752)
        0x00208c7a:    d907        ..      BLS      0x208c8c ; simp_ble_add_client + 28
;;;753        uint16_t size;
;;;754        if (link_num > SIMP_MAX_LINKS)
;;;755        {
;;;756            PROFILE_PRINT_ERROR1("simp_ble_add_client: invalid link_num %d", link_num);
        0x00208c7c:    460b        .F      MOV      r3,r1
        0x00208c7e:    2201        ."      MOVS     r2,#1
        0x00208c80:    4916        .I      LDR      r1,[pc,#88] ; [0x208cdc] = 0x8800bb8
        0x00208c82:    4817        .H      LDR      r0,[pc,#92] ; [0x208ce0] = 0x21103300
        0x00208c84:    f5fefeeb    ....    BL       log_buffer ; 0x7a5e
;;;757            return 0xff;
        0x00208c88:    20ff        .       MOVS     r0,#0xff
        0x00208c8a:    e455        U.      B        0x208538 ; simp_ble_client_read_by_handle + 152
;;;758        }
;;;759        if (false == client_register_spec_client_cb(&simp_client, &simp_ble_client_cbs))
        0x00208c8c:    4915        .I      LDR      r1,[pc,#84] ; [0x208ce4] = 0x20c064
        0x00208c8e:    4816        .H      LDR      r0,[pc,#88] ; [0x208ce8] = 0x20d028
        0x00208c90:    f645fb70    E.p.    BL       client_register_spec_client_cb ; 0x4e374
        0x00208c94:    4e14        .N      LDR      r6,[pc,#80] ; [0x208ce8] = 0x20d028
        0x00208c96:    b1b0        ..      CBZ      r0,0x208cc6 ; simp_ble_add_client + 86
;;;760        {
;;;761            simp_client = CLIENT_PROFILE_GENERAL_ID;
;;;762            APP_PRINT_ERROR0("simp_ble_add_client failed");
;;;763            return simp_client;
;;;764        }
;;;765        APP_PRINT_INFO1("simp_ble_add_client: simp_client %d", simp_client);
        0x00208c98:    4910        .I      LDR      r1,[pc,#64] ; [0x208cdc] = 0x8800bb8
        0x00208c9a:    7833        3x      LDRB     r3,[r6,#0]
        0x00208c9c:    2201        ."      MOVS     r2,#1
        0x00208c9e:    314c        L1      ADDS     r1,r1,#0x4c
        0x00208ca0:    4812        .H      LDR      r0,[pc,#72] ; [0x208cec] = 0x21103002
        0x00208ca2:    f5fefedc    ....    BL       log_buffer ; 0x7a5e
;;;766    
;;;767        /* register callback for profile to inform application that some events happened. */
;;;768        simp_client_cb = app_cb;
        0x00208ca6:    4d12        .M      LDR      r5,[pc,#72] ; [0x208cf0] = 0x20d0a8
        0x00208ca8:    eb0400c4    ....    ADD      r0,r4,r4,LSL #3
        0x00208cac:    4a0d        .J      LDR      r2,[pc,#52] ; [0x208ce4] = 0x20c064
;;;769        simp_link_num = link_num;
        0x00208cae:    606f        o`      STR      r7,[r5,#4]
        0x00208cb0:    0041        A.      LSLS     r1,r0,#1
        0x00208cb2:    702c        ,p      STRB     r4,[r5,#0]
;;;770        size = simp_link_num * sizeof(T_SIMP_LINK);
;;;771        simp_table = os_mem_zalloc(RAM_TYPE_DATA_ON, size);
        0x00208cb4:    f2403303    @..3    MOV      r3,#0x303
        0x00208cb8:    3218        .2      ADDS     r2,r2,#0x18
        0x00208cba:    2000        .       MOVS     r0,#0
        0x00208cbc:    f61df87c    ..|.    BL       os_mem_zalloc_intern ; 0x25db8
        0x00208cc0:    60a8        .`      STR      r0,[r5,#8]
;;;772    
;;;773        return simp_client;
        0x00208cc2:    7830        0x      LDRB     r0,[r6,#0]
;;;774    }
        0x00208cc4:    e438        8.      B        0x208538 ; simp_ble_client_read_by_handle + 152
        0x00208cc6:    20ff        .       MOVS     r0,#0xff
        0x00208cc8:    7030        0p      STRB     r0,[r6,#0]
        0x00208cca:    4904        .I      LDR      r1,[pc,#16] ; [0x208cdc] = 0x8800bb8
        0x00208ccc:    4807        .H      LDR      r0,[pc,#28] ; [0x208cec] = 0x21103002
        0x00208cce:    2200        ."      MOVS     r2,#0
        0x00208cd0:    312c        ,1      ADDS     r1,r1,#0x2c
        0x00208cd2:    1e80        ..      SUBS     r0,r0,#2
        0x00208cd4:    f5fefec3    ....    BL       log_buffer ; 0x7a5e
        0x00208cd8:    e7f3        ..      B        0x208cc2 ; simp_ble_add_client + 82
    $d
        0x00208cda:    0000        ..      DCW    0
        0x00208cdc:    08800bb8    ....    DCD    142609336
        0x00208ce0:    21103300    .3.!    DCD    554709760
        0x00208ce4:    0020c064    d. .    DCD    2146404
        0x00208ce8:    0020d028    (. .    DCD    2150440
        0x00208cec:    21103002    .0.!    DCD    554708994
        0x00208cf0:    0020d0a8    .. .    DCD    2150568
    $t
    .text
    bas_start_discovery
;;; .\..\..\..\src\ble\profile\client\bas_client.c
;;;62     {
        0x00208cf4:    b570        p.      PUSH     {r4-r6,lr}
        0x00208cf6:    4605        .F      MOV      r5,r0
;;;63         PROFILE_PRINT_INFO0("bas_start_discovery");
        0x00208cf8:    2200        ."      MOVS     r2,#0
        0x00208cfa:    49fe        .I      LDR      r1,[pc,#1016] ; [0x2090f4] = 0x8800c2c
        0x00208cfc:    48fe        .H      LDR      r0,[pc,#1016] ; [0x2090f8] = 0x21103302
        0x00208cfe:    f5fefeae    ....    BL       log_buffer ; 0x7a5e
;;;64         if (conn_id >= bas_link_num)
        0x00208d02:    48fe        .H      LDR      r0,[pc,#1016] ; [0x2090fc] = 0x20d0b4
        0x00208d04:    7801        .x      LDRB     r1,[r0,#0]
        0x00208d06:    428d        .B      CMP      r5,r1
        0x00208d08:    d308        ..      BCC      0x208d1c ; bas_start_discovery + 40
;;;65         {
;;;66             PROFILE_PRINT_ERROR1("bas_start_discovery: failed invalid conn_id %d", conn_id);
        0x00208d0a:    49fa        .I      LDR      r1,[pc,#1000] ; [0x2090f4] = 0x8800c2c
        0x00208d0c:    48fa        .H      LDR      r0,[pc,#1000] ; [0x2090f8] = 0x21103302
        0x00208d0e:    462b        +F      MOV      r3,r5
        0x00208d10:    2201        ."      MOVS     r2,#1
        0x00208d12:    3118        .1      ADDS     r1,r1,#0x18
        0x00208d14:    1e80        ..      SUBS     r0,r0,#2
        0x00208d16:    f5fefea2    ....    BL       log_buffer ; 0x7a5e
;;;67             return false;
        0x00208d1a:    e013        ..      B        0x208d44 ; bas_start_discovery + 80
;;;68         }
;;;69         /* First clear handle cache. */
;;;70         memset(&bas_table[conn_id], 0, sizeof(T_BAS_LINK));
        0x00208d1c:    6880        .h      LDR      r0,[r0,#8]
        0x00208d1e:    eb050445    ..E.    ADD      r4,r5,r5,LSL #1
        0x00208d22:    eb000184    ....    ADD      r1,r0,r4,LSL #2
        0x00208d26:    2200        ."      MOVS     r2,#0
        0x00208d28:    600a        .`      STR      r2,[r1,#0]
        0x00208d2a:    604a        J`      STR      r2,[r1,#4]
        0x00208d2c:    608a        .`      STR      r2,[r1,#8]
;;;71         bas_table[conn_id].disc_state = DISC_BAS_START;
        0x00208d2e:    2101        .!      MOVS     r1,#1
        0x00208d30:    f8001024    ..$.    STRB     r1,[r0,r4,LSL #2]
;;;72         if (client_by_uuid_srv_discovery(conn_id, bas_client,
        0x00208d34:    48f2        .H      LDR      r0,[pc,#968] ; [0x209100] = 0x20d029
        0x00208d36:    f641020f    A...    MOV      r2,#0x180f
        0x00208d3a:    7801        .x      LDRB     r1,[r0,#0]
        0x00208d3c:    4628        (F      MOV      r0,r5
        0x00208d3e:    f645fbf3    E...    BL       client_by_uuid_srv_discovery ; 0x4e528
        0x00208d42:    b108        ..      CBZ      r0,0x208d48 ; bas_start_discovery + 84
        0x00208d44:    2000        .       MOVS     r0,#0
        0x00208d46:    bd70        p.      POP      {r4-r6,pc}
;;;73                                          GATT_UUID_BATTERY) == GAP_CAUSE_SUCCESS)
;;;74         {
;;;75             return true;
        0x00208d48:    2001        .       MOVS     r0,#1
;;;76         }
;;;77         return false;
;;;78     }
        0x00208d4a:    bd70        p.      POP      {r4-r6,pc}
    bas_read_battery_level
;;;79     
;;;80     /**
;;;81       * @brief  Used by application, to read battery level.
;;;82       * @param[in]  conn_id connection ID.
;;;83       * @retval true send request to upper stack success.
;;;84       * @retval false send request to upper stack failed.
;;;85       *
;;;86       * <b>Example usage</b>
;;;87       * \code{.c}
;;;88         static T_USER_CMD_PARSE_RESULT cmd_basread(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;89         {
;;;90             uint8_t conn_id = p_parse_value->dw_param[0];
;;;91             bool ret = false;
;;;92             ret = bas_read_battery_level(conn_id);
;;;93             ......
;;;94         }
;;;95       * \endcode
;;;96       */
;;;97     bool bas_read_battery_level(uint8_t conn_id)
;;;98     {
        0x00208d4c:    b510        ..      PUSH     {r4,lr}
;;;99         if (conn_id >= bas_link_num)
        0x00208d4e:    49eb        .I      LDR      r1,[pc,#940] ; [0x2090fc] = 0x20d0b4
        0x00208d50:    4ce9        .L      LDR      r4,[pc,#932] ; [0x2090f8] = 0x21103302
        0x00208d52:    780a        .x      LDRB     r2,[r1,#0]
        0x00208d54:    1ea4        ..      SUBS     r4,r4,#2
        0x00208d56:    4290        .B      CMP      r0,r2
        0x00208d58:    d307        ..      BCC      0x208d6a ; bas_read_battery_level + 30
;;;100        {
;;;101            PROFILE_PRINT_ERROR1("bas_read_battery_level: failed invalid conn_id %d", conn_id);
        0x00208d5a:    49e6        .I      LDR      r1,[pc,#920] ; [0x2090f4] = 0x8800c2c
        0x00208d5c:    4603        .F      MOV      r3,r0
        0x00208d5e:    2201        ."      MOVS     r2,#1
        0x00208d60:    314c        L1      ADDS     r1,r1,#0x4c
        0x00208d62:    4620         F      MOV      r0,r4
        0x00208d64:    f5fefe7b    ..{.    BL       log_buffer ; 0x7a5e
;;;102            return false;
        0x00208d68:    e011        ..      B        0x208d8e ; bas_read_battery_level + 66
;;;103        }
;;;104        if (bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL])
        0x00208d6a:    6889        .h      LDR      r1,[r1,#8]
        0x00208d6c:    eb000240    ..@.    ADD      r2,r0,r0,LSL #1
        0x00208d70:    eb010182    ....    ADD      r1,r1,r2,LSL #2
        0x00208d74:    890a        ..      LDRH     r2,[r1,#8]
        0x00208d76:    b122        ".      CBZ      r2,0x208d82 ; bas_read_battery_level + 54
;;;105        {
;;;106            uint16_t handle = bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL];
;;;107            if (client_attr_read(conn_id, bas_client, handle) == GAP_CAUSE_SUCCESS)
        0x00208d78:    49e1        .I      LDR      r1,[pc,#900] ; [0x209100] = 0x20d029
        0x00208d7a:    7809        .x      LDRB     r1,[r1,#0]
        0x00208d7c:    f645fc99    E...    BL       client_attr_read ; 0x4e6b2
        0x00208d80:    b138        8.      CBZ      r0,0x208d92 ; bas_read_battery_level + 70
;;;108            {
;;;109                return true;
;;;110            }
;;;111        }
;;;112        PROFILE_PRINT_ERROR0("bas_read_battery_level: false handle = 0");
        0x00208d82:    49dc        .I      LDR      r1,[pc,#880] ; [0x2090f4] = 0x8800c2c
        0x00208d84:    2200        ."      MOVS     r2,#0
        0x00208d86:    3184        .1      ADDS     r1,r1,#0x84
        0x00208d88:    4620         F      MOV      r0,r4
        0x00208d8a:    f5fefe68    ..h.    BL       log_buffer ; 0x7a5e
;;;113        return false;
        0x00208d8e:    2000        .       MOVS     r0,#0
;;;114    }
        0x00208d90:    bd10        ..      POP      {r4,pc}
        0x00208d92:    2001        .       MOVS     r0,#1
        0x00208d94:    bd10        ..      POP      {r4,pc}
    bas_set_notify
;;;115    /**
;;;116      * @brief  Used by application, to set the notification flag.
;;;117      * @param[in]  conn_id connection ID.
;;;118      * @param[in]  notify value to enable or disable notify.
;;;119      * @retval true send request to upper stack success.
;;;120      * @retval false send request to upper stack failed.
;;;121      *
;;;122      * <b>Example usage</b>
;;;123      * \code{.c}
;;;124        static T_USER_CMD_PARSE_RESULT cmd_bascccd(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;125        {
;;;126            uint8_t conn_id = p_parse_value->dw_param[0];
;;;127            bool notify = p_parse_value->dw_param[1];
;;;128            bool ret;
;;;129            ret = bas_set_notify(conn_id, notify);
;;;130            ......
;;;131        }
;;;132      * \endcode
;;;133      */
;;;134    bool bas_set_notify(uint8_t conn_id, bool notify)
;;;135    {
        0x00208d96:    b5fe        ..      PUSH     {r1-r7,lr}
        0x00208d98:    4ed8        .N      LDR      r6,[pc,#864] ; [0x2090fc] = 0x20d0b4
        0x00208d9a:    460c        .F      MOV      r4,r1
        0x00208d9c:    4fd6        .O      LDR      r7,[pc,#856] ; [0x2090f8] = 0x21103302
        0x00208d9e:    7831        1x      LDRB     r1,[r6,#0]
        0x00208da0:    1ebf        ..      SUBS     r7,r7,#2
        0x00208da2:    4288        .B      CMP      r0,r1
        0x00208da4:    d307        ..      BCC      0x208db6 ; bas_set_notify + 32
;;;136        if (conn_id >= bas_link_num)
;;;137        {
;;;138            PROFILE_PRINT_ERROR1("bas_set_notify: failed invalid conn_id %d", conn_id);
        0x00208da6:    49d3        .I      LDR      r1,[pc,#844] ; [0x2090f4] = 0x8800c2c
        0x00208da8:    4603        .F      MOV      r3,r0
        0x00208daa:    2201        ."      MOVS     r2,#1
        0x00208dac:    31b0        .1      ADDS     r1,r1,#0xb0
        0x00208dae:    4638        8F      MOV      r0,r7
        0x00208db0:    f5fefe55    ..U.    BL       log_buffer ; 0x7a5e
;;;139            return false;
        0x00208db4:    e019        ..      B        0x208dea ; bas_set_notify + 84
;;;140        }
;;;141        if (bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD])
        0x00208db6:    68b1        .h      LDR      r1,[r6,#8]
        0x00208db8:    eb000540    ..@.    ADD      r5,r0,r0,LSL #1
        0x00208dbc:    eb010185    ....    ADD      r1,r1,r5,LSL #2
        0x00208dc0:    894a        J.      LDRH     r2,[r1,#0xa]
        0x00208dc2:    b162        b.      CBZ      r2,0x208dde ; bas_set_notify + 72
;;;142        {
;;;143            uint16_t handle = bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD];
        0x00208dc4:    b293        ..      UXTH     r3,r2
;;;144            uint16_t length = sizeof(uint16_t);
        0x00208dc6:    2102        .!      MOVS     r1,#2
        0x00208dc8:    aa02        ..      ADD      r2,sp,#8
        0x00208dca:    e9cd1200    ....    STRD     r1,r2,[sp,#0]
        0x00208dce:    49cc        .I      LDR      r1,[pc,#816] ; [0x209100] = 0x20d029
;;;145            uint16_t cccd_bits = notify ? 1 : 0;
        0x00208dd0:    f8ad4008    ...@    STRH     r4,[sp,#8]
;;;146            if (client_attr_write(conn_id, bas_client, GATT_WRITE_TYPE_REQ, handle,
        0x00208dd4:    2201        ."      MOVS     r2,#1
        0x00208dd6:    7809        .x      LDRB     r1,[r1,#0]
        0x00208dd8:    f645fd62    E.b.    BL       client_attr_write ; 0x4e8a0
        0x00208ddc:    b138        8.      CBZ      r0,0x208dee ; bas_set_notify + 88
        0x00208dde:    49c5        .I      LDR      r1,[pc,#788] ; [0x2090f4] = 0x8800c2c
        0x00208de0:    2200        ."      MOVS     r2,#0
        0x00208de2:    31e0        .1      ADDS     r1,r1,#0xe0
        0x00208de4:    4638        8F      MOV      r0,r7
        0x00208de6:    f5fefe3a    ..:.    BL       log_buffer ; 0x7a5e
        0x00208dea:    2000        .       MOVS     r0,#0
        0x00208dec:    bdfe        ..      POP      {r1-r7,pc}
;;;147                                  length, (uint8_t *)&cccd_bits) == GAP_CAUSE_SUCCESS)
;;;148            {
;;;149                bas_table[conn_id].write_notify_value = notify;
        0x00208dee:    68b0        .h      LDR      r0,[r6,#8]
        0x00208df0:    eb000085    ....    ADD      r0,r0,r5,LSL #2
        0x00208df4:    7044        Dp      STRB     r4,[r0,#1]
;;;150                return true;
        0x00208df6:    2001        .       MOVS     r0,#1
;;;151            }
;;;152        }
;;;153        PROFILE_PRINT_ERROR0("bas_set_notify: false handle = 0");
;;;154        return false;
;;;155    }
        0x00208df8:    bdfe        ..      POP      {r1-r7,pc}
    bas_read_notify
;;;156    
;;;157    /**
;;;158      * @brief  Used by application, to read the notification flag.
;;;159      * @param[in]  conn_id connection ID.
;;;160      * @retval true send request to upper stack success.
;;;161      * @retval false send request to upper stack failed.
;;;162      *
;;;163      * <b>Example usage</b>
;;;164      * \code{.c}
;;;165        static T_USER_CMD_PARSE_RESULT cmd_basread(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;166        {
;;;167            uint8_t conn_id = p_parse_value->dw_param[0];
;;;168            bool ret = false;
;;;169            ret = bas_read_notify(conn_id);
;;;170            ......
;;;171        }
;;;172      * \endcode
;;;173      */
;;;174    bool bas_read_notify(uint8_t conn_id)
;;;175    {
        0x00208dfa:    b510        ..      PUSH     {r4,lr}
;;;176        if (conn_id >= bas_link_num)
        0x00208dfc:    49bf        .I      LDR      r1,[pc,#764] ; [0x2090fc] = 0x20d0b4
        0x00208dfe:    4cbe        .L      LDR      r4,[pc,#760] ; [0x2090f8] = 0x21103302
        0x00208e00:    780a        .x      LDRB     r2,[r1,#0]
        0x00208e02:    1ea4        ..      SUBS     r4,r4,#2
        0x00208e04:    4290        .B      CMP      r0,r2
        0x00208e06:    d306        ..      BCC      0x208e16 ; bas_read_notify + 28
;;;177        {
;;;178            PROFILE_PRINT_ERROR1("bas_read_notify: failed invalid conn_id %d", conn_id);
        0x00208e08:    4603        .F      MOV      r3,r0
        0x00208e0a:    2201        ."      MOVS     r2,#1
        0x00208e0c:    49bd        .I      LDR      r1,[pc,#756] ; [0x209104] = 0x8800d30
        0x00208e0e:    4620         F      MOV      r0,r4
        0x00208e10:    f5fefe25    ..%.    BL       log_buffer ; 0x7a5e
;;;179            return false;
        0x00208e14:    e011        ..      B        0x208e3a ; bas_read_notify + 64
;;;180        }
;;;181        if (bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD])
        0x00208e16:    6889        .h      LDR      r1,[r1,#8]
        0x00208e18:    eb000240    ..@.    ADD      r2,r0,r0,LSL #1
        0x00208e1c:    eb010182    ....    ADD      r1,r1,r2,LSL #2
        0x00208e20:    894a        J.      LDRH     r2,[r1,#0xa]
        0x00208e22:    b122        ".      CBZ      r2,0x208e2e ; bas_read_notify + 52
;;;182        {
;;;183            uint16_t handle = bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD];
;;;184            if (client_attr_read(conn_id, bas_client, handle) == GAP_CAUSE_SUCCESS)
        0x00208e24:    49b6        .I      LDR      r1,[pc,#728] ; [0x209100] = 0x20d029
        0x00208e26:    7809        .x      LDRB     r1,[r1,#0]
        0x00208e28:    f645fc43    E.C.    BL       client_attr_read ; 0x4e6b2
        0x00208e2c:    b138        8.      CBZ      r0,0x208e3e ; bas_read_notify + 68
;;;185            {
;;;186                return true;
;;;187            }
;;;188        }
;;;189        PROFILE_PRINT_ERROR0("bas_read_battery_level: false handle = 0");
        0x00208e2e:    49b5        .I      LDR      r1,[pc,#724] ; [0x209104] = 0x8800d30
        0x00208e30:    2200        ."      MOVS     r2,#0
        0x00208e32:    3130        01      ADDS     r1,r1,#0x30
        0x00208e34:    4620         F      MOV      r0,r4
        0x00208e36:    f5fefe12    ....    BL       log_buffer ; 0x7a5e
;;;190        return false;
        0x00208e3a:    2000        .       MOVS     r0,#0
;;;191    }
        0x00208e3c:    bd10        ..      POP      {r4,pc}
        0x00208e3e:    2001        .       MOVS     r0,#1
        0x00208e40:    bd10        ..      POP      {r4,pc}
    bas_get_hdl_cache
;;;192    
;;;193    /**
;;;194      * @brief  Used by application, to get handle cache.
;;;195      * @param[in]  conn_id connection ID.
;;;196      * @param[in]  p_hdl_cache pointer of the handle cache table
;;;197      * @param[in]  len the length of handle cache table
;;;198      * @retval true success.
;;;199      * @retval false failed.
;;;200      *
;;;201      * <b>Example usage</b>
;;;202      * \code{.c}
;;;203        static T_USER_CMD_PARSE_RESULT cmd_bashdl(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;204        {
;;;205            uint8_t conn_id = p_parse_value->dw_param[0];
;;;206            uint16_t hdl_cache[HDL_BAS_CACHE_LEN];
;;;207            bool ret = bas_get_hdl_cache(conn_id, hdl_cache,
;;;208                                         sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;209    
;;;210            ......
;;;211        }
;;;212      * \endcode
;;;213      */
;;;214    bool bas_get_hdl_cache(uint8_t conn_id, uint16_t *p_hdl_cache, uint8_t len)
;;;215    {
        0x00208e42:    b570        p.      PUSH     {r4-r6,lr}
        0x00208e44:    460e        .F      MOV      r6,r1
;;;216        if (conn_id >= bas_link_num)
        0x00208e46:    49ad        .I      LDR      r1,[pc,#692] ; [0x2090fc] = 0x20d0b4
        0x00208e48:    4dab        .M      LDR      r5,[pc,#684] ; [0x2090f8] = 0x21103302
        0x00208e4a:    780b        .x      LDRB     r3,[r1,#0]
        0x00208e4c:    1ead        ..      SUBS     r5,r5,#2
        0x00208e4e:    4298        .B      CMP      r0,r3
        0x00208e50:    d304        ..      BCC      0x208e5c ; bas_get_hdl_cache + 26
;;;217        {
;;;218            PROFILE_PRINT_ERROR1("bas_get_hdl_cache: failed invalid conn_id %d", conn_id);
        0x00208e52:    49ac        .I      LDR      r1,[pc,#688] ; [0x209104] = 0x8800d30
        0x00208e54:    2201        ."      MOVS     r2,#1
        0x00208e56:    4603        .F      MOV      r3,r0
        0x00208e58:    315c        \1      ADDS     r1,r1,#0x5c
;;;219            return false;
        0x00208e5a:    e011        ..      B        0x208e80 ; bas_get_hdl_cache + 62
;;;220        }
;;;221        if (bas_table[conn_id].disc_state != DISC_BAS_DONE)
        0x00208e5c:    688b        .h      LDR      r3,[r1,#8]
        0x00208e5e:    eb000040    ..@.    ADD      r0,r0,r0,LSL #1
        0x00208e62:    f8134020    .. @    LDRB     r4,[r3,r0,LSL #2]
        0x00208e66:    2c02        .,      CMP      r4,#2
        0x00208e68:    d004        ..      BEQ      0x208e74 ; bas_get_hdl_cache + 50
        0x00208e6a:    49a6        .I      LDR      r1,[pc,#664] ; [0x209104] = 0x8800d30
        0x00208e6c:    2201        ."      MOVS     r2,#1
        0x00208e6e:    4623        #F      MOV      r3,r4
;;;222        {
;;;223            PROFILE_PRINT_ERROR1("bas_get_hdl_cache: failed invalid state %d", bas_table[conn_id].disc_state);
        0x00208e70:    318c        .1      ADDS     r1,r1,#0x8c
;;;224            return false;
        0x00208e72:    e005        ..      B        0x208e80 ; bas_get_hdl_cache + 62
;;;225        }
;;;226        if (len != sizeof(uint16_t) * HDL_BAS_CACHE_LEN)
        0x00208e74:    2a08        .*      CMP      r2,#8
        0x00208e76:    d008        ..      BEQ      0x208e8a ; bas_get_hdl_cache + 72
;;;227        {
;;;228            PROFILE_PRINT_ERROR1("bas_get_hdl_cache: failed invalid len %d", len);
        0x00208e78:    4613        .F      MOV      r3,r2
        0x00208e7a:    49a2        .I      LDR      r1,[pc,#648] ; [0x209104] = 0x8800d30
        0x00208e7c:    2201        ."      MOVS     r2,#1
        0x00208e7e:    31bc        .1      ADDS     r1,r1,#0xbc
        0x00208e80:    4628        (F      MOV      r0,r5
        0x00208e82:    f5fefdec    ....    BL       log_buffer ; 0x7a5e
;;;229            return false;
        0x00208e86:    2000        .       MOVS     r0,#0
        0x00208e88:    bd70        p.      POP      {r4-r6,pc}
;;;230        }
;;;231        memcpy(p_hdl_cache, bas_table[conn_id].hdl_cache, len);
        0x00208e8a:    eb030180    ....    ADD      r1,r3,r0,LSL #2
        0x00208e8e:    4630        0F      MOV      r0,r6
        0x00208e90:    1d09        ..      ADDS     r1,r1,#4
        0x00208e92:    f651f802    Q...    BL       __aeabi_memcpy ; 0x59e9a
;;;232        return true;
        0x00208e96:    2001        .       MOVS     r0,#1
;;;233    }
        0x00208e98:    bd70        p.      POP      {r4-r6,pc}
    bas_set_hdl_cache
;;;234    
;;;235    /**
;;;236      * @brief  Used by application, to set handle cache.
;;;237      * @param[in]  conn_id connection ID.
;;;238      * @param[in]  p_hdl_cache pointer of the handle cache table
;;;239      * @param[in]  len the length of handle cache table
;;;240      * @retval true success.
;;;241      * @retval false failed.
;;;242      *
;;;243      * <b>Example usage</b>
;;;244      * \code{.c}
;;;245        void app_discov_services(uint8_t conn_id, bool start)
;;;246        {
;;;247            ......
;;;248            if (app_srvs_table.srv_found_flags & APP_DISCOV_BAS_FLAG)
;;;249            {
;;;250                bas_set_hdl_cache(conn_id, app_srvs_table.bas_hdl_cache, sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;251            }
;;;252            ......
;;;253        }
;;;254      * \endcode
;;;255      */
;;;256    bool bas_set_hdl_cache(uint8_t conn_id, uint16_t *p_hdl_cache, uint8_t len)
;;;257    {
        0x00208e9a:    b570        p.      PUSH     {r4-r6,lr}
;;;258        if (conn_id >= bas_link_num)
        0x00208e9c:    4d97        .M      LDR      r5,[pc,#604] ; [0x2090fc] = 0x20d0b4
        0x00208e9e:    4e96        .N      LDR      r6,[pc,#600] ; [0x2090f8] = 0x21103302
        0x00208ea0:    782b        +x      LDRB     r3,[r5,#0]
        0x00208ea2:    1eb6        ..      SUBS     r6,r6,#2
        0x00208ea4:    4298        .B      CMP      r0,r3
        0x00208ea6:    d304        ..      BCC      0x208eb2 ; bas_set_hdl_cache + 24
;;;259        {
;;;260            PROFILE_PRINT_ERROR1("bas_set_hdl_cache: failed invalid conn_id %d", conn_id);
        0x00208ea8:    4996        .I      LDR      r1,[pc,#600] ; [0x209104] = 0x8800d30
        0x00208eaa:    2201        ."      MOVS     r2,#1
        0x00208eac:    4603        .F      MOV      r3,r0
        0x00208eae:    31e8        .1      ADDS     r1,r1,#0xe8
;;;261            return false;
        0x00208eb0:    e00e        ..      B        0x208ed0 ; bas_set_hdl_cache + 54
;;;262        }
;;;263        if (bas_table[conn_id].disc_state != DISC_BAS_IDLE)
        0x00208eb2:    eb000440    ..@.    ADD      r4,r0,r0,LSL #1
        0x00208eb6:    68a8        .h      LDR      r0,[r5,#8]
        0x00208eb8:    f8103024    ..$0    LDRB     r3,[r0,r4,LSL #2]
        0x00208ebc:    b113        ..      CBZ      r3,0x208ec4 ; bas_set_hdl_cache + 42
;;;264        {
;;;265            PROFILE_PRINT_ERROR1("bas_set_hdl_cache: failed invalid state %d", bas_table[conn_id].disc_state);
        0x00208ebe:    2201        ."      MOVS     r2,#1
        0x00208ec0:    4991        .I      LDR      r1,[pc,#580] ; [0x209108] = 0x8800e48
;;;266            return false;
        0x00208ec2:    e005        ..      B        0x208ed0 ; bas_set_hdl_cache + 54
;;;267        }
;;;268        if (len != sizeof(uint16_t) * HDL_BAS_CACHE_LEN)
        0x00208ec4:    2a08        .*      CMP      r2,#8
        0x00208ec6:    d008        ..      BEQ      0x208eda ; bas_set_hdl_cache + 64
;;;269        {
;;;270            PROFILE_PRINT_ERROR1("bas_set_hdl_cache: failed invalid len %d", len);
        0x00208ec8:    4613        .F      MOV      r3,r2
        0x00208eca:    498f        .I      LDR      r1,[pc,#572] ; [0x209108] = 0x8800e48
        0x00208ecc:    2201        ."      MOVS     r2,#1
        0x00208ece:    3130        01      ADDS     r1,r1,#0x30
        0x00208ed0:    4630        0F      MOV      r0,r6
        0x00208ed2:    f5fefdc4    ....    BL       log_buffer ; 0x7a5e
;;;271            return false;
        0x00208ed6:    2000        .       MOVS     r0,#0
        0x00208ed8:    bd70        p.      POP      {r4-r6,pc}
;;;272        }
;;;273        memcpy(bas_table[conn_id].hdl_cache, p_hdl_cache, len);
        0x00208eda:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00208ede:    1d00        ..      ADDS     r0,r0,#4
        0x00208ee0:    f650ffdb    P...    BL       __aeabi_memcpy ; 0x59e9a
;;;274        bas_table[conn_id].disc_state = DISC_BAS_DONE;
        0x00208ee4:    68a9        .h      LDR      r1,[r5,#8]
        0x00208ee6:    2002        .       MOVS     r0,#2
        0x00208ee8:    f8010024    ..$.    STRB     r0,[r1,r4,LSL #2]
;;;275        return true;
        0x00208eec:    2001        .       MOVS     r0,#1
;;;276    }
        0x00208eee:    bd70        p.      POP      {r4-r6,pc}
    bas_client_discover_state_cb
;;;277    
;;;278    static bool bas_start_char_discovery(uint8_t conn_id)
;;;279    {
;;;280        uint16_t start_handle;
;;;281        uint16_t end_handle;
;;;282    
;;;283        PROFILE_PRINT_INFO0("bas_start_char_discovery");
;;;284        start_handle = bas_table[conn_id].hdl_cache[HDL_BAS_SRV_START];
;;;285        end_handle = bas_table[conn_id].hdl_cache[HDL_BAS_SRV_END];
;;;286        if (client_all_char_discovery(conn_id, bas_client, start_handle,
;;;287                                      end_handle) == GAP_CAUSE_SUCCESS)
;;;288        {
;;;289            return true;
;;;290        }
;;;291        return false;
;;;292    }
;;;293    
;;;294    static bool bas_start_char_descriptor_discovery(uint8_t conn_id)
;;;295    {
;;;296        uint16_t start_handle;
;;;297        uint16_t end_handle;
;;;298    
;;;299        PROFILE_PRINT_INFO0("bas_start_char_descriptor_discovery");
;;;300        start_handle = bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL];
;;;301        end_handle = bas_table[conn_id].hdl_cache[HDL_BAS_SRV_END];
;;;302        if (client_all_char_descriptor_discovery(conn_id, bas_client, start_handle,
;;;303                                                 end_handle) == GAP_CAUSE_SUCCESS)
;;;304        {
;;;305            return true;
;;;306        }
;;;307        return false;
;;;308    }
;;;309    
;;;310    static void bas_client_discover_state_cb(uint8_t conn_id,  T_DISCOVERY_STATE discovery_state)
;;;311    {
        0x00208ef0:    e92d47fc    -..G    PUSH     {r2-r10,lr}
        0x00208ef4:    4605        .F      MOV      r5,r0
        0x00208ef6:    4688        .F      MOV      r8,r1
        0x00208ef8:    460b        .F      MOV      r3,r1
        0x00208efa:    2000        .       MOVS     r0,#0
        0x00208efc:    4982        .I      LDR      r1,[pc,#520] ; [0x209108] = 0x8800e48
        0x00208efe:    f8dfa1f8    ....    LDR      r10,[pc,#504] ; [0x2090f8] = 0x21103302
        0x00208f02:    f88d0000    ....    STRB     r0,[sp,#0]
        0x00208f06:    2201        ."      MOVS     r2,#1
        0x00208f08:    31a0        .1      ADDS     r1,r1,#0xa0
        0x00208f0a:    4650        PF      MOV      r0,r10
        0x00208f0c:    f5fefda7    ....    BL       log_buffer ; 0x7a5e
        0x00208f10:    4e7a        zN      LDR      r6,[pc,#488] ; [0x2090fc] = 0x20d0b4
        0x00208f12:    eb050445    ..E.    ADD      r4,r5,r5,LSL #1
        0x00208f16:    68b0        .h      LDR      r0,[r6,#8]
        0x00208f18:    f8101024    ..$.    LDRB     r1,[r0,r4,LSL #2]
        0x00208f1c:    2901        .)      CMP      r1,#1
        0x00208f1e:    d116        ..      BNE      0x208f4e ; bas_client_discover_state_cb + 94
        0x00208f20:    2703        .'      MOVS     r7,#3
        0x00208f22:    f8df91dc    ....    LDR      r9,[pc,#476] ; [0x209100] = 0x20d029
        0x00208f26:    f1b80f02    ....    CMP      r8,#2
        0x00208f2a:    d012        ..      BEQ      0x208f52 ; bas_client_discover_state_cb + 98
        0x00208f2c:    2102        .!      MOVS     r1,#2
        0x00208f2e:    f1b80f06    ....    CMP      r8,#6
        0x00208f32:    d028        (.      BEQ      0x208f86 ; bas_client_discover_state_cb + 150
        0x00208f34:    f1b80f0a    ....    CMP      r8,#0xa
        0x00208f38:    d03e        >.      BEQ      0x208fb8 ; bas_client_discover_state_cb + 200
        0x00208f3a:    f1b80f0b    ....    CMP      r8,#0xb
        0x00208f3e:    d01f        ..      BEQ      0x208f80 ; bas_client_discover_state_cb + 144
        0x00208f40:    4971        qI      LDR      r1,[pc,#452] ; [0x209108] = 0x8800e48
        0x00208f42:    2200        ."      MOVS     r2,#0
        0x00208f44:    31d8        .1      ADDS     r1,r1,#0xd8
        0x00208f46:    f1aa0002    ....    SUB      r0,r10,#2
        0x00208f4a:    f5fefd88    ....    BL       log_buffer ; 0x7a5e
        0x00208f4e:    e8bd87fc    ....    POP      {r2-r10,pc}
        0x00208f52:    eb000184    ....    ADD      r1,r0,r4,LSL #2
        0x00208f56:    888a        ..      LDRH     r2,[r1,#4]
        0x00208f58:    b90a        ..      CBNZ     r2,0x208f5e ; bas_client_discover_state_cb + 110
        0x00208f5a:    88c9        ..      LDRH     r1,[r1,#6]
        0x00208f5c:    b181        ..      CBZ      r1,0x208f80 ; bas_client_discover_state_cb + 144
;;; .\..\..\..\src\ble\profile\client\bas_client.c (283)
        0x00208f5e:    496a        jI      LDR      r1,[pc,#424] ; [0x209108] = 0x8800e48
        0x00208f60:    2200        ."      MOVS     r2,#0
        0x00208f62:    315c        \1      ADDS     r1,r1,#0x5c
        0x00208f64:    4650        PF      MOV      r0,r10
        0x00208f66:    f5fefd7a    ..z.    BL       log_buffer ; 0x7a5e
;;;284        start_handle = bas_table[conn_id].hdl_cache[HDL_BAS_SRV_START];
        0x00208f6a:    68b0        .h      LDR      r0,[r6,#8]
        0x00208f6c:    f8991000    ....    LDRB     r1,[r9,#0]
        0x00208f70:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00208f74:    8882        ..      LDRH     r2,[r0,#4]
;;;285        end_handle = bas_table[conn_id].hdl_cache[HDL_BAS_SRV_END];
        0x00208f76:    88c3        ..      LDRH     r3,[r0,#6]
;;;286        if (client_all_char_discovery(conn_id, bas_client, start_handle,
        0x00208f78:    4628        (F      MOV      r0,r5
        0x00208f7a:    f645fb20    E. .    BL       client_all_char_discovery ; 0x4e5be
        0x00208f7e:    e017        ..      B        0x208fb0 ; bas_client_discover_state_cb + 192
        0x00208f80:    f8007024    ..$p    STRB     r7,[r0,r4,LSL #2]
        0x00208f84:    e01a        ..      B        0x208fbc ; bas_client_discover_state_cb + 204
        0x00208f86:    eb000284    ....    ADD      r2,r0,r4,LSL #2
        0x00208f8a:    7892        .x      LDRB     r2,[r2,#2]
        0x00208f8c:    06d2        ..      LSLS     r2,r2,#27
        0x00208f8e:    d513        ..      BPL      0x208fb8 ; bas_client_discover_state_cb + 200
;;;287                                      end_handle) == GAP_CAUSE_SUCCESS)
;;;288        {
;;;289            return true;
;;;290        }
;;;291        return false;
;;;292    }
;;;293    
;;;294    static bool bas_start_char_descriptor_discovery(uint8_t conn_id)
;;;295    {
;;;296        uint16_t start_handle;
;;;297        uint16_t end_handle;
;;;298    
;;;299        PROFILE_PRINT_INFO0("bas_start_char_descriptor_discovery");
        0x00208f90:    495d        ]I      LDR      r1,[pc,#372] ; [0x209108] = 0x8800e48
        0x00208f92:    2200        ."      MOVS     r2,#0
        0x00208f94:    3178        x1      ADDS     r1,r1,#0x78
        0x00208f96:    4650        PF      MOV      r0,r10
        0x00208f98:    f5fefd61    ..a.    BL       log_buffer ; 0x7a5e
;;;300        start_handle = bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL];
        0x00208f9c:    68b0        .h      LDR      r0,[r6,#8]
        0x00208f9e:    f8991000    ....    LDRB     r1,[r9,#0]
        0x00208fa2:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00208fa6:    8902        ..      LDRH     r2,[r0,#8]
;;;301        end_handle = bas_table[conn_id].hdl_cache[HDL_BAS_SRV_END];
        0x00208fa8:    88c3        ..      LDRH     r3,[r0,#6]
;;;302        if (client_all_char_descriptor_discovery(conn_id, bas_client, start_handle,
        0x00208faa:    4628        (F      MOV      r0,r5
        0x00208fac:    f645fb6a    E.j.    BL       client_all_char_descriptor_discovery ; 0x4e684
        0x00208fb0:    2800        .(      CMP      r0,#0
        0x00208fb2:    d0cc        ..      BEQ      0x208f4e ; bas_client_discover_state_cb + 94
;;;303                                                 end_handle) == GAP_CAUSE_SUCCESS)
;;;304        {
;;;305            return true;
;;;306        }
;;;307        return false;
;;;308    }
;;;309    
;;;310    static void bas_client_discover_state_cb(uint8_t conn_id,  T_DISCOVERY_STATE discovery_state)
;;;311    {
;;;312        bool cb_flag = false;
;;;313        T_BAS_CLIENT_CB_DATA cb_data;
;;;314        cb_data.cb_type = BAS_CLIENT_CB_TYPE_DISC_STATE;
;;;315    
;;;316        PROFILE_PRINT_INFO1("bas_client_discover_state_cb: discovery_state = %d", discovery_state);
;;;317        if (bas_table[conn_id].disc_state == DISC_BAS_START)
;;;318        {
;;;319            switch (discovery_state)
;;;320            {
;;;321            case DISC_STATE_SRV_DONE:
;;;322                /* Indicate that service handle found. Start discover characteristic. */
;;;323                if ((bas_table[conn_id].hdl_cache[HDL_BAS_SRV_START] != 0)
;;;324                    || (bas_table[conn_id].hdl_cache[HDL_BAS_SRV_END] != 0))
;;;325                {
;;;326                    if (bas_start_char_discovery(conn_id) == false)
;;;327                    {
;;;328                        bas_table[conn_id].disc_state = DISC_BAS_FAILED;
;;;329                        cb_flag = true;
;;;330                    }
;;;331                }
;;;332                /* No BAS handle found. Discover procedure complete. */
;;;333                else
;;;334                {
;;;335                    bas_table[conn_id].disc_state = DISC_BAS_FAILED;
;;;336                    cb_flag = true;
;;;337                }
;;;338                break;
;;;339            case DISC_STATE_CHAR_DONE:
;;;340                if (bas_table[conn_id].properties & GATT_CHAR_PROP_NOTIFY)
;;;341                {
;;;342                    //discovery cccd
;;;343                    if (bas_start_char_descriptor_discovery(conn_id) == false)
;;;344                    {
;;;345                        bas_table[conn_id].disc_state = DISC_BAS_FAILED;
;;;346                        cb_flag = true;
        0x00208fb4:    68b0        .h      LDR      r0,[r6,#8]
        0x00208fb6:    e7e3        ..      B        0x208f80 ; bas_client_discover_state_cb + 144
;;;347                    }
;;;348                }
;;;349                else
;;;350                {
;;;351                    bas_table[conn_id].disc_state = DISC_BAS_DONE;
        0x00208fb8:    f8001024    ..$.    STRB     r1,[r0,r4,LSL #2]
;;;352                    cb_flag = true;
;;;353                }
;;;354                break;
;;;355    
;;;356            case DISC_STATE_CHAR_DESCRIPTOR_DONE:
;;;357                bas_table[conn_id].disc_state = DISC_BAS_DONE;
;;;358                cb_flag = true;
;;;359                break;
;;;360    
;;;361            case DISC_STATE_FAILED:
;;;362                bas_table[conn_id].disc_state = DISC_BAS_FAILED;
;;;363                cb_flag = true;
;;;364                break;
;;;365    
;;;366            default:
;;;367                PROFILE_PRINT_ERROR0("Invalid Discovery State!");
;;;368                break;
;;;369            }
;;;370        }
;;;371    
;;;372        /* Send discover state to application if needed. */
;;;373        if (cb_flag && bas_client_cb)
        0x00208fbc:    6873        sh      LDR      r3,[r6,#4]
        0x00208fbe:    2b00        .+      CMP      r3,#0
        0x00208fc0:    d0c5        ..      BEQ      0x208f4e ; bas_client_discover_state_cb + 94
;;;374        {
;;;375            cb_data.cb_content.disc_state = bas_table[conn_id].disc_state;
        0x00208fc2:    68b0        .h      LDR      r0,[r6,#8]
        0x00208fc4:    466a        jF      MOV      r2,sp
        0x00208fc6:    4629        )F      MOV      r1,r5
        0x00208fc8:    f8100024    ..$.    LDRB     r0,[r0,r4,LSL #2]
        0x00208fcc:    f88d0002    ....    STRB     r0,[sp,#2]
;;;376            (*bas_client_cb)(bas_client, conn_id, &cb_data);
        0x00208fd0:    f8990000    ....    LDRB     r0,[r9,#0]
        0x00208fd4:    4798        .G      BLX      r3
;;;377        }
;;;378        return;
;;;379    }
        0x00208fd6:    e7ba        ..      B        0x208f4e ; bas_client_discover_state_cb + 94
    bas_client_discover_result_cb
;;;380    
;;;381    
;;;382    static void bas_client_discover_result_cb(uint8_t conn_id,  T_DISCOVERY_RESULT_TYPE result_type,
;;;383                                              T_DISCOVERY_RESULT_DATA result_data)
;;;384    {
        0x00208fd8:    b570        p.      PUSH     {r4-r6,lr}
        0x00208fda:    460e        .F      MOV      r6,r1
        0x00208fdc:    460b        .F      MOV      r3,r1
        0x00208fde:    494a        JI      LDR      r1,[pc,#296] ; [0x209108] = 0x8800e48
;;; .\..\..\..\src\ble\profile\client\bas_client.c (384)
        0x00208fe0:    4614        .F      MOV      r4,r2
        0x00208fe2:    4605        .F      MOV      r5,r0
;;;385        PROFILE_PRINT_INFO1("bas_client_discover_result_cb: result_type = %d", result_type);
        0x00208fe4:    2201        ."      MOVS     r2,#1
        0x00208fe6:    31f4        .1      ADDS     r1,r1,#0xf4
        0x00208fe8:    4843        CH      LDR      r0,[pc,#268] ; [0x2090f8] = 0x21103302
        0x00208fea:    f5fefd38    ..8.    BL       log_buffer ; 0x7a5e
;;;386        if (bas_table[conn_id].disc_state == DISC_BAS_START)
        0x00208fee:    4843        CH      LDR      r0,[pc,#268] ; [0x2090fc] = 0x20d0b4
        0x00208ff0:    eb050545    ..E.    ADD      r5,r5,r5,LSL #1
        0x00208ff4:    6880        .h      LDR      r0,[r0,#8]
        0x00208ff6:    f8101025    ..%.    LDRB     r1,[r0,r5,LSL #2]
        0x00208ffa:    2901        .)      CMP      r1,#1
        0x00208ffc:    d113        ..      BNE      0x209026 ; bas_client_discover_result_cb + 78
;;;387        {
;;;388            switch (result_type)
        0x00208ffe:    2e02        ..      CMP      r6,#2
        0x00209000:    d00b        ..      BEQ      0x20901a ; bas_client_discover_result_cb + 66
        0x00209002:    2e03        ..      CMP      r6,#3
        0x00209004:    d010        ..      BEQ      0x209028 ; bas_client_discover_result_cb + 80
        0x00209006:    2e05        ..      CMP      r6,#5
        0x00209008:    d01a        ..      BEQ      0x209040 ; bas_client_discover_result_cb + 104
        0x0020900a:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020900e:    483a        :H      LDR      r0,[pc,#232] ; [0x2090f8] = 0x21103302
        0x00209010:    2200        ."      MOVS     r2,#0
        0x00209012:    493e        >I      LDR      r1,[pc,#248] ; [0x20910c] = 0x8800f70
        0x00209014:    1e80        ..      SUBS     r0,r0,#2
        0x00209016:    f5febd22    ..".    B        log_buffer ; 0x7a5e
;;;389            {
;;;390            case DISC_RESULT_SRV_DATA:
;;;391                bas_table[conn_id].hdl_cache[HDL_BAS_SRV_START] =
        0x0020901a:    eb000085    ....    ADD      r0,r0,r5,LSL #2
        0x0020901e:    8821        !.      LDRH     r1,[r4,#0]
        0x00209020:    8081        ..      STRH     r1,[r0,#4]
;;;392                    result_data.p_srv_disc_data->att_handle;
;;;393                bas_table[conn_id].hdl_cache[HDL_BAS_SRV_END] =
        0x00209022:    8861        a.      LDRH     r1,[r4,#2]
        0x00209024:    80c1        ..      STRH     r1,[r0,#6]
        0x00209026:    bd70        p.      POP      {r4-r6,pc}
        0x00209028:    88e2        ..      LDRH     r2,[r4,#6]
;;;394                    result_data.p_srv_disc_data->end_group_handle;
;;;395                break;
;;;396    
;;;397            case DISC_RESULT_CHAR_UUID16:
;;;398                {
;;;399                    uint16_t handle;
;;;400                    handle = result_data.p_char_uuid16_disc_data->value_handle;
        0x0020902a:    88a1        ..      LDRH     r1,[r4,#4]
;;;401                    if (result_data.p_char_uuid16_disc_data->uuid16 == GATT_UUID_CHAR_BAS_LEVEL)
        0x0020902c:    f5a25328    ..(S    SUB      r3,r2,#0x2a00
        0x00209030:    3b19        .;      SUBS     r3,r3,#0x19
        0x00209032:    d1f8        ..      BNE      0x209026 ; bas_client_discover_result_cb + 78
;;;402                    {
;;;403                        bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL] = handle;
        0x00209034:    eb000085    ....    ADD      r0,r0,r5,LSL #2
        0x00209038:    8101        ..      STRH     r1,[r0,#8]
;;;404                        bas_table[conn_id].properties = result_data.p_char_uuid16_disc_data->properties;
        0x0020903a:    8861        a.      LDRH     r1,[r4,#2]
        0x0020903c:    8041        A.      STRH     r1,[r0,#2]
        0x0020903e:    bd70        p.      POP      {r4-r6,pc}
;;;405                    }
;;;406                }
;;;407                break;
;;;408    
;;;409            case DISC_RESULT_CHAR_DESC_UUID16:
;;;410                if (result_data.p_char_desc_uuid16_disc_data->uuid16 == GATT_UUID_CHAR_CLIENT_CONFIG)
        0x00209040:    8861        a.      LDRH     r1,[r4,#2]
        0x00209042:    f5a15224    ..$R    SUB      r2,r1,#0x2900
        0x00209046:    3a02        .:      SUBS     r2,#2
        0x00209048:    d1f9        ..      BNE      0x20903e ; bas_client_discover_result_cb + 102
;;;411                {
;;;412                    bas_table[conn_id].hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD] =
        0x0020904a:    eb000085    ....    ADD      r0,r0,r5,LSL #2
        0x0020904e:    8821        !.      LDRH     r1,[r4,#0]
        0x00209050:    8141        A.      STRH     r1,[r0,#0xa]
;;;413                        result_data.p_char_desc_uuid16_disc_data->handle;
;;;414                }
;;;415                break;
;;;416    
;;;417            default:
;;;418                PROFILE_PRINT_ERROR0("Invalid Discovery Result Type!");
;;;419                break;
;;;420            }
;;;421        }
;;;422    
;;;423        return;
;;;424    }
        0x00209052:    bd70        p.      POP      {r4-r6,pc}
    bas_client_write_result_cb
;;;425    
;;;426    static void bas_client_write_result_cb(uint8_t conn_id, T_GATT_WRITE_TYPE type,
;;;427                                           uint16_t handle,
;;;428                                           uint16_t cause,
;;;429                                           uint8_t credits)
;;;430    {
        0x00209054:    e92d43fe    -..C    PUSH     {r1-r9,lr}
        0x00209058:    4f28        (O      LDR      r7,[pc,#160] ; [0x2090fc] = 0x20d0b4
;;; .\..\..\..\src\ble\profile\client\bas_client.c (430)
        0x0020905a:    4681        .F      MOV      r9,r0
        0x0020905c:    eb000449    ..I.    ADD      r4,r0,r9,LSL #1
        0x00209060:    68b8        .h      LDR      r0,[r7,#8]
        0x00209062:    461d        .F      MOV      r5,r3
;;;431        T_BAS_CLIENT_CB_DATA cb_data;
;;;432        uint16_t *hdl_cache;
;;;433        hdl_cache = bas_table[conn_id].hdl_cache;
        0x00209064:    eb000684    ....    ADD      r6,r0,r4,LSL #2
;;;434        cb_data.cb_type = BAS_CLIENT_CB_TYPE_WRITE_RESULT;
        0x00209068:    2002        .       MOVS     r0,#2
        0x0020906a:    9300        ..      STR      r3,[sp,#0]
        0x0020906c:    4690        .F      MOV      r8,r2
        0x0020906e:    4613        .F      MOV      r3,r2
        0x00209070:    4926        &I      LDR      r1,[pc,#152] ; [0x20910c] = 0x8800f70
        0x00209072:    f88d0004    ....    STRB     r0,[sp,#4]
;;;435    
;;;436        PROFILE_PRINT_INFO2("bas_client_write_result_cb: handle 0x%x, cause 0x%x", handle, cause);
        0x00209076:    4602        .F      MOV      r2,r0
        0x00209078:    3124        $1      ADDS     r1,r1,#0x24
        0x0020907a:    481f        .H      LDR      r0,[pc,#124] ; [0x2090f8] = 0x21103302
        0x0020907c:    f5fefcef    ....    BL       log_buffer ; 0x7a5e
;;;437        cb_data.cb_content.write_result.cause = cause;
        0x00209080:    f8ad5008    ...P    STRH     r5,[sp,#8]
;;;438    
;;;439        if (handle == hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD])
        0x00209084:    8971        q.      LDRH     r1,[r6,#0xa]
        0x00209086:    4541        AE      CMP      r1,r8
        0x00209088:    d111        ..      BNE      0x2090ae ; bas_client_write_result_cb + 90
;;;440        {
;;;441            if (bas_table[conn_id].write_notify_value)
        0x0020908a:    68b8        .h      LDR      r0,[r7,#8]
        0x0020908c:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00209090:    7840        @x      LDRB     r0,[r0,#1]
        0x00209092:    b108        ..      CBZ      r0,0x209098 ; bas_client_write_result_cb + 68
;;;442            {
;;;443                cb_data.cb_content.write_result.type = BAS_WRITE_NOTIFY_ENABLE;
        0x00209094:    2000        .       MOVS     r0,#0
        0x00209096:    e000        ..      B        0x20909a ; bas_client_write_result_cb + 70
        0x00209098:    2001        .       MOVS     r0,#1
        0x0020909a:    f88d0006    ....    STRB     r0,[sp,#6]
;;;444            }
;;;445            else
;;;446            {
;;;447                cb_data.cb_content.write_result.type = BAS_WRITE_NOTIFY_DISABLE;
;;;448            }
;;;449        }
;;;450        else
;;;451        {
;;;452            return;
;;;453        }
;;;454    
;;;455        if (bas_client_cb)
        0x0020909e:    687b        {h      LDR      r3,[r7,#4]
        0x002090a0:    2b00        .+      CMP      r3,#0
        0x002090a2:    d004        ..      BEQ      0x2090ae ; bas_client_write_result_cb + 90
;;;456        {
;;;457            (*bas_client_cb)(bas_client, conn_id, &cb_data);
        0x002090a4:    4816        .H      LDR      r0,[pc,#88] ; [0x209100] = 0x20d029
        0x002090a6:    aa01        ..      ADD      r2,sp,#4
        0x002090a8:    4649        IF      MOV      r1,r9
        0x002090aa:    7800        .x      LDRB     r0,[r0,#0]
        0x002090ac:    4798        .G      BLX      r3
;;;458        }
;;;459        return;
;;;460    }
        0x002090ae:    e8bd83fe    ....    POP      {r1-r9,pc}
    bas_client_read_result_cb
;;;461    
;;;462    static void bas_client_read_result_cb(uint8_t conn_id,  uint16_t cause,
;;;463                                          uint16_t handle, uint16_t value_size, uint8_t *p_value)
;;;464    {
        0x002090b2:    e92d4ffe    -..O    PUSH     {r1-r11,lr}
        0x002090b6:    f8dfa044    ..D.    LDR      r10,[pc,#68] ; [0x2090fc] = 0x20d0b4
        0x002090ba:    460c        .F      MOV      r4,r1
        0x002090bc:    4683        .F      MOV      r11,r0
        0x002090be:    eb00014b    ..K.    ADD      r1,r0,r11,LSL #1
        0x002090c2:    f8da0008    ....    LDR      r0,[r10,#8]
        0x002090c6:    4699        .F      MOV      r9,r3
        0x002090c8:    eb000581    ....    ADD      r5,r0,r1,LSL #2
        0x002090cc:    490f        .I      LDR      r1,[pc,#60] ; [0x20910c] = 0x8800f70
        0x002090ce:    4690        .F      MOV      r8,r2
        0x002090d0:    2701        .'      MOVS     r7,#1
        0x002090d2:    4613        .F      MOV      r3,r2
;;;465        T_BAS_CLIENT_CB_DATA cb_data;
;;;466        uint16_t *hdl_cache;
;;;467        hdl_cache = bas_table[conn_id].hdl_cache;
        0x002090d4:    9e0c        ..      LDR      r6,[sp,#0x30]
;;;468        cb_data.cb_type = BAS_CLIENT_CB_TYPE_READ_RESULT;
        0x002090d6:    f88d7004    ...p    STRB     r7,[sp,#4]
;;;469    
;;;470        PROFILE_PRINT_INFO2("bas_client_read_result_cb: handle 0x%x, cause 0x%x", handle, cause);
        0x002090da:    2202        ."      MOVS     r2,#2
        0x002090dc:    315c        \1      ADDS     r1,r1,#0x5c
        0x002090de:    4806        .H      LDR      r0,[pc,#24] ; [0x2090f8] = 0x21103302
        0x002090e0:    1d2d        -.      ADDS     r5,r5,#4
        0x002090e2:    9400        ..      STR      r4,[sp,#0]
        0x002090e4:    f5fefcbb    ....    BL       log_buffer ; 0x7a5e
        0x002090e8:    4803        .H      LDR      r0,[pc,#12] ; [0x2090f8] = 0x21103302
;;;471        cb_data.cb_content.read_result.cause = cause;
        0x002090ea:    f8ad4008    ...@    STRH     r4,[sp,#8]
;;;472    
;;;473        if (handle == hdl_cache[HDL_BAS_BATTERY_LEVEL_CCCD])
        0x002090ee:    88ea        ..      LDRH     r2,[r5,#6]
        0x002090f0:    1e80        ..      SUBS     r0,r0,#2
        0x002090f2:    e00d        ..      B        0x209110 ; bas_client_read_result_cb + 94
    $d
        0x002090f4:    08800c2c    ,...    DCD    142609452
        0x002090f8:    21103302    .3.!    DCD    554709762
        0x002090fc:    0020d0b4    .. .    DCD    2150580
        0x00209100:    0020d029    ). .    DCD    2150441
        0x00209104:    08800d30    0...    DCD    142609712
        0x00209108:    08800e48    H...    DCD    142609992
        0x0020910c:    08800f70    p...    DCD    142610288
    $t
        0x00209110:    4542        BE      CMP      r2,r8
        0x00209112:    d117        ..      BNE      0x209144 ; bas_client_read_result_cb + 146
;;;474        {
;;;475            cb_data.cb_content.read_result.type = BAS_READ_NOTIFY;
        0x00209114:    2100        .!      MOVS     r1,#0
        0x00209116:    f88d1006    ....    STRB     r1,[sp,#6]
;;;476            if (cause == GAP_SUCCESS)
        0x0020911a:    bb44        D.      CBNZ     r4,0x20916e ; bas_client_read_result_cb + 188
;;;477            {
;;;478                uint16_t ccc_bit;
;;;479                if (value_size != 2)
        0x0020911c:    464a        JF      MOV      r2,r9
        0x0020911e:    f1b90f02    ....    CMP      r9,#2
        0x00209122:    d003        ..      BEQ      0x20912c ; bas_client_read_result_cb + 122
;;;480                {
;;;481                    PROFILE_PRINT_ERROR1("bas_client_read_result_cb: invalid cccd len %d", value_size);
        0x00209124:    4613        .F      MOV      r3,r2
        0x00209126:    2201        ."      MOVS     r2,#1
        0x00209128:    4950        PI      LDR      r1,[pc,#320] ; [0x20926c] = 0x8801004
;;;482                    return;
        0x0020912a:    e019        ..      B        0x209160 ; bas_client_read_result_cb + 174
;;;483                }
;;;484                LE_ARRAY_TO_UINT16(ccc_bit, p_value);
        0x0020912c:    7830        0x      LDRB     r0,[r6,#0]
        0x0020912e:    7872        rx      LDRB     r2,[r6,#1]
        0x00209130:    eb002002    ...     ADD      r0,r0,r2,LSL #8
;;;485    
;;;486                if (ccc_bit & GATT_CLIENT_CHAR_CONFIG_NOTIFY)
        0x00209134:    07c0        ..      LSLS     r0,r0,#31
        0x00209136:    d002        ..      BEQ      0x20913e ; bas_client_read_result_cb + 140
;;;487                {
;;;488                    cb_data.cb_content.read_result.data.notify = true;
        0x00209138:    f88d7007    ...p    STRB     r7,[sp,#7]
        0x0020913c:    e017        ..      B        0x20916e ; bas_client_read_result_cb + 188
;;;489                }
;;;490                else
;;;491                {
;;;492                    cb_data.cb_content.read_result.data.notify = false;
        0x0020913e:    f88d1007    ....    STRB     r1,[sp,#7]
        0x00209142:    e014        ..      B        0x20916e ; bas_client_read_result_cb + 188
;;;493                }
;;;494            }
;;;495        }
;;;496        else if (handle == hdl_cache[HDL_BAS_BATTERY_LEVEL])
        0x00209144:    88aa        ..      LDRH     r2,[r5,#4]
        0x00209146:    4542        BE      CMP      r2,r8
        0x00209148:    d10c        ..      BNE      0x209164 ; bas_client_read_result_cb + 178
;;;497        {
;;;498            cb_data.cb_content.read_result.type = BAS_READ_BATTERY_LEVEL;
        0x0020914a:    f88d7006    ...p    STRB     r7,[sp,#6]
;;;499            if (cause == GAP_SUCCESS)
        0x0020914e:    b974        t.      CBNZ     r4,0x20916e ; bas_client_read_result_cb + 188
;;;500            {
;;;501                if (value_size != 1)
        0x00209150:    4649        IF      MOV      r1,r9
        0x00209152:    f1b90f01    ....    CMP      r9,#1
        0x00209156:    d007        ..      BEQ      0x209168 ; bas_client_read_result_cb + 182
;;;502                {
;;;503                    PROFILE_PRINT_ERROR1("bas_client_read_result_cb: invalid battery value len %d", value_size);
        0x00209158:    460b        .F      MOV      r3,r1
        0x0020915a:    4944        DI      LDR      r1,[pc,#272] ; [0x20926c] = 0x8801004
        0x0020915c:    2201        ."      MOVS     r2,#1
        0x0020915e:    3134        41      ADDS     r1,r1,#0x34
        0x00209160:    f5fefc7d    ..}.    BL       log_buffer ; 0x7a5e
        0x00209164:    e8bd8ffe    ....    POP      {r1-r11,pc}
;;;504                    return;
;;;505                }
;;;506                cb_data.cb_content.read_result.data.battery_level = *p_value;
        0x00209168:    7830        0x      LDRB     r0,[r6,#0]
        0x0020916a:    f88d0007    ....    STRB     r0,[sp,#7]
;;;507            }
;;;508        }
;;;509        else
;;;510        {
;;;511            return;
;;;512        }
;;;513    
;;;514        if (bas_client_cb)
        0x0020916e:    f8da3004    ...0    LDR      r3,[r10,#4]
        0x00209172:    2b00        .+      CMP      r3,#0
        0x00209174:    d0f6        ..      BEQ      0x209164 ; bas_client_read_result_cb + 178
;;;515        {
;;;516            (*bas_client_cb)(bas_client, conn_id, &cb_data);
        0x00209176:    483e        >H      LDR      r0,[pc,#248] ; [0x209270] = 0x20d029
        0x00209178:    aa01        ..      ADD      r2,sp,#4
        0x0020917a:    4659        YF      MOV      r1,r11
        0x0020917c:    7800        .x      LDRB     r0,[r0,#0]
        0x0020917e:    4798        .G      BLX      r3
;;;517        }
;;;518        return;
;;;519    }
        0x00209180:    e7f0        ..      B        0x209164 ; bas_client_read_result_cb + 178
    bas_client_notify_ind_cb
;;;520    
;;;521    static T_APP_RESULT bas_client_notify_ind_cb(uint8_t conn_id, bool notify, uint16_t handle,
;;;522                                                 uint16_t value_size, uint8_t *p_value)
;;;523    {
        0x00209182:    b57c        |.      PUSH     {r2-r6,lr}
        0x00209184:    4c3b        ;L      LDR      r4,[pc,#236] ; [0x209274] = 0x20d0b4
        0x00209186:    4601        .F      MOV      r1,r0
        0x00209188:    eb010341    ..A.    ADD      r3,r1,r1,LSL #1
        0x0020918c:    68a6        .h      LDR      r6,[r4,#8]
;;;524        T_APP_RESULT app_result = APP_RESULT_SUCCESS;
        0x0020918e:    2000        .       MOVS     r0,#0
;;;525        T_BAS_CLIENT_CB_DATA cb_data;
;;;526        uint16_t *hdl_cache;
;;;527    
;;;528        hdl_cache = bas_table[conn_id].hdl_cache;
        0x00209190:    eb060383    ....    ADD      r3,r6,r3,LSL #2
        0x00209194:    2603        .&      MOVS     r6,#3
        0x00209196:    f88d6000    ...`    STRB     r6,[sp,#0]
        0x0020919a:    891b        ..      LDRH     r3,[r3,#8]
        0x0020919c:    9d06        ..      LDR      r5,[sp,#0x18]
;;;529        cb_data.cb_type = BAS_CLIENT_CB_TYPE_NOTIF_IND_RESULT;
;;;530    
;;;531        if (handle == hdl_cache[HDL_BAS_BATTERY_LEVEL])
        0x0020919e:    4293        .B      CMP      r3,r2
        0x002091a0:    d10a        ..      BNE      0x2091b8 ; bas_client_notify_ind_cb + 54
;;;532        {
;;;533            cb_data.cb_content.notify_data.battery_level = *p_value;
        0x002091a2:    782a        *x      LDRB     r2,[r5,#0]
        0x002091a4:    f88d2002    ...     STRB     r2,[sp,#2]
        0x002091a8:    6863        ch      LDR      r3,[r4,#4]
        0x002091aa:    2b00        .+      CMP      r3,#0
        0x002091ac:    d003        ..      BEQ      0x2091b6 ; bas_client_notify_ind_cb + 52
        0x002091ae:    4830        0H      LDR      r0,[pc,#192] ; [0x209270] = 0x20d029
        0x002091b0:    466a        jF      MOV      r2,sp
        0x002091b2:    7800        .x      LDRB     r0,[r0,#0]
        0x002091b4:    4798        .G      BLX      r3
        0x002091b6:    bd7c        |.      POP      {r2-r6,pc}
;;;534        }
;;;535        else
;;;536        {
;;;537            return APP_RESULT_SUCCESS;
        0x002091b8:    2000        .       MOVS     r0,#0
;;;538        }
;;;539    
;;;540        if (bas_client_cb)
;;;541        {
;;;542            app_result = (*bas_client_cb)(bas_client, conn_id, &cb_data);
;;;543        }
;;;544    
;;;545        return app_result;
;;;546    }
        0x002091ba:    bd7c        |.      POP      {r2-r6,pc}
    bas_client_disc_cb
;;;547    
;;;548    static void bas_client_disc_cb(uint8_t conn_id)
;;;549    {
        0x002091bc:    b510        ..      PUSH     {r4,lr}
        0x002091be:    492b        +I      LDR      r1,[pc,#172] ; [0x20926c] = 0x8801004
;;; .\..\..\..\src\ble\profile\client\bas_client.c (549)
        0x002091c0:    4604        .F      MOV      r4,r0
;;;550        PROFILE_PRINT_INFO0("bas_client_disc_cb.");
        0x002091c2:    2200        ."      MOVS     r2,#0
        0x002091c4:    3170        p1      ADDS     r1,r1,#0x70
        0x002091c6:    482c        ,H      LDR      r0,[pc,#176] ; [0x209278] = 0x21103302
        0x002091c8:    f5fefc49    ..I.    BL       log_buffer ; 0x7a5e
;;;551        if (conn_id >= bas_link_num)
        0x002091cc:    4829        )H      LDR      r0,[pc,#164] ; [0x209274] = 0x20d0b4
        0x002091ce:    7801        .x      LDRB     r1,[r0,#0]
        0x002091d0:    428c        .B      CMP      r4,r1
        0x002091d2:    d309        ..      BCC      0x2091e8 ; bas_client_disc_cb + 44
;;;552        {
;;;553            PROFILE_PRINT_ERROR1("bas_client_disc_cb: failed invalid conn_id %d", conn_id);
        0x002091d4:    4925        %I      LDR      r1,[pc,#148] ; [0x20926c] = 0x8801004
        0x002091d6:    4623        #F      MOV      r3,r4
        0x002091d8:    4827        'H      LDR      r0,[pc,#156] ; [0x209278] = 0x21103302
        0x002091da:    2201        ."      MOVS     r2,#1
        0x002091dc:    3188        .1      ADDS     r1,r1,#0x88
        0x002091de:    e8bd4010    ...@    POP      {r4,lr}
        0x002091e2:    1e80        ..      SUBS     r0,r0,#2
        0x002091e4:    f5febc3b    ..;.    B        log_buffer ; 0x7a5e
;;;554            return;
;;;555        }
;;;556        memset(&bas_table[conn_id], 0, sizeof(T_BAS_LINK));
        0x002091e8:    6880        .h      LDR      r0,[r0,#8]
        0x002091ea:    eb040144    ..D.    ADD      r1,r4,r4,LSL #1
        0x002091ee:    eb000081    ....    ADD      r0,r0,r1,LSL #2
        0x002091f2:    2100        .!      MOVS     r1,#0
        0x002091f4:    6001        .`      STR      r1,[r0,#0]
        0x002091f6:    6041        A`      STR      r1,[r0,#4]
        0x002091f8:    6081        .`      STR      r1,[r0,#8]
;;;557        return;
;;;558    }
        0x002091fa:    bd10        ..      POP      {r4,pc}
    bas_add_client
;;;559    /**
;;;560     * @brief BAS Client Callbacks.
;;;561    */
;;;562    const T_FUN_CLIENT_CBS bas_client_cbs =
;;;563    {
;;;564        bas_client_discover_state_cb,   //!< Discovery State callback function pointer
;;;565        bas_client_discover_result_cb,  //!< Discovery result callback function pointer
;;;566        bas_client_read_result_cb,      //!< Read response callback function pointer
;;;567        bas_client_write_result_cb,     //!< Write result callback function pointer
;;;568        bas_client_notify_ind_cb,       //!< Notify Indicate callback function pointer
;;;569        bas_client_disc_cb              //!< Link disconnection callback function pointer
;;;570    };
;;;571    
;;;572    /**
;;;573      * @brief      Add bas client to application.
;;;574      * @param[in]  app_cb pointer of app callback function to handle specific client module data.
;;;575      * @param[in]  link_num initialize link num.
;;;576      * @return Client ID of the specific client module.
;;;577      * @retval 0xff failed.
;;;578      * @retval other success.
;;;579      *
;;;580      * <b>Example usage</b>
;;;581      * \code{.c}
;;;582        void app_le_profile_init(void)
;;;583        {
;;;584            client_init(1);
;;;585            bas_client_id = bas_add_client(app_client_callback, APP_MAX_LINKS);
;;;586        }
;;;587      * \endcode
;;;588      */
;;;589    T_CLIENT_ID bas_add_client(P_FUN_GENERAL_APP_CB app_cb, uint8_t link_num)
;;;590    {
        0x002091fc:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00209200:    4d1d        .M      LDR      r5,[pc,#116] ; [0x209278] = 0x21103302
;;; .\..\..\..\src\ble\profile\client\bas_client.c (590)
        0x00209202:    4607        .F      MOV      r7,r0
        0x00209204:    1ead        ..      SUBS     r5,r5,#2
        0x00209206:    460c        .F      MOV      r4,r1
        0x00209208:    2904        .)      CMP      r1,#4
        0x0020920a:    d909        ..      BLS      0x209220 ; bas_add_client + 36
;;;591        uint16_t size;
;;;592        if (link_num > BAS_MAX_LINKS)
;;;593        {
;;;594            PROFILE_PRINT_ERROR1("bas_add_client: invalid link_num %d", link_num);
        0x0020920c:    460b        .F      MOV      r3,r1
        0x0020920e:    4917        .I      LDR      r1,[pc,#92] ; [0x20926c] = 0x8801004
        0x00209210:    2201        ."      MOVS     r2,#1
        0x00209212:    31bc        .1      ADDS     r1,r1,#0xbc
        0x00209214:    4628        (F      MOV      r0,r5
        0x00209216:    f5fefc22    ..".    BL       log_buffer ; 0x7a5e
;;;595            return 0xff;
        0x0020921a:    20ff        .       MOVS     r0,#0xff
        0x0020921c:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;596        }
;;;597        if (false == client_register_spec_client_cb(&bas_client, &bas_client_cbs))
        0x00209220:    4916        .I      LDR      r1,[pc,#88] ; [0x20927c] = 0x21c7a4
        0x00209222:    4813        .H      LDR      r0,[pc,#76] ; [0x209270] = 0x20d029
        0x00209224:    f645f8a6    E...    BL       client_register_spec_client_cb ; 0x4e374
        0x00209228:    4e11        .N      LDR      r6,[pc,#68] ; [0x209270] = 0x20d029
        0x0020922a:    b1a8        ..      CBZ      r0,0x209258 ; bas_add_client + 92
;;;598        {
;;;599            bas_client = CLIENT_PROFILE_GENERAL_ID;
;;;600            PROFILE_PRINT_ERROR0("bas_add_client:register fail");
;;;601            return bas_client;
;;;602        }
;;;603        PROFILE_PRINT_INFO1("bas_add_client: client id %d", bas_client);
        0x0020922c:    7833        3x      LDRB     r3,[r6,#0]
        0x0020922e:    2201        ."      MOVS     r2,#1
        0x00209230:    4913        .I      LDR      r1,[pc,#76] ; [0x209280] = 0x8801108
        0x00209232:    4811        .H      LDR      r0,[pc,#68] ; [0x209278] = 0x21103302
        0x00209234:    f5fefc13    ....    BL       log_buffer ; 0x7a5e
;;;604    
;;;605        /* register callback for profile to inform application that some events happened. */
;;;606        bas_client_cb = app_cb;
        0x00209238:    4d0e        .M      LDR      r5,[pc,#56] ; [0x209274] = 0x20d0b4
        0x0020923a:    eb040044    ..D.    ADD      r0,r4,r4,LSL #1
        0x0020923e:    4a0f        .J      LDR      r2,[pc,#60] ; [0x20927c] = 0x21c7a4
;;;607        bas_link_num = link_num;
        0x00209240:    606f        o`      STR      r7,[r5,#4]
        0x00209242:    0081        ..      LSLS     r1,r0,#2
        0x00209244:    702c        ,p      STRB     r4,[r5,#0]
;;;608        size = bas_link_num * sizeof(T_BAS_LINK);
;;;609        bas_table = os_mem_zalloc(RAM_TYPE_DATA_ON, size);
        0x00209246:    f2402361    @.a#    MOV      r3,#0x261
        0x0020924a:    3218        .2      ADDS     r2,r2,#0x18
        0x0020924c:    2000        .       MOVS     r0,#0
        0x0020924e:    f61cfdb3    ....    BL       os_mem_zalloc_intern ; 0x25db8
        0x00209252:    60a8        .`      STR      r0,[r5,#8]
;;;610    
;;;611        return bas_client;
        0x00209254:    7830        0x      LDRB     r0,[r6,#0]
;;;612    }
        0x00209256:    e7e1        ..      B        0x20921c ; bas_add_client + 32
        0x00209258:    20ff        .       MOVS     r0,#0xff
        0x0020925a:    4909        .I      LDR      r1,[pc,#36] ; [0x209280] = 0x8801108
        0x0020925c:    7030        0p      STRB     r0,[r6,#0]
        0x0020925e:    2200        ."      MOVS     r2,#0
        0x00209260:    3920         9      SUBS     r1,r1,#0x20
        0x00209262:    4628        (F      MOV      r0,r5
        0x00209264:    f5fefbfb    ....    BL       log_buffer ; 0x7a5e
        0x00209268:    e7f4        ..      B        0x209254 ; bas_add_client + 88
    $d
        0x0020926a:    0000        ..      DCW    0
        0x0020926c:    08801004    ....    DCD    142610436
        0x00209270:    0020d029    ). .    DCD    2150441
        0x00209274:    0020d0b4    .. .    DCD    2150580
        0x00209278:    21103302    .3.!    DCD    554709762
        0x0020927c:    0021c7a4    ..!.    DCD    2213796
        0x00209280:    08801108    ....    DCD    142610696
    $t
    .text
    gaps_start_discovery
;;; .\..\..\..\src\ble\profile\client\gaps_client.c
;;;59     {
        0x00209284:    b570        p.      PUSH     {r4-r6,lr}
        0x00209286:    4605        .F      MOV      r5,r0
;;;60         PROFILE_PRINT_INFO0("gaps_start_discovery");
        0x00209288:    2200        ."      MOVS     r2,#0
        0x0020928a:    49fe        .I      LDR      r1,[pc,#1016] ; [0x209684] = 0x8801128
        0x0020928c:    48fe        .H      LDR      r0,[pc,#1016] ; [0x209688] = 0x21103302
        0x0020928e:    f5fefbe6    ....    BL       log_buffer ; 0x7a5e
;;;61         /* First clear handle cache. */
;;;62         if (conn_id >= gaps_link_num)
        0x00209292:    4efe        .N      LDR      r6,[pc,#1016] ; [0x20968c] = 0x20d0c0
        0x00209294:    7830        0x      LDRB     r0,[r6,#0]
        0x00209296:    4285        .B      CMP      r5,r0
        0x00209298:    d308        ..      BCC      0x2092ac ; gaps_start_discovery + 40
;;;63         {
;;;64             PROFILE_PRINT_ERROR1("gaps_start_discovery: failed invalid conn_id %d", conn_id);
        0x0020929a:    49fa        .I      LDR      r1,[pc,#1000] ; [0x209684] = 0x8801128
        0x0020929c:    48fa        .H      LDR      r0,[pc,#1000] ; [0x209688] = 0x21103302
        0x0020929e:    462b        +F      MOV      r3,r5
        0x002092a0:    2201        ."      MOVS     r2,#1
        0x002092a2:    3118        .1      ADDS     r1,r1,#0x18
        0x002092a4:    1e80        ..      SUBS     r0,r0,#2
        0x002092a6:    f5fefbda    ....    BL       log_buffer ; 0x7a5e
;;;65             return false;
        0x002092aa:    e013        ..      B        0x2092d4 ; gaps_start_discovery + 80
;;;66         }
;;;67         memset(&gaps_table[conn_id], 0, sizeof(T_GAPS_LINK));
        0x002092ac:    68b0        .h      LDR      r0,[r6,#8]
        0x002092ae:    ebc504c5    ....    RSB      r4,r5,r5,LSL #3
        0x002092b2:    eb000044    ..D.    ADD      r0,r0,r4,LSL #1
        0x002092b6:    210e        .!      MOVS     r1,#0xe
        0x002092b8:    f650feb0    P...    BL       __aeabi_memclr ; 0x5a01c
;;;68         gaps_table[conn_id].disc_state = DISC_GAPS_START;
        0x002092bc:    68b1        .h      LDR      r1,[r6,#8]
        0x002092be:    2001        .       MOVS     r0,#1
        0x002092c0:    f44f52c0    O..R    MOV      r2,#0x1800
        0x002092c4:    f8010014    ....    STRB     r0,[r1,r4,LSL #1]
;;;69         if (client_by_uuid_srv_discovery(conn_id, gaps_client,
        0x002092c8:    48f1        .H      LDR      r0,[pc,#964] ; [0x209690] = 0x20d02a
        0x002092ca:    7801        .x      LDRB     r1,[r0,#0]
        0x002092cc:    4628        (F      MOV      r0,r5
        0x002092ce:    f645f92b    E.+.    BL       client_by_uuid_srv_discovery ; 0x4e528
        0x002092d2:    b108        ..      CBZ      r0,0x2092d8 ; gaps_start_discovery + 84
        0x002092d4:    2000        .       MOVS     r0,#0
        0x002092d6:    bd70        p.      POP      {r4-r6,pc}
;;;70                                          GATT_UUID_GAP) == GAP_CAUSE_SUCCESS)
;;;71         {
;;;72             return true;
        0x002092d8:    2001        .       MOVS     r0,#1
;;;73         }
;;;74         return false;
;;;75     }
        0x002092da:    bd70        p.      POP      {r4-r6,pc}
    gaps_read
;;;76     
;;;77     
;;;78     /**
;;;79       * @brief  Used by application, to read data from server by using handles.
;;;80       * @param[in]  conn_id connection ID.
;;;81       * @param[in]  read_type one of characteristic that has the readable property.
;;;82       * @retval true send request to upper stack success.
;;;83       * @retval false send request to upper stack failed.
;;;84       *
;;;85       * <b>Example usage</b>
;;;86       * \code{.c}
;;;87         static T_USER_CMD_PARSE_RESULT cmd_gapread(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;88         {
;;;89             uint8_t conn_id = p_parse_value->dw_param[0];
;;;90             T_GAPS_READ_TYPE read_type = (T_GAPS_READ_TYPE)p_parse_value->dw_param[1];
;;;91             bool ret = gaps_read(conn_id, read_type);
;;;92             ......
;;;93         }
;;;94      * \endcode
;;;95       */
;;;96     bool gaps_read(uint8_t conn_id, T_GAPS_READ_TYPE read_type)
;;;97     {
        0x002092dc:    b570        p.      PUSH     {r4-r6,lr}
        0x002092de:    4606        .F      MOV      r6,r0
        0x002092e0:    48ea        .H      LDR      r0,[pc,#936] ; [0x20968c] = 0x20d0c0
;;; .\..\..\..\src\ble\profile\client\gaps_client.c (97)
        0x002092e2:    460d        .F      MOV      r5,r1
        0x002092e4:    7801        .x      LDRB     r1,[r0,#0]
        0x002092e6:    428e        .B      CMP      r6,r1
        0x002092e8:    d308        ..      BCC      0x2092fc ; gaps_read + 32
;;;98         bool hdl_valid = false;
;;;99         uint16_t  handle;
;;;100        uint16_t *hdl_cache;
;;;101        if (conn_id >= gaps_link_num)
;;;102        {
;;;103            PROFILE_PRINT_ERROR1("gaps_read: failed invalid conn_id %d", conn_id);
        0x002092ea:    49e6        .I      LDR      r1,[pc,#920] ; [0x209684] = 0x8801128
        0x002092ec:    48e6        .H      LDR      r0,[pc,#920] ; [0x209688] = 0x21103302
        0x002092ee:    4633        3F      MOV      r3,r6
        0x002092f0:    2201        ."      MOVS     r2,#1
        0x002092f2:    314c        L1      ADDS     r1,r1,#0x4c
        0x002092f4:    1e80        ..      SUBS     r0,r0,#2
        0x002092f6:    f5fefbb2    ....    BL       log_buffer ; 0x7a5e
;;;104            return false;
        0x002092fa:    e025        %.      B        0x209348 ; gaps_read + 108
;;;105        }
;;;106        hdl_cache = gaps_table[conn_id].hdl_cache;
        0x002092fc:    6880        .h      LDR      r0,[r0,#8]
        0x002092fe:    ebc601c6    ....    RSB      r1,r6,r6,LSL #3
        0x00209302:    eb000441    ..A.    ADD      r4,r0,r1,LSL #1
;;;107    
;;;108        PROFILE_PRINT_INFO1("gaps_read: charType = %d", read_type);
        0x00209306:    49df        .I      LDR      r1,[pc,#892] ; [0x209684] = 0x8801128
        0x00209308:    462b        +F      MOV      r3,r5
        0x0020930a:    2201        ."      MOVS     r2,#1
        0x0020930c:    3174        t1      ADDS     r1,r1,#0x74
        0x0020930e:    48de        .H      LDR      r0,[pc,#888] ; [0x209688] = 0x21103302
        0x00209310:    1ca4        ..      ADDS     r4,r4,#2
        0x00209312:    f5fefba4    ....    BL       log_buffer ; 0x7a5e
;;;109    
;;;110        switch (read_type)
        0x00209316:    b125        %.      CBZ      r5,0x209322 ; gaps_read + 70
        0x00209318:    2d01        .-      CMP      r5,#1
        0x0020931a:    d004        ..      BEQ      0x209326 ; gaps_read + 74
        0x0020931c:    2d02        .-      CMP      r5,#2
        0x0020931e:    d113        ..      BNE      0x209348 ; gaps_read + 108
        0x00209320:    e003        ..      B        0x20932a ; gaps_read + 78
;;;111        {
;;;112        case GAPS_READ_DEVICE_NAME:
;;;113            if (hdl_cache[HDL_GAPS_DEVICE_NAME])
        0x00209322:    88a2        ..      LDRH     r2,[r4,#4]
        0x00209324:    e002        ..      B        0x20932c ; gaps_read + 80
;;;114            {
;;;115                handle = hdl_cache[HDL_GAPS_DEVICE_NAME];
;;;116                hdl_valid = true;
;;;117            }
;;;118            break;
;;;119        case GAPS_READ_APPEARANCE:
;;;120            if (hdl_cache[HDL_GAPS_APPEARANCE])
        0x00209326:    88e2        ..      LDRH     r2,[r4,#6]
        0x00209328:    e000        ..      B        0x20932c ; gaps_read + 80
;;;121            {
;;;122                handle = hdl_cache[HDL_GAPS_APPEARANCE];
;;;123                hdl_valid = true;
;;;124            }
;;;125            break;
;;;126        case GAPS_READ_CENTRAL_ADDR_RESOLUTION:
;;;127            if (hdl_cache[HDL_GAPS_CENTRAL_ADDR_RESOLUTION])
        0x0020932a:    8922        ".      LDRH     r2,[r4,#8]
        0x0020932c:    b12a        *.      CBZ      r2,0x20933a ; gaps_read + 94
        0x0020932e:    48d8        .H      LDR      r0,[pc,#864] ; [0x209690] = 0x20d02a
        0x00209330:    7801        .x      LDRB     r1,[r0,#0]
        0x00209332:    4630        0F      MOV      r0,r6
        0x00209334:    f645f9bd    E...    BL       client_attr_read ; 0x4e6b2
        0x00209338:    b140        @.      CBZ      r0,0x20934c ; gaps_read + 112
        0x0020933a:    49d2        .I      LDR      r1,[pc,#840] ; [0x209684] = 0x8801128
        0x0020933c:    48d2        .H      LDR      r0,[pc,#840] ; [0x209688] = 0x21103302
        0x0020933e:    2200        ."      MOVS     r2,#0
        0x00209340:    3190        .1      ADDS     r1,r1,#0x90
        0x00209342:    1e40        @.      SUBS     r0,r0,#1
        0x00209344:    f5fefb8b    ....    BL       log_buffer ; 0x7a5e
;;;128            {
;;;129                handle = hdl_cache[HDL_GAPS_CENTRAL_ADDR_RESOLUTION];
;;;130                hdl_valid = true;
;;;131            }
;;;132            break;
;;;133        default:
;;;134            return false;
        0x00209348:    2000        .       MOVS     r0,#0
        0x0020934a:    bd70        p.      POP      {r4-r6,pc}
;;;135        }
;;;136    
;;;137        if (hdl_valid)
;;;138        {
;;;139            if (client_attr_read(conn_id, gaps_client, handle) == GAP_CAUSE_SUCCESS)
;;;140            {
;;;141                return true;
        0x0020934c:    2001        .       MOVS     r0,#1
;;;142            }
;;;143        }
;;;144    
;;;145        PROFILE_PRINT_WARN0("gaps_read: Request fail! Please check!");
;;;146        return false;
;;;147    }
        0x0020934e:    bd70        p.      POP      {r4-r6,pc}
    gaps_get_hdl_cache
;;;148    
;;;149    /**
;;;150      * @brief  Used by application, to get handle cache.
;;;151      * @param[in]  conn_id connection ID.
;;;152      * @param[in,out]  p_hdl_cache pointer of the handle cache table
;;;153      * @param[in]  len the length of handle cache table
;;;154      * @retval true success.
;;;155      * @retval false failed.
;;;156      *
;;;157      * <b>Example usage</b>
;;;158      * \code{.c}
;;;159        static T_USER_CMD_PARSE_RESULT cmd_gaphdl(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;160        {
;;;161            uint8_t conn_id = p_parse_value->dw_param[0];
;;;162            uint16_t hdl_cache[HDL_GAPS_CACHE_LEN];
;;;163            uint8_t hdl_idx;
;;;164            bool ret = gaps_get_hdl_cache(conn_id, hdl_cache, sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;165            ......
;;;166        }
;;;167     * \endcode
;;;168      */
;;;169    bool gaps_get_hdl_cache(uint8_t conn_id, uint16_t *p_hdl_cache, uint8_t len)
;;;170    {
        0x00209350:    b570        p.      PUSH     {r4-r6,lr}
        0x00209352:    460e        .F      MOV      r6,r1
;;;171        if (conn_id >= gaps_link_num)
        0x00209354:    49cd        .I      LDR      r1,[pc,#820] ; [0x20968c] = 0x20d0c0
        0x00209356:    4dcc        .M      LDR      r5,[pc,#816] ; [0x209688] = 0x21103302
        0x00209358:    780b        .x      LDRB     r3,[r1,#0]
        0x0020935a:    1ead        ..      SUBS     r5,r5,#2
        0x0020935c:    4298        .B      CMP      r0,r3
        0x0020935e:    d304        ..      BCC      0x20936a ; gaps_get_hdl_cache + 26
;;;172        {
;;;173            PROFILE_PRINT_ERROR1("gaps_get_hdl_cache: failed invalid conn_id %d", conn_id);
        0x00209360:    49c8        .I      LDR      r1,[pc,#800] ; [0x209684] = 0x8801128
        0x00209362:    2201        ."      MOVS     r2,#1
        0x00209364:    4603        .F      MOV      r3,r0
        0x00209366:    31bc        .1      ADDS     r1,r1,#0xbc
;;;174            return false;
        0x00209368:    e010        ..      B        0x20938c ; gaps_get_hdl_cache + 60
;;;175        }
;;;176        if (gaps_table[conn_id].disc_state != DISC_GAPS_DONE)
        0x0020936a:    688b        .h      LDR      r3,[r1,#8]
        0x0020936c:    ebc000c0    ....    RSB      r0,r0,r0,LSL #3
        0x00209370:    f8134010    ...@    LDRB     r4,[r3,r0,LSL #1]
        0x00209374:    2c02        .,      CMP      r4,#2
        0x00209376:    d004        ..      BEQ      0x209382 ; gaps_get_hdl_cache + 50
        0x00209378:    49c2        .I      LDR      r1,[pc,#776] ; [0x209684] = 0x8801128
        0x0020937a:    2201        ."      MOVS     r2,#1
        0x0020937c:    4623        #F      MOV      r3,r4
;;;177        {
;;;178            PROFILE_PRINT_ERROR1("gaps_get_hdl_cache: failed invalid state %d", gaps_table[conn_id].disc_state);
        0x0020937e:    31f0        .1      ADDS     r1,r1,#0xf0
;;;179            return false;
        0x00209380:    e004        ..      B        0x20938c ; gaps_get_hdl_cache + 60
;;;180        }
;;;181        if (len != sizeof(uint16_t) * HDL_GAPS_CACHE_LEN)
        0x00209382:    2a0c        .*      CMP      r2,#0xc
        0x00209384:    d007        ..      BEQ      0x209396 ; gaps_get_hdl_cache + 70
;;;182        {
;;;183            PROFILE_PRINT_ERROR1("gaps_get_hdl_cache: failed invalid len %d", len);
        0x00209386:    4613        .F      MOV      r3,r2
        0x00209388:    49c2        .I      LDR      r1,[pc,#776] ; [0x209694] = 0x8801248
        0x0020938a:    2201        ."      MOVS     r2,#1
        0x0020938c:    4628        (F      MOV      r0,r5
        0x0020938e:    f5fefb66    ..f.    BL       log_buffer ; 0x7a5e
;;;184            return false;
        0x00209392:    2000        .       MOVS     r0,#0
        0x00209394:    bd70        p.      POP      {r4-r6,pc}
;;;185        }
;;;186        memcpy(p_hdl_cache, gaps_table[conn_id].hdl_cache, len);
        0x00209396:    eb030140    ..@.    ADD      r1,r3,r0,LSL #1
        0x0020939a:    4630        0F      MOV      r0,r6
        0x0020939c:    1c89        ..      ADDS     r1,r1,#2
        0x0020939e:    f650fd7c    P.|.    BL       __aeabi_memcpy ; 0x59e9a
;;;187        return true;
        0x002093a2:    2001        .       MOVS     r0,#1
;;;188    }
        0x002093a4:    bd70        p.      POP      {r4-r6,pc}
    gaps_set_hdl_cache
;;;189    
;;;190    /**
;;;191      * @brief  Used by application, to set handle cache.
;;;192      * @param[in]  conn_id connection ID.
;;;193      * @param[in]  p_hdl_cache pointer of the handle cache table
;;;194      * @param[in]  len the length of handle cache table
;;;195      * @retval true success.
;;;196      * @retval false failed.
;;;197      *
;;;198      * <b>Example usage</b>
;;;199      * \code{.c}
;;;200        void app_discov_services(uint8_t conn_id, bool start)
;;;201        {
;;;202            ......
;;;203            if (app_srvs_table.srv_found_flags & APP_DISCOV_GAPS_FLAG)
;;;204            {
;;;205                gaps_set_hdl_cache(conn_id, app_srvs_table.gaps_hdl_cache, sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;206            }
;;;207            ......
;;;208        }
;;;209     * \endcode
;;;210      */
;;;211    bool gaps_set_hdl_cache(uint8_t conn_id, uint16_t *p_hdl_cache, uint8_t len)
;;;212    {
        0x002093a6:    b570        p.      PUSH     {r4-r6,lr}
;;;213        if (conn_id >= gaps_link_num)
        0x002093a8:    4db8        .M      LDR      r5,[pc,#736] ; [0x20968c] = 0x20d0c0
        0x002093aa:    4eb7        .N      LDR      r6,[pc,#732] ; [0x209688] = 0x21103302
        0x002093ac:    782b        +x      LDRB     r3,[r5,#0]
        0x002093ae:    1eb6        ..      SUBS     r6,r6,#2
        0x002093b0:    4298        .B      CMP      r0,r3
        0x002093b2:    d304        ..      BCC      0x2093be ; gaps_set_hdl_cache + 24
;;;214        {
;;;215            PROFILE_PRINT_ERROR1("gaps_set_hdl_cache: failed invalid conn_id %d", conn_id);
        0x002093b4:    49b7        .I      LDR      r1,[pc,#732] ; [0x209694] = 0x8801248
        0x002093b6:    2201        ."      MOVS     r2,#1
        0x002093b8:    4603        .F      MOV      r3,r0
        0x002093ba:    3130        01      ADDS     r1,r1,#0x30
;;;216            return false;
        0x002093bc:    e00f        ..      B        0x2093de ; gaps_set_hdl_cache + 56
;;;217        }
;;;218        if (gaps_table[conn_id].disc_state != DISC_GAPS_IDLE)
        0x002093be:    ebc004c0    ....    RSB      r4,r0,r0,LSL #3
        0x002093c2:    68a8        .h      LDR      r0,[r5,#8]
        0x002093c4:    f8103014    ...0    LDRB     r3,[r0,r4,LSL #1]
        0x002093c8:    b11b        ..      CBZ      r3,0x2093d2 ; gaps_set_hdl_cache + 44
;;;219        {
;;;220            PROFILE_PRINT_ERROR1("gaps_set_hdl_cache: failed invalid state %d", gaps_table[conn_id].disc_state);
        0x002093ca:    49b2        .I      LDR      r1,[pc,#712] ; [0x209694] = 0x8801248
        0x002093cc:    2201        ."      MOVS     r2,#1
        0x002093ce:    3164        d1      ADDS     r1,r1,#0x64
;;;221            return false;
        0x002093d0:    e005        ..      B        0x2093de ; gaps_set_hdl_cache + 56
;;;222        }
;;;223        if (len != sizeof(uint16_t) * HDL_GAPS_CACHE_LEN)
        0x002093d2:    2a0c        .*      CMP      r2,#0xc
        0x002093d4:    d008        ..      BEQ      0x2093e8 ; gaps_set_hdl_cache + 66
;;;224        {
;;;225            PROFILE_PRINT_ERROR1("gaps_set_hdl_cache: failed invalid len %d", len);
        0x002093d6:    4613        .F      MOV      r3,r2
        0x002093d8:    49ae        .I      LDR      r1,[pc,#696] ; [0x209694] = 0x8801248
        0x002093da:    2201        ."      MOVS     r2,#1
        0x002093dc:    3194        .1      ADDS     r1,r1,#0x94
        0x002093de:    4630        0F      MOV      r0,r6
        0x002093e0:    f5fefb3d    ..=.    BL       log_buffer ; 0x7a5e
;;;226            return false;
        0x002093e4:    2000        .       MOVS     r0,#0
        0x002093e6:    bd70        p.      POP      {r4-r6,pc}
;;;227        }
;;;228        memcpy(gaps_table[conn_id].hdl_cache, p_hdl_cache, len);
        0x002093e8:    eb000044    ..D.    ADD      r0,r0,r4,LSL #1
        0x002093ec:    1c80        ..      ADDS     r0,r0,#2
        0x002093ee:    f650fd54    P.T.    BL       __aeabi_memcpy ; 0x59e9a
;;;229        gaps_table[conn_id].disc_state = DISC_GAPS_DONE;
        0x002093f2:    68a9        .h      LDR      r1,[r5,#8]
        0x002093f4:    2002        .       MOVS     r0,#2
        0x002093f6:    f8010014    ....    STRB     r0,[r1,r4,LSL #1]
;;;230        return true;
        0x002093fa:    2001        .       MOVS     r0,#1
;;;231    }
        0x002093fc:    bd70        p.      POP      {r4-r6,pc}
    gaps_check_resolvable_private_addr_only_char
;;;232    
;;;233    /**
;;;234      * @brief  Used by application, to check Resolvable Private Address Only Characteristics whether existing.
;;;235      * @param[in]  conn_id connection ID.
;;;236      * @param[in,out]  p_is_exist whether existing
;;;237      * @retval true success.
;;;238      * @retval false failed.
;;;239      */
;;;240    bool gaps_check_resolvable_private_addr_only_char(uint8_t conn_id, bool *p_is_exist)
;;;241    {
        0x002093fe:    b510        ..      PUSH     {r4,lr}
;;;242        if (conn_id >= gaps_link_num)
        0x00209400:    4aa2        .J      LDR      r2,[pc,#648] ; [0x20968c] = 0x20d0c0
        0x00209402:    4ca1        .L      LDR      r4,[pc,#644] ; [0x209688] = 0x21103302
        0x00209404:    7813        .x      LDRB     r3,[r2,#0]
        0x00209406:    1ea4        ..      SUBS     r4,r4,#2
        0x00209408:    4298        .B      CMP      r0,r3
        0x0020940a:    d304        ..      BCC      0x209416 ; gaps_check_resolvable_private_addr_only_char + 24
;;;243        {
;;;244            PROFILE_PRINT_ERROR1("gaps_get_hdl_cache: failed invalid conn_id %d", conn_id);
        0x0020940c:    49a1        .I      LDR      r1,[pc,#644] ; [0x209694] = 0x8801248
        0x0020940e:    2201        ."      MOVS     r2,#1
        0x00209410:    4603        .F      MOV      r3,r0
        0x00209412:    31c4        .1      ADDS     r1,r1,#0xc4
;;;245            return false;
        0x00209414:    e009        ..      B        0x20942a ; gaps_check_resolvable_private_addr_only_char + 44
;;;246        }
;;;247        if (gaps_table[conn_id].disc_state != DISC_GAPS_DONE)
        0x00209416:    6892        .h      LDR      r2,[r2,#8]
        0x00209418:    ebc000c0    ....    RSB      r0,r0,r0,LSL #3
        0x0020941c:    f8123010    ...0    LDRB     r3,[r2,r0,LSL #1]
        0x00209420:    2b02        .+      CMP      r3,#2
        0x00209422:    d007        ..      BEQ      0x209434 ; gaps_check_resolvable_private_addr_only_char + 54
;;;248        {
;;;249            PROFILE_PRINT_ERROR1("gaps_get_hdl_cache: failed invalid state %d", gaps_table[conn_id].disc_state);
        0x00209424:    499b        .I      LDR      r1,[pc,#620] ; [0x209694] = 0x8801248
        0x00209426:    2201        ."      MOVS     r2,#1
        0x00209428:    31f8        .1      ADDS     r1,r1,#0xf8
        0x0020942a:    4620         F      MOV      r0,r4
        0x0020942c:    f5fefb17    ....    BL       log_buffer ; 0x7a5e
;;;250            return false;
        0x00209430:    2000        .       MOVS     r0,#0
        0x00209432:    bd10        ..      POP      {r4,pc}
;;;251        }
;;;252        if (gaps_table[conn_id].hdl_cache[HDL_GAPS_RESOLVABLE_PRIVATE_ADDR_ONLY] == 0)
        0x00209434:    eb020040    ..@.    ADD      r0,r2,r0,LSL #1
        0x00209438:    8980        ..      LDRH     r0,[r0,#0xc]
        0x0020943a:    b100        ..      CBZ      r0,0x20943e ; gaps_check_resolvable_private_addr_only_char + 64
;;;253        {
;;;254            *p_is_exist = false;
;;;255        }
;;;256        else
;;;257        {
;;;258            *p_is_exist = true;
        0x0020943c:    2001        .       MOVS     r0,#1
        0x0020943e:    7008        .p      STRB     r0,[r1,#0]
;;;259        }
;;;260        return true;
        0x00209440:    2001        .       MOVS     r0,#1
;;;261    }
        0x00209442:    bd10        ..      POP      {r4,pc}
    gaps_client_discover_state_cb
;;;262    
;;;263    static bool gaps_client_start_gap_char_discovery(uint8_t conn_id)
;;;264    {
;;;265        uint16_t start_handle;
;;;266        uint16_t end_handle;
;;;267    
;;;268        PROFILE_PRINT_INFO0("gap_client_start_gap_char_discovery");
;;;269        start_handle = gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_START];
;;;270        end_handle = gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_END];
;;;271        if (client_all_char_discovery(conn_id, gaps_client, start_handle,
;;;272                                      end_handle) == GAP_CAUSE_SUCCESS)
;;;273        {
;;;274            return true;
;;;275        }
;;;276        return false;
;;;277    }
;;;278    
;;;279    static void gaps_client_discover_state_cb(uint8_t conn_id,  T_DISCOVERY_STATE discovery_state)
;;;280    {
        0x00209444:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x00209448:    b086        ..      SUB      sp,sp,#0x18
        0x0020944a:    4607        .F      MOV      r7,r0
        0x0020944c:    2000        .       MOVS     r0,#0
        0x0020944e:    f8dfa238    ..8.    LDR      r10,[pc,#568] ; [0x209688] = 0x21103302
        0x00209452:    4688        .F      MOV      r8,r1
        0x00209454:    f88d0000    ....    STRB     r0,[sp,#0]
        0x00209458:    460b        .F      MOV      r3,r1
        0x0020945a:    2201        ."      MOVS     r2,#1
        0x0020945c:    498e        .I      LDR      r1,[pc,#568] ; [0x209698] = 0x8801398
        0x0020945e:    4650        PF      MOV      r0,r10
        0x00209460:    f5fefafd    ....    BL       log_buffer ; 0x7a5e
        0x00209464:    2603        .&      MOVS     r6,#3
        0x00209466:    f8df9228    ..(.    LDR      r9,[pc,#552] ; [0x209690] = 0x20d02a
        0x0020946a:    4d88        .M      LDR      r5,[pc,#544] ; [0x20968c] = 0x20d0c0
        0x0020946c:    ebc704c7    ....    RSB      r4,r7,r7,LSL #3
        0x00209470:    f1b80f02    ....    CMP      r8,#2
        0x00209474:    d010        ..      BEQ      0x209498 ; gaps_client_discover_state_cb + 84
        0x00209476:    f1b80f06    ....    CMP      r8,#6
        0x0020947a:    d02a        *.      BEQ      0x2094d2 ; gaps_client_discover_state_cb + 142
        0x0020947c:    f1aa0002    ....    SUB      r0,r10,#2
        0x00209480:    f1b80f0b    ....    CMP      r8,#0xb
        0x00209484:    f04f0200    O...    MOV      r2,#0
        0x00209488:    d035        5.      BEQ      0x2094f6 ; gaps_client_discover_state_cb + 178
        0x0020948a:    4983        .I      LDR      r1,[pc,#524] ; [0x209698] = 0x8801398
        0x0020948c:    3150        P1      ADDS     r1,r1,#0x50
        0x0020948e:    f5fefae6    ....    BL       log_buffer ; 0x7a5e
        0x00209492:    b006        ..      ADD      sp,sp,#0x18
        0x00209494:    e8bd87f0    ....    POP      {r4-r10,pc}
        0x00209498:    68a8        .h      LDR      r0,[r5,#8]
        0x0020949a:    eb000144    ..D.    ADD      r1,r0,r4,LSL #1
        0x0020949e:    884a        J.      LDRH     r2,[r1,#2]
        0x002094a0:    b90a        ..      CBNZ     r2,0x2094a6 ; gaps_client_discover_state_cb + 98
        0x002094a2:    8889        ..      LDRH     r1,[r1,#4]
        0x002094a4:    b191        ..      CBZ      r1,0x2094cc ; gaps_client_discover_state_cb + 136
;;; .\..\..\..\src\ble\profile\client\gaps_client.c (268)
        0x002094a6:    497c        |I      LDR      r1,[pc,#496] ; [0x209698] = 0x8801398
        0x002094a8:    2200        ."      MOVS     r2,#0
        0x002094aa:    3928        (9      SUBS     r1,r1,#0x28
        0x002094ac:    4650        PF      MOV      r0,r10
        0x002094ae:    f5fefad6    ....    BL       log_buffer ; 0x7a5e
;;;269        start_handle = gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_START];
        0x002094b2:    68a8        .h      LDR      r0,[r5,#8]
        0x002094b4:    f8991000    ....    LDRB     r1,[r9,#0]
        0x002094b8:    eb000044    ..D.    ADD      r0,r0,r4,LSL #1
        0x002094bc:    8842        B.      LDRH     r2,[r0,#2]
;;;270        end_handle = gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_END];
        0x002094be:    8883        ..      LDRH     r3,[r0,#4]
;;;271        if (client_all_char_discovery(conn_id, gaps_client, start_handle,
        0x002094c0:    4638        8F      MOV      r0,r7
        0x002094c2:    f645f87c    E.|.    BL       client_all_char_discovery ; 0x4e5be
        0x002094c6:    2800        .(      CMP      r0,#0
        0x002094c8:    d0e3        ..      BEQ      0x209492 ; gaps_client_discover_state_cb + 78
;;;272                                      end_handle) == GAP_CAUSE_SUCCESS)
;;;273        {
;;;274            return true;
;;;275        }
;;;276        return false;
;;;277    }
;;;278    
;;;279    static void gaps_client_discover_state_cb(uint8_t conn_id,  T_DISCOVERY_STATE discovery_state)
;;;280    {
;;;281        bool cb_flag = false;
;;;282        T_GAPS_CLIENT_CB_DATA cb_data;
;;;283        cb_data.cb_type = GAPS_CLIENT_CB_TYPE_DISC_STATE;
;;;284    
;;;285        PROFILE_PRINT_INFO1("gaps_client_discover_state_cb: discovery_state %d", discovery_state);
;;;286    
;;;287        switch (discovery_state)
;;;288        {
;;;289        case DISC_STATE_SRV_DONE:
;;;290            /* Indicate that service handle found. Start discover characteristic. */
;;;291            if ((gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_START] != 0)
;;;292                || (gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_END] != 0))
;;;293            {
;;;294                if (gaps_client_start_gap_char_discovery(conn_id) == false)
;;;295                {
;;;296                    gaps_table[conn_id].disc_state = DISC_GAPS_FAILED;
        0x002094ca:    68a8        .h      LDR      r0,[r5,#8]
;;;297                    cb_flag = true;
;;;298                }
;;;299            }
;;;300            /* No GAP service handle found. Discover procedure complete. */
;;;301            else
;;;302            {
;;;303                gaps_table[conn_id].disc_state = DISC_GAPS_FAILED;
        0x002094cc:    f8006014    ...`    STRB     r6,[r0,r4,LSL #1]
;;;304                cb_flag = true;
        0x002094d0:    e003        ..      B        0x2094da ; gaps_client_discover_state_cb + 150
;;;305            }
;;;306            break;
;;;307    
;;;308        case DISC_STATE_CHAR_DONE:
;;;309            gaps_table[conn_id].disc_state = DISC_GAPS_DONE;
        0x002094d2:    68a9        .h      LDR      r1,[r5,#8]
        0x002094d4:    2002        .       MOVS     r0,#2
        0x002094d6:    f8010014    ....    STRB     r0,[r1,r4,LSL #1]
;;;310            cb_flag = true;
;;;311            break;
;;;312    
;;;313        case DISC_STATE_FAILED:
;;;314            PROFILE_PRINT_ERROR0("DISC_STATE_FAILED");
;;;315            gaps_table[conn_id].disc_state = DISC_GAPS_FAILED;
;;;316            cb_flag = true;
;;;317            break;
;;;318        default:
;;;319            PROFILE_PRINT_ERROR0("Invalid Discovery State!");
;;;320            break;
;;;321        }
;;;322        /* Send discover state to application if needed. */
;;;323        if (cb_flag && gaps_client_cb)
        0x002094da:    686b        kh      LDR      r3,[r5,#4]
        0x002094dc:    2b00        .+      CMP      r3,#0
        0x002094de:    d0d8        ..      BEQ      0x209492 ; gaps_client_discover_state_cb + 78
;;;324        {
;;;325            cb_data.cb_content.disc_state = gaps_table[conn_id].disc_state;
        0x002094e0:    68a8        .h      LDR      r0,[r5,#8]
        0x002094e2:    466a        jF      MOV      r2,sp
        0x002094e4:    4639        9F      MOV      r1,r7
        0x002094e6:    f8100014    ....    LDRB     r0,[r0,r4,LSL #1]
        0x002094ea:    f88d0004    ....    STRB     r0,[sp,#4]
;;;326            (*gaps_client_cb)(gaps_client, conn_id, &cb_data);
        0x002094ee:    f8990000    ....    LDRB     r0,[r9,#0]
        0x002094f2:    4798        .G      BLX      r3
;;;327        }
;;;328        return;
;;;329    }
        0x002094f4:    e7cd        ..      B        0x209492 ; gaps_client_discover_state_cb + 78
        0x002094f6:    4968        hI      LDR      r1,[pc,#416] ; [0x209698] = 0x8801398
        0x002094f8:    3138        81      ADDS     r1,r1,#0x38
        0x002094fa:    f5fefab0    ....    BL       log_buffer ; 0x7a5e
        0x002094fe:    e7e4        ..      B        0x2094ca ; gaps_client_discover_state_cb + 134
    gaps_client_discover_result_cb
;;;330    
;;;331    static void gaps_client_discover_result_cb(uint8_t conn_id,  T_DISCOVERY_RESULT_TYPE result_type,
;;;332                                               T_DISCOVERY_RESULT_DATA result_data)
;;;333    {
        0x00209500:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00209504:    460e        .F      MOV      r6,r1
        0x00209506:    460b        .F      MOV      r3,r1
        0x00209508:    4963        cI      LDR      r1,[pc,#396] ; [0x209698] = 0x8801398
        0x0020950a:    4d5f        _M      LDR      r5,[pc,#380] ; [0x209688] = 0x21103302
;;; .\..\..\..\src\ble\profile\client\gaps_client.c (333)
        0x0020950c:    4614        .F      MOV      r4,r2
        0x0020950e:    4607        .F      MOV      r7,r0
;;;334        PROFILE_PRINT_INFO1("gap_client_discover_result_cb: result_type = %d", result_type);
        0x00209510:    2201        ."      MOVS     r2,#1
        0x00209512:    316c        l1      ADDS     r1,r1,#0x6c
        0x00209514:    4628        (F      MOV      r0,r5
        0x00209516:    f5fefaa2    ....    BL       log_buffer ; 0x7a5e
        0x0020951a:    4b5c        \K      LDR      r3,[pc,#368] ; [0x20968c] = 0x20d0c0
        0x0020951c:    ebc701c7    ....    RSB      r1,r7,r7,LSL #3
;;;335        uint16_t handle;
;;;336        switch (result_type)
        0x00209520:    2e02        ..      CMP      r6,#2
        0x00209522:    d005        ..      BEQ      0x209530 ; gaps_client_discover_result_cb + 48
        0x00209524:    2e03        ..      CMP      r6,#3
        0x00209526:    d00c        ..      BEQ      0x209542 ; gaps_client_discover_result_cb + 66
        0x00209528:    2200        ."      MOVS     r2,#0
        0x0020952a:    495c        \I      LDR      r1,[pc,#368] ; [0x20969c] = 0x88014a4
        0x0020952c:    1ea8        ..      SUBS     r0,r5,#2
        0x0020952e:    e01d        ..      B        0x20956c ; gaps_client_discover_result_cb + 108
;;;337        {
;;;338        case DISC_RESULT_SRV_DATA:
;;;339            gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_START] =
        0x00209530:    6898        .h      LDR      r0,[r3,#8]
        0x00209532:    8822        ".      LDRH     r2,[r4,#0]
        0x00209534:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x00209538:    8042        B.      STRH     r2,[r0,#2]
;;;340                result_data.p_srv_disc_data->att_handle;
;;;341            gaps_table[conn_id].hdl_cache[HDL_GAPS_SRV_END] =
        0x0020953a:    8861        a.      LDRH     r1,[r4,#2]
        0x0020953c:    8081        ..      STRH     r1,[r0,#4]
        0x0020953e:    e8bd81f0    ....    POP      {r4-r8,pc}
        0x00209542:    88e0        ..      LDRH     r0,[r4,#6]
;;;342                result_data.p_srv_disc_data->end_group_handle;
;;;343            break;
;;;344    
;;;345        case DISC_RESULT_CHAR_UUID16:
;;;346            handle = result_data.p_char_uuid16_disc_data->value_handle;
        0x00209544:    88a2        ..      LDRH     r2,[r4,#4]
;;;347            /* we should inform intrested handles to upper application. */
;;;348            switch (result_data.p_char_uuid16_disc_data->uuid16)
        0x00209546:    f5b05f28    ..(_    CMP      r0,#0x2a00
        0x0020954a:    d013        ..      BEQ      0x209574 ; gaps_client_discover_result_cb + 116
        0x0020954c:    f46f5428    o.(T    MVN      r4,#0x2a00
        0x00209550:    1900        ..      ADDS     r0,r0,r4
        0x00209552:    d014        ..      BEQ      0x20957e ; gaps_client_discover_result_cb + 126
        0x00209554:    28a5        .(      CMP      r0,#0xa5
        0x00209556:    d017        ..      BEQ      0x209588 ; gaps_client_discover_result_cb + 136
        0x00209558:    28c8        .(      CMP      r0,#0xc8
        0x0020955a:    d1f0        ..      BNE      0x20953e ; gaps_client_discover_result_cb + 62
        0x0020955c:    6898        .h      LDR      r0,[r3,#8]
        0x0020955e:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x00209562:    494e        NI      LDR      r1,[pc,#312] ; [0x20969c] = 0x88014a4
        0x00209564:    8182        ..      STRH     r2,[r0,#0xc]
        0x00209566:    2200        ."      MOVS     r2,#0
        0x00209568:    3938        89      SUBS     r1,r1,#0x38
        0x0020956a:    4628        (F      MOV      r0,r5
        0x0020956c:    e8bd41f0    ...A    POP      {r4-r8,lr}
        0x00209570:    f5feba75    ..u.    B        log_buffer ; 0x7a5e
        0x00209574:    6898        .h      LDR      r0,[r3,#8]
        0x00209576:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x0020957a:    80c2        ..      STRH     r2,[r0,#6]
        0x0020957c:    e7df        ..      B        0x20953e ; gaps_client_discover_result_cb + 62
        0x0020957e:    6898        .h      LDR      r0,[r3,#8]
        0x00209580:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x00209584:    8102        ..      STRH     r2,[r0,#8]
        0x00209586:    e7da        ..      B        0x20953e ; gaps_client_discover_result_cb + 62
;;;349            {
;;;350            case GATT_UUID_CHAR_DEVICE_NAME:
;;;351                gaps_table[conn_id].hdl_cache[HDL_GAPS_DEVICE_NAME] = handle;
;;;352                break;
;;;353            case GATT_UUID_CHAR_APPEARANCE:
;;;354                gaps_table[conn_id].hdl_cache[HDL_GAPS_APPEARANCE] = handle;
;;;355                break;
;;;356            case GATT_UUID_CHAR_CENTRAL_ADDRESS_RESOLUTION:
;;;357                gaps_table[conn_id].hdl_cache[HDL_GAPS_CENTRAL_ADDR_RESOLUTION] = handle;
        0x00209588:    6898        .h      LDR      r0,[r3,#8]
        0x0020958a:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x0020958e:    4943        CI      LDR      r1,[pc,#268] ; [0x20969c] = 0x88014a4
        0x00209590:    8142        B.      STRH     r2,[r0,#0xa]
;;;358                PROFILE_PRINT_INFO0("GATT_UUID_CHAR_CENTRAL_ADDRESS_RESOLUTION found");
        0x00209592:    2200        ."      MOVS     r2,#0
        0x00209594:    396c        l9      SUBS     r1,r1,#0x6c
;;;359                break;
        0x00209596:    e7e8        ..      B        0x20956a ; gaps_client_discover_result_cb + 106
    gaps_client_read_result_cb
;;;360            case GATT_UUID_CHAR_RESOLVABLE_PRIVATE_ADDRESS_ONLY:
;;;361                gaps_table[conn_id].hdl_cache[HDL_GAPS_RESOLVABLE_PRIVATE_ADDR_ONLY] = handle;
;;;362                PROFILE_PRINT_INFO0("GATT_UUID_CHAR_RESOLVABLE_PRIVATE_ADDRESS_ONLY found");
;;;363                break;
;;;364            default:
;;;365                /* have no intrest on this handle. */
;;;366                break;
;;;367            }
;;;368            break;
;;;369    
;;;370        default:
;;;371            PROFILE_PRINT_ERROR0("Invalid Discovery Result Type!");
;;;372            break;
;;;373        }
;;;374    
;;;375        return;
;;;376    }
;;;377    
;;;378    static void gaps_client_read_result_cb(uint8_t conn_id,  uint16_t cause,
;;;379                                           uint16_t handle, uint16_t value_size, uint8_t *p_value)
;;;380    {
        0x00209598:    e92d4ff0    -..O    PUSH     {r4-r11,lr}
        0x0020959c:    f8dfa0ec    ....    LDR      r10,[pc,#236] ; [0x20968c] = 0x20d0c0
;;; .\..\..\..\src\ble\profile\client\gaps_client.c (380)
        0x002095a0:    460c        .F      MOV      r4,r1
        0x002095a2:    4683        .F      MOV      r11,r0
        0x002095a4:    ebc001cb    ....    RSB      r1,r0,r11,LSL #3
        0x002095a8:    f8da0008    ....    LDR      r0,[r10,#8]
        0x002095ac:    b087        ..      SUB      sp,sp,#0x1c
        0x002095ae:    eb000541    ..A.    ADD      r5,r0,r1,LSL #1
        0x002095b2:    4698        .F      MOV      r8,r3
        0x002095b4:    4939        9I      LDR      r1,[pc,#228] ; [0x20969c] = 0x88014a4
        0x002095b6:    4617        .F      MOV      r7,r2
;;;381        T_GAPS_CLIENT_CB_DATA cb_data;
;;;382        uint16_t *hdl_cache;
;;;383        hdl_cache = gaps_table[conn_id].hdl_cache;
        0x002095b8:    9e10        ..      LDR      r6,[sp,#0x40]
;;;384        cb_data.cb_type = GAPS_CLIENT_CB_TYPE_READ_RESULT;
        0x002095ba:    f04f0901    O...    MOV      r9,#1
        0x002095be:    f8ad4014    ...@    STRH     r4,[sp,#0x14]
        0x002095c2:    4613        .F      MOV      r3,r2
        0x002095c4:    f88d9004    ....    STRB     r9,[sp,#4]
;;;385        cb_data.cb_content.read_result.cause = cause;
;;;386    
;;;387        PROFILE_PRINT_INFO2("gap_client_read_result_cb: handle 0x%x, cause 0x%x", handle, cause);
        0x002095c8:    2202        ."      MOVS     r2,#2
        0x002095ca:    3124        $1      ADDS     r1,r1,#0x24
        0x002095cc:    482e        .H      LDR      r0,[pc,#184] ; [0x209688] = 0x21103302
        0x002095ce:    1cad        ..      ADDS     r5,r5,#2
        0x002095d0:    9400        ..      STR      r4,[sp,#0]
        0x002095d2:    f5fefa44    ..D.    BL       log_buffer ; 0x7a5e
;;;388    
;;;389        if (handle == hdl_cache[HDL_GAPS_APPEARANCE])
        0x002095d6:    88e8        ..      LDRH     r0,[r5,#6]
        0x002095d8:    42b8        .B      CMP      r0,r7
        0x002095da:    d118        ..      BNE      0x20960e ; gaps_client_read_result_cb + 118
;;;390        {
;;;391            cb_data.cb_content.read_result.type = GAPS_READ_APPEARANCE;
        0x002095dc:    f88d9008    ....    STRB     r9,[sp,#8]
;;;392            if (cause == GAP_SUCCESS)
        0x002095e0:    b9fc        ..      CBNZ     r4,0x209622 ; gaps_client_read_result_cb + 138
;;;393            {
;;;394                uint16_t appearance;
;;;395                if (value_size != 2)
        0x002095e2:    4640        @F      MOV      r0,r8
        0x002095e4:    f1b80f02    ....    CMP      r8,#2
        0x002095e8:    d00a        ..      BEQ      0x209600 ; gaps_client_read_result_cb + 104
;;;396                {
;;;397                    PROFILE_PRINT_ERROR1("gaps_client_read_result_cb: invalid cccd len %d", value_size);
        0x002095ea:    4603        .F      MOV      r3,r0
        0x002095ec:    492b        +I      LDR      r1,[pc,#172] ; [0x20969c] = 0x88014a4
        0x002095ee:    4826        &H      LDR      r0,[pc,#152] ; [0x209688] = 0x21103302
        0x002095f0:    2201        ."      MOVS     r2,#1
        0x002095f2:    315c        \1      ADDS     r1,r1,#0x5c
        0x002095f4:    1e80        ..      SUBS     r0,r0,#2
        0x002095f6:    f5fefa32    ..2.    BL       log_buffer ; 0x7a5e
        0x002095fa:    b007        ..      ADD      sp,sp,#0x1c
        0x002095fc:    e8bd8ff0    ....    POP      {r4-r11,pc}
;;;398                    return;
;;;399                }
;;;400                LE_ARRAY_TO_UINT16(appearance, p_value);
        0x00209600:    7830        0x      LDRB     r0,[r6,#0]
        0x00209602:    7871        qx      LDRB     r1,[r6,#1]
        0x00209604:    eb002001    ...     ADD      r0,r0,r1,LSL #8
;;;401                cb_data.cb_content.read_result.data.appearance = appearance;
        0x00209608:    f8ad000c    ....    STRH     r0,[sp,#0xc]
;;;402            }
        0x0020960c:    e014        ..      B        0x209638 ; gaps_client_read_result_cb + 160
;;;403        }
;;;404        else if (handle == hdl_cache[HDL_GAPS_DEVICE_NAME])
        0x0020960e:    88a8        ..      LDRH     r0,[r5,#4]
        0x00209610:    42b8        .B      CMP      r0,r7
        0x00209612:    d107        ..      BNE      0x209624 ; gaps_client_read_result_cb + 140
;;;405        {
;;;406            cb_data.cb_content.read_result.type = GAPS_READ_DEVICE_NAME;
        0x00209614:    2000        .       MOVS     r0,#0
        0x00209616:    f88d0008    ....    STRB     r0,[sp,#8]
;;;407            if (cause == GAP_SUCCESS)
        0x0020961a:    b914        ..      CBNZ     r4,0x209622 ; gaps_client_read_result_cb + 138
;;;408            {
;;;409                cb_data.cb_content.read_result.data.device_name.value_size = value_size;
        0x0020961c:    f8ad800c    ....    STRH     r8,[sp,#0xc]
;;;410                cb_data.cb_content.read_result.data.device_name.p_value = p_value;
        0x00209620:    9604        ..      STR      r6,[sp,#0x10]
        0x00209622:    e009        ..      B        0x209638 ; gaps_client_read_result_cb + 160
;;;411            }
;;;412        }
;;;413        else if (handle == hdl_cache[HDL_GAPS_CENTRAL_ADDR_RESOLUTION])
        0x00209624:    8928        (.      LDRH     r0,[r5,#8]
        0x00209626:    42b8        .B      CMP      r0,r7
        0x00209628:    d1e7        ..      BNE      0x2095fa ; gaps_client_read_result_cb + 98
;;;414        {
;;;415            cb_data.cb_content.read_result.type = GAPS_READ_CENTRAL_ADDR_RESOLUTION;
        0x0020962a:    2002        .       MOVS     r0,#2
        0x0020962c:    f88d0008    ....    STRB     r0,[sp,#8]
;;;416            if (cause == GAP_SUCCESS)
        0x00209630:    b914        ..      CBNZ     r4,0x209638 ; gaps_client_read_result_cb + 160
;;;417            {
;;;418                cb_data.cb_content.read_result.data.central_addr_res = *p_value;
        0x00209632:    7830        0x      LDRB     r0,[r6,#0]
        0x00209634:    f88d000c    ....    STRB     r0,[sp,#0xc]
;;;419            }
;;;420        }
;;;421        else
;;;422        {
;;;423            return;
;;;424        }
;;;425    
;;;426        /* Inform application the read result. */
;;;427        if (gaps_client_cb)
        0x00209638:    f8da3004    ...0    LDR      r3,[r10,#4]
        0x0020963c:    2b00        .+      CMP      r3,#0
        0x0020963e:    d0dc        ..      BEQ      0x2095fa ; gaps_client_read_result_cb + 98
;;;428        {
;;;429            (*gaps_client_cb)(gaps_client, conn_id, &cb_data);
        0x00209640:    4813        .H      LDR      r0,[pc,#76] ; [0x209690] = 0x20d02a
        0x00209642:    aa01        ..      ADD      r2,sp,#4
        0x00209644:    4659        YF      MOV      r1,r11
        0x00209646:    7800        .x      LDRB     r0,[r0,#0]
        0x00209648:    4798        .G      BLX      r3
;;;430        }
;;;431        return;
;;;432    }
        0x0020964a:    e7d6        ..      B        0x2095fa ; gaps_client_read_result_cb + 98
    gaps_client_disc_cb
;;;433    
;;;434    
;;;435    static void gaps_client_disc_cb(uint8_t conn_id)
;;;436    {
        0x0020964c:    b510        ..      PUSH     {r4,lr}
        0x0020964e:    4913        .I      LDR      r1,[pc,#76] ; [0x20969c] = 0x88014a4
;;; .\..\..\..\src\ble\profile\client\gaps_client.c (436)
        0x00209650:    4604        .F      MOV      r4,r0
;;;437        PROFILE_PRINT_INFO0("gap_client_disc_cb.");
        0x00209652:    2200        ."      MOVS     r2,#0
        0x00209654:    3190        .1      ADDS     r1,r1,#0x90
        0x00209656:    480c        .H      LDR      r0,[pc,#48] ; [0x209688] = 0x21103302
        0x00209658:    f5fefa01    ....    BL       log_buffer ; 0x7a5e
;;;438        if (conn_id >= gaps_link_num)
        0x0020965c:    480b        .H      LDR      r0,[pc,#44] ; [0x20968c] = 0x20d0c0
        0x0020965e:    7801        .x      LDRB     r1,[r0,#0]
        0x00209660:    428c        .B      CMP      r4,r1
        0x00209662:    d309        ..      BCC      0x209678 ; gaps_client_disc_cb + 44
;;;439        {
;;;440            PROFILE_PRINT_ERROR1("gaps_client_disc_cb: failed invalid conn_id %d", conn_id);
        0x00209664:    490d        .I      LDR      r1,[pc,#52] ; [0x20969c] = 0x88014a4
        0x00209666:    4623        #F      MOV      r3,r4
        0x00209668:    4807        .H      LDR      r0,[pc,#28] ; [0x209688] = 0x21103302
        0x0020966a:    2201        ."      MOVS     r2,#1
        0x0020966c:    31a8        .1      ADDS     r1,r1,#0xa8
        0x0020966e:    e8bd4010    ...@    POP      {r4,lr}
        0x00209672:    1e80        ..      SUBS     r0,r0,#2
        0x00209674:    f5feb9f3    ....    B        log_buffer ; 0x7a5e
;;;441            return;
;;;442        }
;;;443        memset(&gaps_table[conn_id], 0, sizeof(T_GAPS_LINK));
        0x00209678:    6880        .h      LDR      r0,[r0,#8]
        0x0020967a:    ebc401c4    ....    RSB      r1,r4,r4,LSL #3
        0x0020967e:    eb000041    ..A.    ADD      r0,r0,r1,LSL #1
        0x00209682:    e00d        ..      B        0x2096a0 ; gaps_client_disc_cb + 84
    $d
        0x00209684:    08801128    (...    DCD    142610728
        0x00209688:    21103302    .3.!    DCD    554709762
        0x0020968c:    0020d0c0    .. .    DCD    2150592
        0x00209690:    0020d02a    *. .    DCD    2150442
        0x00209694:    08801248    H...    DCD    142611016
        0x00209698:    08801398    ....    DCD    142611352
        0x0020969c:    088014a4    ....    DCD    142611620
    $t
        0x002096a0:    e8bd4010    ...@    POP      {r4,lr}
        0x002096a4:    210e        .!      MOVS     r1,#0xe
        0x002096a6:    f650bcb9    P...    B        __aeabi_memclr ; 0x5a01c
    gaps_add_client
;;;444        return;
;;;445    }
;;;446    /**
;;;447     * @brief GAPS Client Callbacks.
;;;448    */
;;;449    const T_FUN_CLIENT_CBS gaps_client_cbs =
;;;450    {
;;;451        gaps_client_discover_state_cb,   //!< Discovery State callback function pointer
;;;452        gaps_client_discover_result_cb,  //!< Discovery result callback function pointer
;;;453        gaps_client_read_result_cb,      //!< Read response callback function pointer
;;;454        NULL,     //!< Write result callback function pointer
;;;455        NULL,  //!< Notify Indicate callback function pointer
;;;456        gaps_client_disc_cb       //!< Link disconnection callback function pointer
;;;457    };
;;;458    
;;;459    /**
;;;460      * @brief  Add gap service client to application.
;;;461      * @param[in]  app_cb pointer of app callback function to handle specific client module data.
;;;462      * @param[in]  link_num initialize link num.
;;;463      * @return Client ID of the specific client module.
;;;464      * @retval 0xff failed.
;;;465      * @retval other success.
;;;466      *
;;;467      * <b>Example usage</b>
;;;468      * \code{.c}
;;;469        void app_le_profile_init(void)
;;;470        {
;;;471            client_init(1);
;;;472            gaps_client_id  = gaps_add_client(app_client_callback, APP_MAX_LINKS);
;;;473        }
;;;474     * \endcode
;;;475      */
;;;476    T_CLIENT_ID gaps_add_client(P_FUN_GENERAL_APP_CB app_cb, uint8_t link_num)
;;;477    {
        0x002096aa:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x002096ae:    4d1a        .M      LDR      r5,[pc,#104] ; [0x209718] = 0x21103300
        0x002096b0:    4607        .F      MOV      r7,r0
        0x002096b2:    460c        .F      MOV      r4,r1
        0x002096b4:    2904        .)      CMP      r1,#4
        0x002096b6:    d907        ..      BLS      0x2096c8 ; gaps_add_client + 30
;;;478        uint16_t size;
;;;479        if (link_num > GAPS_MAX_LINKS)
;;;480        {
;;;481            PROFILE_PRINT_ERROR1("gaps_add_client: invalid link_num %d", link_num);
        0x002096b8:    460b        .F      MOV      r3,r1
        0x002096ba:    2201        ."      MOVS     r2,#1
        0x002096bc:    4917        .I      LDR      r1,[pc,#92] ; [0x20971c] = 0x8801580
        0x002096be:    4628        (F      MOV      r0,r5
        0x002096c0:    f5fef9cd    ....    BL       log_buffer ; 0x7a5e
;;;482            return 0xff;
        0x002096c4:    20ff        .       MOVS     r0,#0xff
        0x002096c6:    e73a        :.      B        0x20953e ; gaps_client_discover_result_cb + 62
;;;483        }
;;;484        if (false == client_register_spec_client_cb(&gaps_client, &gaps_client_cbs))
        0x002096c8:    4915        .I      LDR      r1,[pc,#84] ; [0x209720] = 0x21c7cc
        0x002096ca:    4816        .H      LDR      r0,[pc,#88] ; [0x209724] = 0x20d02a
        0x002096cc:    f644fe52    D.R.    BL       client_register_spec_client_cb ; 0x4e374
        0x002096d0:    4e14        .N      LDR      r6,[pc,#80] ; [0x209724] = 0x20d02a
        0x002096d2:    b1b8        ..      CBZ      r0,0x209704 ; gaps_add_client + 90
;;;485        {
;;;486            gaps_client = CLIENT_PROFILE_GENERAL_ID;
;;;487            PROFILE_PRINT_ERROR0("gaps_add_client Fail !!!");
;;;488            return gaps_client;
;;;489        }
;;;490        PROFILE_PRINT_INFO1("gaps_add_client: client ID = %d", gaps_client);
        0x002096d4:    4911        .I      LDR      r1,[pc,#68] ; [0x20971c] = 0x8801580
        0x002096d6:    4810        .H      LDR      r0,[pc,#64] ; [0x209718] = 0x21103300
        0x002096d8:    7833        3x      LDRB     r3,[r6,#0]
        0x002096da:    2201        ."      MOVS     r2,#1
        0x002096dc:    3144        D1      ADDS     r1,r1,#0x44
        0x002096de:    1c80        ..      ADDS     r0,r0,#2
        0x002096e0:    f5fef9bd    ....    BL       log_buffer ; 0x7a5e
;;;491    
;;;492        /* register callback for profile to inform application that some events happened. */
;;;493        gaps_client_cb = app_cb;
        0x002096e4:    4d10        .M      LDR      r5,[pc,#64] ; [0x209728] = 0x20d0c0
        0x002096e6:    ebc400c4    ....    RSB      r0,r4,r4,LSL #3
        0x002096ea:    4a0d        .J      LDR      r2,[pc,#52] ; [0x209720] = 0x21c7cc
;;;494        gaps_link_num = link_num;
        0x002096ec:    606f        o`      STR      r7,[r5,#4]
        0x002096ee:    0041        A.      LSLS     r1,r0,#1
        0x002096f0:    702c        ,p      STRB     r4,[r5,#0]
;;;495        size = gaps_link_num * sizeof(T_GAPS_LINK);
;;;496        gaps_table = os_mem_zalloc(RAM_TYPE_DATA_ON, size);
        0x002096f2:    f44f73f8    O..s    MOV      r3,#0x1f0
        0x002096f6:    3218        .2      ADDS     r2,r2,#0x18
        0x002096f8:    2000        .       MOVS     r0,#0
        0x002096fa:    f61cfb5d    ..].    BL       os_mem_zalloc_intern ; 0x25db8
        0x002096fe:    60a8        .`      STR      r0,[r5,#8]
;;;497    
;;;498        return gaps_client;
        0x00209700:    7830        0x      LDRB     r0,[r6,#0]
;;;499    }
        0x00209702:    e71c        ..      B        0x20953e ; gaps_client_discover_result_cb + 62
        0x00209704:    20ff        .       MOVS     r0,#0xff
        0x00209706:    4905        .I      LDR      r1,[pc,#20] ; [0x20971c] = 0x8801580
        0x00209708:    7030        0p      STRB     r0,[r6,#0]
        0x0020970a:    2200        ."      MOVS     r2,#0
        0x0020970c:    3128        (1      ADDS     r1,r1,#0x28
        0x0020970e:    4628        (F      MOV      r0,r5
        0x00209710:    f5fef9a5    ....    BL       log_buffer ; 0x7a5e
        0x00209714:    e7f4        ..      B        0x209700 ; gaps_add_client + 86
    $d
        0x00209716:    0000        ..      DCW    0
        0x00209718:    21103300    .3.!    DCD    554709760
        0x0020971c:    08801580    ....    DCD    142611840
        0x00209720:    0021c7cc    ..!.    DCD    2213836
        0x00209724:    0020d02a    *. .    DCD    2150442
        0x00209728:    0020d0c0    .. .    DCD    2150592
    $t
    .text
    cmd_showcon
;;; ..\..\..\src\sample\ble_central\user_cmd.c
;;;75     {
        0x0020972c:    b510        ..      PUSH     {r4,lr}
        0x0020972e:    f5ad7d06    ...}    SUB      sp,sp,#0x218
;;;76         uint8_t conn_id;
;;;77     	char cmd_buffer[FRAMING_PAYLOAD_MAX_LENGTH];
;;;78         T_GAP_CONN_INFO conn_info;
;;;79         for (conn_id = 0; conn_id < APP_MAX_LINKS; conn_id++)
        0x00209732:    2400        .$      MOVS     r4,#0
;;;80         {
;;;81             if (le_get_conn_info(conn_id, &conn_info))
        0x00209734:    a983        ..      ADD      r1,sp,#0x20c
        0x00209736:    4620         F      MOV      r0,r4
        0x00209738:    f644fa1e    D...    BL       le_get_conn_info ; 0x4db78
        0x0020973c:    b1f8        ..      CBZ      r0,0x20977e ; cmd_showcon + 82
;;;82             {
;;;83     #if 0   //by vsop     	
;;;84           data_uart_print("#showcon#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",conn_id,
;;;85     				conn_info.remote_bd[5], conn_info.remote_bd[4],
;;;86     				conn_info.remote_bd[3], conn_info.remote_bd[2],
;;;87     				conn_info.remote_bd[1], conn_info.remote_bd[0]);
;;;88     #else
;;;89     	sprintf(cmd_buffer,"#showcon#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",conn_id,
        0x0020973e:    f89d0211    ....    LDRB     r0,[sp,#0x211]
        0x00209742:    f10d0c04    ....    ADD      r12,sp,#4
        0x00209746:    f89d320e    ...2    LDRB     r3,[sp,#0x20e]
        0x0020974a:    f89d220f    ..."    LDRB     r2,[sp,#0x20f]
        0x0020974e:    f89d1210    ....    LDRB     r1,[sp,#0x210]
        0x00209752:    e88c000f    ....    STM      r12,{r0-r3}
        0x00209756:    f89d0212    ....    LDRB     r0,[sp,#0x212]
        0x0020975a:    9000        ..      STR      r0,[sp,#0]
        0x0020975c:    f89d3213    ...2    LDRB     r3,[sp,#0x213]
        0x00209760:    4622        "F      MOV      r2,r4
        0x00209762:    a1f7        ..      ADR      r1,{pc}+0x3de ; 0x209b40
        0x00209764:    a805        ..      ADD      r0,sp,#0x14
        0x00209766:    f012ff3b    ..;.    BL       __2sprintf ; 0x21c5e0
;;;90     		conn_info.remote_bd[5], conn_info.remote_bd[4],
;;;91     		conn_info.remote_bd[3], conn_info.remote_bd[2],
;;;92     		conn_info.remote_bd[1], conn_info.remote_bd[0]);
;;;93     
;;;94     	FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));
        0x0020976a:    a805        ..      ADD      r0,sp,#0x14
        0x0020976c:    f650fb76    P.v.    BL       strlen ; 0x59e5c
        0x00209770:    b281        ..      UXTH     r1,r0
        0x00209772:    a805        ..      ADD      r0,sp,#0x14
        0x00209774:    f001fa39    ..9.    BL       FramingWrapFrameUartPrint ; 0x20abea
;;;95     	os_delay(100);
        0x00209778:    2064        d       MOVS     r0,#0x64
        0x0020977a:    f61cfff9    ....    BL       os_delay ; 0x26770
        0x0020977e:    1c64        d.      ADDS     r4,r4,#1
        0x00209780:    b2e4        ..      UXTB     r4,r4
        0x00209782:    2c04        .,      CMP      r4,#4
        0x00209784:    d3d6        ..      BCC      0x209734 ; cmd_showcon + 8
        0x00209786:    f50d7d06    ...}    ADD      sp,sp,#0x218
;;;96     
;;;97     #endif
;;;98             }
;;;99         }
;;;100    #if 0	//by vsop
;;;101        data_uart_print("active link num %d,  idle link num %d\r\n",
;;;102                        le_get_active_link_num(), le_get_idle_link_num());
;;;103    #endif
;;;104        return (RESULT_SUCESS);
        0x0020978a:    2000        .       MOVS     r0,#0
;;;105    }
        0x0020978c:    bd10        ..      POP      {r4,pc}
    cmd_conupdreq
;;;106    
;;;107    /**
;;;108     * @brief LE connection param update request
;;;109     *
;;;110     * <b>Command table define</b>
;;;111     * \code{.c}
;;;112        {
;;;113            "conupdreq",
;;;114            "conupdreq [conn_id] [interval_min] [interval_max] [latency] [supervision_timeout]\n\r",
;;;115            "LE connection param update request\r\n\
;;;116            sample: conupdreq 0 0x30 0x40 0 500\n\r",
;;;117            cmd_conupdreq
;;;118        },
;;;119     * \endcode
;;;120     */
;;;121    static T_USER_CMD_PARSE_RESULT cmd_conupdreq(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;122    {
        0x0020978e:    b5fe        ..      PUSH     {r1-r7,lr}
        0x00209790:    8981        ..      LDRH     r1,[r0,#0xc]
        0x00209792:    8a02        ..      LDRH     r2,[r0,#0x10]
        0x00209794:    8a83        ..      LDRH     r3,[r0,#0x14]
;;;123        T_GAP_CAUSE cause;
;;;124        uint8_t  conn_id = p_parse_value->dw_param[0];
        0x00209796:    7a04        .z      LDRB     r4,[r0,#8]
;;;125        uint16_t conn_interval_min = p_parse_value->dw_param[1];
        0x00209798:    b289        ..      UXTH     r1,r1
        0x0020979a:    8b00        ..      LDRH     r0,[r0,#0x18]
        0x0020979c:    004e        N.      LSLS     r6,r1,#1
        0x0020979e:    1eb6        ..      SUBS     r6,r6,#2
;;;126        uint16_t conn_interval_max = p_parse_value->dw_param[2];
        0x002097a0:    b292        ..      UXTH     r2,r2
        0x002097a2:    b280        ..      UXTH     r0,r0
        0x002097a4:    b2b6        ..      UXTH     r6,r6
        0x002097a6:    0055        U.      LSLS     r5,r2,#1
        0x002097a8:    e9cd0600    ....    STRD     r0,r6,[sp,#0]
        0x002097ac:    1ead        ..      SUBS     r5,r5,#2
        0x002097ae:    b2ad        ..      UXTH     r5,r5
;;;127        uint16_t conn_latency = p_parse_value->dw_param[3];
        0x002097b0:    b29b        ..      UXTH     r3,r3
;;;128        uint16_t supervision_timeout = p_parse_value->dw_param[4];
;;;129    
;;;130    
;;;131        cause = le_update_conn_param(conn_id,
        0x002097b2:    9502        ..      STR      r5,[sp,#8]
        0x002097b4:    4620         F      MOV      r0,r4
        0x002097b6:    f644fa68    D.h.    BL       le_update_conn_param ; 0x4dc8a
;;;132                                     conn_interval_min,
;;;133                                     conn_interval_max,
;;;134                                     conn_latency,
;;;135                                     supervision_timeout,
;;;136                                     2 * (conn_interval_min - 1),
;;;137                                     2 * (conn_interval_max - 1)
;;;138                                    );
;;;139        return (T_USER_CMD_PARSE_RESULT)cause;
;;;140    }
        0x002097ba:    bdfe        ..      POP      {r1-r7,pc}
    cmd_disc
;;;141    
;;;142    /**
;;;143     * @brief Disconnect to remote device
;;;144     *
;;;145     * <b>Command table define</b>
;;;146     * \code{.c}
;;;147        {
;;;148            "disc",
;;;149            "disc [conn_id]\n\r",
;;;150            "Disconnect to remote device\n\r",
;;;151            cmd_disc
;;;152        },
;;;153     * \endcode
;;;154     */
;;;155    static T_USER_CMD_PARSE_RESULT cmd_disc(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;156    {
;;;157        uint8_t conn_id = p_parse_value->dw_param[0];
        0x002097bc:    7a00        .z      LDRB     r0,[r0,#8]
;;;158        T_GAP_CAUSE cause;
;;;159        cause = le_disconnect(conn_id);
        0x002097be:    f644ba31    D.1.    B        le_disconnect ; 0x4dc24
    cmd_authmode
;;;160        return (T_USER_CMD_PARSE_RESULT)cause;
;;;161    }
;;;162    
;;;163    /**
;;;164     * @brief Config authentication mode
;;;165     *
;;;166     * <b>Command table define</b>
;;;167     * \code{.c}
;;;168        {
;;;169            "authmode",
;;;170            "authmode [auth_flags] [io_cap] [sec_enable] [oob_enable]\n\r",
;;;171            "Config authentication mode\r\n\
;;;172            [auth_flags]:authentication req bit field: bit0-(bonding), bit2-(MITM), bit3-(SC)\r\n\
;;;173            [io_cap]:set io Capabilities: 0-(display only), 1-(display yes/no), 2-(keyboard noly), 3-(no IO), 4-(keyboard display)\r\n\
;;;174            [sec_enable]:Start smp pairing procedure when connected: 0-(disable), 1-(enable)\r\n\
;;;175            [oob_enable]:Enable oob flag: 0-(disable), 1-(enable)\r\n\
;;;176            sample: authmode 0x5 2 1 0\n\r",
;;;177            cmd_authmode
;;;178        },
;;;179     * \endcode
;;;180     */
;;;181    static T_USER_CMD_PARSE_RESULT cmd_authmode(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;182    {
        0x002097c2:    b500        ..      PUSH     {lr}
        0x002097c4:    b087        ..      SUB      sp,sp,#0x1c
;;;183        T_GAP_CAUSE cause;
;;;184        uint8_t  auth_pair_mode = GAP_PAIRING_MODE_PAIRABLE;
        0x002097c6:    2101        .!      MOVS     r1,#1
        0x002097c8:    2203        ."      MOVS     r2,#3
        0x002097ca:    f88d2010    ...     STRB     r2,[sp,#0x10]
        0x002097ce:    2200        ."      MOVS     r2,#0
        0x002097d0:    f88d1014    ....    STRB     r1,[sp,#0x14]
;;;185        uint16_t auth_flags = GAP_AUTHEN_BIT_BONDING_FLAG;
        0x002097d4:    f8ad100c    ....    STRH     r1,[sp,#0xc]
;;;186        uint8_t  auth_io_cap = GAP_IO_CAP_NO_INPUT_NO_OUTPUT;
;;;187        uint8_t  oob_enable = false;
        0x002097d8:    f88d2000    ...     STRB     r2,[sp,#0]
;;;188        uint8_t  auth_sec_req_enable = false;
        0x002097dc:    f88d2004    ...     STRB     r2,[sp,#4]
;;;189        uint16_t auth_sec_req_flags = GAP_AUTHEN_BIT_BONDING_FLAG;
        0x002097e0:    f8ad1008    ....    STRH     r1,[sp,#8]
;;;190    
;;;191        if (p_parse_value->param_count > 0)
        0x002097e4:    6841        Ah      LDR      r1,[r0,#4]
        0x002097e6:    2900        .)      CMP      r1,#0
        0x002097e8:    dd04        ..      BLE      0x2097f4 ; cmd_authmode + 50
;;;192        {
;;;193            auth_flags = p_parse_value->dw_param[0];
        0x002097ea:    8902        ..      LDRH     r2,[r0,#8]
        0x002097ec:    f8ad200c    ...     STRH     r2,[sp,#0xc]
;;;194            auth_sec_req_flags = p_parse_value->dw_param[0];
        0x002097f0:    f8ad2008    ...     STRH     r2,[sp,#8]
;;;195        }
;;;196        if (p_parse_value->param_count > 1)
        0x002097f4:    2901        .)      CMP      r1,#1
        0x002097f6:    dd02        ..      BLE      0x2097fe ; cmd_authmode + 60
;;;197        {
;;;198            auth_io_cap = p_parse_value->dw_param[1];
        0x002097f8:    7b02        .{      LDRB     r2,[r0,#0xc]
        0x002097fa:    f88d2010    ...     STRB     r2,[sp,#0x10]
;;;199        }
;;;200        if (p_parse_value->param_count > 2)
        0x002097fe:    2902        .)      CMP      r1,#2
        0x00209800:    dd02        ..      BLE      0x209808 ; cmd_authmode + 70
;;;201        {
;;;202            auth_sec_req_enable = p_parse_value->dw_param[2];
        0x00209802:    7c02        .|      LDRB     r2,[r0,#0x10]
        0x00209804:    f88d2004    ...     STRB     r2,[sp,#4]
;;;203        }
;;;204        if (p_parse_value->param_count > 3)
        0x00209808:    2903        .)      CMP      r1,#3
        0x0020980a:    dd02        ..      BLE      0x209812 ; cmd_authmode + 80
;;;205        {
;;;206            oob_enable = p_parse_value->dw_param[3];
        0x0020980c:    7d00        .}      LDRB     r0,[r0,#0x14]
        0x0020980e:    f88d0000    ....    STRB     r0,[sp,#0]
;;;207        }
;;;208        gap_set_param(GAP_PARAM_BOND_PAIRING_MODE, sizeof(auth_pair_mode), &auth_pair_mode);
        0x00209812:    aa05        ..      ADD      r2,sp,#0x14
        0x00209814:    2101        .!      MOVS     r1,#1
        0x00209816:    f2402002    @..     MOV      r0,#0x202
        0x0020981a:    f642fbc6    B...    BL       gap_set_param ; 0x4bfaa
;;;209        gap_set_param(GAP_PARAM_BOND_AUTHEN_REQUIREMENTS_FLAGS, sizeof(auth_flags), &auth_flags);
        0x0020981e:    aa03        ..      ADD      r2,sp,#0xc
        0x00209820:    2102        .!      MOVS     r1,#2
        0x00209822:    f2402003    @..     MOV      r0,#0x203
        0x00209826:    f642fbc0    B...    BL       gap_set_param ; 0x4bfaa
;;;210        gap_set_param(GAP_PARAM_BOND_IO_CAPABILITIES, sizeof(auth_io_cap), &auth_io_cap);
        0x0020982a:    aa04        ..      ADD      r2,sp,#0x10
        0x0020982c:    2101        .!      MOVS     r1,#1
        0x0020982e:    f44f7001    O..p    MOV      r0,#0x204
        0x00209832:    f642fbba    B...    BL       gap_set_param ; 0x4bfaa
;;;211        gap_set_param(GAP_PARAM_BOND_OOB_ENABLED, sizeof(uint8_t), &oob_enable);
        0x00209836:    466a        jF      MOV      r2,sp
        0x00209838:    2101        .!      MOVS     r1,#1
        0x0020983a:    f2402005    @..     MOV      r0,#0x205
        0x0020983e:    f642fbb4    B...    BL       gap_set_param ; 0x4bfaa
;;;212        le_bond_set_param(GAP_PARAM_BOND_SEC_REQ_ENABLE, sizeof(auth_sec_req_enable), &auth_sec_req_enable);
        0x00209842:    aa01        ..      ADD      r2,sp,#4
        0x00209844:    2101        .!      MOVS     r1,#1
        0x00209846:    f2402013    @..     MOV      r0,#0x213
        0x0020984a:    f642fcd0    B...    BL       le_bond_set_param ; 0x4c1ee
;;;213        le_bond_set_param(GAP_PARAM_BOND_SEC_REQ_REQUIREMENT, sizeof(auth_sec_req_flags),
        0x0020984e:    aa02        ..      ADD      r2,sp,#8
        0x00209850:    2102        .!      MOVS     r1,#2
        0x00209852:    f44f7005    O..p    MOV      r0,#0x214
        0x00209856:    f642fcca    B...    BL       le_bond_set_param ; 0x4c1ee
;;;214                          &auth_sec_req_flags);
;;;215        cause = gap_set_pairable_mode();
        0x0020985a:    f642fb3e    B.>.    BL       gap_set_pairable_mode ; 0x4beda
;;;216        return (T_USER_CMD_PARSE_RESULT)cause;
;;;217    }
        0x0020985e:    b007        ..      ADD      sp,sp,#0x1c
        0x00209860:    bd00        ..      POP      {pc}
    cmd_sauth
;;;218    
;;;219    /**
;;;220     * @brief Send authentication request
;;;221     *
;;;222     * <b>Command table define</b>
;;;223     * \code{.c}
;;;224        {
;;;225            "sauth",
;;;226            "sauth [conn_id]\n\r",
;;;227            "Send authentication request\n\r",
;;;228            cmd_sauth
;;;229        },
;;;230     * \endcode
;;;231     */
;;;232    static T_USER_CMD_PARSE_RESULT cmd_sauth(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;233    {
;;;234        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209862:    7a00        .z      LDRB     r0,[r0,#8]
;;;235        T_GAP_CAUSE cause;
;;;236        cause = le_bond_pair(conn_id);
        0x00209864:    f642bd75    B.u.    B        le_bond_pair ; 0x4c352
    cmd_userconf
;;;237        return (T_USER_CMD_PARSE_RESULT)cause;
;;;238    }
;;;239    
;;;240    /**
;;;241     * @brief Send user confirmation when show GAP_MSG_LE_BOND_USER_CONFIRMATION
;;;242     *
;;;243     * <b>Command table define</b>
;;;244     * \code{.c}
;;;245        {
;;;246            "userconf",
;;;247            "userconf [conn_id] [conf]\n\r",
;;;248            "Send user confirmation when show GAP_MSG_LE_BOND_USER_CONFIRMATION\r\n\
;;;249            [conf]: 0-(Reject), 1-(Accept)\r\n\
;;;250            sample: userconf 0 1\n\r",
;;;251            cmd_userconf
;;;252        },
;;;253     * \endcode
;;;254     */
;;;255    static T_USER_CMD_PARSE_RESULT cmd_userconf(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;256    {
;;;257        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209868:    7a02        .z      LDRB     r2,[r0,#8]
        0x0020986a:    68c0        .h      LDR      r0,[r0,#0xc]
        0x0020986c:    2101        .!      MOVS     r1,#1
;;; ..\..\..\src\sample\ble_central\user_cmd.c (256)
        0x0020986e:    b900        ..      CBNZ     r0,0x209872 ; cmd_userconf + 10
;;;257        uint8_t conn_id = p_parse_value->dw_param[0];
;;;258        T_GAP_CFM_CAUSE confirm = GAP_CFM_CAUSE_ACCEPT;
;;;259        T_GAP_CAUSE cause;
;;;260        if (p_parse_value->dw_param[1] == 0)
;;;261        {
;;;262            confirm = GAP_CFM_CAUSE_REJECT;
        0x00209870:    2102        .!      MOVS     r1,#2
;;;263        }
;;;264        cause = le_bond_user_confirm(conn_id, confirm);
        0x00209872:    4610        .F      MOV      r0,r2
        0x00209874:    f642bdce    B...    B        le_bond_user_confirm ; 0x4c414
    cmd_authkey
;;;265        return (T_USER_CMD_PARSE_RESULT)cause;
;;;266    }
;;;267    
;;;268    /**
;;;269     * @brief Input passkey when show GAP_MSG_LE_BOND_PASSKEY_INPUT
;;;270     *
;;;271     * <b>Command table define</b>
;;;272     * \code{.c}
;;;273        {
;;;274            "authkey",
;;;275            "authkey [conn_id] [passkey]\n\r",
;;;276            "Input passkey when show GAP_MSG_LE_BOND_PASSKEY_INPUT\r\n\
;;;277            [passkey]: 0 - 999999\r\n\
;;;278            sample: authkey 0 123456\n\r",
;;;279            cmd_authkey
;;;280        },
;;;281     * \endcode
;;;282     */
;;;283    static T_USER_CMD_PARSE_RESULT cmd_authkey(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;284    {
;;;285        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209878:    7a03        .z      LDRB     r3,[r0,#8]
        0x0020987a:    68c1        .h      LDR      r1,[r0,#0xc]
        0x0020987c:    48bc        .H      LDR      r0,[pc,#752] ; [0x209b70] = 0xf423f
        0x0020987e:    2201        ."      MOVS     r2,#1
        0x00209880:    4281        .B      CMP      r1,r0
;;; ..\..\..\src\sample\ble_central\user_cmd.c (284)
        0x00209882:    d900        ..      BLS      0x209886 ; cmd_authkey + 14
;;;285        uint8_t conn_id = p_parse_value->dw_param[0];
;;;286        uint32_t passcode = p_parse_value->dw_param[1];
;;;287        T_GAP_CAUSE cause;
;;;288        T_GAP_CFM_CAUSE confirm = GAP_CFM_CAUSE_ACCEPT;
;;;289        if (passcode > GAP_PASSCODE_MAX)
;;;290        {
;;;291            confirm = GAP_CFM_CAUSE_REJECT;
        0x00209884:    2202        ."      MOVS     r2,#2
;;;292        }
;;;293        cause = le_bond_passkey_input_confirm(conn_id, passcode,
        0x00209886:    4618        .F      MOV      r0,r3
        0x00209888:    f642bd7b    B.{.    B        le_bond_passkey_input_confirm ; 0x4c382
    cmd_bondclear
;;;294                                              confirm);
;;;295        return (T_USER_CMD_PARSE_RESULT)cause;
;;;296    }
;;;297    
;;;298    /**
;;;299     * @brief Clear all bonded devices information
;;;300     *
;;;301     * <b>Command table define</b>
;;;302     * \code{.c}
;;;303        {
;;;304            "bondclear",
;;;305            "bondclear\n\r",
;;;306            "Clear all bonded devices information\n\r",
;;;307            cmd_bondclear
;;;308        },
;;;309     * \endcode
;;;310     */
;;;311    static T_USER_CMD_PARSE_RESULT cmd_bondclear(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;312    {
        0x0020988c:    b510        ..      PUSH     {r4,lr}
;;;313        le_bond_clear_all_keys();
        0x0020988e:    f642fc5f    B._.    BL       le_bond_clear_all_keys ; 0x4c150
;;;314        return (RESULT_SUCESS);
        0x00209892:    2000        .       MOVS     r0,#0
;;;315    }
        0x00209894:    bd10        ..      POP      {r4,pc}
    cmd_bonddel
;;;316    
;;;317    /**
;;;318     * @brief Clear bonded devices information by connect id
;;;319     *
;;;320     * <b>Command table define</b>
;;;321     * \code{.c}
;;;322        {
;;;323            "bonddel",
;;;324            "bonddel [conn_id]\n\r",
;;;325            "Clear bonded devices information by connect id\n\r",
;;;326            cmd_bonddel
;;;327        },
;;;328     * \endcode
;;;329     */
;;;330    static T_USER_CMD_PARSE_RESULT cmd_bonddel(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;331    {
;;;332        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209896:    7a00        .z      LDRB     r0,[r0,#8]
;;;333        T_GAP_CAUSE cause;
;;;334        cause = le_bond_delete_by_idx(conn_id);
        0x00209898:    f642bc68    B.h.    B        le_bond_delete_by_idx ; 0x4c16c
    uarttest
;;;335        return (T_USER_CMD_PARSE_RESULT)cause;
;;;336    }
;;;337    
;;;338    /**
;;;339     * @brief use for pcba autotest ble module uart test
;;;340     *
;;;341     * <b>Command table define</b>
;;;342     * \code{.c}
;;;343        {
;;;344            "uarttest",
;;;345            "uarttest\n\r",
;;;346            "for autotest uart port test\n\r",
;;;347            uarttest
;;;348    
;;;349        },
;;;350     * \endcode
;;;351     */
;;;352    static T_USER_CMD_PARSE_RESULT uarttest(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;353    {
        0x0020989c:    b510        ..      PUSH     {r4,lr}
;;;354    	data_uart_print("bt uart test ok\r\n");
        0x0020989e:    a0b5        ..      ADR      r0,{pc}+0x2d6 ; 0x209b74
        0x002098a0:    f001f988    ....    BL       data_uart_print ; 0x20abb4
;;;355         return (RESULT_SUCESS);
        0x002098a4:    2000        .       MOVS     r0,#0
;;;356    }
        0x002098a6:    bd10        ..      POP      {r4,pc}
    cmd_bondinfo
;;;357    
;;;358    
;;;359    /**
;;;360     * @brief Get all Bonded devices information
;;;361     *
;;;362     * <b>Command table define</b>
;;;363     * \code{.c}
;;;364        {
;;;365            "bondinfo",
;;;366            "bondinfo\n\r",
;;;367            "Get all Bonded devices information\n\r",
;;;368            cmd_bondinfo
;;;369        },
;;;370     * \endcode
;;;371     */
;;;372    static T_USER_CMD_PARSE_RESULT cmd_bondinfo(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;373    {
        0x002098a8:    b570        p.      PUSH     {r4-r6,lr}
        0x002098aa:    f5ad7d04    ...}    SUB      sp,sp,#0x210
        0x002098ae:    2400        .$      MOVS     r4,#0
        0x002098b0:    4db5        .M      LDR      r5,[pc,#724] ; [0x209b88] = 0x202ebc
;;; ..\..\..\src\sample\ble_central\user_cmd.c (373)
        0x002098b2:    e01f        ..      B        0x2098f4 ; cmd_bondinfo + 76
;;;374        uint8_t i;
;;;375    	char cmd_buffer[FRAMING_PAYLOAD_MAX_LENGTH];
;;;376        T_LE_KEY_ENTRY *p_entry;
;;;377        for (i = 0; i < bond_storage_num; i++)
;;;378        {
;;;379            p_entry = le_find_key_entry_by_idx(i);
        0x002098b4:    4620         F      MOV      r0,r4
        0x002098b6:    f646fcf3    F...    BL       le_find_key_entry_by_idx ; 0x502a0
;;;380            if (p_entry != NULL)
        0x002098ba:    b1c8        ..      CBZ      r0,0x2098f0 ; cmd_bondinfo + 72
;;;381            {
;;;382    #if 0        
;;;383              	data_uart_print("#bondinfo#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;384    							p_entry->idx,
;;;385    							p_entry->remote_bd.addr[5],
;;;386    							p_entry->remote_bd.addr[4],
;;;387    							p_entry->remote_bd.addr[3],
;;;388    							p_entry->remote_bd.addr[2],
;;;389    							p_entry->remote_bd.addr[1],
;;;390    							p_entry->remote_bd.addr[0]);
;;;391    #else
;;;392    			sprintf(cmd_buffer,"#bondinfo#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
        0x002098bc:    7ac1        .z      LDRB     r1,[r0,#0xb]
        0x002098be:    f10d0c04    ....    ADD      r12,sp,#4
        0x002098c2:    7a06        .z      LDRB     r6,[r0,#8]
        0x002098c4:    7a43        Cz      LDRB     r3,[r0,#9]
        0x002098c6:    7a82        .z      LDRB     r2,[r0,#0xa]
        0x002098c8:    e88c004e    ..N.    STM      r12,{r1-r3,r6}
        0x002098cc:    7b01        .{      LDRB     r1,[r0,#0xc]
        0x002098ce:    9100        ..      STR      r1,[sp,#0]
        0x002098d0:    7b43        C{      LDRB     r3,[r0,#0xd]
        0x002098d2:    7842        Bx      LDRB     r2,[r0,#1]
        0x002098d4:    a1ad        ..      ADR      r1,{pc}+0x2b8 ; 0x209b8c
        0x002098d6:    a805        ..      ADD      r0,sp,#0x14
        0x002098d8:    f012fe82    ....    BL       __2sprintf ; 0x21c5e0
;;;393    							p_entry->idx,
;;;394    							p_entry->remote_bd.addr[5],
;;;395    							p_entry->remote_bd.addr[4],
;;;396    							p_entry->remote_bd.addr[3],
;;;397    							p_entry->remote_bd.addr[2],
;;;398    							p_entry->remote_bd.addr[1],
;;;399    							p_entry->remote_bd.addr[0]);
;;;400    							
;;;401    							FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));
        0x002098dc:    a805        ..      ADD      r0,sp,#0x14
        0x002098de:    f650fabd    P...    BL       strlen ; 0x59e5c
        0x002098e2:    b281        ..      UXTH     r1,r0
        0x002098e4:    a805        ..      ADD      r0,sp,#0x14
        0x002098e6:    f001f980    ....    BL       FramingWrapFrameUartPrint ; 0x20abea
;;;402    							os_delay(100);
        0x002098ea:    2064        d       MOVS     r0,#0x64
        0x002098ec:    f61cff40    ..@.    BL       os_delay ; 0x26770
        0x002098f0:    1c64        d.      ADDS     r4,r4,#1
        0x002098f2:    b2e4        ..      UXTB     r4,r4
        0x002098f4:    7828        (x      LDRB     r0,[r5,#0]
        0x002098f6:    4284        .B      CMP      r4,r0
        0x002098f8:    d3dc        ..      BCC      0x2098b4 ; cmd_bondinfo + 12
        0x002098fa:    f50d7d04    ...}    ADD      sp,sp,#0x210
;;;403    #endif
;;;404            }
;;;405        }
;;;406        return (RESULT_SUCESS);
        0x002098fe:    2000        .       MOVS     r0,#0
;;;407    }
        0x00209900:    bd70        p.      POP      {r4-r6,pc}
    cmd_scan
;;;408    /************************** Central only *************************************/
;;;409    /**
;;;410     * @brief Start scan
;;;411     *
;;;412     * <b>Command table define</b>
;;;413     * \code{.c}
;;;414        {
;;;415            "scan",
;;;416            "scan [filter_policy] [filter_duplicate]\n\r",
;;;417            "Start scan\r\n\
;;;418            [filter_policy]: 0-(any), 1-(whitelist), 2-(any RPA), 3-(whitelist RPA) \r\n\
;;;419            [filter_duplicate]: 0-(disable), 1-(enable) \n\r",
;;;420            cmd_scan
;;;421        },
;;;422     * \endcode
;;;423     */
;;;424    static T_USER_CMD_PARSE_RESULT cmd_scan(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;425    {
        0x00209902:    b51c        ..      PUSH     {r2-r4,lr}
;;;426        T_GAP_CAUSE cause;
;;;427        uint8_t scan_filter_policy = GAP_SCAN_FILTER_ANY;
        0x00209904:    2100        .!      MOVS     r1,#0
        0x00209906:    f88d1000    ....    STRB     r1,[sp,#0]
;;;428        uint8_t scan_filter_duplicate = GAP_SCAN_FILTER_DUPLICATE_ENABLE;
        0x0020990a:    2101        .!      MOVS     r1,#1
        0x0020990c:    f88d1004    ....    STRB     r1,[sp,#4]
;;;429    
;;;430        if (p_parse_value->param_count > 0)
        0x00209910:    6841        Ah      LDR      r1,[r0,#4]
        0x00209912:    2900        .)      CMP      r1,#0
        0x00209914:    dd02        ..      BLE      0x20991c ; cmd_scan + 26
;;;431        {
;;;432            scan_filter_policy = p_parse_value->dw_param[0];
        0x00209916:    7a02        .z      LDRB     r2,[r0,#8]
        0x00209918:    f88d2000    ...     STRB     r2,[sp,#0]
;;;433        }
;;;434        if (p_parse_value->param_count > 1)
        0x0020991c:    2901        .)      CMP      r1,#1
        0x0020991e:    dd02        ..      BLE      0x209926 ; cmd_scan + 36
;;;435        {
;;;436            scan_filter_duplicate = p_parse_value->dw_param[1];
        0x00209920:    7b00        .{      LDRB     r0,[r0,#0xc]
        0x00209922:    f88d0004    ....    STRB     r0,[sp,#4]
;;;437        }
;;;438    
;;;439        link_mgr_clear_device_list();
        0x00209926:    f012fd88    ....    BL       link_mgr_clear_device_list ; 0x21c43a
;;;440        le_scan_set_param(GAP_PARAM_SCAN_FILTER_POLICY, sizeof(scan_filter_policy),
        0x0020992a:    466a        jF      MOV      r2,sp
        0x0020992c:    2101        .!      MOVS     r1,#1
        0x0020992e:    f44f7011    O..p    MOV      r0,#0x244
        0x00209932:    f648fd1f    H...    BL       le_scan_set_param ; 0x52374
;;;441                          &scan_filter_policy);
;;;442        le_scan_set_param(GAP_PARAM_SCAN_FILTER_DUPLICATES, sizeof(scan_filter_duplicate),
        0x00209936:    aa01        ..      ADD      r2,sp,#4
        0x00209938:    2101        .!      MOVS     r1,#1
        0x0020993a:    f2402045    @.E     MOV      r0,#0x245
        0x0020993e:    f648fd19    H...    BL       le_scan_set_param ; 0x52374
;;;443                          &scan_filter_duplicate);
;;;444        cause = le_scan_start();
        0x00209942:    f648fd97    H...    BL       le_scan_start ; 0x52474
;;;445        return (T_USER_CMD_PARSE_RESULT)cause;
;;;446    }
        0x00209946:    bd1c        ..      POP      {r2-r4,pc}
    cmd_stopscan
;;;447    
;;;448    /**
;;;449     * @brief Stop scan
;;;450     *
;;;451     * <b>Command table define</b>
;;;452     * \code{.c}
;;;453        {
;;;454            "stopscan",
;;;455            "stopscan\n\r",
;;;456            "Stop scan\n\r",
;;;457            cmd_stopscan
;;;458        },
;;;459     * \endcode
;;;460     */
;;;461    static T_USER_CMD_PARSE_RESULT cmd_stopscan(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;462    {
;;;463        T_GAP_CAUSE cause;
;;;464        cause = le_scan_stop();
        0x00209948:    f648bdc3    H...    B        le_scan_stop ; 0x524d2
    cmd_showdev
;;;465        return (T_USER_CMD_PARSE_RESULT)cause;
;;;466    }
;;;467    
;;;468    /**
;;;469     * @brief Show scan dev list: filter simple ble service
;;;470     *
;;;471     * <b>Command table define</b>
;;;472     * \code{.c}
;;;473        {
;;;474            "showdev",
;;;475            "showdev\n\r",
;;;476            "Show scan dev list: filter simple ble service\n\r",
;;;477            cmd_showdev
;;;478        },
;;;479     * \endcode
;;;480     */
;;;481    static T_USER_CMD_PARSE_RESULT cmd_showdev(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;482    {
        0x0020994c:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0020994e:    f5ad7d03    ...}    SUB      sp,sp,#0x20c
        0x00209952:    2500        .%      MOVS     r5,#0
        0x00209954:    4f99        .O      LDR      r7,[pc,#612] ; [0x209bbc] = 0x20d281
        0x00209956:    4e9a        .N      LDR      r6,[pc,#616] ; [0x209bc0] = 0x20d280
;;; ..\..\..\src\sample\ble_central\user_cmd.c (482)
        0x00209958:    e01e        ..      B        0x209998 ; cmd_showdev + 76
        0x0020995a:    ebc500c5    ....    RSB      r0,r5,r5,LSL #3
        0x0020995e:    19c4        ..      ADDS     r4,r0,r7
        0x00209960:    5c39        9\      LDRB     r1,[r7,r0]
        0x00209962:    7860        `x      LDRB     r0,[r4,#1]
        0x00209964:    78a3        .x      LDRB     r3,[r4,#2]
        0x00209966:    78e2        .x      LDRB     r2,[r4,#3]
        0x00209968:    e9cd0103    ....    STRD     r0,r1,[sp,#0xc]
        0x0020996c:    e9cd2301    ...#    STRD     r2,r3,[sp,#4]
        0x00209970:    7920         y      LDRB     r0,[r4,#4]
        0x00209972:    9000        ..      STR      r0,[sp,#0]
        0x00209974:    7963        cy      LDRB     r3,[r4,#5]
        0x00209976:    462a        *F      MOV      r2,r5
        0x00209978:    a192        ..      ADR      r1,{pc}+0x24c ; 0x209bc4
        0x0020997a:    a805        ..      ADD      r0,sp,#0x14
        0x0020997c:    f012fe30    ..0.    BL       __2sprintf ; 0x21c5e0
        0x00209980:    a805        ..      ADD      r0,sp,#0x14
        0x00209982:    f650fa6b    P.k.    BL       strlen ; 0x59e5c
        0x00209986:    b281        ..      UXTH     r1,r0
        0x00209988:    a805        ..      ADD      r0,sp,#0x14
        0x0020998a:    f001f92e    ....    BL       FramingWrapFrameUartPrint ; 0x20abea
        0x0020998e:    2064        d       MOVS     r0,#0x64
        0x00209990:    f61cfeee    ....    BL       os_delay ; 0x26770
        0x00209994:    1c6d        m.      ADDS     r5,r5,#1
;;;483        uint8_t i;
;;;484    	char cmd_buffer[FRAMING_PAYLOAD_MAX_LENGTH];
;;;485    #if 0 //by vsop	
;;;486        data_uart_print("Advertising and Scan response: filter uuid = 0xA00A dev list\r\n");
;;;487    #endif
;;;488        for (i = 0; i < dev_list_count; i++)
        0x00209996:    b2ed        ..      UXTB     r5,r5
        0x00209998:    7830        0x      LDRB     r0,[r6,#0]
        0x0020999a:    4285        .B      CMP      r5,r0
        0x0020999c:    d3dd        ..      BCC      0x20995a ; cmd_showdev + 14
;;;489        {
;;;490    #if 0 //by vsop    
;;;491           data_uart_print("#showdev#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;492    						i,
;;;493    						dev_list[i].bd_addr[5], dev_list[i].bd_addr[4],
;;;494    						dev_list[i].bd_addr[3], dev_list[i].bd_addr[2],
;;;495    						dev_list[i].bd_addr[1], dev_list[i].bd_addr[0]);
;;;496    #else
;;;497    		sprintf(cmd_buffer,"#showdev#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;498    						i,
;;;499    						dev_list[i].bd_addr[5], dev_list[i].bd_addr[4],
;;;500    						dev_list[i].bd_addr[3], dev_list[i].bd_addr[2],
;;;501    						dev_list[i].bd_addr[1], dev_list[i].bd_addr[0]);
;;;502    							
;;;503    							FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));
;;;504    							os_delay(100);
;;;505    
;;;506    #endif
;;;507            if (dev_list[i].bd_type == GAP_REMOTE_ADDR_LE_RANDOM)
;;;508            {
;;;509                uint8_t addr = dev_list[i].bd_addr[5] & RANDOM_ADDR_MASK;
;;;510                if (addr == RANDOM_ADDR_MASK_STATIC)
;;;511                {
;;;512                    //data_uart_print("Static Random Addr\r\n");
;;;513                }
;;;514                else if (addr == RANDOM_ADDR_MASK_RESOLVABLE)
;;;515                {
;;;516                    //data_uart_print("Resolv Random Addr\r\n");
;;;517                }
;;;518                else if (addr == RANDOM_ADDR_MASK_NON_RESOLVABLE)
;;;519                {
;;;520                    //data_uart_print("Non-resolv Random Addr\r\n");
;;;521                }
;;;522                else
;;;523                {
;;;524                    //data_uart_print("Unknown Random Addr\r\n");
;;;525                }
;;;526            }
;;;527    				//os_delay(100);
;;;528        }
;;;529    	if(dev_list_count==0)
        0x0020999e:    f0100fff    ....    TST      r0,#0xff
        0x002099a2:    d10a        ..      BNE      0x2099ba ; cmd_showdev + 110
;;;530    	{
;;;531    		#if 0
;;;532    		data_uart_print("#showdev#<Y>\r\n");
;;;533    		#else
;;;534    		strcpy(cmd_buffer,"#showdev#<Y>\r\n");
        0x002099a4:    a193        ..      ADR      r1,{pc}+0x250 ; 0x209bf4
        0x002099a6:    a805        ..      ADD      r0,sp,#0x14
        0x002099a8:    f002fa42    ..B.    BL       strcpy ; 0x20be30
;;;535    		FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));
        0x002099ac:    a805        ..      ADD      r0,sp,#0x14
        0x002099ae:    f650fa55    P.U.    BL       strlen ; 0x59e5c
        0x002099b2:    b281        ..      UXTH     r1,r0
        0x002099b4:    a805        ..      ADD      r0,sp,#0x14
        0x002099b6:    f001f918    ....    BL       FramingWrapFrameUartPrint ; 0x20abea
        0x002099ba:    f50d7d03    ...}    ADD      sp,sp,#0x20c
;;;536    
;;;537    		#endif
;;;538    	}
;;;539    
;;;540        return (RESULT_SUCESS);
        0x002099be:    2000        .       MOVS     r0,#0
;;;541    }
        0x002099c0:    bdf0        ..      POP      {r4-r7,pc}
    cmd_con
;;;542    
;;;543    /**
;;;544     * @brief Connect to remote device: use address
;;;545     *
;;;546     * <b>Command table define</b>
;;;547     * \code{.c}
;;;548        {
;;;549            "con",
;;;550            "con [BD0] [BD1] [BD2] [BD3] [BD4] [BD5] [addr_type]\n\r",
;;;551            "Connect to remote device: use address\r\n\
;;;552            [BD0] [BD1] [BD2] [BD3] [BD4] [BD5]: remote device address\r\n\
;;;553            [addr_type]: 0-(public), 1-(random)\r\n\
;;;554            sample: con x11 x22 x33 x44 x55 x66 0 \n\r",
;;;555            cmd_con
;;;556        },
;;;557     * \endcode
;;;558     */
;;;559    static T_USER_CMD_PARSE_RESULT cmd_con(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;560    {
        0x002099c2:    b570        p.      PUSH     {r4-r6,lr}
        0x002099c4:    4604        .F      MOV      r4,r0
        0x002099c6:    b088        ..      SUB      sp,sp,#0x20
;;;561        T_GAP_CAUSE cause;
;;;562        uint8_t addr[6] = {0};
        0x002099c8:    2000        .       MOVS     r0,#0
        0x002099ca:    9006        ..      STR      r0,[sp,#0x18]
        0x002099cc:    2110        .!      MOVS     r1,#0x10
        0x002099ce:    f8ad1004    ....    STRH     r1,[sp,#4]
        0x002099d2:    f8ad000c    ....    STRH     r0,[sp,#0xc]
        0x002099d6:    9005        ..      STR      r0,[sp,#0x14]
;;;563        uint8_t addr_len;
;;;564        uint8_t addr_type = GAP_REMOTE_ADDR_LE_PUBLIC;
        0x002099d8:    4605        .F      MOV      r5,r0
;;;565        T_GAP_LE_CONN_REQ_PARAM conn_req_param;
;;;566    
;;;567        conn_req_param.scan_interval = 0x10;
;;;568        conn_req_param.scan_window = 0x10;
        0x002099da:    f8ad1006    ....    STRH     r1,[sp,#6]
;;;569        conn_req_param.conn_interval_min = 80;
        0x002099de:    2150        P!      MOVS     r1,#0x50
        0x002099e0:    209e        .       MOVS     r0,#0x9e
        0x002099e2:    f8ad1008    ....    STRH     r1,[sp,#8]
        0x002099e6:    f8ad0010    ....    STRH     r0,[sp,#0x10]
;;;570        conn_req_param.conn_interval_max = 80;
        0x002099ea:    f8ad100a    ....    STRH     r1,[sp,#0xa]
;;;571        conn_req_param.conn_latency = 0;
;;;572        conn_req_param.supv_tout = 1000;
        0x002099ee:    f44f767a    O.zv    MOV      r6,#0x3e8
        0x002099f2:    f8ad0012    ....    STRH     r0,[sp,#0x12]
        0x002099f6:    f8ad600e    ...`    STRH     r6,[sp,#0xe]
;;;573        conn_req_param.ce_len_min = 2 * (conn_req_param.conn_interval_min - 1);
;;;574        conn_req_param.ce_len_max = 2 * (conn_req_param.conn_interval_max - 1);
;;;575        le_set_conn_param(GAP_CONN_PARAM_1M, &conn_req_param);
        0x002099fa:    a901        ..      ADD      r1,sp,#4
        0x002099fc:    2000        .       MOVS     r0,#0
        0x002099fe:    f644f966    D.f.    BL       le_set_conn_param ; 0x4dcce
;;;576    
;;;577        for (addr_len = 0; addr_len < GAP_BD_ADDR_LEN; addr_len++)
        0x00209a02:    2100        .!      MOVS     r1,#0
        0x00209a04:    a805        ..      ADD      r0,sp,#0x14
        0x00209a06:    f1c10205    ....    RSB      r2,r1,#5
        0x00209a0a:    eb040282    ....    ADD      r2,r4,r2,LSL #2
        0x00209a0e:    7a12        .z      LDRB     r2,[r2,#8]
        0x00209a10:    5442        BT      STRB     r2,[r0,r1]
        0x00209a12:    1c49        I.      ADDS     r1,r1,#1
        0x00209a14:    b2c9        ..      UXTB     r1,r1
        0x00209a16:    2906        .)      CMP      r1,#6
        0x00209a18:    d3f5        ..      BCC      0x209a06 ; cmd_con + 68
;;;578        {
;;;579            addr[addr_len] = p_parse_value->dw_param[GAP_BD_ADDR_LEN - addr_len - 1];
;;;580        }
;;;581        if (p_parse_value->param_count >= 7)
        0x00209a1a:    6860        `h      LDR      r0,[r4,#4]
        0x00209a1c:    2807        .(      CMP      r0,#7
        0x00209a1e:    db01        ..      BLT      0x209a24 ; cmd_con + 98
;;;582        {
;;;583            addr_type = p_parse_value->dw_param[6];
        0x00209a20:    f8945020    .. P    LDRB     r5,[r4,#0x20]
;;;584        }
;;;585    
;;;586        cause = le_connect(GAP_PHYS_CONN_INIT_1M_BIT, addr, (T_GAP_REMOTE_ADDR_TYPE)addr_type,
        0x00209a24:    2300        .#      MOVS     r3,#0
        0x00209a26:    462a        *F      MOV      r2,r5
        0x00209a28:    a905        ..      ADD      r1,sp,#0x14
        0x00209a2a:    2001        .       MOVS     r0,#1
        0x00209a2c:    9600        ..      STR      r6,[sp,#0]
        0x00209a2e:    f644f9a3    D...    BL       le_connect ; 0x4dd78
;;;587                           GAP_LOCAL_ADDR_LE_PUBLIC,
;;;588                           1000);
;;;589    
;;;590        return (T_USER_CMD_PARSE_RESULT)cause;
;;;591    }
        0x00209a32:    b008        ..      ADD      sp,sp,#0x20
        0x00209a34:    bd70        p.      POP      {r4-r6,pc}
    cmd_condev
;;;592    
;;;593    /**
;;;594     * @brief Connect to remote device: use showdev to show idx
;;;595     *
;;;596     * <b>Command table define</b>
;;;597     * \code{.c}
;;;598        {
;;;599            "condev",
;;;600            "condev [idx]\n\r",
;;;601            "Connect to remote device: use showdev to show idx\r\n\
;;;602            [idx]: use cmd showdev to show idx before use this cmd\r\n\
;;;603            sample: condev 0\n\r",
;;;604            cmd_condev
;;;605        },
;;;606     * \endcode
;;;607     */
;;;608    static T_USER_CMD_PARSE_RESULT cmd_condev(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;609    {
        0x00209a36:    b530        0.      PUSH     {r4,r5,lr}
        0x00209a38:    7a04        .z      LDRB     r4,[r0,#8]
        0x00209a3a:    4861        aH      LDR      r0,[pc,#388] ; [0x209bc0] = 0x20d280
        0x00209a3c:    b085        ..      SUB      sp,sp,#0x14
        0x00209a3e:    7800        .x      LDRB     r0,[r0,#0]
        0x00209a40:    4284        .B      CMP      r4,r0
        0x00209a42:    d225        %.      BCS      0x209a90 ; cmd_condev + 90
;;;610        uint8_t dev_idx = p_parse_value->dw_param[0];
;;;611        if (dev_idx < dev_list_count)
;;;612        {
;;;613            T_GAP_CAUSE cause;
;;;614            T_GAP_LE_CONN_REQ_PARAM conn_req_param;
;;;615    
;;;616            conn_req_param.scan_interval = 0x10;
        0x00209a44:    2010        .       MOVS     r0,#0x10
        0x00209a46:    f8ad0004    ....    STRH     r0,[sp,#4]
;;;617            conn_req_param.scan_window = 0x10;
        0x00209a4a:    f8ad0006    ....    STRH     r0,[sp,#6]
;;;618            conn_req_param.conn_interval_min = 80;
        0x00209a4e:    2050        P       MOVS     r0,#0x50
        0x00209a50:    f8ad0008    ....    STRH     r0,[sp,#8]
;;;619            conn_req_param.conn_interval_max = 80;
        0x00209a54:    f8ad000a    ....    STRH     r0,[sp,#0xa]
;;;620            conn_req_param.conn_latency = 0;
        0x00209a58:    2000        .       MOVS     r0,#0
        0x00209a5a:    f8ad000c    ....    STRH     r0,[sp,#0xc]
        0x00209a5e:    209e        .       MOVS     r0,#0x9e
        0x00209a60:    f8ad0010    ....    STRH     r0,[sp,#0x10]
;;;621            conn_req_param.supv_tout = 1000;
        0x00209a64:    f44f757a    O.zu    MOV      r5,#0x3e8
        0x00209a68:    f8ad0012    ....    STRH     r0,[sp,#0x12]
        0x00209a6c:    f8ad500e    ...P    STRH     r5,[sp,#0xe]
;;;622            conn_req_param.ce_len_min = 2 * (conn_req_param.conn_interval_min - 1);
;;;623            conn_req_param.ce_len_max = 2 * (conn_req_param.conn_interval_max - 1);
;;;624            le_set_conn_param(GAP_CONN_PARAM_1M, &conn_req_param);
        0x00209a70:    a901        ..      ADD      r1,sp,#4
        0x00209a72:    2000        .       MOVS     r0,#0
        0x00209a74:    f644f92b    D.+.    BL       le_set_conn_param ; 0x4dcce
;;;625            cause = le_connect(GAP_PHYS_CONN_INIT_1M_BIT,
        0x00209a78:    4850        PH      LDR      r0,[pc,#320] ; [0x209bbc] = 0x20d281
        0x00209a7a:    ebc401c4    ....    RSB      r1,r4,r4,LSL #3
        0x00209a7e:    4401        .D      ADD      r1,r1,r0
        0x00209a80:    9500        ..      STR      r5,[sp,#0]
        0x00209a82:    798a        .y      LDRB     r2,[r1,#6]
        0x00209a84:    2300        .#      MOVS     r3,#0
        0x00209a86:    2001        .       MOVS     r0,#1
        0x00209a88:    f644f976    D.v.    BL       le_connect ; 0x4dd78
        0x00209a8c:    b005        ..      ADD      sp,sp,#0x14
        0x00209a8e:    bd30        0.      POP      {r4,r5,pc}
;;;626                               dev_list[dev_idx].bd_addr,
;;;627                               (T_GAP_REMOTE_ADDR_TYPE)dev_list[dev_idx].bd_type,
;;;628                               GAP_LOCAL_ADDR_LE_PUBLIC,
;;;629                               1000);
;;;630            return (T_USER_CMD_PARSE_RESULT)cause;
;;;631        }
;;;632        else
;;;633        {
;;;634            return RESULT_ERR;
        0x00209a90:    2020                MOVS     r0,#0x20
;;;635        }
;;;636    }
        0x00209a92:    e7fb        ..      B        0x209a8c ; cmd_condev + 86
    cmd_gapread
;;;637    /************************** GATT client *************************************/
;;;638    /**
;;;639     * @brief Read GAP service characteristic value
;;;640     *
;;;641     * <b>Command table define</b>
;;;642     * \code{.c}
;;;643        {
;;;644            "gapread",
;;;645            "gapread [conn_id] [type]\n\r",
;;;646            "Read GAP service characteristic value\r\n\
;;;647            [type]: 0-(read device name), 1-(read appearance)\r\n\
;;;648            simple: gapread 0 0\n\r",
;;;649            cmd_gapread
;;;650        },
;;;651     * \endcode
;;;652     */
;;;653    static T_USER_CMD_PARSE_RESULT cmd_gapread(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;654    {
        0x00209a94:    b510        ..      PUSH     {r4,lr}
;;;655        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209a96:    7a02        .z      LDRB     r2,[r0,#8]
;;;656        T_GAPS_READ_TYPE read_type = (T_GAPS_READ_TYPE)p_parse_value->dw_param[1];
        0x00209a98:    7b01        .{      LDRB     r1,[r0,#0xc]
;;;657        bool ret = gaps_read(conn_id, read_type);
        0x00209a9a:    4610        .F      MOV      r0,r2
        0x00209a9c:    f7fffc1e    ....    BL       gaps_read ; 0x2092dc
;;;658        if (ret)
        0x00209aa0:    b108        ..      CBZ      r0,0x209aa6 ; cmd_gapread + 18
;;;659        {
;;;660            return (RESULT_SUCESS);
        0x00209aa2:    2000        .       MOVS     r0,#0
        0x00209aa4:    bd10        ..      POP      {r4,pc}
;;;661        }
;;;662        else
;;;663        {
;;;664            return (RESULT_ERR);
        0x00209aa6:    2020                MOVS     r0,#0x20
;;;665        }
;;;666    }
        0x00209aa8:    bd10        ..      POP      {r4,pc}
    cmd_gaphdl
;;;667    
;;;668    /**
;;;669     * @brief List GAP service handle cache
;;;670     *
;;;671     * <b>Command table define</b>
;;;672     * \code{.c}
;;;673        {
;;;674            "gaphdl",
;;;675            "gaphdl [conn_id]\n\r",
;;;676            "List GAP service handle cache\n\r",
;;;677            cmd_gaphdl
;;;678        },
;;;679     * \endcode
;;;680     */
;;;681    static T_USER_CMD_PARSE_RESULT cmd_gaphdl(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;682    {
        0x00209aaa:    b50e        ..      PUSH     {r1-r3,lr}
;;;683        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209aac:    7a00        .z      LDRB     r0,[r0,#8]
;;;684        uint16_t hdl_cache[HDL_GAPS_CACHE_LEN];
;;;685        uint8_t hdl_idx;
;;;686        bool ret = gaps_get_hdl_cache(conn_id, hdl_cache,
        0x00209aae:    220c        ."      MOVS     r2,#0xc
        0x00209ab0:    4669        iF      MOV      r1,sp
        0x00209ab2:    f7fffc4d    ..M.    BL       gaps_get_hdl_cache ; 0x209350
;;;687                                      sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;688    
;;;689        if (ret)
        0x00209ab6:    b130        0.      CBZ      r0,0x209ac6 ; cmd_gaphdl + 28
;;;690        {
;;;691            for (hdl_idx = HDL_GAPS_SRV_START; hdl_idx < HDL_GAPS_CACHE_LEN; hdl_idx++)
        0x00209ab8:    2000        .       MOVS     r0,#0
        0x00209aba:    1c40        @.      ADDS     r0,r0,#1
        0x00209abc:    b2c0        ..      UXTB     r0,r0
        0x00209abe:    2806        .(      CMP      r0,#6
        0x00209ac0:    d3fb        ..      BCC      0x209aba ; cmd_gaphdl + 16
;;;692            {
;;;693                //data_uart_print("-->Index %d -- Handle 0x%x\r\n", hdl_idx, hdl_cache[hdl_idx]);
;;;694            }
;;;695            return (RESULT_SUCESS);
        0x00209ac2:    2000        .       MOVS     r0,#0
        0x00209ac4:    bd0e        ..      POP      {r1-r3,pc}
;;;696        }
;;;697        else
;;;698        {
;;;699            return (RESULT_ERR);
        0x00209ac6:    2020                MOVS     r0,#0x20
;;;700        }
;;;701    }
        0x00209ac8:    bd0e        ..      POP      {r1-r3,pc}
    cmd_simpread
;;;702    
;;;703    /**
;;;704     * @brief Read simple ble service characteristic and descriptor value
;;;705     *
;;;706     * <b>Command table define</b>
;;;707     * \code{.c}
;;;708        {
;;;709            "simpread",
;;;710            "simpread [conn_id] [type] [pattern]\n\r",
;;;711            "Read simple ble service characteristic and descriptor value\r\n\
;;;712            [type]: 0-(read v1), 1-(v3 cccd), 2-(v4 cccd)\r\n\
;;;713            [pattern]: 0-(read by handle), 1-(read by uuid)\r\n\
;;;714            sample: simpread 0 1 0 \n\r",
;;;715            cmd_simpread
;;;716        },
;;;717     * \endcode
;;;718     */
;;;719    static T_USER_CMD_PARSE_RESULT cmd_simpread(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;720    {
        0x00209aca:    b510        ..      PUSH     {r4,lr}
;;;721        /* Indicate which char to be read. */
;;;722        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209acc:    7a02        .z      LDRB     r2,[r0,#8]
;;;723        bool ret;
;;;724        T_SIMP_READ_TYPE read_type = (T_SIMP_READ_TYPE)p_parse_value->dw_param[1];
        0x00209ace:    7b01        .{      LDRB     r1,[r0,#0xc]
;;;725        /* Read by handle or UUID, 1--by UUID, 0--by handle. */
;;;726        uint8_t read_pattern = (uint8_t)p_parse_value->dw_param[2];
        0x00209ad0:    7c00        .|      LDRB     r0,[r0,#0x10]
        0x00209ad2:    f0100fff    ....    TST      r0,#0xff
;;;727    
;;;728        if (read_pattern)
;;;729        {
;;;730            ret = simp_ble_client_read_by_uuid(conn_id, read_type);
;;;731        }
;;;732        else
;;;733        {
;;;734            ret = simp_ble_client_read_by_handle(conn_id, read_type);
        0x00209ad6:    4610        .F      MOV      r0,r2
        0x00209ad8:    d002        ..      BEQ      0x209ae0 ; cmd_simpread + 22
        0x00209ada:    f7fefd38    ..8.    BL       simp_ble_client_read_by_uuid ; 0x20854e
        0x00209ade:    e001        ..      B        0x209ae4 ; cmd_simpread + 26
        0x00209ae0:    f7fefcde    ....    BL       simp_ble_client_read_by_handle ; 0x2084a0
;;;735        }
;;;736    
;;;737        if (ret)
        0x00209ae4:    b108        ..      CBZ      r0,0x209aea ; cmd_simpread + 32
;;;738        {
;;;739            return (RESULT_SUCESS);
        0x00209ae6:    2000        .       MOVS     r0,#0
        0x00209ae8:    bd10        ..      POP      {r4,pc}
;;;740        }
;;;741        else
;;;742        {
;;;743            return (RESULT_ERR);
        0x00209aea:    2020                MOVS     r0,#0x20
;;;744        }
;;;745    }
        0x00209aec:    bd10        ..      POP      {r4,pc}
    cmd_simpcccd
;;;746    
;;;747    /**
;;;748     * @brief Config simple ble service client characteristic configuration descriptor value
;;;749     *
;;;750     * <b>Command table define</b>
;;;751     * \code{.c}
;;;752        {
;;;753            "simpcccd",
;;;754            "simpcccd [conn_id] [type] [enable]\n\r",
;;;755            "Config simple ble service client characteristic configuration descriptor value\r\n\
;;;756            [type]: 0-(v3 notify), 1-(v4 indication)\r\n\
;;;757            [enable]: 0-(disable), 1-(enable) \r\n\
;;;758            sample: simpcccd 0 1 1\n\r",
;;;759            cmd_simpcccd
;;;760        },
;;;761     * \endcode
;;;762     */
;;;763    static T_USER_CMD_PARSE_RESULT cmd_simpcccd(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;764    {
        0x00209aee:    b510        ..      PUSH     {r4,lr}
;;;765        /* Indicate which char CCCD command. */
;;;766        bool ret = false;
;;;767        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209af0:    7a02        .z      LDRB     r2,[r0,#8]
;;;768        uint8_t type = p_parse_value->dw_param[1];
        0x00209af2:    7b03        .{      LDRB     r3,[r0,#0xc]
;;;769        /* Enable or disable, 1--enable, 0--disable. */
;;;770        bool cccd_data = (bool)p_parse_value->dw_param[2];
        0x00209af4:    6900        .i      LDR      r0,[r0,#0x10]
        0x00209af6:    b108        ..      CBZ      r0,0x209afc ; cmd_simpcccd + 14
        0x00209af8:    2101        .!      MOVS     r1,#1
        0x00209afa:    e000        ..      B        0x209afe ; cmd_simpcccd + 16
        0x00209afc:    2100        .!      MOVS     r1,#0
;;;771    
;;;772        switch (type)
        0x00209afe:    b113        ..      CBZ      r3,0x209b06 ; cmd_simpcccd + 24
        0x00209b00:    2b01        .+      CMP      r3,#1
        0x00209b02:    d10a        ..      BNE      0x209b1a ; cmd_simpcccd + 44
        0x00209b04:    e003        ..      B        0x209b0e ; cmd_simpcccd + 32
;;;773        {
;;;774        case 0:/* V3 Notify char notif enable/disable. */
;;;775            ret = simp_ble_client_set_v3_notify(conn_id, cccd_data);
        0x00209b06:    4610        .F      MOV      r0,r2
        0x00209b08:    f7fefd6e    ..n.    BL       simp_ble_client_set_v3_notify ; 0x2085e8
;;;776            break;
        0x00209b0c:    e002        ..      B        0x209b14 ; cmd_simpcccd + 38
;;;777        case 1:/* V4 Indicate char indicate enable/disable. */
;;;778            ret = simp_ble_client_set_v4_ind(conn_id, cccd_data);
        0x00209b0e:    4610        .F      MOV      r0,r2
        0x00209b10:    f7fefda3    ....    BL       simp_ble_client_set_v4_ind ; 0x20865a
;;;779            break;
;;;780        default:
;;;781            break;
;;;782        }
;;;783    
;;;784        if (ret)
        0x00209b14:    b108        ..      CBZ      r0,0x209b1a ; cmd_simpcccd + 44
;;;785        {
;;;786            return (RESULT_SUCESS);
        0x00209b16:    2000        .       MOVS     r0,#0
        0x00209b18:    bd10        ..      POP      {r4,pc}
;;;787        }
;;;788        else
;;;789        {
;;;790            return (RESULT_ERR);
        0x00209b1a:    2020                MOVS     r0,#0x20
;;;791        }
;;;792    }
        0x00209b1c:    bd10        ..      POP      {r4,pc}
    cmd_simpwritev2
;;;793    
;;;794    /**
;;;795     * @brief Write simple ble service V2 characteristic value
;;;796     *
;;;797     * <b>Command table define</b>
;;;798     * \code{.c}
;;;799        {
;;;800            "simpwritev2",
;;;801            "simpwritev2 [conn_id] [type] [len]\n\r",
;;;802            "Write simple ble service V2 characteristic value\r\n\
;;;803            [type]: 1-(write request), 2-(write command) \r\n\
;;;804            [len]: type=1 len range:0-270, type=2 len range: 0-(mtu-3)\r\n\
;;;805            sample: simpwritev2 0 1 10\n\r",
;;;806            cmd_simpwritev2
;;;807        },
;;;808     * \endcode
;;;809     */
;;;810    static T_USER_CMD_PARSE_RESULT cmd_simpwritev2(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;811    {
        0x00209b1e:    b5fe        ..      PUSH     {r1-r7,lr}
        0x00209b20:    7b03        .{      LDRB     r3,[r0,#0xc]
;;;812        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209b22:    7a06        .z      LDRB     r6,[r0,#8]
;;;813        T_GATT_WRITE_TYPE write_type = (T_GATT_WRITE_TYPE)p_parse_value->dw_param[1];
;;;814    	uint8_t data[12];
;;;815    	uint8_t length = 12;
        0x00209b24:    210c        .!      MOVS     r1,#0xc
;;;816    	uint8_t i;
;;;817    
;;;818    	if (write_type > GATT_WRITE_TYPE_CMD)
        0x00209b26:    2b02        .+      CMP      r3,#2
        0x00209b28:    d87b        {.      BHI      0x209c22 ; cmd_simpwritev2 + 260
;;;819    	{
;;;820    		return (RESULT_ERR);
;;;821    	}
;;;822    
;;;823    	if (p_parse_value->param_count > 2)
        0x00209b2a:    6842        Bh      LDR      r2,[r0,#4]
        0x00209b2c:    2a02        .*      CMP      r2,#2
        0x00209b2e:    dd03        ..      BLE      0x209b38 ; cmd_simpwritev2 + 26
;;;824    	{
;;;825    		length = p_parse_value->dw_param[2];
        0x00209b30:    7c01        .|      LDRB     r1,[r0,#0x10]
;;;826    		if (length > 12)
        0x00209b32:    290c        .)      CMP      r1,#0xc
        0x00209b34:    d900        ..      BLS      0x209b38 ; cmd_simpwritev2 + 26
;;;827    		{
;;;828    			length = 12;
        0x00209b36:    210c        .!      MOVS     r1,#0xc
;;;829    		}
;;;830    	}
;;;831    	
;;;832    	
;;;833        for (i = 0; i < length; i++)
        0x00209b38:    2200        ."      MOVS     r2,#0
        0x00209b3a:    466c        lF      MOV      r4,sp
        0x00209b3c:    e068        h.      B        0x209c10 ; cmd_simpwritev2 + 242
        0x00209b3e:    e070        p.      B        0x209c22 ; cmd_simpwritev2 + 260
    $d
        0x00209b40:    6f687323    #sho    DCD    1869116195
        0x00209b44:    6e6f6377    wcon    DCD    1852793719
        0x00209b48:    64252123    #!%d    DCD    1680154915
        0x00209b4c:    30255b21    ![%0    DCD    807754529
        0x00209b50:    30257832    2x%0    DCD    807761970
        0x00209b54:    30257832    2x%0    DCD    807761970
        0x00209b58:    30257832    2x%0    DCD    807761970
        0x00209b5c:    30257832    2x%0    DCD    807761970
        0x00209b60:    30257832    2x%0    DCD    807761970
        0x00209b64:    3c5d7832    2x]<    DCD    1012758578
        0x00209b68:    0a0d3e59    Y>..    DCD    168640089
        0x00209b6c:    00000000    ....    DCD    0
        0x00209b70:    000f423f    ?B..    DCD    999999
        0x00209b74:    75207462    bt u    DCD    1965061218
        0x00209b78:    20747261    art     DCD    544502369
        0x00209b7c:    74736574    test    DCD    1953719668
        0x00209b80:    0d6b6f20     ok.    DCD    225144608
        0x00209b84:    0000000a    ....    DCD    10
        0x00209b88:    00202ebc    .. .    DCD    2109116
        0x00209b8c:    6e6f6223    #bon    DCD    1852793379
        0x00209b90:    666e6964    dinf    DCD    1718511972
        0x00209b94:    2521236f    o#!%    DCD    622928751
        0x00209b98:    255b2164    d![%    DCD    626729316
        0x00209b9c:    25783230    02x%    DCD    628634160
        0x00209ba0:    25783230    02x%    DCD    628634160
        0x00209ba4:    25783230    02x%    DCD    628634160
        0x00209ba8:    25783230    02x%    DCD    628634160
        0x00209bac:    25783230    02x%    DCD    628634160
        0x00209bb0:    5d783230    02x]    DCD    1568158256
        0x00209bb4:    0d3e593c    <Y>.    DCD    222189884
        0x00209bb8:    0000000a    ....    DCD    10
        0x00209bbc:    0020d281    .. .    DCD    2151041
        0x00209bc0:    0020d280    .. .    DCD    2151040
        0x00209bc4:    6f687323    #sho    DCD    1869116195
        0x00209bc8:    76656477    wdev    DCD    1986356343
        0x00209bcc:    64252123    #!%d    DCD    1680154915
        0x00209bd0:    30255b21    ![%0    DCD    807754529
        0x00209bd4:    30257832    2x%0    DCD    807761970
        0x00209bd8:    30257832    2x%0    DCD    807761970
        0x00209bdc:    30257832    2x%0    DCD    807761970
        0x00209be0:    30257832    2x%0    DCD    807761970
        0x00209be4:    30257832    2x%0    DCD    807761970
        0x00209be8:    3c5d7832    2x]<    DCD    1012758578
        0x00209bec:    0a0d3e59    Y>..    DCD    168640089
        0x00209bf0:    00000000    ....    DCD    0
        0x00209bf4:    6f687323    #sho    DCD    1869116195
        0x00209bf8:    76656477    wdev    DCD    1986356343
        0x00209bfc:    3e593c23    #<Y>    DCD    1046035491
        0x00209c00:    00000a0d    ....    DCD    2573
    $t
        0x00209c04:    eb000582    ....    ADD      r5,r0,r2,LSL #2
        0x00209c08:    7d2d        -}      LDRB     r5,[r5,#0x14]
        0x00209c0a:    54a5        .T      STRB     r5,[r4,r2]
        0x00209c0c:    1c52        R.      ADDS     r2,r2,#1
        0x00209c0e:    b2d2        ..      UXTB     r2,r2
        0x00209c10:    428a        .B      CMP      r2,r1
        0x00209c12:    d3f7        ..      BCC      0x209c04 ; cmd_simpwritev2 + 230
;;;834        {
;;;835            data[i] = p_parse_value->dw_param[3+i];
;;;836        }
;;;837    
;;;838        if (simp_ble_client_write_v2_char(conn_id, length, data, write_type))
        0x00209c14:    4622        "F      MOV      r2,r4
        0x00209c16:    4630        0F      MOV      r0,r6
        0x00209c18:    f7fefd5d    ..].    BL       simp_ble_client_write_v2_char ; 0x2086d6
        0x00209c1c:    b108        ..      CBZ      r0,0x209c22 ; cmd_simpwritev2 + 260
;;;839        {
;;;840            return (RESULT_SUCESS);
        0x00209c1e:    2000        .       MOVS     r0,#0
        0x00209c20:    bdfe        ..      POP      {r1-r7,pc}
;;;841        }
;;;842        else
;;;843        {
;;;844            return (RESULT_ERR);
        0x00209c22:    2020                MOVS     r0,#0x20
;;;845        }
;;;846    }
        0x00209c24:    bdfe        ..      POP      {r1-r7,pc}
    cmd_simphdl
;;;847    
;;;848    /**
;;;849     * @brief List simple ble service handle cache
;;;850     *
;;;851     * <b>Command table define</b>
;;;852     * \code{.c}
;;;853        {
;;;854            "simphdl",
;;;855            "simphdl [conn_id]\n\r",
;;;856            "List simple ble service handle cache\n\r",
;;;857            cmd_simphdl
;;;858        },
;;;859     * \endcode
;;;860     */
;;;861    static T_USER_CMD_PARSE_RESULT cmd_simphdl(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;862    {
        0x00209c26:    b51f        ..      PUSH     {r0-r4,lr}
;;;863        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209c28:    7a00        .z      LDRB     r0,[r0,#8]
;;;864        uint16_t hdl_cache[HDL_SIMBLE_CACHE_LEN];
;;;865        uint8_t hdl_idx;
;;;866        bool ret = simp_ble_client_get_hdl_cache(conn_id, hdl_cache,
        0x00209c2a:    2210        ."      MOVS     r2,#0x10
        0x00209c2c:    4669        iF      MOV      r1,sp
        0x00209c2e:    f7fefd7b    ..{.    BL       simp_ble_client_get_hdl_cache ; 0x208728
;;;867                                                 sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN);
;;;868    
;;;869        if (ret)
        0x00209c32:    b138        8.      CBZ      r0,0x209c44 ; cmd_simphdl + 30
;;;870        {
;;;871            for (hdl_idx = HDL_SIMBLE_SRV_START; hdl_idx < HDL_SIMBLE_CACHE_LEN; hdl_idx++)
        0x00209c34:    2000        .       MOVS     r0,#0
        0x00209c36:    1c40        @.      ADDS     r0,r0,#1
        0x00209c38:    b2c0        ..      UXTB     r0,r0
        0x00209c3a:    2808        .(      CMP      r0,#8
        0x00209c3c:    d3fb        ..      BCC      0x209c36 ; cmd_simphdl + 16
;;;872            {
;;;873                //data_uart_print("-->Index %d -- Handle 0x%x\r\n", hdl_idx, hdl_cache[hdl_idx]);
;;;874            }
;;;875            return (RESULT_SUCESS);
        0x00209c3e:    2000        .       MOVS     r0,#0
        0x00209c40:    b004        ..      ADD      sp,sp,#0x10
        0x00209c42:    bd10        ..      POP      {r4,pc}
;;;876        }
;;;877        else
;;;878        {
;;;879            return (RESULT_ERR);
        0x00209c44:    2020                MOVS     r0,#0x20
;;;880        }
;;;881    }
        0x00209c46:    e7fb        ..      B        0x209c40 ; cmd_simphdl + 26
    cmd_basread
;;;882    
;;;883    /**
;;;884     * @brief Read battery service characteristic and descriptor value
;;;885     *
;;;886     * <b>Command table define</b>
;;;887     * \code{.c}
;;;888        {
;;;889            "basread",
;;;890            "basread [conn_id] [type]\n\r",
;;;891            "Read battery service characteristic and descriptor value\r\n\
;;;892            [type]: 0-(battery level value), 1-(battery cccd)\r\n\
;;;893            sample: basread 0 1 \n\r",
;;;894            cmd_basread
;;;895        },
;;;896     * \endcode
;;;897     */
;;;898    static T_USER_CMD_PARSE_RESULT cmd_basread(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;899    {
        0x00209c48:    b510        ..      PUSH     {r4,lr}
        0x00209c4a:    4601        .F      MOV      r1,r0
        0x00209c4c:    7a00        .z      LDRB     r0,[r0,#8]
        0x00209c4e:    68c9        .h      LDR      r1,[r1,#0xc]
;;; ..\..\..\src\sample\ble_central\user_cmd.c (899)
        0x00209c50:    b111        ..      CBZ      r1,0x209c58 ; cmd_basread + 16
        0x00209c52:    2901        .)      CMP      r1,#1
        0x00209c54:    d003        ..      BEQ      0x209c5e ; cmd_basread + 22
        0x00209c56:    e007        ..      B        0x209c68 ; cmd_basread + 32
;;;900        uint8_t conn_id = p_parse_value->dw_param[0];
;;;901        bool ret = false;
;;;902        if (p_parse_value->dw_param[1] == 0)
;;;903        {
;;;904            ret = bas_read_battery_level(conn_id);
        0x00209c58:    f7fff878    ..x.    BL       bas_read_battery_level ; 0x208d4c
        0x00209c5c:    e001        ..      B        0x209c62 ; cmd_basread + 26
;;;905        }
;;;906        else if (p_parse_value->dw_param[1] == 1)
;;;907        {
;;;908            ret = bas_read_notify(conn_id);
        0x00209c5e:    f7fff8cc    ....    BL       bas_read_notify ; 0x208dfa
;;;909        }
;;;910    
;;;911        if (ret)
        0x00209c62:    b108        ..      CBZ      r0,0x209c68 ; cmd_basread + 32
;;;912        {
;;;913            return (RESULT_SUCESS);
        0x00209c64:    2000        .       MOVS     r0,#0
        0x00209c66:    bd10        ..      POP      {r4,pc}
;;;914        }
;;;915        else
;;;916        {
;;;917            return (RESULT_ERR);
        0x00209c68:    2020                MOVS     r0,#0x20
;;;918        }
;;;919    }
        0x00209c6a:    bd10        ..      POP      {r4,pc}
    cmd_bascccd
;;;920    
;;;921    /**
;;;922     * @brief Config battery service client characteristic configuration descriptor value
;;;923     *
;;;924     * <b>Command table define</b>
;;;925     * \code{.c}
;;;926        {
;;;927            "bascccd",
;;;928            "bascccd [conn_id] [notify]\n\r",
;;;929            "Config battery service client characteristic configuration descriptor value\r\n\
;;;930            [notify]: 0-(disable), 1-(enable)\n\r",
;;;931            cmd_bascccd
;;;932        },
;;;933     * \endcode
;;;934     */
;;;935    static T_USER_CMD_PARSE_RESULT cmd_bascccd(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;936    {
        0x00209c6c:    b510        ..      PUSH     {r4,lr}
        0x00209c6e:    7a02        .z      LDRB     r2,[r0,#8]
        0x00209c70:    68c0        .h      LDR      r0,[r0,#0xc]
;;; ..\..\..\src\sample\ble_central\user_cmd.c (936)
        0x00209c72:    b108        ..      CBZ      r0,0x209c78 ; cmd_bascccd + 12
;;;937        uint8_t conn_id = p_parse_value->dw_param[0];
;;;938        bool notify = p_parse_value->dw_param[1];
        0x00209c74:    2101        .!      MOVS     r1,#1
        0x00209c76:    e000        ..      B        0x209c7a ; cmd_bascccd + 14
        0x00209c78:    2100        .!      MOVS     r1,#0
;;;939        bool ret;
;;;940        ret = bas_set_notify(conn_id, notify);
        0x00209c7a:    4610        .F      MOV      r0,r2
        0x00209c7c:    f7fff88b    ....    BL       bas_set_notify ; 0x208d96
;;;941    
;;;942        if (ret)
        0x00209c80:    b108        ..      CBZ      r0,0x209c86 ; cmd_bascccd + 26
;;;943        {
;;;944            return (RESULT_SUCESS);
        0x00209c82:    2000        .       MOVS     r0,#0
        0x00209c84:    bd10        ..      POP      {r4,pc}
;;;945        }
;;;946        else
;;;947        {
;;;948            return (RESULT_ERR);
        0x00209c86:    2020                MOVS     r0,#0x20
;;;949        }
;;;950    }
        0x00209c88:    bd10        ..      POP      {r4,pc}
    cmd_bashdl
;;;951    
;;;952    /**
;;;953     * @brief List battery service handle cache
;;;954     *
;;;955     * <b>Command table define</b>
;;;956     * \code{.c}
;;;957        {
;;;958            "bashdl",
;;;959            "bashdl [conn_id]\n\r",
;;;960            "List battery service handle cache\n\r",
;;;961            cmd_bashdl
;;;962        },
;;;963     * \endcode
;;;964     */
;;;965    static T_USER_CMD_PARSE_RESULT cmd_bashdl(T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;966    {
        0x00209c8a:    b51c        ..      PUSH     {r2-r4,lr}
;;;967        uint8_t conn_id = p_parse_value->dw_param[0];
        0x00209c8c:    7a00        .z      LDRB     r0,[r0,#8]
;;;968        uint16_t hdl_cache[HDL_BAS_CACHE_LEN];
;;;969        uint8_t hdl_idx;
;;;970        bool ret = bas_get_hdl_cache(conn_id, hdl_cache,
        0x00209c8e:    2208        ."      MOVS     r2,#8
        0x00209c90:    4669        iF      MOV      r1,sp
        0x00209c92:    f7fff8d6    ....    BL       bas_get_hdl_cache ; 0x208e42
;;;971                                     sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;972    
;;;973        if (ret)
        0x00209c96:    b130        0.      CBZ      r0,0x209ca6 ; cmd_bashdl + 28
;;;974        {
;;;975            for (hdl_idx = HDL_BAS_SRV_START; hdl_idx < HDL_BAS_CACHE_LEN; hdl_idx++)
        0x00209c98:    2000        .       MOVS     r0,#0
        0x00209c9a:    1c40        @.      ADDS     r0,r0,#1
        0x00209c9c:    b2c0        ..      UXTB     r0,r0
        0x00209c9e:    2804        .(      CMP      r0,#4
        0x00209ca0:    d3fb        ..      BCC      0x209c9a ; cmd_bashdl + 16
;;;976            {
;;;977                //data_uart_print("-->Index %d -- Handle 0x%x\r\n", hdl_idx, hdl_cache[hdl_idx]);
;;;978            }
;;;979            return (RESULT_SUCESS);
        0x00209ca2:    2000        .       MOVS     r0,#0
        0x00209ca4:    bd1c        ..      POP      {r2-r4,pc}
;;;980        }
;;;981        else
;;;982        {
;;;983            return (RESULT_ERR);
        0x00209ca6:    2020                MOVS     r0,#0x20
;;;984        }
;;;985    }
        0x00209ca8:    bd1c        ..      POP      {r2-r4,pc}
        0x00209caa:    0000        ..      MOVS     r0,r0
    .text
    app_handle_authen_state_evt
;;; ..\..\..\src\sample\ble_central\central_app.c
;;;219    {
        0x00209cac:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00209cae:    f5ad7d03    ...}    SUB      sp,sp,#0x20c
        0x00209cb2:    4efb        .N      LDR      r6,[pc,#1004] ; [0x20a0a0] = 0x21103002
;;; ..\..\..\src\sample\ble_central\central_app.c (219)
        0x00209cb4:    4614        .F      MOV      r4,r2
        0x00209cb6:    460f        .F      MOV      r7,r1
        0x00209cb8:    4605        .F      MOV      r5,r0
;;;220    	char cmd_buffer[FRAMING_PAYLOAD_MAX_LENGTH];
;;;221    
;;;222        APP_PRINT_INFO2("app_handle_authen_state_evt:conn_id %d, cause 0x%x", conn_id, cause);
        0x00209cba:    4603        .F      MOV      r3,r0
        0x00209cbc:    9200        ..      STR      r2,[sp,#0]
        0x00209cbe:    2202        ."      MOVS     r2,#2
        0x00209cc0:    49f6        .I      LDR      r1,[pc,#984] ; [0x20a09c] = 0x8801724
        0x00209cc2:    4630        0F      MOV      r0,r6
        0x00209cc4:    f5fdfecb    ....    BL       log_buffer ; 0x7a5e
;;;223    
;;;224        switch (new_state)
        0x00209cc8:    b157        W.      CBZ      r7,0x209ce0 ; app_handle_authen_state_evt + 52
        0x00209cca:    2f01        ./      CMP      r7,#1
        0x00209ccc:    d00c        ..      BEQ      0x209ce8 ; app_handle_authen_state_evt + 60
        0x00209cce:    463b        ;F      MOV      r3,r7
        0x00209cd0:    2201        ."      MOVS     r2,#1
        0x00209cd2:    49f4        .I      LDR      r1,[pc,#976] ; [0x20a0a4] = 0x8801828
        0x00209cd4:    1eb0        ..      SUBS     r0,r6,#2
        0x00209cd6:    f5fdfec2    ....    BL       log_buffer ; 0x7a5e
        0x00209cda:    f50d7d03    ...}    ADD      sp,sp,#0x20c
        0x00209cde:    bdf0        ..      POP      {r4-r7,pc}
;;;225        {
;;;226        case GAP_AUTHEN_STATE_STARTED:
;;;227            {
;;;228                APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_STARTED");
        0x00209ce0:    49ee        .I      LDR      r1,[pc,#952] ; [0x20a09c] = 0x8801724
        0x00209ce2:    2200        ."      MOVS     r2,#0
        0x00209ce4:    3138        81      ADDS     r1,r1,#0x38
;;;229            }
;;;230            break;
        0x00209ce6:    e01f        ..      B        0x209d28 ; app_handle_authen_state_evt + 124
        0x00209ce8:    48ef        .H      LDR      r0,[pc,#956] ; [0x20a0a8] = 0x20d2ab
        0x00209cea:    eb050185    ....    ADD      r1,r5,r5,LSL #2
        0x00209cee:    eb000141    ..A.    ADD      r1,r0,r1,LSL #1
;;;231    
;;;232        case GAP_AUTHEN_STATE_COMPLETE:
;;;233            {
;;;234                if (cause == GAP_SUCCESS)
        0x00209cf2:    2c00        .,      CMP      r4,#0
        0x00209cf4:    79c8        .y      LDRB     r0,[r1,#7]
        0x00209cf6:    af01        ..      ADD      r7,sp,#4
        0x00209cf8:    790c        .y      LDRB     r4,[r1,#4]
        0x00209cfa:    794b        Ky      LDRB     r3,[r1,#5]
        0x00209cfc:    798a        .y      LDRB     r2,[r1,#6]
        0x00209cfe:    e887001d    ....    STM      r7,{r0,r2-r4}
        0x00209d02:    7a08        .z      LDRB     r0,[r1,#8]
        0x00209d04:    9000        ..      STR      r0,[sp,#0]
        0x00209d06:    7a4b        Kz      LDRB     r3,[r1,#9]
        0x00209d08:    462a        *F      MOV      r2,r5
        0x00209d0a:    d011        ..      BEQ      0x209d30 ; app_handle_authen_state_evt + 132
        0x00209d0c:    a1e7        ..      ADR      r1,{pc}+0x3a0 ; 0x20a0ac
        0x00209d0e:    a805        ..      ADD      r0,sp,#0x14
        0x00209d10:    f012fc66    ..f.    BL       __2sprintf ; 0x21c5e0
        0x00209d14:    a805        ..      ADD      r0,sp,#0x14
        0x00209d16:    f650f8a1    P...    BL       strlen ; 0x59e5c
        0x00209d1a:    b281        ..      UXTH     r1,r0
        0x00209d1c:    a805        ..      ADD      r0,sp,#0x14
        0x00209d1e:    f000ff64    ..d.    BL       FramingWrapFrameUartPrint ; 0x20abea
        0x00209d22:    49e0        .I      LDR      r1,[pc,#896] ; [0x20a0a4] = 0x8801828
        0x00209d24:    2200        ."      MOVS     r2,#0
        0x00209d26:    3948        H9      SUBS     r1,r1,#0x48
        0x00209d28:    4630        0F      MOV      r0,r6
        0x00209d2a:    f5fdfe98    ....    BL       log_buffer ; 0x7a5e
        0x00209d2e:    e7d4        ..      B        0x209cda ; app_handle_authen_state_evt + 46
;;;235                {
;;;236    #if 0 //by vsop            
;;;237    				data_uart_print("#sauth#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;238    					conn_id,
;;;239    					app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;240    					app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;241    					app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;242    #else
;;;243    			sprintf(cmd_buffer,"#sauth#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
        0x00209d30:    a1e9        ..      ADR      r1,{pc}+0x3a8 ; 0x20a0d8
        0x00209d32:    a805        ..      ADD      r0,sp,#0x14
        0x00209d34:    f012fc54    ..T.    BL       __2sprintf ; 0x21c5e0
;;;244    					conn_id,
;;;245    					app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;246    					app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;247    					app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;248    			FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));	
        0x00209d38:    a805        ..      ADD      r0,sp,#0x14
        0x00209d3a:    f650f88f    P...    BL       strlen ; 0x59e5c
        0x00209d3e:    b281        ..      UXTH     r1,r0
        0x00209d40:    a805        ..      ADD      r0,sp,#0x14
        0x00209d42:    f000ff52    ..R.    BL       FramingWrapFrameUartPrint ; 0x20abea
;;;249    #endif
;;;250                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair success");
        0x00209d46:    49d5        .I      LDR      r1,[pc,#852] ; [0x20a09c] = 0x8801724
        0x00209d48:    2200        ."      MOVS     r2,#0
        0x00209d4a:    3174        t1      ADDS     r1,r1,#0x74
        0x00209d4c:    e7ec        ..      B        0x209d28 ; app_handle_authen_state_evt + 124
    app_handle_conn_param_update_evt
;;;251    
;;;252                }
;;;253                else
;;;254                {
;;;255    #if 0 //by vsop            
;;;256                   	data_uart_print("#sauth#!%d![%02x%02x%02x%02x%02x%02x]<N>\r\n",
;;;257    						conn_id,
;;;258    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;259    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;260    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;261    #else
;;;262    					sprintf(cmd_buffer,"#sauth#!%d![%02x%02x%02x%02x%02x%02x]<N>\r\n",
;;;263    						conn_id,
;;;264    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;265    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;266    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;267    					FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));	
;;;268    #endif            
;;;269                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair failed");
;;;270                }
;;;271            }
;;;272            break;
;;;273    
;;;274        default:
;;;275            {
;;;276                APP_PRINT_ERROR1("app_handle_authen_state_evt: unknown newstate %d", new_state);
;;;277            }
;;;278            break;
;;;279        }
;;;280    }
;;;281    
;;;282    /**
;;;283     * @brief    Handle msg GAP_MSG_LE_CONN_MTU_INFO
;;;284     * @note     This msg is used to inform APP that exchange mtu procedure is completed.
;;;285     * @param[in] conn_id Connection ID
;;;286     * @param[in] mtu_size  New mtu size
;;;287     * @return   void
;;;288     */
;;;289    void app_handle_conn_mtu_info_evt(uint8_t conn_id, uint16_t mtu_size)
;;;290    {
;;;291        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
;;;292        app_discov_services(conn_id, true);
;;;293    }
;;;294    
;;;295    /**
;;;296     * @brief    Handle msg GAP_MSG_LE_CONN_PARAM_UPDATE
;;;297     * @note     All the connection parameter update change  events are pre-handled in this function.
;;;298     * @param[in] conn_id Connection ID
;;;299     * @param[in] status  New update state
;;;300     * @param[in] cause Use this cause when status is GAP_CONN_PARAM_UPDATE_STATUS_FAIL
;;;301     * @return   void
;;;302     */
;;;303    void app_handle_conn_param_update_evt(uint8_t conn_id, uint8_t status, uint16_t cause)
;;;304    {
        0x00209d4e:    b530        0.      PUSH     {r4,r5,lr}
        0x00209d50:    4cd3        .L      LDR      r4,[pc,#844] ; [0x20a0a0] = 0x21103002
        0x00209d52:    b087        ..      SUB      sp,sp,#0x1c
        0x00209d54:    4605        .F      MOV      r5,r0
        0x00209d56:    b161        a.      CBZ      r1,0x209d72 ; app_handle_conn_param_update_evt + 36
;;;305        switch (status)
        0x00209d58:    2901        .)      CMP      r1,#1
        0x00209d5a:    d02d        -.      BEQ      0x209db8 ; app_handle_conn_param_update_evt + 106
        0x00209d5c:    2902        .)      CMP      r1,#2
        0x00209d5e:    d129        ).      BNE      0x209db4 ; app_handle_conn_param_update_evt + 102
        0x00209d60:    4603        .F      MOV      r3,r0
        0x00209d62:    b007        ..      ADD      sp,sp,#0x1c
        0x00209d64:    4620         F      MOV      r0,r4
        0x00209d66:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x00209d6a:    2201        ."      MOVS     r2,#1
        0x00209d6c:    49e5        .I      LDR      r1,[pc,#916] ; [0x20a104] = 0x8801970
        0x00209d6e:    f5fdbe76    ..v.    B        log_buffer ; 0x7a5e
;;;306        {
;;;307        case GAP_CONN_PARAM_UPDATE_STATUS_SUCCESS:
;;;308            {
;;;309                uint16_t conn_interval;
;;;310                uint16_t conn_slave_latency;
;;;311                uint16_t conn_supervision_timeout;
;;;312    
;;;313                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
        0x00209d72:    4602        .F      MOV      r2,r0
        0x00209d74:    a905        ..      ADD      r1,sp,#0x14
        0x00209d76:    f2402072    @.r     MOV      r0,#0x272
        0x00209d7a:    f643fe80    C...    BL       le_get_conn_param ; 0x4da7e
;;;314                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_slave_latency, conn_id);
        0x00209d7e:    462a        *F      MOV      r2,r5
        0x00209d80:    a904        ..      ADD      r1,sp,#0x10
        0x00209d82:    f2402073    @.s     MOV      r0,#0x273
        0x00209d86:    f643fe7a    C.z.    BL       le_get_conn_param ; 0x4da7e
;;;315                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
        0x00209d8a:    462a        *F      MOV      r2,r5
        0x00209d8c:    a903        ..      ADD      r1,sp,#0xc
        0x00209d8e:    f44f701d    O..p    MOV      r0,#0x274
        0x00209d92:    f643fe74    C.t.    BL       le_get_conn_param ; 0x4da7e
;;;316                APP_PRINT_INFO4("app_handle_conn_param_update_evt update success:conn_id %d, conn_interval 0x%x, conn_slave_latency 0x%x, conn_supervision_timeout 0x%x",
        0x00209d96:    f8bd0014    ....    LDRH     r0,[sp,#0x14]
        0x00209d9a:    f8bd200c    ...     LDRH     r2,[sp,#0xc]
        0x00209d9e:    f8bd1010    ....    LDRH     r1,[sp,#0x10]
        0x00209da2:    e88d0007    ....    STM      sp,{r0-r2}
        0x00209da6:    49bf        .I      LDR      r1,[pc,#764] ; [0x20a0a4] = 0x8801828
        0x00209da8:    462b        +F      MOV      r3,r5
        0x00209daa:    2204        ."      MOVS     r2,#4
        0x00209dac:    3170        p1      ADDS     r1,r1,#0x70
        0x00209dae:    4620         F      MOV      r0,r4
        0x00209db0:    f5fdfe55    ..U.    BL       log_buffer ; 0x7a5e
        0x00209db4:    b007        ..      ADD      sp,sp,#0x1c
        0x00209db6:    bd30        0.      POP      {r4,r5,pc}
;;;317                                conn_id, conn_interval, conn_slave_latency, conn_supervision_timeout);
;;;318            }
;;;319            break;
;;;320    
;;;321        case GAP_CONN_PARAM_UPDATE_STATUS_FAIL:
;;;322            {
;;;323                APP_PRINT_ERROR2("app_handle_conn_param_update_evt update failed: conn_id %d, cause 0x%x",
        0x00209db8:    4603        .F      MOV      r3,r0
        0x00209dba:    49d2        .I      LDR      r1,[pc,#840] ; [0x20a104] = 0x8801970
        0x00209dbc:    48b8        .H      LDR      r0,[pc,#736] ; [0x20a0a0] = 0x21103002
        0x00209dbe:    9200        ..      STR      r2,[sp,#0]
        0x00209dc0:    2202        ."      MOVS     r2,#2
        0x00209dc2:    394c        L9      SUBS     r1,r1,#0x4c
        0x00209dc4:    1e80        ..      SUBS     r0,r0,#2
        0x00209dc6:    f5fdfe4a    ..J.    BL       log_buffer ; 0x7a5e
;;;324                                 conn_id, cause);
;;;325            }
;;;326            break;
;;;327    
;;;328        case GAP_CONN_PARAM_UPDATE_STATUS_PENDING:
;;;329            {
;;;330                APP_PRINT_INFO1("app_handle_conn_param_update_evt update pending: conn_id %d", conn_id);
;;;331            }
;;;332            break;
;;;333    
;;;334        default:
;;;335            break;
;;;336        }
;;;337    }
        0x00209dca:    e7f3        ..      B        0x209db4 ; app_handle_conn_param_update_evt + 102
    app_discov_services
;;;338    
;;;339    /**
;;;340     * @brief    All the BT GAP MSG are pre-handled in this function.
;;;341     * @note     Then the event handling function shall be called according to the
;;;342     *           subtype of T_IO_MSG
;;;343     * @param[in] p_gap_msg Pointer to GAP msg
;;;344     * @return   void
;;;345     */
;;;346    void app_handle_gap_msg(T_IO_MSG *p_gap_msg)
;;;347    {
;;;348        T_LE_GAP_MSG gap_msg;
;;;349        uint8_t conn_id;
;;;350        memcpy(&gap_msg, &p_gap_msg->u.param, sizeof(p_gap_msg->u.param));
;;;351    
;;;352        APP_PRINT_TRACE1("app_handle_gap_msg: subtype %d", p_gap_msg->subtype);
;;;353        switch (p_gap_msg->subtype)
;;;354        {
;;;355        case GAP_MSG_LE_DEV_STATE_CHANGE:
;;;356            {
;;;357                app_handle_dev_state_evt(gap_msg.msg_data.gap_dev_state_change.new_state,
;;;358                                         gap_msg.msg_data.gap_dev_state_change.cause);
;;;359            }
;;;360            break;
;;;361    
;;;362        case GAP_MSG_LE_CONN_STATE_CHANGE:
;;;363            {
;;;364                app_handle_conn_state_evt(gap_msg.msg_data.gap_conn_state_change.conn_id,
;;;365                                          (T_GAP_CONN_STATE)gap_msg.msg_data.gap_conn_state_change.new_state,
;;;366                                          gap_msg.msg_data.gap_conn_state_change.disc_cause);
;;;367            }
;;;368            break;
;;;369    
;;;370        case GAP_MSG_LE_CONN_MTU_INFO:
;;;371            {
;;;372                app_handle_conn_mtu_info_evt(gap_msg.msg_data.gap_conn_mtu_info.conn_id,
;;;373                                             gap_msg.msg_data.gap_conn_mtu_info.mtu_size);
;;;374            }
;;;375            break;
;;;376    
;;;377        case GAP_MSG_LE_CONN_PARAM_UPDATE:
;;;378            {
;;;379                app_handle_conn_param_update_evt(gap_msg.msg_data.gap_conn_param_update.conn_id,
;;;380                                                 gap_msg.msg_data.gap_conn_param_update.status,
;;;381                                                 gap_msg.msg_data.gap_conn_param_update.cause);
;;;382            }
;;;383            break;
;;;384    
;;;385        case GAP_MSG_LE_AUTHEN_STATE_CHANGE:
;;;386            {
;;;387                app_handle_authen_state_evt(gap_msg.msg_data.gap_authen_state.conn_id,
;;;388                                            gap_msg.msg_data.gap_authen_state.new_state,
;;;389                                            gap_msg.msg_data.gap_authen_state.status);
;;;390            }
;;;391            break;
;;;392    
;;;393        case GAP_MSG_LE_BOND_JUST_WORK:
;;;394            {
;;;395                conn_id = gap_msg.msg_data.gap_bond_just_work_conf.conn_id;
;;;396                le_bond_just_work_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;397                APP_PRINT_INFO0("GAP_MSG_LE_BOND_JUST_WORK");
;;;398            }
;;;399            break;
;;;400    
;;;401        case GAP_MSG_LE_BOND_PASSKEY_DISPLAY:
;;;402            {
;;;403                uint32_t display_value = 0;
;;;404                conn_id = gap_msg.msg_data.gap_bond_passkey_display.conn_id;
;;;405                le_bond_get_display_key(conn_id, &display_value);
;;;406                APP_PRINT_INFO2("GAP_MSG_LE_BOND_PASSKEY_DISPLAY: conn_id %d, passkey %d",
;;;407                                conn_id, display_value);
;;;408                le_bond_passkey_display_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;409    #if 0 //by vsop			
;;;410                data_uart_print("GAP_MSG_LE_BOND_PASSKEY_DISPLAY: conn_id %d, passkey %d\r\n",
;;;411                                conn_id,
;;;412                                display_value);
;;;413    #endif
;;;414            }
;;;415            break;
;;;416    
;;;417        case GAP_MSG_LE_BOND_USER_CONFIRMATION:
;;;418            {
;;;419                uint32_t display_value = 0;
;;;420                conn_id = gap_msg.msg_data.gap_bond_user_conf.conn_id;
;;;421                le_bond_get_display_key(conn_id, &display_value);
;;;422                APP_PRINT_INFO2("GAP_MSG_LE_BOND_USER_CONFIRMATION: conn_id %d, passkey %d",
;;;423                                conn_id, display_value);
;;;424    #if 0 //by vsop			
;;;425                data_uart_print("GAP_MSG_LE_BOND_USER_CONFIRMATION: conn_id %d, passkey %d\r\n",
;;;426                                conn_id,
;;;427                                display_value);
;;;428    #endif
;;;429                //le_bond_user_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;430            }
;;;431            break;
;;;432    
;;;433        case GAP_MSG_LE_BOND_PASSKEY_INPUT:
;;;434            {
;;;435                //uint32_t passkey = 888888;
;;;436                conn_id = gap_msg.msg_data.gap_bond_passkey_input.conn_id;
;;;437                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d", conn_id);
;;;438    #if 0 //by vsop			
;;;439                data_uart_print("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d\r\n", conn_id);
;;;440    #endif
;;;441                //le_bond_passkey_input_confirm(conn_id, passkey, GAP_CFM_CAUSE_ACCEPT);
;;;442            }
;;;443            break;
;;;444    
;;;445        case GAP_MSG_LE_BOND_OOB_INPUT:
;;;446            {
;;;447                uint8_t oob_data[GAP_OOB_LEN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
;;;448                conn_id = gap_msg.msg_data.gap_bond_oob_input.conn_id;
;;;449                APP_PRINT_INFO1("GAP_MSG_LE_BOND_OOB_INPUT: conn_id %d", conn_id);
;;;450                le_bond_set_param(GAP_PARAM_BOND_OOB_DATA, GAP_OOB_LEN, oob_data);
;;;451                le_bond_oob_input_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;452            }
;;;453            break;
;;;454    
;;;455        default:
;;;456            APP_PRINT_ERROR1("app_handle_gap_msg: unknown subtype %d", p_gap_msg->subtype);
;;;457            break;
;;;458        }
;;;459    }
;;;460    
;;;461    bool filter_scan_info_by_name(uint8_t *name, T_LE_SCAN_INFO *scan_info)
;;;462    {
;;;463        uint8_t buffer[32];
;;;464        uint8_t pos = 0;
;;;465    
;;;466        while (pos < scan_info->data_len)
;;;467        {
;;;468            /* Length of the AD structure. */
;;;469            uint8_t length = scan_info->data[pos++];
;;;470            uint8_t type;
;;;471    
;;;472            if ((length > 0x01) && ((pos + length) <= 31))
;;;473            {
;;;474                /* Copy the AD Data to buffer. */
;;;475                memcpy(buffer, scan_info->data + pos + 1, length - 1);
;;;476                /* AD Type, one octet. */
;;;477                type = scan_info->data[pos];
;;;478                switch (type)
;;;479                {
;;;480    	            case GAP_ADTYPE_LOCAL_NAME_COMPLETE:
;;;481    	                {
;;;482    	                    buffer[length - 1] = '\0';
;;;483    	                    //data_uart_print("GAP_ADTYPE_LOCAL_NAME_XXX: %s\r\n", buffer);
;;;484    						if(strncmp((char *)buffer,(char *)name,5)==0)return true;
;;;485    	                }
;;;486    	                break;
;;;487    	            default:
;;;488    	                break;
;;;489    	            }
;;;490            }
;;;491            pos += length;
;;;492        }
;;;493    	return false;
;;;494    }
;;;495    
;;;496    
;;;497    /** @} */ /* End of group CENTRAL_GAP_MSG */
;;;498    void app_parse_scan_info(T_LE_SCAN_INFO *scan_info)
;;;499    {
;;;500        uint8_t buffer[32];
;;;501        uint8_t pos = 0;
;;;502    	data_uart_print("+++++++++++++++++++++++++++++\r\n");
;;;503    
;;;504        while (pos < scan_info->data_len)
;;;505        {
;;;506            /* Length of the AD structure. */
;;;507            uint8_t length = scan_info->data[pos++];
;;;508            uint8_t type;
;;;509    
;;;510            if ((length > 0x01) && ((pos + length) <= 31))
;;;511            {
;;;512                /* Copy the AD Data to buffer. */
;;;513                memcpy(buffer, scan_info->data + pos + 1, length - 1);
;;;514                /* AD Type, one octet. */
;;;515                type = scan_info->data[pos];
;;;516    
;;;517                data_uart_print("app_parse_scan_info: AD Structure Info: AD type 0x%x, AD Data Length %d\r\n", type,
;;;518                                 length - 1);
;;;519    
;;;520                switch (type)
;;;521                {
;;;522                case GAP_ADTYPE_FLAGS:
;;;523                    {
;;;524                        /* (flags & 0x01) -- LE Limited Discoverable Mode */
;;;525                        /* (flags & 0x02) -- LE General Discoverable Mode */
;;;526                        /* (flags & 0x04) -- BR/EDR Not Supported */
;;;527                        /* (flags & 0x08) -- Simultaneous LE and BR/EDR to Same Device Capable (Controller) */
;;;528                        /* (flags & 0x10) -- Simultaneous LE and BR/EDR to Same Device Capable (Host) */
;;;529                        uint8_t flags = scan_info->data[pos + 1];
;;;530                        data_uart_print("GAP_ADTYPE_FLAGS: 0x%x\r\n", flags);
;;;531                    }
;;;532                    break;
;;;533    
;;;534                case GAP_ADTYPE_16BIT_MORE:
;;;535                case GAP_ADTYPE_16BIT_COMPLETE:
;;;536                case GAP_ADTYPE_SERVICES_LIST_16BIT:
;;;537                    {
;;;538                        uint16_t *p_uuid = (uint16_t *)(buffer);
;;;539                        uint8_t i = length - 1;
;;;540    
;;;541                        while (i >= 2)
;;;542                        {
;;;543                            data_uart_print("GAP_ADTYPE_16BIT_XXX: 0x%x\r\n", *p_uuid++);
;;;544                            i -= 2;
;;;545                        }
;;;546                    }
;;;547                    break;
;;;548    
;;;549                case GAP_ADTYPE_32BIT_MORE:
;;;550                case GAP_ADTYPE_32BIT_COMPLETE:
;;;551                    {
;;;552                        uint32_t *p_uuid = (uint32_t *)(buffer);
;;;553                        uint8_t    i     = length - 1;
;;;554    
;;;555                        while (i >= 4)
;;;556                        {
;;;557                            data_uart_print("GAP_ADTYPE_32BIT_XXX: 0x%x\r\n", *p_uuid++);
;;;558                            i -= 4;
;;;559                        }
;;;560                    }
;;;561                    break;
;;;562    
;;;563                case GAP_ADTYPE_128BIT_MORE:
;;;564                case GAP_ADTYPE_128BIT_COMPLETE:
;;;565                case GAP_ADTYPE_SERVICES_LIST_128BIT:
;;;566                    {
;;;567                        uint32_t *p_uuid = (uint32_t *)(buffer);
;;;568                        data_uart_print("GAP_ADTYPE_128BIT_XXX: 0x%8.8x%8.8x%8.8x%8.8x\r\n",
;;;569                                        p_uuid[3], p_uuid[2], p_uuid[1], p_uuid[0]);
;;;570                    }
;;;571                    break;
;;;572    
;;;573                case GAP_ADTYPE_LOCAL_NAME_SHORT:
;;;574                case GAP_ADTYPE_LOCAL_NAME_COMPLETE:
;;;575                    {
;;;576                        buffer[length - 1] = '\0';
;;;577                        data_uart_print("GAP_ADTYPE_LOCAL_NAME_XXX: %s\r\n", buffer);
;;;578                    }
;;;579                    break;
;;;580    
;;;581                case GAP_ADTYPE_POWER_LEVEL:
;;;582                    {
;;;583                        data_uart_print("GAP_ADTYPE_POWER_LEVEL: 0x%x\r\n", scan_info->data[pos + 1]);
;;;584                    }
;;;585                    break;
;;;586    
;;;587                case GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE:
;;;588                    {
;;;589                        uint16_t *p_min = (uint16_t *)(buffer);
;;;590                        uint16_t *p_max = p_min + 1;
;;;591                        APP_PRINT_INFO2("GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE: 0x%x - 0x%x", *p_min,
;;;592                                        *p_max);
;;;593                    }
;;;594                    break;
;;;595    
;;;596                case GAP_ADTYPE_SERVICE_DATA:
;;;597                    {
;;;598                        uint16_t *p_uuid = (uint16_t *)(buffer);
;;;599                        uint8_t data_len = length - 3;
;;;600    
;;;601                        data_uart_print("GAP_ADTYPE_SERVICE_DATA: UUID 0x%x, len %d, data %b\r\n", *p_uuid,
;;;602                                        data_len, TRACE_BINARY(data_len, &buffer[2]));
;;;603                    }
;;;604                    break;
;;;605                case GAP_ADTYPE_APPEARANCE:
;;;606                    {
;;;607                        uint16_t *p_appearance = (uint16_t *)(buffer);
;;;608                        data_uart_print("GAP_ADTYPE_APPEARANCE: %d\r\n", *p_appearance);
;;;609                    }
;;;610                    break;
;;;611    
;;;612                case GAP_ADTYPE_MANUFACTURER_SPECIFIC:
;;;613                    {
;;;614                        uint8_t data_len = length - 3;
;;;615                        uint16_t *p_company_id = (uint16_t *)(buffer);
;;;616                        data_uart_print("GAP_ADTYPE_MANUFACTURER_SPECIFIC: company_id 0x%x, len %d, data %b\r\n",
;;;617                                        *p_company_id, data_len, TRACE_BINARY(data_len, &buffer[2]));
;;;618                    }
;;;619                    break;
;;;620    
;;;621                default:
;;;622                    {
;;;623                        uint8_t i = 0;
;;;624    
;;;625                        for (i = 0; i < (length - 1); i++)
;;;626                        {
;;;627                            data_uart_print("  AD Data: Unhandled Data = 0x%x\r\n", scan_info->data[pos + i]);
;;;628                        }
;;;629                    }
;;;630                    break;
;;;631                }
;;;632            }
;;;633    
;;;634            pos += length;
;;;635        }
;;;636    		data_uart_print("------------------------------\r\n");
;;;637    }
;;;638    
;;;639    /** @defgroup  CENTRAL_SCAN_MGR Scan Information manager
;;;640        * @brief Scan Information manager
;;;641        * @{
;;;642        */
;;;643    /**
;;;644      * @brief Use 16 bit uuid to filter scan information
;;;645      * @param[in] uuid 16 bit UUID.
;;;646      * @param[in] scan_info point to scan information data.
;;;647      * @return filter result
;;;648      * @retval true found success
;;;649      * @retval false not found
;;;650      */
;;;651    bool filter_scan_info_by_uuid(uint16_t uuid, T_LE_SCAN_INFO *scan_info)
;;;652    {
;;;653        uint8_t buffer[32];
;;;654        uint8_t pos = 0;
;;;655    
;;;656        while (pos < scan_info->data_len)
;;;657        {
;;;658            /* Length of the AD structure. */
;;;659            uint8_t length = scan_info->data[pos++];
;;;660            uint8_t type;
;;;661    
;;;662            if ((length > 0x01) && ((pos + length) <= 31))
;;;663            {
;;;664                /* Copy the AD Data to buffer. */
;;;665                memcpy(buffer, scan_info->data + pos + 1, length - 1);
;;;666                /* AD Type, one octet. */
;;;667                type = scan_info->data[pos];
;;;668    
;;;669                switch (type)
;;;670                {
;;;671                case GAP_ADTYPE_16BIT_MORE:
;;;672                case GAP_ADTYPE_16BIT_COMPLETE:
;;;673                case GAP_ADTYPE_SERVICES_LIST_16BIT:
;;;674                    {
;;;675                        uint16_t *p_uuid = (uint16_t *)(buffer);
;;;676                        uint8_t i = length - 1;
;;;677    
;;;678                        while (i >= 2)
;;;679                        {
;;;680                            APP_PRINT_INFO2("  AD Data: UUID16 List Item %d = 0x%x", i / 2, *p_uuid);
;;;681    						//data_uart_print("  AD Data: UUID16 List Item %d = 0x%x\r\n", i / 2, *p_uuid);
;;;682                            if (*p_uuid == uuid)
;;;683                            {
;;;684                                return true;
;;;685                            }
;;;686                            p_uuid++;
;;;687                            i -= 2;
;;;688                        }
;;;689                    }
;;;690                    break;
;;;691    
;;;692                default:
;;;693                    break;
;;;694                }
;;;695            }
;;;696    
;;;697            pos += length;
;;;698        }
;;;699        return false;
;;;700    }
;;;701    /** @} */ /* End of group CENTRAL_SCAN_MGR */
;;;702    
;;;703    /** @defgroup  CENTRAL_GAP_CALLBACK GAP Callback Event Handler
;;;704        * @brief Handle GAP callback event
;;;705        * @{
;;;706        */
;;;707    /**
;;;708      * @brief Callback for gap le to notify app
;;;709      * @param[in] cb_type callback msy type @ref GAP_LE_MSG_Types.
;;;710      * @param[in] p_cb_data point to callback data @ref T_LE_CB_DATA.
;;;711      * @retval result @ref T_APP_RESULT
;;;712      */
;;;713    T_APP_RESULT app_gap_callback(uint8_t cb_type, void *p_cb_data)
;;;714    {
;;;715        T_APP_RESULT result = APP_RESULT_SUCCESS;
;;;716        T_LE_CB_DATA *p_data = (T_LE_CB_DATA *)p_cb_data;
;;;717    
;;;718    	uint8_t devname[]="CMT4501-a11005e2";
;;;719    
;;;720        switch (cb_type)
;;;721        {
;;;722        case GAP_MSG_LE_SCAN_INFO:
;;;723            APP_PRINT_INFO5("GAP_MSG_LE_SCAN_INFO:adv_type 0x%x, bd_addr %s, remote_addr_type %d, rssi %d, data_len %d",
;;;724                            p_data->p_le_scan_info->adv_type,
;;;725                            TRACE_BDADDR(p_data->p_le_scan_info->bd_addr),
;;;726                            p_data->p_le_scan_info->remote_addr_type,
;;;727                            p_data->p_le_scan_info->rssi,
;;;728                            p_data->p_le_scan_info->data_len);
;;;729            /* User can split interested information by using the function as follow. */
;;;730    
;;;731    #if 1
;;;732    		//app_parse_scan_info(p_data->p_le_scan_info);
;;;733    		if (filter_scan_info_by_name(devname, p_data->p_le_scan_info))
;;;734            {
;;;735                //data_uart_print("Found simple ble service\r\n");
;;;736                link_mgr_add_device(p_data->p_le_scan_info->bd_addr, p_data->p_le_scan_info->remote_addr_type);
;;;737            }
;;;738    #endif
;;;739    
;;;740            if (filter_scan_info_by_uuid(GATT_UUID_SIMPLE_PROFILE, p_data->p_le_scan_info))
;;;741            {
;;;742                APP_PRINT_INFO0("Found simple ble service");
;;;743                link_mgr_add_device(p_data->p_le_scan_info->bd_addr, p_data->p_le_scan_info->remote_addr_type);
;;;744            }
;;;745            /* If you want to parse the scan info, please reference function app_parse_scan_info in observer app. */
;;;746            break;
;;;747    
;;;748        case GAP_MSG_LE_CONN_UPDATE_IND:
;;;749            APP_PRINT_INFO5("GAP_MSG_LE_CONN_UPDATE_IND: conn_id %d, conn_interval_max 0x%x, conn_interval_min 0x%x, conn_latency 0x%x,supervision_timeout 0x%x",
;;;750                            p_data->p_le_conn_update_ind->conn_id,
;;;751                            p_data->p_le_conn_update_ind->conn_interval_max,
;;;752                            p_data->p_le_conn_update_ind->conn_interval_min,
;;;753                            p_data->p_le_conn_update_ind->conn_latency,
;;;754                            p_data->p_le_conn_update_ind->supervision_timeout);
;;;755            /* if reject the proposed connection parameter from peer device, use APP_RESULT_REJECT. */
;;;756            result = APP_RESULT_ACCEPT;
;;;757            break;
;;;758    
;;;759        default:
;;;760            APP_PRINT_ERROR1("app_gap_callback: unhandled cb_type 0x%x", cb_type);
;;;761            break;
;;;762        }
;;;763        return result;
;;;764    }
;;;765    /** @} */ /* End of group CENTRAL_GAP_CALLBACK */
;;;766    
;;;767    /** @defgroup  CENTRAL_SRV_DIS GATT Services discovery and storage
;;;768        * @brief GATT Services discovery and storage
;;;769        * @{
;;;770        */
;;;771    /**
;;;772     * @brief  Discovery GATT services
;;;773     * @param  conn_id connection ID.
;;;774     * @param  start first call. true - first call this function after conncection, false - not first
;;;775     * @retval None
;;;776     */
;;;777    void app_discov_services(uint8_t conn_id, bool start)
;;;778    {
        0x00209dcc:    b538        8.      PUSH     {r3-r5,lr}
        0x00209dce:    4604        .F      MOV      r4,r0
;;;779        if (app_link_table[conn_id].conn_state != GAP_CONN_STATE_CONNECTED)
        0x00209dd0:    4ab5        .J      LDR      r2,[pc,#724] ; [0x20a0a8] = 0x20d2ab
        0x00209dd2:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x00209dd6:    4db2        .M      LDR      r5,[pc,#712] ; [0x20a0a0] = 0x21103002
        0x00209dd8:    f8123010    ...0    LDRB     r3,[r2,r0,LSL #1]
        0x00209ddc:    1ead        ..      SUBS     r5,r5,#2
        0x00209dde:    2b02        .+      CMP      r3,#2
        0x00209de0:    d003        ..      BEQ      0x209dea ; app_discov_services + 30
;;;780        {
;;;781            APP_PRINT_ERROR1("app_discov_services: conn_id %d not connected ", conn_id);
        0x00209de2:    4623        #F      MOV      r3,r4
        0x00209de4:    2201        ."      MOVS     r2,#1
        0x00209de6:    49c8        .I      LDR      r1,[pc,#800] ; [0x20a108] = 0x8801c88
;;;782            return;
        0x00209de8:    e024        $.      B        0x209e34 ; app_discov_services + 104
;;;783        }
;;;784        if (start)
        0x00209dea:    b149        I.      CBZ      r1,0x209e00 ; app_discov_services + 52
;;;785        {
;;;786    #if F_BT_GATT_SRV_HANDLE_STORAGE
;;;787            bool is_disc = true;
;;;788            T_APP_SRVS_HDL_TABLE app_srvs_table;
;;;789            if (app_load_srvs_hdl_table(&app_srvs_table) == 0)
;;;790            {
;;;791                if ((app_srvs_table.srv_found_flags != 0) &&
;;;792                    (app_srvs_table.bd_type == app_link_table[conn_id].bd_type) &&
;;;793                    (memcmp(app_srvs_table.bd_addr, app_link_table[conn_id].bd_addr, GAP_BD_ADDR_LEN) == 0))
;;;794                {
;;;795                    APP_PRINT_INFO1("app_discov_services: load from flash, srv_found_flags 0x%x",
;;;796                                    app_srvs_table.srv_found_flags);
;;;797                    app_link_table[conn_id].srv_found_flags = app_srvs_table.srv_found_flags;
;;;798                    if (app_srvs_table.srv_found_flags & APP_DISCOV_GAPS_FLAG)
;;;799                    {
;;;800                        gaps_set_hdl_cache(conn_id, app_srvs_table.gaps_hdl_cache, sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;801                    }
;;;802                    if (app_srvs_table.srv_found_flags & APP_DISCOV_SIMP_FLAG)
;;;803                    {
;;;804                        simp_ble_client_set_hdl_cache(conn_id, app_srvs_table.simp_hdl_cache,
;;;805                                                      sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN);
;;;806                    }
;;;807                    if (app_srvs_table.srv_found_flags & APP_DISCOV_BAS_FLAG)
;;;808                    {
;;;809                        bas_set_hdl_cache(conn_id, app_srvs_table.bas_hdl_cache, sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;810                    }
;;;811                    is_disc = false;
;;;812                }
;;;813            }
;;;814            else
;;;815            {
;;;816                APP_PRINT_ERROR0("app_load_srvs_hdl_table: failed");
;;;817            }
;;;818    
;;;819            if (is_disc)
;;;820            {
;;;821                if (gaps_start_discovery(conn_id) == false)
;;;822                {
;;;823                    APP_PRINT_ERROR1("app_discov_services: discover gaps failed conn_id %d", conn_id);
;;;824                }
;;;825            }
;;;826    #else
;;;827            if (gaps_start_discovery(conn_id) == false)
        0x00209dec:    4620         F      MOV      r0,r4
        0x00209dee:    f7fffa49    ..I.    BL       gaps_start_discovery ; 0x209284
        0x00209df2:    2800        .(      CMP      r0,#0
        0x00209df4:    d12d        -.      BNE      0x209e52 ; app_discov_services + 134
;;;828            {
;;;829                APP_PRINT_ERROR1("app_discov_services: discover gaps failed conn_id %d", conn_id);
        0x00209df6:    49c4        .I      LDR      r1,[pc,#784] ; [0x20a108] = 0x8801c88
        0x00209df8:    2201        ."      MOVS     r2,#1
        0x00209dfa:    4623        #F      MOV      r3,r4
        0x00209dfc:    3134        41      ADDS     r1,r1,#0x34
        0x00209dfe:    e019        ..      B        0x209e34 ; app_discov_services + 104
;;;830            }
;;;831    #endif
;;;832            return;
;;;833        }
;;;834        if ((app_link_table[conn_id].discovered_flags & APP_DISCOV_SIMP_FLAG) == 0)
        0x00209e00:    eb020140    ..@.    ADD      r1,r2,r0,LSL #1
        0x00209e04:    784a        Jx      LDRB     r2,[r1,#1]
        0x00209e06:    0790        ..      LSLS     r0,r2,#30
        0x00209e08:    d409        ..      BMI      0x209e1e ; app_discov_services + 82
;;;835        {
;;;836            if (simp_ble_client_start_discovery(conn_id) == false)
        0x00209e0a:    4620         F      MOV      r0,r4
        0x00209e0c:    f7fefb22    ..".    BL       simp_ble_client_start_discovery ; 0x208454
        0x00209e10:    2800        .(      CMP      r0,#0
        0x00209e12:    d11e        ..      BNE      0x209e52 ; app_discov_services + 134
;;;837            {
;;;838                APP_PRINT_ERROR1("app_discov_services: discover simp failed conn_id %d", conn_id);
        0x00209e14:    49bc        .I      LDR      r1,[pc,#752] ; [0x20a108] = 0x8801c88
        0x00209e16:    2201        ."      MOVS     r2,#1
        0x00209e18:    4623        #F      MOV      r3,r4
        0x00209e1a:    316c        l1      ADDS     r1,r1,#0x6c
        0x00209e1c:    e00a        ..      B        0x209e34 ; app_discov_services + 104
;;;839            }
;;;840        }
;;;841        else if ((app_link_table[conn_id].discovered_flags & APP_DISCOV_BAS_FLAG) == 0)
        0x00209e1e:    0750        P.      LSLS     r0,r2,#29
        0x00209e20:    d40e        ..      BMI      0x209e40 ; app_discov_services + 116
;;;842        {
;;;843            if (bas_start_discovery(conn_id) == false)
        0x00209e22:    4620         F      MOV      r0,r4
        0x00209e24:    f7feff66    ..f.    BL       bas_start_discovery ; 0x208cf4
        0x00209e28:    2800        .(      CMP      r0,#0
        0x00209e2a:    d112        ..      BNE      0x209e52 ; app_discov_services + 134
;;;844            {
;;;845                APP_PRINT_ERROR1("app_discov_services: discover bas failed conn_id %d", conn_id);
        0x00209e2c:    49b6        .I      LDR      r1,[pc,#728] ; [0x20a108] = 0x8801c88
        0x00209e2e:    2201        ."      MOVS     r2,#1
        0x00209e30:    4623        #F      MOV      r3,r4
        0x00209e32:    31a4        .1      ADDS     r1,r1,#0xa4
        0x00209e34:    b001        ..      ADD      sp,sp,#4
        0x00209e36:    4628        (F      MOV      r0,r5
        0x00209e38:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x00209e3c:    f5fdbe0f    ....    B        log_buffer ; 0x7a5e
;;;846            }
;;;847        }
;;;848        else
;;;849        {
;;;850            APP_PRINT_INFO2("app_discov_services: discover complete, conn_id %d, srv_found_flags 0x%x",
        0x00209e40:    7888        .x      LDRB     r0,[r1,#2]
        0x00209e42:    49b1        .I      LDR      r1,[pc,#708] ; [0x20a108] = 0x8801c88
        0x00209e44:    9000        ..      STR      r0,[sp,#0]
        0x00209e46:    4623        #F      MOV      r3,r4
        0x00209e48:    2202        ."      MOVS     r2,#2
        0x00209e4a:    31dc        .1      ADDS     r1,r1,#0xdc
        0x00209e4c:    4894        .H      LDR      r0,[pc,#592] ; [0x20a0a0] = 0x21103002
        0x00209e4e:    f5fdfe06    ....    BL       log_buffer ; 0x7a5e
;;;851                            conn_id, app_link_table[conn_id].srv_found_flags);
;;;852    #if F_BT_GATT_SRV_HANDLE_STORAGE
;;;853            if (app_link_table[conn_id].srv_found_flags != 0)
;;;854            {
;;;855                T_APP_SRVS_HDL_TABLE app_srvs_table;
;;;856                memset(&app_srvs_table, 0, sizeof(T_APP_SRVS_HDL_TABLE));
;;;857                app_srvs_table.bd_type = app_link_table[conn_id].bd_type;
;;;858                app_srvs_table.srv_found_flags = app_link_table[conn_id].srv_found_flags;
;;;859                memcpy(app_srvs_table.bd_addr, app_link_table[conn_id].bd_addr, GAP_BD_ADDR_LEN);
;;;860                gaps_get_hdl_cache(conn_id, app_srvs_table.gaps_hdl_cache, sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;861                simp_ble_client_get_hdl_cache(conn_id, app_srvs_table.simp_hdl_cache,
;;;862                                              sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN);
;;;863                bas_get_hdl_cache(conn_id, app_srvs_table.bas_hdl_cache, sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;864                if (app_save_srvs_hdl_table(&app_srvs_table) != 0)
;;;865                {
;;;866                    APP_PRINT_ERROR0("app_save_srvs_hdl_table: failed");
;;;867                }
;;;868            }
;;;869    #endif
;;;870        }
;;;871    
;;;872        return;
;;;873    }
        0x00209e52:    bd38        8.      POP      {r3-r5,pc}
    app_handle_conn_mtu_info_evt
        0x00209e54:    b538        8.      PUSH     {r3-r5,lr}
        0x00209e56:    4604        .F      MOV      r4,r0
        0x00209e58:    9100        ..      STR      r1,[sp,#0]
        0x00209e5a:    4992        .I      LDR      r1,[pc,#584] ; [0x20a0a4] = 0x8801828
        0x00209e5c:    4603        .F      MOV      r3,r0
        0x00209e5e:    2202        ."      MOVS     r2,#2
        0x00209e60:    3134        41      ADDS     r1,r1,#0x34
        0x00209e62:    488f        .H      LDR      r0,[pc,#572] ; [0x20a0a0] = 0x21103002
        0x00209e64:    f5fdfdfb    ....    BL       log_buffer ; 0x7a5e
        0x00209e68:    4620         F      MOV      r0,r4
        0x00209e6a:    e8bd4038    ..8@    POP      {r3-r5,lr}
        0x00209e6e:    2101        .!      MOVS     r1,#1
        0x00209e70:    e7ac        ..      B        app_discov_services ; 0x209dcc
    app_handle_conn_state_evt
;;; ..\..\..\src\sample\ble_central\central_app.c (141)
        0x00209e72:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x00209e76:    f5ad7d04    ...}    SUB      sp,sp,#0x210
        0x00209e7a:    4615        .F      MOV      r5,r2
        0x00209e7c:    460e        .F      MOV      r6,r1
        0x00209e7e:    4607        .F      MOV      r7,r0
        0x00209e80:    2804        .(      CMP      r0,#4
        0x00209e82:    d232        2.      BCS      0x209eea ; app_handle_conn_state_evt + 120
;;;142    	char cmd_buffer[FRAMING_PAYLOAD_MAX_LENGTH];
;;;143        if (conn_id >= APP_MAX_LINKS)
;;;144        {
;;;145            return;
;;;146        }
;;;147    
;;;148        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d, conn_state(%d -> %d), disc_cause 0x%x",
        0x00209e84:    f8df8220    .. .    LDR      r8,[pc,#544] ; [0x20a0a8] = 0x20d2ab
        0x00209e88:    eb070487    ....    ADD      r4,r7,r7,LSL #2
        0x00209e8c:    4983        .I      LDR      r1,[pc,#524] ; [0x20a09c] = 0x8801724
        0x00209e8e:    f8180014    ....    LDRB     r0,[r8,r4,LSL #1]
        0x00209e92:    e9cd0600    ....    STRD     r0,r6,[sp,#0]
        0x00209e96:    463b        ;F      MOV      r3,r7
        0x00209e98:    2204        ."      MOVS     r2,#4
        0x00209e9a:    3998        .9      SUBS     r1,r1,#0x98
        0x00209e9c:    9502        ..      STR      r5,[sp,#8]
        0x00209e9e:    4880        .H      LDR      r0,[pc,#512] ; [0x20a0a0] = 0x21103002
        0x00209ea0:    f5fdfddd    ....    BL       log_buffer ; 0x7a5e
        0x00209ea4:    f8086014    ...`    STRB     r6,[r8,r4,LSL #1]
        0x00209ea8:    4640        @F      MOV      r0,r8
        0x00209eaa:    eb000444    ..D.    ADD      r4,r0,r4,LSL #1
;;;149                        conn_id, app_link_table[conn_id].conn_state, new_state, disc_cause);
;;;150    
;;;151        app_link_table[conn_id].conn_state = new_state;
;;;152        switch (new_state)
        0x00209eae:    b306        ..      CBZ      r6,0x209ef2 ; app_handle_conn_state_evt + 128
        0x00209eb0:    2e02        ..      CMP      r6,#2
        0x00209eb2:    d11a        ..      BNE      0x209eea ; app_handle_conn_state_evt + 120
        0x00209eb4:    1ce2        ..      ADDS     r2,r4,#3
        0x00209eb6:    1d21        !.      ADDS     r1,r4,#4
        0x00209eb8:    4638        8F      MOV      r0,r7
        0x00209eba:    f643fe98    C...    BL       le_get_conn_addr ; 0x4dbee
        0x00209ebe:    79e0        .y      LDRB     r0,[r4,#7]
        0x00209ec0:    ad01        ..      ADD      r5,sp,#4
        0x00209ec2:    7923        #y      LDRB     r3,[r4,#4]
        0x00209ec4:    7962        by      LDRB     r2,[r4,#5]
        0x00209ec6:    79a1        .y      LDRB     r1,[r4,#6]
        0x00209ec8:    e885000f    ....    STM      r5,{r0-r3}
        0x00209ecc:    7a20         z      LDRB     r0,[r4,#8]
        0x00209ece:    9000        ..      STR      r0,[sp,#0]
        0x00209ed0:    7a63        cz      LDRB     r3,[r4,#9]
        0x00209ed2:    463a        :F      MOV      r2,r7
        0x00209ed4:    a18d        ..      ADR      r1,{pc}+0x238 ; 0x20a10c
        0x00209ed6:    a805        ..      ADD      r0,sp,#0x14
        0x00209ed8:    f012fb82    ....    BL       __2sprintf ; 0x21c5e0
        0x00209edc:    a805        ..      ADD      r0,sp,#0x14
        0x00209ede:    f64fffbd    O...    BL       strlen ; 0x59e5c
        0x00209ee2:    b281        ..      UXTH     r1,r0
        0x00209ee4:    a805        ..      ADD      r0,sp,#0x14
        0x00209ee6:    f000fe80    ....    BL       FramingWrapFrameUartPrint ; 0x20abea
        0x00209eea:    f50d7d04    ...}    ADD      sp,sp,#0x210
        0x00209eee:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;153        {
;;;154        case GAP_CONN_STATE_DISCONNECTED:
;;;155            {
;;;156                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
        0x00209ef2:    f5a57080    ...p    SUB      r0,r5,#0x100
        0x00209ef6:    3813        .8      SUBS     r0,r0,#0x13
        0x00209ef8:    d00b        ..      BEQ      0x209f12 ; app_handle_conn_state_evt + 160
;;;157                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
        0x00209efa:    f5b57f8b    ....    CMP      r5,#0x116
        0x00209efe:    d008        ..      BEQ      0x209f12 ; app_handle_conn_state_evt + 160
;;;158                {
;;;159                    APP_PRINT_ERROR2("app_handle_conn_state_evt: connection lost, conn_id %d, cause 0x%x", conn_id,
        0x00209f00:    4966        fI      LDR      r1,[pc,#408] ; [0x20a09c] = 0x8801724
        0x00209f02:    4867        gH      LDR      r0,[pc,#412] ; [0x20a0a0] = 0x21103002
        0x00209f04:    463b        ;F      MOV      r3,r7
        0x00209f06:    2202        ."      MOVS     r2,#2
        0x00209f08:    3948        H9      SUBS     r1,r1,#0x48
        0x00209f0a:    1e80        ..      SUBS     r0,r0,#2
        0x00209f0c:    9500        ..      STR      r5,[sp,#0]
        0x00209f0e:    f5fdfda6    ....    BL       log_buffer ; 0x7a5e
;;;160                                     disc_cause);
;;;161                }
;;;162    #if 0 //by vsop	
;;;163               data_uart_print("#disc#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;164    						conn_id,
;;;165    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;166    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;167    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;168    #else
;;;169    			sprintf(cmd_buffer,"#disc#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
        0x00209f12:    79e0        .y      LDRB     r0,[r4,#7]
        0x00209f14:    ad01        ..      ADD      r5,sp,#4
        0x00209f16:    7923        #y      LDRB     r3,[r4,#4]
        0x00209f18:    7962        by      LDRB     r2,[r4,#5]
        0x00209f1a:    79a1        .y      LDRB     r1,[r4,#6]
        0x00209f1c:    e885000f    ....    STM      r5,{r0-r3}
        0x00209f20:    7a20         z      LDRB     r0,[r4,#8]
        0x00209f22:    9000        ..      STR      r0,[sp,#0]
        0x00209f24:    7a63        cz      LDRB     r3,[r4,#9]
        0x00209f26:    463a        :F      MOV      r2,r7
        0x00209f28:    a183        ..      ADR      r1,{pc}+0x210 ; 0x20a138
        0x00209f2a:    a805        ..      ADD      r0,sp,#0x14
        0x00209f2c:    f012fb58    ..X.    BL       __2sprintf ; 0x21c5e0
;;;170    						conn_id,
;;;171    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;172    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;173    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;174    				FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));
        0x00209f30:    a805        ..      ADD      r0,sp,#0x14
        0x00209f32:    f64fff93    O...    BL       strlen ; 0x59e5c
        0x00209f36:    b281        ..      UXTH     r1,r0
        0x00209f38:    a805        ..      ADD      r0,sp,#0x14
        0x00209f3a:    f000fe56    ..V.    BL       FramingWrapFrameUartPrint ; 0x20abea
;;;175    
;;;176    #endif
;;;177                memset(&app_link_table[conn_id], 0, sizeof(T_APP_LINK));
        0x00209f3e:    2000        .       MOVS     r0,#0
        0x00209f40:    6020         `      STR      r0,[r4,#0]
        0x00209f42:    6060        ``      STR      r0,[r4,#4]
        0x00209f44:    8120         .      STRH     r0,[r4,#8]
;;;178            }
;;;179            break;
;;;180    
;;;181        case GAP_CONN_STATE_CONNECTED:
;;;182            {
;;;183            	//T_GAP_CAUSE cause;
;;;184                le_get_conn_addr(conn_id, app_link_table[conn_id].bd_addr,
;;;185                                 &app_link_table[conn_id].bd_type);
;;;186    #if 0 //by vsop			
;;;187               data_uart_print("#condev#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;188    						conn_id,
;;;189    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;190    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;191    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;192    #else
;;;193          sprintf(cmd_buffer,"#condev#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;194    						conn_id,
;;;195    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;196    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;197    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;198    	FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));
;;;199    #endif
;;;200            }
;;;201            break;
;;;202    
;;;203        default:
;;;204            break;
;;;205    
;;;206        }
;;;207    }
        0x00209f46:    e7d0        ..      B        0x209eea ; app_handle_conn_state_evt + 120
    app_handle_dev_state_evt
;;; ..\..\..\src\sample\ble_central\central_app.c (99)
        0x00209f48:    e92d41fc    -..A    PUSH     {r2-r8,lr}
        0x00209f4c:    b2c4        ..      UXTB     r4,r0
;;;100        APP_PRINT_INFO3("app_handle_dev_state_evt: init state  %d, scan state %d, cause 0x%x",
        0x00209f4e:    f3c41501    ....    UBFX     r5,r4,#4,#2
        0x00209f52:    e9cd5100    ...Q    STRD     r5,r1,[sp,#0]
        0x00209f56:    f8df8148    ..H.    LDR      r8,[pc,#328] ; [0x20a0a0] = 0x21103002
        0x00209f5a:    f0040601    ....    AND      r6,r4,#1
        0x00209f5e:    4633        3F      MOV      r3,r6
        0x00209f60:    2203        ."      MOVS     r2,#3
        0x00209f62:    4980        .I      LDR      r1,[pc,#512] ; [0x20a164] = 0x8801608
        0x00209f64:    4640        @F      MOV      r0,r8
        0x00209f66:    f5fdfd7a    ..z.    BL       log_buffer ; 0x7a5e
;;;101                        new_state.gap_init_state,
;;;102                        new_state.gap_scan_state, cause);
;;;103        if (gap_dev_state.gap_init_state != new_state.gap_init_state)
        0x00209f6a:    4f7f        .O      LDR      r7,[pc,#508] ; [0x20a168] = 0x20d27c
        0x00209f6c:    7838        8x      LDRB     r0,[r7,#0]
        0x00209f6e:    f0000001    ....    AND      r0,r0,#1
        0x00209f72:    42b0        .B      CMP      r0,r6
        0x00209f74:    d00c        ..      BEQ      0x209f90 ; app_handle_dev_state_evt + 72
;;;104        {
;;;105            if (new_state.gap_init_state == GAP_INIT_STATE_STACK_READY)
        0x00209f76:    07e0        ..      LSLS     r0,r4,#31
        0x00209f78:    d00a        ..      BEQ      0x209f90 ; app_handle_dev_state_evt + 72
;;;106            {
;;;107                uint8_t bt_addr[6];
;;;108                APP_PRINT_INFO0("GAP stack ready");
        0x00209f7a:    497a        zI      LDR      r1,[pc,#488] ; [0x20a164] = 0x8801608
        0x00209f7c:    2200        ."      MOVS     r2,#0
        0x00209f7e:    3148        H1      ADDS     r1,r1,#0x48
        0x00209f80:    4640        @F      MOV      r0,r8
        0x00209f82:    f5fdfd6c    ..l.    BL       log_buffer ; 0x7a5e
;;;109                /*stack ready*/
;;;110                gap_get_param(GAP_PARAM_BD_ADDR, bt_addr);
        0x00209f86:    4669        iF      MOV      r1,sp
        0x00209f88:    f44f7000    O..p    MOV      r0,#0x200
        0x00209f8c:    f642f853    B.S.    BL       gap_get_param ; 0x4c036
;;;111            }
;;;112        }
;;;113    
;;;114        if (gap_dev_state.gap_scan_state != new_state.gap_scan_state)
        0x00209f90:    7838        8x      LDRB     r0,[r7,#0]
        0x00209f92:    f3c01001    ....    UBFX     r0,r0,#4,#2
        0x00209f96:    42a8        .B      CMP      r0,r5
        0x00209f98:    d00f        ..      BEQ      0x209fba ; app_handle_dev_state_evt + 114
;;;115        {
;;;116            if (new_state.gap_scan_state == GAP_SCAN_STATE_IDLE)
        0x00209f9a:    f0140f30    ..0.    TST      r4,#0x30
        0x00209f9e:    d002        ..      BEQ      0x209fa6 ; app_handle_dev_state_evt + 94
        0x00209fa0:    2d02        .-      CMP      r5,#2
        0x00209fa2:    d004        ..      BEQ      0x209fae ; app_handle_dev_state_evt + 102
        0x00209fa4:    e009        ..      B        0x209fba ; app_handle_dev_state_evt + 114
;;;117            {
;;;118                APP_PRINT_INFO0("GAP scan stop");
        0x00209fa6:    496f        oI      LDR      r1,[pc,#444] ; [0x20a164] = 0x8801608
        0x00209fa8:    2200        ."      MOVS     r2,#0
        0x00209faa:    315c        \1      ADDS     r1,r1,#0x5c
        0x00209fac:    e002        ..      B        0x209fb4 ; app_handle_dev_state_evt + 108
;;;119                //data_uart_print("GAP scan stop\r\n"); 	//by vsop
;;;120            }
;;;121            else if (new_state.gap_scan_state == GAP_SCAN_STATE_SCANNING)
;;;122            {
;;;123                APP_PRINT_INFO0("GAP scan start");
        0x00209fae:    496d        mI      LDR      r1,[pc,#436] ; [0x20a164] = 0x8801608
        0x00209fb0:    2200        ."      MOVS     r2,#0
        0x00209fb2:    3170        p1      ADDS     r1,r1,#0x70
        0x00209fb4:    4640        @F      MOV      r0,r8
        0x00209fb6:    f5fdfd52    ..R.    BL       log_buffer ; 0x7a5e
;;;124                //data_uart_print("GAP scan start\r\n");	//by vsop
;;;125            }
;;;126        }
;;;127    
;;;128        gap_dev_state = new_state;
        0x00209fba:    703c        <p      STRB     r4,[r7,#0]
;;;129    }
        0x00209fbc:    e8bd81fc    ....    POP      {r2-r8,pc}
    app_handle_gap_msg
;;;130    
;;;131    /**
;;;132     * @brief    Handle msg GAP_MSG_LE_CONN_STATE_CHANGE
;;;133     * @note     All the gap conn state events are pre-handled in this function.
;;;134     *           Then the event handling function shall be called according to the new_state
;;;135     * @param[in] conn_id Connection ID
;;;136     * @param[in] new_state  New gap connection state
;;;137     * @param[in] disc_cause Use this cause when new_state is GAP_CONN_STATE_DISCONNECTED
;;;138     * @return   void
;;;139     */
;;;140    void app_handle_conn_state_evt(uint8_t conn_id, T_GAP_CONN_STATE new_state, uint16_t disc_cause)
;;;141    {
;;;142    	char cmd_buffer[FRAMING_PAYLOAD_MAX_LENGTH];
;;;143        if (conn_id >= APP_MAX_LINKS)
;;;144        {
;;;145            return;
;;;146        }
;;;147    
;;;148        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d, conn_state(%d -> %d), disc_cause 0x%x",
;;;149                        conn_id, app_link_table[conn_id].conn_state, new_state, disc_cause);
;;;150    
;;;151        app_link_table[conn_id].conn_state = new_state;
;;;152        switch (new_state)
;;;153        {
;;;154        case GAP_CONN_STATE_DISCONNECTED:
;;;155            {
;;;156                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
;;;157                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
;;;158                {
;;;159                    APP_PRINT_ERROR2("app_handle_conn_state_evt: connection lost, conn_id %d, cause 0x%x", conn_id,
;;;160                                     disc_cause);
;;;161                }
;;;162    #if 0 //by vsop	
;;;163               data_uart_print("#disc#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;164    						conn_id,
;;;165    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;166    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;167    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;168    #else
;;;169    			sprintf(cmd_buffer,"#disc#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;170    						conn_id,
;;;171    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;172    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;173    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;174    				FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));
;;;175    
;;;176    #endif
;;;177                memset(&app_link_table[conn_id], 0, sizeof(T_APP_LINK));
;;;178            }
;;;179            break;
;;;180    
;;;181        case GAP_CONN_STATE_CONNECTED:
;;;182            {
;;;183            	//T_GAP_CAUSE cause;
;;;184                le_get_conn_addr(conn_id, app_link_table[conn_id].bd_addr,
;;;185                                 &app_link_table[conn_id].bd_type);
;;;186    #if 0 //by vsop			
;;;187               data_uart_print("#condev#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;188    						conn_id,
;;;189    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;190    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;191    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;192    #else
;;;193          sprintf(cmd_buffer,"#condev#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;194    						conn_id,
;;;195    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;196    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;197    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;198    	FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));
;;;199    #endif
;;;200            }
;;;201            break;
;;;202    
;;;203        default:
;;;204            break;
;;;205    
;;;206        }
;;;207    }
;;;208    
;;;209    /**
;;;210     * @brief    Handle msg GAP_MSG_LE_AUTHEN_STATE_CHANGE
;;;211     * @note     All the gap authentication state events are pre-handled in this function.
;;;212     *           Then the event handling function shall be called according to the new_state
;;;213     * @param[in] conn_id Connection ID
;;;214     * @param[in] new_state  New authentication state
;;;215     * @param[in] cause Use this cause when new_state is GAP_AUTHEN_STATE_COMPLETE
;;;216     * @return   void
;;;217     */
;;;218    void app_handle_authen_state_evt(uint8_t conn_id, uint8_t new_state, uint16_t cause)
;;;219    {
;;;220    	char cmd_buffer[FRAMING_PAYLOAD_MAX_LENGTH];
;;;221    
;;;222        APP_PRINT_INFO2("app_handle_authen_state_evt:conn_id %d, cause 0x%x", conn_id, cause);
;;;223    
;;;224        switch (new_state)
;;;225        {
;;;226        case GAP_AUTHEN_STATE_STARTED:
;;;227            {
;;;228                APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_STARTED");
;;;229            }
;;;230            break;
;;;231    
;;;232        case GAP_AUTHEN_STATE_COMPLETE:
;;;233            {
;;;234                if (cause == GAP_SUCCESS)
;;;235                {
;;;236    #if 0 //by vsop            
;;;237    				data_uart_print("#sauth#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;238    					conn_id,
;;;239    					app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;240    					app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;241    					app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;242    #else
;;;243    			sprintf(cmd_buffer,"#sauth#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;244    					conn_id,
;;;245    					app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;246    					app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;247    					app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;248    			FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));	
;;;249    #endif
;;;250                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair success");
;;;251    
;;;252                }
;;;253                else
;;;254                {
;;;255    #if 0 //by vsop            
;;;256                   	data_uart_print("#sauth#!%d![%02x%02x%02x%02x%02x%02x]<N>\r\n",
;;;257    						conn_id,
;;;258    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;259    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;260    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;261    #else
;;;262    					sprintf(cmd_buffer,"#sauth#!%d![%02x%02x%02x%02x%02x%02x]<N>\r\n",
;;;263    						conn_id,
;;;264    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;265    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;266    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;267    					FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));	
;;;268    #endif            
;;;269                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair failed");
;;;270                }
;;;271            }
;;;272            break;
;;;273    
;;;274        default:
;;;275            {
;;;276                APP_PRINT_ERROR1("app_handle_authen_state_evt: unknown newstate %d", new_state);
;;;277            }
;;;278            break;
;;;279        }
;;;280    }
;;;281    
;;;282    /**
;;;283     * @brief    Handle msg GAP_MSG_LE_CONN_MTU_INFO
;;;284     * @note     This msg is used to inform APP that exchange mtu procedure is completed.
;;;285     * @param[in] conn_id Connection ID
;;;286     * @param[in] mtu_size  New mtu size
;;;287     * @return   void
;;;288     */
;;;289    void app_handle_conn_mtu_info_evt(uint8_t conn_id, uint16_t mtu_size)
;;;290    {
;;;291        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
;;;292        app_discov_services(conn_id, true);
;;;293    }
;;;294    
;;;295    /**
;;;296     * @brief    Handle msg GAP_MSG_LE_CONN_PARAM_UPDATE
;;;297     * @note     All the connection parameter update change  events are pre-handled in this function.
;;;298     * @param[in] conn_id Connection ID
;;;299     * @param[in] status  New update state
;;;300     * @param[in] cause Use this cause when status is GAP_CONN_PARAM_UPDATE_STATUS_FAIL
;;;301     * @return   void
;;;302     */
;;;303    void app_handle_conn_param_update_evt(uint8_t conn_id, uint8_t status, uint16_t cause)
;;;304    {
;;;305        switch (status)
;;;306        {
;;;307        case GAP_CONN_PARAM_UPDATE_STATUS_SUCCESS:
;;;308            {
;;;309                uint16_t conn_interval;
;;;310                uint16_t conn_slave_latency;
;;;311                uint16_t conn_supervision_timeout;
;;;312    
;;;313                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;314                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_slave_latency, conn_id);
;;;315                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;316                APP_PRINT_INFO4("app_handle_conn_param_update_evt update success:conn_id %d, conn_interval 0x%x, conn_slave_latency 0x%x, conn_supervision_timeout 0x%x",
;;;317                                conn_id, conn_interval, conn_slave_latency, conn_supervision_timeout);
;;;318            }
;;;319            break;
;;;320    
;;;321        case GAP_CONN_PARAM_UPDATE_STATUS_FAIL:
;;;322            {
;;;323                APP_PRINT_ERROR2("app_handle_conn_param_update_evt update failed: conn_id %d, cause 0x%x",
;;;324                                 conn_id, cause);
;;;325            }
;;;326            break;
;;;327    
;;;328        case GAP_CONN_PARAM_UPDATE_STATUS_PENDING:
;;;329            {
;;;330                APP_PRINT_INFO1("app_handle_conn_param_update_evt update pending: conn_id %d", conn_id);
;;;331            }
;;;332            break;
;;;333    
;;;334        default:
;;;335            break;
;;;336        }
;;;337    }
;;;338    
;;;339    /**
;;;340     * @brief    All the BT GAP MSG are pre-handled in this function.
;;;341     * @note     Then the event handling function shall be called according to the
;;;342     *           subtype of T_IO_MSG
;;;343     * @param[in] p_gap_msg Pointer to GAP msg
;;;344     * @return   void
;;;345     */
;;;346    void app_handle_gap_msg(T_IO_MSG *p_gap_msg)
;;;347    {
        0x00209fc0:    b57f        ..      PUSH     {r0-r6,lr}
        0x00209fc2:    4605        .F      MOV      r5,r0
;;;348        T_LE_GAP_MSG gap_msg;
;;;349        uint8_t conn_id;
;;;350        memcpy(&gap_msg, &p_gap_msg->u.param, sizeof(p_gap_msg->u.param));
;;;351    
;;;352        APP_PRINT_TRACE1("app_handle_gap_msg: subtype %d", p_gap_msg->subtype);
        0x00209fc4:    8843        C.      LDRH     r3,[r0,#2]
        0x00209fc6:    6844        Dh      LDR      r4,[r0,#4]
        0x00209fc8:    494e        NI      LDR      r1,[pc,#312] ; [0x20a104] = 0x8801970
        0x00209fca:    4835        5H      LDR      r0,[pc,#212] ; [0x20a0a0] = 0x21103002
        0x00209fcc:    2201        ."      MOVS     r2,#1
        0x00209fce:    3140        @1      ADDS     r1,r1,#0x40
        0x00209fd0:    1c40        @.      ADDS     r0,r0,#1
        0x00209fd2:    f5fdfd44    ..D.    BL       log_buffer ; 0x7a5e
;;;353        switch (p_gap_msg->subtype)
        0x00209fd6:    886b        k.      LDRH     r3,[r5,#2]
        0x00209fd8:    2000        .       MOVS     r0,#0
        0x00209fda:    4d31        1M      LDR      r5,[pc,#196] ; [0x20a0a0] = 0x21103002
        0x00209fdc:    2b0b        .+      CMP      r3,#0xb
        0x00209fde:    d25c        \.      BCS      0x20a09a ; app_handle_gap_msg + 218
        0x00209fe0:    e8dff003    ....    TBB      [pc,r3]
    $d
        0x00209fe4:    1a0c06e4    ....    DCD    436995812
        0x00209fe8:    c4372214    ."7.    DCD    3291947540
        0x00209fec:    002a4bcd    .K*.    DCD    2771917
    $t
;;;354        {
;;;355        case GAP_MSG_LE_DEV_STATE_CHANGE:
;;;356            {
;;;357                app_handle_dev_state_evt(gap_msg.msg_data.gap_dev_state_change.new_state,
        0x00209ff0:    b004        ..      ADD      sp,sp,#0x10
        0x00209ff2:    4620         F      MOV      r0,r4
        0x00209ff4:    0c21        !.      LSRS     r1,r4,#16
        0x00209ff6:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x00209ffa:    e7a5        ..      B        app_handle_dev_state_evt ; 0x209f48
        0x00209ffc:    b004        ..      ADD      sp,sp,#0x10
        0x00209ffe:    0c22        ".      LSRS     r2,r4,#16
        0x0020a000:    f3c42107    ...!    UBFX     r1,r4,#8,#8
        0x0020a004:    b2e0        ..      UXTB     r0,r4
;;;358                                         gap_msg.msg_data.gap_dev_state_change.cause);
;;;359            }
;;;360            break;
;;;361    
;;;362        case GAP_MSG_LE_CONN_STATE_CHANGE:
;;;363            {
;;;364                app_handle_conn_state_evt(gap_msg.msg_data.gap_conn_state_change.conn_id,
        0x0020a006:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020a00a:    e732        2.      B        app_handle_conn_state_evt ; 0x209e72
        0x0020a00c:    b004        ..      ADD      sp,sp,#0x10
        0x0020a00e:    0c21        !.      LSRS     r1,r4,#16
        0x0020a010:    b2e0        ..      UXTB     r0,r4
;;;365                                          (T_GAP_CONN_STATE)gap_msg.msg_data.gap_conn_state_change.new_state,
;;;366                                          gap_msg.msg_data.gap_conn_state_change.disc_cause);
;;;367            }
;;;368            break;
;;;369    
;;;370        case GAP_MSG_LE_CONN_MTU_INFO:
;;;371            {
;;;372                app_handle_conn_mtu_info_evt(gap_msg.msg_data.gap_conn_mtu_info.conn_id,
        0x0020a012:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020a016:    e71d        ..      B        app_handle_conn_mtu_info_evt ; 0x209e54
        0x0020a018:    b004        ..      ADD      sp,sp,#0x10
        0x0020a01a:    0c22        ".      LSRS     r2,r4,#16
        0x0020a01c:    f3c42107    ...!    UBFX     r1,r4,#8,#8
        0x0020a020:    b2e0        ..      UXTB     r0,r4
;;;373                                             gap_msg.msg_data.gap_conn_mtu_info.mtu_size);
;;;374            }
;;;375            break;
;;;376    
;;;377        case GAP_MSG_LE_CONN_PARAM_UPDATE:
;;;378            {
;;;379                app_handle_conn_param_update_evt(gap_msg.msg_data.gap_conn_param_update.conn_id,
        0x0020a022:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020a026:    e692        ..      B        app_handle_conn_param_update_evt ; 0x209d4e
        0x0020a028:    b004        ..      ADD      sp,sp,#0x10
        0x0020a02a:    0c22        ".      LSRS     r2,r4,#16
        0x0020a02c:    f3c42107    ...!    UBFX     r1,r4,#8,#8
        0x0020a030:    b2e0        ..      UXTB     r0,r4
;;;380                                                 gap_msg.msg_data.gap_conn_param_update.status,
;;;381                                                 gap_msg.msg_data.gap_conn_param_update.cause);
;;;382            }
;;;383            break;
;;;384    
;;;385        case GAP_MSG_LE_AUTHEN_STATE_CHANGE:
;;;386            {
;;;387                app_handle_authen_state_evt(gap_msg.msg_data.gap_authen_state.conn_id,
        0x0020a032:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020a036:    e639        9.      B        app_handle_authen_state_evt ; 0x209cac
        0x0020a038:    b2e0        ..      UXTB     r0,r4
;;;388                                            gap_msg.msg_data.gap_authen_state.new_state,
;;;389                                            gap_msg.msg_data.gap_authen_state.status);
;;;390            }
;;;391            break;
;;;392    
;;;393        case GAP_MSG_LE_BOND_JUST_WORK:
;;;394            {
;;;395                conn_id = gap_msg.msg_data.gap_bond_just_work_conf.conn_id;
;;;396                le_bond_just_work_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x0020a03a:    2101        .!      MOVS     r1,#1
        0x0020a03c:    f001fd63    ..c.    BL       le_bond_just_work_confirm ; 0x20bb06
;;;397                APP_PRINT_INFO0("GAP_MSG_LE_BOND_JUST_WORK");
        0x0020a040:    b004        ..      ADD      sp,sp,#0x10
        0x0020a042:    4628        (F      MOV      r0,r5
        0x0020a044:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020a048:    492e        .I      LDR      r1,[pc,#184] ; [0x20a104] = 0x8801970
        0x0020a04a:    2200        ."      MOVS     r2,#0
        0x0020a04c:    3160        `1      ADDS     r1,r1,#0x60
        0x0020a04e:    f5fdbd06    ....    B        log_buffer ; 0x7a5e
;;;398            }
;;;399            break;
;;;400    
;;;401        case GAP_MSG_LE_BOND_PASSKEY_DISPLAY:
;;;402            {
;;;403                uint32_t display_value = 0;
        0x0020a052:    b2e4        ..      UXTB     r4,r4
;;;404                conn_id = gap_msg.msg_data.gap_bond_passkey_display.conn_id;
;;;405                le_bond_get_display_key(conn_id, &display_value);
        0x0020a054:    9001        ..      STR      r0,[sp,#4]
        0x0020a056:    a901        ..      ADD      r1,sp,#4
        0x0020a058:    4620         F      MOV      r0,r4
        0x0020a05a:    f642f9c6    B...    BL       le_bond_get_display_key ; 0x4c3ea
;;;406                APP_PRINT_INFO2("GAP_MSG_LE_BOND_PASSKEY_DISPLAY: conn_id %d, passkey %d",
        0x0020a05e:    9801        ..      LDR      r0,[sp,#4]
        0x0020a060:    4928        (I      LDR      r1,[pc,#160] ; [0x20a104] = 0x8801970
        0x0020a062:    9000        ..      STR      r0,[sp,#0]
        0x0020a064:    4623        #F      MOV      r3,r4
        0x0020a066:    2202        ."      MOVS     r2,#2
        0x0020a068:    3180        .1      ADDS     r1,r1,#0x80
        0x0020a06a:    4628        (F      MOV      r0,r5
        0x0020a06c:    f5fdfcf7    ....    BL       log_buffer ; 0x7a5e
;;;407                                conn_id, display_value);
;;;408                le_bond_passkey_display_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x0020a070:    2101        .!      MOVS     r1,#1
        0x0020a072:    4620         F      MOV      r0,r4
        0x0020a074:    f642f9fe    B...    BL       le_bond_passkey_display_confirm ; 0x4c474
        0x0020a078:    bd7f        ..      POP      {r0-r6,pc}
;;;409    #if 0 //by vsop			
;;;410                data_uart_print("GAP_MSG_LE_BOND_PASSKEY_DISPLAY: conn_id %d, passkey %d\r\n",
;;;411                                conn_id,
;;;412                                display_value);
;;;413    #endif
;;;414            }
;;;415            break;
;;;416    
;;;417        case GAP_MSG_LE_BOND_USER_CONFIRMATION:
;;;418            {
;;;419                uint32_t display_value = 0;
        0x0020a07a:    b2e4        ..      UXTB     r4,r4
;;;420                conn_id = gap_msg.msg_data.gap_bond_user_conf.conn_id;
;;;421                le_bond_get_display_key(conn_id, &display_value);
        0x0020a07c:    9001        ..      STR      r0,[sp,#4]
        0x0020a07e:    a901        ..      ADD      r1,sp,#4
        0x0020a080:    4620         F      MOV      r0,r4
        0x0020a082:    f642f9b2    B...    BL       le_bond_get_display_key ; 0x4c3ea
;;;422                APP_PRINT_INFO2("GAP_MSG_LE_BOND_USER_CONFIRMATION: conn_id %d, passkey %d",
        0x0020a086:    9801        ..      LDR      r0,[sp,#4]
        0x0020a088:    491e        .I      LDR      r1,[pc,#120] ; [0x20a104] = 0x8801970
        0x0020a08a:    9000        ..      STR      r0,[sp,#0]
        0x0020a08c:    4623        #F      MOV      r3,r4
        0x0020a08e:    2202        ."      MOVS     r2,#2
        0x0020a090:    31bc        .1      ADDS     r1,r1,#0xbc
        0x0020a092:    4628        (F      MOV      r0,r5
        0x0020a094:    f5fdfce3    ....    BL       log_buffer ; 0x7a5e
        0x0020a098:    bd7f        ..      POP      {r0-r6,pc}
        0x0020a09a:    e087        ..      B        0x20a1ac ; app_handle_gap_msg + 492
    $d
        0x0020a09c:    08801724    $...    DCD    142612260
        0x0020a0a0:    21103002    .0.!    DCD    554708994
        0x0020a0a4:    08801828    (...    DCD    142612520
        0x0020a0a8:    0020d2ab    .. .    DCD    2151083
        0x0020a0ac:    75617323    #sau    DCD    1969320739
        0x0020a0b0:    21236874    th#!    DCD    555968628
        0x0020a0b4:    5b216425    %d![    DCD    1528914981
        0x0020a0b8:    78323025    %02x    DCD    2016555045
        0x0020a0bc:    78323025    %02x    DCD    2016555045
        0x0020a0c0:    78323025    %02x    DCD    2016555045
        0x0020a0c4:    78323025    %02x    DCD    2016555045
        0x0020a0c8:    78323025    %02x    DCD    2016555045
        0x0020a0cc:    78323025    %02x    DCD    2016555045
        0x0020a0d0:    3e4e3c5d    ]<N>    DCD    1045314653
        0x0020a0d4:    00000a0d    ....    DCD    2573
        0x0020a0d8:    75617323    #sau    DCD    1969320739
        0x0020a0dc:    21236874    th#!    DCD    555968628
        0x0020a0e0:    5b216425    %d![    DCD    1528914981
        0x0020a0e4:    78323025    %02x    DCD    2016555045
        0x0020a0e8:    78323025    %02x    DCD    2016555045
        0x0020a0ec:    78323025    %02x    DCD    2016555045
        0x0020a0f0:    78323025    %02x    DCD    2016555045
        0x0020a0f4:    78323025    %02x    DCD    2016555045
        0x0020a0f8:    78323025    %02x    DCD    2016555045
        0x0020a0fc:    3e593c5d    ]<Y>    DCD    1046035549
        0x0020a100:    00000a0d    ....    DCD    2573
        0x0020a104:    08801970    p...    DCD    142612848
        0x0020a108:    08801c88    ....    DCD    142613640
        0x0020a10c:    6e6f6323    #con    DCD    1852793635
        0x0020a110:    23766564    dev#    DCD    594961764
        0x0020a114:    21642521    !%d!    DCD    560211233
        0x0020a118:    3230255b    [%02    DCD    842016091
        0x0020a11c:    32302578    x%02    DCD    842016120
        0x0020a120:    32302578    x%02    DCD    842016120
        0x0020a124:    32302578    x%02    DCD    842016120
        0x0020a128:    32302578    x%02    DCD    842016120
        0x0020a12c:    32302578    x%02    DCD    842016120
        0x0020a130:    593c5d78    x]<Y    DCD    1497128312
        0x0020a134:    000a0d3e    >...    DCD    658750
        0x0020a138:    73696423    #dis    DCD    1936286755
        0x0020a13c:    25212363    c#!%    DCD    622928739
        0x0020a140:    255b2164    d![%    DCD    626729316
        0x0020a144:    25783230    02x%    DCD    628634160
        0x0020a148:    25783230    02x%    DCD    628634160
        0x0020a14c:    25783230    02x%    DCD    628634160
        0x0020a150:    25783230    02x%    DCD    628634160
        0x0020a154:    25783230    02x%    DCD    628634160
        0x0020a158:    5d783230    02x]    DCD    1568158256
        0x0020a15c:    0d3e593c    <Y>.    DCD    222189884
        0x0020a160:    0000000a    ....    DCD    10
        0x0020a164:    08801608    ....    DCD    142611976
        0x0020a168:    0020d27c    |. .    DCD    2151036
    $t
;;;423                                conn_id, display_value);
;;;424    #if 0 //by vsop			
;;;425                data_uart_print("GAP_MSG_LE_BOND_USER_CONFIRMATION: conn_id %d, passkey %d\r\n",
;;;426                                conn_id,
;;;427                                display_value);
;;;428    #endif
;;;429                //le_bond_user_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;430            }
;;;431            break;
;;;432    
;;;433        case GAP_MSG_LE_BOND_PASSKEY_INPUT:
;;;434            {
;;;435                //uint32_t passkey = 888888;
;;;436                conn_id = gap_msg.msg_data.gap_bond_passkey_input.conn_id;
;;;437                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d", conn_id);
        0x0020a16c:    49fe        .I      LDR      r1,[pc,#1016] ; [0x20a568] = 0x8801a6c
        0x0020a16e:    b2e3        ..      UXTB     r3,r4
        0x0020a170:    2201        ."      MOVS     r2,#1
        0x0020a172:    4628        (F      MOV      r0,r5
        0x0020a174:    b004        ..      ADD      sp,sp,#0x10
        0x0020a176:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0020a17a:    f5fdbc70    ..p.    B        log_buffer ; 0x7a5e
        0x0020a17e:    49fa        .I      LDR      r1,[pc,#1000] ; [0x20a568] = 0x8801a6c
;;;438    #if 0 //by vsop			
;;;439                data_uart_print("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d\r\n", conn_id);
;;;440    #endif
;;;441                //le_bond_passkey_input_confirm(conn_id, passkey, GAP_CFM_CAUSE_ACCEPT);
;;;442            }
;;;443            break;
;;;444    
;;;445        case GAP_MSG_LE_BOND_OOB_INPUT:
;;;446            {
;;;447                uint8_t oob_data[GAP_OOB_LEN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        0x0020a180:    9000        ..      STR      r0,[sp,#0]
        0x0020a182:    9001        ..      STR      r0,[sp,#4]
        0x0020a184:    9002        ..      STR      r0,[sp,#8]
        0x0020a186:    b2e4        ..      UXTB     r4,r4
;;;448                conn_id = gap_msg.msg_data.gap_bond_oob_input.conn_id;
;;;449                APP_PRINT_INFO1("GAP_MSG_LE_BOND_OOB_INPUT: conn_id %d", conn_id);
        0x0020a188:    9003        ..      STR      r0,[sp,#0xc]
        0x0020a18a:    4623        #F      MOV      r3,r4
        0x0020a18c:    2201        ."      MOVS     r2,#1
        0x0020a18e:    3130        01      ADDS     r1,r1,#0x30
        0x0020a190:    4628        (F      MOV      r0,r5
        0x0020a192:    f5fdfc64    ..d.    BL       log_buffer ; 0x7a5e
;;;450                le_bond_set_param(GAP_PARAM_BOND_OOB_DATA, GAP_OOB_LEN, oob_data);
        0x0020a196:    466a        jF      MOV      r2,sp
        0x0020a198:    2110        .!      MOVS     r1,#0x10
        0x0020a19a:    f44f7004    O..p    MOV      r0,#0x210
        0x0020a19e:    f642f826    B.&.    BL       le_bond_set_param ; 0x4c1ee
;;;451                le_bond_oob_input_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
        0x0020a1a2:    2101        .!      MOVS     r1,#1
        0x0020a1a4:    4620         F      MOV      r0,r4
        0x0020a1a6:    f642f906    B...    BL       le_bond_oob_input_confirm ; 0x4c3b6
        0x0020a1aa:    bd7f        ..      POP      {r0-r6,pc}
;;;452            }
;;;453            break;
;;;454    
;;;455        default:
;;;456            APP_PRINT_ERROR1("app_handle_gap_msg: unknown subtype %d", p_gap_msg->subtype);
        0x0020a1ac:    49ee        .I      LDR      r1,[pc,#952] ; [0x20a568] = 0x8801a6c
        0x0020a1ae:    2201        ."      MOVS     r2,#1
        0x0020a1b0:    315c        \1      ADDS     r1,r1,#0x5c
        0x0020a1b2:    48ee        .H      LDR      r0,[pc,#952] ; [0x20a56c] = 0x21103000
;;;457            break;
        0x0020a1b4:    e7de        ..      B        0x20a174 ; app_handle_gap_msg + 436
    app_handle_io_msg
        0x0020a1b6:    b503        ..      PUSH     {r0,r1,lr}
        0x0020a1b8:    b081        ..      SUB      sp,sp,#4
        0x0020a1ba:    f8bd0004    ....    LDRH     r0,[sp,#4]
;;; ..\..\..\src\sample\ble_central\central_app.c (69)
        0x0020a1be:    b160        `.      CBZ      r0,0x20a1da ; app_handle_io_msg + 36
;;;70         uint16_t msg_type = io_msg.type;
;;;71         uint8_t rx_char;
;;;72     
;;;73         switch (msg_type)
        0x0020a1c0:    2803        .(      CMP      r0,#3
        0x0020a1c2:    d109        ..      BNE      0x20a1d8 ; app_handle_io_msg + 34
;;;74         {
;;;75         case IO_MSG_TYPE_BT_STATUS:
;;;76             {
;;;77                 app_handle_gap_msg(&io_msg);
;;;78             }
;;;79             break;
;;;80         case IO_MSG_TYPE_UART:
;;;81             /* We handle user command informations from Data UART in this branch. */
;;;82             rx_char = (uint8_t)io_msg.subtype;
        0x0020a1c4:    f8bd0006    ....    LDRH     r0,[sp,#6]
        0x0020a1c8:    f88d0000    ....    STRB     r0,[sp,#0]
;;;83             user_cmd_collect(&user_cmd_if, &rx_char, sizeof(rx_char), user_cmd_table);
        0x0020a1cc:    4be8        .K      LDR      r3,[pc,#928] ; [0x20a570] = 0x21c7f4
        0x0020a1ce:    2201        ."      MOVS     r2,#1
        0x0020a1d0:    4669        iF      MOV      r1,sp
        0x0020a1d2:    48e8        .H      LDR      r0,[pc,#928] ; [0x20a574] = 0x20d0cc
        0x0020a1d4:    f000fea3    ....    BL       user_cmd_collect ; 0x20af1e
;;;84             break;
;;;85         default:
;;;86             break;
;;;87         }
;;;88     }
        0x0020a1d8:    bd0e        ..      POP      {r1-r3,pc}
        0x0020a1da:    a801        ..      ADD      r0,sp,#4
        0x0020a1dc:    f7fffef0    ....    BL       app_handle_gap_msg ; 0x209fc0
        0x0020a1e0:    bd0e        ..      POP      {r1-r3,pc}
    filter_scan_info_by_name
;;;89     
;;;90     /**
;;;91      * @brief    Handle msg GAP_MSG_LE_DEV_STATE_CHANGE
;;;92      * @note     All the gap device state events are pre-handled in this function.
;;;93      *           Then the event handling function shall be called according to the new_state
;;;94      * @param[in] new_state  New gap device state
;;;95      * @param[in] cause GAP device state change cause
;;;96      * @return   void
;;;97      */
;;;98     void app_handle_dev_state_evt(T_GAP_DEV_STATE new_state, uint16_t cause)
;;;99     {
;;;100        APP_PRINT_INFO3("app_handle_dev_state_evt: init state  %d, scan state %d, cause 0x%x",
;;;101                        new_state.gap_init_state,
;;;102                        new_state.gap_scan_state, cause);
;;;103        if (gap_dev_state.gap_init_state != new_state.gap_init_state)
;;;104        {
;;;105            if (new_state.gap_init_state == GAP_INIT_STATE_STACK_READY)
;;;106            {
;;;107                uint8_t bt_addr[6];
;;;108                APP_PRINT_INFO0("GAP stack ready");
;;;109                /*stack ready*/
;;;110                gap_get_param(GAP_PARAM_BD_ADDR, bt_addr);
;;;111            }
;;;112        }
;;;113    
;;;114        if (gap_dev_state.gap_scan_state != new_state.gap_scan_state)
;;;115        {
;;;116            if (new_state.gap_scan_state == GAP_SCAN_STATE_IDLE)
;;;117            {
;;;118                APP_PRINT_INFO0("GAP scan stop");
;;;119                //data_uart_print("GAP scan stop\r\n"); 	//by vsop
;;;120            }
;;;121            else if (new_state.gap_scan_state == GAP_SCAN_STATE_SCANNING)
;;;122            {
;;;123                APP_PRINT_INFO0("GAP scan start");
;;;124                //data_uart_print("GAP scan start\r\n");	//by vsop
;;;125            }
;;;126        }
;;;127    
;;;128        gap_dev_state = new_state;
;;;129    }
;;;130    
;;;131    /**
;;;132     * @brief    Handle msg GAP_MSG_LE_CONN_STATE_CHANGE
;;;133     * @note     All the gap conn state events are pre-handled in this function.
;;;134     *           Then the event handling function shall be called according to the new_state
;;;135     * @param[in] conn_id Connection ID
;;;136     * @param[in] new_state  New gap connection state
;;;137     * @param[in] disc_cause Use this cause when new_state is GAP_CONN_STATE_DISCONNECTED
;;;138     * @return   void
;;;139     */
;;;140    void app_handle_conn_state_evt(uint8_t conn_id, T_GAP_CONN_STATE new_state, uint16_t disc_cause)
;;;141    {
;;;142    	char cmd_buffer[FRAMING_PAYLOAD_MAX_LENGTH];
;;;143        if (conn_id >= APP_MAX_LINKS)
;;;144        {
;;;145            return;
;;;146        }
;;;147    
;;;148        APP_PRINT_INFO4("app_handle_conn_state_evt: conn_id %d, conn_state(%d -> %d), disc_cause 0x%x",
;;;149                        conn_id, app_link_table[conn_id].conn_state, new_state, disc_cause);
;;;150    
;;;151        app_link_table[conn_id].conn_state = new_state;
;;;152        switch (new_state)
;;;153        {
;;;154        case GAP_CONN_STATE_DISCONNECTED:
;;;155            {
;;;156                if ((disc_cause != (HCI_ERR | HCI_ERR_REMOTE_USER_TERMINATE))
;;;157                    && (disc_cause != (HCI_ERR | HCI_ERR_LOCAL_HOST_TERMINATE)))
;;;158                {
;;;159                    APP_PRINT_ERROR2("app_handle_conn_state_evt: connection lost, conn_id %d, cause 0x%x", conn_id,
;;;160                                     disc_cause);
;;;161                }
;;;162    #if 0 //by vsop	
;;;163               data_uart_print("#disc#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;164    						conn_id,
;;;165    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;166    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;167    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;168    #else
;;;169    			sprintf(cmd_buffer,"#disc#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;170    						conn_id,
;;;171    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;172    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;173    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;174    				FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));
;;;175    
;;;176    #endif
;;;177                memset(&app_link_table[conn_id], 0, sizeof(T_APP_LINK));
;;;178            }
;;;179            break;
;;;180    
;;;181        case GAP_CONN_STATE_CONNECTED:
;;;182            {
;;;183            	//T_GAP_CAUSE cause;
;;;184                le_get_conn_addr(conn_id, app_link_table[conn_id].bd_addr,
;;;185                                 &app_link_table[conn_id].bd_type);
;;;186    #if 0 //by vsop			
;;;187               data_uart_print("#condev#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;188    						conn_id,
;;;189    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;190    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;191    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;192    #else
;;;193          sprintf(cmd_buffer,"#condev#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;194    						conn_id,
;;;195    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;196    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;197    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;198    	FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));
;;;199    #endif
;;;200            }
;;;201            break;
;;;202    
;;;203        default:
;;;204            break;
;;;205    
;;;206        }
;;;207    }
;;;208    
;;;209    /**
;;;210     * @brief    Handle msg GAP_MSG_LE_AUTHEN_STATE_CHANGE
;;;211     * @note     All the gap authentication state events are pre-handled in this function.
;;;212     *           Then the event handling function shall be called according to the new_state
;;;213     * @param[in] conn_id Connection ID
;;;214     * @param[in] new_state  New authentication state
;;;215     * @param[in] cause Use this cause when new_state is GAP_AUTHEN_STATE_COMPLETE
;;;216     * @return   void
;;;217     */
;;;218    void app_handle_authen_state_evt(uint8_t conn_id, uint8_t new_state, uint16_t cause)
;;;219    {
;;;220    	char cmd_buffer[FRAMING_PAYLOAD_MAX_LENGTH];
;;;221    
;;;222        APP_PRINT_INFO2("app_handle_authen_state_evt:conn_id %d, cause 0x%x", conn_id, cause);
;;;223    
;;;224        switch (new_state)
;;;225        {
;;;226        case GAP_AUTHEN_STATE_STARTED:
;;;227            {
;;;228                APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_STARTED");
;;;229            }
;;;230            break;
;;;231    
;;;232        case GAP_AUTHEN_STATE_COMPLETE:
;;;233            {
;;;234                if (cause == GAP_SUCCESS)
;;;235                {
;;;236    #if 0 //by vsop            
;;;237    				data_uart_print("#sauth#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;238    					conn_id,
;;;239    					app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;240    					app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;241    					app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;242    #else
;;;243    			sprintf(cmd_buffer,"#sauth#!%d![%02x%02x%02x%02x%02x%02x]<Y>\r\n",
;;;244    					conn_id,
;;;245    					app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;246    					app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;247    					app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;248    			FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));	
;;;249    #endif
;;;250                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair success");
;;;251    
;;;252                }
;;;253                else
;;;254                {
;;;255    #if 0 //by vsop            
;;;256                   	data_uart_print("#sauth#!%d![%02x%02x%02x%02x%02x%02x]<N>\r\n",
;;;257    						conn_id,
;;;258    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;259    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;260    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;261    #else
;;;262    					sprintf(cmd_buffer,"#sauth#!%d![%02x%02x%02x%02x%02x%02x]<N>\r\n",
;;;263    						conn_id,
;;;264    						app_link_table[conn_id].bd_addr[5], app_link_table[conn_id].bd_addr[4],
;;;265    						app_link_table[conn_id].bd_addr[3], app_link_table[conn_id].bd_addr[2],
;;;266    						app_link_table[conn_id].bd_addr[1], app_link_table[conn_id].bd_addr[0]);
;;;267    					FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));	
;;;268    #endif            
;;;269                    APP_PRINT_INFO0("app_handle_authen_state_evt: GAP_AUTHEN_STATE_COMPLETE pair failed");
;;;270                }
;;;271            }
;;;272            break;
;;;273    
;;;274        default:
;;;275            {
;;;276                APP_PRINT_ERROR1("app_handle_authen_state_evt: unknown newstate %d", new_state);
;;;277            }
;;;278            break;
;;;279        }
;;;280    }
;;;281    
;;;282    /**
;;;283     * @brief    Handle msg GAP_MSG_LE_CONN_MTU_INFO
;;;284     * @note     This msg is used to inform APP that exchange mtu procedure is completed.
;;;285     * @param[in] conn_id Connection ID
;;;286     * @param[in] mtu_size  New mtu size
;;;287     * @return   void
;;;288     */
;;;289    void app_handle_conn_mtu_info_evt(uint8_t conn_id, uint16_t mtu_size)
;;;290    {
;;;291        APP_PRINT_INFO2("app_handle_conn_mtu_info_evt: conn_id %d, mtu_size %d", conn_id, mtu_size);
;;;292        app_discov_services(conn_id, true);
;;;293    }
;;;294    
;;;295    /**
;;;296     * @brief    Handle msg GAP_MSG_LE_CONN_PARAM_UPDATE
;;;297     * @note     All the connection parameter update change  events are pre-handled in this function.
;;;298     * @param[in] conn_id Connection ID
;;;299     * @param[in] status  New update state
;;;300     * @param[in] cause Use this cause when status is GAP_CONN_PARAM_UPDATE_STATUS_FAIL
;;;301     * @return   void
;;;302     */
;;;303    void app_handle_conn_param_update_evt(uint8_t conn_id, uint8_t status, uint16_t cause)
;;;304    {
;;;305        switch (status)
;;;306        {
;;;307        case GAP_CONN_PARAM_UPDATE_STATUS_SUCCESS:
;;;308            {
;;;309                uint16_t conn_interval;
;;;310                uint16_t conn_slave_latency;
;;;311                uint16_t conn_supervision_timeout;
;;;312    
;;;313                le_get_conn_param(GAP_PARAM_CONN_INTERVAL, &conn_interval, conn_id);
;;;314                le_get_conn_param(GAP_PARAM_CONN_LATENCY, &conn_slave_latency, conn_id);
;;;315                le_get_conn_param(GAP_PARAM_CONN_TIMEOUT, &conn_supervision_timeout, conn_id);
;;;316                APP_PRINT_INFO4("app_handle_conn_param_update_evt update success:conn_id %d, conn_interval 0x%x, conn_slave_latency 0x%x, conn_supervision_timeout 0x%x",
;;;317                                conn_id, conn_interval, conn_slave_latency, conn_supervision_timeout);
;;;318            }
;;;319            break;
;;;320    
;;;321        case GAP_CONN_PARAM_UPDATE_STATUS_FAIL:
;;;322            {
;;;323                APP_PRINT_ERROR2("app_handle_conn_param_update_evt update failed: conn_id %d, cause 0x%x",
;;;324                                 conn_id, cause);
;;;325            }
;;;326            break;
;;;327    
;;;328        case GAP_CONN_PARAM_UPDATE_STATUS_PENDING:
;;;329            {
;;;330                APP_PRINT_INFO1("app_handle_conn_param_update_evt update pending: conn_id %d", conn_id);
;;;331            }
;;;332            break;
;;;333    
;;;334        default:
;;;335            break;
;;;336        }
;;;337    }
;;;338    
;;;339    /**
;;;340     * @brief    All the BT GAP MSG are pre-handled in this function.
;;;341     * @note     Then the event handling function shall be called according to the
;;;342     *           subtype of T_IO_MSG
;;;343     * @param[in] p_gap_msg Pointer to GAP msg
;;;344     * @return   void
;;;345     */
;;;346    void app_handle_gap_msg(T_IO_MSG *p_gap_msg)
;;;347    {
;;;348        T_LE_GAP_MSG gap_msg;
;;;349        uint8_t conn_id;
;;;350        memcpy(&gap_msg, &p_gap_msg->u.param, sizeof(p_gap_msg->u.param));
;;;351    
;;;352        APP_PRINT_TRACE1("app_handle_gap_msg: subtype %d", p_gap_msg->subtype);
;;;353        switch (p_gap_msg->subtype)
;;;354        {
;;;355        case GAP_MSG_LE_DEV_STATE_CHANGE:
;;;356            {
;;;357                app_handle_dev_state_evt(gap_msg.msg_data.gap_dev_state_change.new_state,
;;;358                                         gap_msg.msg_data.gap_dev_state_change.cause);
;;;359            }
;;;360            break;
;;;361    
;;;362        case GAP_MSG_LE_CONN_STATE_CHANGE:
;;;363            {
;;;364                app_handle_conn_state_evt(gap_msg.msg_data.gap_conn_state_change.conn_id,
;;;365                                          (T_GAP_CONN_STATE)gap_msg.msg_data.gap_conn_state_change.new_state,
;;;366                                          gap_msg.msg_data.gap_conn_state_change.disc_cause);
;;;367            }
;;;368            break;
;;;369    
;;;370        case GAP_MSG_LE_CONN_MTU_INFO:
;;;371            {
;;;372                app_handle_conn_mtu_info_evt(gap_msg.msg_data.gap_conn_mtu_info.conn_id,
;;;373                                             gap_msg.msg_data.gap_conn_mtu_info.mtu_size);
;;;374            }
;;;375            break;
;;;376    
;;;377        case GAP_MSG_LE_CONN_PARAM_UPDATE:
;;;378            {
;;;379                app_handle_conn_param_update_evt(gap_msg.msg_data.gap_conn_param_update.conn_id,
;;;380                                                 gap_msg.msg_data.gap_conn_param_update.status,
;;;381                                                 gap_msg.msg_data.gap_conn_param_update.cause);
;;;382            }
;;;383            break;
;;;384    
;;;385        case GAP_MSG_LE_AUTHEN_STATE_CHANGE:
;;;386            {
;;;387                app_handle_authen_state_evt(gap_msg.msg_data.gap_authen_state.conn_id,
;;;388                                            gap_msg.msg_data.gap_authen_state.new_state,
;;;389                                            gap_msg.msg_data.gap_authen_state.status);
;;;390            }
;;;391            break;
;;;392    
;;;393        case GAP_MSG_LE_BOND_JUST_WORK:
;;;394            {
;;;395                conn_id = gap_msg.msg_data.gap_bond_just_work_conf.conn_id;
;;;396                le_bond_just_work_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;397                APP_PRINT_INFO0("GAP_MSG_LE_BOND_JUST_WORK");
;;;398            }
;;;399            break;
;;;400    
;;;401        case GAP_MSG_LE_BOND_PASSKEY_DISPLAY:
;;;402            {
;;;403                uint32_t display_value = 0;
;;;404                conn_id = gap_msg.msg_data.gap_bond_passkey_display.conn_id;
;;;405                le_bond_get_display_key(conn_id, &display_value);
;;;406                APP_PRINT_INFO2("GAP_MSG_LE_BOND_PASSKEY_DISPLAY: conn_id %d, passkey %d",
;;;407                                conn_id, display_value);
;;;408                le_bond_passkey_display_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;409    #if 0 //by vsop			
;;;410                data_uart_print("GAP_MSG_LE_BOND_PASSKEY_DISPLAY: conn_id %d, passkey %d\r\n",
;;;411                                conn_id,
;;;412                                display_value);
;;;413    #endif
;;;414            }
;;;415            break;
;;;416    
;;;417        case GAP_MSG_LE_BOND_USER_CONFIRMATION:
;;;418            {
;;;419                uint32_t display_value = 0;
;;;420                conn_id = gap_msg.msg_data.gap_bond_user_conf.conn_id;
;;;421                le_bond_get_display_key(conn_id, &display_value);
;;;422                APP_PRINT_INFO2("GAP_MSG_LE_BOND_USER_CONFIRMATION: conn_id %d, passkey %d",
;;;423                                conn_id, display_value);
;;;424    #if 0 //by vsop			
;;;425                data_uart_print("GAP_MSG_LE_BOND_USER_CONFIRMATION: conn_id %d, passkey %d\r\n",
;;;426                                conn_id,
;;;427                                display_value);
;;;428    #endif
;;;429                //le_bond_user_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;430            }
;;;431            break;
;;;432    
;;;433        case GAP_MSG_LE_BOND_PASSKEY_INPUT:
;;;434            {
;;;435                //uint32_t passkey = 888888;
;;;436                conn_id = gap_msg.msg_data.gap_bond_passkey_input.conn_id;
;;;437                APP_PRINT_INFO1("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d", conn_id);
;;;438    #if 0 //by vsop			
;;;439                data_uart_print("GAP_MSG_LE_BOND_PASSKEY_INPUT: conn_id %d\r\n", conn_id);
;;;440    #endif
;;;441                //le_bond_passkey_input_confirm(conn_id, passkey, GAP_CFM_CAUSE_ACCEPT);
;;;442            }
;;;443            break;
;;;444    
;;;445        case GAP_MSG_LE_BOND_OOB_INPUT:
;;;446            {
;;;447                uint8_t oob_data[GAP_OOB_LEN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
;;;448                conn_id = gap_msg.msg_data.gap_bond_oob_input.conn_id;
;;;449                APP_PRINT_INFO1("GAP_MSG_LE_BOND_OOB_INPUT: conn_id %d", conn_id);
;;;450                le_bond_set_param(GAP_PARAM_BOND_OOB_DATA, GAP_OOB_LEN, oob_data);
;;;451                le_bond_oob_input_confirm(conn_id, GAP_CFM_CAUSE_ACCEPT);
;;;452            }
;;;453            break;
;;;454    
;;;455        default:
;;;456            APP_PRINT_ERROR1("app_handle_gap_msg: unknown subtype %d", p_gap_msg->subtype);
;;;457            break;
;;;458        }
;;;459    }
;;;460    
;;;461    bool filter_scan_info_by_name(uint8_t *name, T_LE_SCAN_INFO *scan_info)
;;;462    {
        0x0020a1e2:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020a1e6:    4680        .F      MOV      r8,r0
        0x0020a1e8:    b088        ..      SUB      sp,sp,#0x20
        0x0020a1ea:    460e        .F      MOV      r6,r1
        0x0020a1ec:    2000        .       MOVS     r0,#0
        0x0020a1ee:    e01f        ..      B        0x20a230 ; filter_scan_info_by_name + 78
;;;463        uint8_t buffer[32];
;;;464        uint8_t pos = 0;
;;;465    
;;;466        while (pos < scan_info->data_len)
;;;467        {
;;;468            /* Length of the AD structure. */
;;;469            uint8_t length = scan_info->data[pos++];
        0x0020a1f0:    1831        1.      ADDS     r1,r6,r0
        0x0020a1f2:    1c40        @.      ADDS     r0,r0,#1
        0x0020a1f4:    7a8c        .z      LDRB     r4,[r1,#0xa]
        0x0020a1f6:    b2c5        ..      UXTB     r5,r0
;;;470            uint8_t type;
;;;471    
;;;472            if ((length > 0x01) && ((pos + length) <= 31))
        0x0020a1f8:    2c01        .,      CMP      r4,#1
        0x0020a1fa:    d917        ..      BLS      0x20a22c ; filter_scan_info_by_name + 74
        0x0020a1fc:    1928        (.      ADDS     r0,r5,r4
        0x0020a1fe:    281f        .(      CMP      r0,#0x1f
        0x0020a200:    d814        ..      BHI      0x20a22c ; filter_scan_info_by_name + 74
;;;473            {
;;;474                /* Copy the AD Data to buffer. */
;;;475                memcpy(buffer, scan_info->data + pos + 1, length - 1);
        0x0020a202:    1977        w.      ADDS     r7,r6,r5
        0x0020a204:    f107010b    ....    ADD      r1,r7,#0xb
        0x0020a208:    1e62        b.      SUBS     r2,r4,#1
        0x0020a20a:    4668        hF      MOV      r0,sp
        0x0020a20c:    f64ffe45    O.E.    BL       __aeabi_memcpy ; 0x59e9a
;;;476                /* AD Type, one octet. */
;;;477                type = scan_info->data[pos];
        0x0020a210:    7ab8        .z      LDRB     r0,[r7,#0xa]
;;;478                switch (type)
        0x0020a212:    2809        .(      CMP      r0,#9
        0x0020a214:    d10a        ..      BNE      0x20a22c ; filter_scan_info_by_name + 74
;;;479                {
;;;480    	            case GAP_ADTYPE_LOCAL_NAME_COMPLETE:
;;;481    	                {
;;;482    	                    buffer[length - 1] = '\0';
        0x0020a216:    eb0d0104    ....    ADD      r1,sp,r4
        0x0020a21a:    2000        .       MOVS     r0,#0
        0x0020a21c:    f8010c01    ....    STRB     r0,[r1,#-1]
;;;483    	                    //data_uart_print("GAP_ADTYPE_LOCAL_NAME_XXX: %s\r\n", buffer);
;;;484    						if(strncmp((char *)buffer,(char *)name,5)==0)return true;
        0x0020a220:    2205        ."      MOVS     r2,#5
        0x0020a222:    4641        AF      MOV      r1,r8
        0x0020a224:    4668        hF      MOV      r0,sp
        0x0020a226:    f012fa43    ..C.    BL       strncmp ; 0x21c6b0
        0x0020a22a:    b138        8.      CBZ      r0,0x20a23c ; filter_scan_info_by_name + 90
;;;485    	                }
;;;486    	                break;
;;;487    	            default:
;;;488    	                break;
;;;489    	            }
;;;490            }
;;;491            pos += length;
        0x0020a22c:    1928        (.      ADDS     r0,r5,r4
        0x0020a22e:    b2c0        ..      UXTB     r0,r0
        0x0020a230:    7a71        qz      LDRB     r1,[r6,#9]
        0x0020a232:    4281        .B      CMP      r1,r0
        0x0020a234:    d8dc        ..      BHI      0x20a1f0 ; filter_scan_info_by_name + 14
;;;492        }
;;;493    	return false;
        0x0020a236:    2000        .       MOVS     r0,#0
;;;494    }
        0x0020a238:    b008        ..      ADD      sp,sp,#0x20
        0x0020a23a:    e658        X.      B        0x209eee ; app_handle_conn_state_evt + 124
        0x0020a23c:    2001        .       MOVS     r0,#1
        0x0020a23e:    e7fb        ..      B        0x20a238 ; filter_scan_info_by_name + 86
    app_parse_scan_info
;;;495    
;;;496    
;;;497    /** @} */ /* End of group CENTRAL_GAP_MSG */
;;;498    void app_parse_scan_info(T_LE_SCAN_INFO *scan_info)
;;;499    {
        0x0020a240:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0020a244:    4680        .F      MOV      r8,r0
        0x0020a246:    b08a        ..      SUB      sp,sp,#0x28
        0x0020a248:    2500        .%      MOVS     r5,#0
        0x0020a24a:    a0cb        ..      ADR      r0,{pc}+0x32e ; 0x20a578
        0x0020a24c:    f000fcb2    ....    BL       data_uart_print ; 0x20abb4
;;;500        uint8_t buffer[32];
        0x0020a250:    f10d0904    ....    ADD      r9,sp,#4
        0x0020a254:    f8dfa340    ..@.    LDR      r10,[pc,#832] ; [0x20a598] = 0x21500000
;;;501        uint8_t pos = 0;
;;;502    	data_uart_print("+++++++++++++++++++++++++++++\r\n");
;;;503    
;;;504        while (pos < scan_info->data_len)
        0x0020a258:    e0a5        ..      B        0x20a3a6 ; app_parse_scan_info + 358
;;;505        {
;;;506            /* Length of the AD structure. */
;;;507            uint8_t length = scan_info->data[pos++];
        0x0020a25a:    eb080005    ....    ADD      r0,r8,r5
        0x0020a25e:    1c6d        m.      ADDS     r5,r5,#1
        0x0020a260:    7a84        .z      LDRB     r4,[r0,#0xa]
        0x0020a262:    b2ee        ..      UXTB     r6,r5
;;;508            uint8_t type;
;;;509    
;;;510            if ((length > 0x01) && ((pos + length) <= 31))
        0x0020a264:    2c01        .,      CMP      r4,#1
        0x0020a266:    d93e        >.      BLS      0x20a2e6 ; app_parse_scan_info + 166
        0x0020a268:    1930        0.      ADDS     r0,r6,r4
        0x0020a26a:    281f        .(      CMP      r0,#0x1f
        0x0020a26c:    d83b        ;.      BHI      0x20a2e6 ; app_parse_scan_info + 166
;;;511            {
;;;512                /* Copy the AD Data to buffer. */
;;;513                memcpy(buffer, scan_info->data + pos + 1, length - 1);
        0x0020a26e:    eb080706    ....    ADD      r7,r8,r6
        0x0020a272:    f107010b    ....    ADD      r1,r7,#0xb
        0x0020a276:    1e62        b.      SUBS     r2,r4,#1
        0x0020a278:    a801        ..      ADD      r0,sp,#4
        0x0020a27a:    f64ffe0e    O...    BL       __aeabi_memcpy ; 0x59e9a
;;;514                /* AD Type, one octet. */
;;;515                type = scan_info->data[pos];
        0x0020a27e:    7abd        .z      LDRB     r5,[r7,#0xa]
;;;516    
;;;517                data_uart_print("app_parse_scan_info: AD Structure Info: AD type 0x%x, AD Data Length %d\r\n", type,
        0x0020a280:    1e62        b.      SUBS     r2,r4,#1
        0x0020a282:    4629        )F      MOV      r1,r5
        0x0020a284:    48c5        .H      LDR      r0,[pc,#788] ; [0x20a59c] = 0x20cfbc
        0x0020a286:    f000fc95    ....    BL       data_uart_print ; 0x20abb4
;;;518                                 length - 1);
;;;519    
;;;520                switch (type)
        0x0020a28a:    2d09        .-      CMP      r5,#9
        0x0020a28c:    d042        B.      BEQ      0x20a314 ; app_parse_scan_info + 212
        0x0020a28e:    dc07        ..      BGT      0x20a2a0 ; app_parse_scan_info + 96
        0x0020a290:    d216        ..      BCS      0x20a2c0 ; app_parse_scan_info + 128
        0x0020a292:    e8dff005    ....    TBB      [pc,r5]
    $d
        0x0020a296:    1815        ..      DCW    6165
        0x0020a298:    29291b1b    ..))    DCD    690559771
        0x0020a29c:    003f3636    66?.    DCD    4142646
    $t
        0x0020a2a0:    2d15        .-      CMP      r5,#0x15
        0x0020a2a2:    d02e        ..      BEQ      0x20a302 ; app_parse_scan_info + 194
        0x0020a2a4:    dc06        ..      BGT      0x20a2b4 ; app_parse_scan_info + 116
        0x0020a2a6:    2d0a        .-      CMP      r5,#0xa
        0x0020a2a8:    d03c        <.      BEQ      0x20a324 ; app_parse_scan_info + 228
        0x0020a2aa:    2d12        .-      CMP      r5,#0x12
        0x0020a2ac:    d03d        =.      BEQ      0x20a32a ; app_parse_scan_info + 234
        0x0020a2ae:    2d14        .-      CMP      r5,#0x14
        0x0020a2b0:    d106        ..      BNE      0x20a2c0 ; app_parse_scan_info + 128
        0x0020a2b2:    e00b        ..      B        0x20a2cc ; app_parse_scan_info + 140
        0x0020a2b4:    2d16        .-      CMP      r5,#0x16
        0x0020a2b6:    d045        E.      BEQ      0x20a344 ; app_parse_scan_info + 260
        0x0020a2b8:    2d19        .-      CMP      r5,#0x19
        0x0020a2ba:    d051        Q.      BEQ      0x20a360 ; app_parse_scan_info + 288
        0x0020a2bc:    2dff        .-      CMP      r5,#0xff
        0x0020a2be:    d055        U.      BEQ      0x20a36c ; app_parse_scan_info + 300
        0x0020a2c0:    2500        .%      MOVS     r5,#0
        0x0020a2c2:    1e67        g.      SUBS     r7,r4,#1
        0x0020a2c4:    e06b        k.      B        0x20a39e ; app_parse_scan_info + 350
;;;521                {
;;;522                case GAP_ADTYPE_FLAGS:
;;;523                    {
;;;524                        /* (flags & 0x01) -- LE Limited Discoverable Mode */
;;;525                        /* (flags & 0x02) -- LE General Discoverable Mode */
;;;526                        /* (flags & 0x04) -- BR/EDR Not Supported */
;;;527                        /* (flags & 0x08) -- Simultaneous LE and BR/EDR to Same Device Capable (Controller) */
;;;528                        /* (flags & 0x10) -- Simultaneous LE and BR/EDR to Same Device Capable (Host) */
;;;529                        uint8_t flags = scan_info->data[pos + 1];
        0x0020a2c6:    7af9        .z      LDRB     r1,[r7,#0xb]
;;;530                        data_uart_print("GAP_ADTYPE_FLAGS: 0x%x\r\n", flags);
        0x0020a2c8:    a0b5        ..      ADR      r0,{pc}+0x2d8 ; 0x20a5a0
;;;531                    }
;;;532                    break;
        0x0020a2ca:    e04c        L.      B        0x20a366 ; app_parse_scan_info + 294
        0x0020a2cc:    1e60        `.      SUBS     r0,r4,#1
;;;533    
;;;534                case GAP_ADTYPE_16BIT_MORE:
;;;535                case GAP_ADTYPE_16BIT_COMPLETE:
;;;536                case GAP_ADTYPE_SERVICES_LIST_16BIT:
;;;537                    {
;;;538                        uint16_t *p_uuid = (uint16_t *)(buffer);
        0x0020a2ce:    af01        ..      ADD      r7,sp,#4
;;;539                        uint8_t i = length - 1;
        0x0020a2d0:    b2c5        ..      UXTB     r5,r0
;;;540    
;;;541                        while (i >= 2)
        0x0020a2d2:    e006        ..      B        0x20a2e2 ; app_parse_scan_info + 162
        0x0020a2d4:    f8371b02    7...    LDRH     r1,[r7],#2
        0x0020a2d8:    a0b8        ..      ADR      r0,{pc}+0x2e4 ; 0x20a5bc
        0x0020a2da:    f000fc6b    ..k.    BL       data_uart_print ; 0x20abb4
        0x0020a2de:    1ead        ..      SUBS     r5,r5,#2
        0x0020a2e0:    b2ed        ..      UXTB     r5,r5
        0x0020a2e2:    2d02        .-      CMP      r5,#2
        0x0020a2e4:    d2f6        ..      BCS      0x20a2d4 ; app_parse_scan_info + 148
        0x0020a2e6:    e05c        \.      B        0x20a3a2 ; app_parse_scan_info + 354
        0x0020a2e8:    1e60        `.      SUBS     r0,r4,#1
;;;542                        {
;;;543                            data_uart_print("GAP_ADTYPE_16BIT_XXX: 0x%x\r\n", *p_uuid++);
;;;544                            i -= 2;
;;;545                        }
;;;546                    }
;;;547                    break;
;;;548    
;;;549                case GAP_ADTYPE_32BIT_MORE:
;;;550                case GAP_ADTYPE_32BIT_COMPLETE:
;;;551                    {
;;;552                        uint32_t *p_uuid = (uint32_t *)(buffer);
        0x0020a2ea:    af01        ..      ADD      r7,sp,#4
;;;553                        uint8_t    i     = length - 1;
        0x0020a2ec:    b2c5        ..      UXTB     r5,r0
;;;554    
;;;555                        while (i >= 4)
        0x0020a2ee:    e005        ..      B        0x20a2fc ; app_parse_scan_info + 188
        0x0020a2f0:    cf02        ..      LDM      r7!,{r1}
        0x0020a2f2:    a0ba        ..      ADR      r0,{pc}+0x2ea ; 0x20a5dc
        0x0020a2f4:    f000fc5e    ..^.    BL       data_uart_print ; 0x20abb4
        0x0020a2f8:    1f2d        -.      SUBS     r5,r5,#4
        0x0020a2fa:    b2ed        ..      UXTB     r5,r5
        0x0020a2fc:    2d04        .-      CMP      r5,#4
        0x0020a2fe:    d2f7        ..      BCS      0x20a2f0 ; app_parse_scan_info + 176
        0x0020a300:    e04f        O.      B        0x20a3a2 ; app_parse_scan_info + 354
;;;556                        {
;;;557                            data_uart_print("GAP_ADTYPE_32BIT_XXX: 0x%x\r\n", *p_uuid++);
;;;558                            i -= 4;
;;;559                        }
;;;560                    }
;;;561                    break;
;;;562    
;;;563                case GAP_ADTYPE_128BIT_MORE:
;;;564                case GAP_ADTYPE_128BIT_COMPLETE:
;;;565                case GAP_ADTYPE_SERVICES_LIST_128BIT:
;;;566                    {
;;;567                        uint32_t *p_uuid = (uint32_t *)(buffer);
;;;568                        data_uart_print("GAP_ADTYPE_128BIT_XXX: 0x%8.8x%8.8x%8.8x%8.8x\r\n",
        0x0020a302:    9801        ..      LDR      r0,[sp,#4]
        0x0020a304:    9000        ..      STR      r0,[sp,#0]
        0x0020a306:    e9dd2103    ...!    LDRD     r2,r1,[sp,#0xc]
        0x0020a30a:    a0bc        ..      ADR      r0,{pc}+0x2f2 ; 0x20a5fc
        0x0020a30c:    9b02        ..      LDR      r3,[sp,#8]
        0x0020a30e:    f000fc51    ..Q.    BL       data_uart_print ; 0x20abb4
;;;569                                        p_uuid[3], p_uuid[2], p_uuid[1], p_uuid[0]);
;;;570                    }
;;;571                    break;
        0x0020a312:    e046        F.      B        0x20a3a2 ; app_parse_scan_info + 354
;;;572    
;;;573                case GAP_ADTYPE_LOCAL_NAME_SHORT:
;;;574                case GAP_ADTYPE_LOCAL_NAME_COMPLETE:
;;;575                    {
;;;576                        buffer[length - 1] = '\0';
        0x0020a314:    eb090004    ....    ADD      r0,r9,r4
        0x0020a318:    2100        .!      MOVS     r1,#0
        0x0020a31a:    f8001c01    ....    STRB     r1,[r0,#-1]
;;;577                        data_uart_print("GAP_ADTYPE_LOCAL_NAME_XXX: %s\r\n", buffer);
        0x0020a31e:    a901        ..      ADD      r1,sp,#4
        0x0020a320:    a0c2        ..      ADR      r0,{pc}+0x30c ; 0x20a62c
;;;578                    }
;;;579                    break;
        0x0020a322:    e020         .      B        0x20a366 ; app_parse_scan_info + 294
;;;580    
;;;581                case GAP_ADTYPE_POWER_LEVEL:
;;;582                    {
;;;583                        data_uart_print("GAP_ADTYPE_POWER_LEVEL: 0x%x\r\n", scan_info->data[pos + 1]);
        0x0020a324:    7af9        .z      LDRB     r1,[r7,#0xb]
        0x0020a326:    a0c9        ..      ADR      r0,{pc}+0x326 ; 0x20a64c
;;;584                    }
;;;585                    break;
        0x0020a328:    e01d        ..      B        0x20a366 ; app_parse_scan_info + 294
;;;586    
;;;587                case GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE:
;;;588                    {
;;;589                        uint16_t *p_min = (uint16_t *)(buffer);
;;;590                        uint16_t *p_max = p_min + 1;
;;;591                        APP_PRINT_INFO2("GAP_ADTYPE_SLAVE_CONN_INTERVAL_RANGE: 0x%x - 0x%x", *p_min,
        0x0020a32a:    f8bd0006    ....    LDRH     r0,[sp,#6]
        0x0020a32e:    9000        ..      STR      r0,[sp,#0]
        0x0020a330:    498d        .I      LDR      r1,[pc,#564] ; [0x20a568] = 0x8801a6c
        0x0020a332:    488e        .H      LDR      r0,[pc,#568] ; [0x20a56c] = 0x21103000
        0x0020a334:    f8bd3004    ...0    LDRH     r3,[sp,#4]
        0x0020a338:    2202        ."      MOVS     r2,#2
        0x0020a33a:    3188        .1      ADDS     r1,r1,#0x88
        0x0020a33c:    1c80        ..      ADDS     r0,r0,#2
        0x0020a33e:    f5fdfb8e    ....    BL       log_buffer ; 0x7a5e
;;;592                                        *p_max);
;;;593                    }
;;;594                    break;
        0x0020a342:    e02e        ..      B        0x20a3a2 ; app_parse_scan_info + 354
;;;595    
;;;596                case GAP_ADTYPE_SERVICE_DATA:
;;;597                    {
;;;598                        uint16_t *p_uuid = (uint16_t *)(buffer);
;;;599                        uint8_t data_len = length - 3;
        0x0020a344:    1ee0        ..      SUBS     r0,r4,#3
        0x0020a346:    b2c5        ..      UXTB     r5,r0
;;;600    
;;;601                        data_uart_print("GAP_ADTYPE_SERVICE_DATA: UUID 0x%x, len %d, data %b\r\n", *p_uuid,
        0x0020a348:    f1090202    ....    ADD      r2,r9,#2
        0x0020a34c:    4629        )F      MOV      r1,r5
        0x0020a34e:    4650        PF      MOV      r0,r10
        0x0020a350:    f5fdfddb    ....    BL       trace_binary ; 0x7f0a
        0x0020a354:    4603        .F      MOV      r3,r0
        0x0020a356:    f8bd1004    ....    LDRH     r1,[sp,#4]
        0x0020a35a:    462a        *F      MOV      r2,r5
        0x0020a35c:    a0c3        ..      ADR      r0,{pc}+0x310 ; 0x20a66c
;;;602                                        data_len, TRACE_BINARY(data_len, &buffer[2]));
;;;603                    }
;;;604                    break;
        0x0020a35e:    e012        ..      B        0x20a386 ; app_parse_scan_info + 326
;;;605                case GAP_ADTYPE_APPEARANCE:
;;;606                    {
;;;607                        uint16_t *p_appearance = (uint16_t *)(buffer);
;;;608                        data_uart_print("GAP_ADTYPE_APPEARANCE: %d\r\n", *p_appearance);
        0x0020a360:    f8bd1004    ....    LDRH     r1,[sp,#4]
        0x0020a364:    a0cf        ..      ADR      r0,{pc}+0x340 ; 0x20a6a4
        0x0020a366:    f000fc25    ..%.    BL       data_uart_print ; 0x20abb4
        0x0020a36a:    e01a        ..      B        0x20a3a2 ; app_parse_scan_info + 354
;;;609                    }
;;;610                    break;
;;;611    
;;;612                case GAP_ADTYPE_MANUFACTURER_SPECIFIC:
;;;613                    {
;;;614                        uint8_t data_len = length - 3;
        0x0020a36c:    1ee0        ..      SUBS     r0,r4,#3
        0x0020a36e:    b2c5        ..      UXTB     r5,r0
;;;615                        uint16_t *p_company_id = (uint16_t *)(buffer);
;;;616                        data_uart_print("GAP_ADTYPE_MANUFACTURER_SPECIFIC: company_id 0x%x, len %d, data %b\r\n",
        0x0020a370:    f1090202    ....    ADD      r2,r9,#2
        0x0020a374:    4629        )F      MOV      r1,r5
        0x0020a376:    4650        PF      MOV      r0,r10
        0x0020a378:    f5fdfdc7    ....    BL       trace_binary ; 0x7f0a
        0x0020a37c:    4603        .F      MOV      r3,r0
        0x0020a37e:    f8bd1004    ....    LDRH     r1,[sp,#4]
        0x0020a382:    462a        *F      MOV      r2,r5
        0x0020a384:    48ce        .H      LDR      r0,[pc,#824] ; [0x20a6c0] = 0x20cf74
        0x0020a386:    f000fc15    ....    BL       data_uart_print ; 0x20abb4
        0x0020a38a:    e00a        ..      B        0x20a3a2 ; app_parse_scan_info + 354
        0x0020a38c:    1971        q.      ADDS     r1,r6,r5
        0x0020a38e:    eb010008    ....    ADD      r0,r1,r8
        0x0020a392:    7a81        .z      LDRB     r1,[r0,#0xa]
        0x0020a394:    a0cb        ..      ADR      r0,{pc}+0x330 ; 0x20a6c4
        0x0020a396:    f000fc0d    ....    BL       data_uart_print ; 0x20abb4
        0x0020a39a:    1c6d        m.      ADDS     r5,r5,#1
;;;617                                        *p_company_id, data_len, TRACE_BINARY(data_len, &buffer[2]));
;;;618                    }
;;;619                    break;
;;;620    
;;;621                default:
;;;622                    {
;;;623                        uint8_t i = 0;
;;;624    
;;;625                        for (i = 0; i < (length - 1); i++)
        0x0020a39c:    b2ed        ..      UXTB     r5,r5
        0x0020a39e:    42bd        .B      CMP      r5,r7
        0x0020a3a0:    dbf4        ..      BLT      0x20a38c ; app_parse_scan_info + 332
;;;626                        {
;;;627                            data_uart_print("  AD Data: Unhandled Data = 0x%x\r\n", scan_info->data[pos + i]);
;;;628                        }
;;;629                    }
;;;630                    break;
;;;631                }
;;;632            }
;;;633    
;;;634            pos += length;
        0x0020a3a2:    1930        0.      ADDS     r0,r6,r4
        0x0020a3a4:    b2c5        ..      UXTB     r5,r0
        0x0020a3a6:    f8980009    ....    LDRB     r0,[r8,#9]
        0x0020a3aa:    42a8        .B      CMP      r0,r5
        0x0020a3ac:    f63faf55    ?.U.    BHI      0x20a25a ; app_parse_scan_info + 26
;;;635        }
;;;636    		data_uart_print("------------------------------\r\n");
        0x0020a3b0:    a0cd        ..      ADR      r0,{pc}+0x338 ; 0x20a6e8
        0x0020a3b2:    f000fbff    ....    BL       data_uart_print ; 0x20abb4
;;;637    }
        0x0020a3b6:    b00a        ..      ADD      sp,sp,#0x28
        0x0020a3b8:    e8bd87f0    ....    POP      {r4-r10,pc}
    filter_scan_info_by_uuid
;;;638    
;;;639    /** @defgroup  CENTRAL_SCAN_MGR Scan Information manager
;;;640        * @brief Scan Information manager
;;;641        * @{
;;;642        */
;;;643    /**
;;;644      * @brief Use 16 bit uuid to filter scan information
;;;645      * @param[in] uuid 16 bit UUID.
;;;646      * @param[in] scan_info point to scan information data.
;;;647      * @return filter result
;;;648      * @retval true found success
;;;649      * @retval false not found
;;;650      */
;;;651    bool filter_scan_info_by_uuid(uint16_t uuid, T_LE_SCAN_INFO *scan_info)
;;;652    {
        0x0020a3bc:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0020a3c0:    4681        .F      MOV      r9,r0
        0x0020a3c2:    b08a        ..      SUB      sp,sp,#0x28
        0x0020a3c4:    4688        .F      MOV      r8,r1
        0x0020a3c6:    2000        .       MOVS     r0,#0
;;; ..\..\..\src\sample\ble_central\central_app.c (652)
        0x0020a3c8:    e035        5.      B        0x20a436 ; filter_scan_info_by_uuid + 122
;;;653        uint8_t buffer[32];
;;;654        uint8_t pos = 0;
;;;655    
;;;656        while (pos < scan_info->data_len)
;;;657        {
;;;658            /* Length of the AD structure. */
;;;659            uint8_t length = scan_info->data[pos++];
        0x0020a3ca:    eb080100    ....    ADD      r1,r8,r0
        0x0020a3ce:    1c40        @.      ADDS     r0,r0,#1
        0x0020a3d0:    7a8e        .z      LDRB     r6,[r1,#0xa]
        0x0020a3d2:    b2c7        ..      UXTB     r7,r0
;;;660            uint8_t type;
;;;661    
;;;662            if ((length > 0x01) && ((pos + length) <= 31))
        0x0020a3d4:    2e01        ..      CMP      r6,#1
        0x0020a3d6:    d92c        ,.      BLS      0x20a432 ; filter_scan_info_by_uuid + 118
        0x0020a3d8:    19b8        ..      ADDS     r0,r7,r6
        0x0020a3da:    281f        .(      CMP      r0,#0x1f
        0x0020a3dc:    d829        ).      BHI      0x20a432 ; filter_scan_info_by_uuid + 118
;;;663            {
;;;664                /* Copy the AD Data to buffer. */
;;;665                memcpy(buffer, scan_info->data + pos + 1, length - 1);
        0x0020a3de:    eb080407    ....    ADD      r4,r8,r7
        0x0020a3e2:    f104010b    ....    ADD      r1,r4,#0xb
        0x0020a3e6:    1e72        r.      SUBS     r2,r6,#1
        0x0020a3e8:    a801        ..      ADD      r0,sp,#4
        0x0020a3ea:    f64ffd56    O.V.    BL       __aeabi_memcpy ; 0x59e9a
;;;666                /* AD Type, one octet. */
;;;667                type = scan_info->data[pos];
        0x0020a3ee:    7aa0        .z      LDRB     r0,[r4,#0xa]
;;;668    
;;;669                switch (type)
        0x0020a3f0:    2802        .(      CMP      r0,#2
        0x0020a3f2:    d003        ..      BEQ      0x20a3fc ; filter_scan_info_by_uuid + 64
        0x0020a3f4:    2803        .(      CMP      r0,#3
        0x0020a3f6:    d001        ..      BEQ      0x20a3fc ; filter_scan_info_by_uuid + 64
        0x0020a3f8:    2814        .(      CMP      r0,#0x14
        0x0020a3fa:    d11a        ..      BNE      0x20a432 ; filter_scan_info_by_uuid + 118
        0x0020a3fc:    f8dfa16c    ..l.    LDR      r10,[pc,#364] ; [0x20a56c] = 0x21103000
        0x0020a400:    1e70        p.      SUBS     r0,r6,#1
;;;670                {
;;;671                case GAP_ADTYPE_16BIT_MORE:
;;;672                case GAP_ADTYPE_16BIT_COMPLETE:
;;;673                case GAP_ADTYPE_SERVICES_LIST_16BIT:
;;;674                    {
;;;675                        uint16_t *p_uuid = (uint16_t *)(buffer);
        0x0020a402:    ad01        ..      ADD      r5,sp,#4
;;;676                        uint8_t i = length - 1;
        0x0020a404:    b2c4        ..      UXTB     r4,r0
        0x0020a406:    f10a0a02    ....    ADD      r10,r10,#2
;;;677    
;;;678                        while (i >= 2)
        0x0020a40a:    e010        ..      B        0x20a42e ; filter_scan_info_by_uuid + 114
;;;679                        {
;;;680                            APP_PRINT_INFO2("  AD Data: UUID16 List Item %d = 0x%x", i / 2, *p_uuid);
        0x0020a40c:    8828        (.      LDRH     r0,[r5,#0]
        0x0020a40e:    4956        VI      LDR      r1,[pc,#344] ; [0x20a568] = 0x8801a6c
        0x0020a410:    9000        ..      STR      r0,[sp,#0]
        0x0020a412:    0863        c.      LSRS     r3,r4,#1
        0x0020a414:    2202        ."      MOVS     r2,#2
        0x0020a416:    31c0        .1      ADDS     r1,r1,#0xc0
        0x0020a418:    4650        PF      MOV      r0,r10
        0x0020a41a:    f5fdfb20    .. .    BL       log_buffer ; 0x7a5e
;;;681    						//data_uart_print("  AD Data: UUID16 List Item %d = 0x%x\r\n", i / 2, *p_uuid);
;;;682                            if (*p_uuid == uuid)
        0x0020a41e:    8829        ).      LDRH     r1,[r5,#0]
        0x0020a420:    4549        IE      CMP      r1,r9
        0x0020a422:    d101        ..      BNE      0x20a428 ; filter_scan_info_by_uuid + 108
;;;683                            {
;;;684                                return true;
        0x0020a424:    2001        .       MOVS     r0,#1
        0x0020a426:    e7c6        ..      B        0x20a3b6 ; app_parse_scan_info + 374
        0x0020a428:    1ea4        ..      SUBS     r4,r4,#2
;;;685                            }
;;;686                            p_uuid++;
;;;687                            i -= 2;
        0x0020a42a:    b2e4        ..      UXTB     r4,r4
        0x0020a42c:    1cad        ..      ADDS     r5,r5,#2
        0x0020a42e:    2c02        .,      CMP      r4,#2
        0x0020a430:    d2ec        ..      BCS      0x20a40c ; filter_scan_info_by_uuid + 80
;;;688                        }
;;;689                    }
;;;690                    break;
;;;691    
;;;692                default:
;;;693                    break;
;;;694                }
;;;695            }
;;;696    
;;;697            pos += length;
        0x0020a432:    19b8        ..      ADDS     r0,r7,r6
        0x0020a434:    b2c0        ..      UXTB     r0,r0
        0x0020a436:    f8981009    ....    LDRB     r1,[r8,#9]
        0x0020a43a:    4281        .B      CMP      r1,r0
        0x0020a43c:    d8c5        ..      BHI      0x20a3ca ; filter_scan_info_by_uuid + 14
;;;698        }
;;;699        return false;
        0x0020a43e:    2000        .       MOVS     r0,#0
;;;700    }
        0x0020a440:    e7b9        ..      B        0x20a3b6 ; app_parse_scan_info + 374
    app_gap_callback
;;;701    /** @} */ /* End of group CENTRAL_SCAN_MGR */
;;;702    
;;;703    /** @defgroup  CENTRAL_GAP_CALLBACK GAP Callback Event Handler
;;;704        * @brief Handle GAP callback event
;;;705        * @{
;;;706        */
;;;707    /**
;;;708      * @brief Callback for gap le to notify app
;;;709      * @param[in] cb_type callback msy type @ref GAP_LE_MSG_Types.
;;;710      * @param[in] p_cb_data point to callback data @ref T_LE_CB_DATA.
;;;711      * @retval result @ref T_APP_RESULT
;;;712      */
;;;713    T_APP_RESULT app_gap_callback(uint8_t cb_type, void *p_cb_data)
;;;714    {
        0x0020a442:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0020a444:    b089        ..      SUB      sp,sp,#0x24
        0x0020a446:    460c        .F      MOV      r4,r1
        0x0020a448:    4607        .F      MOV      r7,r0
;;;715        T_APP_RESULT result = APP_RESULT_SUCCESS;
        0x0020a44a:    2600        .&      MOVS     r6,#0
;;;716        T_LE_CB_DATA *p_data = (T_LE_CB_DATA *)p_cb_data;
;;;717    
;;;718    	uint8_t devname[]="CMT4501-a11005e2";
        0x0020a44c:    2214        ."      MOVS     r2,#0x14
        0x0020a44e:    a1af        ..      ADR      r1,{pc}+0x2be ; 0x20a70c
        0x0020a450:    a804        ..      ADD      r0,sp,#0x10
        0x0020a452:    f64ffda9    O...    BL       __aeabi_memcpy4 ; 0x59fa8
        0x0020a456:    4d45        EM      LDR      r5,[pc,#276] ; [0x20a56c] = 0x21103000
        0x0020a458:    1cad        ..      ADDS     r5,r5,#2
;;;719    
;;;720        switch (cb_type)
        0x0020a45a:    2f15        ./      CMP      r7,#0x15
        0x0020a45c:    d038        8.      BEQ      0x20a4d0 ; app_gap_callback + 142
        0x0020a45e:    2f30        0/      CMP      r7,#0x30
        0x0020a460:    d008        ..      BEQ      0x20a474 ; app_gap_callback + 50
        0x0020a462:    463b        ;F      MOV      r3,r7
        0x0020a464:    2201        ."      MOVS     r2,#1
        0x0020a466:    49ae        .I      LDR      r1,[pc,#696] ; [0x20a720] = 0x8801c5c
        0x0020a468:    1ea8        ..      SUBS     r0,r5,#2
        0x0020a46a:    f5fdfaf8    ....    BL       log_buffer ; 0x7a5e
        0x0020a46e:    b009        ..      ADD      sp,sp,#0x24
        0x0020a470:    4630        0F      MOV      r0,r6
        0x0020a472:    bdf0        ..      POP      {r4-r7,pc}
;;;721        {
;;;722        case GAP_MSG_LE_SCAN_INFO:
;;;723            APP_PRINT_INFO5("GAP_MSG_LE_SCAN_INFO:adv_type 0x%x, bd_addr %s, remote_addr_type %d, rssi %d, data_len %d",
        0x0020a474:    48ab        .H      LDR      r0,[pc,#684] ; [0x20a724] = 0x21300000
        0x0020a476:    6821        !h      LDR      r1,[r4,#0]
        0x0020a478:    f5fdfcae    ....    BL       trace_bdaddr ; 0x7dd8
        0x0020a47c:    4601        .F      MOV      r1,r0
        0x0020a47e:    6820         h      LDR      r0,[r4,#0]
        0x0020a480:    7a47        Gz      LDRB     r7,[r0,#9]
        0x0020a482:    f9903008    ...0    LDRSB    r3,[r0,#8]
        0x0020a486:    7982        .y      LDRB     r2,[r0,#6]
        0x0020a488:    e88d008e    ....    STM      sp,{r1-r3,r7}
        0x0020a48c:    4936        6I      LDR      r1,[pc,#216] ; [0x20a568] = 0x8801a6c
        0x0020a48e:    79c3        .y      LDRB     r3,[r0,#7]
        0x0020a490:    2205        ."      MOVS     r2,#5
        0x0020a492:    31ec        .1      ADDS     r1,r1,#0xec
        0x0020a494:    4628        (F      MOV      r0,r5
        0x0020a496:    f5fdfae2    ....    BL       log_buffer ; 0x7a5e
;;;724                            p_data->p_le_scan_info->adv_type,
;;;725                            TRACE_BDADDR(p_data->p_le_scan_info->bd_addr),
;;;726                            p_data->p_le_scan_info->remote_addr_type,
;;;727                            p_data->p_le_scan_info->rssi,
;;;728                            p_data->p_le_scan_info->data_len);
;;;729            /* User can split interested information by using the function as follow. */
;;;730    
;;;731    #if 1
;;;732    		//app_parse_scan_info(p_data->p_le_scan_info);
;;;733    		if (filter_scan_info_by_name(devname, p_data->p_le_scan_info))
        0x0020a49a:    a804        ..      ADD      r0,sp,#0x10
        0x0020a49c:    6821        !h      LDR      r1,[r4,#0]
        0x0020a49e:    f7fffea0    ....    BL       filter_scan_info_by_name ; 0x20a1e2
        0x0020a4a2:    b118        ..      CBZ      r0,0x20a4ac ; app_gap_callback + 106
;;;734            {
;;;735                //data_uart_print("Found simple ble service\r\n");
;;;736                link_mgr_add_device(p_data->p_le_scan_info->bd_addr, p_data->p_le_scan_info->remote_addr_type);
        0x0020a4a4:    6820         h      LDR      r0,[r4,#0]
        0x0020a4a6:    7981        .y      LDRB     r1,[r0,#6]
        0x0020a4a8:    f011ff9e    ....    BL       link_mgr_add_device ; 0x21c3e8
;;;737            }
;;;738    #endif
;;;739    
;;;740            if (filter_scan_info_by_uuid(GATT_UUID_SIMPLE_PROFILE, p_data->p_le_scan_info))
        0x0020a4ac:    f64f70e0    O..p    MOV      r0,#0xffe0
        0x0020a4b0:    6821        !h      LDR      r1,[r4,#0]
        0x0020a4b2:    f7ffff83    ....    BL       filter_scan_info_by_uuid ; 0x20a3bc
        0x0020a4b6:    2800        .(      CMP      r0,#0
        0x0020a4b8:    d0d9        ..      BEQ      0x20a46e ; app_gap_callback + 44
;;;741            {
;;;742                APP_PRINT_INFO0("Found simple ble service");
        0x0020a4ba:    4999        .I      LDR      r1,[pc,#612] ; [0x20a720] = 0x8801c5c
        0x0020a4bc:    2200        ."      MOVS     r2,#0
        0x0020a4be:    39a4        .9      SUBS     r1,r1,#0xa4
        0x0020a4c0:    4628        (F      MOV      r0,r5
        0x0020a4c2:    f5fdfacc    ....    BL       log_buffer ; 0x7a5e
;;;743                link_mgr_add_device(p_data->p_le_scan_info->bd_addr, p_data->p_le_scan_info->remote_addr_type);
        0x0020a4c6:    6820         h      LDR      r0,[r4,#0]
        0x0020a4c8:    7981        .y      LDRB     r1,[r0,#6]
        0x0020a4ca:    f011ff8d    ....    BL       link_mgr_add_device ; 0x21c3e8
        0x0020a4ce:    e7ce        ..      B        0x20a46e ; app_gap_callback + 44
;;;744            }
;;;745            /* If you want to parse the scan info, please reference function app_parse_scan_info in observer app. */
;;;746            break;
;;;747    
;;;748        case GAP_MSG_LE_CONN_UPDATE_IND:
;;;749            APP_PRINT_INFO5("GAP_MSG_LE_CONN_UPDATE_IND: conn_id %d, conn_interval_max 0x%x, conn_interval_min 0x%x, conn_latency 0x%x,supervision_timeout 0x%x",
        0x0020a4d0:    6820         h      LDR      r0,[r4,#0]
        0x0020a4d2:    8881        ..      LDRH     r1,[r0,#4]
        0x0020a4d4:    8904        ..      LDRH     r4,[r0,#8]
        0x0020a4d6:    88c3        ..      LDRH     r3,[r0,#6]
        0x0020a4d8:    8842        B.      LDRH     r2,[r0,#2]
        0x0020a4da:    e88d001e    ....    STM      sp,{r1-r4}
        0x0020a4de:    4990        .I      LDR      r1,[pc,#576] ; [0x20a720] = 0x8801c5c
        0x0020a4e0:    7803        .x      LDRB     r3,[r0,#0]
        0x0020a4e2:    2205        ."      MOVS     r2,#5
        0x0020a4e4:    3988        .9      SUBS     r1,r1,#0x88
        0x0020a4e6:    4628        (F      MOV      r0,r5
        0x0020a4e8:    f5fdfab9    ....    BL       log_buffer ; 0x7a5e
;;;750                            p_data->p_le_conn_update_ind->conn_id,
;;;751                            p_data->p_le_conn_update_ind->conn_interval_max,
;;;752                            p_data->p_le_conn_update_ind->conn_interval_min,
;;;753                            p_data->p_le_conn_update_ind->conn_latency,
;;;754                            p_data->p_le_conn_update_ind->supervision_timeout);
;;;755            /* if reject the proposed connection parameter from peer device, use APP_RESULT_REJECT. */
;;;756            result = APP_RESULT_ACCEPT;
        0x0020a4ec:    f6405603    @..V    MOV      r6,#0xd03
;;;757            break;
        0x0020a4f0:    e7bd        ..      B        0x20a46e ; app_gap_callback + 44
    app_client_callback
;;;758    
;;;759        default:
;;;760            APP_PRINT_ERROR1("app_gap_callback: unhandled cb_type 0x%x", cb_type);
;;;761            break;
;;;762        }
;;;763        return result;
;;;764    }
;;;765    /** @} */ /* End of group CENTRAL_GAP_CALLBACK */
;;;766    
;;;767    /** @defgroup  CENTRAL_SRV_DIS GATT Services discovery and storage
;;;768        * @brief GATT Services discovery and storage
;;;769        * @{
;;;770        */
;;;771    /**
;;;772     * @brief  Discovery GATT services
;;;773     * @param  conn_id connection ID.
;;;774     * @param  start first call. true - first call this function after conncection, false - not first
;;;775     * @retval None
;;;776     */
;;;777    void app_discov_services(uint8_t conn_id, bool start)
;;;778    {
;;;779        if (app_link_table[conn_id].conn_state != GAP_CONN_STATE_CONNECTED)
;;;780        {
;;;781            APP_PRINT_ERROR1("app_discov_services: conn_id %d not connected ", conn_id);
;;;782            return;
;;;783        }
;;;784        if (start)
;;;785        {
;;;786    #if F_BT_GATT_SRV_HANDLE_STORAGE
;;;787            bool is_disc = true;
;;;788            T_APP_SRVS_HDL_TABLE app_srvs_table;
;;;789            if (app_load_srvs_hdl_table(&app_srvs_table) == 0)
;;;790            {
;;;791                if ((app_srvs_table.srv_found_flags != 0) &&
;;;792                    (app_srvs_table.bd_type == app_link_table[conn_id].bd_type) &&
;;;793                    (memcmp(app_srvs_table.bd_addr, app_link_table[conn_id].bd_addr, GAP_BD_ADDR_LEN) == 0))
;;;794                {
;;;795                    APP_PRINT_INFO1("app_discov_services: load from flash, srv_found_flags 0x%x",
;;;796                                    app_srvs_table.srv_found_flags);
;;;797                    app_link_table[conn_id].srv_found_flags = app_srvs_table.srv_found_flags;
;;;798                    if (app_srvs_table.srv_found_flags & APP_DISCOV_GAPS_FLAG)
;;;799                    {
;;;800                        gaps_set_hdl_cache(conn_id, app_srvs_table.gaps_hdl_cache, sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;801                    }
;;;802                    if (app_srvs_table.srv_found_flags & APP_DISCOV_SIMP_FLAG)
;;;803                    {
;;;804                        simp_ble_client_set_hdl_cache(conn_id, app_srvs_table.simp_hdl_cache,
;;;805                                                      sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN);
;;;806                    }
;;;807                    if (app_srvs_table.srv_found_flags & APP_DISCOV_BAS_FLAG)
;;;808                    {
;;;809                        bas_set_hdl_cache(conn_id, app_srvs_table.bas_hdl_cache, sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;810                    }
;;;811                    is_disc = false;
;;;812                }
;;;813            }
;;;814            else
;;;815            {
;;;816                APP_PRINT_ERROR0("app_load_srvs_hdl_table: failed");
;;;817            }
;;;818    
;;;819            if (is_disc)
;;;820            {
;;;821                if (gaps_start_discovery(conn_id) == false)
;;;822                {
;;;823                    APP_PRINT_ERROR1("app_discov_services: discover gaps failed conn_id %d", conn_id);
;;;824                }
;;;825            }
;;;826    #else
;;;827            if (gaps_start_discovery(conn_id) == false)
;;;828            {
;;;829                APP_PRINT_ERROR1("app_discov_services: discover gaps failed conn_id %d", conn_id);
;;;830            }
;;;831    #endif
;;;832            return;
;;;833        }
;;;834        if ((app_link_table[conn_id].discovered_flags & APP_DISCOV_SIMP_FLAG) == 0)
;;;835        {
;;;836            if (simp_ble_client_start_discovery(conn_id) == false)
;;;837            {
;;;838                APP_PRINT_ERROR1("app_discov_services: discover simp failed conn_id %d", conn_id);
;;;839            }
;;;840        }
;;;841        else if ((app_link_table[conn_id].discovered_flags & APP_DISCOV_BAS_FLAG) == 0)
;;;842        {
;;;843            if (bas_start_discovery(conn_id) == false)
;;;844            {
;;;845                APP_PRINT_ERROR1("app_discov_services: discover bas failed conn_id %d", conn_id);
;;;846            }
;;;847        }
;;;848        else
;;;849        {
;;;850            APP_PRINT_INFO2("app_discov_services: discover complete, conn_id %d, srv_found_flags 0x%x",
;;;851                            conn_id, app_link_table[conn_id].srv_found_flags);
;;;852    #if F_BT_GATT_SRV_HANDLE_STORAGE
;;;853            if (app_link_table[conn_id].srv_found_flags != 0)
;;;854            {
;;;855                T_APP_SRVS_HDL_TABLE app_srvs_table;
;;;856                memset(&app_srvs_table, 0, sizeof(T_APP_SRVS_HDL_TABLE));
;;;857                app_srvs_table.bd_type = app_link_table[conn_id].bd_type;
;;;858                app_srvs_table.srv_found_flags = app_link_table[conn_id].srv_found_flags;
;;;859                memcpy(app_srvs_table.bd_addr, app_link_table[conn_id].bd_addr, GAP_BD_ADDR_LEN);
;;;860                gaps_get_hdl_cache(conn_id, app_srvs_table.gaps_hdl_cache, sizeof(uint16_t) * HDL_GAPS_CACHE_LEN);
;;;861                simp_ble_client_get_hdl_cache(conn_id, app_srvs_table.simp_hdl_cache,
;;;862                                              sizeof(uint16_t) * HDL_SIMBLE_CACHE_LEN);
;;;863                bas_get_hdl_cache(conn_id, app_srvs_table.bas_hdl_cache, sizeof(uint16_t) * HDL_BAS_CACHE_LEN);
;;;864                if (app_save_srvs_hdl_table(&app_srvs_table) != 0)
;;;865                {
;;;866                    APP_PRINT_ERROR0("app_save_srvs_hdl_table: failed");
;;;867                }
;;;868            }
;;;869    #endif
;;;870        }
;;;871    
;;;872        return;
;;;873    }
;;;874    /** @} */ /* End of group CENTRAL_SRV_DIS */
;;;875    
;;;876    /** @defgroup  CENTRAL_CLIIENT_CALLBACK Profile Client Callback Event Handler
;;;877        * @brief Handle profile client callback event
;;;878        * @{
;;;879        */
;;;880    
;;;881    /**
;;;882     * @brief  Callback will be called when data sent from profile client layer.
;;;883     * @param  client_id the ID distinguish which module sent the data.
;;;884     * @param  conn_id connection ID.
;;;885     * @param  p_data  pointer to data.
;;;886     * @retval   result @ref T_APP_RESULT
;;;887     */
;;;888    T_APP_RESULT app_client_callback(T_CLIENT_ID client_id, uint8_t conn_id, void *p_data)
;;;889    {
        0x0020a4f2:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020a4f6:    f5ad7d00    ...}    SUB      sp,sp,#0x200
        0x0020a4fa:    4607        .F      MOV      r7,r0
        0x0020a4fc:    2000        .       MOVS     r0,#0
        0x0020a4fe:    f8df806c    ..l.    LDR      r8,[pc,#108] ; [0x20a56c] = 0x21103000
        0x0020a502:    4614        .F      MOV      r4,r2
        0x0020a504:    460d        .F      MOV      r5,r1
;;;890    	char temp[3]={0};
;;;891        T_APP_RESULT  result = APP_RESULT_SUCCESS;
        0x0020a506:    4606        .F      MOV      r6,r0
;;;892        APP_PRINT_INFO2("app_client_callback: client_id %d, conn_id %d",
        0x0020a508:    9100        ..      STR      r1,[sp,#0]
        0x0020a50a:    907f        ..      STR      r0,[sp,#0x1fc]
        0x0020a50c:    f1080802    ....    ADD      r8,r8,#2
        0x0020a510:    463b        ;F      MOV      r3,r7
        0x0020a512:    2202        ."      MOVS     r2,#2
        0x0020a514:    4984        .I      LDR      r1,[pc,#528] ; [0x20a728] = 0x8801db0
        0x0020a516:    4640        @F      MOV      r0,r8
        0x0020a518:    f5fdfaa1    ....    BL       log_buffer ; 0x7a5e
;;;893                        client_id, conn_id);
;;;894        if (client_id == gaps_client_id)
        0x0020a51c:    4983        .I      LDR      r1,[pc,#524] ; [0x20a72c] = 0x20d27c
        0x0020a51e:    4884        .H      LDR      r0,[pc,#528] ; [0x20a730] = 0x20d2ab
        0x0020a520:    eb050385    ....    ADD      r3,r5,r5,LSL #2
        0x0020a524:    788a        .x      LDRB     r2,[r1,#2]
        0x0020a526:    eb000043    ..C.    ADD      r0,r0,r3,LSL #1
        0x0020a52a:    4297        .B      CMP      r7,r2
        0x0020a52c:    d11a        ..      BNE      0x20a564 ; app_client_callback + 114
;;;895        {
;;;896            T_GAPS_CLIENT_CB_DATA *p_gaps_cb_data = (T_GAPS_CLIENT_CB_DATA *)p_data;
;;;897            switch (p_gaps_cb_data->cb_type)
        0x0020a52e:    7821        !x      LDRB     r1,[r4,#0]
        0x0020a530:    b111        ..      CBZ      r1,0x20a538 ; app_client_callback + 70
        0x0020a532:    2901        .)      CMP      r1,#1
        0x0020a534:    d117        ..      BNE      0x20a566 ; app_client_callback + 116
        0x0020a536:    e108        ..      B        0x20a74a ; app_client_callback + 600
;;;898            {
;;;899            case GAPS_CLIENT_CB_TYPE_DISC_STATE:
;;;900                switch (p_gaps_cb_data->cb_content.disc_state)
        0x0020a538:    7921        !y      LDRB     r1,[r4,#4]
        0x0020a53a:    2902        .)      CMP      r1,#2
        0x0020a53c:    d002        ..      BEQ      0x20a544 ; app_client_callback + 82
        0x0020a53e:    2903        .)      CMP      r1,#3
        0x0020a540:    d1f8        ..      BNE      0x20a534 ; app_client_callback + 66
        0x0020a542:    e0f7        ..      B        0x20a734 ; app_client_callback + 578
;;;901                {
;;;902                case DISC_GAPS_DONE:
;;;903                    app_link_table[conn_id].discovered_flags |= APP_DISCOV_GAPS_FLAG;
        0x0020a544:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020a546:    f0410101    A...    ORR      r1,r1,#1
        0x0020a54a:    7041        Ap      STRB     r1,[r0,#1]
;;;904                    app_link_table[conn_id].srv_found_flags |= APP_DISCOV_GAPS_FLAG;
        0x0020a54c:    7881        .x      LDRB     r1,[r0,#2]
        0x0020a54e:    f0410101    A...    ORR      r1,r1,#1
        0x0020a552:    7081        .p      STRB     r1,[r0,#2]
;;;905                    app_discov_services(conn_id, false);
        0x0020a554:    2100        .!      MOVS     r1,#0
        0x0020a556:    4628        (F      MOV      r0,r5
        0x0020a558:    f7fffc38    ..8.    BL       app_discov_services ; 0x209dcc
;;;906                    /* Discovery Simple BLE service procedure successfully done. */
;;;907                    APP_PRINT_INFO0("app_client_callback: discover gaps procedure done.");
        0x0020a55c:    4972        rI      LDR      r1,[pc,#456] ; [0x20a728] = 0x8801db0
        0x0020a55e:    2200        ."      MOVS     r2,#0
        0x0020a560:    3134        41      ADDS     r1,r1,#0x34
;;;908                    break;
        0x0020a562:    e212        ..      B        0x20a98a ; app_client_callback + 1176
        0x0020a564:    e126        &.      B        0x20a7b4 ; app_client_callback + 706
        0x0020a566:    e10e        ..      B        0x20a786 ; app_client_callback + 660
    $d
        0x0020a568:    08801a6c    l...    DCD    142613100
        0x0020a56c:    21103000    .0.!    DCD    554708992
        0x0020a570:    0021c7f4    ..!.    DCD    2213876
        0x0020a574:    0020d0cc    .. .    DCD    2150604
        0x0020a578:    2b2b2b2b    ++++    DCD    724249387
        0x0020a57c:    2b2b2b2b    ++++    DCD    724249387
        0x0020a580:    2b2b2b2b    ++++    DCD    724249387
        0x0020a584:    2b2b2b2b    ++++    DCD    724249387
        0x0020a588:    2b2b2b2b    ++++    DCD    724249387
        0x0020a58c:    2b2b2b2b    ++++    DCD    724249387
        0x0020a590:    2b2b2b2b    ++++    DCD    724249387
        0x0020a594:    000a0d2b    +...    DCD    658731
        0x0020a598:    21500000    ..P!    DCD    558891008
        0x0020a59c:    0020cfbc    .. .    DCD    2150332
        0x0020a5a0:    5f504147    GAP_    DCD    1599095111
        0x0020a5a4:    59544441    ADTY    DCD    1498694721
        0x0020a5a8:    465f4550    PE_F    DCD    1180648784
        0x0020a5ac:    5347414c    LAGS    DCD    1397178700
        0x0020a5b0:    7830203a    : 0x    DCD    2016419898
        0x0020a5b4:    0a0d7825    %x..    DCD    168654885
        0x0020a5b8:    00000000    ....    DCD    0
        0x0020a5bc:    5f504147    GAP_    DCD    1599095111
        0x0020a5c0:    59544441    ADTY    DCD    1498694721
        0x0020a5c4:    315f4550    PE_1    DCD    828327248
        0x0020a5c8:    54494236    6BIT    DCD    1414087222
        0x0020a5cc:    5858585f    _XXX    DCD    1482184799
        0x0020a5d0:    7830203a    : 0x    DCD    2016419898
        0x0020a5d4:    0a0d7825    %x..    DCD    168654885
        0x0020a5d8:    00000000    ....    DCD    0
        0x0020a5dc:    5f504147    GAP_    DCD    1599095111
        0x0020a5e0:    59544441    ADTY    DCD    1498694721
        0x0020a5e4:    335f4550    PE_3    DCD    861881680
        0x0020a5e8:    54494232    2BIT    DCD    1414087218
        0x0020a5ec:    5858585f    _XXX    DCD    1482184799
        0x0020a5f0:    7830203a    : 0x    DCD    2016419898
        0x0020a5f4:    0a0d7825    %x..    DCD    168654885
        0x0020a5f8:    00000000    ....    DCD    0
        0x0020a5fc:    5f504147    GAP_    DCD    1599095111
        0x0020a600:    59544441    ADTY    DCD    1498694721
        0x0020a604:    315f4550    PE_1    DCD    828327248
        0x0020a608:    49423832    28BI    DCD    1229076530
        0x0020a60c:    58585f54    T_XX    DCD    1482186580
        0x0020a610:    30203a58    X: 0    DCD    807418456
        0x0020a614:    2e382578    x%8.    DCD    775431544
        0x0020a618:    38257838    8x%8    DCD    941979704
        0x0020a61c:    2578382e    .8x%    DCD    628635694
        0x0020a620:    78382e38    8.8x    DCD    2016947768
        0x0020a624:    382e3825    %8.8    DCD    942553125
        0x0020a628:    000a0d78    x...    DCD    658808
        0x0020a62c:    5f504147    GAP_    DCD    1599095111
        0x0020a630:    59544441    ADTY    DCD    1498694721
        0x0020a634:    4c5f4550    PE_L    DCD    1281312080
        0x0020a638:    4c41434f    OCAL    DCD    1279345487
        0x0020a63c:    4d414e5f    _NAM    DCD    1296125535
        0x0020a640:    58585f45    E_XX    DCD    1482186565
        0x0020a644:    25203a58    X: %    DCD    622869080
        0x0020a648:    000a0d73    s...    DCD    658803
        0x0020a64c:    5f504147    GAP_    DCD    1599095111
        0x0020a650:    59544441    ADTY    DCD    1498694721
        0x0020a654:    505f4550    PE_P    DCD    1348420944
        0x0020a658:    5245574f    OWER    DCD    1380276047
        0x0020a65c:    56454c5f    _LEV    DCD    1447382111
        0x0020a660:    203a4c45    EL:     DCD    540691525
        0x0020a664:    78257830    0x%x    DCD    2015721520
        0x0020a668:    00000a0d    ....    DCD    2573
        0x0020a66c:    5f504147    GAP_    DCD    1599095111
        0x0020a670:    59544441    ADTY    DCD    1498694721
        0x0020a674:    535f4550    PE_S    DCD    1398752592
        0x0020a678:    49565245    ERVI    DCD    1230393925
        0x0020a67c:    445f4543    CE_D    DCD    1147094339
        0x0020a680:    3a415441    ATA:    DCD    977359937
        0x0020a684:    49555520     UUI    DCD    1230329120
        0x0020a688:    78302044    D 0x    DCD    2016419908
        0x0020a68c:    202c7825    %x,     DCD    539785253
        0x0020a690:    206e656c    len     DCD    544105836
        0x0020a694:    202c6425    %d,     DCD    539780133
        0x0020a698:    61746164    data    DCD    1635017060
        0x0020a69c:    0d622520     %b.    DCD    224535840
        0x0020a6a0:    0000000a    ....    DCD    10
        0x0020a6a4:    5f504147    GAP_    DCD    1599095111
        0x0020a6a8:    59544441    ADTY    DCD    1498694721
        0x0020a6ac:    415f4550    PE_A    DCD    1096762704
        0x0020a6b0:    41455050    PPEA    DCD    1095061584
        0x0020a6b4:    434e4152    RANC    DCD    1129202002
        0x0020a6b8:    25203a45    E: %    DCD    622869061
        0x0020a6bc:    000a0d64    d...    DCD    658788
        0x0020a6c0:    0020cf74    t. .    DCD    2150260
        0x0020a6c4:    44412020      AD    DCD    1145118752
        0x0020a6c8:    74614420     Dat    DCD    1952531488
        0x0020a6cc:    55203a61    a: U    DCD    1428175457
        0x0020a6d0:    6e61686e    nhan    DCD    1851877486
        0x0020a6d4:    64656c64    dled    DCD    1684368484
        0x0020a6d8:    74614420     Dat    DCD    1952531488
        0x0020a6dc:    203d2061    a =     DCD    540876897
        0x0020a6e0:    78257830    0x%x    DCD    2015721520
        0x0020a6e4:    00000a0d    ....    DCD    2573
        0x0020a6e8:    2d2d2d2d    ----    DCD    757935405
        0x0020a6ec:    2d2d2d2d    ----    DCD    757935405
        0x0020a6f0:    2d2d2d2d    ----    DCD    757935405
        0x0020a6f4:    2d2d2d2d    ----    DCD    757935405
        0x0020a6f8:    2d2d2d2d    ----    DCD    757935405
        0x0020a6fc:    2d2d2d2d    ----    DCD    757935405
        0x0020a700:    2d2d2d2d    ----    DCD    757935405
        0x0020a704:    0a0d2d2d    --..    DCD    168635693
        0x0020a708:    00000000    ....    DCD    0
        0x0020a70c:    34544d43    CMT4    DCD    877940035
        0x0020a710:    2d313035    501-    DCD    758198325
        0x0020a714:    30313161    a110    DCD    808530273
        0x0020a718:    32653530    05e2    DCD    845493552
        0x0020a71c:    00000000    ....    DCD    0
        0x0020a720:    08801c5c    \...    DCD    142613596
        0x0020a724:    21300000    ..0!    DCD    556793856
        0x0020a728:    08801db0    ....    DCD    142613936
        0x0020a72c:    0020d27c    |. .    DCD    2151036
        0x0020a730:    0020d2ab    .. .    DCD    2151083
    $t
;;;909                case DISC_GAPS_FAILED:
;;;910                    app_link_table[conn_id].discovered_flags |= APP_DISCOV_GAPS_FLAG;
        0x0020a734:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020a736:    f0410101    A...    ORR      r1,r1,#1
        0x0020a73a:    7041        Ap      STRB     r1,[r0,#1]
;;;911                    app_discov_services(conn_id, false);
        0x0020a73c:    2100        .!      MOVS     r1,#0
        0x0020a73e:    4628        (F      MOV      r0,r5
        0x0020a740:    f7fffb44    ..D.    BL       app_discov_services ; 0x209dcc
;;;912                    /* Discovery Request failed. */
;;;913                    APP_PRINT_INFO0("app_client_callback: discover gaps request failed.");
        0x0020a744:    2200        ."      MOVS     r2,#0
        0x0020a746:    49ab        .I      LDR      r1,[pc,#684] ; [0x20a9f4] = 0x8801e1c
;;;914                    break;
        0x0020a748:    e11f        ..      B        0x20a98a ; app_client_callback + 1176
;;;915                default:
;;;916                    break;
;;;917                }
;;;918                break;
;;;919            case GAPS_CLIENT_CB_TYPE_READ_RESULT:
;;;920                switch (p_gaps_cb_data->cb_content.read_result.type)
        0x0020a74a:    7920         y      LDRB     r0,[r4,#4]
        0x0020a74c:    b120         .      CBZ      r0,0x20a758 ; app_client_callback + 614
        0x0020a74e:    2801        .(      CMP      r0,#1
        0x0020a750:    d01a        ..      BEQ      0x20a788 ; app_client_callback + 662
        0x0020a752:    2802        .(      CMP      r0,#2
        0x0020a754:    d117        ..      BNE      0x20a786 ; app_client_callback + 660
        0x0020a756:    e022        ".      B        0x20a79e ; app_client_callback + 684
;;;921                {
;;;922                case GAPS_READ_DEVICE_NAME:
;;;923                    if (p_gaps_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a758:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x0020a75a:    b11b        ..      CBZ      r3,0x20a764 ; app_client_callback + 626
        0x0020a75c:    49a5        .I      LDR      r1,[pc,#660] ; [0x20a9f4] = 0x8801e1c
        0x0020a75e:    2201        ."      MOVS     r2,#1
        0x0020a760:    3164        d1      ADDS     r1,r1,#0x64
        0x0020a762:    e020         .      B        0x20a7a6 ; app_client_callback + 692
;;;924                    {
;;;925                        APP_PRINT_INFO1("GAPS_READ_DEVICE_NAME: device name %s.",
        0x0020a764:    f04f5005    O..P    MOV      r0,#0x21400000
        0x0020a768:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0020a76a:    f5fdfb7e    ..~.    BL       trace_string ; 0x7e6a
        0x0020a76e:    49a1        .I      LDR      r1,[pc,#644] ; [0x20a9f4] = 0x8801e1c
        0x0020a770:    4603        .F      MOV      r3,r0
        0x0020a772:    2201        ."      MOVS     r2,#1
        0x0020a774:    3138        81      ADDS     r1,r1,#0x38
        0x0020a776:    4640        @F      MOV      r0,r8
        0x0020a778:    f5fdf971    ..q.    BL       log_buffer ; 0x7a5e
;;;926                                        TRACE_STRING(p_gaps_cb_data->cb_content.read_result.data.device_name.p_value));
;;;927    					data_uart_print("#gapread#!%d!@%s@<Y>\r\n",conn_id,p_gaps_cb_data->cb_content.read_result.data.device_name.p_value);
        0x0020a77c:    4629        )F      MOV      r1,r5
        0x0020a77e:    a09e        ..      ADR      r0,{pc}+0x27a ; 0x20a9f8
        0x0020a780:    68e2        .h      LDR      r2,[r4,#0xc]
        0x0020a782:    f000fa17    ....    BL       data_uart_print ; 0x20abb4
        0x0020a786:    e121        !.      B        0x20a9cc ; app_client_callback + 1242
;;;928    
;;;929                    }
;;;930                    else
;;;931                    {
;;;932                        APP_PRINT_INFO1("GAPS_READ_DEVICE_NAME: failded cause 0x%x",
;;;933                                        p_gaps_cb_data->cb_content.read_result.cause);
;;;934                    }
;;;935                    break;
;;;936                case GAPS_READ_APPEARANCE:
;;;937                    if (p_gaps_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a788:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x0020a78a:    b11b        ..      CBZ      r3,0x20a794 ; app_client_callback + 674
        0x0020a78c:    4999        .I      LDR      r1,[pc,#612] ; [0x20a9f4] = 0x8801e1c
        0x0020a78e:    2201        ."      MOVS     r2,#1
        0x0020a790:    31bc        .1      ADDS     r1,r1,#0xbc
        0x0020a792:    e008        ..      B        0x20a7a6 ; app_client_callback + 692
;;;938                    {
;;;939                        APP_PRINT_INFO1("GAPS_READ_APPEARANCE: appearance %d",
        0x0020a794:    4997        .I      LDR      r1,[pc,#604] ; [0x20a9f4] = 0x8801e1c
        0x0020a796:    2201        ."      MOVS     r2,#1
        0x0020a798:    8923        #.      LDRH     r3,[r4,#8]
        0x0020a79a:    3194        .1      ADDS     r1,r1,#0x94
        0x0020a79c:    e003        ..      B        0x20a7a6 ; app_client_callback + 692
;;;940                                        p_gaps_cb_data->cb_content.read_result.data.appearance);
;;;941                    }
;;;942                    else
;;;943                    {
;;;944                        APP_PRINT_INFO1("GAPS_READ_APPEARANCE: failded cause 0x%x",
;;;945                                        p_gaps_cb_data->cb_content.read_result.cause);
;;;946                    }
;;;947                    break;
;;;948                case GAPS_READ_CENTRAL_ADDR_RESOLUTION:
;;;949                    if (p_gaps_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a79e:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x0020a7a0:    b11b        ..      CBZ      r3,0x20a7aa ; app_client_callback + 696
        0x0020a7a2:    499b        .I      LDR      r1,[pc,#620] ; [0x20aa10] = 0x8801f40
        0x0020a7a4:    2201        ."      MOVS     r2,#1
        0x0020a7a6:    4640        @F      MOV      r0,r8
        0x0020a7a8:    e05d        ].      B        0x20a866 ; app_client_callback + 884
;;;950                    {
;;;951                        APP_PRINT_INFO1("GAPS_READ_CENTRAL_ADDR_RESOLUTION: central_addr_res %d",
        0x0020a7aa:    4999        .I      LDR      r1,[pc,#612] ; [0x20aa10] = 0x8801f40
        0x0020a7ac:    2201        ."      MOVS     r2,#1
        0x0020a7ae:    7a23        #z      LDRB     r3,[r4,#8]
        0x0020a7b0:    393c        <9      SUBS     r1,r1,#0x3c
        0x0020a7b2:    e7f8        ..      B        0x20a7a6 ; app_client_callback + 692
;;;952                                        p_gaps_cb_data->cb_content.read_result.data.central_addr_res);
;;;953                    }
;;;954                    else
;;;955                    {
;;;956                        APP_PRINT_INFO1("GAPS_READ_CENTRAL_ADDR_RESOLUTION: failded cause 0x%x",
;;;957                                        p_gaps_cb_data->cb_content.read_result.cause);
;;;958                    }
;;;959                    break;
;;;960                default:
;;;961                    break;
;;;962                }
;;;963                break;
;;;964    
;;;965            default:
;;;966                break;
;;;967            }
;;;968        }
;;;969        else if (client_id == simple_ble_client_id)
        0x0020a7b4:    784a        Jx      LDRB     r2,[r1,#1]
        0x0020a7b6:    f8dfc25c    ..\.    LDR      r12,[pc,#604] ; [0x20aa14] = 0x21103000
        0x0020a7ba:    4297        .B      CMP      r7,r2
        0x0020a7bc:    d171        q.      BNE      0x20a8a2 ; app_client_callback + 944
;;;970        {
;;;971            T_SIMP_CLIENT_CB_DATA *p_simp_client_cb_data = (T_SIMP_CLIENT_CB_DATA *)p_data;
;;;972            uint16_t value_size;
;;;973            uint8_t *p_value;
;;;974    		char cmd_buffer[FRAMING_PAYLOAD_MAX_LENGTH];
;;;975            switch (p_simp_client_cb_data->cb_type)
        0x0020a7be:    7821        !x      LDRB     r1,[r4,#0]
        0x0020a7c0:    b139        9.      CBZ      r1,0x20a7d2 ; app_client_callback + 736
        0x0020a7c2:    4895        .H      LDR      r0,[pc,#596] ; [0x20aa18] = 0x21500000
        0x0020a7c4:    2901        .)      CMP      r1,#1
        0x0020a7c6:    d026        &.      BEQ      0x20a816 ; app_client_callback + 804
        0x0020a7c8:    2902        .)      CMP      r1,#2
        0x0020a7ca:    d054        T.      BEQ      0x20a876 ; app_client_callback + 900
        0x0020a7cc:    2903        .)      CMP      r1,#3
        0x0020a7ce:    d1da        ..      BNE      0x20a786 ; app_client_callback + 660
        0x0020a7d0:    e068        h.      B        0x20a8a4 ; app_client_callback + 946
;;;976            {
;;;977            case SIMP_CLIENT_CB_TYPE_DISC_STATE:
;;;978                switch (p_simp_client_cb_data->cb_content.disc_state)
        0x0020a7d2:    7921        !y      LDRB     r1,[r4,#4]
        0x0020a7d4:    2902        .)      CMP      r1,#2
        0x0020a7d6:    d002        ..      BEQ      0x20a7de ; app_client_callback + 748
        0x0020a7d8:    2903        .)      CMP      r1,#3
        0x0020a7da:    d1d4        ..      BNE      0x20a786 ; app_client_callback + 660
        0x0020a7dc:    e00f        ..      B        0x20a7fe ; app_client_callback + 780
;;;979                {
;;;980                case DISC_SIMP_DONE:
;;;981                    /* Discovery Simple BLE service procedure successfully done. */
;;;982                    app_link_table[conn_id].discovered_flags |= APP_DISCOV_SIMP_FLAG;
        0x0020a7de:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020a7e0:    f0410102    A...    ORR      r1,r1,#2
        0x0020a7e4:    7041        Ap      STRB     r1,[r0,#1]
;;;983                    app_link_table[conn_id].srv_found_flags |= APP_DISCOV_SIMP_FLAG;
        0x0020a7e6:    7881        .x      LDRB     r1,[r0,#2]
        0x0020a7e8:    f0410102    A...    ORR      r1,r1,#2
        0x0020a7ec:    7081        .p      STRB     r1,[r0,#2]
;;;984                    app_discov_services(conn_id, false);
        0x0020a7ee:    2100        .!      MOVS     r1,#0
        0x0020a7f0:    4628        (F      MOV      r0,r5
        0x0020a7f2:    f7fffaeb    ....    BL       app_discov_services ; 0x209dcc
;;;985                    APP_PRINT_INFO0("app_client_callback: discover simp procedure done.");
        0x0020a7f6:    4986        .I      LDR      r1,[pc,#536] ; [0x20aa10] = 0x8801f40
        0x0020a7f8:    2200        ."      MOVS     r2,#0
        0x0020a7fa:    313c        <1      ADDS     r1,r1,#0x3c
;;;986                    break;
        0x0020a7fc:    e0c5        ..      B        0x20a98a ; app_client_callback + 1176
;;;987                case DISC_SIMP_FAILED:
;;;988                    /* Discovery Request failed. */
;;;989                    app_link_table[conn_id].discovered_flags |= APP_DISCOV_SIMP_FLAG;
        0x0020a7fe:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020a800:    f0410102    A...    ORR      r1,r1,#2
        0x0020a804:    7041        Ap      STRB     r1,[r0,#1]
;;;990                    app_discov_services(conn_id, false);
        0x0020a806:    2100        .!      MOVS     r1,#0
        0x0020a808:    4628        (F      MOV      r0,r5
        0x0020a80a:    f7fffadf    ....    BL       app_discov_services ; 0x209dcc
;;;991                    APP_PRINT_INFO0("app_client_callback: discover simp request failed.");
        0x0020a80e:    4980        .I      LDR      r1,[pc,#512] ; [0x20aa10] = 0x8801f40
        0x0020a810:    2200        ."      MOVS     r2,#0
        0x0020a812:    3174        t1      ADDS     r1,r1,#0x74
;;;992                    break;
        0x0020a814:    e0b9        ..      B        0x20a98a ; app_client_callback + 1176
;;;993                default:
;;;994                    break;
;;;995                }
;;;996                break;
;;;997            case SIMP_CLIENT_CB_TYPE_READ_RESULT:
;;;998                switch (p_simp_client_cb_data->cb_content.read_result.type)
        0x0020a816:    7921        !y      LDRB     r1,[r4,#4]
        0x0020a818:    b121        !.      CBZ      r1,0x20a824 ; app_client_callback + 818
        0x0020a81a:    2901        .)      CMP      r1,#1
        0x0020a81c:    d013        ..      BEQ      0x20a846 ; app_client_callback + 852
        0x0020a81e:    2902        .)      CMP      r1,#2
        0x0020a820:    d1b1        ..      BNE      0x20a786 ; app_client_callback + 660
        0x0020a822:    e01a        ..      B        0x20a85a ; app_client_callback + 872
;;;999                {
;;;1000               case SIMP_READ_V1_READ:
;;;1001                   if (p_simp_client_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a824:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x0020a826:    b11b        ..      CBZ      r3,0x20a830 ; app_client_callback + 830
        0x0020a828:    4979        yI      LDR      r1,[pc,#484] ; [0x20aa10] = 0x8801f40
        0x0020a82a:    2201        ."      MOVS     r2,#1
        0x0020a82c:    31dc        .1      ADDS     r1,r1,#0xdc
        0x0020a82e:    e019        ..      B        0x20a864 ; app_client_callback + 882
;;;1002                   {
;;;1003                       value_size = p_simp_client_cb_data->cb_content.read_result.data.v1_read.value_size;
        0x0020a830:    8925        %.      LDRH     r5,[r4,#8]
;;;1004                       p_value = p_simp_client_cb_data->cb_content.read_result.data.v1_read.p_value;
;;;1005                       APP_PRINT_INFO2("SIMP_READ_V1_READ: value_size %d, value %b",
        0x0020a832:    68e2        .h      LDR      r2,[r4,#0xc]
        0x0020a834:    4629        )F      MOV      r1,r5
        0x0020a836:    f5fdfb68    ..h.    BL       trace_binary ; 0x7f0a
        0x0020a83a:    4975        uI      LDR      r1,[pc,#468] ; [0x20aa10] = 0x8801f40
        0x0020a83c:    2202        ."      MOVS     r2,#2
        0x0020a83e:    462b        +F      MOV      r3,r5
        0x0020a840:    31ac        .1      ADDS     r1,r1,#0xac
        0x0020a842:    9000        ..      STR      r0,[sp,#0]
        0x0020a844:    e070        p.      B        0x20a928 ; app_client_callback + 1078
;;;1006                                       value_size, TRACE_BINARY(value_size, p_value));
;;;1007                   }
;;;1008                   else
;;;1009                   {
;;;1010                       APP_PRINT_ERROR1("SIMP_READ_V1_READ: failed cause 0x%x",
;;;1011                                        p_simp_client_cb_data->cb_content.read_result.cause);
;;;1012                   }
;;;1013                   break;
;;;1014               case SIMP_READ_V3_NOTIFY_CCCD:
;;;1015                   if (p_simp_client_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a846:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x0020a848:    b113        ..      CBZ      r3,0x20a850 ; app_client_callback + 862
        0x0020a84a:    2201        ."      MOVS     r2,#1
        0x0020a84c:    4973        sI      LDR      r1,[pc,#460] ; [0x20aa1c] = 0x880206c
        0x0020a84e:    e009        ..      B        0x20a864 ; app_client_callback + 882
;;;1016                   {
;;;1017                       APP_PRINT_INFO1("SIMP_READ_V3_NOTIFY_CCCD: notify %d",
        0x0020a850:    4972        rI      LDR      r1,[pc,#456] ; [0x20aa1c] = 0x880206c
        0x0020a852:    2201        ."      MOVS     r2,#1
        0x0020a854:    7a23        #z      LDRB     r3,[r4,#8]
        0x0020a856:    3928        (9      SUBS     r1,r1,#0x28
        0x0020a858:    e7a5        ..      B        0x20a7a6 ; app_client_callback + 692
;;;1018                                       p_simp_client_cb_data->cb_content.read_result.data.v3_notify_cccd);
;;;1019                   }
;;;1020                   else
;;;1021                   {
;;;1022                       APP_PRINT_ERROR1("SIMP_READ_V3_NOTIFY_CCCD: failed cause 0x%x",
;;;1023                                        p_simp_client_cb_data->cb_content.read_result.cause);
;;;1024                   };
;;;1025                   break;
;;;1026               case SIMP_READ_V4_INDICATE_CCCD:
;;;1027                   if (p_simp_client_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a85a:    8a23        #.      LDRH     r3,[r4,#0x10]
        0x0020a85c:    b133        3.      CBZ      r3,0x20a86c ; app_client_callback + 890
        0x0020a85e:    496f        oI      LDR      r1,[pc,#444] ; [0x20aa1c] = 0x880206c
        0x0020a860:    2201        ."      MOVS     r2,#1
        0x0020a862:    315c        \1      ADDS     r1,r1,#0x5c
        0x0020a864:    4660        `F      MOV      r0,r12
        0x0020a866:    f5fdf8fa    ....    BL       log_buffer ; 0x7a5e
        0x0020a86a:    e0af        ..      B        0x20a9cc ; app_client_callback + 1242
;;;1028                   {
;;;1029                       APP_PRINT_INFO1("SIMP_READ_V4_INDICATE_CCCD: indicate %d",
        0x0020a86c:    496b        kI      LDR      r1,[pc,#428] ; [0x20aa1c] = 0x880206c
        0x0020a86e:    2201        ."      MOVS     r2,#1
        0x0020a870:    7a23        #z      LDRB     r3,[r4,#8]
        0x0020a872:    3130        01      ADDS     r1,r1,#0x30
        0x0020a874:    e797        ..      B        0x20a7a6 ; app_client_callback + 692
;;;1030                                       p_simp_client_cb_data->cb_content.read_result.data.v4_indicate_cccd);
;;;1031                   }
;;;1032                   else
;;;1033                   {
;;;1034                       APP_PRINT_ERROR1("SIMP_READ_V4_INDICATE_CCCD: failed cause 0x%x",
;;;1035                                        p_simp_client_cb_data->cb_content.read_result.cause);
;;;1036                   };
;;;1037                   break;
;;;1038   
;;;1039               default:
;;;1040                   break;
;;;1041               }
;;;1042               break;
;;;1043           case SIMP_CLIENT_CB_TYPE_WRITE_RESULT:
;;;1044               switch (p_simp_client_cb_data->cb_content.write_result.type)
        0x0020a876:    7920         y      LDRB     r0,[r4,#4]
        0x0020a878:    b120         .      CBZ      r0,0x20a884 ; app_client_callback + 914
        0x0020a87a:    2801        .(      CMP      r0,#1
        0x0020a87c:    d007        ..      BEQ      0x20a88e ; app_client_callback + 924
        0x0020a87e:    2802        .(      CMP      r0,#2
        0x0020a880:    d147        G.      BNE      0x20a912 ; app_client_callback + 1056
        0x0020a882:    e009        ..      B        0x20a898 ; app_client_callback + 934
;;;1045               {
;;;1046               case SIMP_WRITE_V2_WRITE:
;;;1047                   APP_PRINT_INFO1("SIMP_WRITE_V2_WRITE: write result 0x%x",
        0x0020a884:    4965        eI      LDR      r1,[pc,#404] ; [0x20aa1c] = 0x880206c
        0x0020a886:    2201        ."      MOVS     r2,#1
        0x0020a888:    88e3        ..      LDRH     r3,[r4,#6]
        0x0020a88a:    3190        .1      ADDS     r1,r1,#0x90
;;;1048                                   p_simp_client_cb_data->cb_content.write_result.cause);
;;;1049                   break;
        0x0020a88c:    e78b        ..      B        0x20a7a6 ; app_client_callback + 692
;;;1050               case SIMP_WRITE_V3_NOTIFY_CCCD:
;;;1051                   APP_PRINT_INFO1("SIMP_WRITE_V3_NOTIFY_CCCD: write result 0x%x",
        0x0020a88e:    4963        cI      LDR      r1,[pc,#396] ; [0x20aa1c] = 0x880206c
        0x0020a890:    2201        ."      MOVS     r2,#1
        0x0020a892:    88e3        ..      LDRH     r3,[r4,#6]
        0x0020a894:    31bc        .1      ADDS     r1,r1,#0xbc
;;;1052                                   p_simp_client_cb_data->cb_content.write_result.cause);
;;;1053                   break;
        0x0020a896:    e786        ..      B        0x20a7a6 ; app_client_callback + 692
;;;1054               case SIMP_WRITE_V4_INDICATE_CCCD:
;;;1055                   APP_PRINT_INFO1("SIMP_WRITE_V4_INDICATE_CCCD: write result 0x%x",
        0x0020a898:    4960        `I      LDR      r1,[pc,#384] ; [0x20aa1c] = 0x880206c
        0x0020a89a:    2201        ."      MOVS     r2,#1
        0x0020a89c:    88e3        ..      LDRH     r3,[r4,#6]
        0x0020a89e:    31ec        .1      ADDS     r1,r1,#0xec
;;;1056                                   p_simp_client_cb_data->cb_content.write_result.cause);
;;;1057                   break;
        0x0020a8a0:    e781        ..      B        0x20a7a6 ; app_client_callback + 692
        0x0020a8a2:    e045        E.      B        0x20a930 ; app_client_callback + 1086
;;;1058               default:
;;;1059                   break;
;;;1060               }
;;;1061               break;
;;;1062           case SIMP_CLIENT_CB_TYPE_NOTIF_IND_RESULT:
;;;1063               switch (p_simp_client_cb_data->cb_content.notif_ind_data.type)
        0x0020a8a4:    7921        !y      LDRB     r1,[r4,#4]
        0x0020a8a6:    b111        ..      CBZ      r1,0x20a8ae ; app_client_callback + 956
        0x0020a8a8:    2901        .)      CMP      r1,#1
        0x0020a8aa:    d132        2.      BNE      0x20a912 ; app_client_callback + 1056
        0x0020a8ac:    e032        2.      B        0x20a914 ; app_client_callback + 1058
;;;1064               {
;;;1065               case SIMP_V3_NOTIFY:
;;;1066                   value_size = p_simp_client_cb_data->cb_content.notif_ind_data.data.value_size;
        0x0020a8ae:    8927        '.      LDRH     r7,[r4,#8]
;;;1067                   p_value = p_simp_client_cb_data->cb_content.notif_ind_data.data.p_value;
        0x0020a8b0:    68e4        .h      LDR      r4,[r4,#0xc]
;;;1068   //by vsop for notify				
;;;1069                   APP_PRINT_INFO2("SIMP_V3_NOTIFY: value_size %d, value %b",
        0x0020a8b2:    4639        9F      MOV      r1,r7
        0x0020a8b4:    4622        "F      MOV      r2,r4
        0x0020a8b6:    f5fdfb28    ..(.    BL       trace_binary ; 0x7f0a
        0x0020a8ba:    9000        ..      STR      r0,[sp,#0]
        0x0020a8bc:    463b        ;F      MOV      r3,r7
        0x0020a8be:    2202        ."      MOVS     r2,#2
        0x0020a8c0:    4957        WI      LDR      r1,[pc,#348] ; [0x20aa20] = 0x880218c
        0x0020a8c2:    4640        @F      MOV      r0,r8
        0x0020a8c4:    f5fdf8cb    ....    BL       log_buffer ; 0x7a5e
;;;1070                                   value_size, TRACE_BINARY(value_size, p_value));
;;;1071   				#if 0
;;;1072   				data_uart_print("#notify#!%d![]@%d{ ",conn_id,value_size);
;;;1073   				for(uint16_t i=0;i<value_size;i++)
;;;1074   				{
;;;1075   					sprintf(temp,"%02X",p_value[i]);
;;;1076   					data_uart_print("%s ",temp);					
;;;1077   				}
;;;1078   				data_uart_print("}\r\n");				
;;;1079   				#else
;;;1080   				if(value_size>FRAMING_PAYLOAD_MAX_LENGTH)value_size=FRAMING_PAYLOAD_MAX_LENGTH;
        0x0020a8c8:    f44f70fb    O..p    MOV      r0,#0x1f6
        0x0020a8cc:    4287        .B      CMP      r7,r0
        0x0020a8ce:    d900        ..      BLS      0x20a8d2 ; app_client_callback + 992
        0x0020a8d0:    4607        .F      MOV      r7,r0
;;;1081   				sprintf(cmd_buffer,"#notify#!%d![]@%d{ ",conn_id,value_size);
        0x0020a8d2:    463b        ;F      MOV      r3,r7
        0x0020a8d4:    462a        *F      MOV      r2,r5
        0x0020a8d6:    a153        S.      ADR      r1,{pc}+0x14e ; 0x20aa24
        0x0020a8d8:    a801        ..      ADD      r0,sp,#4
        0x0020a8da:    f011fe81    ....    BL       __2sprintf ; 0x21c5e0
;;;1082   				for(uint16_t i=0;i<value_size;i++)
        0x0020a8de:    2500        .%      MOVS     r5,#0
        0x0020a8e0:    e00a        ..      B        0x20a8f8 ; app_client_callback + 1030
        0x0020a8e2:    5d62        b]      LDRB     r2,[r4,r5]
        0x0020a8e4:    a154        T.      ADR      r1,{pc}+0x154 ; 0x20aa38
        0x0020a8e6:    a87f        ..      ADD      r0,sp,#0x1fc
        0x0020a8e8:    f011fe7a    ..z.    BL       __2sprintf ; 0x21c5e0
        0x0020a8ec:    a97f        ..      ADD      r1,sp,#0x1fc
        0x0020a8ee:    a801        ..      ADD      r0,sp,#4
        0x0020a8f0:    f011ff29    ..).    BL       strcat ; 0x21c746
        0x0020a8f4:    1c6d        m.      ADDS     r5,r5,#1
        0x0020a8f6:    b2ad        ..      UXTH     r5,r5
        0x0020a8f8:    42bd        .B      CMP      r5,r7
        0x0020a8fa:    d3f2        ..      BCC      0x20a8e2 ; app_client_callback + 1008
;;;1083   				{
;;;1084   					sprintf(temp,"%02X",p_value[i]);
;;;1085   					strcat(cmd_buffer,temp);					
;;;1086   				}
;;;1087   				strcat(cmd_buffer,"}\r\n");
        0x0020a8fc:    a150        P.      ADR      r1,{pc}+0x144 ; 0x20aa40
        0x0020a8fe:    a801        ..      ADD      r0,sp,#4
        0x0020a900:    f011ff21    ..!.    BL       strcat ; 0x21c746
;;;1088   				FramingWrapFrameUartPrint((uint8_t *)cmd_buffer, strlen(cmd_buffer));
        0x0020a904:    a801        ..      ADD      r0,sp,#4
        0x0020a906:    f64ffaa9    O...    BL       strlen ; 0x59e5c
        0x0020a90a:    b281        ..      UXTH     r1,r0
        0x0020a90c:    a801        ..      ADD      r0,sp,#4
        0x0020a90e:    f000f96c    ..l.    BL       FramingWrapFrameUartPrint ; 0x20abea
;;;1089   				#endif
;;;1090                   break;
        0x0020a912:    e05b        [.      B        0x20a9cc ; app_client_callback + 1242
;;;1091               case SIMP_V4_INDICATE:
;;;1092                   value_size = p_simp_client_cb_data->cb_content.notif_ind_data.data.value_size;
        0x0020a914:    8925        %.      LDRH     r5,[r4,#8]
;;;1093                   p_value = p_simp_client_cb_data->cb_content.notif_ind_data.data.p_value;
;;;1094                   APP_PRINT_INFO2("SIMP_V4_INDICATE: value_size %d, value %b",
        0x0020a916:    68e2        .h      LDR      r2,[r4,#0xc]
        0x0020a918:    4629        )F      MOV      r1,r5
        0x0020a91a:    f5fdfaf6    ....    BL       trace_binary ; 0x7f0a
        0x0020a91e:    4940        @I      LDR      r1,[pc,#256] ; [0x20aa20] = 0x880218c
        0x0020a920:    2202        ."      MOVS     r2,#2
        0x0020a922:    462b        +F      MOV      r3,r5
        0x0020a924:    312c        ,1      ADDS     r1,r1,#0x2c
        0x0020a926:    9000        ..      STR      r0,[sp,#0]
        0x0020a928:    4640        @F      MOV      r0,r8
        0x0020a92a:    f5fdf898    ....    BL       log_buffer ; 0x7a5e
        0x0020a92e:    e04d        M.      B        0x20a9cc ; app_client_callback + 1242
;;;1095                                   value_size, TRACE_BINARY(value_size, p_value));
;;;1096                   break;
;;;1097               default:
;;;1098                   break;
;;;1099               }
;;;1100               break;
;;;1101   
;;;1102           default:
;;;1103               break;
;;;1104           }
;;;1105       }
;;;1106       else if (client_id == bas_client_id)
        0x0020a930:    78c9        .x      LDRB     r1,[r1,#3]
        0x0020a932:    428f        .B      CMP      r7,r1
        0x0020a934:    d14a        J.      BNE      0x20a9cc ; app_client_callback + 1242
;;;1107       {
;;;1108           T_BAS_CLIENT_CB_DATA *p_bas_cb_data = (T_BAS_CLIENT_CB_DATA *)p_data;
;;;1109           switch (p_bas_cb_data->cb_type)
        0x0020a936:    7821        !x      LDRB     r1,[r4,#0]
        0x0020a938:    b131        1.      CBZ      r1,0x20a948 ; app_client_callback + 1110
        0x0020a93a:    2901        .)      CMP      r1,#1
        0x0020a93c:    d029        ).      BEQ      0x20a992 ; app_client_callback + 1184
        0x0020a93e:    2902        .)      CMP      r1,#2
        0x0020a940:    d040        @.      BEQ      0x20a9c4 ; app_client_callback + 1234
        0x0020a942:    2903        .)      CMP      r1,#3
        0x0020a944:    d142        B.      BNE      0x20a9cc ; app_client_callback + 1242
        0x0020a946:    e050        P.      B        0x20a9ea ; app_client_callback + 1272
;;;1110           {
;;;1111           case BAS_CLIENT_CB_TYPE_DISC_STATE:
;;;1112               switch (p_bas_cb_data->cb_content.disc_state)
        0x0020a948:    78a1        .x      LDRB     r1,[r4,#2]
        0x0020a94a:    2902        .)      CMP      r1,#2
        0x0020a94c:    d002        ..      BEQ      0x20a954 ; app_client_callback + 1122
        0x0020a94e:    2903        .)      CMP      r1,#3
        0x0020a950:    d13c        <.      BNE      0x20a9cc ; app_client_callback + 1242
        0x0020a952:    e00f        ..      B        0x20a974 ; app_client_callback + 1154
;;;1113               {
;;;1114               case DISC_BAS_DONE:
;;;1115                   /* Discovery BAS procedure successfully done. */
;;;1116                   app_link_table[conn_id].discovered_flags |= APP_DISCOV_BAS_FLAG;
        0x0020a954:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020a956:    f0410104    A...    ORR      r1,r1,#4
        0x0020a95a:    7041        Ap      STRB     r1,[r0,#1]
;;;1117                   app_link_table[conn_id].srv_found_flags |= APP_DISCOV_BAS_FLAG;
        0x0020a95c:    7881        .x      LDRB     r1,[r0,#2]
        0x0020a95e:    f0410104    A...    ORR      r1,r1,#4
        0x0020a962:    7081        .p      STRB     r1,[r0,#2]
;;;1118                   app_discov_services(conn_id, false);
        0x0020a964:    2100        .!      MOVS     r1,#0
        0x0020a966:    4628        (F      MOV      r0,r5
        0x0020a968:    f7fffa30    ..0.    BL       app_discov_services ; 0x209dcc
;;;1119                   APP_PRINT_INFO0("app_client_callback: discover bas procedure done");
        0x0020a96c:    492c        ,I      LDR      r1,[pc,#176] ; [0x20aa20] = 0x880218c
        0x0020a96e:    2200        ."      MOVS     r2,#0
        0x0020a970:    315c        \1      ADDS     r1,r1,#0x5c
;;;1120                   break;
        0x0020a972:    e00a        ..      B        0x20a98a ; app_client_callback + 1176
;;;1121               case DISC_BAS_FAILED:
;;;1122                   /* Discovery Request failed. */
;;;1123                   app_link_table[conn_id].discovered_flags |= APP_DISCOV_BAS_FLAG;
        0x0020a974:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020a976:    f0410104    A...    ORR      r1,r1,#4
        0x0020a97a:    7041        Ap      STRB     r1,[r0,#1]
;;;1124                   app_discov_services(conn_id, false);
        0x0020a97c:    2100        .!      MOVS     r1,#0
        0x0020a97e:    4628        (F      MOV      r0,r5
        0x0020a980:    f7fffa24    ..$.    BL       app_discov_services ; 0x209dcc
;;;1125                   APP_PRINT_INFO0("app_client_callback: discover bas procedure failed");
        0x0020a984:    4926        &I      LDR      r1,[pc,#152] ; [0x20aa20] = 0x880218c
        0x0020a986:    2200        ."      MOVS     r2,#0
        0x0020a988:    3190        .1      ADDS     r1,r1,#0x90
        0x0020a98a:    4640        @F      MOV      r0,r8
        0x0020a98c:    f5fdf867    ..g.    BL       log_buffer ; 0x7a5e
        0x0020a990:    e01c        ..      B        0x20a9cc ; app_client_callback + 1242
;;;1126                   break;
;;;1127               default:
;;;1128                   break;
;;;1129               }
;;;1130               break;
;;;1131           case BAS_CLIENT_CB_TYPE_READ_RESULT:
;;;1132               switch (p_bas_cb_data->cb_content.read_result.type)
        0x0020a992:    78a0        .x      LDRB     r0,[r4,#2]
        0x0020a994:    b160        `.      CBZ      r0,0x20a9b0 ; app_client_callback + 1214
        0x0020a996:    2801        .(      CMP      r0,#1
        0x0020a998:    d118        ..      BNE      0x20a9cc ; app_client_callback + 1242
;;;1133               {
;;;1134               case BAS_READ_BATTERY_LEVEL:
;;;1135                   if (p_bas_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a99a:    88a3        ..      LDRH     r3,[r4,#4]
        0x0020a99c:    b11b        ..      CBZ      r3,0x20a9a6 ; app_client_callback + 1204
        0x0020a99e:    4920         I      LDR      r1,[pc,#128] ; [0x20aa20] = 0x880218c
        0x0020a9a0:    2201        ."      MOVS     r2,#1
        0x0020a9a2:    31f4        .1      ADDS     r1,r1,#0xf4
        0x0020a9a4:    e75e        ^.      B        0x20a864 ; app_client_callback + 882
;;;1136                   {
;;;1137                       APP_PRINT_INFO1("BAS_READ_BATTERY_LEVEL: battery level %d",
        0x0020a9a6:    491e        .I      LDR      r1,[pc,#120] ; [0x20aa20] = 0x880218c
        0x0020a9a8:    2201        ."      MOVS     r2,#1
        0x0020a9aa:    78e3        .x      LDRB     r3,[r4,#3]
        0x0020a9ac:    31c8        .1      ADDS     r1,r1,#0xc8
        0x0020a9ae:    e6fa        ..      B        0x20a7a6 ; app_client_callback + 692
;;;1138                                       p_bas_cb_data->cb_content.read_result.data.battery_level);
;;;1139                   }
;;;1140                   else
;;;1141                   {
;;;1142                       APP_PRINT_ERROR1("BAS_READ_BATTERY_LEVEL: failed cause 0x%x",
;;;1143                                        p_bas_cb_data->cb_content.read_result.cause);
;;;1144                   }
;;;1145                   break;
;;;1146               case BAS_READ_NOTIFY:
;;;1147                   if (p_bas_cb_data->cb_content.read_result.cause == GAP_SUCCESS)
        0x0020a9b0:    88a3        ..      LDRH     r3,[r4,#4]
        0x0020a9b2:    b113        ..      CBZ      r3,0x20a9ba ; app_client_callback + 1224
        0x0020a9b4:    2201        ."      MOVS     r2,#1
        0x0020a9b6:    4923        #I      LDR      r1,[pc,#140] ; [0x20aa44] = 0x88022d0
        0x0020a9b8:    e754        T.      B        0x20a864 ; app_client_callback + 882
;;;1148                   {
;;;1149                       APP_PRINT_INFO1("BAS_READ_NOTIFY: notify %d",
        0x0020a9ba:    4922        "I      LDR      r1,[pc,#136] ; [0x20aa44] = 0x88022d0
        0x0020a9bc:    2201        ."      MOVS     r2,#1
        0x0020a9be:    78e3        .x      LDRB     r3,[r4,#3]
        0x0020a9c0:    3920         9      SUBS     r1,r1,#0x20
        0x0020a9c2:    e6f0        ..      B        0x20a7a6 ; app_client_callback + 692
;;;1150                                       p_bas_cb_data->cb_content.read_result.data.notify);
;;;1151                   }
;;;1152                   else
;;;1153                   {
;;;1154                       APP_PRINT_ERROR1("BAS_READ_NOTIFY: failed cause 0x%x",
;;;1155                                        p_bas_cb_data->cb_content.read_result.cause);
;;;1156                   };
;;;1157                   break;
;;;1158   
;;;1159               default:
;;;1160                   break;
;;;1161               }
;;;1162               break;
;;;1163           case BAS_CLIENT_CB_TYPE_WRITE_RESULT:
;;;1164               switch (p_bas_cb_data->cb_content.write_result.type)
        0x0020a9c4:    78a0        .x      LDRB     r0,[r4,#2]
        0x0020a9c6:    b130        0.      CBZ      r0,0x20a9d6 ; app_client_callback + 1252
        0x0020a9c8:    2801        .(      CMP      r0,#1
        0x0020a9ca:    d009        ..      BEQ      0x20a9e0 ; app_client_callback + 1262
        0x0020a9cc:    f50d7d00    ...}    ADD      sp,sp,#0x200
        0x0020a9d0:    4630        0F      MOV      r0,r6
        0x0020a9d2:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;1165               {
;;;1166               case BAS_WRITE_NOTIFY_ENABLE:
;;;1167                   APP_PRINT_INFO1("BAS_WRITE_NOTIFY_ENABLE: write result 0x%x",
        0x0020a9d6:    491b        .I      LDR      r1,[pc,#108] ; [0x20aa44] = 0x88022d0
        0x0020a9d8:    2201        ."      MOVS     r2,#1
        0x0020a9da:    88a3        ..      LDRH     r3,[r4,#4]
        0x0020a9dc:    3128        (1      ADDS     r1,r1,#0x28
;;;1168                                   p_bas_cb_data->cb_content.write_result.cause);
;;;1169                   break;
        0x0020a9de:    e6e2        ..      B        0x20a7a6 ; app_client_callback + 692
;;;1170               case BAS_WRITE_NOTIFY_DISABLE:
;;;1171                   APP_PRINT_INFO1("BAS_WRITE_NOTIFY_DISABLE: write result 0x%x",
        0x0020a9e0:    4918        .I      LDR      r1,[pc,#96] ; [0x20aa44] = 0x88022d0
        0x0020a9e2:    2201        ."      MOVS     r2,#1
        0x0020a9e4:    88a3        ..      LDRH     r3,[r4,#4]
        0x0020a9e6:    3158        X1      ADDS     r1,r1,#0x58
;;;1172                                   p_bas_cb_data->cb_content.write_result.cause);
;;;1173                   break;
        0x0020a9e8:    e6dd        ..      B        0x20a7a6 ; app_client_callback + 692
;;;1174               default:
;;;1175                   break;
;;;1176               }
;;;1177               break;
;;;1178           case BAS_CLIENT_CB_TYPE_NOTIF_IND_RESULT:
;;;1179               APP_PRINT_INFO1("BAS_CLIENT_CB_TYPE_NOTIF_IND_RESULT: battery level %d",
        0x0020a9ea:    4916        .I      LDR      r1,[pc,#88] ; [0x20aa44] = 0x88022d0
        0x0020a9ec:    2201        ."      MOVS     r2,#1
        0x0020a9ee:    78a3        .x      LDRB     r3,[r4,#2]
        0x0020a9f0:    3188        .1      ADDS     r1,r1,#0x88
;;;1180                               p_bas_cb_data->cb_content.notify_data.battery_level);
;;;1181               break;
        0x0020a9f2:    e6d8        ..      B        0x20a7a6 ; app_client_callback + 692
    $d
        0x0020a9f4:    08801e1c    ....    DCD    142614044
        0x0020a9f8:    70616723    #gap    DCD    1885431587
        0x0020a9fc:    64616572    read    DCD    1684104562
        0x0020aa00:    64252123    #!%d    DCD    1680154915
        0x0020aa04:    73254021    !@%s    DCD    1931821089
        0x0020aa08:    3e593c40    @<Y>    DCD    1046035520
        0x0020aa0c:    00000a0d    ....    DCD    2573
        0x0020aa10:    08801f40    @...    DCD    142614336
        0x0020aa14:    21103000    .0.!    DCD    554708992
        0x0020aa18:    21500000    ..P!    DCD    558891008
        0x0020aa1c:    0880206c    l ..    DCD    142614636
        0x0020aa20:    0880218c    .!..    DCD    142614924
        0x0020aa24:    746f6e23    #not    DCD    1953459747
        0x0020aa28:    23796669    ify#    DCD    595158633
        0x0020aa2c:    21642521    !%d!    DCD    560211233
        0x0020aa30:    25405d5b    []@%    DCD    624975195
        0x0020aa34:    00207b64    d{ .    DCD    2128740
        0x0020aa38:    58323025    %02X    DCD    1479684133
        0x0020aa3c:    00000000    ....    DCD    0
        0x0020aa40:    000a0d7d    }...    DCD    658813
        0x0020aa44:    088022d0    ."..    DCD    142615248
    $t
    .text
    data_uart_send_char
;;; ..\..\..\src\mcu\module\data_uart_cmd\data_uart.c
;;;19     {
        0x0020aa48:    b531        1.      PUSH     {r0,r4,r5,lr}
;;;20         UART_SendData(UART, (uint8_t *)&ch, 1);
        0x0020aa4a:    4cc2        .L      LDR      r4,[pc,#776] ; [0x20ad54] = 0x40012000
        0x0020aa4c:    2201        ."      MOVS     r2,#1
        0x0020aa4e:    4669        iF      MOV      r1,sp
        0x0020aa50:    4620         F      MOV      r0,r4
        0x0020aa52:    f7fdfbe2    ....    BL       UART_SendData ; 0x20821a
;;;21         /* wait tx fifo empty */
;;;22         while (UART_GetFlagState(UART, UART_FLAG_THR_TSR_EMPTY) != SET);
        0x0020aa56:    2140        @!      MOVS     r1,#0x40
        0x0020aa58:    4620         F      MOV      r0,r4
        0x0020aa5a:    f7fdfc11    ....    BL       UART_GetFlagState ; 0x208280
        0x0020aa5e:    2801        .(      CMP      r0,#1
        0x0020aa60:    d1f9        ..      BNE      0x20aa56 ; data_uart_send_char + 14
;;;23     
;;;24         return ch;
        0x0020aa62:    9800        ..      LDR      r0,[sp,#0]
;;;25     }
        0x0020aa64:    bd38        8.      POP      {r3-r5,pc}
    data_uart_vsprintf
;;;26     
;;;27     int data_uart_vsprintf(char *buf, const char *fmt, const int *dp)
;;;28     {
        0x0020aa66:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x0020aa6a:    b085        ..      SUB      sp,sp,#0x14
        0x0020aa6c:    4616        .F      MOV      r6,r2
        0x0020aa6e:    460f        .F      MOV      r7,r1
        0x0020aa70:    4681        .F      MOV      r9,r0
        0x0020aa72:    4605        .F      MOV      r5,r0
        0x0020aa74:    e091        ..      B        0x20ab9a ; data_uart_vsprintf + 308
;;;29         char *p, *s;
;;;30     
;;;31         s = buf;
;;;32         for (; *fmt != '\0'; ++fmt)
;;;33         {
;;;34             if (*fmt != '%')
        0x0020aa76:    2825        %(      CMP      r0,#0x25
        0x0020aa78:    d008        ..      BEQ      0x20aa8c ; data_uart_vsprintf + 38
;;;35             {
;;;36                 buf ? *s++ = *fmt : data_uart_send_char(*fmt);
        0x0020aa7a:    f1b90f00    ....    CMP      r9,#0
        0x0020aa7e:    d002        ..      BEQ      0x20aa86 ; data_uart_vsprintf + 32
        0x0020aa80:    f8050b01    ....    STRB     r0,[r5],#1
        0x0020aa84:    e088        ..      B        0x20ab98 ; data_uart_vsprintf + 306
        0x0020aa86:    f7ffffdf    ....    BL       data_uart_send_char ; 0x20aa48
        0x0020aa8a:    e085        ..      B        0x20ab98 ; data_uart_vsprintf + 306
;;;37                 continue;
;;;38             }
;;;39             if (*++fmt == 's')
        0x0020aa8c:    f8170f01    ....    LDRB     r0,[r7,#1]!
        0x0020aa90:    2873        s(      CMP      r0,#0x73
        0x0020aa92:    d021        !.      BEQ      0x20aad8 ; data_uart_vsprintf + 114
        0x0020aa94:    211c        .!      MOVS     r1,#0x1c
        0x0020aa96:    f1a00230    ..0.    SUB      r2,r0,#0x30
        0x0020aa9a:    466c        lF      MOV      r4,sp
        0x0020aa9c:    2a09        .*      CMP      r2,#9
        0x0020aa9e:    d80d        ..      BHI      0x20aabc ; data_uart_vsprintf + 86
        0x0020aaa0:    2100        .!      MOVS     r1,#0
        0x0020aaa2:    eb010181    ....    ADD      r1,r1,r1,LSL #2
        0x0020aaa6:    eb000141    ..A.    ADD      r1,r0,r1,LSL #1
        0x0020aaaa:    f8170f01    ....    LDRB     r0,[r7,#1]!
        0x0020aaae:    3930        09      SUBS     r1,r1,#0x30
        0x0020aab0:    f1a00230    ..0.    SUB      r2,r0,#0x30
        0x0020aab4:    2a09        .*      CMP      r2,#9
        0x0020aab6:    d9f4        ..      BLS      0x20aaa2 ; data_uart_vsprintf + 60
        0x0020aab8:    0089        ..      LSLS     r1,r1,#2
        0x0020aaba:    1f09        ..      SUBS     r1,r1,#4
        0x0020aabc:    b2c0        ..      UXTB     r0,r0
        0x0020aabe:    2878        x(      CMP      r0,#0x78
        0x0020aac0:    d019        ..      BEQ      0x20aaf6 ; data_uart_vsprintf + 144
        0x0020aac2:    2858        X(      CMP      r0,#0x58
        0x0020aac4:    d017        ..      BEQ      0x20aaf6 ; data_uart_vsprintf + 144
        0x0020aac6:    2870        p(      CMP      r0,#0x70
        0x0020aac8:    d015        ..      BEQ      0x20aaf6 ; data_uart_vsprintf + 144
        0x0020aaca:    2850        P(      CMP      r0,#0x50
        0x0020aacc:    d013        ..      BEQ      0x20aaf6 ; data_uart_vsprintf + 144
        0x0020aace:    2864        d(      CMP      r0,#0x64
        0x0020aad0:    d02e        ..      BEQ      0x20ab30 ; data_uart_vsprintf + 202
        0x0020aad2:    2863        c(      CMP      r0,#0x63
        0x0020aad4:    d04b        K.      BEQ      0x20ab6e ; data_uart_vsprintf + 264
        0x0020aad6:    e04c        L.      B        0x20ab72 ; data_uart_vsprintf + 268
;;;40             {
;;;41                 for (p = (char *)*dp++; *p != '\0'; p++)
        0x0020aad8:    ce10        ..      LDM      r6!,{r4}
        0x0020aada:    e008        ..      B        0x20aaee ; data_uart_vsprintf + 136
;;;42                 {
;;;43                     buf ? *s++ = *p : data_uart_send_char(*p);
        0x0020aadc:    f1b90f00    ....    CMP      r9,#0
        0x0020aae0:    d002        ..      BEQ      0x20aae8 ; data_uart_vsprintf + 130
        0x0020aae2:    f8050b01    ....    STRB     r0,[r5],#1
        0x0020aae6:    e001        ..      B        0x20aaec ; data_uart_vsprintf + 134
        0x0020aae8:    f7ffffae    ....    BL       data_uart_send_char ; 0x20aa48
        0x0020aaec:    1c64        d.      ADDS     r4,r4,#1
        0x0020aaee:    7820         x      LDRB     r0,[r4,#0]
        0x0020aaf0:    2800        .(      CMP      r0,#0
        0x0020aaf2:    d1f3        ..      BNE      0x20aadc ; data_uart_vsprintf + 118
        0x0020aaf4:    e050        P.      B        0x20ab98 ; data_uart_vsprintf + 306
;;;44                 }
;;;45             }
;;;46             else    /* Length of item is bounded */
;;;47             {
;;;48                 char tmp[20], *q = tmp;
;;;49                 int shift = 28;
;;;50     
;;;51                 if ((*fmt  >= '0') && (*fmt  <= '9'))
;;;52                 {
;;;53                     int width;
;;;54                     unsigned char fch = *fmt;
;;;55                     for (width = 0; (fch >= '0') && (fch <= '9'); fch = *++fmt)
;;;56                     {
;;;57                         width = width * 10 + fch - '0';
;;;58                     }
;;;59                     shift = (width - 1) * 4;
;;;60                 }
;;;61                 /*
;;;62                  * Before each format q points to tmp buffer
;;;63                  * After each format q points past end of item
;;;64                  */
;;;65     
;;;66                 if ((*fmt == 'x') || (*fmt == 'X') || (*fmt == 'p') || (*fmt == 'P'))
;;;67                 {
;;;68                     /* With x86 gcc, sizeof(long) == sizeof(int) */
;;;69                     const long *lp = (const long *)dp;
;;;70                     long h = *lp++;
        0x0020aaf6:    ce08        ..      LDM      r6!,{r3}
;;;71                     int ncase = (*fmt & 0x20);
        0x0020aaf8:    f0000220    .. .    AND      r2,r0,#0x20
;;;72                     int alt = 0;
;;;73     
;;;74                     dp = (const int *)lp;
;;;75                     if ((*fmt == 'p') || (*fmt == 'P'))
        0x0020aafc:    2870        p(      CMP      r0,#0x70
        0x0020aafe:    d001        ..      BEQ      0x20ab04 ; data_uart_vsprintf + 158
        0x0020ab00:    2850        P(      CMP      r0,#0x50
        0x0020ab02:    d106        ..      BNE      0x20ab12 ; data_uart_vsprintf + 172
;;;76                     {
;;;77                         alt = 1;
;;;78                     }
;;;79                     if (alt)
;;;80                     {
;;;81                         *q++ = '0';
        0x0020ab04:    2030        0       MOVS     r0,#0x30
        0x0020ab06:    f8040b01    ....    STRB     r0,[r4],#1
;;;82                         *q++ = 'X' | ncase;
        0x0020ab0a:    f0420058    B.X.    ORR      r0,r2,#0x58
        0x0020ab0e:    f8040b01    ....    STRB     r0,[r4],#1
;;;83                     }
;;;84                     for (; shift >= 0; shift -= 4)
        0x0020ab12:    2900        .)      CMP      r1,#0
        0x0020ab14:    db2f        /.      BLT      0x20ab76 ; data_uart_vsprintf + 272
        0x0020ab16:    fa43f001    C...    ASR      r0,r3,r1
        0x0020ab1a:    f000000f    ....    AND      r0,r0,#0xf
        0x0020ab1e:    f20f2c38    ..8,    ADR.W    r12,{pc}+0x23a ; 0x20ad58
        0x0020ab22:    f81c0000    ....    LDRB     r0,[r12,r0]
        0x0020ab26:    4310        .C      ORRS     r0,r0,r2
        0x0020ab28:    f8040b01    ....    STRB     r0,[r4],#1
        0x0020ab2c:    1f09        ..      SUBS     r1,r1,#4
        0x0020ab2e:    e7f0        ..      B        0x20ab12 ; data_uart_vsprintf + 172
;;;85                     {
;;;86                         * q++ = "0123456789ABCDEF"[(h >> shift) & 0xF] | ncase;
;;;87                     }
;;;88                 }
;;;89                 else if (*fmt == 'd')
;;;90                 {
;;;91                     int i = *dp++;
        0x0020ab30:    ce01        ..      LDM      r6!,{r0}
;;;92                     char *r;
;;;93                     if (i < 0)
        0x0020ab32:    2800        .(      CMP      r0,#0
        0x0020ab34:    da03        ..      BGE      0x20ab3e ; data_uart_vsprintf + 216
;;;94                     {
;;;95                         *q++ = '-';
        0x0020ab36:    212d        -!      MOVS     r1,#0x2d
        0x0020ab38:    f8041b01    ....    STRB     r1,[r4],#1
;;;96                         i = -i;
        0x0020ab3c:    4240        @B      RSBS     r0,r0,#0
;;;97                     }
;;;98                     p = q;      /* save beginning of digits */
        0x0020ab3e:    4621        !F      MOV      r1,r4
;;;99                     do
;;;100                    {
;;;101                        *q++ = '0' + (i % 10);
        0x0020ab40:    220a        ."      MOVS     r2,#0xa
        0x0020ab42:    fb90f3f2    ....    SDIV     r3,r0,r2
        0x0020ab46:    fb020313    ....    MLS      r3,r2,r3,r0
        0x0020ab4a:    fb90f0f2    ....    SDIV     r0,r0,r2
        0x0020ab4e:    3330        03      ADDS     r3,r3,#0x30
        0x0020ab50:    f8043b01    ...;    STRB     r3,[r4],#1
;;;102                        i /= 10;
;;;103                    }
;;;104                    while (i);
        0x0020ab54:    2800        .(      CMP      r0,#0
        0x0020ab56:    d1f4        ..      BNE      0x20ab42 ; data_uart_vsprintf + 220
;;;105                    /* reverse digits, stop in middle */
;;;106                    r = q;      /* don't alter q */
        0x0020ab58:    4620         F      MOV      r0,r4
;;;107                    while (--r > p)
        0x0020ab5a:    e004        ..      B        0x20ab66 ; data_uart_vsprintf + 256
;;;108                    {
;;;109                        i = *r;
        0x0020ab5c:    7802        .x      LDRB     r2,[r0,#0]
;;;110                        *r = *p;
        0x0020ab5e:    780b        .x      LDRB     r3,[r1,#0]
        0x0020ab60:    7003        .p      STRB     r3,[r0,#0]
;;;111                        *p++ = i;
        0x0020ab62:    f8012b01    ...+    STRB     r2,[r1],#1
        0x0020ab66:    1e40        @.      SUBS     r0,r0,#1
        0x0020ab68:    4288        .B      CMP      r0,r1
        0x0020ab6a:    d8f7        ..      BHI      0x20ab5c ; data_uart_vsprintf + 246
        0x0020ab6c:    e003        ..      B        0x20ab76 ; data_uart_vsprintf + 272
;;;112                    }
;;;113                }
;;;114                else if (*fmt == 'c')
;;;115                {
;;;116                    *q++ = *dp++;
        0x0020ab6e:    f8160b04    ....    LDRB     r0,[r6],#4
;;;117                }
;;;118                else
;;;119                {
;;;120                    *q++ = *fmt;
        0x0020ab72:    f8040b01    ....    STRB     r0,[r4],#1
;;;121                }
;;;122                /* now output the saved string */
;;;123                for (p = tmp; p < q; ++p)
        0x0020ab76:    4668        hF      MOV      r0,sp
        0x0020ab78:    e00b        ..      B        0x20ab92 ; data_uart_vsprintf + 300
        0x0020ab7a:    f8980000    ....    LDRB     r0,[r8,#0]
        0x0020ab7e:    f1b90f00    ....    CMP      r9,#0
        0x0020ab82:    d002        ..      BEQ      0x20ab8a ; data_uart_vsprintf + 292
        0x0020ab84:    f8050b01    ....    STRB     r0,[r5],#1
        0x0020ab88:    e001        ..      B        0x20ab8e ; data_uart_vsprintf + 296
        0x0020ab8a:    f7ffff5d    ..].    BL       data_uart_send_char ; 0x20aa48
        0x0020ab8e:    f1080001    ....    ADD      r0,r8,#1
        0x0020ab92:    4680        .F      MOV      r8,r0
        0x0020ab94:    42a0        .B      CMP      r0,r4
        0x0020ab96:    d3f0        ..      BCC      0x20ab7a ; data_uart_vsprintf + 276
        0x0020ab98:    1c7f        ..      ADDS     r7,r7,#1
        0x0020ab9a:    7838        8x      LDRB     r0,[r7,#0]
        0x0020ab9c:    2800        .(      CMP      r0,#0
        0x0020ab9e:    f47faf6a    ..j.    BNE      0x20aa76 ; data_uart_vsprintf + 16
;;;124                {
;;;125                    buf ? *s++ = *p : data_uart_send_char(*p);
;;;126                }
;;;127            }
;;;128        }
;;;129        if (buf)
        0x0020aba2:    f1b90f00    ....    CMP      r9,#0
        0x0020aba6:    d000        ..      BEQ      0x20abaa ; data_uart_vsprintf + 324
;;;130        {
;;;131            *s = '\0';
        0x0020aba8:    7028        (p      STRB     r0,[r5,#0]
        0x0020abaa:    b005        ..      ADD      sp,sp,#0x14
;;;132        }
;;;133        return (s - buf);
        0x0020abac:    eba50009    ....    SUB      r0,r5,r9
;;;134    }
        0x0020abb0:    e8bd83f0    ....    POP      {r4-r9,pc}
    data_uart_print
;;;135    
;;;136    /**
;;;137     * @brief  Print the trace information through data uart.
;;;138     * @param[in] fmt   Print parameters.
;;;139     * @return void
;;;140     *
;;;141     * <b>Example usage</b>
;;;142     * \code{.c}
;;;143        void test(void)
;;;144        {
;;;145            data_uart_print("GAP scan stop\r\n");
;;;146        }
;;;147     * \endcode
;;;148     */
;;;149    void data_uart_print(char *fmt, ...)
;;;150    {
        0x0020abb4:    b40f        ..      PUSH     {r0-r3}
        0x0020abb6:    2000        .       MOVS     r0,#0
;;; ..\..\..\src\mcu\module\data_uart_cmd\data_uart.c (150)
        0x0020abb8:    b510        ..      PUSH     {r4,lr}
;;;151        (void)data_uart_vsprintf(0, fmt, ((const int *)&fmt) + 1);
        0x0020abba:    aa03        ..      ADD      r2,sp,#0xc
        0x0020abbc:    9902        ..      LDR      r1,[sp,#8]
        0x0020abbe:    f7ffff52    ..R.    BL       data_uart_vsprintf ; 0x20aa66
;;;152    }
        0x0020abc2:    bc10        ..      POP      {r4}
        0x0020abc4:    f85dfb14    ]...    LDR      pc,[sp],#0x14
    FramingCheckSum
;;;153    
;;;154    bool FramingCheckSum(uint8_t* pu8Buffer, uint16_t u16Length, uint8_t* pu8CheckSum)
;;;155    {
        0x0020abc8:    b510        ..      PUSH     {r4,lr}
        0x0020abca:    2300        .#      MOVS     r3,#0
;;; ..\..\..\src\mcu\module\data_uart_cmd\data_uart.c (155)
        0x0020abcc:    2800        .(      CMP      r0,#0
        0x0020abce:    d001        ..      BEQ      0x20abd4 ; FramingCheckSum + 12
;;;156        uint8_t u8Sum = 0;
;;;157    
;;;158        if (pu8Buffer == NULL) {return false;} ///< Check if the pointers is null 
;;;159        if (pu8CheckSum == NULL) {return false;} ///< Check if the pointers is null 
        0x0020abd0:    b92a        *.      CBNZ     r2,0x20abde ; FramingCheckSum + 22
        0x0020abd2:    2000        .       MOVS     r0,#0
        0x0020abd4:    bd10        ..      POP      {r4,pc}
        0x0020abd6:    f8104b01    ...K    LDRB     r4,[r0],#1
        0x0020abda:    1b1b        ..      SUBS     r3,r3,r4
        0x0020abdc:    b2db        ..      UXTB     r3,r3
;;;160    
;;;161        while (u16Length-- > 0)
        0x0020abde:    1e49        I.      SUBS     r1,r1,#1
        0x0020abe0:    b289        ..      UXTH     r1,r1
        0x0020abe2:    d2f8        ..      BCS      0x20abd6 ; FramingCheckSum + 14
;;;162        {
;;;163            u8Sum -= *pu8Buffer++;
;;;164        } 
;;;165        *pu8CheckSum = u8Sum;
        0x0020abe4:    7013        .p      STRB     r3,[r2,#0]
;;;166    
;;;167        return true;
        0x0020abe6:    2001        .       MOVS     r0,#1
;;;168    }
        0x0020abe8:    bd10        ..      POP      {r4,pc}
    FramingWrapFrameUartPrint
;;;169    
;;;170    void FramingWrapFrameUartPrint(uint8_t* pu8BufferIn, uint16_t u8BufferInLength)
;;;171    {
        0x0020abea:    b570        p.      PUSH     {r4-r6,lr}
        0x0020abec:    460c        .F      MOV      r4,r1
        0x0020abee:    f5ad7d02    ...}    SUB      sp,sp,#0x208
        0x0020abf2:    2100        .!      MOVS     r1,#0
        0x0020abf4:    f88d1200    ....    STRB     r1,[sp,#0x200]
        0x0020abf8:    2800        .(      CMP      r0,#0
        0x0020abfa:    d029        ).      BEQ      0x20ac50 ; FramingWrapFrameUartPrint + 102
;;;172        uint8_t u8CheckSum = 0;
;;;173    	uint8_t u8BufferOut[512];
;;;174    	uint16_t BufferLength;
;;;175    	uint16_t i;
;;;176      
;;;177        if (pu8BufferIn == NULL)           {return ;}     ///< Check if the pointer is null   
;;;178        if (u8BufferInLength > FRAMING_PAYLOAD_MAX_LENGTH)  {return ;}
        0x0020abfc:    f5b47ffb    ....    CMP      r4,#0x1f6
        0x0020ac00:    d826        &.      BHI      0x20ac50 ; FramingWrapFrameUartPrint + 102
;;;179        
;;;180        u8BufferOut[FRAMING_INDEX_SOH]         = FRAMING_SOH;
        0x0020ac02:    2101        .!      MOVS     r1,#1
        0x0020ac04:    f88d1000    ....    STRB     r1,[sp,#0]
;;;181        u8BufferOut[FRAMING_INDEX_LENGTH_HIGH]      = (uint8_t)(u8BufferInLength>>8);
        0x0020ac08:    0a21        !.      LSRS     r1,r4,#8
        0x0020ac0a:    f88d1001    ....    STRB     r1,[sp,#1]
        0x0020ac0e:    4601        .F      MOV      r1,r0
        0x0020ac10:    466d        mF      MOV      r5,sp
;;;182        u8BufferOut[FRAMING_INDEX_LENGTH_LOW]      =  (uint8_t)(u8BufferInLength&0xff);
        0x0020ac12:    f88d4002    ...@    STRB     r4,[sp,#2]
;;;183        memcpy(&u8BufferOut[FRAMING_INDEX_PAYLOAD], pu8BufferIn, u8BufferInLength);
        0x0020ac16:    4622        "F      MOV      r2,r4
        0x0020ac18:    1ce8        ..      ADDS     r0,r5,#3
        0x0020ac1a:    f64ff93e    O.>.    BL       __aeabi_memcpy ; 0x59e9a
;;;184        
;;;185        if (FramingCheckSum(&u8BufferOut[FRAMING_INDEX_LENGTH_HIGH], u8BufferInLength + 2,&u8CheckSum) == false) {return ;} 
        0x0020ac1e:    1ca0        ..      ADDS     r0,r4,#2
        0x0020ac20:    b281        ..      UXTH     r1,r0
        0x0020ac22:    aa80        ..      ADD      r2,sp,#0x200
        0x0020ac24:    1c68        h.      ADDS     r0,r5,#1
        0x0020ac26:    f7ffffcf    ....    BL       FramingCheckSum ; 0x20abc8
        0x0020ac2a:    2800        .(      CMP      r0,#0
        0x0020ac2c:    d010        ..      BEQ      0x20ac50 ; FramingWrapFrameUartPrint + 102
;;;186        
;;;187        u8BufferOut[FRAMING_INDEX_PAYLOAD +  u8BufferInLength + 1] = u8CheckSum;
        0x0020ac2e:    1928        (.      ADDS     r0,r5,r4
        0x0020ac30:    f89d1200    ....    LDRB     r1,[sp,#0x200]
        0x0020ac34:    7101        .q      STRB     r1,[r0,#4]
;;;188        u8BufferOut[FRAMING_INDEX_PAYLOAD +  u8BufferInLength + 2] = FRAMING_EOT;
        0x0020ac36:    2104        .!      MOVS     r1,#4
        0x0020ac38:    1d64        d.      ADDS     r4,r4,#5
        0x0020ac3a:    b2a6        ..      UXTH     r6,r4
        0x0020ac3c:    7141        Aq      STRB     r1,[r0,#5]
;;;189        
;;;190        BufferLength =  u8BufferInLength + 5;
;;;191    
;;;192    	for(i=0;i<BufferLength;i++)
        0x0020ac3e:    2400        .$      MOVS     r4,#0
        0x0020ac40:    e004        ..      B        0x20ac4c ; FramingWrapFrameUartPrint + 98
        0x0020ac42:    5d28        (]      LDRB     r0,[r5,r4]
        0x0020ac44:    f7ffff00    ....    BL       data_uart_send_char ; 0x20aa48
        0x0020ac48:    1c64        d.      ADDS     r4,r4,#1
        0x0020ac4a:    b2a4        ..      UXTH     r4,r4
        0x0020ac4c:    42b4        .B      CMP      r4,r6
        0x0020ac4e:    d3f8        ..      BCC      0x20ac42 ; FramingWrapFrameUartPrint + 88
;;;193    	{
;;;194    		data_uart_send_char(u8BufferOut[i]);
;;;195    	}
;;;196    
;;;197        return  ;
;;;198    
;;;199    }
        0x0020ac50:    f50d7d02    ...}    ADD      sp,sp,#0x208
        0x0020ac54:    bd70        p.      POP      {r4-r6,pc}
    UART0_Handler
;;;200    
;;;201    
;;;202    /****************************************************************************/
;;;203    /* UART interrupt                                                           */
;;;204    /****************************************************************************/
;;;205    void UART0_Handler(void)
;;;206    {
        0x0020ac56:    b530        0.      PUSH     {r4,r5,lr}
        0x0020ac58:    b085        ..      SUB      sp,sp,#0x14
;;;207        uint8_t rx_char;
;;;208        T_IO_MSG io_driver_msg_send;
;;;209        uint8_t event  = EVENT_IO_TO_APP;
        0x0020ac5a:    2002        .       MOVS     r0,#2
        0x0020ac5c:    f88d0010    ....    STRB     r0,[sp,#0x10]
;;; ..\..\..\inc\peripheral\rtl876x_uart.h
;;;426        return (uint16_t)(UARTx->INTID_FCR & (0x0000000E));
        0x0020ac60:    4d3c        <M      LDR      r5,[pc,#240] ; [0x20ad54] = 0x40012000
;;; ..\..\..\src\mcu\module\data_uart_cmd\data_uart.c
;;;210        io_driver_msg_send.type = IO_MSG_TYPE_UART;
        0x0020ac62:    2003        .       MOVS     r0,#3
        0x0020ac64:    f8ad0004    ....    STRH     r0,[sp,#4]
;;; ..\..\..\inc\peripheral\rtl876x_uart.h
;;;426        return (uint16_t)(UARTx->INTID_FCR & (0x0000000E));
        0x0020ac68:    68a9        .h      LDR      r1,[r5,#8]
        0x0020ac6a:    4628        (F      MOV      r0,r5
        0x0020ac6c:    f001040e    ....    AND      r4,r1,#0xe
;;; ..\..\..\src\mcu\module\data_uart_cmd\data_uart.c
;;;217        UART_INTConfig(UART, UART_INT_RD_AVA | UART_INT_LINE_STS, DISABLE);
        0x0020ac70:    2200        ."      MOVS     r2,#0
        0x0020ac72:    2105        .!      MOVS     r1,#5
        0x0020ac74:    f7fdfad9    ....    BL       UART_INTConfig ; 0x20822a
;;;218    
;;;219        switch (interrupt_id)
        0x0020ac78:    2c04        .,      CMP      r4,#4
        0x0020ac7a:    d003        ..      BEQ      0x20ac84 ; UART0_Handler + 46
        0x0020ac7c:    dd23        #.      BLE      0x20acc6 ; UART0_Handler + 112
        0x0020ac7e:    2c06        .,      CMP      r4,#6
        0x0020ac80:    d121        !.      BNE      0x20acc6 ; UART0_Handler + 112
        0x0020ac82:    e01b        ..      B        0x20acbc ; UART0_Handler + 102
;;;220        {
;;;221        /* tx fifo empty, not enable */
;;;222        case UART_INT_ID_TX_EMPTY:
;;;223            break;
;;;224    
;;;225        /* rx data valiable */
;;;226        case UART_INT_ID_RX_LEVEL_REACH:
;;;227            UART_ReceiveData(UART, &rx_char, 1);
        0x0020ac84:    2201        ."      MOVS     r2,#1
        0x0020ac86:    a903        ..      ADD      r1,sp,#0xc
        0x0020ac88:    4628        (F      MOV      r0,r5
        0x0020ac8a:    f7fdfabe    ....    BL       UART_ReceiveData ; 0x20820a
;;;228            io_driver_msg_send.subtype = rx_char;
        0x0020ac8e:    f89d000c    ....    LDRB     r0,[sp,#0xc]
        0x0020ac92:    f8ad0006    ....    STRH     r0,[sp,#6]
;;;229    
;;;230            if (os_msg_send(h_io_q, &io_driver_msg_send, 0) == false)
        0x0020ac96:    4c36        6L      LDR      r4,[pc,#216] ; [0x20ad70] = 0x20d2d4
        0x0020ac98:    20e6        .       MOVS     r0,#0xe6
        0x0020ac9a:    9000        ..      STR      r0,[sp,#0]
        0x0020ac9c:    4b33        3K      LDR      r3,[pc,#204] ; [0x20ad6c] = 0x21c994
        0x0020ac9e:    2200        ."      MOVS     r2,#0
        0x0020aca0:    a901        ..      ADD      r1,sp,#4
        0x0020aca2:    6860        `h      LDR      r0,[r4,#4]
        0x0020aca4:    f61bf99e    ....    BL       os_msg_send_intern ; 0x25fe4
        0x0020aca8:    b168        h.      CBZ      r0,0x20acc6 ; UART0_Handler + 112
;;;231            {
;;;232            }
;;;233            else if (os_msg_send(h_event_q, &event, 0) == false)
        0x0020acaa:    20e9        .       MOVS     r0,#0xe9
        0x0020acac:    9000        ..      STR      r0,[sp,#0]
        0x0020acae:    4b2f        /K      LDR      r3,[pc,#188] ; [0x20ad6c] = 0x21c994
        0x0020acb0:    2200        ."      MOVS     r2,#0
        0x0020acb2:    a904        ..      ADD      r1,sp,#0x10
        0x0020acb4:    6820         h      LDR      r0,[r4,#0]
        0x0020acb6:    f61bf995    ....    BL       os_msg_send_intern ; 0x25fe4
        0x0020acba:    e004        ..      B        0x20acc6 ; UART0_Handler + 112
;;;234            {
;;;235            }
;;;236            break;
;;;237    
;;;238        case UART_INT_ID_RX_TMEOUT:
;;;239            break;
;;;240    
;;;241        /* receive line status interrupt */
;;;242        case UART_INT_ID_LINE_STATUS:
;;;243            {
;;;244                DBG_DIRECT("Line status error!!!!\n");
        0x0020acbc:    a12d        -.      ADR      r1,{pc}+0xb8 ; 0x20ad74
        0x0020acbe:    f04f5004    O..P    MOV      r0,#0x21000000
        0x0020acc2:    f5fcfe75    ..u.    BL       log_direct ; 0x79b0
;;;245            }
;;;246            break;
;;;247    
;;;248        case UART_INT_ID_MODEM_STATUS:
;;;249            break;
;;;250    
;;;251        default:
;;;252            break;
;;;253        }
;;;254    
;;;255        /* enable interrupt again */
;;;256        UART_INTConfig(UART, UART_INT_RD_AVA, ENABLE);
        0x0020acc6:    2201        ."      MOVS     r2,#1
        0x0020acc8:    4611        .F      MOV      r1,r2
        0x0020acca:    4628        (F      MOV      r0,r5
        0x0020accc:    f7fdfaad    ....    BL       UART_INTConfig ; 0x20822a
;;;257    
;;;258        return;
;;;259    }
        0x0020acd0:    b005        ..      ADD      sp,sp,#0x14
        0x0020acd2:    bd30        0.      POP      {r4,r5,pc}
    data_uart_init
;;;260    
;;;261    /**
;;;262     * @brief  Initializes the Data UART.
;;;263     *
;;;264     * When data uart receives data, data uart will send an event IO_UART_MSG_TYPE to evt_queue_handle and send the data to io_queue_handle.
;;;265     * @param[in] event_queue_handle   Event queue handle which is created by APP.
;;;266     * @param[in] io_queue_handle      IO message queue handle which is created by APP.
;;;267     * @return void
;;;268     *
;;;269     * <b>Example usage</b>
;;;270     * \code{.c}
;;;271        void app_main_task(void *p_param)
;;;272        {
;;;273            char event;
;;;274    
;;;275            os_msg_queue_create(&io_queue_handle, MAX_NUMBER_OF_IO_MESSAGE, sizeof(T_IO_MSG));
;;;276            os_msg_queue_create(&evt_queue_handle, MAX_NUMBER_OF_EVENT_MESSAGE, sizeof(unsigned char));
;;;277    
;;;278            gap_start_bt_stack(evt_queue_handle, io_queue_handle, MAX_NUMBER_OF_GAP_MESSAGE);
;;;279    
;;;280            data_uart_init(evt_queue_handle, io_queue_handle);
;;;281            ......
;;;282        }
;;;283        void app_handle_io_msg(T_IO_MSG io_msg)
;;;284        {
;;;285            uint16_t msg_type = io_msg.type;
;;;286            uint8_t rx_char;
;;;287    
;;;288            switch (msg_type)
;;;289            {
;;;290            case IO_MSG_TYPE_UART:
;;;291                // We handle user command informations from Data UART in this branch.
;;;292                rx_char = (uint8_t)io_msg.subtype;
;;;293                user_cmd_collect(&user_cmd_if, &rx_char, sizeof(rx_char), user_cmd_table);
;;;294                break;
;;;295            default:
;;;296                break;
;;;297            }
;;;298        }
;;;299     * \endcode
;;;300     */
;;;301    void data_uart_init(void *event_queue_handle, void *io_queue_handle)
;;;302    {
        0x0020acd4:    b530        0.      PUSH     {r4,r5,lr}
        0x0020acd6:    4a26        &J      LDR      r2,[pc,#152] ; [0x20ad70] = 0x20d2d4
;;; ..\..\..\src\mcu\module\data_uart_cmd\data_uart.c (302)
        0x0020acd8:    b08d        ..      SUB      sp,sp,#0x34
;;;303    
;;;304        h_event_q = event_queue_handle;
        0x0020acda:    e9c20100    ....    STRD     r0,r1,[r2,#0]
;;;305        h_io_q = io_queue_handle;
;;;306    
;;;307        RCC_PeriphClockCmd(APBPeriph_UART0, APBPeriph_UART0_CLOCK, ENABLE);
        0x0020acde:    2201        ."      MOVS     r2,#1
        0x0020ace0:    492a        *I      LDR      r1,[pc,#168] ; [0x20ad8c] = 0x40000001
        0x0020ace2:    482b        +H      LDR      r0,[pc,#172] ; [0x20ad90] = 0x8000001
        0x0020ace4:    f7fdf856    ..V.    BL       RCC_PeriphClockCmd ; 0x207d94
;;;308        Pinmux_Config(DATA_UART_TX_PIN, UART0_TX);
        0x0020ace8:    2123        #!      MOVS     r1,#0x23
        0x0020acea:    2018        .       MOVS     r0,#0x18
        0x0020acec:    f606fb42    ..B.    BL       Pinmux_Config ; 0x11374
;;;309        Pinmux_Config(DATA_UART_RX_PIN, UART0_RX);
        0x0020acf0:    2124        $!      MOVS     r1,#0x24
        0x0020acf2:    2019        .       MOVS     r0,#0x19
        0x0020acf4:    f606fb3e    ..>.    BL       Pinmux_Config ; 0x11374
;;;310        Pad_Config(DATA_UART_TX_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_NONE, PAD_OUT_ENABLE,
        0x0020acf8:    2401        .$      MOVS     r4,#1
        0x0020acfa:    9400        ..      STR      r4,[sp,#0]
        0x0020acfc:    2300        .#      MOVS     r3,#0
        0x0020acfe:    4622        "F      MOV      r2,r4
        0x0020ad00:    4621        !F      MOV      r1,r4
        0x0020ad02:    2018        .       MOVS     r0,#0x18
        0x0020ad04:    9401        ..      STR      r4,[sp,#4]
        0x0020ad06:    f606fb69    ..i.    BL       Pad_Config ; 0x113dc
;;;311                   PAD_OUT_HIGH);
;;;312        Pad_Config(DATA_UART_RX_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE,
        0x0020ad0a:    2000        .       MOVS     r0,#0
        0x0020ad0c:    2301        .#      MOVS     r3,#1
        0x0020ad0e:    9000        ..      STR      r0,[sp,#0]
        0x0020ad10:    9001        ..      STR      r0,[sp,#4]
        0x0020ad12:    461a        .F      MOV      r2,r3
        0x0020ad14:    4619        .F      MOV      r1,r3
        0x0020ad16:    2019        .       MOVS     r0,#0x19
        0x0020ad18:    f606fb60    ..`.    BL       Pad_Config ; 0x113dc
;;;313                   PAD_OUT_LOW);
;;;314    
;;;315        /* uart init */
;;;316        UART_InitTypeDef uartInitStruct;
;;;317        UART_StructInit(&uartInitStruct);
        0x0020ad1c:    a802        ..      ADD      r0,sp,#8
        0x0020ad1e:    f7fdfa5c    ..\.    BL       UART_StructInit ; 0x2081da
        0x0020ad22:    4d0c        .M      LDR      r5,[pc,#48] ; [0x20ad54] = 0x40012000
;;;318        uartInitStruct.rxTriggerLevel = UART_RX_FIFO_TRIGGER_LEVEL_1BYTE;
        0x0020ad24:    f8ad4016    ...@    STRH     r4,[sp,#0x16]
;;;319        UART_Init(UART, &uartInitStruct);
        0x0020ad28:    a902        ..      ADD      r1,sp,#8
        0x0020ad2a:    4628        (F      MOV      r0,r5
        0x0020ad2c:    f7fdf9dc    ....    BL       UART_Init ; 0x2080e8
;;;320        UART_INTConfig(UART, UART_INT_RD_AVA, ENABLE);
        0x0020ad30:    2201        ."      MOVS     r2,#1
        0x0020ad32:    4611        .F      MOV      r1,r2
        0x0020ad34:    4628        (F      MOV      r0,r5
        0x0020ad36:    f7fdfa78    ..x.    BL       UART_INTConfig ; 0x20822a
;;;321    
;;;322        /*  Enable UART IRQ  */
;;;323        NVIC_InitTypeDef nvic_init_struct;
;;;324        nvic_init_struct.NVIC_IRQChannel         = UART0_IRQn;
        0x0020ad3a:    200c        .       MOVS     r0,#0xc
        0x0020ad3c:    f88d0024    ..$.    STRB     r0,[sp,#0x24]
        0x0020ad40:    2005        .       MOVS     r0,#5
        0x0020ad42:    900a        ..      STR      r0,[sp,#0x28]
;;;325        nvic_init_struct.NVIC_IRQChannelCmd      = ENABLE;
        0x0020ad44:    f88d402c    ..,@    STRB     r4,[sp,#0x2c]
;;;326        nvic_init_struct.NVIC_IRQChannelPriority = 5;
;;;327        NVIC_Init(&nvic_init_struct);
        0x0020ad48:    a809        ..      ADD      r0,sp,#0x24
        0x0020ad4a:    f606fab9    ....    BL       NVIC_Init ; 0x112c0
;;;328    }
        0x0020ad4e:    b00d        ..      ADD      sp,sp,#0x34
        0x0020ad50:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x0020ad52:    0000        ..      DCW    0
        0x0020ad54:    40012000    . .@    DCD    1073815552
        0x0020ad58:    33323130    0123    DCD    858927408
        0x0020ad5c:    37363534    4567    DCD    926299444
        0x0020ad60:    42413938    89AB    DCD    1111570744
        0x0020ad64:    46454443    CDEF    DCD    1178944579
        0x0020ad68:    00000000    ....    DCD    0
        0x0020ad6c:    0021c994    ..!.    DCD    2214292
        0x0020ad70:    0020d2d4    .. .    DCD    2151124
        0x0020ad74:    656e694c    Line    DCD    1701734732
        0x0020ad78:    61747320     sta    DCD    1635021600
        0x0020ad7c:    20737574    tus     DCD    544437620
        0x0020ad80:    6f727265    erro    DCD    1869771365
        0x0020ad84:    21212172    r!!!    DCD    555819378
        0x0020ad88:    00000a21    !...    DCD    2593
        0x0020ad8c:    40000001    ...@    DCD    1073741825
        0x0020ad90:    08000001    ....    DCD    134217729
    $t
    .text
    cmd_send_result
;;; ..\..\..\src\mcu\module\data_uart_cmd\user_cmd_parse.c
;;;133        switch (result)
        0x0020ad94:    280a        .(      CMP      r0,#0xa
        0x0020ad96:    d033        3.      BEQ      0x20ae00 ; cmd_send_result + 108
        0x0020ad98:    dc07        ..      BGT      0x20adaa ; cmd_send_result + 22
        0x0020ad9a:    d23d        =.      BCS      0x20ae18 ; cmd_send_result + 132
        0x0020ad9c:    e8dff000    ....    TBB      [pc,r0]
    $d
        0x0020ada0:    22201e3c    <. "    DCD    572530236
        0x0020ada4:    2a282624    $&(*    DCD    707274276
        0x0020ada8:    2e2c        ,.      DCW    11820
    $t
        0x0020adaa:    2824        $(      CMP      r0,#0x24
        0x0020adac:    d02e        ..      BEQ      0x20ae0c ; cmd_send_result + 120
        0x0020adae:    dc09        ..      BGT      0x20adc4 ; cmd_send_result + 48
        0x0020adb0:    280b        .(      CMP      r0,#0xb
        0x0020adb2:    d027        '.      BEQ      0x20ae04 ; cmd_send_result + 112
        0x0020adb4:    2820         (      CMP      r0,#0x20
        0x0020adb6:    d00f        ..      BEQ      0x20add8 ; cmd_send_result + 68
        0x0020adb8:    2822        "(      CMP      r0,#0x22
        0x0020adba:    d025        %.      BEQ      0x20ae08 ; cmd_send_result + 116
        0x0020adbc:    2823        #(      CMP      r0,#0x23
        0x0020adbe:    d12b        +.      BNE      0x20ae18 ; cmd_send_result + 132
        0x0020adc0:    a1ab        ..      ADR      r1,{pc}+0x2b0 ; 0x20b070
        0x0020adc2:    e006        ..      B        0x20add2 ; cmd_send_result + 62
;;; ..\..\..\src\mcu\module\data_uart_cmd\user_cmd_parse.c (133)
        0x0020adc4:    2825        %(      CMP      r0,#0x25
        0x0020adc6:    d023        #.      BEQ      0x20ae10 ; cmd_send_result + 124
        0x0020adc8:    2826        &(      CMP      r0,#0x26
        0x0020adca:    d023        #.      BEQ      0x20ae14 ; cmd_send_result + 128
        0x0020adcc:    28ff        .(      CMP      r0,#0xff
        0x0020adce:    d123        #.      BNE      0x20ae18 ; cmd_send_result + 132
        0x0020add0:    a1ac        ..      ADR      r1,{pc}+0x2b4 ; 0x20b084
        0x0020add2:    a0b2        ..      ADR      r0,{pc}+0x2ca ; 0x20b09c
        0x0020add4:    f7ffbeee    ....    B.W      data_uart_print ; 0x20abb4
;;;134        {
;;;135        case RESULT_ERR:
;;;136            data_uart_print("%s\r\n", "CMD:Error");
        0x0020add8:    a1b2        ..      ADR      r1,{pc}+0x2cc ; 0x20b0a4
;;;137            break;
        0x0020adda:    e7fa        ..      B        0x20add2 ; cmd_send_result + 62
;;;138        case RESULT_GAP_CAUSE_ALREADY_IN_REQ:
;;;139            data_uart_print("%s\r\n", "GAP_CAUSE_ALREADY_IN_REQ");
        0x0020addc:    a1b4        ..      ADR      r1,{pc}+0x2d4 ; 0x20b0b0
;;;140            break;
        0x0020adde:    e7f8        ..      B        0x20add2 ; cmd_send_result + 62
;;;141        case RESULT_GAP_CAUSE_INVALID_STATE:
;;;142            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_STATE");
        0x0020ade0:    a1ba        ..      ADR      r1,{pc}+0x2ec ; 0x20b0cc
;;;143            break;
        0x0020ade2:    e7f6        ..      B        0x20add2 ; cmd_send_result + 62
;;;144        case RESULT_GAP_CAUSE_INVALID_PARAM:
;;;145            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PARAM");
        0x0020ade4:    a1bf        ..      ADR      r1,{pc}+0x300 ; 0x20b0e4
;;;146            break;
        0x0020ade6:    e7f4        ..      B        0x20add2 ; cmd_send_result + 62
;;;147        case RESULT_GAP_CAUSE_NON_CONN:
;;;148            data_uart_print("%s\r\n", "GAP_CAUSE_NON_CONN");
        0x0020ade8:    a1c4        ..      ADR      r1,{pc}+0x314 ; 0x20b0fc
;;;149            break;
        0x0020adea:    e7f2        ..      B        0x20add2 ; cmd_send_result + 62
;;;150        case RESULT_GAP_CAUSE_NOT_FIND_IRK:
;;;151            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND_IRK");
        0x0020adec:    a1c8        ..      ADR      r1,{pc}+0x324 ; 0x20b110
;;;152            break;
        0x0020adee:    e7f0        ..      B        0x20add2 ; cmd_send_result + 62
;;;153        case RESULT_GAP_CAUSE_ERROR_CREDITS:
;;;154            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_CREDITS");
        0x0020adf0:    a1cd        ..      ADR      r1,{pc}+0x338 ; 0x20b128
;;;155            break;
        0x0020adf2:    e7ee        ..      B        0x20add2 ; cmd_send_result + 62
;;;156        case RESULT_GAP_CAUSE_SEND_REQ_FAILED:
;;;157            data_uart_print("%s\r\n", "GAP_CAUSE_SEND_REQ_FAILED");
        0x0020adf4:    a1d2        ..      ADR      r1,{pc}+0x34c ; 0x20b140
;;;158            break;
        0x0020adf6:    e7ec        ..      B        0x20add2 ; cmd_send_result + 62
;;;159        case RESULT_GAP_CAUSE_NO_RESOURCE:
;;;160            data_uart_print("%s\r\n", "GAP_CAUSE_NO_RESOURCE");
        0x0020adf8:    a1d8        ..      ADR      r1,{pc}+0x364 ; 0x20b15c
;;;161            break;
        0x0020adfa:    e7ea        ..      B        0x20add2 ; cmd_send_result + 62
;;;162        case RESULT_GAP_CAUSE_INVALID_PDU_SIZE:
;;;163            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PDU_SIZE");
        0x0020adfc:    a1dd        ..      ADR      r1,{pc}+0x378 ; 0x20b174
;;;164            break;
        0x0020adfe:    e7e8        ..      B        0x20add2 ; cmd_send_result + 62
;;;165        case RESULT_GAP_CAUSE_NOT_FIND:
;;;166            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND");
        0x0020ae00:    a1e3        ..      ADR      r1,{pc}+0x390 ; 0x20b190
;;;167            break;
        0x0020ae02:    e7e6        ..      B        0x20add2 ; cmd_send_result + 62
;;;168        case RESULT_GAP_CAUSE_CONN_LIMIT:
;;;169            data_uart_print("%s\r\n", "GAP_CAUSE_CONN_LIMIT");
        0x0020ae04:    a1e7        ..      ADR      r1,{pc}+0x3a0 ; 0x20b1a4
;;;170            break;
        0x0020ae06:    e7e4        ..      B        0x20add2 ; cmd_send_result + 62
;;;171        case RESULT_CMD_NOT_FOUND:
;;;172            data_uart_print("%s\r\n", "CMD:Command not found");
        0x0020ae08:    a1ec        ..      ADR      r1,{pc}+0x3b4 ; 0x20b1bc
;;;173            break;
        0x0020ae0a:    e7e2        ..      B        0x20add2 ; cmd_send_result + 62
;;;174        case RESULT_CMD_ERR_PARAM_NUM:
;;;175            data_uart_print("%s\r\n", "CMD:Wrong number of parameters");
        0x0020ae0c:    a1f1        ..      ADR      r1,{pc}+0x3c8 ; 0x20b1d4
;;;176            break;
        0x0020ae0e:    e7e0        ..      B        0x20add2 ; cmd_send_result + 62
;;;177        case RESULT_CMD_ERR_PARAM:
;;;178            data_uart_print("%s\r\n", "CMD:Wrong parameter");
;;;179            break;
;;;180        case RESULT_CMD_OUT_OF_RANGE:
;;;181            data_uart_print("%s\r\n", "CMD:Value out of range");
        0x0020ae10:    a1f8        ..      ADR      r1,{pc}+0x3e4 ; 0x20b1f4
;;;182            break;
        0x0020ae12:    e7de        ..      B        0x20add2 ; cmd_send_result + 62
;;;183        case RESULT_CMD_NOT_SUPPORT:
;;;184            data_uart_print("%s\r\n", "CMD:Not support");
        0x0020ae14:    a1fd        ..      ADR      r1,{pc}+0x3f8 ; 0x20b20c
;;;185            break;
        0x0020ae16:    e7dc        ..      B        0x20add2 ; cmd_send_result + 62
;;;186        case RESULT_GAP_CAUSE_ERROR_UNKNOWN:
;;;187            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_UNKNOWN");
;;;188            break;
;;;189        default:
;;;190            break;
;;;191        }
;;;192    }
        0x0020ae18:    4770        pG      BX       lr
    user_cmd_parse
        0x0020ae1a:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020ae1e:    2600        .&      MOVS     r6,#0
        0x0020ae20:    600e        .`      STR      r6,[r1,#0]
        0x0020ae22:    460d        .F      MOV      r5,r1
        0x0020ae24:    604e        N`      STR      r6,[r1,#4]
        0x0020ae26:    4631        1F      MOV      r1,r6
        0x0020ae28:    eb050281    ....    ADD      r2,r5,r1,LSL #2
        0x0020ae2c:    1c49        I.      ADDS     r1,r1,#1
        0x0020ae2e:    6516        .e      STR      r6,[r2,#0x50]
        0x0020ae30:    6096        .`      STR      r6,[r2,#8]
        0x0020ae32:    2912        .)      CMP      r1,#0x12
        0x0020ae34:    dbf8        ..      BLT      0x20ae28 ; user_cmd_parse + 14
        0x0020ae36:    f000fa92    ....    BL       user_cmd_skip_spaces ; 0x20b35e
        0x0020ae3a:    4604        .F      MOV      r4,r0
        0x0020ae3c:    7800        .x      LDRB     r0,[r0,#0]
        0x0020ae3e:    b120         .      CBZ      r0,0x20ae4a ; user_cmd_parse + 48
        0x0020ae40:    4620         F      MOV      r0,r4
        0x0020ae42:    f000fa97    ....    BL       user_cmd_find_end_of_word ; 0x20b374
        0x0020ae46:    4284        .B      CMP      r4,r0
        0x0020ae48:    d102        ..      BNE      0x20ae50 ; user_cmd_parse + 54
        0x0020ae4a:    2021        !       MOVS     r0,#0x21
        0x0020ae4c:    e8bd81f0    ....    POP      {r4-r8,pc}
        0x0020ae50:    602c        ,`      STR      r4,[r5,#0]
        0x0020ae52:    f8006b01    ...k    STRB     r6,[r0],#1
        0x0020ae56:    7801        .x      LDRB     r1,[r0,#0]
        0x0020ae58:    b391        ..      CBZ      r1,0x20aec0 ; user_cmd_parse + 166
        0x0020ae5a:    2400        .$      MOVS     r4,#0
        0x0020ae5c:    f000fa7f    ....    BL       user_cmd_skip_spaces ; 0x20b35e
        0x0020ae60:    2200        ."      MOVS     r2,#0
        0x0020ae62:    7801        .x      LDRB     r1,[r0,#0]
        0x0020ae64:    4607        .F      MOV      r7,r0
;;; ..\..\..\src\mcu\module\data_uart_cmd\user_cmd_parse.c (76)
        0x0020ae66:    4613        .F      MOV      r3,r2
;;;77     
;;;78         /* check if value is dec */
;;;79         if (p[0] == 'x')
        0x0020ae68:    2978        x)      CMP      r1,#0x78
        0x0020ae6a:    d002        ..      BEQ      0x20ae72 ; user_cmd_parse + 88
        0x0020ae6c:    2930        0)      CMP      r1,#0x30
        0x0020ae6e:    d003        ..      BEQ      0x20ae78 ; user_cmd_parse + 94
        0x0020ae70:    e007        ..      B        0x20ae82 ; user_cmd_parse + 104
;;;80         {
;;;81             hex = true;
        0x0020ae72:    2301        .#      MOVS     r3,#1
;;;82             p = &p[1];
        0x0020ae74:    1c78        x.      ADDS     r0,r7,#1
        0x0020ae76:    e004        ..      B        0x20ae82 ; user_cmd_parse + 104
;;;83         }
;;;84         else if ((p[0] == '0') && (p[1] == 'x'))
        0x0020ae78:    7841        Ax      LDRB     r1,[r0,#1]
        0x0020ae7a:    2978        x)      CMP      r1,#0x78
        0x0020ae7c:    d101        ..      BNE      0x20ae82 ; user_cmd_parse + 104
;;;85         {
;;;86             hex = true;
        0x0020ae7e:    2301        .#      MOVS     r3,#1
;;;87             p = &p[2];
        0x0020ae80:    1cb8        ..      ADDS     r0,r7,#2
;;;88         }
;;;89     
;;;90         for (;;)
;;;91         {
;;;92             char     ch;
;;;93             ch = *(p++) | 0x20;                 /* convert to lower case */
        0x0020ae82:    f8101b01    ....    LDRB     r1,[r0],#1
        0x0020ae86:    f0410120    A. .    ORR      r1,r1,#0x20
;;;94     
;;;95             if (hex)                            /* dec value */
        0x0020ae8a:    b173        s.      CBZ      r3,0x20aeaa ; user_cmd_parse + 144
;;;96             {
;;;97                 /* hex value */
;;;98                 if ((ch >= 'a') && (ch <= 'f'))
        0x0020ae8c:    f1a10c61    ..a.    SUB      r12,r1,#0x61
        0x0020ae90:    f1bc0f05    ....    CMP      r12,#5
        0x0020ae94:    d801        ..      BHI      0x20ae9a ; user_cmd_parse + 128
        0x0020ae96:    3957        W9      SUBS     r1,r1,#0x57
;;;99                 {
;;;100                    ch -= ('a' - 10);
        0x0020ae98:    e002        ..      B        0x20aea0 ; user_cmd_parse + 134
        0x0020ae9a:    3930        09      SUBS     r1,r1,#0x30
;;;101                }
;;;102                else if ((ch >= '0') && (ch <= '9'))
        0x0020ae9c:    2909        .)      CMP      r1,#9
        0x0020ae9e:    d810        ..      BHI      0x20aec2 ; user_cmd_parse + 168
        0x0020aea0:    f001010f    ....    AND      r1,r1,#0xf
        0x0020aea4:    eb011202    ....    ADD      r2,r1,r2,LSL #4
;;;103                {
;;;104                    ch -= '0';
        0x0020aea8:    e7eb        ..      B        0x20ae82 ; user_cmd_parse + 104
;;;105                }
;;;106                else
;;;107                {
;;;108                    break;
;;;109                }
;;;110                result = (result << 4);
;;;111                result += (ch & 0x0f);
;;;112            }
;;;113            else
;;;114            {
;;;115                if (ch < '0' || ch > '9')
        0x0020aeaa:    f1a10c30    ..0.    SUB      r12,r1,#0x30
        0x0020aeae:    f1bc0f0a    ....    CMP      r12,#0xa
        0x0020aeb2:    d206        ..      BCS      0x20aec2 ; user_cmd_parse + 168
;;;116                {
;;;117                    break;    /* end of string reached */
;;;118                }
;;;119                result = 10 * result + ch - '0';
        0x0020aeb4:    eb020282    ....    ADD      r2,r2,r2,LSL #2
        0x0020aeb8:    eb010242    ..B.    ADD      r2,r1,r2,LSL #1
        0x0020aebc:    3a30        0:      SUBS     r2,r2,#0x30
        0x0020aebe:    e7e0        ..      B        0x20ae82 ; user_cmd_parse + 104
        0x0020aec0:    e00f        ..      B        0x20aee2 ; user_cmd_parse + 200
;;;120            }
;;;121        }
;;;122        return (result);
;;;123    }
;;;124    
;;;125    /**
;;;126     * @brief  Send result, display in UART Assitant.
;;;127     *
;;;128     * @param result    Command parse result.
;;;129     * @return none
;;;130    */
;;;131    static void cmd_send_result(T_USER_CMD_PARSE_RESULT result)
;;;132    {
;;;133        switch (result)
;;;134        {
;;;135        case RESULT_ERR:
;;;136            data_uart_print("%s\r\n", "CMD:Error");
;;;137            break;
;;;138        case RESULT_GAP_CAUSE_ALREADY_IN_REQ:
;;;139            data_uart_print("%s\r\n", "GAP_CAUSE_ALREADY_IN_REQ");
;;;140            break;
;;;141        case RESULT_GAP_CAUSE_INVALID_STATE:
;;;142            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_STATE");
;;;143            break;
;;;144        case RESULT_GAP_CAUSE_INVALID_PARAM:
;;;145            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PARAM");
;;;146            break;
;;;147        case RESULT_GAP_CAUSE_NON_CONN:
;;;148            data_uart_print("%s\r\n", "GAP_CAUSE_NON_CONN");
;;;149            break;
;;;150        case RESULT_GAP_CAUSE_NOT_FIND_IRK:
;;;151            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND_IRK");
;;;152            break;
;;;153        case RESULT_GAP_CAUSE_ERROR_CREDITS:
;;;154            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_CREDITS");
;;;155            break;
;;;156        case RESULT_GAP_CAUSE_SEND_REQ_FAILED:
;;;157            data_uart_print("%s\r\n", "GAP_CAUSE_SEND_REQ_FAILED");
;;;158            break;
;;;159        case RESULT_GAP_CAUSE_NO_RESOURCE:
;;;160            data_uart_print("%s\r\n", "GAP_CAUSE_NO_RESOURCE");
;;;161            break;
;;;162        case RESULT_GAP_CAUSE_INVALID_PDU_SIZE:
;;;163            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PDU_SIZE");
;;;164            break;
;;;165        case RESULT_GAP_CAUSE_NOT_FIND:
;;;166            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND");
;;;167            break;
;;;168        case RESULT_GAP_CAUSE_CONN_LIMIT:
;;;169            data_uart_print("%s\r\n", "GAP_CAUSE_CONN_LIMIT");
;;;170            break;
;;;171        case RESULT_CMD_NOT_FOUND:
;;;172            data_uart_print("%s\r\n", "CMD:Command not found");
;;;173            break;
;;;174        case RESULT_CMD_ERR_PARAM_NUM:
;;;175            data_uart_print("%s\r\n", "CMD:Wrong number of parameters");
;;;176            break;
;;;177        case RESULT_CMD_ERR_PARAM:
;;;178            data_uart_print("%s\r\n", "CMD:Wrong parameter");
;;;179            break;
;;;180        case RESULT_CMD_OUT_OF_RANGE:
;;;181            data_uart_print("%s\r\n", "CMD:Value out of range");
;;;182            break;
;;;183        case RESULT_CMD_NOT_SUPPORT:
;;;184            data_uart_print("%s\r\n", "CMD:Not support");
;;;185            break;
;;;186        case RESULT_GAP_CAUSE_ERROR_UNKNOWN:
;;;187            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_UNKNOWN");
;;;188            break;
;;;189        default:
;;;190            break;
;;;191        }
;;;192    }
;;;193    
;;;194    /**
;;;195     * @brief   List cmd.
;;;196     *
;;;197     * @param p_cmd_table   Command table, include user self-definition command function.
;;;198     * @return  Command execute result.
;;;199    */
;;;200    static T_USER_CMD_PARSE_RESULT user_cmd_list(const T_USER_CMD_TABLE_ENTRY *p_cmd_table)
;;;201    {
;;;202        int32_t i = 0;
;;;203        T_USER_CMD_PARSE_RESULT result = RESULT_CMD_NOT_FOUND;
;;;204    
;;;205        /* find command in table */
;;;206        while ((p_cmd_table + i)->p_cmd != NULL)
;;;207        {
;;;208            data_uart_print("%s", (p_cmd_table + i)->p_option);
;;;209            data_uart_print("%s", "  *");
;;;210            data_uart_print("%s", (p_cmd_table + i)->p_help);
;;;211            result = RESULT_SUCESS;
;;;212            i++;
;;;213        };
;;;214    
;;;215        data_uart_print(",.\r\n  *up down\r\n");
;;;216        data_uart_print("[]\r\n  *left right\r\n");
;;;217        data_uart_print("/\\\r\n  *home end\r\n");
;;;218        data_uart_print("backspace\r\n  *delete\r\n");
;;;219    
;;;220        return result;
;;;221    }
;;;222    
;;;223    /**
;;;224     * @brief  Execute command.
;;;225     *
;;;226     * @param p_parse_value     Command parse value.
;;;227     * @param p_cmd_table       Command table, include user self-definition command function.
;;;228     * @return  Command execute result.
;;;229    */
;;;230    static T_USER_CMD_PARSE_RESULT user_cmd_execute(T_USER_CMD_PARSED_VALUE *p_parse_value,
;;;231                                                    const T_USER_CMD_TABLE_ENTRY *p_cmd_table)
;;;232    {
;;;233        int32_t i = 0;
;;;234        T_USER_CMD_PARSE_RESULT result = RESULT_CMD_NOT_FOUND;
;;;235    
;;;236        if (strcmp((const char *)p_parse_value->p_cmd, (const char *)"?") == 0)
;;;237        {
;;;238            user_cmd_list(p_cmd_table);
;;;239            return RESULT_SUCESS;
;;;240        }
;;;241    
;;;242        /* find command in table */
;;;243        while ((p_cmd_table + i)->p_cmd != NULL)
;;;244        {
;;;245            if (strcmp((const char *)(p_cmd_table + i)->p_cmd, (const char *)p_parse_value->p_cmd) == 0)
;;;246            {
;;;247                /* check if user wants help */
;;;248                if (p_parse_value->param_count && *p_parse_value->p_param[0] == '?')
;;;249                {
;;;250                    data_uart_print("%s", (p_cmd_table + i)->p_option);
;;;251                    data_uart_print("%s", "  *");
;;;252                    data_uart_print("%s", (p_cmd_table + i)->p_help);
;;;253                    result = RESULT_SUCESS;
;;;254                }
;;;255                else
;;;256                {
;;;257                    /* execute command function */
;;;258                    result = (p_cmd_table + i)->func(p_parse_value);
;;;259                }
;;;260                /* exit while */
;;;261                break;
;;;262            }
;;;263            i++;
;;;264        };
;;;265    
;;;266        return result;
;;;267    }
;;;268    
;;;269    /**
;;;270     * @brief  Parse a command line and return the found command and parameters in "p_parse_value"
;;;271     *
;;;272     * @param p_user_cmd_if     Command parsed.
;;;273     * @param p_parse_value     Command parse value.
;;;274     * @return  Command parse result.
;;;275    */
;;;276    static T_USER_CMD_PARSE_RESULT user_cmd_parse(T_USER_CMD_IF *p_user_cmd_if,
;;;277                                                  T_USER_CMD_PARSED_VALUE *p_parse_value)
;;;278    {
;;;279        int32_t i;
;;;280        char *p, *q;
;;;281    
;;;282        /* clear all results */
;;;283        p_parse_value->p_cmd       = NULL;
;;;284        p_parse_value->param_count = 0;
;;;285        for (i = 0 ; i < USER_CMD_MAX_PARAMETERS; i++)
;;;286        {
;;;287            p_parse_value->p_param[i]  = NULL;
;;;288            p_parse_value->dw_param[i] = 0;
;;;289        }
;;;290    
;;;291        /* Parse line */
;;;292        p = p_user_cmd_if->cmdline_buf;
;;;293    
;;;294        /*ignore leading spaces */
;;;295        p = user_cmd_skip_spaces(p);
;;;296        if (*p == '\0')                     /* empty command line ? */
;;;297        {
;;;298            return RESULT_CMD_EMPTY_LINE;
;;;299        }
;;;300    
;;;301        /* find end of word */
;;;302        q = user_cmd_find_end_of_word(p);
;;;303        if (p == q)                         /* empty command line ? */
;;;304        {
;;;305            return RESULT_CMD_EMPTY_LINE;
;;;306        }
;;;307    
;;;308        p_parse_value->p_cmd = p;
;;;309        *q = '\0';                        /* mark end of command */
;;;310        p = q + 1;
;;;311    
;;;312        /* parse parameters */
;;;313        if (*p != '\0')                   /* end of line ? */
;;;314        {
;;;315            int32_t j;
;;;316    
;;;317            j = 0;
;;;318            do
;;;319            {
;;;320                uint32_t d;
;;;321                /* ignore leading spaces */
;;;322                p = user_cmd_skip_spaces(p);
;;;323                d = user_cmd_str_to_uint32(p);
;;;324    
;;;325                p_parse_value->p_param[j]    = p;
        0x0020aec2:    eb050084    ....    ADD      r0,r5,r4,LSL #2
;;;326                p_parse_value->dw_param[j++] = d;
        0x0020aec6:    1c64        d.      ADDS     r4,r4,#1
;;;327    
;;;328                if (j >= USER_CMD_MAX_PARAMETERS)
        0x0020aec8:    6507        .e      STR      r7,[r0,#0x50]
        0x0020aeca:    6082        .`      STR      r2,[r0,#8]
        0x0020aecc:    2c12        .,      CMP      r4,#0x12
        0x0020aece:    da07        ..      BGE      0x20aee0 ; user_cmd_parse + 198
;;;329                {
;;;330                    break;
;;;331                }
;;;332    
;;;333                /* find next parameter */
;;;334                p  = user_cmd_find_end_of_word(p);
        0x0020aed0:    4638        8F      MOV      r0,r7
        0x0020aed2:    f000fa4f    ..O.    BL       user_cmd_find_end_of_word ; 0x20b374
;;;335                *p++ = '\0';                        /* mark end of parameter */
        0x0020aed6:    f8006b01    ...k    STRB     r6,[r0],#1
;;;336            }
;;;337            while (*p != '\0');
        0x0020aeda:    7801        .x      LDRB     r1,[r0,#0]
        0x0020aedc:    2900        .)      CMP      r1,#0
        0x0020aede:    d1bd        ..      BNE      0x20ae5c ; user_cmd_parse + 66
;;;338    
;;;339            p_parse_value->param_count = j;
        0x0020aee0:    606c        l`      STR      r4,[r5,#4]
;;;340        }
;;;341    
;;;342        return RESULT_SUCESS;
        0x0020aee2:    2000        .       MOVS     r0,#0
;;;343    }
        0x0020aee4:    e7b2        ..      B        0x20ae4c ; user_cmd_parse + 50
    cmd_clear_screen
;;;344    
;;;345    /**
;;;346     * @brief  Clear command line buffer.
;;;347     *
;;;348     * @param p_user_cmd_if     Command parsed.
;;;349     * @return none.
;;;350    */
;;;351    static void cmd_clear(T_USER_CMD_IF *p_user_cmd_if)
;;;352    {
;;;353        p_user_cmd_if->accum_cmd_len = 0;
;;;354        p_user_cmd_if->cmd_cur = 0;
;;;355        memset(p_user_cmd_if->cmdline_buf, 0, sizeof(p_user_cmd_if->cmdline_buf));
;;;356    }
;;;357    
;;;358    static void cmd_move_back(T_USER_CMD_IF *p_user_cmd_if)
;;;359    {
;;;360        for (uint8_t loop = 0; loop < p_user_cmd_if->accum_cmd_len - p_user_cmd_if->cmd_cur; loop ++)
;;;361        {
;;;362            p_user_cmd_if->cmdline_buf[p_user_cmd_if->accum_cmd_len - loop] =
;;;363                p_user_cmd_if->cmdline_buf[p_user_cmd_if->accum_cmd_len - loop - 1];
;;;364        }
;;;365    }
;;;366    
;;;367    static void cmd_move_forward(T_USER_CMD_IF *p_user_cmd_if)
;;;368    {
;;;369        for (uint8_t loop = 0; loop < p_user_cmd_if->accum_cmd_len - p_user_cmd_if->cmd_cur; loop ++)
;;;370        {
;;;371            p_user_cmd_if->cmdline_buf[p_user_cmd_if->cmd_cur + loop - 1] =
;;;372                p_user_cmd_if->cmdline_buf[p_user_cmd_if->cmd_cur + loop];
;;;373        }
;;;374    }
;;;375    static void cmd_clear_screen(T_USER_CMD_IF *p_user_cmd_if)
;;;376    {
        0x0020aee6:    b570        p.      PUSH     {r4-r6,lr}
        0x0020aee8:    4604        .F      MOV      r4,r0
        0x0020aeea:    f8900066    ..f.    LDRB     r0,[r0,#0x66]
        0x0020aeee:    f8d411a0    ....    LDR      r1,[r4,#0x1a0]
        0x0020aef2:    2500        .%      MOVS     r5,#0
        0x0020aef4:    4288        .B      CMP      r0,r1
        0x0020aef6:    da0b        ..      BGE      0x20af10 ; cmd_clear_screen + 42
;;;377        if (p_user_cmd_if->cmd_cur < p_user_cmd_if->accum_cmd_len)
;;;378        {
;;;379            data_uart_print("%s", p_user_cmd_if->cmdline_buf + p_user_cmd_if->cmd_cur);
        0x0020aef8:    1901        ..      ADDS     r1,r0,r4
        0x0020aefa:    a0c8        ..      ADR      r0,{pc}+0x322 ; 0x20b21c
        0x0020aefc:    f7fffe5a    ..Z.    BL       data_uart_print ; 0x20abb4
        0x0020af00:    e006        ..      B        0x20af10 ; cmd_clear_screen + 42
        0x0020af02:    1e40        @.      SUBS     r0,r0,#1
        0x0020af04:    f8c401a0    ....    STR      r0,[r4,#0x1a0]
        0x0020af08:    5425        %T      STRB     r5,[r4,r0]
        0x0020af0a:    a0c5        ..      ADR      r0,{pc}+0x316 ; 0x20b220
        0x0020af0c:    f7fffe52    ..R.    BL       data_uart_print ; 0x20abb4
;;;380        }
;;;381    
;;;382        while (p_user_cmd_if->accum_cmd_len != 0)
        0x0020af10:    f8d401a0    ....    LDR      r0,[r4,#0x1a0]
        0x0020af14:    2800        .(      CMP      r0,#0
        0x0020af16:    d1f4        ..      BNE      0x20af02 ; cmd_clear_screen + 28
;;;383        {
;;;384            p_user_cmd_if->accum_cmd_len--;
;;;385            p_user_cmd_if->cmdline_buf[p_user_cmd_if->accum_cmd_len] = '\0';
;;;386            data_uart_print("\b \b");
;;;387        }
;;;388        p_user_cmd_if->cmd_cur = 0;
        0x0020af18:    f8845066    ..fP    STRB     r5,[r4,#0x66]
;;;389    }
        0x0020af1c:    bd70        p.      POP      {r4-r6,pc}
    user_cmd_collect
;;;390    
;;;391    /**
;;;392     * @brief  Collect command characters.
;;;393     *
;;;394     * @param[in] p_user_cmd_if   Store parsed commands.
;;;395     * @param[in] p_data          Data to be parsed.
;;;396     * @param[in] len             Length of data to be command parsed.
;;;397     * @param[in] p_cmd_table     Command table to execute function.
;;;398     * @return  Command collect result.
;;;399     * @retval 1 true.
;;;400     * @retval 0 false.
;;;401     *
;;;402     * <b>Example usage</b>
;;;403     * \code{.c}
;;;404        void app_handle_io_msg(T_IO_MSG io_msg)
;;;405        {
;;;406            uint16_t msg_type = io_msg.type;
;;;407            uint8_t rx_char;
;;;408    
;;;409            switch (msg_type)
;;;410            {
;;;411            case IO_MSG_TYPE_UART:
;;;412                // We handle user command informations from Data UART in this branch.
;;;413                rx_char = (uint8_t)io_msg.subtype;
;;;414                user_cmd_collect(&user_cmd_if, &rx_char, sizeof(rx_char), user_cmd_table);
;;;415                break;
;;;416            default:
;;;417                break;
;;;418            }
;;;419        }
;;;420     * \endcode
;;;421     */
;;;422    bool user_cmd_collect(T_USER_CMD_IF *p_user_cmd_if, uint8_t *p_data, int32_t len,
;;;423                          const T_USER_CMD_TABLE_ENTRY *p_cmd_table)
;;;424    {
        0x0020af1e:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0020af22:    b0a6        ..      SUB      sp,sp,#0x98
        0x0020af24:    469a        .F      MOV      r10,r3
        0x0020af26:    4691        .F      MOV      r9,r2
        0x0020af28:    460e        .F      MOV      r6,r1
        0x0020af2a:    4604        .F      MOV      r4,r0
        0x0020af2c:    f04f0800    O...    MOV      r8,#0
        0x0020af30:    2703        .'      MOVS     r7,#3
        0x0020af32:    f2001599    ....    ADD      r5,r0,#0x199
        0x0020af36:    e1fc        ..      B        0x20b332 ; user_cmd_collect + 1044
;;;425        T_USER_CMD_PARSED_VALUE parse_result;
;;;426    
;;;427        while (len--)
;;;428        {
;;;429            char c = *p_data++;
        0x0020af38:    f8160b01    ....    LDRB     r0,[r6],#1
;;;430    
;;;431            if (c != 0x0)                   /* not ESC character received */
        0x0020af3c:    2800        .(      CMP      r0,#0
        0x0020af3e:    d0fa        ..      BEQ      0x20af36 ; user_cmd_collect + 24
;;;432            {
;;;433                switch (c)                  /* Normal handling */
        0x0020af40:    282e        .(      CMP      r0,#0x2e
        0x0020af42:    d07c        |.      BEQ      0x20b03e ; user_cmd_collect + 288
        0x0020af44:    dc08        ..      BGT      0x20af58 ; user_cmd_collect + 58
        0x0020af46:    2808        .(      CMP      r0,#8
        0x0020af48:    d060        `.      BEQ      0x20b00c ; user_cmd_collect + 238
        0x0020af4a:    280a        .(      CMP      r0,#0xa
        0x0020af4c:    d012        ..      BEQ      0x20af74 ; user_cmd_collect + 86
        0x0020af4e:    280d        .(      CMP      r0,#0xd
        0x0020af50:    d010        ..      BEQ      0x20af74 ; user_cmd_collect + 86
        0x0020af52:    282c        ,(      CMP      r0,#0x2c
        0x0020af54:    d108        ..      BNE      0x20af68 ; user_cmd_collect + 74
        0x0020af56:    e16a        j.      B        0x20b22e ; user_cmd_collect + 784
        0x0020af58:    282f        /(      CMP      r0,#0x2f
        0x0020af5a:    d071        q.      BEQ      0x20b040 ; user_cmd_collect + 290
        0x0020af5c:    285b        [(      CMP      r0,#0x5b
        0x0020af5e:    d070        p.      BEQ      0x20b042 ; user_cmd_collect + 292
        0x0020af60:    285c        \(      CMP      r0,#0x5c
        0x0020af62:    d06f        o.      BEQ      0x20b044 ; user_cmd_collect + 294
        0x0020af64:    285d        ](      CMP      r0,#0x5d
        0x0020af66:    d06e        n.      BEQ      0x20b046 ; user_cmd_collect + 296
        0x0020af68:    f8d411a0    ....    LDR      r1,[r4,#0x1a0]
        0x0020af6c:    2964        d)      CMP      r1,#0x64
        0x0020af6e:    dae2        ..      BGE      0x20af36 ; user_cmd_collect + 24
        0x0020af70:    2100        .!      MOVS     r1,#0
        0x0020af72:    e1c1        ..      B        0x20b2f8 ; user_cmd_collect + 986
;;;434                {
;;;435                case '\n':
;;;436                case '\r':                  /* end of line */
;;;437                    //vsop data_uart_print("\r\n");
;;;438                    p_user_cmd_if->history_cur = USER_CMD_MAX_HISTORY_LINE;
        0x0020af74:    f884719e    ...q    STRB     r7,[r4,#0x19e]
;;;439    #if F_BT_DLPS_EN
;;;440                    data_uart_can_enter_dlps(true);
;;;441    #endif
;;;442                    if (p_user_cmd_if->accum_cmd_len > 0)  /* at least one character in command line ? */
        0x0020af78:    f8d421a0    ...!    LDR      r2,[r4,#0x1a0]
        0x0020af7c:    2a00        .*      CMP      r2,#0
        0x0020af7e:    dd3c        <.      BLE      0x20affa ; user_cmd_collect + 220
;;;443                    {
;;;444                        T_USER_CMD_PARSE_RESULT result;
;;;445    
;;;446                        // save cmd first
;;;447                        if (p_user_cmd_if->history_head == USER_CMD_MAX_HISTORY_LINE)
        0x0020af80:    f894019c    ....    LDRB     r0,[r4,#0x19c]
        0x0020af84:    2803        .(      CMP      r0,#3
        0x0020af86:    d02c        ,.      BEQ      0x20afe2 ; user_cmd_collect + 196
;;;448                        {
;;;449                            p_user_cmd_if->history_head = 0;
;;;450                            p_user_cmd_if->history_tail = 0;
;;;451                        }
;;;452                        else
;;;453                        {
;;;454                            p_user_cmd_if->history_tail = (p_user_cmd_if->history_tail + 1) % USER_CMD_MAX_HISTORY_LINE;
        0x0020af88:    f894119d    ....    LDRB     r1,[r4,#0x19d]
        0x0020af8c:    1c49        I.      ADDS     r1,r1,#1
        0x0020af8e:    fbb1f3f7    ....    UDIV     r3,r1,r7
        0x0020af92:    fb071113    ....    MLS      r1,r7,r3,r1
        0x0020af96:    f884119d    ....    STRB     r1,[r4,#0x19d]
;;;455                            if (p_user_cmd_if->history_tail == p_user_cmd_if->history_head)
        0x0020af9a:    4281        .B      CMP      r1,r0
        0x0020af9c:    d106        ..      BNE      0x20afac ; user_cmd_collect + 142
        0x0020af9e:    1c40        @.      ADDS     r0,r0,#1
;;;456                            {
;;;457                                p_user_cmd_if->history_head = (p_user_cmd_if->history_head + 1) % USER_CMD_MAX_HISTORY_LINE;
        0x0020afa0:    fbb0f1f7    ....    UDIV     r1,r0,r7
        0x0020afa4:    fb070011    ....    MLS      r0,r7,r1,r0
        0x0020afa8:    f884019c    ....    STRB     r0,[r4,#0x19c]
;;;458                            }
;;;459                        }
;;;460                        p_user_cmd_if->cmd_history_len[p_user_cmd_if->history_tail] = p_user_cmd_if->accum_cmd_len;
        0x0020afac:    f894019d    ....    LDRB     r0,[r4,#0x19d]
        0x0020afb0:    4621        !F      MOV      r1,r4
        0x0020afb2:    5542        BU      STRB     r2,[r0,r5]
;;;461                        memcpy(p_user_cmd_if->cmd_history[p_user_cmd_if->history_tail], p_user_cmd_if->cmdline_buf,
        0x0020afb4:    f894019d    ....    LDRB     r0,[r4,#0x19d]
        0x0020afb8:    f8d421a0    ...!    LDR      r2,[r4,#0x1a0]
        0x0020afbc:    eb001000    ....    ADD      r0,r0,r0,LSL #4
        0x0020afc0:    eb000040    ..@.    ADD      r0,r0,r0,LSL #1
        0x0020afc4:    eb040040    ..@.    ADD      r0,r4,r0,LSL #1
        0x0020afc8:    3067        g0      ADDS     r0,r0,#0x67
        0x0020afca:    f64eff66    N.f.    BL       __aeabi_memcpy ; 0x59e9a
;;;462                               p_user_cmd_if->accum_cmd_len);
;;;463    
;;;464                        p_user_cmd_if->cmdline_buf[p_user_cmd_if->accum_cmd_len] = '\0';
        0x0020afce:    f8d411a0    ....    LDR      r1,[r4,#0x1a0]
        0x0020afd2:    4620         F      MOV      r0,r4
        0x0020afd4:    f8048001    ....    STRB     r8,[r4,r1]
;;;465                        result = user_cmd_parse(p_user_cmd_if, &parse_result);
        0x0020afd8:    4669        iF      MOV      r1,sp
        0x0020afda:    f7ffff1e    ....    BL       user_cmd_parse ; 0x20ae1a
;;;466                        if (result == RESULT_SUCESS)
        0x0020afde:    b128        (.      CBZ      r0,0x20afec ; user_cmd_collect + 206
        0x0020afe0:    e009        ..      B        0x20aff6 ; user_cmd_collect + 216
        0x0020afe2:    f884819c    ....    STRB     r8,[r4,#0x19c]
        0x0020afe6:    f884819d    ....    STRB     r8,[r4,#0x19d]
        0x0020afea:    e7df        ..      B        0x20afac ; user_cmd_collect + 142
;;;467                        {
;;;468                            result = user_cmd_execute(&parse_result, p_cmd_table);
        0x0020afec:    4651        QF      MOV      r1,r10
        0x0020afee:    4668        hF      MOV      r0,sp
        0x0020aff0:    f000f9cd    ....    BL       user_cmd_execute ; 0x20b38e
        0x0020aff4:    b108        ..      CBZ      r0,0x20affa ; user_cmd_collect + 220
;;;469                        }
;;;470    
;;;471                        if (result != RESULT_SUCESS)
;;;472                        {
;;;473                            cmd_send_result(result);
        0x0020aff6:    f7fffecd    ....    BL       cmd_send_result ; 0x20ad94
        0x0020affa:    f8c481a0    ....    STR      r8,[r4,#0x1a0]
;;;474                        }
;;;475                    }
;;;476    
;;;477                    cmd_clear(p_user_cmd_if);
        0x0020affe:    4620         F      MOV      r0,r4
        0x0020b000:    f8848066    ..f.    STRB     r8,[r4,#0x66]
        0x0020b004:    2166        f!      MOVS     r1,#0x66
        0x0020b006:    f64ff82b    O.+.    BL       __aeabi_memclr4 ; 0x5a060
;;;478                    break;
        0x0020b00a:    e192        ..      B        0x20b332 ; user_cmd_collect + 1044
;;;479    
;;;480                case '\b':                        /* backspace */
;;;481                    if (p_user_cmd_if->accum_cmd_len > 0 && p_user_cmd_if->cmd_cur > 0)
        0x0020b00c:    f8d401a0    ....    LDR      r0,[r4,#0x1a0]
        0x0020b010:    2800        .(      CMP      r0,#0
        0x0020b012:    dd2c        ,.      BLE      0x20b06e ; user_cmd_collect + 336
        0x0020b014:    f8940066    ..f.    LDRB     r0,[r4,#0x66]
        0x0020b018:    2800        .(      CMP      r0,#0
        0x0020b01a:    d028        (.      BEQ      0x20b06e ; user_cmd_collect + 336
        0x0020b01c:    2000        .       MOVS     r0,#0
;;;482                    {
;;;483                        uint8_t loop;
;;;484    
;;;485                        cmd_move_forward(p_user_cmd_if);
        0x0020b01e:    e006        ..      B        0x20b02e ; user_cmd_collect + 272
        0x0020b020:    1822        ".      ADDS     r2,r4,r0
        0x0020b022:    5c8b        .\      LDRB     r3,[r1,r2]
        0x0020b024:    190a        ..      ADDS     r2,r1,r4
        0x0020b026:    1e41        A.      SUBS     r1,r0,#1
        0x0020b028:    1c40        @.      ADDS     r0,r0,#1
        0x0020b02a:    5453        ST      STRB     r3,[r2,r1]
        0x0020b02c:    b2c0        ..      UXTB     r0,r0
        0x0020b02e:    f8941066    ..f.    LDRB     r1,[r4,#0x66]
        0x0020b032:    f8d421a0    ...!    LDR      r2,[r4,#0x1a0]
        0x0020b036:    1a52        R.      SUBS     r2,r2,r1
        0x0020b038:    4282        .B      CMP      r2,r0
        0x0020b03a:    dcf1        ..      BGT      0x20b020 ; user_cmd_collect + 258
;;;486                        p_user_cmd_if->accum_cmd_len--;
        0x0020b03c:    e004        ..      B        0x20b048 ; user_cmd_collect + 298
        0x0020b03e:    e10d        ..      B        0x20b25c ; user_cmd_collect + 830
        0x0020b040:    e14f        O.      B        0x20b2e2 ; user_cmd_collect + 964
        0x0020b042:    e135        5.      B        0x20b2b0 ; user_cmd_collect + 914
        0x0020b044:    e143        C.      B        0x20b2ce ; user_cmd_collect + 944
        0x0020b046:    e138        8.      B        0x20b2ba ; user_cmd_collect + 924
        0x0020b048:    f8d401a0    ....    LDR      r0,[r4,#0x1a0]
        0x0020b04c:    1e40        @.      SUBS     r0,r0,#1
;;;487                        p_user_cmd_if->cmd_cur--;
        0x0020b04e:    f8c401a0    ....    STR      r0,[r4,#0x1a0]
        0x0020b052:    f8941066    ..f.    LDRB     r1,[r4,#0x66]
        0x0020b056:    1e49        I.      SUBS     r1,r1,#1
        0x0020b058:    f8841066    ..f.    STRB     r1,[r4,#0x66]
;;;488                        p_user_cmd_if->cmdline_buf[p_user_cmd_if->accum_cmd_len] = '\0';
        0x0020b05c:    f8048000    ....    STRB     r8,[r4,r0]
        0x0020b060:    f8941066    ..f.    LDRB     r1,[r4,#0x66]
;;;489                        //vsop data_uart_print("\b%s", p_user_cmd_if->cmdline_buf + p_user_cmd_if->cmd_cur);
;;;490                        //vsop data_uart_print(" \b");
;;;491                        for (loop = 0; loop < p_user_cmd_if->accum_cmd_len - p_user_cmd_if->cmd_cur; loop++)
        0x0020b064:    f8d421a0    ...!    LDR      r2,[r4,#0x1a0]
        0x0020b068:    2000        .       MOVS     r0,#0
        0x0020b06a:    1a51        Q.      SUBS     r1,r2,r1
        0x0020b06c:    e0dc        ..      B        0x20b228 ; user_cmd_collect + 778
        0x0020b06e:    e0f4        ..      B        0x20b25a ; user_cmd_collect + 828
    $d
        0x0020b070:    3a444d43    CMD:    DCD    977554755
        0x0020b074:    6e6f7257    Wron    DCD    1852797527
        0x0020b078:    61702067    g pa    DCD    1634738279
        0x0020b07c:    656d6172    rame    DCD    1701667186
        0x0020b080:    00726574    ter.    DCD    7497076
        0x0020b084:    5f504147    GAP_    DCD    1599095111
        0x0020b088:    53554143    CAUS    DCD    1398096195
        0x0020b08c:    52455f45    E_ER    DCD    1380278085
        0x0020b090:    5f524f52    ROR_    DCD    1599229778
        0x0020b094:    4e4b4e55    UNKN    DCD    1313558101
        0x0020b098:    004e574f    OWN.    DCD    5134159
        0x0020b09c:    0a0d7325    %s..    DCD    168653605
        0x0020b0a0:    00000000    ....    DCD    0
        0x0020b0a4:    3a444d43    CMD:    DCD    977554755
        0x0020b0a8:    6f727245    Erro    DCD    1869771333
        0x0020b0ac:    00000072    r...    DCD    114
        0x0020b0b0:    5f504147    GAP_    DCD    1599095111
        0x0020b0b4:    53554143    CAUS    DCD    1398096195
        0x0020b0b8:    4c415f45    E_AL    DCD    1279352645
        0x0020b0bc:    44414552    READ    DCD    1145128274
        0x0020b0c0:    4e495f59    Y_IN    DCD    1313431385
        0x0020b0c4:    5145525f    _REQ    DCD    1363497567
        0x0020b0c8:    00000000    ....    DCD    0
        0x0020b0cc:    5f504147    GAP_    DCD    1599095111
        0x0020b0d0:    53554143    CAUS    DCD    1398096195
        0x0020b0d4:    4e495f45    E_IN    DCD    1313431365
        0x0020b0d8:    494c4156    VALI    DCD    1229734230
        0x0020b0dc:    54535f44    D_ST    DCD    1414750020
        0x0020b0e0:    00455441    ATE.    DCD    4543553
        0x0020b0e4:    5f504147    GAP_    DCD    1599095111
        0x0020b0e8:    53554143    CAUS    DCD    1398096195
        0x0020b0ec:    4e495f45    E_IN    DCD    1313431365
        0x0020b0f0:    494c4156    VALI    DCD    1229734230
        0x0020b0f4:    41505f44    D_PA    DCD    1095786308
        0x0020b0f8:    004d4152    RAM.    DCD    5062994
        0x0020b0fc:    5f504147    GAP_    DCD    1599095111
        0x0020b100:    53554143    CAUS    DCD    1398096195
        0x0020b104:    4f4e5f45    E_NO    DCD    1330536261
        0x0020b108:    4f435f4e    N_CO    DCD    1329815374
        0x0020b10c:    00004e4e    NN..    DCD    20046
        0x0020b110:    5f504147    GAP_    DCD    1599095111
        0x0020b114:    53554143    CAUS    DCD    1398096195
        0x0020b118:    4f4e5f45    E_NO    DCD    1330536261
        0x0020b11c:    49465f54    T_FI    DCD    1229348692
        0x0020b120:    495f444e    ND_I    DCD    1230980174
        0x0020b124:    00004b52    RK..    DCD    19282
        0x0020b128:    5f504147    GAP_    DCD    1599095111
        0x0020b12c:    53554143    CAUS    DCD    1398096195
        0x0020b130:    52455f45    E_ER    DCD    1380278085
        0x0020b134:    5f524f52    ROR_    DCD    1599229778
        0x0020b138:    44455243    CRED    DCD    1145393731
        0x0020b13c:    00535449    ITS.    DCD    5461065
        0x0020b140:    5f504147    GAP_    DCD    1599095111
        0x0020b144:    53554143    CAUS    DCD    1398096195
        0x0020b148:    45535f45    E_SE    DCD    1163091781
        0x0020b14c:    525f444e    ND_R    DCD    1381975118
        0x0020b150:    465f5145    EQ_F    DCD    1180651845
        0x0020b154:    454c4941    AILE    DCD    1162627393
        0x0020b158:    00000044    D...    DCD    68
        0x0020b15c:    5f504147    GAP_    DCD    1599095111
        0x0020b160:    53554143    CAUS    DCD    1398096195
        0x0020b164:    4f4e5f45    E_NO    DCD    1330536261
        0x0020b168:    5345525f    _RES    DCD    1397051999
        0x0020b16c:    4352554f    OURC    DCD    1129469263
        0x0020b170:    00000045    E...    DCD    69
        0x0020b174:    5f504147    GAP_    DCD    1599095111
        0x0020b178:    53554143    CAUS    DCD    1398096195
        0x0020b17c:    4e495f45    E_IN    DCD    1313431365
        0x0020b180:    494c4156    VALI    DCD    1229734230
        0x0020b184:    44505f44    D_PD    DCD    1146117956
        0x0020b188:    49535f55    U_SI    DCD    1230200661
        0x0020b18c:    0000455a    ZE..    DCD    17754
        0x0020b190:    5f504147    GAP_    DCD    1599095111
        0x0020b194:    53554143    CAUS    DCD    1398096195
        0x0020b198:    4f4e5f45    E_NO    DCD    1330536261
        0x0020b19c:    49465f54    T_FI    DCD    1229348692
        0x0020b1a0:    0000444e    ND..    DCD    17486
        0x0020b1a4:    5f504147    GAP_    DCD    1599095111
        0x0020b1a8:    53554143    CAUS    DCD    1398096195
        0x0020b1ac:    4f435f45    E_CO    DCD    1329815365
        0x0020b1b0:    4c5f4e4e    NN_L    DCD    1281314382
        0x0020b1b4:    54494d49    IMIT    DCD    1414090057
        0x0020b1b8:    00000000    ....    DCD    0
        0x0020b1bc:    3a444d43    CMD:    DCD    977554755
        0x0020b1c0:    6d6d6f43    Comm    DCD    1835888451
        0x0020b1c4:    20646e61    and     DCD    543452769
        0x0020b1c8:    20746f6e    not     DCD    544501614
        0x0020b1cc:    6e756f66    foun    DCD    1853189990
        0x0020b1d0:    00000064    d...    DCD    100
        0x0020b1d4:    3a444d43    CMD:    DCD    977554755
        0x0020b1d8:    6e6f7257    Wron    DCD    1852797527
        0x0020b1dc:    756e2067    g nu    DCD    1970151527
        0x0020b1e0:    7265626d    mber    DCD    1919246957
        0x0020b1e4:    20666f20     of     DCD    543584032
        0x0020b1e8:    61726170    para    DCD    1634886000
        0x0020b1ec:    6574656d    mete    DCD    1702126957
        0x0020b1f0:    00007372    rs..    DCD    29554
        0x0020b1f4:    3a444d43    CMD:    DCD    977554755
        0x0020b1f8:    756c6156    Valu    DCD    1970037078
        0x0020b1fc:    756f2065    e ou    DCD    1970217061
        0x0020b200:    666f2074    t of    DCD    1718558836
        0x0020b204:    6e617220     ran    DCD    1851879968
        0x0020b208:    00006567    ge..    DCD    25959
        0x0020b20c:    3a444d43    CMD:    DCD    977554755
        0x0020b210:    20746f4e    Not     DCD    544501582
        0x0020b214:    70707573    supp    DCD    1886418291
        0x0020b218:    0074726f    ort.    DCD    7631471
        0x0020b21c:    00007325    %s..    DCD    29477
        0x0020b220:    00082008    . ..    DCD    532488
    $t
        0x0020b224:    1c40        @.      ADDS     r0,r0,#1
        0x0020b226:    b2c0        ..      UXTB     r0,r0
        0x0020b228:    4281        .B      CMP      r1,r0
        0x0020b22a:    dd16        ..      BLE      0x20b25a ; user_cmd_collect + 828
        0x0020b22c:    e7fa        ..      B        0x20b224 ; user_cmd_collect + 774
;;;492                        {
;;;493                            //vsop data_uart_print("\b");
;;;494                        }
;;;495                    }
;;;496                    break;
;;;497    
;;;498                case 44:                            /* up: < */
;;;499                    if (p_user_cmd_if->history_head != USER_CMD_MAX_HISTORY_LINE)
        0x0020b22e:    f894019c    ....    LDRB     r0,[r4,#0x19c]
        0x0020b232:    2803        .(      CMP      r0,#3
        0x0020b234:    d07d        }.      BEQ      0x20b332 ; user_cmd_collect + 1044
;;;500                    {
;;;501                        cmd_clear_screen(p_user_cmd_if);
        0x0020b236:    4620         F      MOV      r0,r4
        0x0020b238:    f7fffe55    ..U.    BL       cmd_clear_screen ; 0x20aee6
;;;502                        if (p_user_cmd_if->history_cur == USER_CMD_MAX_HISTORY_LINE)
        0x0020b23c:    f894019e    ....    LDRB     r0,[r4,#0x19e]
        0x0020b240:    2803        .(      CMP      r0,#3
        0x0020b242:    d005        ..      BEQ      0x20b250 ; user_cmd_collect + 818
        0x0020b244:    f894119c    ....    LDRB     r1,[r4,#0x19c]
        0x0020b248:    4288        .B      CMP      r0,r1
        0x0020b24a:    d004        ..      BEQ      0x20b256 ; user_cmd_collect + 824
        0x0020b24c:    1c80        ..      ADDS     r0,r0,#2
        0x0020b24e:    e015        ..      B        0x20b27c ; user_cmd_collect + 862
;;;503                        {
;;;504                            p_user_cmd_if->history_cur = p_user_cmd_if->history_tail;
        0x0020b250:    f894019d    ....    LDRB     r0,[r4,#0x19d]
        0x0020b254:    e016        ..      B        0x20b284 ; user_cmd_collect + 870
;;;505                        }
;;;506                        else
;;;507                        {
;;;508                            if (p_user_cmd_if->history_cur != p_user_cmd_if->history_head)
;;;509                            {
;;;510                                p_user_cmd_if->history_cur = (p_user_cmd_if->history_cur + USER_CMD_MAX_HISTORY_LINE - 1) %
;;;511                                                             USER_CMD_MAX_HISTORY_LINE;
;;;512                            }
;;;513                            else
;;;514                            {
;;;515                                p_user_cmd_if->history_cur = USER_CMD_MAX_HISTORY_LINE;
        0x0020b256:    f884719e    ...q    STRB     r7,[r4,#0x19e]
;;;516                                break;
        0x0020b25a:    e06a        j.      B        0x20b332 ; user_cmd_collect + 1044
        0x0020b25c:    f894019c    ....    LDRB     r0,[r4,#0x19c]
        0x0020b260:    2803        .(      CMP      r0,#3
        0x0020b262:    d066        f.      BEQ      0x20b332 ; user_cmd_collect + 1044
        0x0020b264:    4620         F      MOV      r0,r4
        0x0020b266:    f7fffe3e    ..>.    BL       cmd_clear_screen ; 0x20aee6
        0x0020b26a:    f894019e    ....    LDRB     r0,[r4,#0x19e]
        0x0020b26e:    2803        .(      CMP      r0,#3
        0x0020b270:    d01b        ..      BEQ      0x20b2aa ; user_cmd_collect + 908
        0x0020b272:    f894119d    ....    LDRB     r1,[r4,#0x19d]
        0x0020b276:    4288        .B      CMP      r0,r1
        0x0020b278:    d0ed        ..      BEQ      0x20b256 ; user_cmd_collect + 824
        0x0020b27a:    1c40        @.      ADDS     r0,r0,#1
        0x0020b27c:    fbb0f1f7    ....    UDIV     r1,r0,r7
        0x0020b280:    fb070011    ....    MLS      r0,r7,r1,r0
        0x0020b284:    f884019e    ....    STRB     r0,[r4,#0x19e]
;;;517                            }
;;;518                        }
;;;519                        p_user_cmd_if->accum_cmd_len = p_user_cmd_if->cmd_history_len[p_user_cmd_if->history_cur];
        0x0020b288:    b2c0        ..      UXTB     r0,r0
        0x0020b28a:    5d42        B]      LDRB     r2,[r0,r5]
        0x0020b28c:    eb001000    ....    ADD      r0,r0,r0,LSL #4
        0x0020b290:    eb000040    ..@.    ADD      r0,r0,r0,LSL #1
        0x0020b294:    eb040140    ..@.    ADD      r1,r4,r0,LSL #1
;;;520                        p_user_cmd_if->cmd_cur = p_user_cmd_if->accum_cmd_len;
        0x0020b298:    f8c421a0    ...!    STR      r2,[r4,#0x1a0]
        0x0020b29c:    f8842066    ..f     STRB     r2,[r4,#0x66]
;;;521                        memcpy(p_user_cmd_if->cmdline_buf, p_user_cmd_if->cmd_history[p_user_cmd_if->history_cur],
        0x0020b2a0:    4620         F      MOV      r0,r4
        0x0020b2a2:    3167        g1      ADDS     r1,r1,#0x67
        0x0020b2a4:    f64efdf9    N...    BL       __aeabi_memcpy ; 0x59e9a
        0x0020b2a8:    e043        C.      B        0x20b332 ; user_cmd_collect + 1044
;;;522                               p_user_cmd_if->accum_cmd_len);
;;;523                        //vsop data_uart_print("%s", p_user_cmd_if->cmdline_buf);
;;;524                    }
;;;525                    break;
;;;526    
;;;527                case 46:                            /* down: > */
;;;528                    if (p_user_cmd_if->history_head != USER_CMD_MAX_HISTORY_LINE)
;;;529                    {
;;;530                        cmd_clear_screen(p_user_cmd_if);
;;;531                        if (p_user_cmd_if->history_cur == USER_CMD_MAX_HISTORY_LINE)
;;;532                        {
;;;533                            p_user_cmd_if->history_cur = p_user_cmd_if->history_head;
        0x0020b2aa:    f894019c    ....    LDRB     r0,[r4,#0x19c]
        0x0020b2ae:    e7e9        ..      B        0x20b284 ; user_cmd_collect + 870
;;;534                        }
;;;535                        else
;;;536                        {
;;;537                            if (p_user_cmd_if->history_cur != p_user_cmd_if->history_tail)
;;;538                            {
;;;539                                p_user_cmd_if->history_cur = (p_user_cmd_if->history_cur + 1) % USER_CMD_MAX_HISTORY_LINE;
;;;540                            }
;;;541                            else
;;;542                            {
;;;543                                p_user_cmd_if->history_cur = USER_CMD_MAX_HISTORY_LINE;
;;;544                                break;
;;;545                            }
;;;546                        }
;;;547                        p_user_cmd_if->accum_cmd_len = p_user_cmd_if->cmd_history_len[p_user_cmd_if->history_cur];
;;;548                        p_user_cmd_if->cmd_cur = p_user_cmd_if->accum_cmd_len;
;;;549                        memcpy(p_user_cmd_if->cmdline_buf, p_user_cmd_if->cmd_history[p_user_cmd_if->history_cur],
;;;550                               p_user_cmd_if->accum_cmd_len);
;;;551                        //vsop data_uart_print("%s", p_user_cmd_if->cmdline_buf);
;;;552                    }
;;;553                    break;
;;;554    
;;;555                case 91:                           /* left: { */
;;;556                    if (p_user_cmd_if->cmd_cur > 0)
        0x0020b2b0:    f8940066    ..f.    LDRB     r0,[r4,#0x66]
        0x0020b2b4:    b3c0        ..      CBZ      r0,0x20b328 ; user_cmd_collect + 1034
        0x0020b2b6:    1e40        @.      SUBS     r0,r0,#1
;;;557                    {
;;;558                        //vsop data_uart_print("\b");
;;;559                        p_user_cmd_if->cmd_cur--;
        0x0020b2b8:    e006        ..      B        0x20b2c8 ; user_cmd_collect + 938
        0x0020b2ba:    f8940066    ..f.    LDRB     r0,[r4,#0x66]
        0x0020b2be:    f8d411a0    ....    LDR      r1,[r4,#0x1a0]
        0x0020b2c2:    4288        .B      CMP      r0,r1
        0x0020b2c4:    da35        5.      BGE      0x20b332 ; user_cmd_collect + 1044
        0x0020b2c6:    1c40        @.      ADDS     r0,r0,#1
        0x0020b2c8:    f8840066    ..f.    STRB     r0,[r4,#0x66]
        0x0020b2cc:    e031        1.      B        0x20b332 ; user_cmd_collect + 1044
;;;560                    }
;;;561                    break;
;;;562    
;;;563                case 93:                           /* right: } */
;;;564                    if (p_user_cmd_if->cmd_cur < p_user_cmd_if->accum_cmd_len)
;;;565                    {
;;;566                        //vsop data_uart_print("%c", p_user_cmd_if->cmdline_buf[p_user_cmd_if->cmd_cur]);
;;;567                        p_user_cmd_if->cmd_cur++;
;;;568                    }
;;;569                    break;
;;;570    
;;;571                case 92:                            /* end: \ */
;;;572                    if (p_user_cmd_if->cmd_cur < p_user_cmd_if->accum_cmd_len)
        0x0020b2ce:    f8941066    ..f.    LDRB     r1,[r4,#0x66]
        0x0020b2d2:    f8d401a0    ....    LDR      r0,[r4,#0x1a0]
        0x0020b2d6:    4281        .B      CMP      r1,r0
        0x0020b2d8:    da2b        +.      BGE      0x20b332 ; user_cmd_collect + 1044
        0x0020b2da:    e7f5        ..      B        0x20b2c8 ; user_cmd_collect + 938
        0x0020b2dc:    1e40        @.      SUBS     r0,r0,#1
        0x0020b2de:    f8840066    ..f.    STRB     r0,[r4,#0x66]
;;;573                    {
;;;574                        //vsop data_uart_print("%s", p_user_cmd_if->cmdline_buf + p_user_cmd_if->cmd_cur);
;;;575                        p_user_cmd_if->cmd_cur = p_user_cmd_if->accum_cmd_len;
;;;576                    }
;;;577                    break;
;;;578    
;;;579                case 47:                            /* begin: / */
;;;580                    while (p_user_cmd_if->cmd_cur > 0)
        0x0020b2e2:    f8940066    ..f.    LDRB     r0,[r4,#0x66]
        0x0020b2e6:    b1f8        ..      CBZ      r0,0x20b328 ; user_cmd_collect + 1034
        0x0020b2e8:    e7f8        ..      B        0x20b2dc ; user_cmd_collect + 958
        0x0020b2ea:    1a52        R.      SUBS     r2,r2,r1
        0x0020b2ec:    1913        ..      ADDS     r3,r2,r4
        0x0020b2ee:    1c49        I.      ADDS     r1,r1,#1
        0x0020b2f0:    f8133c01    ...<    LDRB     r3,[r3,#-1]
        0x0020b2f4:    54a3        .T      STRB     r3,[r4,r2]
        0x0020b2f6:    b2c9        ..      UXTB     r1,r1
        0x0020b2f8:    f8943066    ..f0    LDRB     r3,[r4,#0x66]
        0x0020b2fc:    f8d421a0    ...!    LDR      r2,[r4,#0x1a0]
        0x0020b300:    1ad3        ..      SUBS     r3,r2,r3
        0x0020b302:    428b        .B      CMP      r3,r1
        0x0020b304:    dcf1        ..      BGT      0x20b2ea ; user_cmd_collect + 972
;;;581                    {
;;;582                        //vsop data_uart_print("\b");
;;;583                        p_user_cmd_if->cmd_cur--;
;;;584                    }
;;;585                    break;
;;;586    
;;;587                default:
;;;588                    /* Put character in command buffer */
;;;589                    if (p_user_cmd_if->accum_cmd_len < USER_CMD_MAX_COMMAND_LINE)
;;;590                    {
;;;591                        uint8_t loop;
;;;592    
;;;593                        cmd_move_back(p_user_cmd_if);
;;;594                        p_user_cmd_if->cmdline_buf[p_user_cmd_if->cmd_cur] = c;
        0x0020b306:    f8941066    ..f.    LDRB     r1,[r4,#0x66]
        0x0020b30a:    5460        `T      STRB     r0,[r4,r1]
;;;595                        //vsop data_uart_print("%s", p_user_cmd_if->cmdline_buf + p_user_cmd_if->cmd_cur);
;;;596                        p_user_cmd_if->accum_cmd_len++;
        0x0020b30c:    f8d411a0    ....    LDR      r1,[r4,#0x1a0]
        0x0020b310:    1c49        I.      ADDS     r1,r1,#1
;;;597                        p_user_cmd_if->cmd_cur++;
        0x0020b312:    f8c411a0    ....    STR      r1,[r4,#0x1a0]
        0x0020b316:    f8940066    ..f.    LDRB     r0,[r4,#0x66]
        0x0020b31a:    1c40        @.      ADDS     r0,r0,#1
        0x0020b31c:    b2c2        ..      UXTB     r2,r0
        0x0020b31e:    2000        .       MOVS     r0,#0
        0x0020b320:    f8842066    ..f     STRB     r2,[r4,#0x66]
        0x0020b324:    1a89        ..      SUBS     r1,r1,r2
;;;598                        for (loop = 0; loop < p_user_cmd_if->accum_cmd_len - p_user_cmd_if->cmd_cur; loop++)
        0x0020b326:    e002        ..      B        0x20b32e ; user_cmd_collect + 1040
        0x0020b328:    e003        ..      B        0x20b332 ; user_cmd_collect + 1044
        0x0020b32a:    1c40        @.      ADDS     r0,r0,#1
        0x0020b32c:    b2c0        ..      UXTB     r0,r0
        0x0020b32e:    4281        .B      CMP      r1,r0
        0x0020b330:    dcfb        ..      BGT      0x20b32a ; user_cmd_collect + 1036
        0x0020b332:    f1b90901    ....    SUBS     r9,r9,#1
        0x0020b336:    f4bfadff    ....    BCS      0x20af38 ; user_cmd_collect + 26
        0x0020b33a:    b026        &.      ADD      sp,sp,#0x98
;;;599                        {
;;;600                            //data_uart_print("\b");
;;;601                        }
;;;602                    }
;;;603                    break;
;;;604                }
;;;605            }
;;;606        }
;;;607    
;;;608        return true;
        0x0020b33c:    2001        .       MOVS     r0,#1
;;;609    }
        0x0020b33e:    e8bd87f0    ....    POP      {r4-r10,pc}
    user_cmd_init
;;;610    
;;;611    /**
;;;612     * @brief  Initiate command interface structure
;;;613     * @param[in] p_user_cmd_if   Store parsed commands.
;;;614     * @param[in] project_name    Initiate project name.
;;;615     * @return void
;;;616     *
;;;617     * <b>Example usage</b>
;;;618     * \code{.c}
;;;619        void app_main_task(void *p_param)
;;;620        {
;;;621            char event;
;;;622    
;;;623            os_msg_queue_create(&io_queue_handle, MAX_NUMBER_OF_IO_MESSAGE, sizeof(T_IO_MSG));
;;;624            os_msg_queue_create(&evt_queue_handle, MAX_NUMBER_OF_EVENT_MESSAGE, sizeof(unsigned char));
;;;625    
;;;626            gap_start_bt_stack(evt_queue_handle, io_queue_handle, MAX_NUMBER_OF_GAP_MESSAGE);
;;;627    
;;;628            data_uart_init(evt_queue_handle, io_queue_handle);
;;;629            user_cmd_init(&user_cmd_if, "central");
;;;630            ......
;;;631        }
;;;632     * \endcode
;;;633     */
;;;634    void user_cmd_init(T_USER_CMD_IF *p_user_cmd_if, char *project_name)
;;;635    {
        0x0020b342:    b510        ..      PUSH     {r4,lr}
        0x0020b344:    4604        .F      MOV      r4,r0
;;;636        memset(p_user_cmd_if, 0, sizeof(T_USER_CMD_IF));
        0x0020b346:    f44f71d2    O..q    MOV      r1,#0x1a4
        0x0020b34a:    f64efe89    N...    BL       __aeabi_memclr4 ; 0x5a060
;;;637        p_user_cmd_if->history_head = USER_CMD_MAX_HISTORY_LINE;
        0x0020b34e:    2003        .       MOVS     r0,#3
        0x0020b350:    f884019c    ....    STRB     r0,[r4,#0x19c]
;;;638        p_user_cmd_if->history_tail = USER_CMD_MAX_HISTORY_LINE;
        0x0020b354:    f884019d    ....    STRB     r0,[r4,#0x19d]
;;;639        p_user_cmd_if->history_cur  = USER_CMD_MAX_HISTORY_LINE;
        0x0020b358:    f884019e    ....    STRB     r0,[r4,#0x19e]
;;;640        //data_uart_print(">> Command Parse Init (%s) <<\r\n", project_name);
;;;641    }
        0x0020b35c:    bd10        ..      POP      {r4,pc}
    user_cmd_skip_spaces
;;; ..\..\..\src\mcu\module\data_uart_cmd\user_cmd_parse.c (40)
        0x0020b35e:    b510        ..      PUSH     {r4,lr}
        0x0020b360:    4604        .F      MOV      r4,r0
        0x0020b362:    e000        ..      B        0x20b366 ; user_cmd_skip_spaces + 8
        0x0020b364:    1c64        d.      ADDS     r4,r4,#1
;;;41         char *p = buffer;
;;;42     
;;;43         while (user_cmd_is_white_space(*p)) /* white space */
        0x0020b366:    7820         x      LDRB     r0,[r4,#0]
        0x0020b368:    f000f84b    ..K.    BL       user_cmd_is_white_space ; 0x20b402
        0x0020b36c:    2800        .(      CMP      r0,#0
        0x0020b36e:    d1f9        ..      BNE      0x20b364 ; user_cmd_skip_spaces + 6
;;;44         {
;;;45             p++;
;;;46         }
;;;47         return p;
        0x0020b370:    4620         F      MOV      r0,r4
;;;48     }
        0x0020b372:    bd10        ..      POP      {r4,pc}
    user_cmd_find_end_of_word
;;;49     
;;;50     /**
;;;51      * @brief  Find end of a word.
;;;52      *
;;;53      * @param buffer    Address of the buffer.
;;;54      * @return
;;;55      */
;;;56     static char *user_cmd_find_end_of_word(char *buffer)
;;;57     {
        0x0020b374:    b510        ..      PUSH     {r4,lr}
        0x0020b376:    4604        .F      MOV      r4,r0
        0x0020b378:    e000        ..      B        0x20b37c ; user_cmd_find_end_of_word + 8
        0x0020b37a:    1c64        d.      ADDS     r4,r4,#1
;;;58         char *p = buffer;
;;;59     
;;;60         while (!user_cmd_is_white_space(*p) && (*p != '\0'))
        0x0020b37c:    7820         x      LDRB     r0,[r4,#0]
        0x0020b37e:    f000f840    ..@.    BL       user_cmd_is_white_space ; 0x20b402
        0x0020b382:    b910        ..      CBNZ     r0,0x20b38a ; user_cmd_find_end_of_word + 22
        0x0020b384:    7820         x      LDRB     r0,[r4,#0]
        0x0020b386:    2800        .(      CMP      r0,#0
        0x0020b388:    d1f7        ..      BNE      0x20b37a ; user_cmd_find_end_of_word + 6
;;;61         {
;;;62             p++;
;;;63         }
;;;64         return p;
        0x0020b38a:    4620         F      MOV      r0,r4
;;;65     }
        0x0020b38c:    bd10        ..      POP      {r4,pc}
    user_cmd_execute
;;;66     
;;;67     /**
;;;68      * @brief  Read ASCII string and convert to uint32_t.
;;;69      *
;;;70      * @param p  String address.
;;;71      * @return
;;;72      */
;;;73     static uint32_t user_cmd_str_to_uint32(char *p)
;;;74     {
;;;75         uint32_t result = 0;
;;;76         bool     hex = false;
;;;77     
;;;78         /* check if value is dec */
;;;79         if (p[0] == 'x')
;;;80         {
;;;81             hex = true;
;;;82             p = &p[1];
;;;83         }
;;;84         else if ((p[0] == '0') && (p[1] == 'x'))
;;;85         {
;;;86             hex = true;
;;;87             p = &p[2];
;;;88         }
;;;89     
;;;90         for (;;)
;;;91         {
;;;92             char     ch;
;;;93             ch = *(p++) | 0x20;                 /* convert to lower case */
;;;94     
;;;95             if (hex)                            /* dec value */
;;;96             {
;;;97                 /* hex value */
;;;98                 if ((ch >= 'a') && (ch <= 'f'))
;;;99                 {
;;;100                    ch -= ('a' - 10);
;;;101                }
;;;102                else if ((ch >= '0') && (ch <= '9'))
;;;103                {
;;;104                    ch -= '0';
;;;105                }
;;;106                else
;;;107                {
;;;108                    break;
;;;109                }
;;;110                result = (result << 4);
;;;111                result += (ch & 0x0f);
;;;112            }
;;;113            else
;;;114            {
;;;115                if (ch < '0' || ch > '9')
;;;116                {
;;;117                    break;    /* end of string reached */
;;;118                }
;;;119                result = 10 * result + ch - '0';
;;;120            }
;;;121        }
;;;122        return (result);
;;;123    }
;;;124    
;;;125    /**
;;;126     * @brief  Send result, display in UART Assitant.
;;;127     *
;;;128     * @param result    Command parse result.
;;;129     * @return none
;;;130    */
;;;131    static void cmd_send_result(T_USER_CMD_PARSE_RESULT result)
;;;132    {
;;;133        switch (result)
;;;134        {
;;;135        case RESULT_ERR:
;;;136            data_uart_print("%s\r\n", "CMD:Error");
;;;137            break;
;;;138        case RESULT_GAP_CAUSE_ALREADY_IN_REQ:
;;;139            data_uart_print("%s\r\n", "GAP_CAUSE_ALREADY_IN_REQ");
;;;140            break;
;;;141        case RESULT_GAP_CAUSE_INVALID_STATE:
;;;142            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_STATE");
;;;143            break;
;;;144        case RESULT_GAP_CAUSE_INVALID_PARAM:
;;;145            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PARAM");
;;;146            break;
;;;147        case RESULT_GAP_CAUSE_NON_CONN:
;;;148            data_uart_print("%s\r\n", "GAP_CAUSE_NON_CONN");
;;;149            break;
;;;150        case RESULT_GAP_CAUSE_NOT_FIND_IRK:
;;;151            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND_IRK");
;;;152            break;
;;;153        case RESULT_GAP_CAUSE_ERROR_CREDITS:
;;;154            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_CREDITS");
;;;155            break;
;;;156        case RESULT_GAP_CAUSE_SEND_REQ_FAILED:
;;;157            data_uart_print("%s\r\n", "GAP_CAUSE_SEND_REQ_FAILED");
;;;158            break;
;;;159        case RESULT_GAP_CAUSE_NO_RESOURCE:
;;;160            data_uart_print("%s\r\n", "GAP_CAUSE_NO_RESOURCE");
;;;161            break;
;;;162        case RESULT_GAP_CAUSE_INVALID_PDU_SIZE:
;;;163            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PDU_SIZE");
;;;164            break;
;;;165        case RESULT_GAP_CAUSE_NOT_FIND:
;;;166            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND");
;;;167            break;
;;;168        case RESULT_GAP_CAUSE_CONN_LIMIT:
;;;169            data_uart_print("%s\r\n", "GAP_CAUSE_CONN_LIMIT");
;;;170            break;
;;;171        case RESULT_CMD_NOT_FOUND:
;;;172            data_uart_print("%s\r\n", "CMD:Command not found");
;;;173            break;
;;;174        case RESULT_CMD_ERR_PARAM_NUM:
;;;175            data_uart_print("%s\r\n", "CMD:Wrong number of parameters");
;;;176            break;
;;;177        case RESULT_CMD_ERR_PARAM:
;;;178            data_uart_print("%s\r\n", "CMD:Wrong parameter");
;;;179            break;
;;;180        case RESULT_CMD_OUT_OF_RANGE:
;;;181            data_uart_print("%s\r\n", "CMD:Value out of range");
;;;182            break;
;;;183        case RESULT_CMD_NOT_SUPPORT:
;;;184            data_uart_print("%s\r\n", "CMD:Not support");
;;;185            break;
;;;186        case RESULT_GAP_CAUSE_ERROR_UNKNOWN:
;;;187            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_UNKNOWN");
;;;188            break;
;;;189        default:
;;;190            break;
;;;191        }
;;;192    }
;;;193    
;;;194    /**
;;;195     * @brief   List cmd.
;;;196     *
;;;197     * @param p_cmd_table   Command table, include user self-definition command function.
;;;198     * @return  Command execute result.
;;;199    */
;;;200    static T_USER_CMD_PARSE_RESULT user_cmd_list(const T_USER_CMD_TABLE_ENTRY *p_cmd_table)
;;;201    {
;;;202        int32_t i = 0;
;;;203        T_USER_CMD_PARSE_RESULT result = RESULT_CMD_NOT_FOUND;
;;;204    
;;;205        /* find command in table */
;;;206        while ((p_cmd_table + i)->p_cmd != NULL)
;;;207        {
;;;208            data_uart_print("%s", (p_cmd_table + i)->p_option);
;;;209            data_uart_print("%s", "  *");
;;;210            data_uart_print("%s", (p_cmd_table + i)->p_help);
;;;211            result = RESULT_SUCESS;
;;;212            i++;
;;;213        };
;;;214    
;;;215        data_uart_print(",.\r\n  *up down\r\n");
;;;216        data_uart_print("[]\r\n  *left right\r\n");
;;;217        data_uart_print("/\\\r\n  *home end\r\n");
;;;218        data_uart_print("backspace\r\n  *delete\r\n");
;;;219    
;;;220        return result;
;;;221    }
;;;222    
;;;223    /**
;;;224     * @brief  Execute command.
;;;225     *
;;;226     * @param p_parse_value     Command parse value.
;;;227     * @param p_cmd_table       Command table, include user self-definition command function.
;;;228     * @return  Command execute result.
;;;229    */
;;;230    static T_USER_CMD_PARSE_RESULT user_cmd_execute(T_USER_CMD_PARSED_VALUE *p_parse_value,
;;;231                                                    const T_USER_CMD_TABLE_ENTRY *p_cmd_table)
;;;232    {
        0x0020b38e:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020b392:    460e        .F      MOV      r6,r1
        0x0020b394:    4605        .F      MOV      r5,r0
;;;233        int32_t i = 0;
        0x0020b396:    2400        .$      MOVS     r4,#0
;;;234        T_USER_CMD_PARSE_RESULT result = RESULT_CMD_NOT_FOUND;
        0x0020b398:    f04f0822    O.".    MOV      r8,#0x22
;;;235    
;;;236        if (strcmp((const char *)p_parse_value->p_cmd, (const char *)"?") == 0)
        0x0020b39c:    6800        .h      LDR      r0,[r0,#0]
        0x0020b39e:    a131        1.      ADR      r1,{pc}+0xc6 ; 0x20b464
        0x0020b3a0:    f64ffd4a    O.J.    BL       strcmp ; 0x5ae38
        0x0020b3a4:    b948        H.      CBNZ     r0,0x20b3ba ; user_cmd_execute + 44
;;;237        {
;;;238            user_cmd_list(p_cmd_table);
        0x0020b3a6:    4630        0F      MOV      r0,r6
        0x0020b3a8:    f000f835    ..5.    BL       user_cmd_list ; 0x20b416
;;;239            return RESULT_SUCESS;
        0x0020b3ac:    2000        .       MOVS     r0,#0
        0x0020b3ae:    e54d        M.      B        0x20ae4c ; user_cmd_parse + 50
        0x0020b3b0:    6829        )h      LDR      r1,[r5,#0]
        0x0020b3b2:    f64ffd41    O.A.    BL       strcmp ; 0x5ae38
        0x0020b3b6:    b138        8.      CBZ      r0,0x20b3c8 ; user_cmd_execute + 58
        0x0020b3b8:    1c64        d.      ADDS     r4,r4,#1
;;;240        }
;;;241    
;;;242        /* find command in table */
;;;243        while ((p_cmd_table + i)->p_cmd != NULL)
        0x0020b3ba:    eb061704    ....    ADD      r7,r6,r4,LSL #4
        0x0020b3be:    6838        8h      LDR      r0,[r7,#0]
        0x0020b3c0:    2800        .(      CMP      r0,#0
        0x0020b3c2:    d1f5        ..      BNE      0x20b3b0 ; user_cmd_execute + 34
        0x0020b3c4:    4640        @F      MOV      r0,r8
        0x0020b3c6:    e541        A.      B        0x20ae4c ; user_cmd_parse + 50
;;;244        {
;;;245            if (strcmp((const char *)(p_cmd_table + i)->p_cmd, (const char *)p_parse_value->p_cmd) == 0)
;;;246            {
;;;247                /* check if user wants help */
;;;248                if (p_parse_value->param_count && *p_parse_value->p_param[0] == '?')
        0x0020b3c8:    6868        hh      LDR      r0,[r5,#4]
        0x0020b3ca:    b118        ..      CBZ      r0,0x20b3d4 ; user_cmd_execute + 70
        0x0020b3cc:    6d28        (m      LDR      r0,[r5,#0x50]
        0x0020b3ce:    7800        .x      LDRB     r0,[r0,#0]
        0x0020b3d0:    283f        ?(      CMP      r0,#0x3f
        0x0020b3d2:    d006        ..      BEQ      0x20b3e2 ; user_cmd_execute + 84
        0x0020b3d4:    eb061004    ....    ADD      r0,r6,r4,LSL #4
        0x0020b3d8:    68c1        .h      LDR      r1,[r0,#0xc]
        0x0020b3da:    4628        (F      MOV      r0,r5
        0x0020b3dc:    4788        .G      BLX      r1
        0x0020b3de:    4680        .F      MOV      r8,r0
        0x0020b3e0:    e7f0        ..      B        0x20b3c4 ; user_cmd_execute + 54
;;;249                {
;;;250                    data_uart_print("%s", (p_cmd_table + i)->p_option);
        0x0020b3e2:    eb061004    ....    ADD      r0,r6,r4,LSL #4
        0x0020b3e6:    6841        Ah      LDR      r1,[r0,#4]
        0x0020b3e8:    a01f        ..      ADR      r0,{pc}+0x80 ; 0x20b468
        0x0020b3ea:    f7fffbe3    ....    BL       data_uart_print ; 0x20abb4
;;;251                    data_uart_print("%s", "  *");
        0x0020b3ee:    a11f        ..      ADR      r1,{pc}+0x7e ; 0x20b46c
        0x0020b3f0:    a01d        ..      ADR      r0,{pc}+0x78 ; 0x20b468
        0x0020b3f2:    f7fffbdf    ....    BL       data_uart_print ; 0x20abb4
;;;252                    data_uart_print("%s", (p_cmd_table + i)->p_help);
        0x0020b3f6:    a01c        ..      ADR      r0,{pc}+0x72 ; 0x20b468
        0x0020b3f8:    68b9        .h      LDR      r1,[r7,#8]
        0x0020b3fa:    f7fffbdb    ....    BL       data_uart_print ; 0x20abb4
;;;253                    result = RESULT_SUCESS;
        0x0020b3fe:    2000        .       MOVS     r0,#0
        0x0020b400:    e7ed        ..      B        0x20b3de ; user_cmd_execute + 80
    user_cmd_is_white_space
        0x0020b402:    f1a00109    ....    SUB      r1,r0,#9
        0x0020b406:    2904        .)      CMP      r1,#4
;;; ..\..\..\src\mcu\module\data_uart_cmd\user_cmd_parse.c (29)
        0x0020b408:    d903        ..      BLS      0x20b412 ; user_cmd_is_white_space + 16
;;;30         return (((c >= 9) && (c <= 13)) || (c == 32));
        0x0020b40a:    2820         (      CMP      r0,#0x20
        0x0020b40c:    d001        ..      BEQ      0x20b412 ; user_cmd_is_white_space + 16
        0x0020b40e:    2000        .       MOVS     r0,#0
        0x0020b410:    4770        pG      BX       lr
        0x0020b412:    2001        .       MOVS     r0,#1
;;;31     }
        0x0020b414:    4770        pG      BX       lr
    user_cmd_list
;;;32     
;;;33     /**
;;;34      * @brief  Skip white spaces in buffer.
;;;35      *
;;;36      * @param  buffer    Address of the buffer.
;;;37      * @return pointer to skipped white spaces' new buffer.
;;;38      */
;;;39     static char *user_cmd_skip_spaces(char *buffer)
;;;40     {
;;;41         char *p = buffer;
;;;42     
;;;43         while (user_cmd_is_white_space(*p)) /* white space */
;;;44         {
;;;45             p++;
;;;46         }
;;;47         return p;
;;;48     }
;;;49     
;;;50     /**
;;;51      * @brief  Find end of a word.
;;;52      *
;;;53      * @param buffer    Address of the buffer.
;;;54      * @return
;;;55      */
;;;56     static char *user_cmd_find_end_of_word(char *buffer)
;;;57     {
;;;58         char *p = buffer;
;;;59     
;;;60         while (!user_cmd_is_white_space(*p) && (*p != '\0'))
;;;61         {
;;;62             p++;
;;;63         }
;;;64         return p;
;;;65     }
;;;66     
;;;67     /**
;;;68      * @brief  Read ASCII string and convert to uint32_t.
;;;69      *
;;;70      * @param p  String address.
;;;71      * @return
;;;72      */
;;;73     static uint32_t user_cmd_str_to_uint32(char *p)
;;;74     {
;;;75         uint32_t result = 0;
;;;76         bool     hex = false;
;;;77     
;;;78         /* check if value is dec */
;;;79         if (p[0] == 'x')
;;;80         {
;;;81             hex = true;
;;;82             p = &p[1];
;;;83         }
;;;84         else if ((p[0] == '0') && (p[1] == 'x'))
;;;85         {
;;;86             hex = true;
;;;87             p = &p[2];
;;;88         }
;;;89     
;;;90         for (;;)
;;;91         {
;;;92             char     ch;
;;;93             ch = *(p++) | 0x20;                 /* convert to lower case */
;;;94     
;;;95             if (hex)                            /* dec value */
;;;96             {
;;;97                 /* hex value */
;;;98                 if ((ch >= 'a') && (ch <= 'f'))
;;;99                 {
;;;100                    ch -= ('a' - 10);
;;;101                }
;;;102                else if ((ch >= '0') && (ch <= '9'))
;;;103                {
;;;104                    ch -= '0';
;;;105                }
;;;106                else
;;;107                {
;;;108                    break;
;;;109                }
;;;110                result = (result << 4);
;;;111                result += (ch & 0x0f);
;;;112            }
;;;113            else
;;;114            {
;;;115                if (ch < '0' || ch > '9')
;;;116                {
;;;117                    break;    /* end of string reached */
;;;118                }
;;;119                result = 10 * result + ch - '0';
;;;120            }
;;;121        }
;;;122        return (result);
;;;123    }
;;;124    
;;;125    /**
;;;126     * @brief  Send result, display in UART Assitant.
;;;127     *
;;;128     * @param result    Command parse result.
;;;129     * @return none
;;;130    */
;;;131    static void cmd_send_result(T_USER_CMD_PARSE_RESULT result)
;;;132    {
;;;133        switch (result)
;;;134        {
;;;135        case RESULT_ERR:
;;;136            data_uart_print("%s\r\n", "CMD:Error");
;;;137            break;
;;;138        case RESULT_GAP_CAUSE_ALREADY_IN_REQ:
;;;139            data_uart_print("%s\r\n", "GAP_CAUSE_ALREADY_IN_REQ");
;;;140            break;
;;;141        case RESULT_GAP_CAUSE_INVALID_STATE:
;;;142            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_STATE");
;;;143            break;
;;;144        case RESULT_GAP_CAUSE_INVALID_PARAM:
;;;145            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PARAM");
;;;146            break;
;;;147        case RESULT_GAP_CAUSE_NON_CONN:
;;;148            data_uart_print("%s\r\n", "GAP_CAUSE_NON_CONN");
;;;149            break;
;;;150        case RESULT_GAP_CAUSE_NOT_FIND_IRK:
;;;151            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND_IRK");
;;;152            break;
;;;153        case RESULT_GAP_CAUSE_ERROR_CREDITS:
;;;154            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_CREDITS");
;;;155            break;
;;;156        case RESULT_GAP_CAUSE_SEND_REQ_FAILED:
;;;157            data_uart_print("%s\r\n", "GAP_CAUSE_SEND_REQ_FAILED");
;;;158            break;
;;;159        case RESULT_GAP_CAUSE_NO_RESOURCE:
;;;160            data_uart_print("%s\r\n", "GAP_CAUSE_NO_RESOURCE");
;;;161            break;
;;;162        case RESULT_GAP_CAUSE_INVALID_PDU_SIZE:
;;;163            data_uart_print("%s\r\n", "GAP_CAUSE_INVALID_PDU_SIZE");
;;;164            break;
;;;165        case RESULT_GAP_CAUSE_NOT_FIND:
;;;166            data_uart_print("%s\r\n", "GAP_CAUSE_NOT_FIND");
;;;167            break;
;;;168        case RESULT_GAP_CAUSE_CONN_LIMIT:
;;;169            data_uart_print("%s\r\n", "GAP_CAUSE_CONN_LIMIT");
;;;170            break;
;;;171        case RESULT_CMD_NOT_FOUND:
;;;172            data_uart_print("%s\r\n", "CMD:Command not found");
;;;173            break;
;;;174        case RESULT_CMD_ERR_PARAM_NUM:
;;;175            data_uart_print("%s\r\n", "CMD:Wrong number of parameters");
;;;176            break;
;;;177        case RESULT_CMD_ERR_PARAM:
;;;178            data_uart_print("%s\r\n", "CMD:Wrong parameter");
;;;179            break;
;;;180        case RESULT_CMD_OUT_OF_RANGE:
;;;181            data_uart_print("%s\r\n", "CMD:Value out of range");
;;;182            break;
;;;183        case RESULT_CMD_NOT_SUPPORT:
;;;184            data_uart_print("%s\r\n", "CMD:Not support");
;;;185            break;
;;;186        case RESULT_GAP_CAUSE_ERROR_UNKNOWN:
;;;187            data_uart_print("%s\r\n", "GAP_CAUSE_ERROR_UNKNOWN");
;;;188            break;
;;;189        default:
;;;190            break;
;;;191        }
;;;192    }
;;;193    
;;;194    /**
;;;195     * @brief   List cmd.
;;;196     *
;;;197     * @param p_cmd_table   Command table, include user self-definition command function.
;;;198     * @return  Command execute result.
;;;199    */
;;;200    static T_USER_CMD_PARSE_RESULT user_cmd_list(const T_USER_CMD_TABLE_ENTRY *p_cmd_table)
;;;201    {
        0x0020b416:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020b41a:    2400        .$      MOVS     r4,#0
        0x0020b41c:    4607        .F      MOV      r7,r0
        0x0020b41e:    2622        "&      MOVS     r6,#0x22
        0x0020b420:    e00d        ..      B        0x20b43e ; user_cmd_list + 40
;;;202        int32_t i = 0;
;;;203        T_USER_CMD_PARSE_RESULT result = RESULT_CMD_NOT_FOUND;
;;;204    
;;;205        /* find command in table */
;;;206        while ((p_cmd_table + i)->p_cmd != NULL)
;;;207        {
;;;208            data_uart_print("%s", (p_cmd_table + i)->p_option);
        0x0020b422:    a011        ..      ADR      r0,{pc}+0x46 ; 0x20b468
        0x0020b424:    6869        ih      LDR      r1,[r5,#4]
        0x0020b426:    f7fffbc5    ....    BL       data_uart_print ; 0x20abb4
;;;209            data_uart_print("%s", "  *");
        0x0020b42a:    a110        ..      ADR      r1,{pc}+0x42 ; 0x20b46c
        0x0020b42c:    a00e        ..      ADR      r0,{pc}+0x3c ; 0x20b468
        0x0020b42e:    f7fffbc1    ....    BL       data_uart_print ; 0x20abb4
;;;210            data_uart_print("%s", (p_cmd_table + i)->p_help);
        0x0020b432:    a00d        ..      ADR      r0,{pc}+0x36 ; 0x20b468
        0x0020b434:    68a9        .h      LDR      r1,[r5,#8]
        0x0020b436:    f7fffbbd    ....    BL       data_uart_print ; 0x20abb4
;;;211            result = RESULT_SUCESS;
        0x0020b43a:    2600        .&      MOVS     r6,#0
        0x0020b43c:    1c64        d.      ADDS     r4,r4,#1
        0x0020b43e:    eb071504    ....    ADD      r5,r7,r4,LSL #4
        0x0020b442:    6828        (h      LDR      r0,[r5,#0]
        0x0020b444:    2800        .(      CMP      r0,#0
        0x0020b446:    d1ec        ..      BNE      0x20b422 ; user_cmd_list + 12
;;;212            i++;
;;;213        };
;;;214    
;;;215        data_uart_print(",.\r\n  *up down\r\n");
        0x0020b448:    a009        ..      ADR      r0,{pc}+0x28 ; 0x20b470
        0x0020b44a:    f7fffbb3    ....    BL       data_uart_print ; 0x20abb4
;;;216        data_uart_print("[]\r\n  *left right\r\n");
        0x0020b44e:    a00d        ..      ADR      r0,{pc}+0x36 ; 0x20b484
        0x0020b450:    f7fffbb0    ....    BL       data_uart_print ; 0x20abb4
;;;217        data_uart_print("/\\\r\n  *home end\r\n");
        0x0020b454:    a010        ..      ADR      r0,{pc}+0x44 ; 0x20b498
        0x0020b456:    f7fffbad    ....    BL       data_uart_print ; 0x20abb4
;;;218        data_uart_print("backspace\r\n  *delete\r\n");
        0x0020b45a:    a014        ..      ADR      r0,{pc}+0x52 ; 0x20b4ac
        0x0020b45c:    f7fffbaa    ....    BL       data_uart_print ; 0x20abb4
;;;219    
;;;220        return result;
        0x0020b460:    4630        0F      MOV      r0,r6
;;;221    }
        0x0020b462:    e4f3        ..      B        0x20ae4c ; user_cmd_parse + 50
    $d
        0x0020b464:    0000003f    ?...    DCD    63
        0x0020b468:    00007325    %s..    DCD    29477
        0x0020b46c:    002a2020      *.    DCD    2760736
        0x0020b470:    0a0d2e2c    ,...    DCD    168635948
        0x0020b474:    752a2020      *u    DCD    1965695008
        0x0020b478:    6f642070    p do    DCD    1868832880
        0x0020b47c:    0a0d6e77    wn..    DCD    168652407
        0x0020b480:    00000000    ....    DCD    0
        0x0020b484:    0a0d5d5b    []..    DCD    168648027
        0x0020b488:    6c2a2020      *l    DCD    1814700064
        0x0020b48c:    20746665    eft     DCD    544499301
        0x0020b490:    68676972    righ    DCD    1751607666
        0x0020b494:    000a0d74    t...    DCD    658804
        0x0020b498:    0a0d5c2f    /\..    DCD    168647727
        0x0020b49c:    682a2020      *h    DCD    1747591200
        0x0020b4a0:    20656d6f    ome     DCD    543518063
        0x0020b4a4:    0d646e65    end.    DCD    224685669
        0x0020b4a8:    0000000a    ....    DCD    10
        0x0020b4ac:    6b636162    back    DCD    1801675106
        0x0020b4b0:    63617073    spac    DCD    1667330163
        0x0020b4b4:    200a0d65    e..     DCD    537529701
        0x0020b4b8:    65642a20     *de    DCD    1701063200
        0x0020b4bc:    6574656c    lete    DCD    1702126956
        0x0020b4c0:    00000a0d    ....    DCD    2573
    $t
    .text
    load_overlay
;;; .\..\..\..\src\mcu\rtl876x\overlay_mgr.c
;;;116    {
        0x0020b4c4:    b510        ..      PUSH     {r4,lr}
        0x0020b4c6:    2803        .(      CMP      r0,#3
;;; .\..\..\..\src\mcu\rtl876x\overlay_mgr.c (116)
        0x0020b4c8:    d301        ..      BCC      0x20b4ce ; load_overlay + 10
;;;117        const T_OVERLAY_SECTION *selected_scenario;
;;;118    
;;;119        if (scenario_idx >= OVERLAY_SCENARIO_NUM)
;;;120        {
;;;121            return false;
        0x0020b4ca:    2000        .       MOVS     r0,#0
        0x0020b4cc:    bd10        ..      POP      {r4,pc}
;;;122        }
;;;123    
;;;124        selected_scenario = &overlay_sections[scenario_idx];
        0x0020b4ce:    491a        .I      LDR      r1,[pc,#104] ; [0x20b538] = 0x20d02c
        0x0020b4d0:    eb0000c0    ....    ADD      r0,r0,r0,LSL #3
        0x0020b4d4:    eb010480    ....    ADD      r4,r1,r0,LSL #2
;;;125    
;;;126        if (memcmp(selected_scenario->signature, scenario_name, 8) == 0)
        0x0020b4d8:    2208        ."      MOVS     r2,#8
        0x0020b4da:    4918        .I      LDR      r1,[pc,#96] ; [0x20b53c] = 0x20d2dc
        0x0020b4dc:    6820         h      LDR      r0,[r4,#0]
        0x0020b4de:    f64efc91    N...    BL       memcmp ; 0x59e04
        0x0020b4e2:    b198        ..      CBZ      r0,0x20b50c ; load_overlay + 72
;;;127        {
;;;128            return true;
;;;129        }
;;;130    
;;;131        /* load code */
;;;132        memcpy(selected_scenario->image_ro_base, selected_scenario->load_ro_base,
        0x0020b4e4:    69a2        .i      LDR      r2,[r4,#0x18]
        0x0020b4e6:    6861        ah      LDR      r1,[r4,#4]
        0x0020b4e8:    68e0        .h      LDR      r0,[r4,#0xc]
        0x0020b4ea:    f64efcd6    N...    BL       __aeabi_memcpy ; 0x59e9a
;;;133               selected_scenario->ro_length);
;;;134        /* load rw data */
;;;135        memcpy(selected_scenario->image_rw_base, selected_scenario->load_rw_base,
        0x0020b4ee:    69e2        .i      LDR      r2,[r4,#0x1c]
        0x0020b4f0:    68a1        .h      LDR      r1,[r4,#8]
        0x0020b4f2:    6920         i      LDR      r0,[r4,#0x10]
        0x0020b4f4:    f64efcd1    N...    BL       __aeabi_memcpy ; 0x59e9a
;;;136               selected_scenario->rw_length);
;;;137        /* clear zi data */
;;;138        memset(selected_scenario->image_zi_base, 0x0, selected_scenario->zi_length);
        0x0020b4f8:    6a21        !j      LDR      r1,[r4,#0x20]
        0x0020b4fa:    6960        `i      LDR      r0,[r4,#0x14]
        0x0020b4fc:    f64efd8e    N...    BL       __aeabi_memclr ; 0x5a01c
;;;139    
;;;140        memcpy(scenario_name, selected_scenario->signature, 8);
        0x0020b500:    6820         h      LDR      r0,[r4,#0]
        0x0020b502:    490e        .I      LDR      r1,[pc,#56] ; [0x20b53c] = 0x20d2dc
        0x0020b504:    6802        .h      LDR      r2,[r0,#0]
        0x0020b506:    600a        .`      STR      r2,[r1,#0]
        0x0020b508:    6840        @h      LDR      r0,[r0,#4]
        0x0020b50a:    6048        H`      STR      r0,[r1,#4]
        0x0020b50c:    2001        .       MOVS     r0,#1
;;;141    
;;;142        return true;
;;;143    }
        0x0020b50e:    bd10        ..      POP      {r4,pc}
    get_current_scenario_index
;;;144    
;;;145    T_OVERLAY_SCENARIO_IDX get_current_scenario_index(void)
;;;146    {
        0x0020b510:    b570        p.      PUSH     {r4-r6,lr}
        0x0020b512:    4d09        .M      LDR      r5,[pc,#36] ; [0x20b538] = 0x20d02c
;;;147        const T_OVERLAY_SECTION *selected_scenario;
;;;148    
;;;149        for (int i = 0; i < (int)OVERLAY_SCENARIO_NUM; ++i)
        0x0020b514:    2400        .$      MOVS     r4,#0
        0x0020b516:    eb0400c4    ....    ADD      r0,r4,r4,LSL #3
        0x0020b51a:    2208        ."      MOVS     r2,#8
        0x0020b51c:    f8550020    U. .    LDR      r0,[r5,r0,LSL #2]
        0x0020b520:    4906        .I      LDR      r1,[pc,#24] ; [0x20b53c] = 0x20d2dc
        0x0020b522:    f64efc6f    N.o.    BL       memcmp ; 0x59e04
        0x0020b526:    b120         .      CBZ      r0,0x20b532 ; get_current_scenario_index + 34
        0x0020b528:    1c64        d.      ADDS     r4,r4,#1
        0x0020b52a:    2c03        .,      CMP      r4,#3
        0x0020b52c:    dbf3        ..      BLT      0x20b516 ; get_current_scenario_index + 6
        0x0020b52e:    2003        .       MOVS     r0,#3
        0x0020b530:    bd70        p.      POP      {r4-r6,pc}
;;;150        {
;;;151            selected_scenario = &overlay_sections[i];
;;;152            if (memcmp(selected_scenario->signature, scenario_name, 8) == 0)
;;;153            {
;;;154                return (T_OVERLAY_SCENARIO_IDX)i;
        0x0020b532:    b2e0        ..      UXTB     r0,r4
;;;155            }
;;;156        }
;;;157    
;;;158        return OVERLAY_SCENARIO_NUM; //not found valid scenario
;;;159    }
        0x0020b534:    bd70        p.      POP      {r4-r6,pc}
    $d
        0x0020b536:    0000        ..      DCW    0
        0x0020b538:    0020d02c    ,. .    DCD    2150444
        0x0020b53c:    0020d2dc    .. .    DCD    2151132
    $t
    .text
    qc_app_main_task
;;; ..\..\..\src\sample\ble_central\mxchip_qc.c
;;;55     {
        0x0020b540:    b51c        ..      PUSH     {r2-r4,lr}
;;;56         uint8_t event;
;;;57         os_msg_queue_create(&qc_io_queue_handle, MAX_NUMBER_OF_IO_MESSAGE, sizeof(T_IO_MSG));
        0x0020b542:    2039        9       MOVS     r0,#0x39
        0x0020b544:    9000        ..      STR      r0,[sp,#0]
        0x0020b546:    4bef        .K      LDR      r3,[pc,#956] ; [0x20b904] = 0x20c0c8
        0x0020b548:    2208        ."      MOVS     r2,#8
        0x0020b54a:    2120         !      MOVS     r1,#0x20
        0x0020b54c:    48ee        .H      LDR      r0,[pc,#952] ; [0x20b908] = 0x20d2f0
        0x0020b54e:    f61afcd1    ....    BL       os_msg_queue_create_intern ; 0x25ef4
;;;58         os_msg_queue_create(&qc_evt_queue_handle, MAX_NUMBER_OF_EVENT_MESSAGE, sizeof(uint8_t));
        0x0020b552:    203a        :       MOVS     r0,#0x3a
        0x0020b554:    9000        ..      STR      r0,[sp,#0]
        0x0020b556:    48ec        .H      LDR      r0,[pc,#944] ; [0x20b908] = 0x20d2f0
        0x0020b558:    4bea        .K      LDR      r3,[pc,#936] ; [0x20b904] = 0x20c0c8
        0x0020b55a:    2201        ."      MOVS     r2,#1
        0x0020b55c:    2140        @!      MOVS     r1,#0x40
        0x0020b55e:    1f00        ..      SUBS     r0,r0,#4
        0x0020b560:    f61afcc8    ....    BL       os_msg_queue_create_intern ; 0x25ef4
        0x0020b564:    4ce8        .L      LDR      r4,[pc,#928] ; [0x20b908] = 0x20d2f0
        0x0020b566:    2220         "      MOVS     r2,#0x20
        0x0020b568:    3c0c        .<      SUBS     r4,r4,#0xc
        0x0020b56a:    e9d40102    ....    LDRD     r0,r1,[r4,#8]
        0x0020b56e:    f640fc7c    @.|.    BL       gap_start_bt_stack ; 0x4be6a
        0x0020b572:    2540        @%      MOVS     r5,#0x40
;;;59     
;;;60         gap_start_bt_stack(qc_evt_queue_handle, qc_io_queue_handle, MAX_NUMBER_OF_GAP_MESSAGE);
;;;61     
;;;62         while (true)
;;;63         {
;;;64             if (os_msg_recv(qc_evt_queue_handle, &event, 0xFFFFFFFF) == true)
        0x0020b574:    f04f36ff    O..6    MOV      r6,#0xffffffff
        0x0020b578:    9500        ..      STR      r5,[sp,#0]
        0x0020b57a:    4be2        .K      LDR      r3,[pc,#904] ; [0x20b904] = 0x20c0c8
        0x0020b57c:    4632        2F      MOV      r2,r6
        0x0020b57e:    a901        ..      ADD      r1,sp,#4
        0x0020b580:    68a0        .h      LDR      r0,[r4,#8]
        0x0020b582:    f61afd5f    .._.    BL       os_msg_recv_intern ; 0x26044
        0x0020b586:    2800        .(      CMP      r0,#0
        0x0020b588:    d0f6        ..      BEQ      0x20b578 ; qc_app_main_task + 56
;;;65             {
;;;66                 if (event == EVENT_GAP_MSG)
        0x0020b58a:    f89d0004    ....    LDRB     r0,[sp,#4]
        0x0020b58e:    2801        .(      CMP      r0,#1
        0x0020b590:    d1f2        ..      BNE      0x20b578 ; qc_app_main_task + 56
;;;67                 {
;;;68                     gap_handle_msg(event);
        0x0020b592:    f640fcd7    @...    BL       gap_handle_msg ; 0x4bf44
        0x0020b596:    e7ef        ..      B        0x20b578 ; qc_app_main_task + 56
    qc_app_task_init
        0x0020b598:    b51c        ..      PUSH     {r2-r4,lr}
;;; ..\..\..\src\sample\ble_central\mxchip_qc.c (45)
        0x0020b59a:    2101        .!      MOVS     r1,#1
        0x0020b59c:    0288        ..      LSLS     r0,r1,#10
        0x0020b59e:    2300        .#      MOVS     r3,#0
        0x0020b5a0:    f2af0263    ..c.    ADR      r2,{pc}-0x5f ; 0x20b541
        0x0020b5a4:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x0020b5a8:    48d7        .H      LDR      r0,[pc,#860] ; [0x20b908] = 0x20d2f0
        0x0020b5aa:    a1d8        ..      ADR      r1,{pc}+0x362 ; 0x20b90c
        0x0020b5ac:    380c        .8      SUBS     r0,r0,#0xc
        0x0020b5ae:    f61bfa0f    ....    BL       os_task_create ; 0x269d0
;;;46                        APP_TASK_PRIORITY);
;;;47     }
        0x0020b5b2:    bd1c        ..      POP      {r2-r4,pc}
    mf_printf
;;;48     
;;;49     /**
;;;50      * @brief        App task to handle events & messages
;;;51      * @param[in]    p_param    Parameters sending to the task
;;;52      * @return       void
;;;53      */
;;;54     void qc_app_main_task(void *p_param)
;;;55     {
;;;56         uint8_t event;
;;;57         os_msg_queue_create(&qc_io_queue_handle, MAX_NUMBER_OF_IO_MESSAGE, sizeof(T_IO_MSG));
;;;58         os_msg_queue_create(&qc_evt_queue_handle, MAX_NUMBER_OF_EVENT_MESSAGE, sizeof(uint8_t));
;;;59     
;;;60         gap_start_bt_stack(qc_evt_queue_handle, qc_io_queue_handle, MAX_NUMBER_OF_GAP_MESSAGE);
;;;61     
;;;62         while (true)
;;;63         {
;;;64             if (os_msg_recv(qc_evt_queue_handle, &event, 0xFFFFFFFF) == true)
;;;65             {
;;;66                 if (event == EVENT_GAP_MSG)
;;;67                 {
;;;68                     gap_handle_msg(event);
;;;69                 }
;;;70             }
;;;71         }
;;;72     }
;;;73     
;;;74     static void _qc_uart_send(uint8_t *srt, uint8_t len)
;;;75     {
;;;76         uint8_t count = 0, remainder = 0, i = 0;
;;;77     
;;;78         count = len / 16;
;;;79         remainder = len % 16;
;;;80         for (i = 0; i < count; i++)
;;;81         {
;;;82             UART_SendData(UART, &srt[16 * i], 16);
;;;83             while (UART_GetFlagState(UART, UART_FLAG_THR_TSR_EMPTY) != SET)
;;;84                 ;
;;;85         }
;;;86         /* send left bytes */
;;;87         UART_SendData(UART, &srt[16 * i], remainder);
;;;88         /* wait tx fifo empty */
;;;89         while (UART_GetFlagState(UART, UART_FLAG_THR_TSR_EMPTY) != SET)
;;;90             ;
;;;91     }
;;;92     
;;;93     void mf_printf(char *str)
;;;94     {
        0x0020b5b4:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020b5b8:    0005        ..      MOVS     r5,r0
        0x0020b5ba:    d027        '.      BEQ      0x20b60c ; mf_printf + 88
        0x0020b5bc:    f64efc4e    N.N.    BL       strlen ; 0x59e5c
        0x0020b5c0:    2800        .(      CMP      r0,#0
        0x0020b5c2:    d023        #.      BEQ      0x20b60c ; mf_printf + 88
        0x0020b5c4:    4628        (F      MOV      r0,r5
        0x0020b5c6:    f64efc49    N.I.    BL       strlen ; 0x59e5c
        0x0020b5ca:    b2c0        ..      UXTB     r0,r0
;;; ..\..\..\src\sample\ble_central\mxchip_qc.c (76)
        0x0020b5cc:    2400        .$      MOVS     r4,#0
;;;77     
;;;78         count = len / 16;
        0x0020b5ce:    0906        ..      LSRS     r6,r0,#4
;;;79         remainder = len % 16;
        0x0020b5d0:    f000080f    ....    AND      r8,r0,#0xf
        0x0020b5d4:    4fcf        .O      LDR      r7,[pc,#828] ; [0x20b914] = 0x40012000
        0x0020b5d6:    e00b        ..      B        0x20b5f0 ; mf_printf + 60
        0x0020b5d8:    2210        ."      MOVS     r2,#0x10
        0x0020b5da:    4638        8F      MOV      r0,r7
        0x0020b5dc:    f7fcfe1d    ....    BL       UART_SendData ; 0x20821a
        0x0020b5e0:    2140        @!      MOVS     r1,#0x40
        0x0020b5e2:    4638        8F      MOV      r0,r7
        0x0020b5e4:    f7fcfe4c    ..L.    BL       UART_GetFlagState ; 0x208280
        0x0020b5e8:    2801        .(      CMP      r0,#1
        0x0020b5ea:    d1f9        ..      BNE      0x20b5e0 ; mf_printf + 44
        0x0020b5ec:    1c64        d.      ADDS     r4,r4,#1
;;;80         for (i = 0; i < count; i++)
        0x0020b5ee:    b2e4        ..      UXTB     r4,r4
        0x0020b5f0:    42b4        .B      CMP      r4,r6
        0x0020b5f2:    eb051104    ....    ADD      r1,r5,r4,LSL #4
        0x0020b5f6:    d3ef        ..      BCC      0x20b5d8 ; mf_printf + 36
;;;81         {
;;;82             UART_SendData(UART, &srt[16 * i], 16);
;;;83             while (UART_GetFlagState(UART, UART_FLAG_THR_TSR_EMPTY) != SET)
;;;84                 ;
;;;85         }
;;;86         /* send left bytes */
;;;87         UART_SendData(UART, &srt[16 * i], remainder);
        0x0020b5f8:    4642        BF      MOV      r2,r8
        0x0020b5fa:    4638        8F      MOV      r0,r7
        0x0020b5fc:    f7fcfe0d    ....    BL       UART_SendData ; 0x20821a
;;;88         /* wait tx fifo empty */
;;;89         while (UART_GetFlagState(UART, UART_FLAG_THR_TSR_EMPTY) != SET)
        0x0020b600:    2140        @!      MOVS     r1,#0x40
        0x0020b602:    4638        8F      MOV      r0,r7
        0x0020b604:    f7fcfe3c    ..<.    BL       UART_GetFlagState ; 0x208280
        0x0020b608:    2801        .(      CMP      r0,#1
        0x0020b60a:    d1f9        ..      BNE      0x20b600 ; mf_printf + 76
;;;90             ;
;;;91     }
;;;92     
;;;93     void mf_printf(char *str)
;;;94     {
;;;95         if ((str == NULL) || (strlen(str) == 0))
;;;96             return;
;;;97         _qc_uart_send((uint8_t *)str, strlen(str));
;;;98     }
        0x0020b60c:    e8bd81f0    ....    POP      {r4-r8,pc}
    mf_putc
;;; ..\..\..\inc\peripheral\rtl876x_uart.h
;;;392        UARTx->RB_THR = data;
        0x0020b610:    49c0        .I      LDR      r1,[pc,#768] ; [0x20b914] = 0x40012000
        0x0020b612:    6248        Hb      STR      r0,[r1,#0x24]
;;; ..\..\..\src\sample\ble_central\mxchip_qc.c
;;;103    }
        0x0020b614:    4770        pG      BX       lr
    _qc_uart_io_init
;;;104    
;;;105    void _qc_uart_io_init(void)
;;;106    {
        0x0020b616:    b51c        ..      PUSH     {r2-r4,lr}
;;;107        Pinmux_Config(UART_TX, UART0_TX);
        0x0020b618:    2123        #!      MOVS     r1,#0x23
        0x0020b61a:    2018        .       MOVS     r0,#0x18
        0x0020b61c:    f605feaa    ....    BL       Pinmux_Config ; 0x11374
;;;108        Pinmux_Config(UART_RX, UART0_RX);
        0x0020b620:    2124        $!      MOVS     r1,#0x24
        0x0020b622:    2019        .       MOVS     r0,#0x19
        0x0020b624:    f605fea6    ....    BL       Pinmux_Config ; 0x11374
;;;109    
;;;110        Pad_Config(UART_TX, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0020b628:    2400        .$      MOVS     r4,#0
        0x0020b62a:    2301        .#      MOVS     r3,#1
        0x0020b62c:    9400        ..      STR      r4,[sp,#0]
        0x0020b62e:    461a        .F      MOV      r2,r3
        0x0020b630:    4619        .F      MOV      r1,r3
        0x0020b632:    2018        .       MOVS     r0,#0x18
        0x0020b634:    9401        ..      STR      r4,[sp,#4]
        0x0020b636:    f605fed1    ....    BL       Pad_Config ; 0x113dc
;;;111        Pad_Config(UART_RX, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0020b63a:    2301        .#      MOVS     r3,#1
        0x0020b63c:    9400        ..      STR      r4,[sp,#0]
        0x0020b63e:    461a        .F      MOV      r2,r3
        0x0020b640:    4619        .F      MOV      r1,r3
        0x0020b642:    2019        .       MOVS     r0,#0x19
        0x0020b644:    9401        ..      STR      r4,[sp,#4]
        0x0020b646:    f605fec9    ....    BL       Pad_Config ; 0x113dc
;;;112    }
        0x0020b64a:    bd1c        ..      POP      {r2-r4,pc}
    _qc_uart_config
;;;113    
;;;114    void _qc_uart_config(void)
;;;115    {
        0x0020b64c:    b510        ..      PUSH     {r4,lr}
        0x0020b64e:    b088        ..      SUB      sp,sp,#0x20
;;;116        UART_InitTypeDef UART_InitStruct;
;;;117        UART_StructInit(&UART_InitStruct);
        0x0020b650:    4668        hF      MOV      r0,sp
        0x0020b652:    f7fcfdc2    ....    BL       UART_StructInit ; 0x2081da
;;;118        //    UART_InitStruct.div = 4; //921600
;;;119        //    UART_InitStruct.ovsr = 5;
;;;120        //    UART_InitStruct.ovsr_adj = 0x3F7;
;;;121    
;;;122        UART_Init(UART, &UART_InitStruct);
        0x0020b656:    4caf        .L      LDR      r4,[pc,#700] ; [0x20b914] = 0x40012000
        0x0020b658:    4669        iF      MOV      r1,sp
        0x0020b65a:    4620         F      MOV      r0,r4
        0x0020b65c:    f7fcfd44    ..D.    BL       UART_Init ; 0x2080e8
;;;123        /*  enable line status interrupt and rx data avaliable interrupt    */
;;;124        UART_INTConfig(UART, UART_INT_RD_AVA | UART_INT_LINE_STS | UART_INT_IDLE, ENABLE);
        0x0020b660:    2201        ."      MOVS     r2,#1
        0x0020b662:    2185        .!      MOVS     r1,#0x85
        0x0020b664:    4620         F      MOV      r0,r4
        0x0020b666:    f7fcfde0    ....    BL       UART_INTConfig ; 0x20822a
;;;125    }
        0x0020b66a:    b008        ..      ADD      sp,sp,#0x20
        0x0020b66c:    bd10        ..      POP      {r4,pc}
    _qc_test_uart_init
;;;126    
;;;127    /****************************************************************************/
;;;128    /* UART init                                                                */
;;;129    /****************************************************************************/
;;;130    void _qc_test_uart_init(void)
;;;131    {
        0x0020b66e:    b510        ..      PUSH     {r4,lr}
;;;132        RCC_PeriphClockCmd(APBPeriph_UART0, APBPeriph_UART0_CLOCK, ENABLE);
        0x0020b670:    2201        ."      MOVS     r2,#1
        0x0020b672:    49a9        .I      LDR      r1,[pc,#676] ; [0x20b918] = 0x40000001
        0x0020b674:    48a9        .H      LDR      r0,[pc,#676] ; [0x20b91c] = 0x8000001
        0x0020b676:    f7fcfb8d    ....    BL       RCC_PeriphClockCmd ; 0x207d94
;;;133        _qc_uart_io_init();
        0x0020b67a:    f7ffffcc    ....    BL       _qc_uart_io_init ; 0x20b616
;;;134        /*  UART Init   */
;;;135        _qc_uart_config();
        0x0020b67e:    e8bd4010    ...@    POP      {r4,lr}
        0x0020b682:    e7e3        ..      B        _qc_uart_config ; 0x20b64c
    _qc_gap_callback
;;;136        return;
;;;137    }
;;;138    
;;;139    static char *sdk_version_get(void)
;;;140    {
;;;141        return "Bee2_SDK_v" VERSION_BUILD_STR;
;;;142    }
;;;143    
;;;144    static void _qc_get_mac_addr(uint8_t *mac)
;;;145    {
;;;146        gap_get_param(GAP_PARAM_BD_ADDR, mac);
;;;147    }
;;;148    
;;;149    static void _qc_ble_scan_start(void)
;;;150    {
;;;151        le_scan_start();
;;;152    }
;;;153    
;;;154    static void _qc_ble_scan_stop(void)
;;;155    {
;;;156        le_scan_stop();
;;;157    }
;;;158    
;;;159    T_APP_RESULT _qc_gap_callback(uint8_t cb_type, void *p_cb_data)
;;;160    {
        0x0020b684:    b570        p.      PUSH     {r4-r6,lr}
        0x0020b686:    b0a6        ..      SUB      sp,sp,#0x98
        0x0020b688:    460c        .F      MOV      r4,r1
        0x0020b68a:    4606        .F      MOV      r6,r0
;;;161        T_APP_RESULT result = APP_RESULT_SUCCESS;
        0x0020b68c:    2500        .%      MOVS     r5,#0
;;;162        T_LE_CB_DATA *p_data = (T_LE_CB_DATA *)p_cb_data;
;;;163        char str[128] = {0};
        0x0020b68e:    2180        .!      MOVS     r1,#0x80
        0x0020b690:    a805        ..      ADD      r0,sp,#0x14
        0x0020b692:    f64efce5    N...    BL       __aeabi_memclr4 ; 0x5a060
;;;164    
;;;165        switch (cb_type)
        0x0020b696:    2e30        0.      CMP      r6,#0x30
        0x0020b698:    d113        ..      BNE      0x20b6c2 ; _qc_gap_callback + 62
;;;166        {
;;;167        case GAP_MSG_LE_SCAN_INFO:
;;;168            sprintf(str, "ADDR: " BT_MAC_STR_FORMAT ", RSSI: %d\r\n",
        0x0020b69a:    6821        !h      LDR      r1,[r4,#0]
        0x0020b69c:    ae01        ..      ADD      r6,sp,#4
        0x0020b69e:    7888        .x      LDRB     r0,[r1,#2]
        0x0020b6a0:    f9914008    ...@    LDRSB    r4,[r1,#8]
        0x0020b6a4:    780b        .x      LDRB     r3,[r1,#0]
        0x0020b6a6:    784a        Jx      LDRB     r2,[r1,#1]
        0x0020b6a8:    e886001d    ....    STM      r6,{r0,r2-r4}
        0x0020b6ac:    78c8        .x      LDRB     r0,[r1,#3]
        0x0020b6ae:    9000        ..      STR      r0,[sp,#0]
        0x0020b6b0:    790b        .y      LDRB     r3,[r1,#4]
        0x0020b6b2:    794a        Jy      LDRB     r2,[r1,#5]
        0x0020b6b4:    a19a        ..      ADR      r1,{pc}+0x26c ; 0x20b920
        0x0020b6b6:    a805        ..      ADD      r0,sp,#0x14
        0x0020b6b8:    f010ff92    ....    BL       __2sprintf ; 0x21c5e0
;;;169                    p_data->p_le_scan_info->bd_addr[5], p_data->p_le_scan_info->bd_addr[4],
;;;170                    p_data->p_le_scan_info->bd_addr[3], p_data->p_le_scan_info->bd_addr[2],
;;;171                    p_data->p_le_scan_info->bd_addr[1], p_data->p_le_scan_info->bd_addr[0],
;;;172                    p_data->p_le_scan_info->rssi);
;;;173            mf_printf(str);
        0x0020b6bc:    a805        ..      ADD      r0,sp,#0x14
        0x0020b6be:    f7ffff79    ..y.    BL       mf_printf ; 0x20b5b4
        0x0020b6c2:    b026        &.      ADD      sp,sp,#0x98
;;;174        default:
;;;175            break;
;;;176        }
;;;177        return result;
        0x0020b6c4:    4628        (F      MOV      r0,r5
;;;178    }
        0x0020b6c6:    bd70        p.      POP      {r4-r6,pc}
    _qc_le_gap_init
;;;179    
;;;180    void _qc_le_gap_init(void)
;;;181    {
        0x0020b6c8:    b500        ..      PUSH     {lr}
        0x0020b6ca:    b085        ..      SUB      sp,sp,#0x14
;;;182        //scan patameters
;;;183        uint8_t scan_mode = GAP_SCAN_MODE_ACTIVE;
        0x0020b6cc:    2101        .!      MOVS     r1,#1
;;;184        uint16_t scan_interval = 0x10;
        0x0020b6ce:    2010        .       MOVS     r0,#0x10
        0x0020b6d0:    f8ad0008    ....    STRH     r0,[sp,#8]
;;;185        uint16_t scan_window = 0x10;
        0x0020b6d4:    f8ad000c    ....    STRH     r0,[sp,#0xc]
;;;186        uint8_t scan_filter_policy = GAP_SCAN_FILTER_ANY;
        0x0020b6d8:    2000        .       MOVS     r0,#0
        0x0020b6da:    f88d1010    ....    STRB     r1,[sp,#0x10]
        0x0020b6de:    f88d0000    ....    STRB     r0,[sp,#0]
;;;187        uint8_t scan_filter_duplicate = GAP_SCAN_FILTER_DUPLICATE_ENABLE;
        0x0020b6e2:    f88d1004    ....    STRB     r1,[sp,#4]
;;;188    
;;;189        //Register gap callback
;;;190        le_register_app_cb(_qc_gap_callback);
        0x0020b6e6:    f2af0063    ..c.    ADR      r0,{pc}-0x61 ; 0x20b685
        0x0020b6ea:    f641faaa    A...    BL       le_register_app_cb ; 0x4cc42
;;;191    
;;;192        le_scan_set_param(GAP_PARAM_SCAN_MODE, sizeof(scan_mode), &scan_mode);
        0x0020b6ee:    aa04        ..      ADD      r2,sp,#0x10
        0x0020b6f0:    2101        .!      MOVS     r1,#1
        0x0020b6f2:    f2402041    @.A     MOV      r0,#0x241
        0x0020b6f6:    f646fe3d    F.=.    BL       le_scan_set_param ; 0x52374
;;;193        le_scan_set_param(GAP_PARAM_SCAN_INTERVAL, sizeof(scan_interval), &scan_interval);
        0x0020b6fa:    aa02        ..      ADD      r2,sp,#8
        0x0020b6fc:    2102        .!      MOVS     r1,#2
        0x0020b6fe:    f2402042    @.B     MOV      r0,#0x242
        0x0020b702:    f646fe37    F.7.    BL       le_scan_set_param ; 0x52374
;;;194        le_scan_set_param(GAP_PARAM_SCAN_WINDOW, sizeof(scan_window), &scan_window);
        0x0020b706:    aa03        ..      ADD      r2,sp,#0xc
        0x0020b708:    2102        .!      MOVS     r1,#2
        0x0020b70a:    f2402043    @.C     MOV      r0,#0x243
        0x0020b70e:    f646fe31    F.1.    BL       le_scan_set_param ; 0x52374
;;;195        le_scan_set_param(GAP_PARAM_SCAN_FILTER_POLICY, sizeof(scan_filter_policy),
        0x0020b712:    466a        jF      MOV      r2,sp
        0x0020b714:    2101        .!      MOVS     r1,#1
        0x0020b716:    f44f7011    O..p    MOV      r0,#0x244
        0x0020b71a:    f646fe2b    F.+.    BL       le_scan_set_param ; 0x52374
;;;196                          &scan_filter_policy);
;;;197        le_scan_set_param(GAP_PARAM_SCAN_FILTER_DUPLICATES, sizeof(scan_filter_duplicate),
        0x0020b71e:    aa01        ..      ADD      r2,sp,#4
        0x0020b720:    2101        .!      MOVS     r1,#1
        0x0020b722:    f2402045    @.E     MOV      r0,#0x245
        0x0020b726:    f646fe25    F.%.    BL       le_scan_set_param ; 0x52374
;;;198                          &scan_filter_duplicate);
;;;199    }
        0x0020b72a:    b005        ..      ADD      sp,sp,#0x14
        0x0020b72c:    bd00        ..      POP      {pc}
    _mxchip_qc_test
        0x0020b72e:    b500        ..      PUSH     {lr}
        0x0020b730:    b0a7        ..      SUB      sp,sp,#0x9c
        0x0020b732:    f7ffff9c    ....    BL       _qc_test_uart_init ; 0x20b66e
;;;200    
;;;201    static void _qc_ble_init(void)
;;;202    {
;;;203        le_gap_init(1);
        0x0020b736:    2001        .       MOVS     r0,#1
        0x0020b738:    f641fa40    A.@.    BL       le_gap_init ; 0x4cbbc
;;;204        gap_lib_init();
        0x0020b73c:    f010fe9e    ....    BL       gap_lib_init ; 0x21c47c
;;;205        _qc_le_gap_init();
        0x0020b740:    f7ffffc2    ....    BL       _qc_le_gap_init ; 0x20b6c8
;;;206    }
;;;207    
;;;208    /* MXCHIP standard QC test function main entrance, available for all modules */
;;;209    static void _mxchip_qc_test(void *arg)
;;;210    {
;;;211        char str[128];
;;;212        uint8_t mac[6];
;;;213    
;;;214        _qc_test_uart_init();
;;;215        _qc_ble_init();
;;;216        qc_app_task_init();
        0x0020b744:    f7ffff28    ..(.    BL       qc_app_task_init ; 0x20b598
;;;217    
;;;218        mf_printf("==== MXCHIP Manufacture Test ====\r\n");
        0x0020b748:    a081        ..      ADR      r0,{pc}+0x208 ; 0x20b950
        0x0020b74a:    f7ffff33    ..3.    BL       mf_printf ; 0x20b5b4
;;;219        QC_TEST_PRINT_STRING("Serial Number:", SERIAL_NUMBER);
        0x0020b74e:    a089        ..      ADR      r0,{pc}+0x226 ; 0x20b974
        0x0020b750:    f7ffff30    ..0.    BL       mf_printf ; 0x20b5b4
        0x0020b754:    a08b        ..      ADR      r0,{pc}+0x230 ; 0x20b984
        0x0020b756:    f7ffff2d    ..-.    BL       mf_printf ; 0x20b5b4
        0x0020b75a:    a08b        ..      ADR      r0,{pc}+0x22e ; 0x20b988
        0x0020b75c:    f7ffff2a    ..*.    BL       mf_printf ; 0x20b5b4
        0x0020b760:    a08d        ..      ADR      r0,{pc}+0x238 ; 0x20b998
        0x0020b762:    f7ffff27    ..'.    BL       mf_printf ; 0x20b5b4
;;;220        QC_TEST_PRINT_STRING("Library Version:", sdk_version_get());
        0x0020b766:    a08d        ..      ADR      r0,{pc}+0x236 ; 0x20b99c
        0x0020b768:    f7ffff24    ..$.    BL       mf_printf ; 0x20b5b4
        0x0020b76c:    a085        ..      ADR      r0,{pc}+0x218 ; 0x20b984
        0x0020b76e:    f7ffff21    ..!.    BL       mf_printf ; 0x20b5b4
        0x0020b772:    a08f        ..      ADR      r0,{pc}+0x23e ; 0x20b9b0
        0x0020b774:    f7ffff1e    ....    BL       mf_printf ; 0x20b5b4
        0x0020b778:    a087        ..      ADR      r0,{pc}+0x220 ; 0x20b998
        0x0020b77a:    f7ffff1b    ....    BL       mf_printf ; 0x20b5b4
;;;221        QC_TEST_PRINT_STRING("APP Version:", APP_VERSION_STR);
        0x0020b77e:    a091        ..      ADR      r0,{pc}+0x246 ; 0x20b9c4
        0x0020b780:    f7ffff18    ....    BL       mf_printf ; 0x20b5b4
        0x0020b784:    a07f        ..      ADR      r0,{pc}+0x200 ; 0x20b984
        0x0020b786:    f7ffff15    ....    BL       mf_printf ; 0x20b5b4
        0x0020b78a:    a092        ..      ADR      r0,{pc}+0x24a ; 0x20b9d4
        0x0020b78c:    f7ffff12    ....    BL       mf_printf ; 0x20b5b4
        0x0020b790:    a081        ..      ADR      r0,{pc}+0x208 ; 0x20b998
        0x0020b792:    f7ffff0f    ....    BL       mf_printf ; 0x20b5b4
;;;222    
;;;223        _qc_get_mac_addr(mac);
        0x0020b796:    a924        $.      ADD      r1,sp,#0x90
        0x0020b798:    f44f7000    O..p    MOV      r0,#0x200
        0x0020b79c:    f640fc4b    @.K.    BL       gap_get_param ; 0x4c036
;;;224        sprintf(str, MAC_STR_FORMAT, mac[5], mac[4], mac[3], mac[2], mac[1], mac[0]);
        0x0020b7a0:    f89d0093    ....    LDRB     r0,[sp,#0x93]
        0x0020b7a4:    f89d3090    ...0    LDRB     r3,[sp,#0x90]
        0x0020b7a8:    f89d2091    ...     LDRB     r2,[sp,#0x91]
        0x0020b7ac:    f89d1092    ....    LDRB     r1,[sp,#0x92]
        0x0020b7b0:    e88d000f    ....    STM      sp,{r0-r3}
        0x0020b7b4:    f89d3094    ...0    LDRB     r3,[sp,#0x94]
        0x0020b7b8:    f89d2095    ...     LDRB     r2,[sp,#0x95]
        0x0020b7bc:    a188        ..      ADR      r1,{pc}+0x224 ; 0x20b9e0
        0x0020b7be:    a804        ..      ADD      r0,sp,#0x10
        0x0020b7c0:    f010ff0e    ....    BL       __2sprintf ; 0x21c5e0
;;;225        QC_TEST_PRINT_STRING("MAC:", str);
        0x0020b7c4:    a08e        ..      ADR      r0,{pc}+0x23c ; 0x20ba00
        0x0020b7c6:    f7fffef5    ....    BL       mf_printf ; 0x20b5b4
        0x0020b7ca:    a06e        n.      ADR      r0,{pc}+0x1ba ; 0x20b984
        0x0020b7cc:    f7fffef2    ....    BL       mf_printf ; 0x20b5b4
        0x0020b7d0:    a804        ..      ADD      r0,sp,#0x10
        0x0020b7d2:    f7fffeef    ....    BL       mf_printf ; 0x20b5b4
        0x0020b7d6:    a070        p.      ADR      r0,{pc}+0x1c2 ; 0x20b998
        0x0020b7d8:    f7fffeec    ....    BL       mf_printf ; 0x20b5b4
;;;226        QC_TEST_PRINT_STRING("Local Bluetooth Address:", str);
        0x0020b7dc:    a08a        ..      ADR      r0,{pc}+0x22c ; 0x20ba08
        0x0020b7de:    f7fffee9    ....    BL       mf_printf ; 0x20b5b4
        0x0020b7e2:    a068        h.      ADR      r0,{pc}+0x1a2 ; 0x20b984
        0x0020b7e4:    f7fffee6    ....    BL       mf_printf ; 0x20b5b4
        0x0020b7e8:    a804        ..      ADD      r0,sp,#0x10
        0x0020b7ea:    f7fffee3    ....    BL       mf_printf ; 0x20b5b4
        0x0020b7ee:    a06a        j.      ADR      r0,{pc}+0x1aa ; 0x20b998
        0x0020b7f0:    f7fffee0    ....    BL       mf_printf ; 0x20b5b4
        0x0020b7f4:    f646fe3e    F.>.    BL       le_scan_start ; 0x52474
;;;227    
;;;228        _qc_ble_scan_start();
;;;229        os_delay(1000);
        0x0020b7f8:    f44f707a    O.zp    MOV      r0,#0x3e8
        0x0020b7fc:    f61affb8    ....    BL       os_delay ; 0x26770
        0x0020b800:    f646fe67    F.g.    BL       le_scan_stop ; 0x524d2
;;;230        _qc_ble_scan_stop();
;;;231    
;;;232        os_task_delete(mxchp_qc_task);
        0x0020b804:    4840        @H      LDR      r0,[pc,#256] ; [0x20b908] = 0x20d2f0
        0x0020b806:    380c        .8      SUBS     r0,r0,#0xc
        0x0020b808:    6840        @h      LDR      r0,[r0,#4]
        0x0020b80a:    f61bf904    ....    BL       os_task_delete ; 0x26a16
;;;233    }
        0x0020b80e:    b027        '.      ADD      sp,sp,#0x9c
        0x0020b810:    bd00        ..      POP      {pc}
    mxchip_qc_init
        0x0020b812:    b51c        ..      PUSH     {r2-r4,lr}
;;;234    
;;;235    static void _qc_init(void)
;;;236    {
;;;237        RCC_PeriphClockCmd(APBPeriph_GPIO, APBPeriph_GPIO_CLOCK, ENABLE);
;;;238        Pinmux_Config(MXCHIP_QC_CHECK_PIN, DWGPIO);
;;;239        Pinmux_Config(MXCHIP_ATE_CHECK_PIN, DWGPIO);
;;;240        Pad_Config(MXCHIP_QC_CHECK_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;241        Pad_Config(MXCHIP_ATE_CHECK_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
;;;242        GPIO_InitTypeDef qc_pin_param;
;;;243        GPIO_StructInit(&qc_pin_param);
;;;244        qc_pin_param.GPIO_Pin = GPIO_GetPin(MXCHIP_QC_CHECK_PIN) | GPIO_GetPin(MXCHIP_ATE_CHECK_PIN);
;;;245        qc_pin_param.GPIO_Mode = GPIO_Mode_IN;
;;;246        GPIO_Init(&qc_pin_param);
;;;247    }
;;;248    
;;;249    static uint8_t _qc_check(void)
;;;250    {
;;;251        _qc_init();
        0x0020b814:    f000f842    ..B.    BL       _qc_init ; 0x20b89c
;;;252        if (GPIO_ReadInputDataBit(GPIO_GetPin(MXCHIP_QC_CHECK_PIN)) == 0 && GPIO_ReadInputDataBit(GPIO_GetPin(MXCHIP_ATE_CHECK_PIN)) != 0)
        0x0020b818:    2001        .       MOVS     r0,#1
        0x0020b81a:    f7fcfde0    ....    BL       GPIO_GetPin ; 0x2083de
        0x0020b81e:    f000f835    ..5.    BL       GPIO_ReadInputDataBit ; 0x20b88c
        0x0020b822:    b938        8.      CBNZ     r0,0x20b834 ; mxchip_qc_init + 34
        0x0020b824:    2000        .       MOVS     r0,#0
        0x0020b826:    f7fcfdda    ....    BL       GPIO_GetPin ; 0x2083de
        0x0020b82a:    f000f82f    ../.    BL       GPIO_ReadInputDataBit ; 0x20b88c
        0x0020b82e:    b108        ..      CBZ      r0,0x20b834 ; mxchip_qc_init + 34
;;;253        {
;;;254            return 1;
        0x0020b830:    2001        .       MOVS     r0,#1
        0x0020b832:    e00c        ..      B        0x20b84e ; mxchip_qc_init + 60
;;;255        }
;;;256        if (GPIO_ReadInputDataBit(GPIO_GetPin(MXCHIP_QC_CHECK_PIN)) == 0 && GPIO_ReadInputDataBit(GPIO_GetPin(MXCHIP_ATE_CHECK_PIN)) == 0)
        0x0020b834:    2001        .       MOVS     r0,#1
        0x0020b836:    f7fcfdd2    ....    BL       GPIO_GetPin ; 0x2083de
        0x0020b83a:    f000f827    ..'.    BL       GPIO_ReadInputDataBit ; 0x20b88c
        0x0020b83e:    b928        (.      CBNZ     r0,0x20b84c ; mxchip_qc_init + 58
        0x0020b840:    2000        .       MOVS     r0,#0
        0x0020b842:    f7fcfdcc    ....    BL       GPIO_GetPin ; 0x2083de
        0x0020b846:    f000f821    ..!.    BL       GPIO_ReadInputDataBit ; 0x20b88c
        0x0020b84a:    b168        h.      CBZ      r0,0x20b868 ; mxchip_qc_init + 86
        0x0020b84c:    2000        .       MOVS     r0,#0
        0x0020b84e:    2801        .(      CMP      r0,#1
        0x0020b850:    d00c        ..      BEQ      0x20b86c ; mxchip_qc_init + 90
        0x0020b852:    2802        .(      CMP      r0,#2
        0x0020b854:    d119        ..      BNE      0x20b88a ; mxchip_qc_init + 120
;;; ..\..\..\inc\platform\test_mode.h
;;;146        set_hci_mode_flag(true);
        0x0020b856:    2001        .       MOVS     r0,#1
        0x0020b858:    f600ff72    ..r.    BL       set_hci_mode_flag ; 0xc740
;;;147        WDG_SystemReset(RESET_ALL_EXCEPT_AON, SWITCH_HCI_MODE);
        0x0020b85c:    e8bd401c    ...@    POP      {r2-r4,lr}
        0x0020b860:    21d5        .!      MOVS     r1,#0xd5
        0x0020b862:    2001        .       MOVS     r0,#1
        0x0020b864:    f010bc13    ....    B.W      WDG_SystemReset ; 0x21c08e
;;; ..\..\..\src\sample\ble_central\mxchip_qc.c
;;;258            return 2;
        0x0020b868:    2002        .       MOVS     r0,#2
        0x0020b86a:    e7f0        ..      B        0x20b84e ; mxchip_qc_init + 60
;;;259        }
;;;260    
;;;261        return 0;
;;;262    }
;;;263    
;;;264    void mxchip_qc_init(void)
;;;265    {
;;;266        uint8_t qc_state = _qc_check();
;;;267        if (qc_state == 1)
;;;268        {
;;;269            os_task_create(&mxchp_qc_task, "qc", _mxchip_qc_test, 0, 2048,
        0x0020b86c:    2101        .!      MOVS     r1,#1
        0x0020b86e:    02c8        ..      LSLS     r0,r1,#11
        0x0020b870:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x0020b874:    4824        $H      LDR      r0,[pc,#144] ; [0x20b908] = 0x20d2f0
        0x0020b876:    2300        .#      MOVS     r3,#0
        0x0020b878:    4a6a        jJ      LDR      r2,[pc,#424] ; [0x20ba24] = 0x20b72f
        0x0020b87a:    a16b        k.      ADR      r1,{pc}+0x1ae ; 0x20ba28
        0x0020b87c:    3808        .8      SUBS     r0,r0,#8
        0x0020b87e:    f61bf8a7    ....    BL       os_task_create ; 0x269d0
;;;270                           APP_TASK_PRIORITY);
;;;271    
;;;272            os_sched_start();
        0x0020b882:    e8bd401c    ...@    POP      {r2-r4,lr}
        0x0020b886:    f61abf9c    ....    B        os_sched_start ; 0x267c2
;;;273        }
;;;274        else if (qc_state == 2)
;;;275        {
;;;276            switch_to_hci_mode();
;;;277        }
;;;278        else
;;;279        {
;;;280            ;
;;;281        }
;;;282    }
        0x0020b88a:    bd1c        ..      POP      {r2-r4,pc}
    GPIO_ReadInputDataBit
;;; ..\..\..\inc\peripheral\rtl876x_gpio.h
;;;391        if (GPIO->DATAIN & GPIO_Pin)
        0x0020b88c:    4a67        gJ      LDR      r2,[pc,#412] ; [0x20ba2c] = 0x40001000
;;; ..\..\..\inc\peripheral\rtl876x_gpio.h (385)
        0x0020b88e:    4601        .F      MOV      r1,r0
        0x0020b890:    2000        .       MOVS     r0,#0
        0x0020b892:    6d12        .m      LDR      r2,[r2,#0x50]
        0x0020b894:    420a        .B      TST      r2,r1
        0x0020b896:    d000        ..      BEQ      0x20b89a ; GPIO_ReadInputDataBit + 14
;;;386        uint8_t bitstatus = RESET;
;;;387    
;;;388        /* Check the parameters */
;;;389        assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;390    
;;;391        if (GPIO->DATAIN & GPIO_Pin)
;;;392        {
;;;393            bitstatus = (uint8_t)SET;
        0x0020b898:    2001        .       MOVS     r0,#1
;;;394        }
;;;395    
;;;396        return bitstatus;
;;;397    }
        0x0020b89a:    4770        pG      BX       lr
    _qc_init
;;; ..\..\..\src\sample\ble_central\mxchip_qc.c
;;;236    {
        0x0020b89c:    b530        0.      PUSH     {r4,r5,lr}
        0x0020b89e:    b087        ..      SUB      sp,sp,#0x1c
;;;237        RCC_PeriphClockCmd(APBPeriph_GPIO, APBPeriph_GPIO_CLOCK, ENABLE);
        0x0020b8a0:    2201        ."      MOVS     r2,#1
        0x0020b8a2:    f04f5104    O..Q    MOV      r1,#0x21000000
        0x0020b8a6:    4862        bH      LDR      r0,[pc,#392] ; [0x20ba30] = 0xc000100
        0x0020b8a8:    f7fcfa74    ..t.    BL       RCC_PeriphClockCmd ; 0x207d94
;;;238        Pinmux_Config(MXCHIP_QC_CHECK_PIN, DWGPIO);
        0x0020b8ac:    215a        Z!      MOVS     r1,#0x5a
        0x0020b8ae:    2001        .       MOVS     r0,#1
        0x0020b8b0:    f605fd60    ..`.    BL       Pinmux_Config ; 0x11374
;;;239        Pinmux_Config(MXCHIP_ATE_CHECK_PIN, DWGPIO);
        0x0020b8b4:    215a        Z!      MOVS     r1,#0x5a
        0x0020b8b6:    2000        .       MOVS     r0,#0
        0x0020b8b8:    f605fd5c    ..\.    BL       Pinmux_Config ; 0x11374
;;;240        Pad_Config(MXCHIP_QC_CHECK_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0020b8bc:    2301        .#      MOVS     r3,#1
        0x0020b8be:    2400        .$      MOVS     r4,#0
        0x0020b8c0:    9400        ..      STR      r4,[sp,#0]
        0x0020b8c2:    461a        .F      MOV      r2,r3
        0x0020b8c4:    4619        .F      MOV      r1,r3
        0x0020b8c6:    4618        .F      MOV      r0,r3
        0x0020b8c8:    9401        ..      STR      r4,[sp,#4]
        0x0020b8ca:    f605fd87    ....    BL       Pad_Config ; 0x113dc
;;;241        Pad_Config(MXCHIP_ATE_CHECK_PIN, PAD_PINMUX_MODE, PAD_IS_PWRON, PAD_PULL_UP, PAD_OUT_DISABLE, PAD_OUT_LOW);
        0x0020b8ce:    2301        .#      MOVS     r3,#1
        0x0020b8d0:    9400        ..      STR      r4,[sp,#0]
        0x0020b8d2:    461a        .F      MOV      r2,r3
        0x0020b8d4:    4619        .F      MOV      r1,r3
        0x0020b8d6:    2000        .       MOVS     r0,#0
        0x0020b8d8:    9401        ..      STR      r4,[sp,#4]
        0x0020b8da:    f605fd7f    ....    BL       Pad_Config ; 0x113dc
;;;242        GPIO_InitTypeDef qc_pin_param;
;;;243        GPIO_StructInit(&qc_pin_param);
        0x0020b8de:    a802        ..      ADD      r0,sp,#8
        0x0020b8e0:    f7fcfd5b    ..[.    BL       GPIO_StructInit ; 0x20839a
;;;244        qc_pin_param.GPIO_Pin = GPIO_GetPin(MXCHIP_QC_CHECK_PIN) | GPIO_GetPin(MXCHIP_ATE_CHECK_PIN);
        0x0020b8e4:    2001        .       MOVS     r0,#1
        0x0020b8e6:    f7fcfd7a    ..z.    BL       GPIO_GetPin ; 0x2083de
        0x0020b8ea:    4605        .F      MOV      r5,r0
        0x0020b8ec:    2000        .       MOVS     r0,#0
        0x0020b8ee:    f7fcfd76    ..v.    BL       GPIO_GetPin ; 0x2083de
        0x0020b8f2:    4305        .C      ORRS     r5,r5,r0
;;;245        qc_pin_param.GPIO_Mode = GPIO_Mode_IN;
        0x0020b8f4:    9502        ..      STR      r5,[sp,#8]
        0x0020b8f6:    f88d400c    ...@    STRB     r4,[sp,#0xc]
;;;246        GPIO_Init(&qc_pin_param);
        0x0020b8fa:    a802        ..      ADD      r0,sp,#8
        0x0020b8fc:    f7fcfcee    ....    BL       GPIO_Init ; 0x2082dc
;;;247    }
        0x0020b900:    b007        ..      ADD      sp,sp,#0x1c
        0x0020b902:    bd30        0.      POP      {r4,r5,pc}
    $d
        0x0020b904:    0020c0c8    .. .    DCD    2146504
        0x0020b908:    0020d2f0    .. .    DCD    2151152
        0x0020b90c:    615f6371    qc_a    DCD    1633641329
        0x0020b910:    00007070    pp..    DCD    28784
        0x0020b914:    40012000    . .@    DCD    1073815552
        0x0020b918:    40000001    ...@    DCD    1073741825
        0x0020b91c:    08000001    ....    DCD    134217729
        0x0020b920:    52444441    ADDR    DCD    1380205633
        0x0020b924:    3025203a    : %0    DCD    807739450
        0x0020b928:    253a5832    2X:%    DCD    624580658
        0x0020b92c:    3a583230    02X:    DCD    978858544
        0x0020b930:    58323025    %02X    DCD    1479684133
        0x0020b934:    3230253a    :%02    DCD    842016058
        0x0020b938:    30253a58    X:%0    DCD    807746136
        0x0020b93c:    253a5832    2X:%    DCD    624580658
        0x0020b940:    2c583230    02X,    DCD    743977520
        0x0020b944:    53535220     RSS    DCD    1397969440
        0x0020b948:    25203a49    I: %    DCD    622869065
        0x0020b94c:    000a0d64    d...    DCD    658788
        0x0020b950:    3d3d3d3d    ====    DCD    1027423549
        0x0020b954:    43584d20     MXC    DCD    1129860384
        0x0020b958:    20504948    HIP     DCD    542132552
        0x0020b95c:    756e614d    Manu    DCD    1970168141
        0x0020b960:    74636166    fact    DCD    1952670054
        0x0020b964:    20657275    ure     DCD    543519349
        0x0020b968:    74736554    Test    DCD    1953719636
        0x0020b96c:    3d3d3d20     ===    DCD    1027423520
        0x0020b970:    000a0d3d    =...    DCD    658749
        0x0020b974:    69726553    Seri    DCD    1769104723
        0x0020b978:    4e206c61    al N    DCD    1310747745
        0x0020b97c:    65626d75    umbe    DCD    1700949365
        0x0020b980:    00003a72    r:..    DCD    14962
        0x0020b984:    00000020     ...    DCD    32
        0x0020b988:    30363630    0660    DCD    808859184
        0x0020b98c:    3046582e    .XF0    DCD    809916462
        0x0020b990:    594c2e31    1.LY    DCD    1498164785
        0x0020b994:    00003130    01..    DCD    12592
        0x0020b998:    00000a0d    ....    DCD    2573
        0x0020b99c:    7262694c    Libr    DCD    1919052108
        0x0020b9a0:    20797261    ary     DCD    544830049
        0x0020b9a4:    73726556    Vers    DCD    1936876886
        0x0020b9a8:    3a6e6f69    ion:    DCD    980316009
        0x0020b9ac:    00000000    ....    DCD    0
        0x0020b9b0:    32656542    Bee2    DCD    845505858
        0x0020b9b4:    4b44535f    _SDK    DCD    1262768991
        0x0020b9b8:    2e31765f    _v1.    DCD    774993503
        0x0020b9bc:    2e322e30    0.2.    DCD    775040560
        0x0020b9c0:    00000030    0...    DCD    48
        0x0020b9c4:    20505041    APP     DCD    542134337
        0x0020b9c8:    73726556    Vers    DCD    1936876886
        0x0020b9cc:    3a6e6f69    ion:    DCD    980316009
        0x0020b9d0:    00000000    ....    DCD    0
        0x0020b9d4:    5f505041    APP_    DCD    1599098945
        0x0020b9d8:    302e3176    v1.0    DCD    808333686
        0x0020b9dc:    0000312e    .1..    DCD    12590
        0x0020b9e0:    58323025    %02X    DCD    1479684133
        0x0020b9e4:    3230252d    -%02    DCD    842016045
        0x0020b9e8:    30252d58    X-%0    DCD    807742808
        0x0020b9ec:    252d5832    2X-%    DCD    623728690
        0x0020b9f0:    2d583230    02X-    DCD    760754736
        0x0020b9f4:    58323025    %02X    DCD    1479684133
        0x0020b9f8:    3230252d    -%02    DCD    842016045
        0x0020b9fc:    00000058    X...    DCD    88
        0x0020ba00:    3a43414d    MAC:    DCD    977486157
        0x0020ba04:    00000000    ....    DCD    0
        0x0020ba08:    61636f4c    Loca    DCD    1633906508
        0x0020ba0c:    6c42206c    l Bl    DCD    1816273004
        0x0020ba10:    6f746575    ueto    DCD    1869899125
        0x0020ba14:    2068746f    oth     DCD    543716463
        0x0020ba18:    72646441    Addr    DCD    1919181889
        0x0020ba1c:    3a737365    ess:    DCD    980644709
        0x0020ba20:    00000000    ....    DCD    0
        0x0020ba24:    0020b72f    /. .    DCD    2144047
        0x0020ba28:    00006371    qc..    DCD    25457
        0x0020ba2c:    40001000    ...@    DCD    1073745920
        0x0020ba30:    0c000100    ....    DCD    201326848
    $t
    .text
    gap_sw_reset_req
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (123)
        0x0020ba34:    b570        p.      PUSH     {r4-r6,lr}
        0x0020ba36:    2402        .$      MOVS     r4,#2
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (123)
        0x0020ba38:    4605        .F      MOV      r5,r0
        0x0020ba3a:    2801        .(      CMP      r0,#1
        0x0020ba3c:    d002        ..      BEQ      0x20ba44 ; gap_sw_reset_req + 16
        0x0020ba3e:    2403        .$      MOVS     r4,#3
        0x0020ba40:    4620         F      MOV      r0,r4
        0x0020ba42:    bd70        p.      POP      {r4-r6,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (127)
        0x0020ba44:    f642f894    B...    BL       le_get_active_link_num ; 0x4db70
        0x0020ba48:    2800        .(      CMP      r0,#0
        0x0020ba4a:    d1f9        ..      BNE      0x20ba40 ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (128)
        0x0020ba4c:    4873        sH      LDR      r0,[pc,#460] ; [0x20bc1c] = 0x202e38
        0x0020ba4e:    7801        .x      LDRB     r1,[r0,#0]
        0x0020ba50:    07c8        ..      LSLS     r0,r1,#31
        0x0020ba52:    d0f5        ..      BEQ      0x20ba40 ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (129)
        0x0020ba54:    f0110f0c    ....    TST      r1,#0xc
        0x0020ba58:    d0f2        ..      BEQ      0x20ba40 ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (130)
        0x0020ba5a:    f0110f30    ..0.    TST      r1,#0x30
        0x0020ba5e:    d1ef        ..      BNE      0x20ba40 ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (131)
        0x0020ba60:    0988        ..      LSRS     r0,r1,#6
        0x0020ba62:    d1ed        ..      BNE      0x20ba40 ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (133)
        0x0020ba64:    4628        (F      MOV      r0,r5
        0x0020ba66:    f615fe3c    ..<.    BL       btif_sw_reset_req ; 0x216e2
        0x0020ba6a:    2800        .(      CMP      r0,#0
        0x0020ba6c:    d0e8        ..      BEQ      0x20ba40 ; gap_sw_reset_req + 12
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (135)
        0x0020ba6e:    2400        .$      MOVS     r4,#0
        0x0020ba70:    e7e6        ..      B        0x20ba40 ; gap_sw_reset_req + 12
    le_handle_sw_reset_rsp
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (147)
        0x0020ba72:    b538        8.      PUSH     {r3-r5,lr}
        0x0020ba74:    0004        ..      MOVS     r4,r0
        0x0020ba76:    d107        ..      BNE      0x20ba88 ; le_handle_sw_reset_rsp + 22
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (150)
        0x0020ba78:    4968        hI      LDR      r1,[pc,#416] ; [0x20bc1c] = 0x202e38
        0x0020ba7a:    7808        .x      LDRB     r0,[r1,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (151)
        0x0020ba7c:    f020000e     ...    BIC      r0,r0,#0xe
        0x0020ba80:    7008        .p      STRB     r0,[r1,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (152)
        0x0020ba82:    20fc        .       MOVS     r0,#0xfc
        0x0020ba84:    f641fa1d    A...    BL       gap_send_dev_state ; 0x4cec2
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (154)
        0x0020ba88:    4865        eH      LDR      r0,[pc,#404] ; [0x20bc20] = 0x202e48
        0x0020ba8a:    6802        .h      LDR      r2,[r0,#0]
        0x0020ba8c:    2a00        .*      CMP      r2,#0
        0x0020ba8e:    d004        ..      BEQ      0x20ba9a ; le_handle_sw_reset_rsp + 40
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (157)
        0x0020ba90:    f8ad4000    ...@    STRH     r4,[sp,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (158)
        0x0020ba94:    4669        iF      MOV      r1,sp
        0x0020ba96:    20a5        .       MOVS     r0,#0xa5
        0x0020ba98:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (160)
        0x0020ba9a:    bd38        8.      POP      {r3-r5,pc}
    le_check_privacy_bond
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (166)
        0x0020ba9c:    b530        0.      PUSH     {r4,r5,lr}
        0x0020ba9e:    b08b        ..      SUB      sp,sp,#0x2c
        0x0020baa0:    f04f0100    O...    MOV      r1,#0
        0x0020baa4:    4d5f        _M      LDR      r5,[pc,#380] ; [0x20bc24] = 0x21103502
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (166)
        0x0020baa6:    0004        ..      MOVS     r4,r0
        0x0020baa8:    9106        ..      STR      r1,[sp,#0x18]
        0x0020baaa:    9107        ..      STR      r1,[sp,#0x1c]
        0x0020baac:    9108        ..      STR      r1,[sp,#0x20]
        0x0020baae:    9109        ..      STR      r1,[sp,#0x24]
        0x0020bab0:    d002        ..      BEQ      0x20bab8 ; le_check_privacy_bond + 28
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (169)
        0x0020bab2:    7820         x      LDRB     r0,[r4,#0]
        0x0020bab4:    2801        .(      CMP      r0,#1
        0x0020bab6:    d008        ..      BEQ      0x20baca ; le_check_privacy_bond + 46
        0x0020bab8:    2301        .#      MOVS     r3,#1
        0x0020baba:    2201        ."      MOVS     r2,#1
        0x0020babc:    495a        ZI      LDR      r1,[pc,#360] ; [0x20bc28] = 0x88026ec
        0x0020babe:    4628        (F      MOV      r0,r5
        0x0020bac0:    f5fbffcd    ....    BL       log_buffer ; 0x7a5e
        0x0020bac4:    2000        .       MOVS     r0,#0
        0x0020bac6:    b00b        ..      ADD      sp,sp,#0x2c
        0x0020bac8:    bd30        0.      POP      {r4,r5,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (171)
        0x0020baca:    78a0        .x      LDRB     r0,[r4,#2]
        0x0020bacc:    0700        ..      LSLS     r0,r0,#28
        0x0020bace:    d518        ..      BPL      0x20bb02 ; le_check_privacy_bond + 102
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (174)
        0x0020bad0:    466a        jF      MOV      r2,sp
        0x0020bad2:    2114        .!      MOVS     r1,#0x14
        0x0020bad4:    4620         F      MOV      r0,r4
        0x0020bad6:    f644fc45    D.E.    BL       le_get_key ; 0x50364
        0x0020bada:    b180        ..      CBZ      r0,0x20bafe ; le_check_privacy_bond + 98
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (176)
        0x0020badc:    2210        ."      MOVS     r2,#0x10
        0x0020bade:    a906        ..      ADD      r1,sp,#0x18
        0x0020bae0:    4668        hF      MOV      r0,sp
        0x0020bae2:    f64ef98f    N...    BL       memcmp ; 0x59e04
        0x0020bae6:    b140        @.      CBZ      r0,0x20bafa ; le_check_privacy_bond + 94
        0x0020bae8:    494f        OI      LDR      r1,[pc,#316] ; [0x20bc28] = 0x88026ec
        0x0020baea:    7863        cx      LDRB     r3,[r4,#1]
        0x0020baec:    2201        ."      MOVS     r2,#1
        0x0020baee:    3930        09      SUBS     r1,r1,#0x30
        0x0020baf0:    4628        (F      MOV      r0,r5
        0x0020baf2:    f5fbffb4    ....    BL       log_buffer ; 0x7a5e
        0x0020baf6:    2001        .       MOVS     r0,#1
        0x0020baf8:    e7e5        ..      B        0x20bac6 ; le_check_privacy_bond + 42
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (178)
        0x0020bafa:    2305        .#      MOVS     r3,#5
        0x0020bafc:    e7dd        ..      B        0x20baba ; le_check_privacy_bond + 30
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (188)
        0x0020bafe:    2304        .#      MOVS     r3,#4
        0x0020bb00:    e7db        ..      B        0x20baba ; le_check_privacy_bond + 30
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (193)
        0x0020bb02:    2302        .#      MOVS     r3,#2
        0x0020bb04:    e7d9        ..      B        0x20baba ; le_check_privacy_bond + 30
    le_bond_just_work_confirm
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (205)
        0x0020bb06:    460a        .F      MOV      r2,r1
        0x0020bb08:    eb000140    ..@.    ADD      r1,r0,r0,LSL #1
        0x0020bb0c:    4847        GH      LDR      r0,[pc,#284] ; [0x20bc2c] = 0x202e64
        0x0020bb0e:    b510        ..      PUSH     {r4,lr}
        0x0020bb10:    6800        .h      LDR      r0,[r0,#0]
        0x0020bb12:    eb001001    ....    ADD      r0,r0,r1,LSL #4
        0x0020bb16:    7801        .x      LDRB     r1,[r0,#0]
        0x0020bb18:    b129        ).      CBZ      r1,0x20bb26 ; le_bond_just_work_confirm + 32
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (208)
        0x0020bb1a:    7981        .y      LDRB     r1,[r0,#6]
        0x0020bb1c:    1dc0        ..      ADDS     r0,r0,#7
        0x0020bb1e:    f615fd9c    ....    BL       btif_just_work_req_cfm ; 0x2165a
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (210)
        0x0020bb22:    2000        .       MOVS     r0,#0
        0x0020bb24:    bd10        ..      POP      {r4,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (214)
        0x0020bb26:    2004        .       MOVS     r0,#4
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (216)
        0x0020bb28:    bd10        ..      POP      {r4,pc}
    le_gen_rand_addr
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (220)
        0x0020bb2a:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0020bb2c:    b085        ..      SUB      sp,sp,#0x14
        0x0020bb2e:    460c        .F      MOV      r4,r1
        0x0020bb30:    0005        ..      MOVS     r5,r0
        0x0020bb32:    d006        ..      BEQ      0x20bb42 ; le_gen_rand_addr + 24
        0x0020bb34:    f616fadd    ....    BL       btif_le_gen_rand_addr ; 0x220f2
        0x0020bb38:    2800        .(      CMP      r0,#0
        0x0020bb3a:    d048        H.      BEQ      0x20bbce ; le_gen_rand_addr + 164
        0x0020bb3c:    2000        .       MOVS     r0,#0
        0x0020bb3e:    b005        ..      ADD      sp,sp,#0x14
        0x0020bb40:    bdf0        ..      POP      {r4-r7,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (224)
        0x0020bb42:    2600        .&      MOVS     r6,#0
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (226)
        0x0020bb44:    b384        ..      CBZ      r4,0x20bba8 ; le_gen_rand_addr + 126
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (232)
        0x0020bb46:    f010fa63    ..c.    BL       rand ; 0x21c010
        0x0020bb4a:    7020         p      STRB     r0,[r4,#0]
        0x0020bb4c:    1c67        g.      ADDS     r7,r4,#1
        0x0020bb4e:    f010fa5f    .._.    BL       rand ; 0x21c010
        0x0020bb52:    0a00        ..      LSRS     r0,r0,#8
        0x0020bb54:    7038        8p      STRB     r0,[r7,#0]
        0x0020bb56:    f010fa5b    ..[.    BL       rand ; 0x21c010
        0x0020bb5a:    0c00        ..      LSRS     r0,r0,#16
        0x0020bb5c:    7078        xp      STRB     r0,[r7,#1]
        0x0020bb5e:    f010fa57    ..W.    BL       rand ; 0x21c010
        0x0020bb62:    0e00        ..      LSRS     r0,r0,#24
        0x0020bb64:    70b8        .p      STRB     r0,[r7,#2]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (233)
        0x0020bb66:    f010fa53    ..S.    BL       rand ; 0x21c010
        0x0020bb6a:    70f8        .p      STRB     r0,[r7,#3]
        0x0020bb6c:    f010fa50    ..P.    BL       rand ; 0x21c010
        0x0020bb70:    0a00        ..      LSRS     r0,r0,#8
        0x0020bb72:    7138        8q      STRB     r0,[r7,#4]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (235)
        0x0020bb74:    f04000c0    @...    ORR      r0,r0,#0xc0
        0x0020bb78:    7160        `q      STRB     r0,[r4,#5]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (236)
        0x0020bb7a:    a02d        -.      ADR      r0,{pc}+0xb6 ; 0x20bc30
        0x0020bb7c:    2206        ."      MOVS     r2,#6
        0x0020bb7e:    e9d01000    ....    LDRD     r1,r0,[r0,#0]
        0x0020bb82:    e9cd1001    ....    STRD     r1,r0,[sp,#4]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (237)
        0x0020bb86:    a02c        ,.      ADR      r0,{pc}+0xb2 ; 0x20bc38
        0x0020bb88:    e9d01000    ....    LDRD     r1,r0,[r0,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (238)
        0x0020bb8c:    e9cd1003    ....    STRD     r1,r0,[sp,#0xc]
        0x0020bb90:    a901        ..      ADD      r1,sp,#4
        0x0020bb92:    4620         F      MOV      r0,r4
        0x0020bb94:    f64ef936    N.6.    BL       memcmp ; 0x59e04
        0x0020bb98:    b148        H.      CBZ      r0,0x20bbae ; le_gen_rand_addr + 132
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (239)
        0x0020bb9a:    2206        ."      MOVS     r2,#6
        0x0020bb9c:    a903        ..      ADD      r1,sp,#0xc
        0x0020bb9e:    4620         F      MOV      r0,r4
        0x0020bba0:    f64ef930    N.0.    BL       memcmp ; 0x59e04
        0x0020bba4:    b118        ..      CBZ      r0,0x20bbae ; le_gen_rand_addr + 132
        0x0020bba6:    e004        ..      B        0x20bbb2 ; le_gen_rand_addr + 136
        0x0020bba8:    e7ff        ..      B        0x20bbaa ; le_gen_rand_addr + 128
        0x0020bbaa:    2003        .       MOVS     r0,#3
        0x0020bbac:    e7c7        ..      B        0x20bb3e ; le_gen_rand_addr + 20
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (241)
        0x0020bbae:    2066        f       MOVS     r0,#0x66
        0x0020bbb0:    7020         p      STRB     r0,[r4,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (243)
        0x0020bbb2:    4621        !F      MOV      r1,r4
        0x0020bbb4:    4822        "H      LDR      r0,[pc,#136] ; [0x20bc40] = 0x21300000
        0x0020bbb6:    f5fcf90f    ....    BL       trace_bdaddr ; 0x7dd8
        0x0020bbba:    491b        .I      LDR      r1,[pc,#108] ; [0x20bc28] = 0x88026ec
        0x0020bbbc:    4603        .F      MOV      r3,r0
        0x0020bbbe:    2202        ."      MOVS     r2,#2
        0x0020bbc0:    3138        81      ADDS     r1,r1,#0x38
        0x0020bbc2:    4818        .H      LDR      r0,[pc,#96] ; [0x20bc24] = 0x21103502
        0x0020bbc4:    9500        ..      STR      r5,[sp,#0]
        0x0020bbc6:    f5fbff4a    ..J.    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (245)
        0x0020bbca:    4630        0F      MOV      r0,r6
        0x0020bbcc:    e7b7        ..      B        0x20bb3e ; le_gen_rand_addr + 20
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (251)
        0x0020bbce:    2007        .       MOVS     r0,#7
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (252)
        0x0020bbd0:    e7b5        ..      B        0x20bb3e ; le_gen_rand_addr + 20
    le_bond_get_sec_level
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (266)
        0x0020bbd2:    b510        ..      PUSH     {r4,lr}
        0x0020bbd4:    b08a        ..      SUB      sp,sp,#0x28
        0x0020bbd6:    460c        .F      MOV      r4,r1
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (269)
        0x0020bbd8:    2100        .!      MOVS     r1,#0
        0x0020bbda:    7021        !p      STRB     r1,[r4,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (270)
        0x0020bbdc:    aa09        ..      ADD      r2,sp,#0x24
        0x0020bbde:    a907        ..      ADD      r1,sp,#0x1c
        0x0020bbe0:    f642f805    B...    BL       le_get_conn_addr ; 0x4dbee
        0x0020bbe4:    b1c0        ..      CBZ      r0,0x20bc18 ; le_bond_get_sec_level + 70
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (273)
        0x0020bbe6:    f89d1024    ..$.    LDRB     r1,[sp,#0x24]
        0x0020bbea:    a807        ..      ADD      r0,sp,#0x1c
        0x0020bbec:    f644facf    D...    BL       le_find_key_entry ; 0x5018e
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (274)
        0x0020bbf0:    b190        ..      CBZ      r0,0x20bc18 ; le_bond_get_sec_level + 70
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (277)
        0x0020bbf2:    466a        jF      MOV      r2,sp
        0x0020bbf4:    2111        .!      MOVS     r1,#0x11
        0x0020bbf6:    f644fbb5    D...    BL       le_get_key ; 0x50364
        0x0020bbfa:    b168        h.      CBZ      r0,0x20bc18 ; le_bond_get_sec_level + 70
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (279)
        0x0020bbfc:    490a        .I      LDR      r1,[pc,#40] ; [0x20bc28] = 0x88026ec
        0x0020bbfe:    f89d301b    ...0    LDRB     r3,[sp,#0x1b]
        0x0020bc02:    2201        ."      MOVS     r2,#1
        0x0020bc04:    3174        t1      ADDS     r1,r1,#0x74
        0x0020bc06:    4807        .H      LDR      r0,[pc,#28] ; [0x20bc24] = 0x21103502
        0x0020bc08:    f5fbff29    ..).    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (280)
        0x0020bc0c:    f89d001b    ....    LDRB     r0,[sp,#0x1b]
        0x0020bc10:    7020         p      STRB     r0,[r4,#0]
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (281)
        0x0020bc12:    2000        .       MOVS     r0,#0
        0x0020bc14:    b00a        ..      ADD      sp,sp,#0x28
        0x0020bc16:    bd10        ..      POP      {r4,pc}
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (285)
        0x0020bc18:    2003        .       MOVS     r0,#3
;;; ..\..\..\src\app\gap_lib\common\gap_lib_patch.c (286)
        0x0020bc1a:    e7fb        ..      B        0x20bc14 ; le_bond_get_sec_level + 66
    $d
        0x0020bc1c:    00202e38    8. .    DCD    2108984
        0x0020bc20:    00202e48    H. .    DCD    2109000
        0x0020bc24:    21103502    .5.!    DCD    554710274
        0x0020bc28:    088026ec    .&..    DCD    142616300
        0x0020bc2c:    00202e64    d. .    DCD    2109028
        0x0020bc30:    00000000    ....    DCD    0
        0x0020bc34:    0000c000    ....    DCD    49152
        0x0020bc38:    ffffffff    ....    DCD    4294967295
        0x0020bc3c:    0000ffff    ....    DCD    65535
        0x0020bc40:    21300000    ..0!    DCD    556793856
    $t
    .text
    _printf_int_dec
        0x0020bc44:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0020bc48:    4606        .F      MOV      r6,r0
        0x0020bc4a:    2400        .$      MOVS     r4,#0
        0x0020bc4c:    6810        .h      LDR      r0,[r2,#0]
        0x0020bc4e:    2975        u)      CMP      r1,#0x75
        0x0020bc50:    4631        1F      MOV      r1,r6
        0x0020bc52:    a516        ..      ADR      r5,{pc}+0x5a ; 0x20bcac
        0x0020bc54:    d010        ..      BEQ      0x20bc78 ; _printf_int_dec + 52
        0x0020bc56:    f3af8000    ....    NOP.W    
        0x0020bc5a:    2800        .(      CMP      r0,#0
        0x0020bc5c:    da02        ..      BGE      0x20bc64 ; _printf_int_dec + 32
        0x0020bc5e:    4240        @B      RSBS     r0,r0,#0
        0x0020bc60:    a513        ..      ADR      r5,{pc}+0x50 ; 0x20bcb0
        0x0020bc62:    e007        ..      B        0x20bc74 ; _printf_int_dec + 48
        0x0020bc64:    6831        1h      LDR      r1,[r6,#0]
        0x0020bc66:    078a        ..      LSLS     r2,r1,#30
        0x0020bc68:    d501        ..      BPL      0x20bc6e ; _printf_int_dec + 42
        0x0020bc6a:    a512        ..      ADR      r5,{pc}+0x4a ; 0x20bcb4
        0x0020bc6c:    e002        ..      B        0x20bc74 ; _printf_int_dec + 48
        0x0020bc6e:    0749        I.      LSLS     r1,r1,#29
        0x0020bc70:    d504        ..      BPL      0x20bc7c ; _printf_int_dec + 56
        0x0020bc72:    a511        ..      ADR      r5,{pc}+0x46 ; 0x20bcb8
        0x0020bc74:    2401        .$      MOVS     r4,#1
        0x0020bc76:    e001        ..      B        0x20bc7c ; _printf_int_dec + 56
        0x0020bc78:    f3af8000    ....    NOP.W    
        0x0020bc7c:    2100        .!      MOVS     r1,#0
        0x0020bc7e:    220a        ."      MOVS     r2,#0xa
        0x0020bc80:    f1060724    ..$.    ADD      r7,r6,#0x24
        0x0020bc84:    e009        ..      B        0x20bc9a ; _printf_int_dec + 86
        0x0020bc86:    fbb0fcf2    ....    UDIV     r12,r0,r2
        0x0020bc8a:    fbb0f3f2    ....    UDIV     r3,r0,r2
        0x0020bc8e:    fb02001c    ....    MLS      r0,r2,r12,r0
        0x0020bc92:    3030        00      ADDS     r0,r0,#0x30
        0x0020bc94:    5478        xT      STRB     r0,[r7,r1]
        0x0020bc96:    4618        .F      MOV      r0,r3
        0x0020bc98:    1c49        I.      ADDS     r1,r1,#1
        0x0020bc9a:    2800        .(      CMP      r0,#0
        0x0020bc9c:    d1f3        ..      BNE      0x20bc86 ; _printf_int_dec + 66
        0x0020bc9e:    4623        #F      MOV      r3,r4
        0x0020bca0:    462a        *F      MOV      r2,r5
        0x0020bca2:    4630        0F      MOV      r0,r6
        0x0020bca4:    e8bd41f0    ...A    POP      {r4-r8,lr}
        0x0020bca8:    f000b8e6    ....    B.W      _printf_int_common ; 0x20be78
    $d
        0x0020bcac:    00000000    ....    DCD    0
        0x0020bcb0:    0000002d    -...    DCD    45
        0x0020bcb4:    0000002b    +...    DCD    43
        0x0020bcb8:    00000020     ...    DCD    32
    $t
    .text
    __printf
        0x0020bcbc:    e92d5ff0    -.._    PUSH     {r4-r12,lr}
        0x0020bcc0:    4689        .F      MOV      r9,r1
        0x0020bcc2:    4604        .F      MOV      r4,r0
        0x0020bcc4:    f04f0a00    O...    MOV      r10,#0
        0x0020bcc8:    f8dfb124    ..$.    LDR      r11,[pc,#292] ; [0x20bdf0] = 0x10cd2
        0x0020bccc:    44fb        .D      ADD      r11,r11,pc
        0x0020bcce:    f8c0a020    .. .    STR      r10,[r0,#0x20]
        0x0020bcd2:    4620         F      MOV      r0,r4
        0x0020bcd4:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0020bcd6:    4788        .G      BLX      r1
        0x0020bcd8:    2800        .(      CMP      r0,#0
        0x0020bcda:    d07d        }.      BEQ      0x20bdd8 ; __printf + 284
        0x0020bcdc:    2825        %(      CMP      r0,#0x25
        0x0020bcde:    d006        ..      BEQ      0x20bcee ; __printf + 50
        0x0020bce0:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0020bce4:    4790        .G      BLX      r2
        0x0020bce6:    6a20         j      LDR      r0,[r4,#0x20]
        0x0020bce8:    1c40        @.      ADDS     r0,r0,#1
        0x0020bcea:    6220         b      STR      r0,[r4,#0x20]
        0x0020bcec:    e7f1        ..      B        0x20bcd2 ; __printf + 22
        0x0020bcee:    2500        .%      MOVS     r5,#0
        0x0020bcf0:    465f        _F      MOV      r7,r11
        0x0020bcf2:    4620         F      MOV      r0,r4
        0x0020bcf4:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0020bcf6:    4788        .G      BLX      r1
        0x0020bcf8:    2820         (      CMP      r0,#0x20
        0x0020bcfa:    4606        .F      MOV      r6,r0
        0x0020bcfc:    db07        ..      BLT      0x20bd0e ; __printf + 82
        0x0020bcfe:    2e31        1.      CMP      r6,#0x31
        0x0020bd00:    d205        ..      BCS      0x20bd0e ; __printf + 82
        0x0020bd02:    19b8        ..      ADDS     r0,r7,r6
        0x0020bd04:    f8100c20    .. .    LDRB     r0,[r0,#-0x20]
        0x0020bd08:    b108        ..      CBZ      r0,0x20bd0e ; __printf + 82
        0x0020bd0a:    4305        .C      ORRS     r5,r5,r0
        0x0020bd0c:    e7f1        ..      B        0x20bcf2 ; __printf + 54
        0x0020bd0e:    07a8        ..      LSLS     r0,r5,#30
        0x0020bd10:    d501        ..      BPL      0x20bd16 ; __printf + 90
        0x0020bd12:    f0250504    %...    BIC      r5,r5,#4
        0x0020bd16:    f8c4a01c    ....    STR      r10,[r4,#0x1c]
        0x0020bd1a:    2700        .'      MOVS     r7,#0
        0x0020bd1c:    f8c4a018    ....    STR      r10,[r4,#0x18]
        0x0020bd20:    2e2a        *.      CMP      r6,#0x2a
        0x0020bd22:    d009        ..      BEQ      0x20bd38 ; __printf + 124
        0x0020bd24:    4630        0F      MOV      r0,r6
        0x0020bd26:    f000f900    ....    BL       _is_digit ; 0x20bf2a
        0x0020bd2a:    b338        8.      CBZ      r0,0x20bd7c ; __printf + 192
        0x0020bd2c:    eb040887    ....    ADD      r8,r4,r7,LSL #2
        0x0020bd30:    3e30        0>      SUBS     r6,r6,#0x30
        0x0020bd32:    f8c86018    ...`    STR      r6,[r8,#0x18]
        0x0020bd36:    e019        ..      B        0x20bd6c ; __printf + 176
        0x0020bd38:    f8591b04    Y...    LDR      r1,[r9],#4
        0x0020bd3c:    4620         F      MOV      r0,r4
        0x0020bd3e:    eb040287    ....    ADD      r2,r4,r7,LSL #2
        0x0020bd42:    6191        .a      STR      r1,[r2,#0x18]
        0x0020bd44:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0020bd46:    4788        .G      BLX      r1
        0x0020bd48:    2f01        ./      CMP      r7,#1
        0x0020bd4a:    4606        .F      MOV      r6,r0
        0x0020bd4c:    d118        ..      BNE      0x20bd80 ; __printf + 196
        0x0020bd4e:    69e0        .i      LDR      r0,[r4,#0x1c]
        0x0020bd50:    2800        .(      CMP      r0,#0
        0x0020bd52:    da20         .      BGE      0x20bd96 ; __printf + 218
        0x0020bd54:    f0250520    %. .    BIC      r5,r5,#0x20
        0x0020bd58:    e01d        ..      B        0x20bd96 ; __printf + 218
        0x0020bd5a:    f8d80018    ....    LDR      r0,[r8,#0x18]
        0x0020bd5e:    eb000080    ....    ADD      r0,r0,r0,LSL #2
        0x0020bd62:    eb060040    ..@.    ADD      r0,r6,r0,LSL #1
        0x0020bd66:    3830        08      SUBS     r0,r0,#0x30
        0x0020bd68:    f8c80018    ....    STR      r0,[r8,#0x18]
        0x0020bd6c:    4620         F      MOV      r0,r4
        0x0020bd6e:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0020bd70:    4788        .G      BLX      r1
        0x0020bd72:    4606        .F      MOV      r6,r0
        0x0020bd74:    f000f8d9    ....    BL       _is_digit ; 0x20bf2a
        0x0020bd78:    2800        .(      CMP      r0,#0
        0x0020bd7a:    d1ee        ..      BNE      0x20bd5a ; __printf + 158
        0x0020bd7c:    2f01        ./      CMP      r7,#1
        0x0020bd7e:    d00a        ..      BEQ      0x20bd96 ; __printf + 218
        0x0020bd80:    2e2e        ..      CMP      r6,#0x2e
        0x0020bd82:    d108        ..      BNE      0x20bd96 ; __printf + 218
        0x0020bd84:    4620         F      MOV      r0,r4
        0x0020bd86:    68e1        .h      LDR      r1,[r4,#0xc]
        0x0020bd88:    4788        .G      BLX      r1
        0x0020bd8a:    1c7f        ..      ADDS     r7,r7,#1
        0x0020bd8c:    4606        .F      MOV      r6,r0
        0x0020bd8e:    2f02        ./      CMP      r7,#2
        0x0020bd90:    f0450520    E. .    ORR      r5,r5,#0x20
        0x0020bd94:    dbc4        ..      BLT      0x20bd20 ; __printf + 100
        0x0020bd96:    69a0        .i      LDR      r0,[r4,#0x18]
        0x0020bd98:    2800        .(      CMP      r0,#0
        0x0020bd9a:    da03        ..      BGE      0x20bda4 ; __printf + 232
        0x0020bd9c:    4240        @B      RSBS     r0,r0,#0
        0x0020bd9e:    f0450501    E...    ORR      r5,r5,#1
        0x0020bda2:    61a0        .a      STR      r0,[r4,#0x18]
        0x0020bda4:    07e8        ..      LSLS     r0,r5,#31
        0x0020bda6:    d001        ..      BEQ      0x20bdac ; __printf + 240
        0x0020bda8:    f0250510    %...    BIC      r5,r5,#0x10
        0x0020bdac:    b1a6        ..      CBZ      r6,0x20bdd8 ; __printf + 284
        0x0020bdae:    f1a60041    ..A.    SUB      r0,r6,#0x41
        0x0020bdb2:    2819        .(      CMP      r0,#0x19
        0x0020bdb4:    d802        ..      BHI      0x20bdbc ; __printf + 256
        0x0020bdb6:    3620         6      ADDS     r6,r6,#0x20
        0x0020bdb8:    f4456500    E..e    ORR      r5,r5,#0x800
        0x0020bdbc:    464a        JF      MOV      r2,r9
        0x0020bdbe:    4631        1F      MOV      r1,r6
        0x0020bdc0:    4620         F      MOV      r0,r4
        0x0020bdc2:    6025        %`      STR      r5,[r4,#0]
        0x0020bdc4:    464d        MF      MOV      r5,r9
        0x0020bdc6:    f010f91b    ....    BL       _printf_d ; 0x21c000
        0x0020bdca:    b160        `.      CBZ      r0,0x20bde6 ; __printf + 298
        0x0020bdcc:    2801        .(      CMP      r0,#1
        0x0020bdce:    d007        ..      BEQ      0x20bde0 ; __printf + 292
        0x0020bdd0:    1ded        ..      ADDS     r5,r5,#7
        0x0020bdd2:    f0250007    %...    BIC      r0,r5,#7
        0x0020bdd6:    e000        ..      B        0x20bdda ; __printf + 286
        0x0020bdd8:    e007        ..      B        0x20bdea ; __printf + 302
        0x0020bdda:    f1000908    ....    ADD      r9,r0,#8
        0x0020bdde:    e778        x.      B        0x20bcd2 ; __printf + 22
        0x0020bde0:    f1050904    ....    ADD      r9,r5,#4
        0x0020bde4:    e775        u.      B        0x20bcd2 ; __printf + 22
        0x0020bde6:    4630        0F      MOV      r0,r6
        0x0020bde8:    e77a        z.      B        0x20bce0 ; __printf + 36
        0x0020bdea:    6a20         j      LDR      r0,[r4,#0x20]
        0x0020bdec:    e8bd9ff0    ....    POP      {r4-r12,pc}
    $d
        0x0020bdf0:    00010cd2    ....    DCD    68818
    $t
    .text
    srand
        0x0020bdf4:    490b        .I      LDR      r1,[pc,#44] ; [0x20be24] = 0x20d370
        0x0020bdf6:    b510        ..      PUSH     {r4,lr}
        0x0020bdf8:    f1a1027c    ..|.    SUB      r2,r1,#0x7c
        0x0020bdfc:    4c0a        .L      LDR      r4,[pc,#40] ; [0x20be28] = 0x66d619e1
        0x0020bdfe:    e9c21237    ..7.    STRD     r1,r2,[r2,#0xdc]
        0x0020be02:    2137        7!      MOVS     r1,#0x37
        0x0020be04:    e006        ..      B        0x20be14 ; srand + 32
        0x0020be06:    eb004310    ...C    ADD      r3,r0,r0,LSR #16
        0x0020be0a:    f8423021    B.!0    STR      r3,[r2,r1,LSL #2]
        0x0020be0e:    4b07        .K      LDR      r3,[pc,#28] ; [0x20be2c] = 0x10dcd
        0x0020be10:    fb004003    ...@    MLA      r0,r0,r3,r4
        0x0020be14:    1e0b        ..      SUBS     r3,r1,#0
        0x0020be16:    f1a10101    ....    SUB      r1,r1,#1
        0x0020be1a:    dcf4        ..      BGT      0x20be06 ; srand + 18
        0x0020be1c:    bd10        ..      POP      {r4,pc}
    _rand_init
        0x0020be1e:    2001        .       MOVS     r0,#1
        0x0020be20:    e7e8        ..      B        srand ; 0x20bdf4
    $d
        0x0020be22:    0000        ..      DCW    0
        0x0020be24:    0020d370    p. .    DCD    2151280
        0x0020be28:    66d619e1    ...f    DCD    1725307361
        0x0020be2c:    00010dcd    ....    DCD    69069
    $t
    .text
    strcpy
        0x0020be30:    ea400301    @...    ORR      r3,r0,r1
        0x0020be34:    4602        .F      MOV      r2,r0
        0x0020be36:    b530        0.      PUSH     {r4,r5,lr}
        0x0020be38:    079b        ..      LSLS     r3,r3,#30
        0x0020be3a:    d110        ..      BNE      0x20be5e ; strcpy + 46
        0x0020be3c:    f04f3401    O..4    MOV      r4,#0x1010101
        0x0020be40:    e000        ..      B        0x20be44 ; strcpy + 20
        0x0020be42:    c208        ..      STM      r2!,{r3}
        0x0020be44:    c908        ..      LDM      r1!,{r3}
        0x0020be46:    1b1d        ..      SUBS     r5,r3,r4
        0x0020be48:    439d        .C      BICS     r5,r5,r3
        0x0020be4a:    ea151fc4    ....    TST      r5,r4,LSL #7
        0x0020be4e:    d0f8        ..      BEQ      0x20be42 ; strcpy + 18
        0x0020be50:    f01301ff    ....    ANDS     r1,r3,#0xff
        0x0020be54:    f8021b01    ....    STRB     r1,[r2],#1
        0x0020be58:    d00d        ..      BEQ      0x20be76 ; strcpy + 70
        0x0020be5a:    0a1b        ..      LSRS     r3,r3,#8
        0x0020be5c:    e7f8        ..      B        0x20be50 ; strcpy + 32
        0x0020be5e:    f8113b01    ...;    LDRB     r3,[r1],#1
        0x0020be62:    2b00        .+      CMP      r3,#0
        0x0020be64:    f8023b01    ...;    STRB     r3,[r2],#1
        0x0020be68:    d005        ..      BEQ      0x20be76 ; strcpy + 70
        0x0020be6a:    f8113b01    ...;    LDRB     r3,[r1],#1
        0x0020be6e:    2b00        .+      CMP      r3,#0
        0x0020be70:    f8023b01    ...;    STRB     r3,[r2],#1
        0x0020be74:    d1f3        ..      BNE      0x20be5e ; strcpy + 46
        0x0020be76:    bd30        0.      POP      {r4,r5,pc}
    .text
    _printf_int_common
        0x0020be78:    e92d47f0    -..G    PUSH     {r4-r10,lr}
        0x0020be7c:    460d        .F      MOV      r5,r1
        0x0020be7e:    4699        .F      MOV      r9,r3
        0x0020be80:    4692        .F      MOV      r10,r2
        0x0020be82:    4604        .F      MOV      r4,r0
        0x0020be84:    f1000824    ..$.    ADD      r8,r0,#0x24
        0x0020be88:    6801        .h      LDR      r1,[r0,#0]
        0x0020be8a:    0688        ..      LSLS     r0,r1,#26
        0x0020be8c:    d504        ..      BPL      0x20be98 ; _printf_int_common + 32
        0x0020be8e:    69e0        .i      LDR      r0,[r4,#0x1c]
        0x0020be90:    f0210110    !...    BIC      r1,r1,#0x10
        0x0020be94:    6021        !`      STR      r1,[r4,#0]
        0x0020be96:    e000        ..      B        0x20be9a ; _printf_int_common + 34
        0x0020be98:    2001        .       MOVS     r0,#1
        0x0020be9a:    42a8        .B      CMP      r0,r5
        0x0020be9c:    dd01        ..      BLE      0x20bea2 ; _printf_int_common + 42
        0x0020be9e:    1b47        G.      SUBS     r7,r0,r5
        0x0020bea0:    e000        ..      B        0x20bea4 ; _printf_int_common + 44
        0x0020bea2:    2700        .'      MOVS     r7,#0
        0x0020bea4:    69a1        .i      LDR      r1,[r4,#0x18]
        0x0020bea6:    197a        z.      ADDS     r2,r7,r5
        0x0020bea8:    eb020009    ....    ADD      r0,r2,r9
        0x0020beac:    1a08        ..      SUBS     r0,r1,r0
        0x0020beae:    61a0        .a      STR      r0,[r4,#0x18]
        0x0020beb0:    7820         x      LDRB     r0,[r4,#0]
        0x0020beb2:    06c0        ..      LSLS     r0,r0,#27
        0x0020beb4:    d402        ..      BMI      0x20bebc ; _printf_int_common + 68
        0x0020beb6:    4620         F      MOV      r0,r4
        0x0020beb8:    f010fba6    ....    BL       _printf_pre_padding ; 0x21c608
        0x0020bebc:    2600        .&      MOVS     r6,#0
        0x0020bebe:    e008        ..      B        0x20bed2 ; _printf_int_common + 90
        0x0020bec0:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0020bec4:    f81a0006    ....    LDRB     r0,[r10,r6]
        0x0020bec8:    4790        .G      BLX      r2
        0x0020beca:    6a20         j      LDR      r0,[r4,#0x20]
        0x0020becc:    1c40        @.      ADDS     r0,r0,#1
        0x0020bece:    1c76        v.      ADDS     r6,r6,#1
        0x0020bed0:    6220         b      STR      r0,[r4,#0x20]
        0x0020bed2:    454e        NE      CMP      r6,r9
        0x0020bed4:    dbf4        ..      BLT      0x20bec0 ; _printf_int_common + 72
        0x0020bed6:    7820         x      LDRB     r0,[r4,#0]
        0x0020bed8:    06c0        ..      LSLS     r0,r0,#27
        0x0020beda:    d50a        ..      BPL      0x20bef2 ; _printf_int_common + 122
        0x0020bedc:    4620         F      MOV      r0,r4
        0x0020bede:    f010fb93    ....    BL       _printf_pre_padding ; 0x21c608
        0x0020bee2:    e006        ..      B        0x20bef2 ; _printf_int_common + 122
        0x0020bee4:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0020bee8:    2030        0       MOVS     r0,#0x30
        0x0020beea:    4790        .G      BLX      r2
        0x0020beec:    6a20         j      LDR      r0,[r4,#0x20]
        0x0020beee:    1c40        @.      ADDS     r0,r0,#1
        0x0020bef0:    6220         b      STR      r0,[r4,#0x20]
        0x0020bef2:    1e38        8.      SUBS     r0,r7,#0
        0x0020bef4:    f1a70701    ....    SUB      r7,r7,#1
        0x0020bef8:    dcf4        ..      BGT      0x20bee4 ; _printf_int_common + 108
        0x0020befa:    e007        ..      B        0x20bf0c ; _printf_int_common + 148
        0x0020befc:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0020bf00:    f8180005    ....    LDRB     r0,[r8,r5]
        0x0020bf04:    4790        .G      BLX      r2
        0x0020bf06:    6a20         j      LDR      r0,[r4,#0x20]
        0x0020bf08:    1c40        @.      ADDS     r0,r0,#1
        0x0020bf0a:    6220         b      STR      r0,[r4,#0x20]
        0x0020bf0c:    1e28        (.      SUBS     r0,r5,#0
        0x0020bf0e:    f1a50501    ....    SUB      r5,r5,#1
        0x0020bf12:    dcf3        ..      BGT      0x20befc ; _printf_int_common + 132
        0x0020bf14:    4620         F      MOV      r0,r4
        0x0020bf16:    f010fb8d    ....    BL       _printf_post_padding ; 0x21c634
        0x0020bf1a:    7820         x      LDRB     r0,[r4,#0]
        0x0020bf1c:    0600        ..      LSLS     r0,r0,#24
        0x0020bf1e:    d502        ..      BPL      0x20bf26 ; _printf_int_common + 174
        0x0020bf20:    2002        .       MOVS     r0,#2
        0x0020bf22:    e8bd87f0    ....    POP      {r4-r10,pc}
        0x0020bf26:    2001        .       MOVS     r0,#1
        0x0020bf28:    e7fb        ..      B        0x20bf22 ; _printf_int_common + 170
    i._is_digit
    _is_digit
        0x0020bf2a:    3830        08      SUBS     r0,r0,#0x30
        0x0020bf2c:    280a        .(      CMP      r0,#0xa
        0x0020bf2e:    d201        ..      BCS      0x20bf34 ; _is_digit + 10
        0x0020bf30:    2001        .       MOVS     r0,#1
        0x0020bf32:    4770        pG      BX       lr
        0x0020bf34:    2000        .       MOVS     r0,#0
        0x0020bf36:    4770        pG      BX       lr
    $d.realdata
    .constdata
    app_cb_table
        0x0020bf38:    0e85d101    ....    DCD    243650817
        0x0020bf3c:    00000006    ....    DCD    6
        0x0020bf40:    0021c109    ..!.    DCD    2212105
        0x0020bf44:    00000000    ....    DCD    0
        0x0020bf48:    00000000    ....    DCD    0
        0x0020bf4c:    00000000    ....    DCD    0
        0x0020bf50:    00000000    ....    DCD    0
        0x0020bf54:    0021c119    ..!.    DCD    2212121
    .constdata
    __func__
        0x0020bf58:    6c6c616d    mall    DCD    1819042157
        0x0020bf5c:    636f        oc      DCW    25455
        0x0020bf5e:    00          .       DCB    0
    __func__
        0x0020bf5f:    63          c       DCB    99
        0x0020bf60:    6f6c6c61    allo    DCD    1869376609
        0x0020bf64:    0063        c.      DCW    99
    __func__
        0x0020bf66:    6572        re      DCW    25970
        0x0020bf68:    6f6c6c61    allo    DCD    1869376609
        0x0020bf6c:    00000063    c...    DCD    99
        0x0020bf70:    0021caf0    ..!.    DCD    2214640
        0x0020bf74:    0021cb9c    ..!.    DCD    2214812
        0x0020bf78:    0021cae4    ..!.    DCD    2214628
        0x0020bf7c:    0021cba4    ..!.    DCD    2214820
        0x0020bf80:    0021cb48    H.!.    DCD    2214728
        0x0020bf84:    0021cbbc    ..!.    DCD    2214844
        0x0020bf88:    0021cbb0    ..!.    DCD    2214832
        0x0020bf8c:    0021cb38    8.!.    DCD    2214712
        0x0020bf90:    0021cb38    8.!.    DCD    2214712
        0x0020bf94:    0021cb38    8.!.    DCD    2214712
        0x0020bf98:    0021cb38    8.!.    DCD    2214712
        0x0020bf9c:    0021cad8    ..!.    DCD    2214616
        0x0020bfa0:    0021cb90    ..!.    DCD    2214800
        0x0020bfa4:    0021cb38    8.!.    DCD    2214712
        0x0020bfa8:    0021cb00    ..!.    DCD    2214656
        0x0020bfac:    0021cb60    `.!.    DCD    2214752
        0x0020bfb0:    0021cb74    t.!.    DCD    2214772
        0x0020bfb4:    0021cae0    ..!.    DCD    2214624
        0x0020bfb8:    0021cac8    ..!.    DCD    2214600
        0x0020bfbc:    0021ca48    H.!.    DCD    2214472
        0x0020bfc0:    0021ca1c    ..!.    DCD    2214428
        0x0020bfc4:    0021cb7c    |.!.    DCD    2214780
        0x0020bfc8:    0021cb30    0.!.    DCD    2214704
        0x0020bfcc:    0021cb1c    ..!.    DCD    2214684
        0x0020bfd0:    0021cab4    ..!.    DCD    2214580
        0x0020bfd4:    0021ca74    t.!.    DCD    2214516
        0x0020bfd8:    0021ca94    ..!.    DCD    2214548
        0x0020bfdc:    0021c9f8    ..!.    DCD    2214392
        0x0020bfe0:    0021c9c4    ..!.    DCD    2214340
        0x0020bfe4:    0021cad4    ..!.    DCD    2214612
        0x0020bfe8:    0021c9bc    ..!.    DCD    2214332
        0x0020bfec:    0021c9f0    ..!.    DCD    2214384
        0x0020bff0:    0021c9b4    ..!.    DCD    2214324
        0x0020bff4:    0021c9e8    ..!.    DCD    2214376
        0x0020bff8:    0021cad0    ..!.    DCD    2214608
        0x0020bffc:    0021cb68    h.!.    DCD    2214760
        0x0020c000:    0021c9cc    ..!.    DCD    2214348
        0x0020c004:    0021ca00    ..!.    DCD    2214400
        0x0020c008:    0021ca2c    ,.!.    DCD    2214444
        0x0020c00c:    0021ca50    P.!.    DCD    2214480
        0x0020c010:    0021ca7c    |.!.    DCD    2214524
        0x0020c014:    0021ca9c    ..!.    DCD    2214556
        0x0020c018:    0021ca60    `.!.    DCD    2214496
        0x0020c01c:    0021ca3c    <.!.    DCD    2214460
        0x0020c020:    0021cafc    ..!.    DCD    2214652
        0x0020c024:    0021ca10    ..!.    DCD    2214416
        0x0020c028:    0021c9dc    ..!.    DCD    2214364
        0x0020c02c:    0021ca24    $.!.    DCD    2214436
        0x0020c030:    0021ca6c    l.!.    DCD    2214508
        0x0020c034:    0021ca8c    ..!.    DCD    2214540
        0x0020c038:    0021caac    ..!.    DCD    2214572
        0x0020c03c:    0021cac0    ..!.    DCD    2214592
        0x0020c040:    0021cb54    T.!.    DCD    2214740
        0x0020c044:    0021cb40    @.!.    DCD    2214720
        0x0020c048:    0021cb88    ..!.    DCD    2214792
        0x0020c04c:    0021cb08    ..!.    DCD    2214664
        0x0020c050:    0021cae8    ..!.    DCD    2214632
        0x0020c054:    0021cbc8    ..!.    DCD    2214856
        0x0020c058:    0021cb24    $.!.    DCD    2214692
        0x0020c05c:    0021cb10    ..!.    DCD    2214672
        0x0020c060:    0021cadc    ..!.    DCD    2214620
    .constdata
    simp_ble_client_cbs
        0x0020c064:    002087d7    .. .    DCD    2131927
        0x0020c068:    002088e7    .. .    DCD    2132199
        0x0020c06c:    00208a03    .. .    DCD    2132483
        0x0020c070:    00208b05    .. .    DCD    2132741
        0x0020c074:    00208b73    s. .    DCD    2132851
        0x0020c078:    00208c0d    .. .    DCD    2133005
    __func__
        0x0020c07c:    706d6973    simp    DCD    1886218611
        0x0020c080:    656c625f    _ble    DCD    1701601887
        0x0020c084:    6464615f    _add    DCD    1684300127
        0x0020c088:    696c635f    _cli    DCD    1768711007
        0x0020c08c:    00746e65    ent.    DCD    7630437
    .constdata
    __func__
        0x0020c090:    5f707061    app_    DCD    1601204321
        0x0020c094:    6e69616d    main    DCD    1852399981
        0x0020c098:    7361745f    _tas    DCD    1935766623
        0x0020c09c:    0000006b    k...    DCD    107
    .constdata
        0x0020c0a0:    5f454c42    BLE_    DCD    1598377026
        0x0020c0a4:    544e4543    CENT    DCD    1414415683
        0x0020c0a8:    004c4152    RAL.    DCD    4997458
        0x0020c0ac:    00000000    ....    DCD    0
        0x0020c0b0:    00000000    ....    DCD    0
        0x0020c0b4:    00000000    ....    DCD    0
        0x0020c0b8:    00000000    ....    DCD    0
        0x0020c0bc:    00000000    ....    DCD    0
        0x0020c0c0:    00000000    ....    DCD    0
        0x0020c0c4:    00000000    ....    DCD    0
    .constdata
    __func__
        0x0020c0c8:    615f6371    qc_a    DCD    1633641329
        0x0020c0cc:    6d5f7070    pp_m    DCD    1834971248
        0x0020c0d0:    5f6e6961    ain_    DCD    1601071457
        0x0020c0d4:    6b736174    task    DCD    1802723700
        0x0020c0d8:    00          .       DCB    0
    .constdata
    uc_hextab
        0x0020c0d9:    303132      012     DCB    48,49,50
        0x0020c0dc:    36353433    3456    DCD    909456435
        0x0020c0e0:    41393837    789A    DCD    1094268983
        0x0020c0e4:    45444342    BCDE    DCD    1162101570
        0x0020c0e8:    58304046    F@0X    DCD    1479557190
        0x0020c0ec:    00          .       DCB    0
    lc_hextab
        0x0020c0ed:    303132      012     DCB    48,49,50
        0x0020c0f0:    36353433    3456    DCD    909456435
        0x0020c0f4:    61393837    789a    DCD    1631139895
        0x0020c0f8:    65646362    bcde    DCD    1701077858
        0x0020c0fc:    78304066    f@0x    DCD    2016428134
        0x0020c100:    00000000    ....    DCD    0
    .conststring
        0x0020c104:    72617453    Star    DCD    1918989395
        0x0020c108:    63732074    t sc    DCD    1668489332
        0x0020c10c:    0a0d6e61    an..    DCD    168652385
        0x0020c110:    20202020            DCD    538976288
        0x0020c114:    20202020            DCD    538976288
        0x0020c118:    6c69665b    [fil    DCD    1818846811
        0x0020c11c:    5f726574    ter_    DCD    1601332596
        0x0020c120:    696c6f70    poli    DCD    1768714096
        0x0020c124:    3a5d7963    cy]:    DCD    979204451
        0x0020c128:    282d3020     0-(    DCD    674050080
        0x0020c12c:    29796e61    any)    DCD    695823969
        0x0020c130:    2d31202c    , 1-    DCD    758194220
        0x0020c134:    69687728    (whi    DCD    1768453928
        0x0020c138:    696c6574    teli    DCD    1768711540
        0x0020c13c:    2c297473    st),    DCD    740914291
        0x0020c140:    282d3220     2-(    DCD    674050592
        0x0020c144:    20796e61    any     DCD    544829025
        0x0020c148:    29415052    RPA)    DCD    692146258
        0x0020c14c:    2d33202c    , 3-    DCD    758325292
        0x0020c150:    69687728    (whi    DCD    1768453928
        0x0020c154:    696c6574    teli    DCD    1768711540
        0x0020c158:    52207473    st R    DCD    1377858675
        0x0020c15c:    20294150    PA)     DCD    539574608
        0x0020c160:    20200a0d    ..      DCD    538970637
        0x0020c164:    20202020            DCD    538976288
        0x0020c168:    665b2020      [f    DCD    1717248032
        0x0020c16c:    65746c69    ilte    DCD    1702128745
        0x0020c170:    75645f72    r_du    DCD    1969512306
        0x0020c174:    63696c70    plic    DCD    1667853424
        0x0020c178:    5d657461    ate]    DCD    1566930017
        0x0020c17c:    2d30203a    : 0-    DCD    758128698
        0x0020c180:    73696428    (dis    DCD    1936286760
        0x0020c184:    656c6261    able    DCD    1701601889
        0x0020c188:    31202c29    ), 1    DCD    824192041
        0x0020c18c:    6e65282d    -(en    DCD    1852123181
        0x0020c190:    656c6261    able    DCD    1701601889
        0x0020c194:    0d0a2029    ) ..    DCD    218767401
        0x0020c198:    00000000    ....    DCD    0
        0x0020c19c:    64616552    Read    DCD    1684104530
        0x0020c1a0:    6d697320     sim    DCD    1835627296
        0x0020c1a4:    20656c70    ple     DCD    543517808
        0x0020c1a8:    20656c62    ble     DCD    543517794
        0x0020c1ac:    76726573    serv    DCD    1987208563
        0x0020c1b0:    20656369    ice     DCD    543515497
        0x0020c1b4:    72616863    char    DCD    1918986339
        0x0020c1b8:    65746361    acte    DCD    1702126433
        0x0020c1bc:    74736972    rist    DCD    1953720690
        0x0020c1c0:    61206369    ic a    DCD    1629512553
        0x0020c1c4:    6420646e    nd d    DCD    1679844462
        0x0020c1c8:    72637365    escr    DCD    1919120229
        0x0020c1cc:    6f747069    ipto    DCD    1869901929
        0x0020c1d0:    61762072    r va    DCD    1635131506
        0x0020c1d4:    0d65756c    lue.    DCD    224753004
        0x0020c1d8:    2020200a    .       DCD    538976266
        0x0020c1dc:    20202020            DCD    538976288
        0x0020c1e0:    79745b20     [ty    DCD    2037668640
        0x0020c1e4:    3a5d6570    pe]:    DCD    979199344
        0x0020c1e8:    282d3020     0-(    DCD    674050080
        0x0020c1ec:    64616572    read    DCD    1684104562
        0x0020c1f0:    29317620     v1)    DCD    691107360
        0x0020c1f4:    2d31202c    , 1-    DCD    758194220
        0x0020c1f8:    20337628    (v3     DCD    540243496
        0x0020c1fc:    64636363    cccd    DCD    1684235107
        0x0020c200:    32202c29    ), 2    DCD    840969257
        0x0020c204:    3476282d    -(v4    DCD    880158765
        0x0020c208:    63636320     ccc    DCD    1667457824
        0x0020c20c:    0a0d2964    d)..    DCD    168634724
        0x0020c210:    20202020            DCD    538976288
        0x0020c214:    20202020            DCD    538976288
        0x0020c218:    7461705b    [pat    DCD    1952542811
        0x0020c21c:    6e726574    tern    DCD    1852990836
        0x0020c220:    30203a5d    ]: 0    DCD    807418461
        0x0020c224:    6572282d    -(re    DCD    1701980205
        0x0020c228:    62206461    ad b    DCD    1646290017
        0x0020c22c:    61682079    y ha    DCD    1634214009
        0x0020c230:    656c646e    ndle    DCD    1701602414
        0x0020c234:    31202c29    ), 1    DCD    824192041
        0x0020c238:    6572282d    -(re    DCD    1701980205
        0x0020c23c:    62206461    ad b    DCD    1646290017
        0x0020c240:    75752079    y uu    DCD    1970610297
        0x0020c244:    0d296469    id).    DCD    220816489
        0x0020c248:    2020200a    .       DCD    538976266
        0x0020c24c:    20202020            DCD    538976288
        0x0020c250:    6d617320     sam    DCD    1835103008
        0x0020c254:    3a656c70    ple:    DCD    979725424
        0x0020c258:    6d697320     sim    DCD    1835627296
        0x0020c25c:    61657270    prea    DCD    1634038384
        0x0020c260:    20302064    d 0     DCD    540024932
        0x0020c264:    20302031    1 0     DCD    540024881
        0x0020c268:    00000d0a    ....    DCD    3338
        0x0020c26c:    6e6e6f43    Conn    DCD    1852731203
        0x0020c270:    20746365    ect     DCD    544498533
        0x0020c274:    72206f74    to r    DCD    1914728308
        0x0020c278:    746f6d65    emot    DCD    1953459557
        0x0020c27c:    65642065    e de    DCD    1701060709
        0x0020c280:    65636976    vice    DCD    1701013878
        0x0020c284:    7375203a    : us    DCD    1937055802
        0x0020c288:    64612065    e ad    DCD    1684086885
        0x0020c28c:    73657264    dres    DCD    1936028260
        0x0020c290:    200a0d73    s..     DCD    537529715
        0x0020c294:    20202020            DCD    538976288
        0x0020c298:    5b202020       [    DCD    1528832032
        0x0020c29c:    5d304442    BD0]    DCD    1563444290
        0x0020c2a0:    44425b20     [BD    DCD    1145199392
        0x0020c2a4:    5b205d31    1] [    DCD    1528847665
        0x0020c2a8:    5d324442    BD2]    DCD    1563575362
        0x0020c2ac:    44425b20     [BD    DCD    1145199392
        0x0020c2b0:    5b205d33    3] [    DCD    1528847667
        0x0020c2b4:    5d344442    BD4]    DCD    1563706434
        0x0020c2b8:    44425b20     [BD    DCD    1145199392
        0x0020c2bc:    203a5d35    5]:     DCD    540695861
        0x0020c2c0:    6f6d6572    remo    DCD    1869440370
        0x0020c2c4:    64206574    te d    DCD    1679844724
        0x0020c2c8:    63697665    evic    DCD    1667855973
        0x0020c2cc:    64612065    e ad    DCD    1684086885
        0x0020c2d0:    73657264    dres    DCD    1936028260
        0x0020c2d4:    200a0d73    s..     DCD    537529715
        0x0020c2d8:    20202020            DCD    538976288
        0x0020c2dc:    5b202020       [    DCD    1528832032
        0x0020c2e0:    72646461    addr    DCD    1919181921
        0x0020c2e4:    7079745f    _typ    DCD    1887007839
        0x0020c2e8:    203a5d65    e]:     DCD    540695909
        0x0020c2ec:    70282d30    0-(p    DCD    1881681200
        0x0020c2f0:    696c6275    ubli    DCD    1768710773
        0x0020c2f4:    202c2963    c),     DCD    539765091
        0x0020c2f8:    72282d31    1-(r    DCD    1915235633
        0x0020c2fc:    6f646e61    ando    DCD    1868852833
        0x0020c300:    0a0d296d    m)..    DCD    168634733
        0x0020c304:    20202020            DCD    538976288
        0x0020c308:    20202020            DCD    538976288
        0x0020c30c:    706d6173    samp    DCD    1886216563
        0x0020c310:    203a656c    le:     DCD    540697964
        0x0020c314:    206e6f63    con     DCD    544108387
        0x0020c318:    20313178    x11     DCD    540094840
        0x0020c31c:    20323278    x22     DCD    540160632
        0x0020c320:    20333378    x33     DCD    540226424
        0x0020c324:    20343478    x44     DCD    540292216
        0x0020c328:    20353578    x55     DCD    540358008
        0x0020c32c:    20363678    x66     DCD    540423800
        0x0020c330:    0d0a2030    0 ..    DCD    218767408
        0x0020c334:    00000000    ....    DCD    0
        0x0020c338:    64616552    Read    DCD    1684104530
        0x0020c33c:    74616220     bat    DCD    1952539168
        0x0020c340:    79726574    tery    DCD    2037540212
        0x0020c344:    72657320     ser    DCD    1919251232
        0x0020c348:    65636976    vice    DCD    1701013878
        0x0020c34c:    61686320     cha    DCD    1634231072
        0x0020c350:    74636172    ract    DCD    1952670066
        0x0020c354:    73697265    eris    DCD    1936290405
        0x0020c358:    20636974    tic     DCD    543385972
        0x0020c35c:    20646e61    and     DCD    543452769
        0x0020c360:    63736564    desc    DCD    1668506980
        0x0020c364:    74706972    ript    DCD    1953524082
        0x0020c368:    7620726f    or v    DCD    1981837935
        0x0020c36c:    65756c61    alue    DCD    1702194273
        0x0020c370:    20200a0d    ..      DCD    538970637
        0x0020c374:    20202020            DCD    538976288
        0x0020c378:    745b2020      [t    DCD    1952129056
        0x0020c37c:    5d657079    ype]    DCD    1566929017
        0x0020c380:    2d30203a    : 0-    DCD    758128698
        0x0020c384:    74616228    (bat    DCD    1952539176
        0x0020c388:    79726574    tery    DCD    2037540212
        0x0020c38c:    76656c20     lev    DCD    1986358304
        0x0020c390:    76206c65    el v    DCD    1981836389
        0x0020c394:    65756c61    alue    DCD    1702194273
        0x0020c398:    31202c29    ), 1    DCD    824192041
        0x0020c39c:    6162282d    -(ba    DCD    1633822765
        0x0020c3a0:    72657474    tter    DCD    1919251572
        0x0020c3a4:    63632079    y cc    DCD    1667440761
        0x0020c3a8:    0d296463    cd).    DCD    220816483
        0x0020c3ac:    2020200a    .       DCD    538976266
        0x0020c3b0:    20202020            DCD    538976288
        0x0020c3b4:    6d617320     sam    DCD    1835103008
        0x0020c3b8:    3a656c70    ple:    DCD    979725424
        0x0020c3bc:    73616220     bas    DCD    1935761952
        0x0020c3c0:    64616572    read    DCD    1684104562
        0x0020c3c4:    31203020     0 1    DCD    824193056
        0x0020c3c8:    000d0a20     ...    DCD    854560
        0x0020c3cc:    666e6f43    Conf    DCD    1718513475
        0x0020c3d0:    62206769    ig b    DCD    1646290793
        0x0020c3d4:    65747461    atte    DCD    1702130785
        0x0020c3d8:    73207972    ry s    DCD    1931508082
        0x0020c3dc:    69767265    ervi    DCD    1769370213
        0x0020c3e0:    63206563    ce c    DCD    1663067491
        0x0020c3e4:    6e65696c    lien    DCD    1852139884
        0x0020c3e8:    68632074    t ch    DCD    1751326836
        0x0020c3ec:    63617261    arac    DCD    1667330657
        0x0020c3f0:    69726574    teri    DCD    1769104756
        0x0020c3f4:    63697473    stic    DCD    1667855475
        0x0020c3f8:    6e6f6320     con    DCD    1852793632
        0x0020c3fc:    75676966    figu    DCD    1969711462
        0x0020c400:    69746172    rati    DCD    1769234802
        0x0020c404:    64206e6f    on d    DCD    1679847023
        0x0020c408:    72637365    escr    DCD    1919120229
        0x0020c40c:    6f747069    ipto    DCD    1869901929
        0x0020c410:    61762072    r va    DCD    1635131506
        0x0020c414:    0d65756c    lue.    DCD    224753004
        0x0020c418:    2020200a    .       DCD    538976266
        0x0020c41c:    20202020            DCD    538976288
        0x0020c420:    6f6e5b20     [no    DCD    1869503264
        0x0020c424:    79666974    tify    DCD    2036754804
        0x0020c428:    30203a5d    ]: 0    DCD    807418461
        0x0020c42c:    6964282d    -(di    DCD    1768171565
        0x0020c430:    6c626173    sabl    DCD    1818386803
        0x0020c434:    202c2965    e),     DCD    539765093
        0x0020c438:    65282d31    1-(e    DCD    1697131825
        0x0020c43c:    6c62616e    nabl    DCD    1818386798
        0x0020c440:    0d0a2965    e)..    DCD    218769765
        0x0020c444:    00000000    ....    DCD    0
        0x0020c448:    64616552    Read    DCD    1684104530
        0x0020c44c:    50414720     GAP    DCD    1346455328
        0x0020c450:    72657320     ser    DCD    1919251232
        0x0020c454:    65636976    vice    DCD    1701013878
        0x0020c458:    61686320     cha    DCD    1634231072
        0x0020c45c:    74636172    ract    DCD    1952670066
        0x0020c460:    73697265    eris    DCD    1936290405
        0x0020c464:    20636974    tic     DCD    543385972
        0x0020c468:    756c6176    valu    DCD    1970037110
        0x0020c46c:    200a0d65    e..     DCD    537529701
        0x0020c470:    20202020            DCD    538976288
        0x0020c474:    5b202020       [    DCD    1528832032
        0x0020c478:    65707974    type    DCD    1701869940
        0x0020c47c:    30203a5d    ]: 0    DCD    807418461
        0x0020c480:    6572282d    -(re    DCD    1701980205
        0x0020c484:    64206461    ad d    DCD    1679844449
        0x0020c488:    63697665    evic    DCD    1667855973
        0x0020c48c:    616e2065    e na    DCD    1634607205
        0x0020c490:    2c29656d    me),    DCD    740910445
        0x0020c494:    282d3120     1-(    DCD    674050336
        0x0020c498:    64616572    read    DCD    1684104562
        0x0020c49c:    70706120     app    DCD    1886413088
        0x0020c4a0:    61726165    eara    DCD    1634885989
        0x0020c4a4:    2965636e    nce)    DCD    694510446
        0x0020c4a8:    20200a0d    ..      DCD    538970637
        0x0020c4ac:    20202020            DCD    538976288
        0x0020c4b0:    69732020      si    DCD    1769152544
        0x0020c4b4:    656c706d    mple    DCD    1701605485
        0x0020c4b8:    6167203a    : ga    DCD    1634148410
        0x0020c4bc:    61657270    prea    DCD    1634038384
        0x0020c4c0:    20302064    d 0     DCD    540024932
        0x0020c4c4:    000d0a30    0...    DCD    854576
        0x0020c4c8:    666e6f43    Conf    DCD    1718513475
        0x0020c4cc:    61206769    ig a    DCD    1629513577
        0x0020c4d0:    65687475    uthe    DCD    1701344373
        0x0020c4d4:    6369746e    ntic    DCD    1667855470
        0x0020c4d8:    6f697461    atio    DCD    1869182049
        0x0020c4dc:    6f6d206e    n mo    DCD    1869422702
        0x0020c4e0:    0a0d6564    de..    DCD    168650084
        0x0020c4e4:    20202020            DCD    538976288
        0x0020c4e8:    20202020            DCD    538976288
        0x0020c4ec:    7475615b    [aut    DCD    1953849691
        0x0020c4f0:    6c665f68    h_fl    DCD    1818648424
        0x0020c4f4:    5d736761    ags]    DCD    1567844193
        0x0020c4f8:    7475613a    :aut    DCD    1953849658
        0x0020c4fc:    746e6568    hent    DCD    1953391976
        0x0020c500:    74616369    icat    DCD    1952539497
        0x0020c504:    206e6f69    ion     DCD    544108393
        0x0020c508:    20716572    req     DCD    544302450
        0x0020c50c:    20746962    bit     DCD    544500066
        0x0020c510:    6c656966    fiel    DCD    1818585446
        0x0020c514:    62203a64    d: b    DCD    1646279268
        0x0020c518:    2d307469    it0-    DCD    758150249
        0x0020c51c:    6e6f6228    (bon    DCD    1852793384
        0x0020c520:    676e6964    ding    DCD    1735289188
        0x0020c524:    62202c29    ), b    DCD    1646275625
        0x0020c528:    2d327469    it2-    DCD    758281321
        0x0020c52c:    54494d28    (MIT    DCD    1414090024
        0x0020c530:    202c294d    M),     DCD    539765069
        0x0020c534:    33746962    bit3    DCD    863267170
        0x0020c538:    4353282d    -(SC    DCD    1129523245
        0x0020c53c:    200a0d29    )..     DCD    537529641
        0x0020c540:    20202020            DCD    538976288
        0x0020c544:    5b202020       [    DCD    1528832032
        0x0020c548:    635f6f69    io_c    DCD    1667198825
        0x0020c54c:    3a5d7061    ap]:    DCD    979202145
        0x0020c550:    20746573    set     DCD    544499059
        0x0020c554:    43206f69    io C    DCD    1126199145
        0x0020c558:    62617061    apab    DCD    1650552929
        0x0020c55c:    74696c69    ilit    DCD    1953066089
        0x0020c560:    3a736569    ies:    DCD    980641129
        0x0020c564:    282d3020     0-(    DCD    674050080
        0x0020c568:    70736964    disp    DCD    1886611812
        0x0020c56c:    2079616c    lay     DCD    544825708
        0x0020c570:    796c6e6f    only    DCD    2037149295
        0x0020c574:    31202c29    ), 1    DCD    824192041
        0x0020c578:    6964282d    -(di    DCD    1768171565
        0x0020c57c:    616c7073    spla    DCD    1634496627
        0x0020c580:    65792079    y ye    DCD    1702436985
        0x0020c584:    6f6e2f73    s/no    DCD    1869492083
        0x0020c588:    32202c29    ), 2    DCD    840969257
        0x0020c58c:    656b282d    -(ke    DCD    1701521453
        0x0020c590:    616f6279    yboa    DCD    1634689657
        0x0020c594:    6e206472    rd n    DCD    1847616626
        0x0020c598:    29796c6f    oly)    DCD    695823471
        0x0020c59c:    2d33202c    , 3-    DCD    758325292
        0x0020c5a0:    206f6e28    (no     DCD    544173608
        0x0020c5a4:    2c294f49    IO),    DCD    740904777
        0x0020c5a8:    282d3420     4-(    DCD    674051104
        0x0020c5ac:    6279656b    keyb    DCD    1652122987
        0x0020c5b0:    6472616f    oard    DCD    1685217647
        0x0020c5b4:    73696420     dis    DCD    1936286752
        0x0020c5b8:    79616c70    play    DCD    2036427888
        0x0020c5bc:    200a0d29    )..     DCD    537529641
        0x0020c5c0:    20202020            DCD    538976288
        0x0020c5c4:    5b202020       [    DCD    1528832032
        0x0020c5c8:    5f636573    sec_    DCD    1600349555
        0x0020c5cc:    62616e65    enab    DCD    1650552421
        0x0020c5d0:    3a5d656c    le]:    DCD    979199340
        0x0020c5d4:    72617453    Star    DCD    1918989395
        0x0020c5d8:    6d732074    t sm    DCD    1836261492
        0x0020c5dc:    61702070    p pa    DCD    1634738288
        0x0020c5e0:    6e697269    irin    DCD    1852404329
        0x0020c5e4:    72702067    g pr    DCD    1919950951
        0x0020c5e8:    6465636f    oced    DCD    1684366191
        0x0020c5ec:    20657275    ure     DCD    543519349
        0x0020c5f0:    6e656877    when    DCD    1852139639
        0x0020c5f4:    6e6f6320     con    DCD    1852793632
        0x0020c5f8:    7463656e    nect    DCD    1952671086
        0x0020c5fc:    203a6465    ed:     DCD    540697701
        0x0020c600:    64282d30    0-(d    DCD    1680354608
        0x0020c604:    62617369    isab    DCD    1650553705
        0x0020c608:    2c29656c    le),    DCD    740910444
        0x0020c60c:    282d3120     1-(    DCD    674050336
        0x0020c610:    62616e65    enab    DCD    1650552421
        0x0020c614:    0d29656c    le).    DCD    220816748
        0x0020c618:    2020200a    .       DCD    538976266
        0x0020c61c:    20202020            DCD    538976288
        0x0020c620:    6f6f5b20     [oo    DCD    1869568800
        0x0020c624:    6e655f62    b_en    DCD    1852137314
        0x0020c628:    656c6261    able    DCD    1701601889
        0x0020c62c:    6e453a5d    ]:En    DCD    1850030685
        0x0020c630:    656c6261    able    DCD    1701601889
        0x0020c634:    626f6f20     oob    DCD    1651470112
        0x0020c638:    616c6620     fla    DCD    1634493984
        0x0020c63c:    30203a67    g: 0    DCD    807418471
        0x0020c640:    6964282d    -(di    DCD    1768171565
        0x0020c644:    6c626173    sabl    DCD    1818386803
        0x0020c648:    202c2965    e),     DCD    539765093
        0x0020c64c:    65282d31    1-(e    DCD    1697131825
        0x0020c650:    6c62616e    nabl    DCD    1818386798
        0x0020c654:    0a0d2965    e)..    DCD    168634725
        0x0020c658:    20202020            DCD    538976288
        0x0020c65c:    20202020            DCD    538976288
        0x0020c660:    706d6173    samp    DCD    1886216563
        0x0020c664:    203a656c    le:     DCD    540697964
        0x0020c668:    68747561    auth    DCD    1752462689
        0x0020c66c:    65646f6d    mode    DCD    1701080941
        0x0020c670:    35783020     0x5    DCD    897069088
        0x0020c674:    31203220     2 1    DCD    824193568
        0x0020c678:    0d0a3020     0..    DCD    218771488
        0x0020c67c:    00000000    ....    DCD    0
        0x0020c680:    6e6e6f43    Conn    DCD    1852731203
        0x0020c684:    20746365    ect     DCD    544498533
        0x0020c688:    72206f74    to r    DCD    1914728308
        0x0020c68c:    746f6d65    emot    DCD    1953459557
        0x0020c690:    65642065    e de    DCD    1701060709
        0x0020c694:    65636976    vice    DCD    1701013878
        0x0020c698:    7375203a    : us    DCD    1937055802
        0x0020c69c:    68732065    e sh    DCD    1752375397
        0x0020c6a0:    6564776f    owde    DCD    1701082991
        0x0020c6a4:    6f742076    v to    DCD    1869881462
        0x0020c6a8:    6f687320     sho    DCD    1869116192
        0x0020c6ac:    64692077    w id    DCD    1684611191
        0x0020c6b0:    200a0d78    x..     DCD    537529720
        0x0020c6b4:    20202020            DCD    538976288
        0x0020c6b8:    5b202020       [    DCD    1528832032
        0x0020c6bc:    5d786469    idx]    DCD    1568171113
        0x0020c6c0:    7375203a    : us    DCD    1937055802
        0x0020c6c4:    6d632065    e cm    DCD    1835212901
        0x0020c6c8:    68732064    d sh    DCD    1752375396
        0x0020c6cc:    6564776f    owde    DCD    1701082991
        0x0020c6d0:    6f742076    v to    DCD    1869881462
        0x0020c6d4:    6f687320     sho    DCD    1869116192
        0x0020c6d8:    64692077    w id    DCD    1684611191
        0x0020c6dc:    65622078    x be    DCD    1700929656
        0x0020c6e0:    65726f66    fore    DCD    1701998438
        0x0020c6e4:    65737520     use    DCD    1702065440
        0x0020c6e8:    69687420     thi    DCD    1768453152
        0x0020c6ec:    6d632073    s cm    DCD    1835212915
        0x0020c6f0:    200a0d64    d..     DCD    537529700
        0x0020c6f4:    20202020            DCD    538976288
        0x0020c6f8:    73202020       s    DCD    1931485216
        0x0020c6fc:    6c706d61    ampl    DCD    1819307361
        0x0020c700:    63203a65    e: c    DCD    1663056485
        0x0020c704:    65646e6f    onde    DCD    1701080687
        0x0020c708:    0a302076    v 0.    DCD    170926198
        0x0020c70c:    0000000d    ....    DCD    13
        0x0020c710:    6320454c    LE c    DCD    1663059276
        0x0020c714:    656e6e6f    onne    DCD    1701736047
        0x0020c718:    6f697463    ctio    DCD    1869182051
        0x0020c71c:    6170206e    n pa    DCD    1634738286
        0x0020c720:    206d6172    ram     DCD    544039282
        0x0020c724:    61647075    upda    DCD    1633972341
        0x0020c728:    72206574    te r    DCD    1914725748
        0x0020c72c:    65757165    eque    DCD    1702195557
        0x0020c730:    0a0d7473    st..    DCD    168653939
        0x0020c734:    20202020            DCD    538976288
        0x0020c738:    20202020            DCD    538976288
        0x0020c73c:    706d6173    samp    DCD    1886216563
        0x0020c740:    203a656c    le:     DCD    540697964
        0x0020c744:    756e6f63    conu    DCD    1970171747
        0x0020c748:    65726470    pdre    DCD    1701995632
        0x0020c74c:    20302071    q 0     DCD    540024945
        0x0020c750:    30337830    0x30    DCD    808679472
        0x0020c754:    34783020     0x4    DCD    880291872
        0x0020c758:    20302030    0 0     DCD    540024880
        0x0020c75c:    0a303035    500.    DCD    170930229
        0x0020c760:    0000000d    ....    DCD    13
        0x0020c764:    74697257    Writ    DCD    1953067607
        0x0020c768:    69732065    e si    DCD    1769152613
        0x0020c76c:    656c706d    mple    DCD    1701605485
        0x0020c770:    656c6220     ble    DCD    1701601824
        0x0020c774:    72657320     ser    DCD    1919251232
        0x0020c778:    65636976    vice    DCD    1701013878
        0x0020c77c:    20325620     V2     DCD    540169760
        0x0020c780:    72616863    char    DCD    1918986339
        0x0020c784:    65746361    acte    DCD    1702126433
        0x0020c788:    74736972    rist    DCD    1953720690
        0x0020c78c:    76206369    ic v    DCD    1981834089
        0x0020c790:    65756c61    alue    DCD    1702194273
        0x0020c794:    20200a0d    ..      DCD    538970637
        0x0020c798:    20202020            DCD    538976288
        0x0020c79c:    745b2020      [t    DCD    1952129056
        0x0020c7a0:    5d657079    ype]    DCD    1566929017
        0x0020c7a4:    2d31203a    : 1-    DCD    758194234
        0x0020c7a8:    69727728    (wri    DCD    1769109288
        0x0020c7ac:    72206574    te r    DCD    1914725748
        0x0020c7b0:    65757165    eque    DCD    1702195557
        0x0020c7b4:    2c297473    st),    DCD    740914291
        0x0020c7b8:    282d3220     2-(    DCD    674050592
        0x0020c7bc:    74697277    writ    DCD    1953067639
        0x0020c7c0:    6f632065    e co    DCD    1868767333
        0x0020c7c4:    6e616d6d    mman    DCD    1851878765
        0x0020c7c8:    0d202964    d) .    DCD    220211556
        0x0020c7cc:    2020200a    .       DCD    538976266
        0x0020c7d0:    20202020            DCD    538976288
        0x0020c7d4:    656c5b20     [le    DCD    1701600032
        0x0020c7d8:    203a5d6e    n]:     DCD    540695918
        0x0020c7dc:    65707974    type    DCD    1701869940
        0x0020c7e0:    6c20313d    =1 l    DCD    1814049085
        0x0020c7e4:    72206e65    en r    DCD    1914728037
        0x0020c7e8:    65676e61    ange    DCD    1701277281
        0x0020c7ec:    322d303a    :0-2    DCD    841822266
        0x0020c7f0:    202c3037    70,     DCD    539766839
        0x0020c7f4:    65707974    type    DCD    1701869940
        0x0020c7f8:    6c20323d    =2 l    DCD    1814049341
        0x0020c7fc:    72206e65    en r    DCD    1914728037
        0x0020c800:    65676e61    ange    DCD    1701277281
        0x0020c804:    2d30203a    : 0-    DCD    758128698
        0x0020c808:    75746d28    (mtu    DCD    1970564392
        0x0020c80c:    0d29332d    -3).    DCD    220803885
        0x0020c810:    2020200a    .       DCD    538976266
        0x0020c814:    20202020            DCD    538976288
        0x0020c818:    6d617320     sam    DCD    1835103008
        0x0020c81c:    3a656c70    ple:    DCD    979725424
        0x0020c820:    6d697320     sim    DCD    1835627296
        0x0020c824:    69727770    pwri    DCD    1769109360
        0x0020c828:    32766574    tev2    DCD    846620020
        0x0020c82c:    31203020     0 1    DCD    824193056
        0x0020c830:    0a303120     10.    DCD    170930464
        0x0020c834:    0000000d    ....    DCD    13
        0x0020c838:    646e6553    Send    DCD    1684956499
        0x0020c83c:    65737520     use    DCD    1702065440
        0x0020c840:    6f632072    r co    DCD    1868767346
        0x0020c844:    7269666e    nfir    DCD    1919510126
        0x0020c848:    6974616d    mati    DCD    1769234797
        0x0020c84c:    77206e6f    on w    DCD    1998614127
        0x0020c850:    206e6568    hen     DCD    544105832
        0x0020c854:    776f6873    show    DCD    2003789939
        0x0020c858:    50414720     GAP    DCD    1346455328
        0x0020c85c:    47534d5f    _MSG    DCD    1196641631
        0x0020c860:    5f454c5f    _LE_    DCD    1598377055
        0x0020c864:    444e4f42    BOND    DCD    1145982786
        0x0020c868:    4553555f    _USE    DCD    1163089247
        0x0020c86c:    4f435f52    R_CO    DCD    1329815378
        0x0020c870:    5249464e    NFIR    DCD    1380533838
        0x0020c874:    4954414d    MATI    DCD    1230258509
        0x0020c878:    0a0d4e4f    ON..    DCD    168644175
        0x0020c87c:    20202020            DCD    538976288
        0x0020c880:    20202020            DCD    538976288
        0x0020c884:    6e6f635b    [con    DCD    1852793691
        0x0020c888:    203a5d66    f]:     DCD    540695910
        0x0020c88c:    52282d30    0-(R    DCD    1378364720
        0x0020c890:    63656a65    ejec    DCD    1667590757
        0x0020c894:    202c2974    t),     DCD    539765108
        0x0020c898:    41282d31    1-(A    DCD    1093152049
        0x0020c89c:    70656363    ccep    DCD    1885692771
        0x0020c8a0:    0a0d2974    t)..    DCD    168634740
        0x0020c8a4:    20202020            DCD    538976288
        0x0020c8a8:    20202020            DCD    538976288
        0x0020c8ac:    706d6173    samp    DCD    1886216563
        0x0020c8b0:    203a656c    le:     DCD    540697964
        0x0020c8b4:    72657375    user    DCD    1919251317
        0x0020c8b8:    666e6f63    conf    DCD    1718513507
        0x0020c8bc:    31203020     0 1    DCD    824193056
        0x0020c8c0:    00000d0a    ....    DCD    3338
        0x0020c8c4:    666e6f43    Conf    DCD    1718513475
        0x0020c8c8:    73206769    ig s    DCD    1931503465
        0x0020c8cc:    6c706d69    impl    DCD    1819307369
        0x0020c8d0:    6c622065    e bl    DCD    1818370149
        0x0020c8d4:    65732065    e se    DCD    1702043749
        0x0020c8d8:    63697672    rvic    DCD    1667855986
        0x0020c8dc:    6c632065    e cl    DCD    1818435685
        0x0020c8e0:    746e6569    ient    DCD    1953391977
        0x0020c8e4:    61686320     cha    DCD    1634231072
        0x0020c8e8:    74636172    ract    DCD    1952670066
        0x0020c8ec:    73697265    eris    DCD    1936290405
        0x0020c8f0:    20636974    tic     DCD    543385972
        0x0020c8f4:    666e6f63    conf    DCD    1718513507
        0x0020c8f8:    72756769    igur    DCD    1920296809
        0x0020c8fc:    6f697461    atio    DCD    1869182049
        0x0020c900:    6564206e    n de    DCD    1701060718
        0x0020c904:    69726373    scri    DCD    1769104243
        0x0020c908:    726f7470    ptor    DCD    1919906928
        0x0020c90c:    6c617620     val    DCD    1818326560
        0x0020c910:    0a0d6575    ue..    DCD    168650101
        0x0020c914:    20202020            DCD    538976288
        0x0020c918:    20202020            DCD    538976288
        0x0020c91c:    7079745b    [typ    DCD    1887007835
        0x0020c920:    203a5d65    e]:     DCD    540695909
        0x0020c924:    76282d30    0-(v    DCD    1982344496
        0x0020c928:    6f6e2033    3 no    DCD    1869488179
        0x0020c92c:    79666974    tify    DCD    2036754804
        0x0020c930:    31202c29    ), 1    DCD    824192041
        0x0020c934:    3476282d    -(v4    DCD    880158765
        0x0020c938:    646e6920     ind    DCD    1684957472
        0x0020c93c:    74616369    icat    DCD    1952539497
        0x0020c940:    296e6f69    ion)    DCD    695103337
        0x0020c944:    20200a0d    ..      DCD    538970637
        0x0020c948:    20202020            DCD    538976288
        0x0020c94c:    655b2020      [e    DCD    1700470816
        0x0020c950:    6c62616e    nabl    DCD    1818386798
        0x0020c954:    203a5d65    e]:     DCD    540695909
        0x0020c958:    64282d30    0-(d    DCD    1680354608
        0x0020c95c:    62617369    isab    DCD    1650553705
        0x0020c960:    2c29656c    le),    DCD    740910444
        0x0020c964:    282d3120     1-(    DCD    674050336
        0x0020c968:    62616e65    enab    DCD    1650552421
        0x0020c96c:    2029656c    le)     DCD    539583852
        0x0020c970:    20200a0d    ..      DCD    538970637
        0x0020c974:    20202020            DCD    538976288
        0x0020c978:    61732020      sa    DCD    1634934816
        0x0020c97c:    656c706d    mple    DCD    1701605485
        0x0020c980:    6973203a    : si    DCD    1769152570
        0x0020c984:    6363706d    mpcc    DCD    1667461229
        0x0020c988:    30206463    cd 0    DCD    807429219
        0x0020c98c:    31203120     1 1    DCD    824193312
        0x0020c990:    00000d0a    ....    DCD    3338
        0x0020c994:    75706e49    Inpu    DCD    1970302537
        0x0020c998:    61702074    t pa    DCD    1634738292
        0x0020c99c:    656b7373    sske    DCD    1701540723
        0x0020c9a0:    68772079    y wh    DCD    1752637561
        0x0020c9a4:    73206e65    en s    DCD    1931505253
        0x0020c9a8:    20776f68    how     DCD    544698216
        0x0020c9ac:    5f504147    GAP_    DCD    1599095111
        0x0020c9b0:    5f47534d    MSG_    DCD    1598509901
        0x0020c9b4:    425f454c    LE_B    DCD    1113539916
        0x0020c9b8:    5f444e4f    OND_    DCD    1598312015
        0x0020c9bc:    53534150    PASS    DCD    1397965136
        0x0020c9c0:    5f59454b    KEY_    DCD    1599685963
        0x0020c9c4:    55504e49    INPU    DCD    1431326281
        0x0020c9c8:    200a0d54    T..     DCD    537529684
        0x0020c9cc:    20202020            DCD    538976288
        0x0020c9d0:    5b202020       [    DCD    1528832032
        0x0020c9d4:    73736170    pass    DCD    1936941424
        0x0020c9d8:    5d79656b    key]    DCD    1568236907
        0x0020c9dc:    2030203a    : 0     DCD    540024890
        0x0020c9e0:    3939202d    - 99    DCD    960045101
        0x0020c9e4:    39393939    9999    DCD    960051513
        0x0020c9e8:    20200a0d    ..      DCD    538970637
        0x0020c9ec:    20202020            DCD    538976288
        0x0020c9f0:    61732020      sa    DCD    1634934816
        0x0020c9f4:    656c706d    mple    DCD    1701605485
        0x0020c9f8:    7561203a    : au    DCD    1969299514
        0x0020c9fc:    656b6874    thke    DCD    1701537908
        0x0020ca00:    20302079    y 0     DCD    540024953
        0x0020ca04:    34333231    1234    DCD    875770417
        0x0020ca08:    0d0a3635    56..    DCD    218773045
        0x0020ca0c:    00000000    ....    DCD    0
        0x0020ca10:    63736964    disc    DCD    1668508004
        0x0020ca14:    6f635b20     [co    DCD    1868782368
        0x0020ca18:    695f6e6e    nn_i    DCD    1767861870
        0x0020ca1c:    0d0a5d64    d]..    DCD    218783076
        0x0020ca20:    00000000    ....    DCD    0
        0x0020ca24:    74756173    saut    DCD    1953849715
        0x0020ca28:    635b2068    h [c    DCD    1666916456
        0x0020ca2c:    5f6e6e6f    onn_    DCD    1601072751
        0x0020ca30:    0a5d6469    id].    DCD    173892713
        0x0020ca34:    0000000d    ....    DCD    13
        0x0020ca38:    68706167    gaph    DCD    1752195431
        0x0020ca3c:    5b206c64    dl [    DCD    1528851556
        0x0020ca40:    6e6e6f63    conn    DCD    1852731235
        0x0020ca44:    5d64695f    _id]    DCD    1566861663
        0x0020ca48:    00000d0a    ....    DCD    3338
        0x0020ca4c:    706d6973    simp    DCD    1886218611
        0x0020ca50:    206c6468    hdl     DCD    543974504
        0x0020ca54:    6e6f635b    [con    DCD    1852793691
        0x0020ca58:    64695f6e    n_id    DCD    1684627310
        0x0020ca5c:    000d0a5d    ]...    DCD    854621
        0x0020ca60:    68736162    bash    DCD    1752392034
        0x0020ca64:    5b206c64    dl [    DCD    1528851556
        0x0020ca68:    6e6e6f63    conn    DCD    1852731235
        0x0020ca6c:    5d64695f    _id]    DCD    1566861663
        0x0020ca70:    00000d0a    ....    DCD    3338
        0x0020ca74:    646e6f62    bond    DCD    1684959074
        0x0020ca78:    206c6564    del     DCD    543974756
        0x0020ca7c:    6e6f635b    [con    DCD    1852793691
        0x0020ca80:    64695f6e    n_id    DCD    1684627310
        0x0020ca84:    000d0a5d    ]...    DCD    854621
        0x0020ca88:    706d6973    simp    DCD    1886218611
        0x0020ca8c:    64636363    cccd    DCD    1684235107
        0x0020ca90:    6f635b20     [co    DCD    1868782368
        0x0020ca94:    695f6e6e    nn_i    DCD    1767861870
        0x0020ca98:    5b205d64    d] [    DCD    1528847716
        0x0020ca9c:    65707974    type    DCD    1701869940
        0x0020caa0:    655b205d    ] [e    DCD    1700470877
        0x0020caa4:    6c62616e    nabl    DCD    1818386798
        0x0020caa8:    0d0a5d65    e]..    DCD    218783077
        0x0020caac:    00000000    ....    DCD    0
        0x0020cab0:    68747561    auth    DCD    1752462689
        0x0020cab4:    65646f6d    mode    DCD    1701080941
        0x0020cab8:    75615b20     [au    DCD    1969314592
        0x0020cabc:    665f6874    th_f    DCD    1717528692
        0x0020cac0:    7367616c    lags    DCD    1936154988
        0x0020cac4:    695b205d    ] [i    DCD    1767579741
        0x0020cac8:    61635f6f    o_ca    DCD    1633902447
        0x0020cacc:    5b205d70    p] [    DCD    1528847728
        0x0020cad0:    5f636573    sec_    DCD    1600349555
        0x0020cad4:    62616e65    enab    DCD    1650552421
        0x0020cad8:    205d656c    le]     DCD    542991724
        0x0020cadc:    626f6f5b    [oob    DCD    1651470171
        0x0020cae0:    616e655f    _ena    DCD    1634624863
        0x0020cae4:    5d656c62    ble]    DCD    1566927970
        0x0020cae8:    00000d0a    ....    DCD    3338
        0x0020caec:    72706167    gapr    DCD    1919967591
        0x0020caf0:    20646165    ead     DCD    543449445
        0x0020caf4:    6e6f635b    [con    DCD    1852793691
        0x0020caf8:    64695f6e    n_id    DCD    1684627310
        0x0020cafc:    745b205d    ] [t    DCD    1952129117
        0x0020cb00:    5d657079    ype]    DCD    1566929017
        0x0020cb04:    00000d0a    ....    DCD    3338
        0x0020cb08:    72736162    basr    DCD    1920164194
        0x0020cb0c:    20646165    ead     DCD    543449445
        0x0020cb10:    6e6f635b    [con    DCD    1852793691
        0x0020cb14:    64695f6e    n_id    DCD    1684627310
        0x0020cb18:    745b205d    ] [t    DCD    1952129117
        0x0020cb1c:    5d657079    ype]    DCD    1566929017
        0x0020cb20:    00000d0a    ....    DCD    3338
        0x0020cb24:    206e6f63    con     DCD    544108387
        0x0020cb28:    3044425b    [BD0    DCD    809779803
        0x0020cb2c:    425b205d    ] [B    DCD    1113268317
        0x0020cb30:    205d3144    D1]     DCD    542978372
        0x0020cb34:    3244425b    [BD2    DCD    843334235
        0x0020cb38:    425b205d    ] [B    DCD    1113268317
        0x0020cb3c:    205d3344    D3]     DCD    542978884
        0x0020cb40:    3444425b    [BD4    DCD    876888667
        0x0020cb44:    425b205d    ] [B    DCD    1113268317
        0x0020cb48:    205d3544    D5]     DCD    542979396
        0x0020cb4c:    6464615b    [add    DCD    1684300123
        0x0020cb50:    79745f72    r_ty    DCD    2037669746
        0x0020cb54:    0a5d6570    pe].    DCD    173892976
        0x0020cb58:    0000000d    ....    DCD    13
        0x0020cb5c:    6e616373    scan    DCD    1851876211
        0x0020cb60:    69665b20     [fi    DCD    1768315680
        0x0020cb64:    7265746c    lter    DCD    1919251564
        0x0020cb68:    6c6f705f    _pol    DCD    1819242591
        0x0020cb6c:    5d796369    icy]    DCD    1568236393
        0x0020cb70:    69665b20     [fi    DCD    1768315680
        0x0020cb74:    7265746c    lter    DCD    1919251564
        0x0020cb78:    7075645f    _dup    DCD    1886741599
        0x0020cb7c:    6163696c    lica    DCD    1633905004
        0x0020cb80:    0a5d6574    te].    DCD    173892980
        0x0020cb84:    0000000d    ....    DCD    13
        0x0020cb88:    72657375    user    DCD    1919251317
        0x0020cb8c:    666e6f63    conf    DCD    1718513507
        0x0020cb90:    6f635b20     [co    DCD    1868782368
        0x0020cb94:    695f6e6e    nn_i    DCD    1767861870
        0x0020cb98:    5b205d64    d] [    DCD    1528847716
        0x0020cb9c:    666e6f63    conf    DCD    1718513507
        0x0020cba0:    000d0a5d    ]...    DCD    854621
        0x0020cba4:    706d6973    simp    DCD    1886218611
        0x0020cba8:    74697277    writ    DCD    1953067639
        0x0020cbac:    20327665    ev2     DCD    540178021
        0x0020cbb0:    6e6f635b    [con    DCD    1852793691
        0x0020cbb4:    64695f6e    n_id    DCD    1684627310
        0x0020cbb8:    745b205d    ] [t    DCD    1952129117
        0x0020cbbc:    5d657079    ype]    DCD    1566929017
        0x0020cbc0:    656c5b20     [le    DCD    1701600032
        0x0020cbc4:    0d0a5d6e    n]..    DCD    218783086
        0x0020cbc8:    00000000    ....    DCD    0
        0x0020cbcc:    706d6973    simp    DCD    1886218611
        0x0020cbd0:    64616572    read    DCD    1684104562
        0x0020cbd4:    6f635b20     [co    DCD    1868782368
        0x0020cbd8:    695f6e6e    nn_i    DCD    1767861870
        0x0020cbdc:    5b205d64    d] [    DCD    1528847716
        0x0020cbe0:    65707974    type    DCD    1701869940
        0x0020cbe4:    705b205d    ] [p    DCD    1885020253
        0x0020cbe8:    65747461    atte    DCD    1702130785
        0x0020cbec:    0a5d6e72    rn].    DCD    173895282
        0x0020cbf0:    0000000d    ....    DCD    13
        0x0020cbf4:    756e6f63    conu    DCD    1970171747
        0x0020cbf8:    65726470    pdre    DCD    1701995632
        0x0020cbfc:    635b2071    q [c    DCD    1666916465
        0x0020cc00:    5f6e6e6f    onn_    DCD    1601072751
        0x0020cc04:    205d6469    id]     DCD    542991465
        0x0020cc08:    746e695b    [int    DCD    1953392987
        0x0020cc0c:    61767265    erva    DCD    1635152485
        0x0020cc10:    696d5f6c    l_mi    DCD    1768775532
        0x0020cc14:    5b205d6e    n] [    DCD    1528847726
        0x0020cc18:    65746e69    inte    DCD    1702129257
        0x0020cc1c:    6c617672    rval    DCD    1818326642
        0x0020cc20:    78616d5f    _max    DCD    2019650911
        0x0020cc24:    6c5b205d    ] [l    DCD    1817911389
        0x0020cc28:    6e657461    aten    DCD    1852142689
        0x0020cc2c:    205d7963    cy]     DCD    542996835
        0x0020cc30:    7075735b    [sup    DCD    1886745435
        0x0020cc34:    69767265    ervi    DCD    1769370213
        0x0020cc38:    6e6f6973    sion    DCD    1852795251
        0x0020cc3c:    6d69745f    _tim    DCD    1835627615
        0x0020cc40:    74756f65    eout    DCD    1953853285
        0x0020cc44:    000d0a5d    ]...    DCD    854621
        0x0020cc48:    646e6f63    cond    DCD    1684959075
        0x0020cc4c:    5b207665    ev [    DCD    1528854117
        0x0020cc50:    5d786469    idx]    DCD    1568171113
        0x0020cc54:    00000d0a    ....    DCD    3338
        0x0020cc58:    68747561    auth    DCD    1752462689
        0x0020cc5c:    2079656b    key     DCD    544826731
        0x0020cc60:    6e6f635b    [con    DCD    1852793691
        0x0020cc64:    64695f6e    n_id    DCD    1684627310
        0x0020cc68:    705b205d    ] [p    DCD    1885020253
        0x0020cc6c:    6b737361    assk    DCD    1802728289
        0x0020cc70:    0a5d7965    ey].    DCD    173898085
        0x0020cc74:    0000000d    ....    DCD    13
        0x0020cc78:    63736162    basc    DCD    1668505954
        0x0020cc7c:    20646363    ccd     DCD    543449955
        0x0020cc80:    6e6f635b    [con    DCD    1852793691
        0x0020cc84:    64695f6e    n_id    DCD    1684627310
        0x0020cc88:    6e5b205d    ] [n    DCD    1851465821
        0x0020cc8c:    6669746f    otif    DCD    1718187119
        0x0020cc90:    0d0a5d79    y]..    DCD    218783097
        0x0020cc94:    00000000    ....    DCD    0
        0x0020cc98:    61656c43    Clea    DCD    1634036803
        0x0020cc9c:    6f622072    r bo    DCD    1868701810
        0x0020cca0:    6465646e    nded    DCD    1684366446
        0x0020cca4:    76656420     dev    DCD    1986356256
        0x0020cca8:    73656369    ices    DCD    1936024425
        0x0020ccac:    666e6920     inf    DCD    1718511904
        0x0020ccb0:    616d726f    orma    DCD    1634562671
        0x0020ccb4:    6e6f6974    tion    DCD    1852795252
        0x0020ccb8:    20796220     by     DCD    544825888
        0x0020ccbc:    6e6e6f63    conn    DCD    1852731235
        0x0020ccc0:    20746365    ect     DCD    544498533
        0x0020ccc4:    0d0a6469    id..    DCD    218784873
        0x0020ccc8:    00000000    ....    DCD    0
        0x0020cccc:    63736944    Disc    DCD    1668507972
        0x0020ccd0:    656e6e6f    onne    DCD    1701736047
        0x0020ccd4:    74207463    ct t    DCD    1948284003
        0x0020ccd8:    6572206f    o re    DCD    1701978223
        0x0020ccdc:    65746f6d    mote    DCD    1702129517
        0x0020cce0:    76656420     dev    DCD    1986356256
        0x0020cce4:    0a656369    ice.    DCD    174416745
        0x0020cce8:    0000000d    ....    DCD    13
        0x0020ccec:    776f6853    Show    DCD    2003789907
        0x0020ccf0:    61637320     sca    DCD    1633907488
        0x0020ccf4:    6564206e    n de    DCD    1701060718
        0x0020ccf8:    696c2076    v li    DCD    1768693878
        0x0020ccfc:    203a7473    st:     DCD    540701811
        0x0020cd00:    746c6966    filt    DCD    1953261926
        0x0020cd04:    73207265    er s    DCD    1931506277
        0x0020cd08:    6c706d69    impl    DCD    1819307369
        0x0020cd0c:    6c622065    e bl    DCD    1818370149
        0x0020cd10:    65732065    e se    DCD    1702043749
        0x0020cd14:    63697672    rvic    DCD    1667855986
        0x0020cd18:    000d0a65    e...    DCD    854629
        0x0020cd1c:    7473694c    List    DCD    1953720652
        0x0020cd20:    50414720     GAP    DCD    1346455328
        0x0020cd24:    72657320     ser    DCD    1919251232
        0x0020cd28:    65636976    vice    DCD    1701013878
        0x0020cd2c:    6e616820     han    DCD    1851877408
        0x0020cd30:    20656c64    dle     DCD    543517796
        0x0020cd34:    68636163    cach    DCD    1751343459
        0x0020cd38:    000d0a65    e...    DCD    854629
        0x0020cd3c:    7473694c    List    DCD    1953720652
        0x0020cd40:    6d697320     sim    DCD    1835627296
        0x0020cd44:    20656c70    ple     DCD    543517808
        0x0020cd48:    20656c62    ble     DCD    543517794
        0x0020cd4c:    76726573    serv    DCD    1987208563
        0x0020cd50:    20656369    ice     DCD    543515497
        0x0020cd54:    646e6168    hand    DCD    1684955496
        0x0020cd58:    6320656c    le c    DCD    1663067500
        0x0020cd5c:    65686361    ache    DCD    1701340001
        0x0020cd60:    00000d0a    ....    DCD    3338
        0x0020cd64:    7473694c    List    DCD    1953720652
        0x0020cd68:    74616220     bat    DCD    1952539168
        0x0020cd6c:    79726574    tery    DCD    2037540212
        0x0020cd70:    72657320     ser    DCD    1919251232
        0x0020cd74:    65636976    vice    DCD    1701013878
        0x0020cd78:    6e616820     han    DCD    1851877408
        0x0020cd7c:    20656c64    dle     DCD    543517796
        0x0020cd80:    68636163    cach    DCD    1751343459
        0x0020cd84:    000d0a65    e...    DCD    854629
        0x0020cd88:    706f7453    Stop    DCD    1886352467
        0x0020cd8c:    61637320     sca    DCD    1633907488
        0x0020cd90:    000d0a6e    n...    DCD    854638
        0x0020cd94:    706f7473    stop    DCD    1886352499
        0x0020cd98:    6e616373    scan    DCD    1851876211
        0x0020cd9c:    00000d0a    ....    DCD    3338
        0x0020cda0:    776f6873    show    DCD    2003789939
        0x0020cda4:    0a6e6f63    con.    DCD    175009635
        0x0020cda8:    0000000d    ....    DCD    13
        0x0020cdac:    20746547    Get     DCD    544499015
        0x0020cdb0:    206c6c61    all     DCD    543976545
        0x0020cdb4:    646e6f42    Bond    DCD    1684959042
        0x0020cdb8:    64206465    ed d    DCD    1679844453
        0x0020cdbc:    63697665    evic    DCD    1667855973
        0x0020cdc0:    69207365    es i    DCD    1763734373
        0x0020cdc4:    726f666e    nfor    DCD    1919903342
        0x0020cdc8:    6974616d    mati    DCD    1769234797
        0x0020cdcc:    0d0a6e6f    on..    DCD    218787439
        0x0020cdd0:    00000000    ....    DCD    0
        0x0020cdd4:    61656c43    Clea    DCD    1634036803
        0x0020cdd8:    6c612072    r al    DCD    1818304626
        0x0020cddc:    6f62206c    l bo    DCD    1868701804
        0x0020cde0:    6465646e    nded    DCD    1684366446
        0x0020cde4:    76656420     dev    DCD    1986356256
        0x0020cde8:    73656369    ices    DCD    1936024425
        0x0020cdec:    666e6920     inf    DCD    1718511904
        0x0020cdf0:    616d726f    orma    DCD    1634562671
        0x0020cdf4:    6e6f6974    tion    DCD    1852795252
        0x0020cdf8:    00000d0a    ....    DCD    3338
        0x0020cdfc:    646e6f62    bond    DCD    1684959074
        0x0020ce00:    6f666e69    info    DCD    1868983913
        0x0020ce04:    00000d0a    ....    DCD    3338
        0x0020ce08:    646e6f62    bond    DCD    1684959074
        0x0020ce0c:    61656c63    clea    DCD    1634036835
        0x0020ce10:    000d0a72    r...    DCD    854642
        0x0020ce14:    776f6853    Show    DCD    2003789907
        0x0020ce18:    6c6c6120     all    DCD    1819042080
        0x0020ce1c:    76656420     dev    DCD    1986356256
        0x0020ce20:    73656369    ices    DCD    1936024425
        0x0020ce24:    6e6f6320     con    DCD    1852793632
        0x0020ce28:    7463656e    nect    DCD    1952671086
        0x0020ce2c:    20676e69    ing     DCD    543649385
        0x0020ce30:    74617473    stat    DCD    1952543859
        0x0020ce34:    0d0a7375    us..    DCD    218788725
        0x0020ce38:    00000000    ....    DCD    0
        0x0020ce3c:    20726f66    for     DCD    544370534
        0x0020ce40:    6f747561    auto    DCD    1869903201
        0x0020ce44:    74736574    test    DCD    1953719668
        0x0020ce48:    72617520     uar    DCD    1918989600
        0x0020ce4c:    6f702074    t po    DCD    1869619316
        0x0020ce50:    74207472    rt t    DCD    1948284018
        0x0020ce54:    0a747365    est.    DCD    175403877
        0x0020ce58:    0000000d    ....    DCD    13
        0x0020ce5c:    74726175    uart    DCD    1953653109
        0x0020ce60:    74736574    test    DCD    1953719668
        0x0020ce64:    00000d0a    ....    DCD    3338
        0x0020ce68:    646e6553    Send    DCD    1684956499
        0x0020ce6c:    74756120     aut    DCD    1953849632
        0x0020ce70:    746e6568    hent    DCD    1953391976
        0x0020ce74:    74616369    icat    DCD    1952539497
        0x0020ce78:    206e6f69    ion     DCD    544108393
        0x0020ce7c:    75716572    requ    DCD    1970365810
        0x0020ce80:    0a747365    est.    DCD    175403877
        0x0020ce84:    0000000d    ....    DCD    13
        0x0020ce88:    776f6873    show    DCD    2003789939
        0x0020ce8c:    0a766564    dev.    DCD    175531364
        0x0020ce90:    0000000d    ....    DCD    13
        0x0020ce94:    706d6973    simp    DCD    1886218611
        0x0020ce98:    74697277    writ    DCD    1953067639
        0x0020ce9c:    00327665    ev2.    DCD    3307109
        0x0020cea0:    63736964    disc    DCD    1668508004
        0x0020cea4:    00000000    ....    DCD    0
        0x0020cea8:    72706167    gapr    DCD    1919967591
        0x0020ceac:    00646165    ead.    DCD    6578533
        0x0020ceb0:    706d6973    simp    DCD    1886218611
        0x0020ceb4:    64616572    read    DCD    1684104562
        0x0020ceb8:    00000000    ....    DCD    0
        0x0020cebc:    72736162    basr    DCD    1920164194
        0x0020cec0:    00646165    ead.    DCD    6578533
        0x0020cec4:    706d6973    simp    DCD    1886218611
        0x0020cec8:    64636363    cccd    DCD    1684235107
        0x0020cecc:    00000000    ....    DCD    0
        0x0020ced0:    63736162    basc    DCD    1668505954
        0x0020ced4:    00646363    ccd.    DCD    6579043
        0x0020ced8:    68747561    auth    DCD    1752462689
        0x0020cedc:    65646f6d    mode    DCD    1701080941
        0x0020cee0:    00000000    ....    DCD    0
        0x0020cee4:    72657375    user    DCD    1919251317
        0x0020cee8:    666e6f63    conf    DCD    1718513507
        0x0020ceec:    00000000    ....    DCD    0
        0x0020cef0:    74756173    saut    DCD    1953849715
        0x0020cef4:    00000068    h...    DCD    104
        0x0020cef8:    68706167    gaph    DCD    1752195431
        0x0020cefc:    00006c64    dl..    DCD    27748
        0x0020cf00:    706d6973    simp    DCD    1886218611
        0x0020cf04:    006c6468    hdl.    DCD    7103592
        0x0020cf08:    68736162    bash    DCD    1752392034
        0x0020cf0c:    00006c64    dl..    DCD    27748
        0x0020cf10:    646e6f62    bond    DCD    1684959074
        0x0020cf14:    006c6564    del.    DCD    7103844
        0x0020cf18:    706f7473    stop    DCD    1886352499
        0x0020cf1c:    6e616373    scan    DCD    1851876211
        0x0020cf20:    00000000    ....    DCD    0
        0x0020cf24:    776f6873    show    DCD    2003789939
        0x0020cf28:    006e6f63    con.    DCD    7237475
        0x0020cf2c:    646e6f62    bond    DCD    1684959074
        0x0020cf30:    6f666e69    info    DCD    1868983913
        0x0020cf34:    00000000    ....    DCD    0
        0x0020cf38:    756e6f63    conu    DCD    1970171747
        0x0020cf3c:    65726470    pdre    DCD    1701995632
        0x0020cf40:    00000071    q...    DCD    113
        0x0020cf44:    646e6f62    bond    DCD    1684959074
        0x0020cf48:    61656c63    clea    DCD    1634036835
        0x0020cf4c:    00000072    r...    DCD    114
        0x0020cf50:    74726175    uart    DCD    1953653109
        0x0020cf54:    74736574    test    DCD    1953719668
        0x0020cf58:    00000000    ....    DCD    0
        0x0020cf5c:    646e6f63    cond    DCD    1684959075
        0x0020cf60:    00007665    ev..    DCD    30309
        0x0020cf64:    776f6873    show    DCD    2003789939
        0x0020cf68:    00766564    dev.    DCD    7759204
        0x0020cf6c:    68747561    auth    DCD    1752462689
        0x0020cf70:    0079656b    key.    DCD    7955819
    .conststring
        0x0020cf74:    5f504147    GAP_    DCD    1599095111
        0x0020cf78:    59544441    ADTY    DCD    1498694721
        0x0020cf7c:    4d5f4550    PE_M    DCD    1298089296
        0x0020cf80:    46554e41    ANUF    DCD    1179995713
        0x0020cf84:    55544341    ACTU    DCD    1431585601
        0x0020cf88:    5f524552    RER_    DCD    1599227218
        0x0020cf8c:    43455053    SPEC    DCD    1128616019
        0x0020cf90:    43494649    IFIC    DCD    1128875593
        0x0020cf94:    6f63203a    : co    DCD    1868767290
        0x0020cf98:    6e61706d    mpan    DCD    1851879533
        0x0020cf9c:    64695f79    y_id    DCD    1684627321
        0x0020cfa0:    25783020     0x%    DCD    628633632
        0x0020cfa4:    6c202c78    x, l    DCD    1814047864
        0x0020cfa8:    25206e65    en %    DCD    622882405
        0x0020cfac:    64202c64    d, d    DCD    1679830116
        0x0020cfb0:    20617461    ata     DCD    543257697
        0x0020cfb4:    0a0d6225    %b..    DCD    168649253
        0x0020cfb8:    00000000    ....    DCD    0
        0x0020cfbc:    5f707061    app_    DCD    1601204321
        0x0020cfc0:    73726170    pars    DCD    1936875888
        0x0020cfc4:    63735f65    e_sc    DCD    1668505445
        0x0020cfc8:    695f6e61    an_i    DCD    1767861857
        0x0020cfcc:    3a6f666e    nfo:    DCD    980379246
        0x0020cfd0:    20444120     AD     DCD    541344032
        0x0020cfd4:    75727453    Stru    DCD    1970435155
        0x0020cfd8:    72757463    ctur    DCD    1920300131
        0x0020cfdc:    6e492065    e In    DCD    1850286181
        0x0020cfe0:    203a6f66    fo:     DCD    540700518
        0x0020cfe4:    74204441    AD t    DCD    1948271681
        0x0020cfe8:    20657079    ype     DCD    543518841
        0x0020cfec:    78257830    0x%x    DCD    2015721520
        0x0020cff0:    4441202c    , AD    DCD    1145118764
        0x0020cff4:    74614420     Dat    DCD    1952531488
        0x0020cff8:    654c2061    a Le    DCD    1699487841
        0x0020cffc:    6874676e    ngth    DCD    1752459118
        0x0020d000:    0d642520     %d.    DCD    224666912
        0x0020d004:    0000000a    ....    DCD    10
    .conststring
        0x0020d008:    6e656353    Scen    DCD    1852138323
        0x0020d00c:    00425f65    e_B.    DCD    4349797
        0x0020d010:    6e656353    Scen    DCD    1852138323
        0x0020d014:    00435f65    e_C.    DCD    4415333
        0x0020d018:    746f6f42    Boot    DCD    1953460034
        0x0020d01c:    65636e4f    Once    DCD    1701015119
        0x0020d020:    00000000    ....    DCD    0

** Section #6 'RAM_DATA_ON' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 116 bytes (alignment 4)
    Address: 0x0020d024

    0x20d024:   74 65 72 01 ff ff ff 00 18 d0 20 00 08 3d 81 00    ter....... ..=..
    0x20d034:   c8 3d 81 00 d8 d3 20 00 98 d4 20 00 98 d4 20 00    .=.... ... ... .
    0x20d044:   c0 00 00 00 00 00 00 00 00 00 00 00 08 d0 20 00    .............. .
    0x20d054:   c8 3d 81 00 c8 3d 81 00 d8 d3 20 00 d8 d3 20 00    .=...=.... ... .
    0x20d064:   d8 d3 20 00 00 00 00 00 00 00 00 00 00 00 00 00    .. .............
    0x20d074:   10 d0 20 00 c8 3d 81 00 c8 3d 81 00 d8 d3 20 00    .. ..=...=.... .
    0x20d084:   d8 d3 20 00 d8 d3 20 00 00 00 00 00 00 00 00 00    .. ... .........
    0x20d094:   00 00 00 00                                        ....


** Section #7 'RAM_DATA_ON' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 832 bytes (alignment 4)
    Address: 0x0020d098


** Section #8 'OVERLAY_A' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 192 bytes (alignment 4)
    Address: 0x0020d3d8

    $t
    .app.overlay_a
    AppUpdateVectorTable
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c
;;;628    static void AppUpdateVectorTable(void)
;;;628    {
        0x0020d3d8:    e92d43f0    -..C    PUSH     {r4-r9,lr}
        0x0020d3dc:    b0bd        ..      SUB      sp,sp,#0xf4
;;;629        extern uint32_t Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;630        extern uint32_t Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;631        extern void Default_Handler(void);
;;;632        const char *SysException[] =
        0x0020d3de:    2240        @"      MOVS     r2,#0x40
        0x0020d3e0:    4926        &I      LDR      r1,[pc,#152] ; [0x20d47c] = 0x20bf70
        0x0020d3e2:    a82d        -.      ADD      r0,sp,#0xb4
        0x0020d3e4:    f64cfde0    L...    BL       __aeabi_memcpy4 ; 0x59fa8
;;;633        {
;;;634            "InitialSP", "Reset", "NMI", "HardFault", "MemManage", "BusFault", "UsageFault", "Rsvd",
;;;635            "Rsvd", "Rsvd", "Rsvd", "SVC", "DebugMon", "Rsvd", "PendSV", "SysTick"
;;;636        };
;;;637        const char *ExtIrq[] =
        0x0020d3e8:    4924        $I      LDR      r1,[pc,#144] ; [0x20d47c] = 0x20bf70
        0x0020d3ea:    22b4        ."      MOVS     r2,#0xb4
        0x0020d3ec:    3140        @1      ADDS     r1,r1,#0x40
        0x0020d3ee:    4668        hF      MOV      r0,sp
        0x0020d3f0:    f64cfdda    L...    BL       __aeabi_memcpy4 ; 0x59fa8
        0x0020d3f4:    4924        $I      LDR      r1,[pc,#144] ; [0x20d488] = 0xe000ed08
;;;638        {
;;;639            "System", "WDG", "BTMAC", "TIM3", "TIM2", "Platform", "I2S0_TX", "I2S0_RX", "Timer4-7",
;;;640            "GPIO4", "GPIO5", "UART1", "UART0", "RTC", "SPI0", "SPI1", "I2C0", "I2C1", "ADC",
;;;641            "Peripheral", "GDMA0 Channel0", "GDMA0 Channel1", "GDMA0 Channel2", "GDMA0 Channel3",
;;;642            "GDMA0 Channel4", "GDMA0 Channel5", "GPIO_Group3", "GPIO_Group2", "IR", "GPIO_Group1",
;;;643            "GPIO_Group0", "UART2", "TIM4", "TIM5", "TIM6", "TIM7", "SPI_Flash", "Qdecode",
;;;644            "Keyscan", "SPI2W", "LPCOMP", "PTA_Mailbox", "SPORT1 TX", "SPORT1 RX", "LCD"
;;;645        };
;;;646    
;;;647        IRQ_Fun *pRamVector    = (IRQ_Fun *)VTOR_RAM_ADDR;
        0x0020d3f6:    f44f1000    O...    MOV      r0,#0x200000
        0x0020d3fa:    4d21        !M      LDR      r5,[pc,#132] ; [0x20d480] = 0x80e77c
        0x0020d3fc:    4f21        !O      LDR      r7,[pc,#132] ; [0x20d484] = 0xf4
        0x0020d3fe:    6809        .h      LDR      r1,[r1,#0]
        0x0020d400:    4606        .F      MOV      r6,r0
;;;648        IRQ_Fun *pAppVector    = (IRQ_Fun *)&Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;649        uint32_t AppVectorSize = (uint32_t)&Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;650        uint32_t i             = 0;
        0x0020d402:    2400        .$      MOVS     r4,#0
;;;651    
;;;652        if (SCB->VTOR != VTOR_RAM_ADDR)
        0x0020d404:    42b1        .B      CMP      r1,r6
        0x0020d406:    d001        ..      BEQ      0x20d40c ; AppUpdateVectorTable + 52
;;;653        {
;;;654            RamVectorTableInit(VTOR_RAM_ADDR);
        0x0020d408:    f5f7fc4e    ..N.    BL       RamVectorTableInit ; 0x4ca8
        0x0020d40c:    f04f5805    O..X    MOV      r8,#0x21400000
        0x0020d410:    f8df9078    ..x.    LDR      r9,[pc,#120] ; [0x20d48c] = 0x21100101
;;;655        }
;;;656    
;;;657        /* Update APP defined handlers */
;;;658        for (i = 0; i < AppVectorSize / 4; ++i)
        0x0020d414:    e027        '.      B        0x20d466 ; AppUpdateVectorTable + 142
;;;659        {
;;;660            if (i == 1) //skip reset_handler remap
        0x0020d416:    2c01        .,      CMP      r4,#1
        0x0020d418:    d024        $.      BEQ      0x20d464 ; AppUpdateVectorTable + 140
;;;661            {
;;;662                continue;
;;;663            }
;;;664    
;;;665            if ((pAppVector[i] != Default_Handler) && (pAppVector[i] != 0))
        0x0020d41a:    f8550024    U.$.    LDR      r0,[r5,r4,LSL #2]
        0x0020d41e:    491c        .I      LDR      r1,[pc,#112] ; [0x20d490] = 0x207d45
        0x0020d420:    4288        .B      CMP      r0,r1
        0x0020d422:    d01f        ..      BEQ      0x20d464 ; AppUpdateVectorTable + 140
        0x0020d424:    b1f0        ..      CBZ      r0,0x20d464 ; AppUpdateVectorTable + 140
;;;666            {
;;;667                if (i < System_VECTORn)
        0x0020d426:    2c10        .,      CMP      r4,#0x10
        0x0020d428:    d209        ..      BCS      0x20d43e ; AppUpdateVectorTable + 102
;;;668                {
;;;669                    OS_PRINT_WARN1("Warning! %s is updated by APP!", TRACE_STRING(SysException[i]));
        0x0020d42a:    a82d        -.      ADD      r0,sp,#0xb4
        0x0020d42c:    f8501024    P.$.    LDR      r1,[r0,r4,LSL #2]
        0x0020d430:    4640        @F      MOV      r0,r8
        0x0020d432:    f5fafd1a    ....    BL       trace_string ; 0x7e6a
        0x0020d436:    4603        .F      MOV      r3,r0
        0x0020d438:    2201        ."      MOVS     r2,#1
        0x0020d43a:    4916        .I      LDR      r1,[pc,#88] ; [0x20d494] = 0x880009c
        0x0020d43c:    e00b        ..      B        0x20d456 ; AppUpdateVectorTable + 126
;;;670                }
;;;671                else
;;;672                {
;;;673                    OS_PRINT_WARN1("Warning! ISR %s is updated by APP!",
        0x0020d43e:    4668        hF      MOV      r0,sp
        0x0020d440:    eb000084    ....    ADD      r0,r0,r4,LSL #2
        0x0020d444:    f8501c40    P.@.    LDR      r1,[r0,#-0x40]
        0x0020d448:    4640        @F      MOV      r0,r8
        0x0020d44a:    f5fafd0e    ....    BL       trace_string ; 0x7e6a
        0x0020d44e:    4911        .I      LDR      r1,[pc,#68] ; [0x20d494] = 0x880009c
        0x0020d450:    2201        ."      MOVS     r2,#1
        0x0020d452:    4603        .F      MOV      r3,r0
        0x0020d454:    3124        $1      ADDS     r1,r1,#0x24
        0x0020d456:    4648        HF      MOV      r0,r9
        0x0020d458:    f5fafb01    ....    BL       log_buffer ; 0x7a5e
;;;674                                   TRACE_STRING(ExtIrq[i - System_VECTORn]));
;;;675                }
;;;676    
;;;677                pRamVector[i] = pAppVector[i];
        0x0020d45c:    f8550024    U.$.    LDR      r0,[r5,r4,LSL #2]
        0x0020d460:    f8460024    F.$.    STR      r0,[r6,r4,LSL #2]
        0x0020d464:    1c64        d.      ADDS     r4,r4,#1
        0x0020d466:    ebb40f97    ....    CMP      r4,r7,LSR #2
        0x0020d46a:    d3d4        ..      BCC      0x20d416 ; AppUpdateVectorTable + 62
;;;678            }
;;;679        }
;;;680    
;;;681        __DMB();
        0x0020d46c:    f3bf8f5f    .._.    DMB      
;;;682        __DSB();
        0x0020d470:    f3bf8f4f    ..O.    DSB      
;;;683    }
        0x0020d474:    b03d        =.      ADD      sp,sp,#0xf4
        0x0020d476:    e8bd83f0    ....    POP      {r4-r9,pc}
    $d
        0x0020d47a:    0000        ..      DCW    0
        0x0020d47c:    0020bf70    p. .    DCD    2146160
        0x0020d480:    0080e77c    |...    DCD    8447868
        0x0020d484:    000000f4    ....    DCD    244
        0x0020d488:    e000ed08    ....    DCD    3758157064
        0x0020d48c:    21100101    ...!    DCD    554696961
        0x0020d490:    00207d45    E} .    DCD    2129221
        0x0020d494:    0880009c    ....    DCD    142606492

** Section #9 'CACHE_DATA_ON' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 3028 bytes (alignment 4)
    Address: 0x0021c000

    $t
    .ARM.Collect$$_printf_percent$$00000009
    .ARM.Collect$$_printf_percent$$00000000
    _printf_d
    _printf_percent
        0x0021c000:    2964        d)      CMP      r1,#0x64
        0x0021c002:    f42fae1f    /...    BEQ      _printf_int_dec ; 0x20bc44
    .ARM.Collect$$_printf_percent$$0000000C
    _printf_x
        0x0021c006:    2978        x)      CMP      r1,#0x78
        0x0021c008:    f0008326    ..&.    BEQ.W    _printf_int_hex ; 0x21c658
    .ARM.Collect$$_printf_percent$$00000017
    _printf_percent_end
        0x0021c00c:    2000        .       MOVS     r0,#0
        0x0021c00e:    4770        pG      BX       lr
    .emb_text
    rand
        0x0021c010:    490b        .I      LDR      r1,[pc,#44] ; [0x21c040] = 0x20d3d0
        0x0021c012:    f8d1c000    ....    LDR      r12,[r1,#0]
        0x0021c016:    684a        Jh      LDR      r2,[r1,#4]
        0x0021c018:    f85c3b04    \..;    LDR      r3,[r12],#4
        0x0021c01c:    6810        .h      LDR      r0,[r2,#0]
        0x0021c01e:    4418        .D      ADD      r0,r0,r3
        0x0021c020:    f8420b04    B...    STR      r0,[r2],#4
        0x0021c024:    458c        .E      CMP      r12,r1
        0x0021c026:    bf28        (.      IT       CS
        0x0021c028:    f1a10cdc    ....    SUBCS    r12,r1,#0xdc
        0x0021c02c:    428a        .B      CMP      r2,r1
        0x0021c02e:    bf28        (.      IT       CS
        0x0021c030:    f1a102dc    ....    SUBCS    r2,r1,#0xdc
        0x0021c034:    f8c1c000    ....    STR      r12,[r1,#0]
        0x0021c038:    604a        J`      STR      r2,[r1,#4]
        0x0021c03a:    f0204000     ..@    BIC      r0,r0,#0x80000000
        0x0021c03e:    4770        pG      BX       lr
    $d
        0x0021c040:    0020d3d0    .. .    DCD    2151376
    $t
    .text
    common_main
;;;304    {
        0x0021c044:    b510        ..      PUSH     {r4,lr}
;;;305    //add common system code here before enter user defined main function
;;;306        OTP->run_in_app = 1;
        0x0021c046:    f44f1400    O...    MOV      r4,#0x200000
        0x0021c04a:    f894039b    ....    LDRB     r0,[r4,#0x39b]
        0x0021c04e:    f0400080    @...    ORR      r0,r0,#0x80
        0x0021c052:    f884039b    ....    STRB     r0,[r4,#0x39b]
;;;307    
;;;308    #if (RUN_APP_IN_HCIMODE_ENABLE == 0)
;;;309        if (OTP->stack_en)
        0x0021c056:    f89402dc    ....    LDRB     r0,[r4,#0x2dc]
        0x0021c05a:    07c1        ..      LSLS     r1,r0,#31
;;;310        {
;;;311            DBG_DIRECT("In SoC Mode");
        0x0021c05c:    f04f5004    O..P    MOV      r0,#0x21000000
        0x0021c060:    d003        ..      BEQ      0x21c06a ; common_main + 38
        0x0021c062:    a136        6.      ADR      r1,{pc}+0xda ; 0x21c13c
        0x0021c064:    f5ebfca4    ....    BL       log_direct ; 0x79b0
        0x0021c068:    e006        ..      B        0x21c078 ; common_main + 52
;;;312        }
;;;313        else
;;;314        {
;;;315            DBG_DIRECT("WARNING: In HCI Mode, will not run APP Task");
        0x0021c06a:    a137        7.      ADR      r1,{pc}+0xde ; 0x21c148
        0x0021c06c:    f5ebfca0    ....    BL       log_direct ; 0x79b0
;;;316            WDG_Disable();
        0x0021c070:    f5f5fc67    ..g.    BL       WDG_Disable ; 0x11942
;;;317            os_sched_start();
        0x0021c074:    f60afba5    ....    BL       os_sched_start ; 0x267c2
;;;318        }
;;;319    #endif
;;;320    
;;;321        //fix system hang if app call log_module_trace_set after enable RELEASE_VERSION
;;;322        if (OTP->logDisable == 1)
        0x0021c078:    f894039a    ....    LDRB     r0,[r4,#0x39a]
        0x0021c07c:    07c0        ..      LSLS     r0,r0,#31
        0x0021c07e:    d002        ..      BEQ      0x21c086 ; common_main + 66
;;;323        {
;;;324            log_module_trace_init(NULL);
        0x0021c080:    2000        .       MOVS     r0,#0
        0x0021c082:    f5ecf8a7    ....    BL       log_module_trace_init ; 0x81d4
;;;325        }
;;;326    
;;;327    #if (SYSTEM_TRACE_ENABLE == 1)
;;;328        extern void system_trace_init(void);
;;;329        system_trace_init();
;;;330    #endif
;;;331    
;;;332        extern int __main(void);
;;;333        __main();
        0x0021c086:    e8bd4010    ...@    POP      {r4,lr}
        0x0021c08a:    f1f2b1bd    ....    B.W      __main ; 0x80e408
    WDG_SystemReset
;;;334    }
;;;335    
;;;336    #if (DEBUG_WATCHPOINT_ENABLE == 1)
;;;337    /**
;;;338     * @brief  Enable Debug Monitor Function (include NVIC Enable and DWT configuration)
;;;339     * @param  none
;;;340     * @return none
;;;341     */
;;;342    
;;;343    DATA_RAM_FUNCTION
;;;344    void debug_monitor_enable(void)
;;;345    {
;;;346        //DBG_DIRECT("debug_monitor_enable");
;;;347    
;;;348        //set debug monitor priority
;;;349        NVIC_SetPriority(DebugMonitor_IRQn, 3);
;;;350    
;;;351        //enable exception and monitor control register
;;;352        CoreDebug->DEMCR |= CoreDebug_DEMCR_MON_EN_Msk | CoreDebug_DEMCR_TRCENA_Msk;
;;;353    
;;;354        //set DWT compare registers (max 4 comparators)
;;;355        //watch_point_0_setting(0x1000180C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_WRITE);
;;;356        //watch_point_1_setting(0x10000004, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;357        //watch_point_2_setting(0x10000008, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;358        //watch_point_3_setting(0x1000000C, DWT_DATAVSIZE_WORD, DWT_FUNCTION_READ_OR_WRITE);
;;;359    
;;;360        //enable DWT control register
;;;361        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
;;;362    
;;;363        return;
;;;364    }
;;;365    #endif
;;;366    
;;;367    APP_FLASH_TEXT_SECTION
;;;368    void ram_init(void)
;;;369    {
;;;370        //copy data on ro
;;;371        extern char Image$$RAM_DATA_ON$$RO$$Base[];
;;;372        extern char Load$$RAM_DATA_ON$$RO$$Base[];
;;;373        extern unsigned int Image$$RAM_DATA_ON$$RO$$Length;
;;;374    
;;;375        memcpy(Image$$RAM_DATA_ON$$RO$$Base,
;;;376               Load$$RAM_DATA_ON$$RO$$Base,
;;;377               (unsigned int)&Image$$RAM_DATA_ON$$RO$$Length);
;;;378    
;;;379        //copy data on rw
;;;380        extern char Image$$RAM_DATA_ON$$RW$$Base[];
;;;381        extern char Load$$RAM_DATA_ON$$RW$$Base[];
;;;382        extern unsigned int Image$$RAM_DATA_ON$$RW$$Length;
;;;383    
;;;384        memcpy(Image$$RAM_DATA_ON$$RW$$Base,
;;;385               Load$$RAM_DATA_ON$$RW$$Base,
;;;386               (unsigned int)&Image$$RAM_DATA_ON$$RW$$Length);
;;;387    
;;;388        //clear data on zi
;;;389        extern char Image$$RAM_DATA_ON$$ZI$$Base[];
;;;390        extern unsigned int Image$$RAM_DATA_ON$$ZI$$Length;
;;;391    
;;;392        memset(Image$$RAM_DATA_ON$$ZI$$Base,
;;;393               0,
;;;394               (unsigned int)&Image$$RAM_DATA_ON$$ZI$$Length);
;;;395    
;;;396        //copy cache ro
;;;397        extern char Image$$CACHE_DATA_ON$$RO$$Base[];
;;;398        extern char Load$$CACHE_DATA_ON$$RO$$Base[];
;;;399        extern unsigned int Image$$CACHE_DATA_ON$$RO$$Length;
;;;400    
;;;401        memcpy(Image$$CACHE_DATA_ON$$RO$$Base,
;;;402               Load$$CACHE_DATA_ON$$RO$$Base,
;;;403               (unsigned int)&Image$$CACHE_DATA_ON$$RO$$Length);
;;;404    
;;;405        //copy share cache ram rw
;;;406        extern char Image$$CACHE_DATA_ON$$RW$$Base[];
;;;407        extern char Load$$CACHE_DATA_ON$$RW$$Base[];
;;;408        extern unsigned int Image$$CACHE_DATA_ON$$RW$$Length;
;;;409    
;;;410        memcpy(Image$$CACHE_DATA_ON$$RW$$Base,
;;;411               Load$$CACHE_DATA_ON$$RW$$Base,
;;;412               (unsigned int)&Image$$CACHE_DATA_ON$$RW$$Length);
;;;413    
;;;414        //clear share cache ram zi
;;;415        extern char Image$$CACHE_DATA_ON$$ZI$$Base[];
;;;416        extern unsigned int Image$$CACHE_DATA_ON$$ZI$$Length;
;;;417    
;;;418        memset(Image$$CACHE_DATA_ON$$ZI$$Base,
;;;419               0,
;;;420               (unsigned int)&Image$$CACHE_DATA_ON$$ZI$$Length);
;;;421    }
;;;422    
;;;423    uint32_t random_seed_value;
;;;424    
;;;425    APP_FLASH_TEXT_SECTION
;;;426    void random_seed_init(void)
;;;427    {
;;;428        uint16_t crc16;
;;;429        uint8_t buf[DATA_SIZE_FOR_RANDOM_SEED];
;;;430        uint8_t *sour_addr = (uint8_t *)(OTP->appDataAddr + OTP->appDataSize + OTP->heapDataONSize);
;;;431    
;;;432        memcpy(buf, sour_addr, DATA_SIZE_FOR_RANDOM_SEED);
;;;433        crc16 = btxfcs(0, buf, DATA_SIZE_FOR_RANDOM_SEED);
;;;434    
;;;435        random_seed_value = (crc16 << 16) | (*(volatile uint32_t *)(0x4005817C) & 0xFFFF);
;;;436    
;;;437        random_seed_value *= platform_random(0xFFFFFFFF);
;;;438    
;;;439        srand(random_seed_value);
;;;440    
;;;441        for (int i = 0; i < (DATA_SIZE_FOR_RANDOM_SEED / 4); ++i)
;;;442        {
;;;443            *(uint32_t *)(sour_addr + i * 4) = rand();
;;;444        }
;;;445    
;;;446        random_seed_value = rand();
;;;447    }
;;;448    
;;;449    APP_FLASH_TEXT_SECTION
;;;450    void SystemInit(void)
;;;451    {
;;;452        //hci mode check and bypass app
;;;453        if (check_hci_mode_flag())
;;;454        {
;;;455            return;
;;;456        }
;;;457    
;;;458        //init pre_main and main functions
;;;459        extern void pre_main(void);
;;;460        app_pre_main = (APP_MAIN_FUNC)pre_main;
;;;461        app_main = (APP_MAIN_FUNC)common_main;
;;;462    
;;;463        /******** update otp here**********/
;;;464        //ram config
;;;465        OTP->appDataSize = APP_GLOBAL_SIZE;
;;;466        OTP->heapDataONSize = HEAP_DATA_ON_SIZE - DATA_SIZE_FOR_RANDOM_SEED;
;;;467    
;;;468        /* not share: SHARE_CACHE_RAM_0K; 8K: SHARE_CACHE_RAM_8K; 16K: SHARE_CACHE_RAM_16K */
;;;469    #if ((16 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;470        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_16K;
;;;471    #elif ((8 * 1024) == SHARE_CACHE_RAM_SIZE)
;;;472        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_8K;
;;;473    #else
;;;474        OTP->share_cache_ram_reg = SHARE_CACHE_RAM_0K;
;;;475    #endif
;;;476    
;;;477        //sw timer config
;;;478    #ifdef TIMER_MAX_NUMBER
;;;479        //define TIMER_MAX_NUMBER in otp_config.h
;;;480        OTP->timerMaxNumber = TIMER_MAX_NUMBER;
;;;481    #endif
;;;482    
;;;483        //flash config
;;;484        /*config enable flash block proect depending on flash layout and flash id*/
;;;485    #if (FLASH_BLOCK_PROTECT_ENABLE == 1)
;;;486        OTP->bp_enable = 1;
;;;487    #else
;;;488        OTP->bp_enable = 0;
;;;489    #endif
;;;490        OTP->delay_10us_after_toggle_cs = AFTER_TOGGLE_CS_DELAY;
;;;491    
;;;492    
;;;493        //os config
;;;494        /*config enable check task stack overflow*/
;;;495    #if (CHECK_STACK_OVERFLOW_ENABLE == 1)
;;;496        OTP->checkForStackOverflow = 1;
;;;497    #else
;;;498        OTP->checkForStackOverflow = 0;
;;;499    #endif
;;;500    
;;;501    
;;;502        //platform config
;;;503        /*config enable platform assert*/
;;;504    #if (PLATFORM_ASSERT_ENABLE == 1)
;;;505        OTP->enableASSERT = 1;
;;;506    #else
;;;507        OTP->enableASSERT = 0;
;;;508    #endif
;;;509    
;;;510        /*Print all log in log buffer before entering DLPS */
;;;511    #if (CHECK_LOG_BUFFER_BEFORE_DLPS_ENABLE == 1)
;;;512        OTP->printAllLogBeforeEnterDLPS = 1;
;;;513    #else
;;;514        OTP->printAllLogBeforeEnterDLPS = 0;
;;;515    #endif
;;;516    
;;;517        /*config enable log or not*/
;;;518    #if (CONFIG_LOG_FUNCTION_ENABLE == 1)
;;;519        OTP->logDisable = 0;
;;;520    #else
;;;521        OTP->logDisable = 1;
;;;522    #endif
;;;523    
;;;524        /*config enable swd pinmux*/
;;;525    #if (SWD_PINMUX_ENABLE == 1)
;;;526        OTP->SWD_ENABLE = 1;
;;;527    #else
;;;528        OTP->SWD_ENABLE = 0;
;;;529    #endif
;;;530    
;;;531        /*config enable watch dog in rom*/
;;;532    #if (ROM_WATCH_DOG_ENABLE == 1)
;;;533        OTP->wdgEnableInRom = 1;
;;;534    #else
;;;535        OTP->wdgEnableInRom = 0;
;;;536    #endif
;;;537    
;;;538        /*config watch dog mode in rom, defualt reset all*/
;;;539        OTP->wdgMode = ROM_WATCH_DOG_MODE;
;;;540    
;;;541        /*use os tick as log timestamp instead of TIM7*/
;;;542        OTP->log_timestamp_src = LOG_TIMESTAMP_OS;
;;;543    
;;;544    
;;;545        //app config
;;;546        OTP->ota_timeout_total = OTA_TIMEOUT_TOTAL;
;;;547        OTP->ota_timeout_wait4_conn = OTA_TIMEOUT_WAIT4_CONN;
;;;548        OTP->ota_timeout_wait4_image_transfer = OTA_TIMEOUT_WAIT4_IMAGE_TRANS;
;;;549        OTP->ota_timeout_ctittv = OTA_TIMEOUT_CTITTV;
;;;550    
;;;551    #if ROM_OTA_LINKLOSS_RST
;;;552        OTP->ota_link_loss_reset = 1;
;;;553    #endif
;;;554        /*config bt stack parameters in rom*/
;;;555    #ifdef BT_STACK_CONFIG_ENABLE
;;;556        bt_stack_config_init();
;;;557    #endif
;;;558    
;;;559    //add more otp config here
;;;560    }
;;;561    
;;;562    //Note: call print_reset_reason() before ram_init();
;;;563    APP_FLASH_TEXT_SECTION
;;;564    void print_reset_reason(void)
;;;565    {
;;;566        if (check_reset_ram.check_reset_ram_pattern != RESET_RAM_PATTERN)
;;;567        {
;;;568            BOOT_PRINT_INFO0("RESET Reason: HW or OTA");
;;;569        }
;;;570        else
;;;571        {
;;;572            T_SW_RESET_REASON sw_reset_type = get_aon_record_reset_reason();
;;;573    
;;;574            if (sw_reset_type != (T_SW_RESET_REASON)0)
;;;575            {
;;;576                BOOT_PRINT_INFO1("RESET Reason: SW(reset except aon), TYPE 0x%x", sw_reset_type);
;;;577            }
;;;578            else //reset all will clear aon register
;;;579            {
;;;580                BOOT_PRINT_INFO1("RESET Reason: SW(reset all), TYPE 0x%x", check_reset_ram.check_reset_ram_type);
;;;581            }
;;;582        }
;;;583    }
;;;584    
;;;585    APP_FLASH_TEXT_SECTION
;;;586    void pre_main(void)
;;;587    {
;;;588        __disable_irq();
;;;589    
;;;590        print_reset_reason();  //Note: call this function before ram_init();
;;;591    
;;;592        ram_init();
;;;593    
;;;594        random_seed_init();
;;;595    
;;;596        load_overlay(OVERLAY_SCENARIO_BOOT_ONCE);
;;;597    
;;;598        //reset NVIC of DMA channel used in image decryption
;;;599        NVIC_DisableIRQ(GDMA0_Channel2_IRQn);
;;;600        NVIC_DisableIRQ(GDMA0_Channel3_IRQn);
;;;601    
;;;602        setlocale(LC_ALL, "C");
;;;603    
;;;604        BOOT_PRINT_ERROR2("SDK Ver: %s, Build Time: %s",
;;;605                          TRACE_STRING(VERSION_BUILD_STR),
;;;606                          TRACE_STRING(BUILDING_TIME));
;;;607    
;;;608        AppUpdateVectorTable();
;;;609    
;;;610    #if (DEBUG_WATCHPOINT_ENABLE == 1)
;;;611        debug_monitor_enable();
;;;612    #endif
;;;613    
;;;614        if (app_pre_main_cb)
;;;615        {
;;;616            app_pre_main_cb();
;;;617        }
;;;618    
;;;619        return;
;;;620    }
;;;621    /**
;;;622     * @brief  update vector table in app
;;;623     * @param  none
;;;624     * @return none
;;;625      */
;;;626    OVERLAY_SECTION_BOOT_ONCE
;;;627    static void AppUpdateVectorTable(void)
;;;628    {
;;;629        extern uint32_t Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;630        extern uint32_t Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;631        extern void Default_Handler(void);
;;;632        const char *SysException[] =
;;;633        {
;;;634            "InitialSP", "Reset", "NMI", "HardFault", "MemManage", "BusFault", "UsageFault", "Rsvd",
;;;635            "Rsvd", "Rsvd", "Rsvd", "SVC", "DebugMon", "Rsvd", "PendSV", "SysTick"
;;;636        };
;;;637        const char *ExtIrq[] =
;;;638        {
;;;639            "System", "WDG", "BTMAC", "TIM3", "TIM2", "Platform", "I2S0_TX", "I2S0_RX", "Timer4-7",
;;;640            "GPIO4", "GPIO5", "UART1", "UART0", "RTC", "SPI0", "SPI1", "I2C0", "I2C1", "ADC",
;;;641            "Peripheral", "GDMA0 Channel0", "GDMA0 Channel1", "GDMA0 Channel2", "GDMA0 Channel3",
;;;642            "GDMA0 Channel4", "GDMA0 Channel5", "GPIO_Group3", "GPIO_Group2", "IR", "GPIO_Group1",
;;;643            "GPIO_Group0", "UART2", "TIM4", "TIM5", "TIM6", "TIM7", "SPI_Flash", "Qdecode",
;;;644            "Keyscan", "SPI2W", "LPCOMP", "PTA_Mailbox", "SPORT1 TX", "SPORT1 RX", "LCD"
;;;645        };
;;;646    
;;;647        IRQ_Fun *pRamVector    = (IRQ_Fun *)VTOR_RAM_ADDR;
;;;648        IRQ_Fun *pAppVector    = (IRQ_Fun *)&Load$$RAM_VECTOR_TABLE$$RO$$Base;
;;;649        uint32_t AppVectorSize = (uint32_t)&Image$$RAM_VECTOR_TABLE$$RO$$Length;
;;;650        uint32_t i             = 0;
;;;651    
;;;652        if (SCB->VTOR != VTOR_RAM_ADDR)
;;;653        {
;;;654            RamVectorTableInit(VTOR_RAM_ADDR);
;;;655        }
;;;656    
;;;657        /* Update APP defined handlers */
;;;658        for (i = 0; i < AppVectorSize / 4; ++i)
;;;659        {
;;;660            if (i == 1) //skip reset_handler remap
;;;661            {
;;;662                continue;
;;;663            }
;;;664    
;;;665            if ((pAppVector[i] != Default_Handler) && (pAppVector[i] != 0))
;;;666            {
;;;667                if (i < System_VECTORn)
;;;668                {
;;;669                    OS_PRINT_WARN1("Warning! %s is updated by APP!", TRACE_STRING(SysException[i]));
;;;670                }
;;;671                else
;;;672                {
;;;673                    OS_PRINT_WARN1("Warning! ISR %s is updated by APP!",
;;;674                                   TRACE_STRING(ExtIrq[i - System_VECTORn]));
;;;675                }
;;;676    
;;;677                pRamVector[i] = pAppVector[i];
;;;678            }
;;;679        }
;;;680    
;;;681        __DMB();
;;;682        __DSB();
;;;683    }
;;;684    /**
;;;685     * @brief  GPIO Group3 Handler
;;;686     * @param  none
;;;687     * @return none
;;;688      */
;;;689    DATA_RAM_FUNCTION void GPIO_Group3_Handler(void)
;;;690    {
;;;691        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;692    
;;;693        //Check exact IRQ function
;;;694        if (GPIOIrqStatus & BIT3)
;;;695        {
;;;696            GPIO3_Handler();
;;;697        }
;;;698        if (GPIOIrqStatus & BIT7)
;;;699        {
;;;700            GPIO7_Handler();
;;;701        }
;;;702        if (GPIOIrqStatus & BIT11)
;;;703        {
;;;704            GPIO11_Handler();
;;;705        }
;;;706        if (GPIOIrqStatus & BIT15)
;;;707        {
;;;708            GPIO15_Handler();
;;;709        }
;;;710        if (GPIOIrqStatus & BIT19)
;;;711        {
;;;712            GPIO19_Handler();
;;;713        }
;;;714        if (GPIOIrqStatus & BIT23)
;;;715        {
;;;716            GPIO23_Handler();
;;;717        }
;;;718        if (GPIOIrqStatus & BIT27)
;;;719        {
;;;720            GPIO27_Handler();
;;;721        }
;;;722        if (GPIOIrqStatus & BIT31)
;;;723        {
;;;724            GPIO31_Handler();
;;;725        }
;;;726    }
;;;727    /**
;;;728     * @brief  GPIO Group2 Handler
;;;729     * @param  none
;;;730     * @return none
;;;731      */
;;;732    DATA_RAM_FUNCTION void GPIO_Group2_Handler(void)
;;;733    {
;;;734        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;735    
;;;736        //Check exact IRQ function
;;;737        if (GPIOIrqStatus & BIT2)
;;;738        {
;;;739            GPIO2_Handler();
;;;740        }
;;;741        if (GPIOIrqStatus & BIT6)
;;;742        {
;;;743            GPIO6_Handler();
;;;744        }
;;;745        if (GPIOIrqStatus & BIT10)
;;;746        {
;;;747            GPIO10_Handler();
;;;748        }
;;;749        if (GPIOIrqStatus & BIT14)
;;;750        {
;;;751            GPIO14_Handler();
;;;752        }
;;;753        if (GPIOIrqStatus & BIT18)
;;;754        {
;;;755            GPIO18_Handler();
;;;756        }
;;;757        if (GPIOIrqStatus & BIT22)
;;;758        {
;;;759            GPIO22_Handler();
;;;760        }
;;;761        if (GPIOIrqStatus & BIT26)
;;;762        {
;;;763            GPIO26_Handler();
;;;764        }
;;;765        if (GPIOIrqStatus & BIT30)
;;;766        {
;;;767            GPIO30_Handler();
;;;768        }
;;;769    }
;;;770    /**
;;;771     * @brief  GPIO Group1 Handler
;;;772     * @param  none
;;;773     * @return none
;;;774      */
;;;775    DATA_RAM_FUNCTION void GPIO_Group1_Handler(void)
;;;776    {
;;;777        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;778    
;;;779        //Check exact IRQ function
;;;780        if (GPIOIrqStatus & BIT1)
;;;781        {
;;;782            GPIO1_Handler();
;;;783        }
;;;784        if (GPIOIrqStatus & BIT9)
;;;785        {
;;;786            GPIO9_Handler();
;;;787        }
;;;788        if (GPIOIrqStatus & BIT13)
;;;789        {
;;;790            GPIO13_Handler();
;;;791        }
;;;792        if (GPIOIrqStatus & BIT17)
;;;793        {
;;;794            GPIO17_Handler();
;;;795        }
;;;796        if (GPIOIrqStatus & BIT21)
;;;797        {
;;;798            GPIO21_Handler();
;;;799        }
;;;800        if (GPIOIrqStatus & BIT25)
;;;801        {
;;;802            GPIO25_Handler();
;;;803        }
;;;804        if (GPIOIrqStatus & BIT29)
;;;805        {
;;;806            GPIO29_Handler();
;;;807        }
;;;808    }
;;;809    /**
;;;810     * @brief  GPIO Group0 Handler
;;;811     * @param  none
;;;812     * @return none
;;;813      */
;;;814    DATA_RAM_FUNCTION void GPIO_Group0_Handler(void)
;;;815    {
;;;816        uint32_t GPIOIrqStatus = GPIO->INTSTATUS;
;;;817    
;;;818        //Check exact IRQ function
;;;819        if (GPIOIrqStatus & BIT0)
;;;820        {
;;;821            GPIO0_Handler();
;;;822        }
;;;823        if (GPIOIrqStatus & BIT8)
;;;824        {
;;;825            GPIO8_Handler();
;;;826        }
;;;827        if (GPIOIrqStatus & BIT12)
;;;828        {
;;;829            GPIO12_Handler();
;;;830        }
;;;831        if (GPIOIrqStatus & BIT16)
;;;832        {
;;;833            GPIO16_Handler();
;;;834        }
;;;835        if (GPIOIrqStatus & BIT20)
;;;836        {
;;;837            GPIO20_Handler();
;;;838        }
;;;839        if (GPIOIrqStatus & BIT24)
;;;840        {
;;;841            GPIO24_Handler();
;;;842        }
;;;843        if (GPIOIrqStatus & BIT28)
;;;844        {
;;;845            GPIO28_Handler();
;;;846        }
;;;847    }
;;;848    
;;;849    void WDG_SystemReset(T_WDG_MODE wdg_mode, T_SW_RESET_REASON reset_reason)
;;;850    {
;;;851        uint32_t parm = wdg_mode | (reset_reason << 8);
        0x0021c08e:    ea402101    @..!    ORR      r1,r0,r1,LSL #8
;;;852        SystemCall(SYSTEM_CALL_WDG_RESET, parm);
        0x0021c092:    2001        .       MOVS     r0,#1
        0x0021c094:    f5ebb904    ....    B        SystemCall ; 0x72a0
    flash_try_high_speed
;;;853    }
;;;854    
;;;855    /**
;;;856     * @brief  flash try to switch to high speed bit mode
;;;857     * @note  switch back to 1 bit mode, if flash switch to high speed bit mode fail
;;;858     * @param  bit_mode config bit mode @ref T_FLASH_MODE
;;;859     * @retval 0 fail
;;;860     * @retval 1 success
;;;861      */
;;;862    uint32_t flash_try_high_speed(T_FLASH_MODE bit_mode)
;;;863    {
        0x0021c098:    b510        ..      PUSH     {r4,lr}
;;;864        uint32_t result = 0;
;;;865        OTP->bit_mode = bit_mode;
        0x0021c09a:    f44f1400    O...    MOV      r4,#0x200000
        0x0021c09e:    2200        ."      MOVS     r2,#0
        0x0021c0a0:    f894134c    ..L.    LDRB     r1,[r4,#0x34c]
        0x0021c0a4:    f3600101    `...    BFI      r1,r0,#0,#2
        0x0021c0a8:    f884134c    ..L.    STRB     r1,[r4,#0x34c]
;;;866        result = flash_ioctl(flash_ioctrl_try_high_speed, 0, 0);
        0x0021c0ac:    4611        .F      MOV      r1,r2
        0x0021c0ae:    f2450002    E...    MOV      r0,#0x5002
        0x0021c0b2:    f5efffde    ....    BL       flash_ioctl ; 0xc072
;;;867        //if try fail, set back OTP->bit_mode to one bit mode
;;;868        if (!result)
        0x0021c0b6:    2800        .(      CMP      r0,#0
        0x0021c0b8:    d105        ..      BNE      0x21c0c6 ; flash_try_high_speed + 46
;;;869        {
;;;870            OTP->bit_mode = FLASH_MODE_1BIT;
        0x0021c0ba:    f894134c    ..L.    LDRB     r1,[r4,#0x34c]
        0x0021c0be:    f0210103    !...    BIC      r1,r1,#3
        0x0021c0c2:    f884134c    ..L.    STRB     r1,[r4,#0x34c]
;;;871        }
;;;872        return result;
;;;873    }
        0x0021c0c6:    bd10        ..      POP      {r4,pc}
    malloc
;;;874    
;;;875    void *malloc(size_t size)
;;;876    {
;;;877        return os_mem_alloc(RAM_TYPE_DATA_ON, size);
        0x0021c0c8:    4601        .F      MOV      r1,r0
        0x0021c0ca:    f240336d    @.m3    MOV      r3,#0x36d
        0x0021c0ce:    4a29        )J      LDR      r2,[pc,#164] ; [0x21c174] = 0x20bf58
        0x0021c0d0:    2000        .       MOVS     r0,#0
        0x0021c0d2:    f609be45    ..E.    B        os_mem_alloc_intern ; 0x25d60
    calloc
;;;878    }
;;;879    
;;;880    void *calloc(size_t n, size_t size)
;;;881    {
;;;882        return os_mem_zalloc(RAM_TYPE_DATA_ON, n * size);
        0x0021c0d6:    4a27        'J      LDR      r2,[pc,#156] ; [0x21c174] = 0x20bf58
        0x0021c0d8:    4341        AC      MULS     r1,r0,r1
        0x0021c0da:    1dd2        ..      ADDS     r2,r2,#7
        0x0021c0dc:    f2403372    @.r3    MOV      r3,#0x372
        0x0021c0e0:    2000        .       MOVS     r0,#0
        0x0021c0e2:    f609be69    ..i.    B        os_mem_zalloc_intern ; 0x25db8
    realloc
;;;883    }
;;;884    
;;;885    void *realloc(void *ptr, size_t size)
;;;886    {
        0x0021c0e6:    b510        ..      PUSH     {r4,lr}
        0x0021c0e8:    460c        .F      MOV      r4,r1
        0x0021c0ea:    b108        ..      CBZ      r0,0x21c0f0 ; realloc + 10
;;;887        if (ptr)
;;;888        {
;;;889            os_mem_free(ptr);
        0x0021c0ec:    f609fec3    ....    BL       os_mem_free ; 0x25e76
;;;890        }
;;;891    
;;;892        return os_mem_alloc(RAM_TYPE_DATA_ON, size);
        0x0021c0f0:    4a20         J      LDR      r2,[pc,#128] ; [0x21c174] = 0x20bf58
        0x0021c0f2:    4621        !F      MOV      r1,r4
        0x0021c0f4:    320e        .2      ADDS     r2,r2,#0xe
        0x0021c0f6:    e8bd4010    ...@    POP      {r4,lr}
        0x0021c0fa:    f44f735f    O._s    MOV      r3,#0x37c
        0x0021c0fe:    2000        .       MOVS     r0,#0
        0x0021c100:    f609be2e    ....    B        os_mem_alloc_intern ; 0x25d60
    free
;;;893    }
;;;894    
;;;895    void free(void *ptr)
;;;896    {
;;;897        os_mem_free(ptr);
        0x0021c104:    f609beb7    ....    B        os_mem_free ; 0x25e76
    app_cb0_wdg_reset
;;;898    }
;;;899    
;;;900    void app_cb0_wdg_reset(T_WDG_MODE wdg_mode, T_SW_RESET_REASON reset_reason)
;;;901    {
;;;902        check_reset_ram.check_reset_ram_type = reset_reason;
        0x0021c108:    4a1b        .J      LDR      r2,[pc,#108] ; [0x21c178] = 0x20d024
        0x0021c10a:    70d1        .p      STRB     r1,[r2,#3]
        0x0021c10c:    4a1b        .J      LDR      r2,[pc,#108] ; [0x21c17c] = 0x20d098
        0x0021c10e:    6812        .h      LDR      r2,[r2,#0]
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (901)
        0x0021c110:    2a00        .*      CMP      r2,#0
        0x0021c112:    d000        ..      BEQ      0x21c116 ; app_cb0_wdg_reset + 14
;;;902        check_reset_ram.check_reset_ram_type = reset_reason;
;;;903    
;;;904        if (user_wdg_cb)
;;;905        {
;;;906            if (user_wdg_cb(wdg_mode, reset_reason))
        0x0021c114:    4710        .G      BX       r2
;;;907            {
;;;908                return;
;;;909            }
;;;910        }
;;;911    
;;;912        //do something necessary before watch dog reset
;;;913    }
        0x0021c116:    4770        pG      BX       lr
    app_cb5_dfu_status
;;;914    
;;;915    void app_cb5_dfu_status(DFU_PROGRESS_STATUS status, uint32_t length)
;;;916    {
;;;917    //    uint32_t value = 0;
;;;918    //    switch(status)
;;;919    //    {
;;;920    //        case DFU_START:
;;;921    //            value = *((uint32_t *)0x180e000);
;;;922    //            DBG_DIRECT("DFU start, total length = %d, value = 0x%x", length, value);
;;;923    //            break;
;;;924    //        case DFU_DOING:
;;;925    //            value = *((uint32_t *)0x180e000);
;;;926    //            DBG_DIRECT("DFU doing, paccket length = %d, value = 0x%x", length, value);
;;;927    //            break;
;;;928    //        case DFU_END:
;;;929    //            value = *((uint32_t *)0x180e000);
;;;930    //            DBG_DIRECT("DFU end, check result = %d, value = 0x%x", length, value);
;;;931    //            break;
;;;932    //        default:
;;;933    //            DBG_DIRECT("wrong status input");
;;;934    //    }
;;;935        if (user_dfu_status_cb)
        0x0021c118:    4a19        .J      LDR      r2,[pc,#100] ; [0x21c180] = 0x20d09c
        0x0021c11a:    6812        .h      LDR      r2,[r2,#0]
;;; .\..\..\..\src\mcu\rtl876x\system_rtl8762c.c (916)
        0x0021c11c:    2a00        .*      CMP      r2,#0
        0x0021c11e:    d000        ..      BEQ      0x21c122 ; app_cb5_dfu_status + 10
;;;917    //    uint32_t value = 0;
;;;918    //    switch(status)
;;;919    //    {
;;;920    //        case DFU_START:
;;;921    //            value = *((uint32_t *)0x180e000);
;;;922    //            DBG_DIRECT("DFU start, total length = %d, value = 0x%x", length, value);
;;;923    //            break;
;;;924    //        case DFU_DOING:
;;;925    //            value = *((uint32_t *)0x180e000);
;;;926    //            DBG_DIRECT("DFU doing, paccket length = %d, value = 0x%x", length, value);
;;;927    //            break;
;;;928    //        case DFU_END:
;;;929    //            value = *((uint32_t *)0x180e000);
;;;930    //            DBG_DIRECT("DFU end, check result = %d, value = 0x%x", length, value);
;;;931    //            break;
;;;932    //        default:
;;;933    //            DBG_DIRECT("wrong status input");
;;;934    //    }
;;;935        if (user_dfu_status_cb)
;;;936        {
;;;937            if (user_dfu_status_cb(status, length))
        0x0021c120:    4710        .G      BX       r2
;;;938            {
;;;939                return;
;;;940            }
;;;941        }
;;;942    }
        0x0021c122:    4770        pG      BX       lr
    NVIC_DisableIRQ
;;; ..\..\..\inc\platform\cmsis\core_cm4.h
;;;1659       NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
        0x0021c124:    f000021f    ....    AND      r2,r0,#0x1f
        0x0021c128:    2101        .!      MOVS     r1,#1
        0x0021c12a:    4091        .@      LSLS     r1,r1,r2
        0x0021c12c:    0940        @.      LSRS     r0,r0,#5
        0x0021c12e:    0080        ..      LSLS     r0,r0,#2
        0x0021c130:    f10020e0    ...     ADD      r0,r0,#0xe000e000
        0x0021c134:    f8c01180    ....    STR      r1,[r0,#0x180]
;;;1660   }
        0x0021c138:    4770        pG      BX       lr
    $d
        0x0021c13a:    0000        ..      DCW    0
        0x0021c13c:    53206e49    In S    DCD    1394634313
        0x0021c140:    4d20436f    oC M    DCD    1293960047
        0x0021c144:    0065646f    ode.    DCD    6644847
        0x0021c148:    4e524157    WARN    DCD    1314013527
        0x0021c14c:    3a474e49    ING:    DCD    977751625
        0x0021c150:    206e4920     In     DCD    544098592
        0x0021c154:    20494348    HCI     DCD    541672264
        0x0021c158:    65646f4d    Mode    DCD    1701080909
        0x0021c15c:    6977202c    , wi    DCD    1769414700
        0x0021c160:    6e206c6c    ll n    DCD    1847618668
        0x0021c164:    7220746f    ot r    DCD    1914729583
        0x0021c168:    41206e75    un A    DCD    1092644469
        0x0021c16c:    54205050    PP T    DCD    1411403856
        0x0021c170:    006b7361    ask.    DCD    7041889
        0x0021c174:    0020bf58    X. .    DCD    2146136
        0x0021c178:    0020d024    $. .    DCD    2150436
        0x0021c17c:    0020d098    .. .    DCD    2150552
        0x0021c180:    0020d09c    .. .    DCD    2150556
    $t
    .text
    app_main_task
;;; ..\..\..\src\sample\ble_central\app_task.c
;;;76     {
        0x0021c184:    b51f        ..      PUSH     {r0-r4,lr}
;;;77         uint8_t event;
;;;78     
;;;79         os_msg_queue_create(&io_queue_handle, MAX_NUMBER_OF_IO_MESSAGE, sizeof(T_IO_MSG));
        0x0021c186:    204f        O       MOVS     r0,#0x4f
        0x0021c188:    9000        ..      STR      r0,[sp,#0]
        0x0021c18a:    4b2a        *K      LDR      r3,[pc,#168] ; [0x21c234] = 0x20c090
        0x0021c18c:    2208        ."      MOVS     r2,#8
        0x0021c18e:    2120         !      MOVS     r1,#0x20
        0x0021c190:    4829        )H      LDR      r0,[pc,#164] ; [0x21c238] = 0x20d278
        0x0021c192:    f609feaf    ....    BL       os_msg_queue_create_intern ; 0x25ef4
;;;80         os_msg_queue_create(&evt_queue_handle, MAX_NUMBER_OF_EVENT_MESSAGE, sizeof(uint8_t));
        0x0021c196:    2050        P       MOVS     r0,#0x50
        0x0021c198:    9000        ..      STR      r0,[sp,#0]
        0x0021c19a:    4827        'H      LDR      r0,[pc,#156] ; [0x21c238] = 0x20d278
        0x0021c19c:    4b25        %K      LDR      r3,[pc,#148] ; [0x21c234] = 0x20c090
        0x0021c19e:    2201        ."      MOVS     r2,#1
        0x0021c1a0:    2140        @!      MOVS     r1,#0x40
        0x0021c1a2:    1f00        ..      SUBS     r0,r0,#4
        0x0021c1a4:    f609fea6    ....    BL       os_msg_queue_create_intern ; 0x25ef4
;;;81     
;;;82         gap_start_bt_stack(evt_queue_handle, io_queue_handle, MAX_NUMBER_OF_GAP_MESSAGE);
        0x0021c1a8:    4c23        #L      LDR      r4,[pc,#140] ; [0x21c238] = 0x20d278
        0x0021c1aa:    2220         "      MOVS     r2,#0x20
        0x0021c1ac:    3c08        .<      SUBS     r4,r4,#8
        0x0021c1ae:    e9d40101    ....    LDRD     r0,r1,[r4,#4]
        0x0021c1b2:    f62ffe5a    /.Z.    BL       gap_start_bt_stack ; 0x4be6a
        0x0021c1b6:    e9d40101    ....    LDRD     r0,r1,[r4,#4]
;;;83     
;;;84         data_uart_init(evt_queue_handle, io_queue_handle);
        0x0021c1ba:    f7eefd8b    ....    BL       data_uart_init ; 0x20acd4
;;;85         user_cmd_init(&user_cmd_if, "central-vsop");
        0x0021c1be:    a11f        ..      ADR      r1,{pc}+0x7e ; 0x21c23c
        0x0021c1c0:    4822        "H      LDR      r0,[pc,#136] ; [0x21c24c] = 0x20d0cc
        0x0021c1c2:    f7eff8be    ....    BL       user_cmd_init ; 0x20b342
;;;86     	APP_PRINT_INFO0("app_main_task by vsop enter");
        0x0021c1c6:    2200        ."      MOVS     r2,#0
        0x0021c1c8:    4921        !I      LDR      r1,[pc,#132] ; [0x21c250] = 0x88015e8
        0x0021c1ca:    4822        "H      LDR      r0,[pc,#136] ; [0x21c254] = 0x21103002
        0x0021c1cc:    f5ebfc47    ..G.    BL       log_buffer ; 0x7a5e
;;;87     
;;;88         driver_init();
        0x0021c1d0:    f000f8e1    ....    BL       driver_init ; 0x21c396
;;;89         while (true)
;;;90         {
;;;91     				#if 1
;;;92             if (os_msg_recv(evt_queue_handle, &event, 0xFFFFFFFF) == true)
        0x0021c1d4:    255c        \%      MOVS     r5,#0x5c
        0x0021c1d6:    f04f37ff    O..7    MOV      r7,#0xffffffff
        0x0021c1da:    2661        a&      MOVS     r6,#0x61
        0x0021c1dc:    9500        ..      STR      r5,[sp,#0]
        0x0021c1de:    4b15        .K      LDR      r3,[pc,#84] ; [0x21c234] = 0x20c090
        0x0021c1e0:    463a        :F      MOV      r2,r7
        0x0021c1e2:    a903        ..      ADD      r1,sp,#0xc
        0x0021c1e4:    6860        `h      LDR      r0,[r4,#4]
        0x0021c1e6:    f609ff2d    ..-.    BL       os_msg_recv_intern ; 0x26044
        0x0021c1ea:    2800        .(      CMP      r0,#0
        0x0021c1ec:    d0f6        ..      BEQ      0x21c1dc ; app_main_task + 88
;;;93             {
;;;94                 if (event == EVENT_IO_TO_APP)
        0x0021c1ee:    f89d000c    ....    LDRB     r0,[sp,#0xc]
        0x0021c1f2:    2802        .(      CMP      r0,#2
        0x0021c1f4:    d002        ..      BEQ      0x21c1fc ; app_main_task + 120
        0x0021c1f6:    f62ffea5    /...    BL       gap_handle_msg ; 0x4bf44
        0x0021c1fa:    e7ef        ..      B        0x21c1dc ; app_main_task + 88
;;;95                 {
;;;96                     T_IO_MSG io_msg;
;;;97                     if (os_msg_recv(io_queue_handle, &io_msg, 0) == true)
        0x0021c1fc:    9600        ..      STR      r6,[sp,#0]
        0x0021c1fe:    4b0d        .K      LDR      r3,[pc,#52] ; [0x21c234] = 0x20c090
        0x0021c200:    2200        ."      MOVS     r2,#0
        0x0021c202:    a901        ..      ADD      r1,sp,#4
        0x0021c204:    68a0        .h      LDR      r0,[r4,#8]
        0x0021c206:    f609ff1d    ....    BL       os_msg_recv_intern ; 0x26044
        0x0021c20a:    2800        .(      CMP      r0,#0
        0x0021c20c:    d0e6        ..      BEQ      0x21c1dc ; app_main_task + 88
        0x0021c20e:    e9dd0101    ....    LDRD     r0,r1,[sp,#4]
;;;98                     {
;;;99                         app_handle_io_msg(io_msg);
        0x0021c212:    f7edffd0    ....    BL       app_handle_io_msg ; 0x20a1b6
        0x0021c216:    e7e1        ..      B        0x21c1dc ; app_main_task + 88
    app_task_init
        0x0021c218:    b51c        ..      PUSH     {r2-r4,lr}
;;; ..\..\..\src\sample\ble_central\app_task.c (66)
        0x0021c21a:    2101        .!      MOVS     r1,#1
        0x0021c21c:    0288        ..      LSLS     r0,r1,#10
        0x0021c21e:    2300        .#      MOVS     r3,#0
        0x0021c220:    f2af029f    ....    ADR      r2,{pc}-0x9b ; 0x21c185
        0x0021c224:    e9cd0100    ....    STRD     r0,r1,[sp,#0]
        0x0021c228:    4803        .H      LDR      r0,[pc,#12] ; [0x21c238] = 0x20d278
        0x0021c22a:    a10b        ..      ADR      r1,{pc}+0x2e ; 0x21c258
        0x0021c22c:    3808        .8      SUBS     r0,r0,#8
        0x0021c22e:    f60afbcf    ....    BL       os_task_create ; 0x269d0
;;;67                        APP_TASK_PRIORITY);
;;;68     }
        0x0021c232:    bd1c        ..      POP      {r2-r4,pc}
    $d
        0x0021c234:    0020c090    .. .    DCD    2146448
        0x0021c238:    0020d278    x. .    DCD    2151032
        0x0021c23c:    746e6563    cent    DCD    1953391971
        0x0021c240:    2d6c6172    ral-    DCD    762077554
        0x0021c244:    706f7376    vsop    DCD    1886352246
        0x0021c248:    00000000    ....    DCD    0
        0x0021c24c:    0020d0cc    .. .    DCD    2150604
        0x0021c250:    088015e8    ....    DCD    142611944
        0x0021c254:    21103002    .0.!    DCD    554708994
        0x0021c258:    00707061    app.    DCD    7368801
    $t
    .text
    app_le_gap_init
;;; ..\..\..\src\sample\ble_central\main.c
;;;73     {
        0x0021c25c:    b500        ..      PUSH     {lr}
        0x0021c25e:    b099        ..      SUB      sp,sp,#0x64
;;;74         /* Device name and device appearance */
;;;75         uint8_t  device_name[GAP_DEVICE_NAME_LEN] = "BLE_CENTRAL";
        0x0021c260:    2228        ("      MOVS     r2,#0x28
        0x0021c262:    495a        ZI      LDR      r1,[pc,#360] ; [0x21c3cc] = 0x20c0a0
        0x0021c264:    4668        hF      MOV      r0,sp
        0x0021c266:    f63dfe9f    =...    BL       __aeabi_memcpy4 ; 0x59fa8
;;;76         uint16_t appearance = GAP_GATT_APPEARANCE_UNKNOWN;
        0x0021c26a:    2000        .       MOVS     r0,#0
        0x0021c26c:    2101        .!      MOVS     r1,#1
        0x0021c26e:    2210        ."      MOVS     r2,#0x10
        0x0021c270:    f8ad0058    ..X.    STRH     r0,[sp,#0x58]
;;;77     
;;;78         /* Scan parameters */
;;;79         uint8_t  scan_mode = GAP_SCAN_MODE_ACTIVE;
        0x0021c274:    f88d105c    ..\.    STRB     r1,[sp,#0x5c]
;;;80         uint16_t scan_interval = DEFAULT_SCAN_INTERVAL;
        0x0021c278:    f8ad2030    ..0     STRH     r2,[sp,#0x30]
;;;81         uint16_t scan_window = DEFAULT_SCAN_WINDOW;
        0x0021c27c:    f8ad2034    ..4     STRH     r2,[sp,#0x34]
;;;82         uint8_t  scan_filter_policy = GAP_SCAN_FILTER_ANY;
;;;83         uint8_t  scan_filter_duplicate = GAP_SCAN_FILTER_DUPLICATE_ENABLE;
        0x0021c280:    f88d103c    ..<.    STRB     r1,[sp,#0x3c]
        0x0021c284:    f8ad102c    ..,.    STRH     r1,[sp,#0x2c]
        0x0021c288:    2203        ."      MOVS     r2,#3
;;;84     
;;;85         /* GAP Bond Manager parameters */
;;;86         uint8_t  auth_pair_mode = GAP_PAIRING_MODE_PAIRABLE;
        0x0021c28a:    f88d1028    ..(.    STRB     r1,[sp,#0x28]
;;;87         uint16_t auth_flags = GAP_AUTHEN_BIT_BONDING_FLAG;
;;;88         uint8_t  auth_io_cap = GAP_IO_CAP_NO_INPUT_NO_OUTPUT;
        0x0021c28e:    f88d2040    ..@     STRB     r2,[sp,#0x40]
        0x0021c292:    f88d0038    ..8.    STRB     r0,[sp,#0x38]
;;;89         uint8_t  auth_oob = false;
        0x0021c296:    f88d0044    ..D.    STRB     r0,[sp,#0x44]
;;;90         uint8_t  auth_use_fix_passkey = false;
        0x0021c29a:    f88d0048    ..H.    STRB     r0,[sp,#0x48]
;;;91         uint32_t auth_fix_passkey = 0;
;;;92         uint8_t  auth_sec_req_enable = false;
        0x0021c29e:    9013        ..      STR      r0,[sp,#0x4c]
        0x0021c2a0:    f88d0050    ..P.    STRB     r0,[sp,#0x50]
;;;93         uint16_t auth_sec_req_flags = GAP_AUTHEN_BIT_BONDING_FLAG;
        0x0021c2a4:    f8ad1054    ..T.    STRH     r1,[sp,#0x54]
;;;94     
;;;95         /* Set device name and device appearance */
;;;96         le_set_gap_param(GAP_PARAM_DEVICE_NAME, GAP_DEVICE_NAME_LEN, device_name);
        0x0021c2a8:    466a        jF      MOV      r2,sp
        0x0021c2aa:    2128        (!      MOVS     r1,#0x28
        0x0021c2ac:    f2402022    @."     MOV      r0,#0x222
        0x0021c2b0:    f630fcca    0...    BL       le_set_gap_param ; 0x4cc48
;;;97         le_set_gap_param(GAP_PARAM_APPEARANCE, sizeof(appearance), &appearance);
        0x0021c2b4:    aa16        ..      ADD      r2,sp,#0x58
        0x0021c2b6:    2102        .!      MOVS     r1,#2
        0x0021c2b8:    f2402021    @.!     MOV      r0,#0x221
        0x0021c2bc:    f630fcc4    0...    BL       le_set_gap_param ; 0x4cc48
;;;98     
;;;99         /* Set scan parameters */
;;;100        le_scan_set_param(GAP_PARAM_SCAN_MODE, sizeof(scan_mode), &scan_mode);
        0x0021c2c0:    aa17        ..      ADD      r2,sp,#0x5c
        0x0021c2c2:    2101        .!      MOVS     r1,#1
        0x0021c2c4:    f2402041    @.A     MOV      r0,#0x241
        0x0021c2c8:    f636f854    6.T.    BL       le_scan_set_param ; 0x52374
;;;101        le_scan_set_param(GAP_PARAM_SCAN_INTERVAL, sizeof(scan_interval), &scan_interval);
        0x0021c2cc:    aa0c        ..      ADD      r2,sp,#0x30
        0x0021c2ce:    2102        .!      MOVS     r1,#2
        0x0021c2d0:    f2402042    @.B     MOV      r0,#0x242
        0x0021c2d4:    f636f84e    6.N.    BL       le_scan_set_param ; 0x52374
;;;102        le_scan_set_param(GAP_PARAM_SCAN_WINDOW, sizeof(scan_window), &scan_window);
        0x0021c2d8:    aa0d        ..      ADD      r2,sp,#0x34
        0x0021c2da:    2102        .!      MOVS     r1,#2
        0x0021c2dc:    f2402043    @.C     MOV      r0,#0x243
        0x0021c2e0:    f636f848    6.H.    BL       le_scan_set_param ; 0x52374
;;;103        le_scan_set_param(GAP_PARAM_SCAN_FILTER_POLICY, sizeof(scan_filter_policy),
        0x0021c2e4:    aa0e        ..      ADD      r2,sp,#0x38
        0x0021c2e6:    2101        .!      MOVS     r1,#1
        0x0021c2e8:    f44f7011    O..p    MOV      r0,#0x244
        0x0021c2ec:    f636f842    6.B.    BL       le_scan_set_param ; 0x52374
;;;104                          &scan_filter_policy);
;;;105        le_scan_set_param(GAP_PARAM_SCAN_FILTER_DUPLICATES, sizeof(scan_filter_duplicate),
        0x0021c2f0:    aa0f        ..      ADD      r2,sp,#0x3c
        0x0021c2f2:    2101        .!      MOVS     r1,#1
        0x0021c2f4:    f2402045    @.E     MOV      r0,#0x245
        0x0021c2f8:    f636f83c    6.<.    BL       le_scan_set_param ; 0x52374
;;;106                          &scan_filter_duplicate);
;;;107    
;;;108        /* Setup the GAP Bond Manager */
;;;109        gap_set_param(GAP_PARAM_BOND_PAIRING_MODE, sizeof(auth_pair_mode), &auth_pair_mode);
        0x0021c2fc:    aa0a        ..      ADD      r2,sp,#0x28
        0x0021c2fe:    2101        .!      MOVS     r1,#1
        0x0021c300:    f2402002    @..     MOV      r0,#0x202
        0x0021c304:    f62ffe51    /.Q.    BL       gap_set_param ; 0x4bfaa
;;;110        gap_set_param(GAP_PARAM_BOND_AUTHEN_REQUIREMENTS_FLAGS, sizeof(auth_flags), &auth_flags);
        0x0021c308:    aa0b        ..      ADD      r2,sp,#0x2c
        0x0021c30a:    2102        .!      MOVS     r1,#2
        0x0021c30c:    f2402003    @..     MOV      r0,#0x203
        0x0021c310:    f62ffe4b    /.K.    BL       gap_set_param ; 0x4bfaa
;;;111        gap_set_param(GAP_PARAM_BOND_IO_CAPABILITIES, sizeof(auth_io_cap), &auth_io_cap);
        0x0021c314:    aa10        ..      ADD      r2,sp,#0x40
        0x0021c316:    2101        .!      MOVS     r1,#1
        0x0021c318:    f44f7001    O..p    MOV      r0,#0x204
        0x0021c31c:    f62ffe45    /.E.    BL       gap_set_param ; 0x4bfaa
;;;112        gap_set_param(GAP_PARAM_BOND_OOB_ENABLED, sizeof(auth_oob), &auth_oob);
        0x0021c320:    aa11        ..      ADD      r2,sp,#0x44
        0x0021c322:    2101        .!      MOVS     r1,#1
        0x0021c324:    f2402005    @..     MOV      r0,#0x205
        0x0021c328:    f62ffe3f    /.?.    BL       gap_set_param ; 0x4bfaa
;;;113        le_bond_set_param(GAP_PARAM_BOND_FIXED_PASSKEY, sizeof(auth_fix_passkey), &auth_fix_passkey);
        0x0021c32c:    aa13        ..      ADD      r2,sp,#0x4c
        0x0021c32e:    2104        .!      MOVS     r1,#4
        0x0021c330:    f2402011    @..     MOV      r0,#0x211
        0x0021c334:    f62fff5b    /.[.    BL       le_bond_set_param ; 0x4c1ee
;;;114        le_bond_set_param(GAP_PARAM_BOND_FIXED_PASSKEY_ENABLE, sizeof(auth_use_fix_passkey),
        0x0021c338:    aa12        ..      ADD      r2,sp,#0x48
        0x0021c33a:    2101        .!      MOVS     r1,#1
        0x0021c33c:    f2402012    @..     MOV      r0,#0x212
        0x0021c340:    f62fff55    /.U.    BL       le_bond_set_param ; 0x4c1ee
;;;115                          &auth_use_fix_passkey);
;;;116        le_bond_set_param(GAP_PARAM_BOND_SEC_REQ_ENABLE, sizeof(auth_sec_req_enable), &auth_sec_req_enable);
        0x0021c344:    aa14        ..      ADD      r2,sp,#0x50
        0x0021c346:    2101        .!      MOVS     r1,#1
        0x0021c348:    f2402013    @..     MOV      r0,#0x213
        0x0021c34c:    f62fff4f    /.O.    BL       le_bond_set_param ; 0x4c1ee
;;;117        le_bond_set_param(GAP_PARAM_BOND_SEC_REQ_REQUIREMENT, sizeof(auth_sec_req_flags),
        0x0021c350:    aa15        ..      ADD      r2,sp,#0x54
        0x0021c352:    2102        .!      MOVS     r1,#2
        0x0021c354:    f44f7005    O..p    MOV      r0,#0x214
        0x0021c358:    f62fff49    /.I.    BL       le_bond_set_param ; 0x4c1ee
;;;118                          &auth_sec_req_flags);
;;;119    
;;;120        /* register gap message callback */
;;;121        le_register_app_cb(app_gap_callback);
        0x0021c35c:    481c        .H      LDR      r0,[pc,#112] ; [0x21c3d0] = 0x20a443
        0x0021c35e:    f630fc70    0.p.    BL       le_register_app_cb ; 0x4cc42
;;;122    }
        0x0021c362:    b019        ..      ADD      sp,sp,#0x64
        0x0021c364:    bd00        ..      POP      {pc}
    app_le_profile_init
;;;123    
;;;124    /**
;;;125     * @brief  Add GATT clients and register callbacks
;;;126     * @return void
;;;127     */
;;;128    void app_le_profile_init(void)
;;;129    {
        0x0021c366:    b510        ..      PUSH     {r4,lr}
;;;130        client_init(3);
        0x0021c368:    2003        .       MOVS     r0,#3
        0x0021c36a:    f631ffe9    1...    BL       client_init ; 0x4e340
;;;131        gaps_client_id  = gaps_add_client(app_client_callback, APP_MAX_LINKS);
        0x0021c36e:    2104        .!      MOVS     r1,#4
        0x0021c370:    4818        .H      LDR      r0,[pc,#96] ; [0x21c3d4] = 0x20a4f3
        0x0021c372:    f7edf99a    ....    BL       gaps_add_client ; 0x2096aa
        0x0021c376:    4918        .I      LDR      r1,[pc,#96] ; [0x21c3d8] = 0x20d27e
        0x0021c378:    7008        .p      STRB     r0,[r1,#0]
;;;132        simple_ble_client_id = simp_ble_add_client(app_client_callback, APP_MAX_LINKS);
        0x0021c37a:    2104        .!      MOVS     r1,#4
        0x0021c37c:    4815        .H      LDR      r0,[pc,#84] ; [0x21c3d4] = 0x20a4f3
        0x0021c37e:    f7ecfc77    ..w.    BL       simp_ble_add_client ; 0x208c70
        0x0021c382:    4916        .I      LDR      r1,[pc,#88] ; [0x21c3dc] = 0x20d27d
        0x0021c384:    7008        .p      STRB     r0,[r1,#0]
;;;133        bas_client_id = bas_add_client(app_client_callback, APP_MAX_LINKS);
        0x0021c386:    2104        .!      MOVS     r1,#4
        0x0021c388:    4812        .H      LDR      r0,[pc,#72] ; [0x21c3d4] = 0x20a4f3
        0x0021c38a:    f7ecff37    ..7.    BL       bas_add_client ; 0x2091fc
        0x0021c38e:    4914        .I      LDR      r1,[pc,#80] ; [0x21c3e0] = 0x20d27f
        0x0021c390:    7008        .p      STRB     r0,[r1,#0]
;;;134    }
        0x0021c392:    bd10        ..      POP      {r4,pc}
    board_init
;;;135    
;;;136    /**
;;;137     * @brief    Contains the initialization of pinmux settings and pad settings
;;;138     * @note     All the pinmux settings and pad settings shall be initiated in this function,
;;;139     *           but if legacy driver is used, the initialization of pinmux setting and pad setting
;;;140     *           should be peformed with the IO initializing.
;;;141     * @return   void
;;;142     */
;;;143    void board_init(void)
;;;144    {
;;;145    
;;;146    }
        0x0021c394:    4770        pG      BX       lr
    driver_init
;;;147    
;;;148    /**
;;;149     * @brief    Contains the initialization of peripherals
;;;150     * @note     Both new architecture driver and legacy driver initialization method can be used
;;;151     * @return   void
;;;152     */
;;;153    void driver_init(void)
;;;154    {
;;;155    
;;;156    }
        0x0021c396:    4770        pG      BX       lr
    pwr_mgr_init
;;;157    
;;;158    /**
;;;159     * @brief    Contains the power mode settings
;;;160     * @return   void
;;;161     */
;;;162    void pwr_mgr_init(void)
;;;163    {
;;;164    }
        0x0021c398:    4770        pG      BX       lr
    task_init
;;;165    
;;;166    /**
;;;167     * @brief    Contains the initialization of all tasks
;;;168     * @note     There is only one task in BLE Central APP, thus only one APP task is init here
;;;169     * @return   void
;;;170     */
;;;171    void task_init(void)
;;;172    {
;;;173        app_task_init();
        0x0021c39a:    f7ffbf3d    ..=.    B.W      app_task_init ; 0x21c218
    main
;;;174    }
;;;175    
;;;176    /**
;;;177     * @brief    Entry of APP code
;;;178     * @return   int (To avoid compile warning)
;;;179     */
;;;180    int main(void)
;;;181    {
        0x0021c39e:    b510        ..      PUSH     {r4,lr}
;;;182    	mxchip_qc_init();
        0x0021c3a0:    f7effa37    ..7.    BL       mxchip_qc_init ; 0x20b812
;;;183        extern uint32_t random_seed_value;
;;;184        srand(random_seed_value);
        0x0021c3a4:    480f        .H      LDR      r0,[pc,#60] ; [0x21c3e4] = 0x20d0a4
        0x0021c3a6:    6800        .h      LDR      r0,[r0,#0]
        0x0021c3a8:    f7effd24    ..$.    BL       srand ; 0x20bdf4
;;;185        board_init();
;;;186        le_gap_init(APP_MAX_LINKS);
        0x0021c3ac:    2004        .       MOVS     r0,#4
        0x0021c3ae:    f630fc05    0...    BL       le_gap_init ; 0x4cbbc
;;;187        gap_lib_init();
        0x0021c3b2:    f000f863    ..c.    BL       gap_lib_init ; 0x21c47c
;;;188        app_le_gap_init();
        0x0021c3b6:    f7ffff51    ..Q.    BL       app_le_gap_init ; 0x21c25c
;;;189        app_le_profile_init();
        0x0021c3ba:    f7ffffd4    ....    BL       app_le_profile_init ; 0x21c366
        0x0021c3be:    f7ffff2b    ..+.    BL       app_task_init ; 0x21c218
;;;190        pwr_mgr_init();
;;;191        task_init();
;;;192        os_sched_start();
        0x0021c3c2:    f60af9fe    ....    BL       os_sched_start ; 0x267c2
;;;193    
;;;194        return 0;
        0x0021c3c6:    2000        .       MOVS     r0,#0
;;;195    }
        0x0021c3c8:    bd10        ..      POP      {r4,pc}
    $d
        0x0021c3ca:    0000        ..      DCW    0
        0x0021c3cc:    0020c0a0    .. .    DCD    2146464
        0x0021c3d0:    0020a443    C. .    DCD    2139203
        0x0021c3d4:    0020a4f3    .. .    DCD    2139379
        0x0021c3d8:    0020d27e    ~. .    DCD    2151038
        0x0021c3dc:    0020d27d    }. .    DCD    2151037
        0x0021c3e0:    0020d27f    .. .    DCD    2151039
        0x0021c3e4:    0020d0a4    .. .    DCD    2150564
    $t
    .text
    link_mgr_add_device
;;; ..\..\..\src\sample\ble_central\link_mgr.c
;;;66     {
        0x0021c3e8:    e92d41f0    -..A    PUSH     {r4-r8,lr}
        0x0021c3ec:    4d15        .M      LDR      r5,[pc,#84] ; [0x21c444] = 0x20d280
;;; ..\..\..\src\sample\ble_central\link_mgr.c (66)
        0x0021c3ee:    4607        .F      MOV      r7,r0
        0x0021c3f0:    4688        .F      MOV      r8,r1
        0x0021c3f2:    7828        (x      LDRB     r0,[r5,#0]
        0x0021c3f4:    2806        .(      CMP      r0,#6
        0x0021c3f6:    d21e        ..      BCS      0x21c436 ; link_mgr_add_device + 78
;;;67         /* If result count not at max */
;;;68         if (dev_list_count < APP_MAX_DEVICE_INFO)
;;;69         {
;;;70             uint8_t i;
;;;71             /* Check if device is already in device list*/
;;;72             for (i = 0; i < dev_list_count; i++)
        0x0021c3f8:    2400        .$      MOVS     r4,#0
        0x0021c3fa:    1c6e        n.      ADDS     r6,r5,#1
        0x0021c3fc:    e009        ..      B        0x21c412 ; link_mgr_add_device + 42
        0x0021c3fe:    ebc400c4    ....    RSB      r0,r4,r4,LSL #3
        0x0021c402:    1981        ..      ADDS     r1,r0,r6
        0x0021c404:    2206        ."      MOVS     r2,#6
        0x0021c406:    4638        8F      MOV      r0,r7
        0x0021c408:    f63dfcfc    =...    BL       memcmp ; 0x59e04
        0x0021c40c:    b180        ..      CBZ      r0,0x21c430 ; link_mgr_add_device + 72
        0x0021c40e:    1c64        d.      ADDS     r4,r4,#1
        0x0021c410:    b2e4        ..      UXTB     r4,r4
        0x0021c412:    7828        (x      LDRB     r0,[r5,#0]
        0x0021c414:    4284        .B      CMP      r4,r0
        0x0021c416:    d3f2        ..      BCC      0x21c3fe ; link_mgr_add_device + 22
;;;73             {
;;;74                 if (memcmp(bd_addr, dev_list[i].bd_addr, GAP_BD_ADDR_LEN) == 0)
;;;75                 {
;;;76                     return true;
;;;77                 }
;;;78             }
;;;79     
;;;80             /*Add addr to device list list*/
;;;81             memcpy(dev_list[dev_list_count].bd_addr, bd_addr, GAP_BD_ADDR_LEN);
        0x0021c418:    b2c0        ..      UXTB     r0,r0
        0x0021c41a:    ebc001c0    ....    RSB      r1,r0,r0,LSL #3
        0x0021c41e:    4431        1D      ADD      r1,r1,r6
        0x0021c420:    683a        :h      LDR      r2,[r7,#0]
        0x0021c422:    600a        .`      STR      r2,[r1,#0]
        0x0021c424:    88ba        ..      LDRH     r2,[r7,#4]
        0x0021c426:    808a        ..      STRH     r2,[r1,#4]
;;;82             dev_list[dev_list_count].bd_type = bd_type;
        0x0021c428:    f8818006    ....    STRB     r8,[r1,#6]
        0x0021c42c:    1c40        @.      ADDS     r0,r0,#1
;;;83     
;;;84             /*Increment device list count*/
;;;85             dev_list_count++;
        0x0021c42e:    7028        (p      STRB     r0,[r5,#0]
        0x0021c430:    2001        .       MOVS     r0,#1
        0x0021c432:    e8bd81f0    ....    POP      {r4-r8,pc}
;;;86         }
;;;87         else
;;;88         {
;;;89             return false;
        0x0021c436:    2000        .       MOVS     r0,#0
;;;90         }
;;;91         return true;
;;;92     }
        0x0021c438:    e7fb        ..      B        0x21c432 ; link_mgr_add_device + 74
    link_mgr_clear_device_list
;;;93     
;;;94     /**
;;;95      * @brief Clear device list.
;;;96      * @retval None.
;;;97      */
;;;98     void link_mgr_clear_device_list(void)
;;;99     {
;;;100        dev_list_count = 0;
        0x0021c43a:    4902        .I      LDR      r1,[pc,#8] ; [0x21c444] = 0x20d280
        0x0021c43c:    2000        .       MOVS     r0,#0
        0x0021c43e:    7008        .p      STRB     r0,[r1,#0]
;;;101    }
        0x0021c440:    4770        pG      BX       lr
    $d
        0x0021c442:    0000        ..      DCW    0
        0x0021c444:    0020d280    .. .    DCD    2151040
    $t
    .text
    gap_lib_handle_btif_msg
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (31)
        0x0021c448:    b510        ..      PUSH     {r4,lr}
        0x0021c44a:    2201        ."      MOVS     r2,#1
        0x0021c44c:    700a        .p      STRB     r2,[r1,#0]
        0x0021c44e:    8841        A.      LDRH     r1,[r0,#2]
        0x0021c450:    2400        .$      MOVS     r4,#0
        0x0021c452:    290e        .)      CMP      r1,#0xe
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (31)
        0x0021c454:    d004        ..      BEQ      0x21c460 ; gap_lib_handle_btif_msg + 24
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (35)
        0x0021c456:    290f        .)      CMP      r1,#0xf
        0x0021c458:    d00b        ..      BEQ      0x21c472 ; gap_lib_handle_btif_msg + 42
        0x0021c45a:    2922        ")      CMP      r1,#0x22
        0x0021c45c:    d10c        ..      BNE      0x21c478 ; gap_lib_handle_btif_msg + 48
        0x0021c45e:    e003        ..      B        0x21c468 ; gap_lib_handle_btif_msg + 32
        0x0021c460:    1d00        ..      ADDS     r0,r0,#4
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (39)
        0x0021c462:    f000f85a    ..Z.    BL       le_handle_vendor_cmd_rsp ; 0x21c51a
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (40)
        0x0021c466:    e007        ..      B        0x21c478 ; gap_lib_handle_btif_msg + 48
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (44)
        0x0021c468:    8880        ..      LDRH     r0,[r0,#4]
        0x0021c46a:    f7effb02    ....    BL       le_handle_sw_reset_rsp ; 0x20ba72
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (45)
        0x0021c46e:    2401        .$      MOVS     r4,#1
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (46)
        0x0021c470:    e002        ..      B        0x21c478 ; gap_lib_handle_btif_msg + 48
        0x0021c472:    1d00        ..      ADDS     r0,r0,#4
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (109)
        0x0021c474:    f000f87d    ..}.    BL       le_handle_vendor_evt_info ; 0x21c572
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (117)
        0x0021c478:    4620         F      MOV      r0,r4
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (118)
        0x0021c47a:    bd10        ..      POP      {r4,pc}
    gap_lib_init
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (121)
        0x0021c47c:    b530        0.      PUSH     {r4,r5,lr}
        0x0021c47e:    b087        ..      SUB      sp,sp,#0x1c
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (122)
        0x0021c480:    2000        .       MOVS     r0,#0
        0x0021c482:    9005        ..      STR      r0,[sp,#0x14]
        0x0021c484:    2401        .$      MOVS     r4,#1
        0x0021c486:    9006        ..      STR      r0,[sp,#0x18]
        0x0021c488:    e9cd4000    ...@    STRD     r4,r0,[sp,#0]
        0x0021c48c:    4d0f        .M      LDR      r5,[pc,#60] ; [0x21c4cc] = 0x21103500
        0x0021c48e:    9003        ..      STR      r0,[sp,#0xc]
        0x0021c490:    9004        ..      STR      r0,[sp,#0x10]
        0x0021c492:    9002        ..      STR      r0,[sp,#8]
        0x0021c494:    230d        .#      MOVS     r3,#0xd
        0x0021c496:    2208        ."      MOVS     r2,#8
        0x0021c498:    490b        .I      LDR      r1,[pc,#44] ; [0x21c4c8] = 0x8802528
        0x0021c49a:    4628        (F      MOV      r0,r5
        0x0021c49c:    f5ebfadf    ....    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (126)
        0x0021c4a0:    4909        .I      LDR      r1,[pc,#36] ; [0x21c4c8] = 0x8802528
        0x0021c4a2:    9401        ..      STR      r4,[sp,#4]
        0x0021c4a4:    9402        ..      STR      r4,[sp,#8]
        0x0021c4a6:    9403        ..      STR      r4,[sp,#0xc]
        0x0021c4a8:    9404        ..      STR      r4,[sp,#0x10]
        0x0021c4aa:    2300        .#      MOVS     r3,#0
        0x0021c4ac:    2206        ."      MOVS     r2,#6
        0x0021c4ae:    31f0        .1      ADDS     r1,r1,#0xf0
        0x0021c4b0:    4628        (F      MOV      r0,r5
        0x0021c4b2:    9400        ..      STR      r4,[sp,#0]
        0x0021c4b4:    f5ebfad3    ....    BL       log_buffer ; 0x7a5e
;;; ..\..\..\src\app\gap_lib\gap_lib\gap_lib.c (129)
        0x0021c4b8:    f2af0073    ..s.    ADR      r0,{pc}-0x6f ; 0x21c449
        0x0021c4bc:    b007        ..      ADD      sp,sp,#0x1c
        0x0021c4be:    e8bd4030    ..0@    POP      {r4,r5,lr}
        0x0021c4c2:    f62fbca5    /...    B        gap_register_extend_cb ; 0x4be10
    $d
        0x0021c4c6:    0000        ..      DCW    0
        0x0021c4c8:    08802528    (%..    DCD    142615848
        0x0021c4cc:    21103500    .5.!    DCD    554710272
    $t
    .text
    gap_set_lps_bootup_active_time
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (51)
        0x0021c4d0:    b508        ..      PUSH     {r3,lr}
        0x0021c4d2:    1ec1        ..      SUBS     r1,r0,#3
        0x0021c4d4:    f24072fe    @..r    MOV      r2,#0x7fe
        0x0021c4d8:    4291        .B      CMP      r1,r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (51)
        0x0021c4da:    d301        ..      BCC      0x21c4e0 ; gap_set_lps_bootup_active_time + 16
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (56)
        0x0021c4dc:    2000        .       MOVS     r0,#0
        0x0021c4de:    bd08        ..      POP      {r3,pc}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (58)
        0x0021c4e0:    2105        .!      MOVS     r1,#5
        0x0021c4e2:    f88d1000    ....    STRB     r1,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (59)
        0x0021c4e6:    f88d0001    ....    STRB     r0,[sp,#1]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (60)
        0x0021c4ea:    0a00        ..      LSRS     r0,r0,#8
        0x0021c4ec:    f88d0002    ....    STRB     r0,[sp,#2]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (62)
        0x0021c4f0:    466a        jF      MOV      r2,sp
        0x0021c4f2:    2103        .!      MOVS     r1,#3
        0x0021c4f4:    f64f406e    O.n@    MOV      r0,#0xfc6e
        0x0021c4f8:    f604fff8    ....    BL       btif_vendor_cmd_req ; 0x214ec
        0x0021c4fc:    2800        .(      CMP      r0,#0
        0x0021c4fe:    d0ee        ..      BEQ      0x21c4de ; gap_set_lps_bootup_active_time + 14
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (64)
        0x0021c500:    2001        .       MOVS     r0,#1
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (67)
        0x0021c502:    bd08        ..      POP      {r3,pc}
    lps_get_wakeup_time
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (70)
        0x0021c504:    b530        0.      PUSH     {r4,r5,lr}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (71)
        0x0021c506:    4b33        3K      LDR      r3,[pc,#204] ; [0x21c5d4] = 0x201b1c
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (72)
        0x0021c508:    681d        .h      LDR      r5,[r3,#0]
        0x0021c50a:    1d1b        ..      ADDS     r3,r3,#4
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (73)
        0x0021c50c:    681c        .h      LDR      r4,[r3,#0]
        0x0021c50e:    1d1b        ..      ADDS     r3,r3,#4
        0x0021c510:    681b        .h      LDR      r3,[r3,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (75)
        0x0021c512:    6005        .`      STR      r5,[r0,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (76)
        0x0021c514:    600c        .`      STR      r4,[r1,#0]
        0x0021c516:    6013        .`      STR      r3,[r2,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (77)
        0x0021c518:    bd30        0.      POP      {r4,r5,pc}
    le_handle_vendor_cmd_rsp
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (177)
        0x0021c51a:    b538        8.      PUSH     {r3-r5,lr}
        0x0021c51c:    4604        .F      MOV      r4,r0
        0x0021c51e:    8800        ..      LDRH     r0,[r0,#0]
        0x0021c520:    f64f456e    O.nE    MOV      r5,#0xfc6e
        0x0021c524:    42a8        .B      CMP      r0,r5
        0x0021c526:    d108        ..      BNE      0x21c53a ; le_handle_vendor_cmd_rsp + 32
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (267)
        0x0021c528:    8860        `.      LDRH     r0,[r4,#2]
        0x0021c52a:    f8ad0000    ....    STRH     r0,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (268)
        0x0021c52e:    482a        *H      LDR      r0,[pc,#168] ; [0x21c5d8] = 0x202e48
        0x0021c530:    6802        .h      LDR      r2,[r0,#0]
        0x0021c532:    b112        ..      CBZ      r2,0x21c53a ; le_handle_vendor_cmd_rsp + 32
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (270)
        0x0021c534:    4669        iF      MOV      r1,sp
        0x0021c536:    20a6        .       MOVS     r0,#0xa6
        0x0021c538:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (276)
        0x0021c53a:    8820         .      LDRH     r0,[r4,#0]
        0x0021c53c:    f5a0417d    ..}A    SUB      r1,r0,#0xfd00
        0x0021c540:    3980        .9      SUBS     r1,r1,#0x80
        0x0021c542:    d00d        ..      BEQ      0x21c560 ; le_handle_vendor_cmd_rsp + 70
        0x0021c544:    1e49        I.      SUBS     r1,r1,#1
        0x0021c546:    d00b        ..      BEQ      0x21c560 ; le_handle_vendor_cmd_rsp + 70
        0x0021c548:    1e49        I.      SUBS     r1,r1,#1
        0x0021c54a:    d009        ..      BEQ      0x21c560 ; le_handle_vendor_cmd_rsp + 70
        0x0021c54c:    42a8        .B      CMP      r0,r5
        0x0021c54e:    d007        ..      BEQ      0x21c560 ; le_handle_vendor_cmd_rsp + 70
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (279)
        0x0021c550:    4822        "H      LDR      r0,[pc,#136] ; [0x21c5dc] = 0x202df4
        0x0021c552:    6802        .h      LDR      r2,[r0,#0]
        0x0021c554:    2a00        .*      CMP      r2,#0
        0x0021c556:    d003        ..      BEQ      0x21c560 ; le_handle_vendor_cmd_rsp + 70
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (282)
        0x0021c558:    2003        .       MOVS     r0,#3
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (284)
        0x0021c55a:    4669        iF      MOV      r1,sp
        0x0021c55c:    9400        ..      STR      r4,[sp,#0]
        0x0021c55e:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (287)
        0x0021c560:    bd38        8.      POP      {r3-r5,pc}
    gap_vendor_cmd_req
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (291)
        0x0021c562:    b510        ..      PUSH     {r4,lr}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (292)
        0x0021c564:    f604ffc2    ....    BL       btif_vendor_cmd_req ; 0x214ec
        0x0021c568:    b108        ..      CBZ      r0,0x21c56e ; gap_vendor_cmd_req + 12
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (294)
        0x0021c56a:    2000        .       MOVS     r0,#0
        0x0021c56c:    bd10        ..      POP      {r4,pc}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (296)
        0x0021c56e:    2007        .       MOVS     r0,#7
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (297)
        0x0021c570:    bd10        ..      POP      {r4,pc}
    le_handle_vendor_evt_info
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (300)
        0x0021c572:    4601        .F      MOV      r1,r0
        0x0021c574:    4819        .H      LDR      r0,[pc,#100] ; [0x21c5dc] = 0x202df4
        0x0021c576:    b508        ..      PUSH     {r3,lr}
        0x0021c578:    6802        .h      LDR      r2,[r0,#0]
        0x0021c57a:    2a00        .*      CMP      r2,#0
        0x0021c57c:    d003        ..      BEQ      0x21c586 ; le_handle_vendor_evt_info + 20
        0x0021c57e:    9100        ..      STR      r1,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (304)
        0x0021c580:    2004        .       MOVS     r0,#4
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (306)
        0x0021c582:    4669        iF      MOV      r1,sp
        0x0021c584:    4790        .G      BLX      r2
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (308)
        0x0021c586:    bd08        ..      POP      {r3,pc}
    le_vendor_modify_bt_le_fw_policy
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (313)
        0x0021c588:    b50e        ..      PUSH     {r1-r3,lr}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (316)
        0x0021c58a:    2210        ."      MOVS     r2,#0x10
        0x0021c58c:    f88d2000    ...     STRB     r2,[sp,#0]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (317)
        0x0021c590:    f88d0001    ....    STRB     r0,[sp,#1]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (318)
        0x0021c594:    0a02        ..      LSRS     r2,r0,#8
        0x0021c596:    f88d2002    ...     STRB     r2,[sp,#2]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (319)
        0x0021c59a:    0c02        ..      LSRS     r2,r0,#16
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (320)
        0x0021c59c:    0e00        ..      LSRS     r0,r0,#24
        0x0021c59e:    f88d0004    ....    STRB     r0,[sp,#4]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (321)
        0x0021c5a2:    f88d1005    ....    STRB     r1,[sp,#5]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (322)
        0x0021c5a6:    0a08        ..      LSRS     r0,r1,#8
        0x0021c5a8:    f88d0006    ....    STRB     r0,[sp,#6]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (323)
        0x0021c5ac:    0c08        ..      LSRS     r0,r1,#16
        0x0021c5ae:    f88d0007    ....    STRB     r0,[sp,#7]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (324)
        0x0021c5b2:    0e08        ..      LSRS     r0,r1,#24
        0x0021c5b4:    f88d2003    ...     STRB     r2,[sp,#3]
        0x0021c5b8:    f88d0008    ....    STRB     r0,[sp,#8]
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (326)
        0x0021c5bc:    466a        jF      MOV      r2,sp
        0x0021c5be:    2109        .!      MOVS     r1,#9
        0x0021c5c0:    f64f5080    O..P    MOV      r0,#0xfd80
        0x0021c5c4:    f604ff92    ....    BL       btif_vendor_cmd_req ; 0x214ec
        0x0021c5c8:    b108        ..      CBZ      r0,0x21c5ce ; le_vendor_modify_bt_le_fw_policy + 70
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (328)
        0x0021c5ca:    2000        .       MOVS     r0,#0
        0x0021c5cc:    bd0e        ..      POP      {r1-r3,pc}
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (330)
        0x0021c5ce:    2007        .       MOVS     r0,#7
;;; ..\..\..\src\app\gap_lib\extension\gap_vendor_cmd.c (337)
        0x0021c5d0:    bd0e        ..      POP      {r1-r3,pc}
    $d
        0x0021c5d2:    0000        ..      DCW    0
        0x0021c5d4:    00201b1c    .. .    DCD    2104092
        0x0021c5d8:    00202e48    H. .    DCD    2109000
        0x0021c5dc:    00202df4    .- .    DCD    2108916
    $t
    .text
    __2sprintf
        0x0021c5e0:    b40f        ..      PUSH     {r0-r3}
        0x0021c5e2:    b51c        ..      PUSH     {r2-r4,lr}
        0x0021c5e4:    4b07        .K      LDR      r3,[pc,#28] ; [0x21c604] = 0x1a5
        0x0021c5e6:    aa06        ..      ADD      r2,sp,#0x18
        0x0021c5e8:    447b        {D      ADD      r3,r3,pc
        0x0021c5ea:    4669        iF      MOV      r1,sp
        0x0021c5ec:    9000        ..      STR      r0,[sp,#0]
        0x0021c5ee:    9805        ..      LDR      r0,[sp,#0x14]
        0x0021c5f0:    f000f8bb    ....    BL       _printf_char_common ; 0x21c76a
        0x0021c5f4:    2000        .       MOVS     r0,#0
        0x0021c5f6:    4669        iF      MOV      r1,sp
        0x0021c5f8:    f000f8ca    ....    BL       _sputc ; 0x21c790
        0x0021c5fc:    bc1c        ..      POP      {r2-r4}
        0x0021c5fe:    f85dfb14    ]...    LDR      pc,[sp],#0x14
    $d
        0x0021c602:    0000        ..      DCW    0
        0x0021c604:    000001a5    ....    DCD    421
    $t
    .text
    _printf_pre_padding
        0x0021c608:    b570        p.      PUSH     {r4-r6,lr}
        0x0021c60a:    4604        .F      MOV      r4,r0
        0x0021c60c:    6985        .i      LDR      r5,[r0,#0x18]
        0x0021c60e:    6800        .h      LDR      r0,[r0,#0]
        0x0021c610:    06c1        ..      LSLS     r1,r0,#27
        0x0021c612:    d501        ..      BPL      0x21c618 ; _printf_pre_padding + 16
        0x0021c614:    2630        0&      MOVS     r6,#0x30
        0x0021c616:    e000        ..      B        0x21c61a ; _printf_pre_padding + 18
        0x0021c618:    2620         &      MOVS     r6,#0x20
        0x0021c61a:    07c0        ..      LSLS     r0,r0,#31
        0x0021c61c:    d007        ..      BEQ      0x21c62e ; _printf_pre_padding + 38
        0x0021c61e:    bd70        p.      POP      {r4-r6,pc}
        0x0021c620:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0021c624:    4630        0F      MOV      r0,r6
        0x0021c626:    4790        .G      BLX      r2
        0x0021c628:    6a20         j      LDR      r0,[r4,#0x20]
        0x0021c62a:    1c40        @.      ADDS     r0,r0,#1
        0x0021c62c:    6220         b      STR      r0,[r4,#0x20]
        0x0021c62e:    1e6d        m.      SUBS     r5,r5,#1
        0x0021c630:    d5f6        ..      BPL      0x21c620 ; _printf_pre_padding + 24
        0x0021c632:    bd70        p.      POP      {r4-r6,pc}
    _printf_post_padding
        0x0021c634:    b570        p.      PUSH     {r4-r6,lr}
        0x0021c636:    4604        .F      MOV      r4,r0
        0x0021c638:    6985        .i      LDR      r5,[r0,#0x18]
        0x0021c63a:    7800        .x      LDRB     r0,[r0,#0]
        0x0021c63c:    07c0        ..      LSLS     r0,r0,#31
        0x0021c63e:    d107        ..      BNE      0x21c650 ; _printf_post_padding + 28
        0x0021c640:    bd70        p.      POP      {r4-r6,pc}
        0x0021c642:    e9d42101    ...!    LDRD     r2,r1,[r4,#4]
        0x0021c646:    2020                MOVS     r0,#0x20
        0x0021c648:    4790        .G      BLX      r2
        0x0021c64a:    6a20         j      LDR      r0,[r4,#0x20]
        0x0021c64c:    1c40        @.      ADDS     r0,r0,#1
        0x0021c64e:    6220         b      STR      r0,[r4,#0x20]
        0x0021c650:    1e6d        m.      SUBS     r5,r5,#1
        0x0021c652:    d5f6        ..      BPL      0x21c642 ; _printf_post_padding + 14
        0x0021c654:    bd70        p.      POP      {r4-r6,pc}
        0x0021c656:    0000        ..      MOVS     r0,r0
    .text
    _printf_int_hex
    _printf_longlong_hex
        0x0021c658:    b570        p.      PUSH     {r4-r6,lr}
        0x0021c65a:    4604        .F      MOV      r4,r0
        0x0021c65c:    460d        .F      MOV      r5,r1
        0x0021c65e:    4621        !F      MOV      r1,r4
        0x0021c660:    6810        .h      LDR      r0,[r2,#0]
        0x0021c662:    f3af8000    ....    NOP.W    
        0x0021c666:    8821        !.      LDRH     r1,[r4,#0]
        0x0021c668:    0509        ..      LSLS     r1,r1,#20
        0x0021c66a:    d502        ..      BPL      0x21c672 ; _printf_int_hex + 26
        0x0021c66c:    4a0f        .J      LDR      r2,[pc,#60] ; [0x21c6ac] = 0xfffefa67
        0x0021c66e:    447a        zD      ADD      r2,r2,pc
        0x0021c670:    e002        ..      B        0x21c678 ; _printf_int_hex + 32
        0x0021c672:    4a0e        .J      LDR      r2,[pc,#56] ; [0x21c6ac] = 0xfffefa67
        0x0021c674:    447a        zD      ADD      r2,r2,pc
        0x0021c676:    320e        .2      ADDS     r2,r2,#0xe
        0x0021c678:    2100        .!      MOVS     r1,#0
        0x0021c67a:    f1040324    ..$.    ADD      r3,r4,#0x24
        0x0021c67e:    e005        ..      B        0x21c68c ; _printf_int_hex + 52
        0x0021c680:    f000060f    ....    AND      r6,r0,#0xf
        0x0021c684:    0900        ..      LSRS     r0,r0,#4
        0x0021c686:    5d96        .]      LDRB     r6,[r2,r6]
        0x0021c688:    545e        ^T      STRB     r6,[r3,r1]
        0x0021c68a:    1c49        I.      ADDS     r1,r1,#1
        0x0021c68c:    2800        .(      CMP      r0,#0
        0x0021c68e:    d1f7        ..      BNE      0x21c680 ; _printf_int_hex + 40
        0x0021c690:    7820         x      LDRB     r0,[r4,#0]
        0x0021c692:    2300        .#      MOVS     r3,#0
        0x0021c694:    0700        ..      LSLS     r0,r0,#28
        0x0021c696:    d504        ..      BPL      0x21c6a2 ; _printf_int_hex + 74
        0x0021c698:    2d70        p-      CMP      r5,#0x70
        0x0021c69a:    d002        ..      BEQ      0x21c6a2 ; _printf_int_hex + 74
        0x0021c69c:    b109        ..      CBZ      r1,0x21c6a2 ; _printf_int_hex + 74
        0x0021c69e:    2302        .#      MOVS     r3,#2
        0x0021c6a0:    3211        .2      ADDS     r2,r2,#0x11
        0x0021c6a2:    4620         F      MOV      r0,r4
        0x0021c6a4:    e8bd4070    ..p@    POP      {r4-r6,lr}
        0x0021c6a8:    f7efbbe6    ....    B        _printf_int_common ; 0x20be78
    $d
        0x0021c6ac:    fffefa67    g...    DCD    4294900327
    $t
    .text
    strncmp
        0x0021c6b0:    ea400301    @...    ORR      r3,r0,r1
        0x0021c6b4:    b570        p.      PUSH     {r4-r6,lr}
        0x0021c6b6:    079b        ..      LSLS     r3,r3,#30
        0x0021c6b8:    d12e        ..      BNE      0x21c718 ; strncmp + 104
        0x0021c6ba:    f04f3601    O..6    MOV      r6,#0x1010101
        0x0021c6be:    2a04        .*      CMP      r2,#4
        0x0021c6c0:    d32a        *.      BCC      0x21c718 ; strncmp + 104
        0x0021c6c2:    c808        ..      LDM      r0!,{r3}
        0x0021c6c4:    c910        ..      LDM      r1!,{r4}
        0x0021c6c6:    1b9d        ..      SUBS     r5,r3,r6
        0x0021c6c8:    439d        .C      BICS     r5,r5,r3
        0x0021c6ca:    1f12        ..      SUBS     r2,r2,#4
        0x0021c6cc:    ea1515c6    ....    ANDS     r5,r5,r6,LSL #7
        0x0021c6d0:    d017        ..      BEQ      0x21c702 ; strncmp + 82
        0x0021c6d2:    b2d8        ..      UXTB     r0,r3
        0x0021c6d4:    b2e1        ..      UXTB     r1,r4
        0x0021c6d6:    1a40        @.      SUBS     r0,r0,r1
        0x0021c6d8:    ea506105    P..a    ORRS     r1,r0,r5,LSL #24
        0x0021c6dc:    d110        ..      BNE      0x21c700 ; strncmp + 80
        0x0021c6de:    b298        ..      UXTH     r0,r3
        0x0021c6e0:    b2a1        ..      UXTH     r1,r4
        0x0021c6e2:    1a40        @.      SUBS     r0,r0,r1
        0x0021c6e4:    ea504105    P..A    ORRS     r1,r0,r5,LSL #16
        0x0021c6e8:    d10a        ..      BNE      0x21c700 ; strncmp + 80
        0x0021c6ea:    f023407f    #..@    BIC      r0,r3,#0xff000000
        0x0021c6ee:    f024417f    $..A    BIC      r1,r4,#0xff000000
        0x0021c6f2:    1a40        @.      SUBS     r0,r0,r1
        0x0021c6f4:    ea502105    P..!    ORRS     r1,r0,r5,LSL #8
        0x0021c6f8:    d102        ..      BNE      0x21c700 ; strncmp + 80
        0x0021c6fa:    0e18        ..      LSRS     r0,r3,#24
        0x0021c6fc:    eba06014    ...`    SUB      r0,r0,r4,LSR #24
        0x0021c700:    bd70        p.      POP      {r4-r6,pc}
        0x0021c702:    42a3        .B      CMP      r3,r4
        0x0021c704:    d0db        ..      BEQ      0x21c6be ; strncmp + 14
        0x0021c706:    ba18        ..      REV      r0,r3
        0x0021c708:    ba21        !.      REV      r1,r4
        0x0021c70a:    4288        .B      CMP      r0,r1
        0x0021c70c:    d901        ..      BLS      0x21c712 ; strncmp + 98
        0x0021c70e:    2001        .       MOVS     r0,#1
        0x0021c710:    bd70        p.      POP      {r4-r6,pc}
        0x0021c712:    f04f30ff    O..0    MOV      r0,#0xffffffff
        0x0021c716:    bd70        p.      POP      {r4-r6,pc}
        0x0021c718:    b90a        ..      CBNZ     r2,0x21c71e ; strncmp + 110
        0x0021c71a:    2000        .       MOVS     r0,#0
        0x0021c71c:    bd70        p.      POP      {r4-r6,pc}
        0x0021c71e:    f8103b01    ...;    LDRB     r3,[r0],#1
        0x0021c722:    f8114b01    ...K    LDRB     r4,[r1],#1
        0x0021c726:    b163        c.      CBZ      r3,0x21c742 ; strncmp + 146
        0x0021c728:    42a3        .B      CMP      r3,r4
        0x0021c72a:    d10a        ..      BNE      0x21c742 ; strncmp + 146
        0x0021c72c:    1e52        R.      SUBS     r2,r2,#1
        0x0021c72e:    d008        ..      BEQ      0x21c742 ; strncmp + 146
        0x0021c730:    f8103b01    ...;    LDRB     r3,[r0],#1
        0x0021c734:    f8114b01    ...K    LDRB     r4,[r1],#1
        0x0021c738:    b11b        ..      CBZ      r3,0x21c742 ; strncmp + 146
        0x0021c73a:    42a3        .B      CMP      r3,r4
        0x0021c73c:    d101        ..      BNE      0x21c742 ; strncmp + 146
        0x0021c73e:    1e52        R.      SUBS     r2,r2,#1
        0x0021c740:    d1ed        ..      BNE      0x21c71e ; strncmp + 110
        0x0021c742:    1b18        ..      SUBS     r0,r3,r4
        0x0021c744:    bd70        p.      POP      {r4-r6,pc}
    .text
    strcat
        0x0021c746:    1e42        B.      SUBS     r2,r0,#1
        0x0021c748:    f8123f01    ...?    LDRB     r3,[r2,#1]!
        0x0021c74c:    2b00        .+      CMP      r3,#0
        0x0021c74e:    d1fb        ..      BNE      0x21c748 ; strcat + 2
        0x0021c750:    f8113b01    ...;    LDRB     r3,[r1],#1
        0x0021c754:    2b00        .+      CMP      r3,#0
        0x0021c756:    f8023b01    ...;    STRB     r3,[r2],#1
        0x0021c75a:    d1f9        ..      BNE      0x21c750 ; strcat + 10
        0x0021c75c:    4770        pG      BX       lr
        0x0021c75e:    0000        ..      MOVS     r0,r0
    .text
    _printf_input_char
        0x0021c760:    6901        .i      LDR      r1,[r0,#0x10]
        0x0021c762:    1c4a        J.      ADDS     r2,r1,#1
        0x0021c764:    6102        .a      STR      r2,[r0,#0x10]
        0x0021c766:    7808        .x      LDRB     r0,[r1,#0]
        0x0021c768:    4770        pG      BX       lr
    _printf_char_common
        0x0021c76a:    b500        ..      PUSH     {lr}
        0x0021c76c:    b08f        ..      SUB      sp,sp,#0x3c
        0x0021c76e:    e9cd3101    ...1    STRD     r3,r1,[sp,#4]
        0x0021c772:    2100        .!      MOVS     r1,#0
        0x0021c774:    9105        ..      STR      r1,[sp,#0x14]
        0x0021c776:    4905        .I      LDR      r1,[pc,#20] ; [0x21c78c] = 0xffffffe5
        0x0021c778:    4479        yD      ADD      r1,r1,pc
        0x0021c77a:    e9cd1003    ....    STRD     r1,r0,[sp,#0xc]
        0x0021c77e:    4611        .F      MOV      r1,r2
        0x0021c780:    4668        hF      MOV      r0,sp
        0x0021c782:    f7effa9b    ....    BL       __printf ; 0x20bcbc
        0x0021c786:    b00f        ..      ADD      sp,sp,#0x3c
        0x0021c788:    bd00        ..      POP      {pc}
    $d
        0x0021c78a:    0000        ..      DCW    0
        0x0021c78c:    ffffffe5    ....    DCD    4294967269
    $t
    .text
    _sputc
        0x0021c790:    680a        .h      LDR      r2,[r1,#0]
        0x0021c792:    f8020b01    ....    STRB     r0,[r2],#1
        0x0021c796:    600a        .`      STR      r2,[r1,#0]
        0x0021c798:    4770        pG      BX       lr
    x$fpl$fpinit
    $v0
    _fp_init
        0x0021c79a:    f04f7040    O.@p    MOV      r0,#0x3000000
        0x0021c79e:    eee10a10    ....    VMSR     FPSCR,r0
    __fplib_config_fpu_vfp
    __fplib_config_pureend_doubles
        0x0021c7a2:    4770        pG      BX       lr
    $d.realdata
    .constdata
    bas_client_cbs
        0x0021c7a4:    00208ef1    .. .    DCD    2133745
        0x0021c7a8:    00208fd9    .. .    DCD    2133977
        0x0021c7ac:    002090b3    .. .    DCD    2134195
        0x0021c7b0:    00209055    U. .    DCD    2134101
        0x0021c7b4:    00209183    .. .    DCD    2134403
        0x0021c7b8:    002091bd    .. .    DCD    2134461
    __func__
        0x0021c7bc:    5f736162    bas_    DCD    1601397090
        0x0021c7c0:    5f646461    add_    DCD    1600414817
        0x0021c7c4:    65696c63    clie    DCD    1701407843
        0x0021c7c8:    0000746e    nt..    DCD    29806
    .constdata
    gaps_client_cbs
        0x0021c7cc:    00209445    E. .    DCD    2135109
        0x0021c7d0:    00209501    .. .    DCD    2135297
        0x0021c7d4:    00209599    .. .    DCD    2135449
        0x0021c7d8:    00000000    ....    DCD    0
        0x0021c7dc:    00000000    ....    DCD    0
        0x0021c7e0:    0020964d    M. .    DCD    2135629
    __func__
        0x0021c7e4:    73706167    gaps    DCD    1936744807
        0x0021c7e8:    6464615f    _add    DCD    1684300127
        0x0021c7ec:    696c635f    _cli    DCD    1768711007
        0x0021c7f0:    00746e65    ent.    DCD    7630437
    .constdata
    user_cmd_table
        0x0021c7f4:    0020cf38    8. .    DCD    2150200
        0x0021c7f8:    0020cbf4    .. .    DCD    2149364
        0x0021c7fc:    0020c710    .. .    DCD    2148112
        0x0021c800:    0020978f    .. .    DCD    2135951
        0x0021c804:    0020cf24    $. .    DCD    2150180
        0x0021c808:    0020cda0    .. .    DCD    2149792
        0x0021c80c:    0020ce14    .. .    DCD    2149908
        0x0021c810:    0020972d    -. .    DCD    2135853
        0x0021c814:    0020cea0    .. .    DCD    2150048
        0x0021c818:    0020ca10    .. .    DCD    2148880
        0x0021c81c:    0020cccc    .. .    DCD    2149580
        0x0021c820:    002097bd    .. .    DCD    2135997
        0x0021c824:    0020ced8    .. .    DCD    2150104
        0x0021c828:    0020cab0    .. .    DCD    2149040
        0x0021c82c:    0020c4c8    .. .    DCD    2147528
        0x0021c830:    002097c3    .. .    DCD    2136003
        0x0021c834:    0020cef0    .. .    DCD    2150128
        0x0021c838:    0020ca24    $. .    DCD    2148900
        0x0021c83c:    0020ce68    h. .    DCD    2149992
        0x0021c840:    00209863    c. .    DCD    2136163
        0x0021c844:    0020cee4    .. .    DCD    2150116
        0x0021c848:    0020cb88    .. .    DCD    2149256
        0x0021c84c:    0020c838    8. .    DCD    2148408
        0x0021c850:    00209869    i. .    DCD    2136169
        0x0021c854:    0020cf6c    l. .    DCD    2150252
        0x0021c858:    0020cc58    X. .    DCD    2149464
        0x0021c85c:    0020c994    .. .    DCD    2148756
        0x0021c860:    00209879    y. .    DCD    2136185
        0x0021c864:    0020cf2c    ,. .    DCD    2150188
        0x0021c868:    0020cdfc    .. .    DCD    2149884
        0x0021c86c:    0020cdac    .. .    DCD    2149804
        0x0021c870:    002098a9    .. .    DCD    2136233
        0x0021c874:    0020cf44    D. .    DCD    2150212
        0x0021c878:    0020ce08    .. .    DCD    2149896
        0x0021c87c:    0020cdd4    .. .    DCD    2149844
        0x0021c880:    0020988d    .. .    DCD    2136205
        0x0021c884:    0020cf10    .. .    DCD    2150160
        0x0021c888:    0020ca74    t. .    DCD    2148980
        0x0021c88c:    0020cc98    .. .    DCD    2149528
        0x0021c890:    00209897    .. .    DCD    2136215
        0x0021c894:    0020cf50    P. .    DCD    2150224
        0x0021c898:    0020ce5c    \. .    DCD    2149980
        0x0021c89c:    0020ce3c    <. .    DCD    2149948
        0x0021c8a0:    0020989d    .. .    DCD    2136221
        0x0021c8a4:    0020cf1c    .. .    DCD    2150172
        0x0021c8a8:    0020cb5c    \. .    DCD    2149212
        0x0021c8ac:    0020c104    .. .    DCD    2146564
        0x0021c8b0:    00209903    .. .    DCD    2136323
        0x0021c8b4:    0020cf18    .. .    DCD    2150168
        0x0021c8b8:    0020cd94    .. .    DCD    2149780
        0x0021c8bc:    0020cd88    .. .    DCD    2149768
        0x0021c8c0:    00209949    I. .    DCD    2136393
        0x0021c8c4:    0020cf64    d. .    DCD    2150244
        0x0021c8c8:    0020ce88    .. .    DCD    2150024
        0x0021c8cc:    0020ccec    .. .    DCD    2149612
        0x0021c8d0:    0020994d    M. .    DCD    2136397
        0x0021c8d4:    0020cf28    (. .    DCD    2150184
        0x0021c8d8:    0020cb24    $. .    DCD    2149156
        0x0021c8dc:    0020c26c    l. .    DCD    2146924
        0x0021c8e0:    002099c3    .. .    DCD    2136515
        0x0021c8e4:    0020cf5c    \. .    DCD    2150236
        0x0021c8e8:    0020cc48    H. .    DCD    2149448
        0x0021c8ec:    0020c680    .. .    DCD    2147968
        0x0021c8f0:    00209a37    7. .    DCD    2136631
        0x0021c8f4:    0020cea8    .. .    DCD    2150056
        0x0021c8f8:    0020caec    .. .    DCD    2149100
        0x0021c8fc:    0020c448    H. .    DCD    2147400
        0x0021c900:    00209a95    .. .    DCD    2136725
        0x0021c904:    0020cef8    .. .    DCD    2150136
        0x0021c908:    0020ca38    8. .    DCD    2148920
        0x0021c90c:    0020cd1c    .. .    DCD    2149660
        0x0021c910:    00209aab    .. .    DCD    2136747
        0x0021c914:    0020ceb0    .. .    DCD    2150064
        0x0021c918:    0020cbcc    .. .    DCD    2149324
        0x0021c91c:    0020c19c    .. .    DCD    2146716
        0x0021c920:    00209acb    .. .    DCD    2136779
        0x0021c924:    0020cec4    .. .    DCD    2150084
        0x0021c928:    0020ca88    .. .    DCD    2149000
        0x0021c92c:    0020c8c4    .. .    DCD    2148548
        0x0021c930:    00209aef    .. .    DCD    2136815
        0x0021c934:    0020ce94    .. .    DCD    2150036
        0x0021c938:    0020cba4    .. .    DCD    2149284
        0x0021c93c:    0020c764    d. .    DCD    2148196
        0x0021c940:    00209b1f    .. .    DCD    2136863
        0x0021c944:    0020cf00    .. .    DCD    2150144
        0x0021c948:    0020ca4c    L. .    DCD    2148940
        0x0021c94c:    0020cd3c    <. .    DCD    2149692
        0x0021c950:    00209c27    '. .    DCD    2137127
        0x0021c954:    0020cebc    .. .    DCD    2150076
        0x0021c958:    0020cb08    .. .    DCD    2149128
        0x0021c95c:    0020c338    8. .    DCD    2147128
        0x0021c960:    00209c49    I. .    DCD    2137161
        0x0021c964:    0020ced0    .. .    DCD    2150096
        0x0021c968:    0020cc78    x. .    DCD    2149496
        0x0021c96c:    0020c3cc    .. .    DCD    2147276
        0x0021c970:    00209c6d    m. .    DCD    2137197
        0x0021c974:    0020cf08    .. .    DCD    2150152
        0x0021c978:    0020ca60    `. .    DCD    2148960
        0x0021c97c:    0020cd64    d. .    DCD    2149732
        0x0021c980:    00209c8b    .. .    DCD    2137227
        0x0021c984:    00000000    ....    DCD    0
        0x0021c988:    00000000    ....    DCD    0
        0x0021c98c:    00000000    ....    DCD    0
        0x0021c990:    00000000    ....    DCD    0
    .constdata
    __func__
        0x0021c994:    54524155    UART    DCD    1414676821
        0x0021c998:    61485f30    0_Ha    DCD    1632132912
        0x0021c99c:    656c646e    ndle    DCD    1701602414
        0x0021c9a0:    0072        r.      DCW    114
    .constdata
    maptable
        0x0021c9a2:    0004        ..      DCW    4
        0x0021c9a4:    00000800    ....    DCD    2048
        0x0021c9a8:    00000000    ....    DCD    0
        0x0021c9ac:    01000200    ....    DCD    16777728
        0x0021c9b0:    00100000    ....    DCD    1048576
    .conststring
        0x0021c9b4:    30433249    I2C0    DCD    809710153
        0x0021c9b8:    00000000    ....    DCD    0
        0x0021c9bc:    30495053    SPI0    DCD    810111059
        0x0021c9c0:    00000000    ....    DCD    0
        0x0021c9c4:    54524155    UART    DCD    1414676821
        0x0021c9c8:    00000030    0...    DCD    48
        0x0021c9cc:    414d4447    GDMA    DCD    1095582791
        0x0021c9d0:    68432030    0 Ch    DCD    1749229616
        0x0021c9d4:    656e6e61    anne    DCD    1701736033
        0x0021c9d8:    0000306c    l0..    DCD    12396
        0x0021c9dc:    4f495047    GPIO    DCD    1330204743
        0x0021c9e0:    6f72475f    _Gro    DCD    1869760351
        0x0021c9e4:    00307075    up0.    DCD    3174517
        0x0021c9e8:    31433249    I2C1    DCD    826487369
        0x0021c9ec:    00000000    ....    DCD    0
        0x0021c9f0:    31495053    SPI1    DCD    826888275
        0x0021c9f4:    00000000    ....    DCD    0
        0x0021c9f8:    54524155    UART    DCD    1414676821
        0x0021c9fc:    00000031    1...    DCD    49
        0x0021ca00:    414d4447    GDMA    DCD    1095582791
        0x0021ca04:    68432030    0 Ch    DCD    1749229616
        0x0021ca08:    656e6e61    anne    DCD    1701736033
        0x0021ca0c:    0000316c    l1..    DCD    12652
        0x0021ca10:    4f495047    GPIO    DCD    1330204743
        0x0021ca14:    6f72475f    _Gro    DCD    1869760351
        0x0021ca18:    00317075    up1.    DCD    3240053
        0x0021ca1c:    324d4954    TIM2    DCD    843925844
        0x0021ca20:    00000000    ....    DCD    0
        0x0021ca24:    54524155    UART    DCD    1414676821
        0x0021ca28:    00000032    2...    DCD    50
        0x0021ca2c:    414d4447    GDMA    DCD    1095582791
        0x0021ca30:    68432030    0 Ch    DCD    1749229616
        0x0021ca34:    656e6e61    anne    DCD    1701736033
        0x0021ca38:    0000326c    l2..    DCD    12908
        0x0021ca3c:    4f495047    GPIO    DCD    1330204743
        0x0021ca40:    6f72475f    _Gro    DCD    1869760351
        0x0021ca44:    00327075    up2.    DCD    3305589
        0x0021ca48:    334d4954    TIM3    DCD    860703060
        0x0021ca4c:    00000000    ....    DCD    0
        0x0021ca50:    414d4447    GDMA    DCD    1095582791
        0x0021ca54:    68432030    0 Ch    DCD    1749229616
        0x0021ca58:    656e6e61    anne    DCD    1701736033
        0x0021ca5c:    0000336c    l3..    DCD    13164
        0x0021ca60:    4f495047    GPIO    DCD    1330204743
        0x0021ca64:    6f72475f    _Gro    DCD    1869760351
        0x0021ca68:    00337075    up3.    DCD    3371125
        0x0021ca6c:    344d4954    TIM4    DCD    877480276
        0x0021ca70:    00000000    ....    DCD    0
        0x0021ca74:    4f495047    GPIO    DCD    1330204743
        0x0021ca78:    00000034    4...    DCD    52
        0x0021ca7c:    414d4447    GDMA    DCD    1095582791
        0x0021ca80:    68432030    0 Ch    DCD    1749229616
        0x0021ca84:    656e6e61    anne    DCD    1701736033
        0x0021ca88:    0000346c    l4..    DCD    13420
        0x0021ca8c:    354d4954    TIM5    DCD    894257492
        0x0021ca90:    00000000    ....    DCD    0
        0x0021ca94:    4f495047    GPIO    DCD    1330204743
        0x0021ca98:    00000035    5...    DCD    53
        0x0021ca9c:    414d4447    GDMA    DCD    1095582791
        0x0021caa0:    68432030    0 Ch    DCD    1749229616
        0x0021caa4:    656e6e61    anne    DCD    1701736033
        0x0021caa8:    0000356c    l5..    DCD    13676
        0x0021caac:    364d4954    TIM6    DCD    911034708
        0x0021cab0:    00000000    ....    DCD    0
        0x0021cab4:    656d6954    Time    DCD    1701669204
        0x0021cab8:    372d3472    r4-7    DCD    925709426
        0x0021cabc:    00000000    ....    DCD    0
        0x0021cac0:    374d4954    TIM7    DCD    927811924
        0x0021cac4:    00000000    ....    DCD    0
        0x0021cac8:    414d5442    BTMA    DCD    1095586882
        0x0021cacc:    00000043    C...    DCD    67
        0x0021cad0:    00434441    ADC.    DCD    4408385
        0x0021cad4:    00435452    RTC.    DCD    4412498
        0x0021cad8:    00435653    SVC.    DCD    4413011
        0x0021cadc:    0044434c    LCD.    DCD    4473676
        0x0021cae0:    00474457    WDG.    DCD    4670551
        0x0021cae4:    00494d4e    NMI.    DCD    4803918
        0x0021cae8:    4f43504c    LPCO    DCD    1329811532
        0x0021caec:    0000504d    MP..    DCD    20557
        0x0021caf0:    74696e49    Init    DCD    1953066569
        0x0021caf4:    536c6169    ialS    DCD    1399611753
        0x0021caf8:    00000050    P...    DCD    80
        0x0021cafc:    00005249    IR..    DCD    21065
        0x0021cb00:    646e6550    Pend    DCD    1684956496
        0x0021cb04:    00005653    SV..    DCD    22099
        0x0021cb08:    32495053    SPI2    DCD    843665491
        0x0021cb0c:    00000057    W...    DCD    87
        0x0021cb10:    524f5053    SPOR    DCD    1380929619
        0x0021cb14:    52203154    T1 R    DCD    1377841492
        0x0021cb18:    00000058    X...    DCD    88
        0x0021cb1c:    30533249    I2S0    DCD    810758729
        0x0021cb20:    0058525f    _RX.    DCD    5788255
        0x0021cb24:    524f5053    SPOR    DCD    1380929619
        0x0021cb28:    54203154    T1 T    DCD    1411395924
        0x0021cb2c:    00000058    X...    DCD    88
        0x0021cb30:    30533249    I2S0    DCD    810758729
        0x0021cb34:    0058545f    _TX.    DCD    5788767
        0x0021cb38:    64767352    Rsvd    DCD    1685484370
        0x0021cb3c:    00000000    ....    DCD    0
        0x0021cb40:    63656451    Qdec    DCD    1667589201
        0x0021cb44:    0065646f    ode.    DCD    6644847
        0x0021cb48:    4d6d654d    MemM    DCD    1299014989
        0x0021cb4c:    67616e61    anag    DCD    1734438497
        0x0021cb50:    00000065    e...    DCD    101
        0x0021cb54:    5f495053    SPI_    DCD    1598640211
        0x0021cb58:    73616c46    Flas    DCD    1935764550
        0x0021cb5c:    00000068    h...    DCD    104
        0x0021cb60:    54737953    SysT    DCD    1416853843
        0x0021cb64:    006b6369    ick.    DCD    7037801
        0x0021cb68:    69726550    Peri    DCD    1769104720
        0x0021cb6c:    72656870    pher    DCD    1919248496
        0x0021cb70:    00006c61    al..    DCD    27745
        0x0021cb74:    74737953    Syst    DCD    1953724755
        0x0021cb78:    00006d65    em..    DCD    28005
        0x0021cb7c:    74616c50    Plat    DCD    1952541776
        0x0021cb80:    6d726f66    form    DCD    1836216166
        0x0021cb84:    00000000    ....    DCD    0
        0x0021cb88:    7379654b    Keys    DCD    1937335627
        0x0021cb8c:    006e6163    can.    DCD    7233891
        0x0021cb90:    75626544    Debu    DCD    1969382724
        0x0021cb94:    6e6f4d67    gMon    DCD    1852788071
        0x0021cb98:    00000000    ....    DCD    0
        0x0021cb9c:    65736552    Rese    DCD    1702061394
        0x0021cba0:    00000074    t...    DCD    116
        0x0021cba4:    64726148    Hard    DCD    1685217608
        0x0021cba8:    6c756146    Faul    DCD    1819631942
        0x0021cbac:    00000074    t...    DCD    116
        0x0021cbb0:    67617355    Usag    DCD    1734439765
        0x0021cbb4:    75614665    eFau    DCD    1969309285
        0x0021cbb8:    0000746c    lt..    DCD    29804
        0x0021cbbc:    46737542    BusF    DCD    1181971778
        0x0021cbc0:    746c7561    ault    DCD    1953264993
        0x0021cbc4:    00000000    ....    DCD    0
        0x0021cbc8:    5f415450    PTA_    DCD    1598116944
        0x0021cbcc:    6c69614d    Mail    DCD    1818845517
        0x0021cbd0:    00786f62    box.    DCD    7892834

** Section #10 'App.trace' (SHT_PROGBITS) [SHF_ALLOC]
    Size   : 10112 bytes (alignment 4)
    Address: 0x08800000

    0x8800000:   21 2a 2a 52 45 53 45 54 20 52 65 61 73 6f 6e 3a    !**RESET Reason:
    0x8800010:   20 48 57 20 6f 72 20 4f 54 41 00 00 21 2a 2a 52     HW or OTA..!**R
    0x8800020:   45 53 45 54 20 52 65 61 73 6f 6e 3a 20 53 57 28    ESET Reason: SW(
    0x8800030:   72 65 73 65 74 20 65 78 63 65 70 74 20 61 6f 6e    reset except aon
    0x8800040:   29 2c 20 54 59 50 45 20 30 78 25 78 00 00 00 00    ), TYPE 0x%x....
    0x8800050:   21 2a 2a 52 45 53 45 54 20 52 65 61 73 6f 6e 3a    !**RESET Reason:
    0x8800060:   20 53 57 28 72 65 73 65 74 20 61 6c 6c 29 2c 20     SW(reset all), 
    0x8800070:   54 59 50 45 20 30 78 25 78 00 00 00 21 21 21 53    TYPE 0x%x...!!!S
    0x8800080:   44 4b 20 56 65 72 3a 20 25 73 2c 20 42 75 69 6c    DK Ver: %s, Buil
    0x8800090:   64 20 54 69 6d 65 3a 20 25 73 00 00 21 21 2a 57    d Time: %s..!!*W
    0x88000a0:   61 72 6e 69 6e 67 21 20 25 73 20 69 73 20 75 70    arning! %s is up
    0x88000b0:   64 61 74 65 64 20 62 79 20 41 50 50 21 00 00 00    dated by APP!...
    0x88000c0:   21 21 2a 57 61 72 6e 69 6e 67 21 20 49 53 52 20    !!*Warning! ISR 
    0x88000d0:   25 73 20 69 73 20 75 70 64 61 74 65 64 20 62 79    %s is updated by
    0x88000e0:   20 41 50 50 21 00 00 00 21 2a 2a 73 69 6d 70 5f     APP!...!**simp_
    0x88000f0:   62 6c 65 5f 63 6c 69 65 6e 74 5f 73 74 61 72 74    ble_client_start
    0x8800100:   5f 64 69 73 63 6f 76 65 72 79 00 00 21 21 21 73    _discovery..!!!s
    0x8800110:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 73    imp_ble_client_s
    0x8800120:   74 61 72 74 5f 64 69 73 63 6f 76 65 72 79 3a 20    tart_discovery: 
    0x8800130:   66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63    failed invalid c
    0x8800140:   6f 6e 6e 5f 69 64 20 25 64 00 00 00 21 21 21 73    onn_id %d...!!!s
    0x8800150:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 72    imp_ble_client_r
    0x8800160:   65 61 64 5f 62 79 5f 68 61 6e 64 6c 65 3a 20 66    ead_by_handle: f
    0x8800170:   61 69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f    ailed invalid co
    0x8800180:   6e 6e 5f 69 64 20 25 64 00 00 00 00 21 2a 2a 76    nn_id %d....!**v
    0x8800190:   73 6f 70 2d 2d 2d 2d 72 65 61 64 5f 62 79 5f 68    sop----read_by_h
    0x88001a0:   61 6e 64 6c 65 2d 2d 2d 2d 2d 2d 72 65 74 75 72    andle------retur
    0x88001b0:   6e 3d 25 64 00 00 00 00 21 2a 2a 76 73 6f 70 2d    n=%d....!**vsop-
    0x88001c0:   2d 2d 2d 72 65 61 64 5f 62 79 5f 68 61 6e 64 6c    ---read_by_handl
    0x88001d0:   65 2d 2d 2d 2d 2d 2d 72 65 61 64 5f 74 79 70 65    e------read_type
    0x88001e0:   3d 25 64 00 21 2a 2a 76 73 6f 70 2d 2d 2d 2d 72    =%d.!**vsop----r
    0x88001f0:   65 61 64 5f 62 79 5f 68 61 6e 64 6c 65 2d 2d 2d    ead_by_handle---
    0x8800200:   2d 2d 2d 68 64 6c 5f 76 61 6c 69 64 3d 25 64 00    ---hdl_valid=%d.
    0x8800210:   21 2a 2a 76 73 6f 70 2d 2d 2d 2d 72 65 61 64 5f    !**vsop----read_
    0x8800220:   62 79 5f 68 61 6e 64 6c 65 2d 2d 2d 2d 2d 2d 6f    by_handle------o
    0x8800230:   6b 6b 6b 6b 6b 3d 25 64 00 00 00 00 21 21 2a 73    kkkkk=%d....!!*s
    0x8800240:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 72    imp_ble_client_r
    0x8800250:   65 61 64 5f 62 79 5f 68 61 6e 64 6c 65 3a 20 52    ead_by_handle: R
    0x8800260:   65 71 75 65 73 74 20 66 61 69 6c 21 20 50 6c 65    equest fail! Ple
    0x8800270:   61 73 65 20 63 68 65 63 6b 21 00 00 21 21 21 73    ase check!..!!!s
    0x8800280:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 72    imp_ble_client_r
    0x8800290:   65 61 64 5f 62 79 5f 75 75 69 64 3a 20 66 61 69    ead_by_uuid: fai
    0x88002a0:   6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f 6e 6e    led invalid conn
    0x88002b0:   5f 69 64 20 25 64 00 00 21 2a 2a 76 73 6f 70 2d    _id %d..!**vsop-
    0x88002c0:   2d 2d 2d 72 65 61 64 5f 62 79 5f 75 75 69 64 2d    ---read_by_uuid-
    0x88002d0:   2d 2d 2d 2d 2d 72 65 61 64 5f 74 79 70 65 3d 25    -----read_type=%
    0x88002e0:   64 00 00 00 21 2a 2a 76 73 6f 70 2d 2d 2d 2d 72    d...!**vsop----r
    0x88002f0:   65 61 64 5f 62 79 5f 75 75 69 64 2d 2d 2d 2d 2d    ead_by_uuid-----
    0x8800300:   2d 20 53 49 4d 50 5f 52 45 41 44 5f 56 33 5f 4e    - SIMP_READ_V3_N
    0x8800310:   4f 54 49 46 59 5f 43 43 43 44 00 00 21 21 21 73    OTIFY_CCCD..!!!s
    0x8800320:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 73    imp_ble_client_s
    0x8800330:   65 74 5f 76 33 5f 6e 6f 74 69 66 79 3a 20 66 61    et_v3_notify: fa
    0x8800340:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f 6e    iled invalid con
    0x8800350:   6e 5f 69 64 20 25 64 00 21 2a 2a 76 73 6f 70 2d    n_id %d.!**vsop-
    0x8800360:   2d 2d 2d 73 69 6d 70 5f 62 6c 65 5f 63 6c 69 65    ---simp_ble_clie
    0x8800370:   6e 74 5f 73 65 74 5f 76 33 5f 6e 6f 74 69 66 79    nt_set_v3_notify
    0x8800380:   20 3d 09 30 78 25 30 32 58 00 00 00 21 21 2a 73     =.0x%02X...!!*s
    0x8800390:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 73    imp_ble_client_s
    0x88003a0:   65 74 5f 76 33 5f 6e 6f 74 69 66 79 3a 20 52 65    et_v3_notify: Re
    0x88003b0:   71 75 65 73 74 20 66 61 69 6c 21 20 50 6c 65 61    quest fail! Plea
    0x88003c0:   73 65 20 63 68 65 63 6b 21 00 00 00 21 21 21 73    se check!...!!!s
    0x88003d0:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 73    imp_ble_client_s
    0x88003e0:   65 74 5f 76 34 5f 69 6e 64 3a 20 66 61 69 6c 65    et_v4_ind: faile
    0x88003f0:   64 20 69 6e 76 61 6c 69 64 20 63 6f 6e 6e 5f 69    d invalid conn_i
    0x8800400:   64 20 25 64 00 00 00 00 21 2a 2a 76 73 6f 70 2d    d %d....!**vsop-
    0x8800410:   2d 2d 2d 48 44 4c 5f 53 49 4d 42 4c 45 5f 56 34    ---HDL_SIMBLE_V4
    0x8800420:   5f 49 4e 44 49 43 41 54 45 5f 43 43 43 44 20 3d    _INDICATE_CCCD =
    0x8800430:   20 20 30 78 25 30 32 58 00 00 00 00 21 21 2a 73      0x%02X....!!*s
    0x8800440:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 73    imp_ble_client_s
    0x8800450:   65 74 5f 76 34 5f 69 6e 64 3a 20 52 65 71 75 65    et_v4_ind: Reque
    0x8800460:   73 74 20 66 61 69 6c 21 20 50 6c 65 61 73 65 20    st fail! Please 
    0x8800470:   63 68 65 63 6b 21 00 00 21 21 21 73 69 6d 70 5f    check!..!!!simp_
    0x8800480:   62 6c 65 5f 63 6c 69 65 6e 74 5f 77 72 69 74 65    ble_client_write
    0x8800490:   5f 76 32 5f 63 68 61 72 3a 20 66 61 69 6c 65 64    _v2_char: failed
    0x88004a0:   20 69 6e 76 61 6c 69 64 20 63 6f 6e 6e 5f 69 64     invalid conn_id
    0x88004b0:   20 25 64 00 21 21 2a 73 69 6d 70 5f 62 6c 65 5f     %d.!!*simp_ble_
    0x88004c0:   63 6c 69 65 6e 74 5f 77 72 69 74 65 5f 76 32 5f    client_write_v2_
    0x88004d0:   63 68 61 72 3a 20 52 65 71 75 65 73 74 20 66 61    char: Request fa
    0x88004e0:   69 6c 21 20 50 6c 65 61 73 65 20 63 68 65 63 6b    il! Please check
    0x88004f0:   21 00 00 00 21 21 21 73 69 6d 70 5f 62 6c 65 5f    !...!!!simp_ble_
    0x8800500:   63 6c 69 65 6e 74 5f 67 65 74 5f 68 64 6c 5f 63    client_get_hdl_c
    0x8800510:   61 63 68 65 3a 20 66 61 69 6c 65 64 20 69 6e 76    ache: failed inv
    0x8800520:   61 6c 69 64 20 63 6f 6e 6e 5f 69 64 20 25 64 00    alid conn_id %d.
    0x8800530:   21 21 21 73 69 6d 70 5f 62 6c 65 5f 63 6c 69 65    !!!simp_ble_clie
    0x8800540:   6e 74 5f 67 65 74 5f 68 64 6c 5f 63 61 63 68 65    nt_get_hdl_cache
    0x8800550:   3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64    : failed invalid
    0x8800560:   20 73 74 61 74 65 20 25 64 00 00 00 21 21 21 73     state %d...!!!s
    0x8800570:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 67    imp_ble_client_g
    0x8800580:   65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66 61    et_hdl_cache: fa
    0x8800590:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 6c 65 6e    iled invalid len
    0x88005a0:   20 25 64 00 21 21 21 73 69 6d 70 5f 62 6c 65 5f     %d.!!!simp_ble_
    0x88005b0:   63 6c 69 65 6e 74 5f 73 65 74 5f 68 64 6c 5f 63    client_set_hdl_c
    0x88005c0:   61 63 68 65 3a 20 66 61 69 6c 65 64 20 69 6e 76    ache: failed inv
    0x88005d0:   61 6c 69 64 20 63 6f 6e 6e 5f 69 64 20 25 64 00    alid conn_id %d.
    0x88005e0:   21 21 21 73 69 6d 70 5f 62 6c 65 5f 63 6c 69 65    !!!simp_ble_clie
    0x88005f0:   6e 74 5f 73 65 74 5f 68 64 6c 5f 63 61 63 68 65    nt_set_hdl_cache
    0x8800600:   3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64    : failed invalid
    0x8800610:   20 73 74 61 74 65 20 25 64 00 00 00 21 21 21 73     state %d...!!!s
    0x8800620:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 73    imp_ble_client_s
    0x8800630:   65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66 61    et_hdl_cache: fa
    0x8800640:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 6c 65 6e    iled invalid len
    0x8800650:   20 25 64 00 21 2a 2a 73 69 6d 70 5f 62 6c 65 5f     %d.!**simp_ble_
    0x8800660:   63 6c 69 65 6e 74 5f 73 74 61 72 74 5f 73 69 6d    client_start_sim
    0x8800670:   70 5f 63 68 61 72 5f 64 69 73 63 6f 76 65 72 79    p_char_discovery
    0x8800680:   00 00 00 00 21 2a 2a 73 69 6d 70 5f 62 6c 65 5f    ....!**simp_ble_
    0x8800690:   63 6c 69 65 6e 74 5f 73 74 61 72 74 5f 63 68 61    client_start_cha
    0x88006a0:   72 5f 64 65 73 63 72 69 70 74 6f 72 5f 64 69 73    r_descriptor_dis
    0x88006b0:   63 6f 76 65 72 79 00 00 21 2a 2a 73 69 6d 70 5f    covery..!**simp_
    0x88006c0:   62 6c 65 5f 63 6c 69 65 6e 74 5f 64 69 73 63 6f    ble_client_disco
    0x88006d0:   76 65 72 5f 73 74 61 74 65 5f 63 62 3a 20 64 69    ver_state_cb: di
    0x88006e0:   73 63 6f 76 65 72 79 5f 73 74 61 74 65 20 25 64    scovery_state %d
    0x88006f0:   00 00 00 00 21 21 21 73 69 6d 70 5f 68 61 6e 64    ....!!!simp_hand
    0x8800700:   6c 65 5f 64 69 73 63 6f 76 65 72 5f 73 74 61 74    le_discover_stat
    0x8800710:   65 3a 20 49 6e 76 61 6c 69 64 20 44 69 73 63 6f    e: Invalid Disco
    0x8800720:   76 65 72 79 20 53 74 61 74 65 21 00 21 2a 2a 73    very State!.!**s
    0x8800730:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 64    imp_ble_client_d
    0x8800740:   69 73 63 6f 76 65 72 5f 72 65 73 75 6c 74 5f 63    iscover_result_c
    0x8800750:   62 3a 20 72 65 73 75 6c 74 5f 74 79 70 65 20 25    b: result_type %
    0x8800760:   64 20 2c 20 30 78 25 30 32 58 00 00 21 2a 2a 76    d , 0x%02X..!**v
    0x8800770:   73 6f 70 20 73 69 6d 70 5f 62 6c 65 5f 63 6c 69    sop simp_ble_cli
    0x8800780:   65 6e 74 5f 64 69 73 63 6f 76 65 72 5f 72 65 73    ent_discover_res
    0x8800790:   75 6c 74 5f 63 62 3a 20 72 65 73 75 6c 74 5f 74    ult_cb: result_t
    0x88007a0:   79 70 65 20 25 64 20 2c 20 30 78 25 30 32 58 00    ype %d , 0x%02X.
    0x88007b0:   21 2a 2a 76 73 6f 70 20 72 65 73 75 6c 74 5f 64    !**vsop result_d
    0x88007c0:   61 74 61 20 44 49 53 43 5f 52 45 53 55 4c 54 5f    ata DISC_RESULT_
    0x88007d0:   43 48 41 52 5f 55 55 49 44 31 36 3a 20 30 78 25    CHAR_UUID16: 0x%
    0x88007e0:   30 32 58 00 21 2a 2a 76 73 6f 70 2b 2b 2b 2b 2b    02X.!**vsop+++++
    0x88007f0:   2b 2b 2b 2b 2b 2b 2b 2b 47 41 54 54 5f 55 55 49    ++++++++GATT_UUI
    0x8800800:   44 5f 43 48 41 52 5f 53 49 4d 50 4c 45 5f 56 33    D_CHAR_SIMPLE_V3
    0x8800810:   5f 4e 4f 54 49 46 59 2c 20 68 61 6e 64 6c 65 3d    _NOTIFY, handle=
    0x8800820:   25 64 00 00 21 2a 2a 76 73 6f 70 2b 2b 2b 2b 2b    %d..!**vsop+++++
    0x8800830:   2b 2b 2b 2b 2b 2b 2b 2b 47 41 54 54 5f 55 55 49    ++++++++GATT_UUI
    0x8800840:   44 5f 43 48 41 52 5f 53 49 4d 50 4c 45 5f 56 34    D_CHAR_SIMPLE_V4
    0x8800850:   5f 49 4e 44 49 43 41 54 45 2c 20 68 61 6e 64 6c    _INDICATE, handl
    0x8800860:   65 3d 25 64 00 00 00 00 21 2a 2a 76 73 6f 70 20    e=%d....!**vsop 
    0x8800870:   31 20 44 49 53 43 5f 52 45 53 55 4c 54 5f 43 48    1 DISC_RESULT_CH
    0x8800880:   41 52 5f 44 45 53 43 5f 55 55 49 44 31 36 3a 20    AR_DESC_UUID16: 
    0x8800890:   75 75 69 64 31 36 20 2c 20 30 78 25 30 32 58 00    uuid16 , 0x%02X.
    0x88008a0:   21 2a 2a 76 73 6f 70 20 32 20 44 49 53 43 5f 52    !**vsop 2 DISC_R
    0x88008b0:   45 53 55 4c 54 5f 43 48 41 52 5f 44 45 53 43 5f    ESULT_CHAR_DESC_
    0x88008c0:   55 55 49 44 31 36 3a 20 68 61 6e 64 6c 65 20 2c    UUID16: handle ,
    0x88008d0:   20 30 78 25 30 32 58 00 21 2a 2a 76 73 6f 70 78     0x%02X.!**vsopx
    0x88008e0:   78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78    xxxxxxxxxxxxxxxx
    0x88008f0:   31 2c 20 68 61 6e 64 6c 65 3d 25 64 00 00 00 00    1, handle=%d....
    0x8800900:   21 2a 2a 76 73 6f 70 78 78 78 78 78 78 78 78 78    !**vsopxxxxxxxxx
    0x8800910:   78 78 78 78 78 78 78 78 32 2c 20 68 61 6e 64 6c    xxxxxxxx2, handl
    0x8800920:   65 3d 25 64 00 00 00 00 21 21 21 73 69 6d 70 5f    e=%d....!!!simp_
    0x8800930:   68 61 6e 64 6c 65 5f 64 69 73 63 6f 76 65 72 5f    handle_discover_
    0x8800940:   72 65 73 75 6c 74 3a 20 49 6e 76 61 6c 69 64 20    result: Invalid 
    0x8800950:   44 69 73 63 6f 76 65 72 79 20 52 65 73 75 6c 74    Discovery Result
    0x8800960:   20 54 79 70 65 21 00 00 21 2a 2a 73 69 6d 70 5f     Type!..!**simp_
    0x8800970:   62 6c 65 5f 63 6c 69 65 6e 74 5f 72 65 61 64 5f    ble_client_read_
    0x8800980:   72 65 73 75 6c 74 5f 63 62 3a 20 68 61 6e 64 6c    result_cb: handl
    0x8800990:   65 20 30 78 25 78 2c 20 63 61 75 73 65 20 30 78    e 0x%x, cause 0x
    0x88009a0:   25 78 00 00 21 21 21 73 69 6d 70 5f 62 6c 65 5f    %x..!!!simp_ble_
    0x88009b0:   63 6c 69 65 6e 74 5f 72 65 61 64 5f 72 65 73 75    client_read_resu
    0x88009c0:   6c 74 5f 63 62 3a 20 69 6e 76 61 6c 69 64 20 63    lt_cb: invalid c
    0x88009d0:   63 63 64 20 6c 65 6e 20 25 64 00 00 21 2a 2a 76    ccd len %d..!**v
    0x88009e0:   73 6f 70 2d 2d 2d 2d 2d 2d 2d 20 69 6e 64 69 63    sop------- indic
    0x88009f0:   61 74 65 20 5f 63 63 63 64 20 31 00 21 21 21 73    ate _cccd 1.!!!s
    0x8800a00:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 72    imp_ble_client_r
    0x8800a10:   65 61 64 5f 72 65 73 75 6c 74 5f 63 62 3a 20 69    ead_result_cb: i
    0x8800a20:   6e 76 61 6c 69 64 20 63 63 63 64 20 6c 65 6e 20    nvalid cccd len 
    0x8800a30:   25 64 00 00 21 2a 2a 76 73 6f 70 2d 2d 2d 2d 2d    %d..!**vsop-----
    0x8800a40:   2d 2d 20 69 6e 64 69 63 61 74 65 20 5f 63 63 63    -- indicate _ccc
    0x8800a50:   64 20 3d 20 20 25 64 00 21 2a 2a 73 69 6d 70 5f    d =  %d.!**simp_
    0x8800a60:   62 6c 65 5f 63 6c 69 65 6e 74 5f 77 72 69 74 65    ble_client_write
    0x8800a70:   5f 72 65 73 75 6c 74 5f 63 62 3a 20 68 61 6e 64    _result_cb: hand
    0x8800a80:   6c 65 20 30 78 25 78 2c 20 63 61 75 73 65 20 30    le 0x%x, cause 0
    0x8800a90:   78 25 78 00 21 2a 2a 76 73 6f 70 2d 2d 2d 2d 2d    x%x.!**vsop-----
    0x8800aa0:   2d 2d 2d 2d 2d 2d 2d 48 44 4c 5f 53 49 4d 42 4c    -------HDL_SIMBL
    0x8800ab0:   45 5f 56 33 5f 4e 4f 54 49 46 59 20 25 64 00 00    E_V3_NOTIFY %d..
    0x8800ac0:   21 2a 2a 76 73 6f 70 2d 2d 2d 2d 2d 2d 2d 2d 2d    !**vsop---------
    0x8800ad0:   2d 2d 2d 48 44 4c 5f 53 49 4d 42 4c 45 5f 56 34    ---HDL_SIMBLE_V4
    0x8800ae0:   5f 49 4e 44 49 43 41 54 45 20 25 64 00 00 00 00    _INDICATE %d....
    0x8800af0:   21 2a 2a 76 73 6f 70 2d 2d 2d 2d 2d 2d 2d 2d 2d    !**vsop---------
    0x8800b00:   2d 2d 2d 6e 6f 20 68 61 6e 64 6c 65 20 25 64 00    ---no handle %d.
    0x8800b10:   21 2a 2a 76 73 6f 70 2d 2d 2d 2d 2d 2d 2d 2d 2d    !**vsop---------
    0x8800b20:   2d 2d 2d 73 69 6d 70 5f 63 6c 69 65 6e 74 5f 63    ---simp_client_c
    0x8800b30:   62 20 25 64 00 00 00 00 21 2a 2a 76 73 6f 70 2d    b %d....!**vsop-
    0x8800b40:   2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 72 65 74 75 72    -----------retur
    0x8800b50:   6e 20 25 64 00 00 00 00 21 2a 2a 73 69 6d 70 5f    n %d....!**simp_
    0x8800b60:   62 6c 65 5f 63 6c 69 65 6e 74 5f 64 69 73 63 6f    ble_client_disco
    0x8800b70:   6e 6e 65 63 74 5f 63 62 2e 00 00 00 21 21 21 73    nnect_cb....!!!s
    0x8800b80:   69 6d 70 5f 62 6c 65 5f 63 6c 69 65 6e 74 5f 64    imp_ble_client_d
    0x8800b90:   69 73 63 6f 6e 6e 65 63 74 5f 63 62 3a 20 66 61    isconnect_cb: fa
    0x8800ba0:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f 6e    iled invalid con
    0x8800bb0:   6e 5f 69 64 20 25 64 00 21 21 21 73 69 6d 70 5f    n_id %d.!!!simp_
    0x8800bc0:   62 6c 65 5f 61 64 64 5f 63 6c 69 65 6e 74 3a 20    ble_add_client: 
    0x8800bd0:   69 6e 76 61 6c 69 64 20 6c 69 6e 6b 5f 6e 75 6d    invalid link_num
    0x8800be0:   20 25 64 00 21 21 21 73 69 6d 70 5f 62 6c 65 5f     %d.!!!simp_ble_
    0x8800bf0:   61 64 64 5f 63 6c 69 65 6e 74 20 66 61 69 6c 65    add_client faile
    0x8800c00:   64 00 00 00 21 2a 2a 73 69 6d 70 5f 62 6c 65 5f    d...!**simp_ble_
    0x8800c10:   61 64 64 5f 63 6c 69 65 6e 74 3a 20 73 69 6d 70    add_client: simp
    0x8800c20:   5f 63 6c 69 65 6e 74 20 25 64 00 00 21 2a 2a 62    _client %d..!**b
    0x8800c30:   61 73 5f 73 74 61 72 74 5f 64 69 73 63 6f 76 65    as_start_discove
    0x8800c40:   72 79 00 00 21 21 21 62 61 73 5f 73 74 61 72 74    ry..!!!bas_start
    0x8800c50:   5f 64 69 73 63 6f 76 65 72 79 3a 20 66 61 69 6c    _discovery: fail
    0x8800c60:   65 64 20 69 6e 76 61 6c 69 64 20 63 6f 6e 6e 5f    ed invalid conn_
    0x8800c70:   69 64 20 25 64 00 00 00 21 21 21 62 61 73 5f 72    id %d...!!!bas_r
    0x8800c80:   65 61 64 5f 62 61 74 74 65 72 79 5f 6c 65 76 65    ead_battery_leve
    0x8800c90:   6c 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69    l: failed invali
    0x8800ca0:   64 20 63 6f 6e 6e 5f 69 64 20 25 64 00 00 00 00    d conn_id %d....
    0x8800cb0:   21 21 21 62 61 73 5f 72 65 61 64 5f 62 61 74 74    !!!bas_read_batt
    0x8800cc0:   65 72 79 5f 6c 65 76 65 6c 3a 20 66 61 6c 73 65    ery_level: false
    0x8800cd0:   20 68 61 6e 64 6c 65 20 3d 20 30 00 21 21 21 62     handle = 0.!!!b
    0x8800ce0:   61 73 5f 73 65 74 5f 6e 6f 74 69 66 79 3a 20 66    as_set_notify: f
    0x8800cf0:   61 69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f    ailed invalid co
    0x8800d00:   6e 6e 5f 69 64 20 25 64 00 00 00 00 21 21 21 62    nn_id %d....!!!b
    0x8800d10:   61 73 5f 73 65 74 5f 6e 6f 74 69 66 79 3a 20 66    as_set_notify: f
    0x8800d20:   61 6c 73 65 20 68 61 6e 64 6c 65 20 3d 20 30 00    alse handle = 0.
    0x8800d30:   21 21 21 62 61 73 5f 72 65 61 64 5f 6e 6f 74 69    !!!bas_read_noti
    0x8800d40:   66 79 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c    fy: failed inval
    0x8800d50:   69 64 20 63 6f 6e 6e 5f 69 64 20 25 64 00 00 00    id conn_id %d...
    0x8800d60:   21 21 21 62 61 73 5f 72 65 61 64 5f 62 61 74 74    !!!bas_read_batt
    0x8800d70:   65 72 79 5f 6c 65 76 65 6c 3a 20 66 61 6c 73 65    ery_level: false
    0x8800d80:   20 68 61 6e 64 6c 65 20 3d 20 30 00 21 21 21 62     handle = 0.!!!b
    0x8800d90:   61 73 5f 67 65 74 5f 68 64 6c 5f 63 61 63 68 65    as_get_hdl_cache
    0x8800da0:   3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64    : failed invalid
    0x8800db0:   20 63 6f 6e 6e 5f 69 64 20 25 64 00 21 21 21 62     conn_id %d.!!!b
    0x8800dc0:   61 73 5f 67 65 74 5f 68 64 6c 5f 63 61 63 68 65    as_get_hdl_cache
    0x8800dd0:   3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64    : failed invalid
    0x8800de0:   20 73 74 61 74 65 20 25 64 00 00 00 21 21 21 62     state %d...!!!b
    0x8800df0:   61 73 5f 67 65 74 5f 68 64 6c 5f 63 61 63 68 65    as_get_hdl_cache
    0x8800e00:   3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64    : failed invalid
    0x8800e10:   20 6c 65 6e 20 25 64 00 21 21 21 62 61 73 5f 73     len %d.!!!bas_s
    0x8800e20:   65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66 61    et_hdl_cache: fa
    0x8800e30:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f 6e    iled invalid con
    0x8800e40:   6e 5f 69 64 20 25 64 00 21 21 21 62 61 73 5f 73    n_id %d.!!!bas_s
    0x8800e50:   65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66 61    et_hdl_cache: fa
    0x8800e60:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 73 74 61    iled invalid sta
    0x8800e70:   74 65 20 25 64 00 00 00 21 21 21 62 61 73 5f 73    te %d...!!!bas_s
    0x8800e80:   65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66 61    et_hdl_cache: fa
    0x8800e90:   69 6c 65 64 20 69 6e 76 61 6c 69 64 20 6c 65 6e    iled invalid len
    0x8800ea0:   20 25 64 00 21 2a 2a 62 61 73 5f 73 74 61 72 74     %d.!**bas_start
    0x8800eb0:   5f 63 68 61 72 5f 64 69 73 63 6f 76 65 72 79 00    _char_discovery.
    0x8800ec0:   21 2a 2a 62 61 73 5f 73 74 61 72 74 5f 63 68 61    !**bas_start_cha
    0x8800ed0:   72 5f 64 65 73 63 72 69 70 74 6f 72 5f 64 69 73    r_descriptor_dis
    0x8800ee0:   63 6f 76 65 72 79 00 00 21 2a 2a 62 61 73 5f 63    covery..!**bas_c
    0x8800ef0:   6c 69 65 6e 74 5f 64 69 73 63 6f 76 65 72 5f 73    lient_discover_s
    0x8800f00:   74 61 74 65 5f 63 62 3a 20 64 69 73 63 6f 76 65    tate_cb: discove
    0x8800f10:   72 79 5f 73 74 61 74 65 20 3d 20 25 64 00 00 00    ry_state = %d...
    0x8800f20:   21 21 21 49 6e 76 61 6c 69 64 20 44 69 73 63 6f    !!!Invalid Disco
    0x8800f30:   76 65 72 79 20 53 74 61 74 65 21 00 21 2a 2a 62    very State!.!**b
    0x8800f40:   61 73 5f 63 6c 69 65 6e 74 5f 64 69 73 63 6f 76    as_client_discov
    0x8800f50:   65 72 5f 72 65 73 75 6c 74 5f 63 62 3a 20 72 65    er_result_cb: re
    0x8800f60:   73 75 6c 74 5f 74 79 70 65 20 3d 20 25 64 00 00    sult_type = %d..
    0x8800f70:   21 21 21 49 6e 76 61 6c 69 64 20 44 69 73 63 6f    !!!Invalid Disco
    0x8800f80:   76 65 72 79 20 52 65 73 75 6c 74 20 54 79 70 65    very Result Type
    0x8800f90:   21 00 00 00 21 2a 2a 62 61 73 5f 63 6c 69 65 6e    !...!**bas_clien
    0x8800fa0:   74 5f 77 72 69 74 65 5f 72 65 73 75 6c 74 5f 63    t_write_result_c
    0x8800fb0:   62 3a 20 68 61 6e 64 6c 65 20 30 78 25 78 2c 20    b: handle 0x%x, 
    0x8800fc0:   63 61 75 73 65 20 30 78 25 78 00 00 21 2a 2a 62    cause 0x%x..!**b
    0x8800fd0:   61 73 5f 63 6c 69 65 6e 74 5f 72 65 61 64 5f 72    as_client_read_r
    0x8800fe0:   65 73 75 6c 74 5f 63 62 3a 20 68 61 6e 64 6c 65    esult_cb: handle
    0x8800ff0:   20 30 78 25 78 2c 20 63 61 75 73 65 20 30 78 25     0x%x, cause 0x%
    0x8801000:   78 00 00 00 21 21 21 62 61 73 5f 63 6c 69 65 6e    x...!!!bas_clien
    0x8801010:   74 5f 72 65 61 64 5f 72 65 73 75 6c 74 5f 63 62    t_read_result_cb
    0x8801020:   3a 20 69 6e 76 61 6c 69 64 20 63 63 63 64 20 6c    : invalid cccd l
    0x8801030:   65 6e 20 25 64 00 00 00 21 21 21 62 61 73 5f 63    en %d...!!!bas_c
    0x8801040:   6c 69 65 6e 74 5f 72 65 61 64 5f 72 65 73 75 6c    lient_read_resul
    0x8801050:   74 5f 63 62 3a 20 69 6e 76 61 6c 69 64 20 62 61    t_cb: invalid ba
    0x8801060:   74 74 65 72 79 20 76 61 6c 75 65 20 6c 65 6e 20    ttery value len 
    0x8801070:   25 64 00 00 21 2a 2a 62 61 73 5f 63 6c 69 65 6e    %d..!**bas_clien
    0x8801080:   74 5f 64 69 73 63 5f 63 62 2e 00 00 21 21 21 62    t_disc_cb...!!!b
    0x8801090:   61 73 5f 63 6c 69 65 6e 74 5f 64 69 73 63 5f 63    as_client_disc_c
    0x88010a0:   62 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69    b: failed invali
    0x88010b0:   64 20 63 6f 6e 6e 5f 69 64 20 25 64 00 00 00 00    d conn_id %d....
    0x88010c0:   21 21 21 62 61 73 5f 61 64 64 5f 63 6c 69 65 6e    !!!bas_add_clien
    0x88010d0:   74 3a 20 69 6e 76 61 6c 69 64 20 6c 69 6e 6b 5f    t: invalid link_
    0x88010e0:   6e 75 6d 20 25 64 00 00 21 21 21 62 61 73 5f 61    num %d..!!!bas_a
    0x88010f0:   64 64 5f 63 6c 69 65 6e 74 3a 72 65 67 69 73 74    dd_client:regist
    0x8801100:   65 72 20 66 61 69 6c 00 21 2a 2a 62 61 73 5f 61    er fail.!**bas_a
    0x8801110:   64 64 5f 63 6c 69 65 6e 74 3a 20 63 6c 69 65 6e    dd_client: clien
    0x8801120:   74 20 69 64 20 25 64 00 21 2a 2a 67 61 70 73 5f    t id %d.!**gaps_
    0x8801130:   73 74 61 72 74 5f 64 69 73 63 6f 76 65 72 79 00    start_discovery.
    0x8801140:   21 21 21 67 61 70 73 5f 73 74 61 72 74 5f 64 69    !!!gaps_start_di
    0x8801150:   73 63 6f 76 65 72 79 3a 20 66 61 69 6c 65 64 20    scovery: failed 
    0x8801160:   69 6e 76 61 6c 69 64 20 63 6f 6e 6e 5f 69 64 20    invalid conn_id 
    0x8801170:   25 64 00 00 21 21 21 67 61 70 73 5f 72 65 61 64    %d..!!!gaps_read
    0x8801180:   3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69 64    : failed invalid
    0x8801190:   20 63 6f 6e 6e 5f 69 64 20 25 64 00 21 2a 2a 67     conn_id %d.!**g
    0x88011a0:   61 70 73 5f 72 65 61 64 3a 20 63 68 61 72 54 79    aps_read: charTy
    0x88011b0:   70 65 20 3d 20 25 64 00 21 21 2a 67 61 70 73 5f    pe = %d.!!*gaps_
    0x88011c0:   72 65 61 64 3a 20 52 65 71 75 65 73 74 20 66 61    read: Request fa
    0x88011d0:   69 6c 21 20 50 6c 65 61 73 65 20 63 68 65 63 6b    il! Please check
    0x88011e0:   21 00 00 00 21 21 21 67 61 70 73 5f 67 65 74 5f    !...!!!gaps_get_
    0x88011f0:   68 64 6c 5f 63 61 63 68 65 3a 20 66 61 69 6c 65    hdl_cache: faile
    0x8801200:   64 20 69 6e 76 61 6c 69 64 20 63 6f 6e 6e 5f 69    d invalid conn_i
    0x8801210:   64 20 25 64 00 00 00 00 21 21 21 67 61 70 73 5f    d %d....!!!gaps_
    0x8801220:   67 65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66    get_hdl_cache: f
    0x8801230:   61 69 6c 65 64 20 69 6e 76 61 6c 69 64 20 73 74    ailed invalid st
    0x8801240:   61 74 65 20 25 64 00 00 21 21 21 67 61 70 73 5f    ate %d..!!!gaps_
    0x8801250:   67 65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66    get_hdl_cache: f
    0x8801260:   61 69 6c 65 64 20 69 6e 76 61 6c 69 64 20 6c 65    ailed invalid le
    0x8801270:   6e 20 25 64 00 00 00 00 21 21 21 67 61 70 73 5f    n %d....!!!gaps_
    0x8801280:   73 65 74 5f 68 64 6c 5f 63 61 63 68 65 3a 20 66    set_hdl_cache: f
    0x8801290:   61 69 6c 65 64 20 69 6e 76 61 6c 69 64 20 63 6f    ailed invalid co
    0x88012a0:   6e 6e 5f 69 64 20 25 64 00 00 00 00 21 21 21 67    nn_id %d....!!!g
    0x88012b0:   61 70 73 5f 73 65 74 5f 68 64 6c 5f 63 61 63 68    aps_set_hdl_cach
    0x88012c0:   65 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69    e: failed invali
    0x88012d0:   64 20 73 74 61 74 65 20 25 64 00 00 21 21 21 67    d state %d..!!!g
    0x88012e0:   61 70 73 5f 73 65 74 5f 68 64 6c 5f 63 61 63 68    aps_set_hdl_cach
    0x88012f0:   65 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69    e: failed invali
    0x8801300:   64 20 6c 65 6e 20 25 64 00 00 00 00 21 21 21 67    d len %d....!!!g
    0x8801310:   61 70 73 5f 67 65 74 5f 68 64 6c 5f 63 61 63 68    aps_get_hdl_cach
    0x8801320:   65 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c 69    e: failed invali
    0x8801330:   64 20 63 6f 6e 6e 5f 69 64 20 25 64 00 00 00 00    d conn_id %d....
    0x8801340:   21 21 21 67 61 70 73 5f 67 65 74 5f 68 64 6c 5f    !!!gaps_get_hdl_
    0x8801350:   63 61 63 68 65 3a 20 66 61 69 6c 65 64 20 69 6e    cache: failed in
    0x8801360:   76 61 6c 69 64 20 73 74 61 74 65 20 25 64 00 00    valid state %d..
    0x8801370:   21 2a 2a 67 61 70 5f 63 6c 69 65 6e 74 5f 73 74    !**gap_client_st
    0x8801380:   61 72 74 5f 67 61 70 5f 63 68 61 72 5f 64 69 73    art_gap_char_dis
    0x8801390:   63 6f 76 65 72 79 00 00 21 2a 2a 67 61 70 73 5f    covery..!**gaps_
    0x88013a0:   63 6c 69 65 6e 74 5f 64 69 73 63 6f 76 65 72 5f    client_discover_
    0x88013b0:   73 74 61 74 65 5f 63 62 3a 20 64 69 73 63 6f 76    state_cb: discov
    0x88013c0:   65 72 79 5f 73 74 61 74 65 20 25 64 00 00 00 00    ery_state %d....
    0x88013d0:   21 21 21 44 49 53 43 5f 53 54 41 54 45 5f 46 41    !!!DISC_STATE_FA
    0x88013e0:   49 4c 45 44 00 00 00 00 21 21 21 49 6e 76 61 6c    ILED....!!!Inval
    0x88013f0:   69 64 20 44 69 73 63 6f 76 65 72 79 20 53 74 61    id Discovery Sta
    0x8801400:   74 65 21 00 21 2a 2a 67 61 70 5f 63 6c 69 65 6e    te!.!**gap_clien
    0x8801410:   74 5f 64 69 73 63 6f 76 65 72 5f 72 65 73 75 6c    t_discover_resul
    0x8801420:   74 5f 63 62 3a 20 72 65 73 75 6c 74 5f 74 79 70    t_cb: result_typ
    0x8801430:   65 20 3d 20 25 64 00 00 21 2a 2a 47 41 54 54 5f    e = %d..!**GATT_
    0x8801440:   55 55 49 44 5f 43 48 41 52 5f 43 45 4e 54 52 41    UUID_CHAR_CENTRA
    0x8801450:   4c 5f 41 44 44 52 45 53 53 5f 52 45 53 4f 4c 55    L_ADDRESS_RESOLU
    0x8801460:   54 49 4f 4e 20 66 6f 75 6e 64 00 00 21 2a 2a 47    TION found..!**G
    0x8801470:   41 54 54 5f 55 55 49 44 5f 43 48 41 52 5f 52 45    ATT_UUID_CHAR_RE
    0x8801480:   53 4f 4c 56 41 42 4c 45 5f 50 52 49 56 41 54 45    SOLVABLE_PRIVATE
    0x8801490:   5f 41 44 44 52 45 53 53 5f 4f 4e 4c 59 20 66 6f    _ADDRESS_ONLY fo
    0x88014a0:   75 6e 64 00 21 21 21 49 6e 76 61 6c 69 64 20 44    und.!!!Invalid D
    0x88014b0:   69 73 63 6f 76 65 72 79 20 52 65 73 75 6c 74 20    iscovery Result 
    0x88014c0:   54 79 70 65 21 00 00 00 21 2a 2a 67 61 70 5f 63    Type!...!**gap_c
    0x88014d0:   6c 69 65 6e 74 5f 72 65 61 64 5f 72 65 73 75 6c    lient_read_resul
    0x88014e0:   74 5f 63 62 3a 20 68 61 6e 64 6c 65 20 30 78 25    t_cb: handle 0x%
    0x88014f0:   78 2c 20 63 61 75 73 65 20 30 78 25 78 00 00 00    x, cause 0x%x...
    0x8801500:   21 21 21 67 61 70 73 5f 63 6c 69 65 6e 74 5f 72    !!!gaps_client_r
    0x8801510:   65 61 64 5f 72 65 73 75 6c 74 5f 63 62 3a 20 69    ead_result_cb: i
    0x8801520:   6e 76 61 6c 69 64 20 63 63 63 64 20 6c 65 6e 20    nvalid cccd len 
    0x8801530:   25 64 00 00 21 2a 2a 67 61 70 5f 63 6c 69 65 6e    %d..!**gap_clien
    0x8801540:   74 5f 64 69 73 63 5f 63 62 2e 00 00 21 21 21 67    t_disc_cb...!!!g
    0x8801550:   61 70 73 5f 63 6c 69 65 6e 74 5f 64 69 73 63 5f    aps_client_disc_
    0x8801560:   63 62 3a 20 66 61 69 6c 65 64 20 69 6e 76 61 6c    cb: failed inval
    0x8801570:   69 64 20 63 6f 6e 6e 5f 69 64 20 25 64 00 00 00    id conn_id %d...
    0x8801580:   21 21 21 67 61 70 73 5f 61 64 64 5f 63 6c 69 65    !!!gaps_add_clie
    0x8801590:   6e 74 3a 20 69 6e 76 61 6c 69 64 20 6c 69 6e 6b    nt: invalid link
    0x88015a0:   5f 6e 75 6d 20 25 64 00 21 21 21 67 61 70 73 5f    _num %d.!!!gaps_
    0x88015b0:   61 64 64 5f 63 6c 69 65 6e 74 20 46 61 69 6c 20    add_client Fail 
    0x88015c0:   21 21 21 00 21 2a 2a 67 61 70 73 5f 61 64 64 5f    !!!.!**gaps_add_
    0x88015d0:   63 6c 69 65 6e 74 3a 20 63 6c 69 65 6e 74 20 49    client: client I
    0x88015e0:   44 20 3d 20 25 64 00 00 21 2a 2a 61 70 70 5f 6d    D = %d..!**app_m
    0x88015f0:   61 69 6e 5f 74 61 73 6b 20 62 79 20 76 73 6f 70    ain_task by vsop
    0x8801600:   20 65 6e 74 65 72 00 00 21 2a 2a 61 70 70 5f 68     enter..!**app_h
    0x8801610:   61 6e 64 6c 65 5f 64 65 76 5f 73 74 61 74 65 5f    andle_dev_state_
    0x8801620:   65 76 74 3a 20 69 6e 69 74 20 73 74 61 74 65 20    evt: init state 
    0x8801630:   20 25 64 2c 20 73 63 61 6e 20 73 74 61 74 65 20     %d, scan state 
    0x8801640:   25 64 2c 20 63 61 75 73 65 20 30 78 25 78 00 00    %d, cause 0x%x..
    0x8801650:   21 2a 2a 47 41 50 20 73 74 61 63 6b 20 72 65 61    !**GAP stack rea
    0x8801660:   64 79 00 00 21 2a 2a 47 41 50 20 73 63 61 6e 20    dy..!**GAP scan 
    0x8801670:   73 74 6f 70 00 00 00 00 21 2a 2a 47 41 50 20 73    stop....!**GAP s
    0x8801680:   63 61 6e 20 73 74 61 72 74 00 00 00 21 2a 2a 61    can start...!**a
    0x8801690:   70 70 5f 68 61 6e 64 6c 65 5f 63 6f 6e 6e 5f 73    pp_handle_conn_s
    0x88016a0:   74 61 74 65 5f 65 76 74 3a 20 63 6f 6e 6e 5f 69    tate_evt: conn_i
    0x88016b0:   64 20 25 64 2c 20 63 6f 6e 6e 5f 73 74 61 74 65    d %d, conn_state
    0x88016c0:   28 25 64 20 2d 3e 20 25 64 29 2c 20 64 69 73 63    (%d -> %d), disc
    0x88016d0:   5f 63 61 75 73 65 20 30 78 25 78 00 21 21 21 61    _cause 0x%x.!!!a
    0x88016e0:   70 70 5f 68 61 6e 64 6c 65 5f 63 6f 6e 6e 5f 73    pp_handle_conn_s
    0x88016f0:   74 61 74 65 5f 65 76 74 3a 20 63 6f 6e 6e 65 63    tate_evt: connec
    0x8801700:   74 69 6f 6e 20 6c 6f 73 74 2c 20 63 6f 6e 6e 5f    tion lost, conn_
    0x8801710:   69 64 20 25 64 2c 20 63 61 75 73 65 20 30 78 25    id %d, cause 0x%
    0x8801720:   78 00 00 00 21 2a 2a 61 70 70 5f 68 61 6e 64 6c    x...!**app_handl
    0x8801730:   65 5f 61 75 74 68 65 6e 5f 73 74 61 74 65 5f 65    e_authen_state_e
    0x8801740:   76 74 3a 63 6f 6e 6e 5f 69 64 20 25 64 2c 20 63    vt:conn_id %d, c
    0x8801750:   61 75 73 65 20 30 78 25 78 00 00 00 21 2a 2a 61    ause 0x%x...!**a
    0x8801760:   70 70 5f 68 61 6e 64 6c 65 5f 61 75 74 68 65 6e    pp_handle_authen
    0x8801770:   5f 73 74 61 74 65 5f 65 76 74 3a 20 47 41 50 5f    _state_evt: GAP_
    0x8801780:   41 55 54 48 45 4e 5f 53 54 41 54 45 5f 53 54 41    AUTHEN_STATE_STA
    0x8801790:   52 54 45 44 00 00 00 00 21 2a 2a 61 70 70 5f 68    RTED....!**app_h
    0x88017a0:   61 6e 64 6c 65 5f 61 75 74 68 65 6e 5f 73 74 61    andle_authen_sta
    0x88017b0:   74 65 5f 65 76 74 3a 20 47 41 50 5f 41 55 54 48    te_evt: GAP_AUTH
    0x88017c0:   45 4e 5f 53 54 41 54 45 5f 43 4f 4d 50 4c 45 54    EN_STATE_COMPLET
    0x88017d0:   45 20 70 61 69 72 20 73 75 63 63 65 73 73 00 00    E pair success..
    0x88017e0:   21 2a 2a 61 70 70 5f 68 61 6e 64 6c 65 5f 61 75    !**app_handle_au
    0x88017f0:   74 68 65 6e 5f 73 74 61 74 65 5f 65 76 74 3a 20    then_state_evt: 
    0x8801800:   47 41 50 5f 41 55 54 48 45 4e 5f 53 54 41 54 45    GAP_AUTHEN_STATE
    0x8801810:   5f 43 4f 4d 50 4c 45 54 45 20 70 61 69 72 20 66    _COMPLETE pair f
    0x8801820:   61 69 6c 65 64 00 00 00 21 21 21 61 70 70 5f 68    ailed...!!!app_h
    0x8801830:   61 6e 64 6c 65 5f 61 75 74 68 65 6e 5f 73 74 61    andle_authen_sta
    0x8801840:   74 65 5f 65 76 74 3a 20 75 6e 6b 6e 6f 77 6e 20    te_evt: unknown 
    0x8801850:   6e 65 77 73 74 61 74 65 20 25 64 00 21 2a 2a 61    newstate %d.!**a
    0x8801860:   70 70 5f 68 61 6e 64 6c 65 5f 63 6f 6e 6e 5f 6d    pp_handle_conn_m
    0x8801870:   74 75 5f 69 6e 66 6f 5f 65 76 74 3a 20 63 6f 6e    tu_info_evt: con
    0x8801880:   6e 5f 69 64 20 25 64 2c 20 6d 74 75 5f 73 69 7a    n_id %d, mtu_siz
    0x8801890:   65 20 25 64 00 00 00 00 21 2a 2a 61 70 70 5f 68    e %d....!**app_h
    0x88018a0:   61 6e 64 6c 65 5f 63 6f 6e 6e 5f 70 61 72 61 6d    andle_conn_param
    0x88018b0:   5f 75 70 64 61 74 65 5f 65 76 74 20 75 70 64 61    _update_evt upda
    0x88018c0:   74 65 20 73 75 63 63 65 73 73 3a 63 6f 6e 6e 5f    te success:conn_
    0x88018d0:   69 64 20 25 64 2c 20 63 6f 6e 6e 5f 69 6e 74 65    id %d, conn_inte
    0x88018e0:   72 76 61 6c 20 30 78 25 78 2c 20 63 6f 6e 6e 5f    rval 0x%x, conn_
    0x88018f0:   73 6c 61 76 65 5f 6c 61 74 65 6e 63 79 20 30 78    slave_latency 0x
    0x8801900:   25 78 2c 20 63 6f 6e 6e 5f 73 75 70 65 72 76 69    %x, conn_supervi
    0x8801910:   73 69 6f 6e 5f 74 69 6d 65 6f 75 74 20 30 78 25    sion_timeout 0x%
    0x8801920:   78 00 00 00 21 21 21 61 70 70 5f 68 61 6e 64 6c    x...!!!app_handl
    0x8801930:   65 5f 63 6f 6e 6e 5f 70 61 72 61 6d 5f 75 70 64    e_conn_param_upd
    0x8801940:   61 74 65 5f 65 76 74 20 75 70 64 61 74 65 20 66    ate_evt update f
    0x8801950:   61 69 6c 65 64 3a 20 63 6f 6e 6e 5f 69 64 20 25    ailed: conn_id %
    0x8801960:   64 2c 20 63 61 75 73 65 20 30 78 25 78 00 00 00    d, cause 0x%x...
    0x8801970:   21 2a 2a 61 70 70 5f 68 61 6e 64 6c 65 5f 63 6f    !**app_handle_co
    0x8801980:   6e 6e 5f 70 61 72 61 6d 5f 75 70 64 61 74 65 5f    nn_param_update_
    0x8801990:   65 76 74 20 75 70 64 61 74 65 20 70 65 6e 64 69    evt update pendi
    0x88019a0:   6e 67 3a 20 63 6f 6e 6e 5f 69 64 20 25 64 00 00    ng: conn_id %d..
    0x88019b0:   61 70 70 5f 68 61 6e 64 6c 65 5f 67 61 70 5f 6d    app_handle_gap_m
    0x88019c0:   73 67 3a 20 73 75 62 74 79 70 65 20 25 64 00 00    sg: subtype %d..
    0x88019d0:   21 2a 2a 47 41 50 5f 4d 53 47 5f 4c 45 5f 42 4f    !**GAP_MSG_LE_BO
    0x88019e0:   4e 44 5f 4a 55 53 54 5f 57 4f 52 4b 00 00 00 00    ND_JUST_WORK....
    0x88019f0:   21 2a 2a 47 41 50 5f 4d 53 47 5f 4c 45 5f 42 4f    !**GAP_MSG_LE_BO
    0x8801a00:   4e 44 5f 50 41 53 53 4b 45 59 5f 44 49 53 50 4c    ND_PASSKEY_DISPL
    0x8801a10:   41 59 3a 20 63 6f 6e 6e 5f 69 64 20 25 64 2c 20    AY: conn_id %d, 
    0x8801a20:   70 61 73 73 6b 65 79 20 25 64 00 00 21 2a 2a 47    passkey %d..!**G
    0x8801a30:   41 50 5f 4d 53 47 5f 4c 45 5f 42 4f 4e 44 5f 55    AP_MSG_LE_BOND_U
    0x8801a40:   53 45 52 5f 43 4f 4e 46 49 52 4d 41 54 49 4f 4e    SER_CONFIRMATION
    0x8801a50:   3a 20 63 6f 6e 6e 5f 69 64 20 25 64 2c 20 70 61    : conn_id %d, pa
    0x8801a60:   73 73 6b 65 79 20 25 64 00 00 00 00 21 2a 2a 47    sskey %d....!**G
    0x8801a70:   41 50 5f 4d 53 47 5f 4c 45 5f 42 4f 4e 44 5f 50    AP_MSG_LE_BOND_P
    0x8801a80:   41 53 53 4b 45 59 5f 49 4e 50 55 54 3a 20 63 6f    ASSKEY_INPUT: co
    0x8801a90:   6e 6e 5f 69 64 20 25 64 00 00 00 00 21 2a 2a 47    nn_id %d....!**G
    0x8801aa0:   41 50 5f 4d 53 47 5f 4c 45 5f 42 4f 4e 44 5f 4f    AP_MSG_LE_BOND_O
    0x8801ab0:   4f 42 5f 49 4e 50 55 54 3a 20 63 6f 6e 6e 5f 69    OB_INPUT: conn_i
    0x8801ac0:   64 20 25 64 00 00 00 00 21 21 21 61 70 70 5f 68    d %d....!!!app_h
    0x8801ad0:   61 6e 64 6c 65 5f 67 61 70 5f 6d 73 67 3a 20 75    andle_gap_msg: u
    0x8801ae0:   6e 6b 6e 6f 77 6e 20 73 75 62 74 79 70 65 20 25    nknown subtype %
    0x8801af0:   64 00 00 00 21 2a 2a 47 41 50 5f 41 44 54 59 50    d...!**GAP_ADTYP
    0x8801b00:   45 5f 53 4c 41 56 45 5f 43 4f 4e 4e 5f 49 4e 54    E_SLAVE_CONN_INT
    0x8801b10:   45 52 56 41 4c 5f 52 41 4e 47 45 3a 20 30 78 25    ERVAL_RANGE: 0x%
    0x8801b20:   78 20 2d 20 30 78 25 78 00 00 00 00 21 2a 2a 20    x - 0x%x....!** 
    0x8801b30:   20 41 44 20 44 61 74 61 3a 20 55 55 49 44 31 36     AD Data: UUID16
    0x8801b40:   20 4c 69 73 74 20 49 74 65 6d 20 25 64 20 3d 20     List Item %d = 
    0x8801b50:   30 78 25 78 00 00 00 00 21 2a 2a 47 41 50 5f 4d    0x%x....!**GAP_M
    0x8801b60:   53 47 5f 4c 45 5f 53 43 41 4e 5f 49 4e 46 4f 3a    SG_LE_SCAN_INFO:
    0x8801b70:   61 64 76 5f 74 79 70 65 20 30 78 25 78 2c 20 62    adv_type 0x%x, b
    0x8801b80:   64 5f 61 64 64 72 20 25 73 2c 20 72 65 6d 6f 74    d_addr %s, remot
    0x8801b90:   65 5f 61 64 64 72 5f 74 79 70 65 20 25 64 2c 20    e_addr_type %d, 
    0x8801ba0:   72 73 73 69 20 25 64 2c 20 64 61 74 61 5f 6c 65    rssi %d, data_le
    0x8801bb0:   6e 20 25 64 00 00 00 00 21 2a 2a 46 6f 75 6e 64    n %d....!**Found
    0x8801bc0:   20 73 69 6d 70 6c 65 20 62 6c 65 20 73 65 72 76     simple ble serv
    0x8801bd0:   69 63 65 00 21 2a 2a 47 41 50 5f 4d 53 47 5f 4c    ice.!**GAP_MSG_L
    0x8801be0:   45 5f 43 4f 4e 4e 5f 55 50 44 41 54 45 5f 49 4e    E_CONN_UPDATE_IN
    0x8801bf0:   44 3a 20 63 6f 6e 6e 5f 69 64 20 25 64 2c 20 63    D: conn_id %d, c
    0x8801c00:   6f 6e 6e 5f 69 6e 74 65 72 76 61 6c 5f 6d 61 78    onn_interval_max
    0x8801c10:   20 30 78 25 78 2c 20 63 6f 6e 6e 5f 69 6e 74 65     0x%x, conn_inte
    0x8801c20:   72 76 61 6c 5f 6d 69 6e 20 30 78 25 78 2c 20 63    rval_min 0x%x, c
    0x8801c30:   6f 6e 6e 5f 6c 61 74 65 6e 63 79 20 30 78 25 78    onn_latency 0x%x
    0x8801c40:   2c 73 75 70 65 72 76 69 73 69 6f 6e 5f 74 69 6d    ,supervision_tim
    0x8801c50:   65 6f 75 74 20 30 78 25 78 00 00 00 21 21 21 61    eout 0x%x...!!!a
    0x8801c60:   70 70 5f 67 61 70 5f 63 61 6c 6c 62 61 63 6b 3a    pp_gap_callback:
    0x8801c70:   20 75 6e 68 61 6e 64 6c 65 64 20 63 62 5f 74 79     unhandled cb_ty
    0x8801c80:   70 65 20 30 78 25 78 00 21 21 21 61 70 70 5f 64    pe 0x%x.!!!app_d
    0x8801c90:   69 73 63 6f 76 5f 73 65 72 76 69 63 65 73 3a 20    iscov_services: 
    0x8801ca0:   63 6f 6e 6e 5f 69 64 20 25 64 20 6e 6f 74 20 63    conn_id %d not c
    0x8801cb0:   6f 6e 6e 65 63 74 65 64 20 00 00 00 21 21 21 61    onnected ...!!!a
    0x8801cc0:   70 70 5f 64 69 73 63 6f 76 5f 73 65 72 76 69 63    pp_discov_servic
    0x8801cd0:   65 73 3a 20 64 69 73 63 6f 76 65 72 20 67 61 70    es: discover gap
    0x8801ce0:   73 20 66 61 69 6c 65 64 20 63 6f 6e 6e 5f 69 64    s failed conn_id
    0x8801cf0:   20 25 64 00 21 21 21 61 70 70 5f 64 69 73 63 6f     %d.!!!app_disco
    0x8801d00:   76 5f 73 65 72 76 69 63 65 73 3a 20 64 69 73 63    v_services: disc
    0x8801d10:   6f 76 65 72 20 73 69 6d 70 20 66 61 69 6c 65 64    over simp failed
    0x8801d20:   20 63 6f 6e 6e 5f 69 64 20 25 64 00 21 21 21 61     conn_id %d.!!!a
    0x8801d30:   70 70 5f 64 69 73 63 6f 76 5f 73 65 72 76 69 63    pp_discov_servic
    0x8801d40:   65 73 3a 20 64 69 73 63 6f 76 65 72 20 62 61 73    es: discover bas
    0x8801d50:   20 66 61 69 6c 65 64 20 63 6f 6e 6e 5f 69 64 20     failed conn_id 
    0x8801d60:   25 64 00 00 21 2a 2a 61 70 70 5f 64 69 73 63 6f    %d..!**app_disco
    0x8801d70:   76 5f 73 65 72 76 69 63 65 73 3a 20 64 69 73 63    v_services: disc
    0x8801d80:   6f 76 65 72 20 63 6f 6d 70 6c 65 74 65 2c 20 63    over complete, c
    0x8801d90:   6f 6e 6e 5f 69 64 20 25 64 2c 20 73 72 76 5f 66    onn_id %d, srv_f
    0x8801da0:   6f 75 6e 64 5f 66 6c 61 67 73 20 30 78 25 78 00    ound_flags 0x%x.
    0x8801db0:   21 2a 2a 61 70 70 5f 63 6c 69 65 6e 74 5f 63 61    !**app_client_ca
    0x8801dc0:   6c 6c 62 61 63 6b 3a 20 63 6c 69 65 6e 74 5f 69    llback: client_i
    0x8801dd0:   64 20 25 64 2c 20 63 6f 6e 6e 5f 69 64 20 25 64    d %d, conn_id %d
    0x8801de0:   00 00 00 00 21 2a 2a 61 70 70 5f 63 6c 69 65 6e    ....!**app_clien
    0x8801df0:   74 5f 63 61 6c 6c 62 61 63 6b 3a 20 64 69 73 63    t_callback: disc
    0x8801e00:   6f 76 65 72 20 67 61 70 73 20 70 72 6f 63 65 64    over gaps proced
    0x8801e10:   75 72 65 20 64 6f 6e 65 2e 00 00 00 21 2a 2a 61    ure done....!**a
    0x8801e20:   70 70 5f 63 6c 69 65 6e 74 5f 63 61 6c 6c 62 61    pp_client_callba
    0x8801e30:   63 6b 3a 20 64 69 73 63 6f 76 65 72 20 67 61 70    ck: discover gap
    0x8801e40:   73 20 72 65 71 75 65 73 74 20 66 61 69 6c 65 64    s request failed
    0x8801e50:   2e 00 00 00 21 2a 2a 47 41 50 53 5f 52 45 41 44    ....!**GAPS_READ
    0x8801e60:   5f 44 45 56 49 43 45 5f 4e 41 4d 45 3a 20 64 65    _DEVICE_NAME: de
    0x8801e70:   76 69 63 65 20 6e 61 6d 65 20 25 73 2e 00 00 00    vice name %s....
    0x8801e80:   21 2a 2a 47 41 50 53 5f 52 45 41 44 5f 44 45 56    !**GAPS_READ_DEV
    0x8801e90:   49 43 45 5f 4e 41 4d 45 3a 20 66 61 69 6c 64 65    ICE_NAME: failde
    0x8801ea0:   64 20 63 61 75 73 65 20 30 78 25 78 00 00 00 00    d cause 0x%x....
    0x8801eb0:   21 2a 2a 47 41 50 53 5f 52 45 41 44 5f 41 50 50    !**GAPS_READ_APP
    0x8801ec0:   45 41 52 41 4e 43 45 3a 20 61 70 70 65 61 72 61    EARANCE: appeara
    0x8801ed0:   6e 63 65 20 25 64 00 00 21 2a 2a 47 41 50 53 5f    nce %d..!**GAPS_
    0x8801ee0:   52 45 41 44 5f 41 50 50 45 41 52 41 4e 43 45 3a    READ_APPEARANCE:
    0x8801ef0:   20 66 61 69 6c 64 65 64 20 63 61 75 73 65 20 30     failded cause 0
    0x8801f00:   78 25 78 00 21 2a 2a 47 41 50 53 5f 52 45 41 44    x%x.!**GAPS_READ
    0x8801f10:   5f 43 45 4e 54 52 41 4c 5f 41 44 44 52 5f 52 45    _CENTRAL_ADDR_RE
    0x8801f20:   53 4f 4c 55 54 49 4f 4e 3a 20 63 65 6e 74 72 61    SOLUTION: centra
    0x8801f30:   6c 5f 61 64 64 72 5f 72 65 73 20 25 64 00 00 00    l_addr_res %d...
    0x8801f40:   21 2a 2a 47 41 50 53 5f 52 45 41 44 5f 43 45 4e    !**GAPS_READ_CEN
    0x8801f50:   54 52 41 4c 5f 41 44 44 52 5f 52 45 53 4f 4c 55    TRAL_ADDR_RESOLU
    0x8801f60:   54 49 4f 4e 3a 20 66 61 69 6c 64 65 64 20 63 61    TION: failded ca
    0x8801f70:   75 73 65 20 30 78 25 78 00 00 00 00 21 2a 2a 61    use 0x%x....!**a
    0x8801f80:   70 70 5f 63 6c 69 65 6e 74 5f 63 61 6c 6c 62 61    pp_client_callba
    0x8801f90:   63 6b 3a 20 64 69 73 63 6f 76 65 72 20 73 69 6d    ck: discover sim
    0x8801fa0:   70 20 70 72 6f 63 65 64 75 72 65 20 64 6f 6e 65    p procedure done
    0x8801fb0:   2e 00 00 00 21 2a 2a 61 70 70 5f 63 6c 69 65 6e    ....!**app_clien
    0x8801fc0:   74 5f 63 61 6c 6c 62 61 63 6b 3a 20 64 69 73 63    t_callback: disc
    0x8801fd0:   6f 76 65 72 20 73 69 6d 70 20 72 65 71 75 65 73    over simp reques
    0x8801fe0:   74 20 66 61 69 6c 65 64 2e 00 00 00 21 2a 2a 53    t failed....!**S
    0x8801ff0:   49 4d 50 5f 52 45 41 44 5f 56 31 5f 52 45 41 44    IMP_READ_V1_READ
    0x8802000:   3a 20 76 61 6c 75 65 5f 73 69 7a 65 20 25 64 2c    : value_size %d,
    0x8802010:   20 76 61 6c 75 65 20 25 62 00 00 00 21 21 21 53     value %b...!!!S
    0x8802020:   49 4d 50 5f 52 45 41 44 5f 56 31 5f 52 45 41 44    IMP_READ_V1_READ
    0x8802030:   3a 20 66 61 69 6c 65 64 20 63 61 75 73 65 20 30    : failed cause 0
    0x8802040:   78 25 78 00 21 2a 2a 53 49 4d 50 5f 52 45 41 44    x%x.!**SIMP_READ
    0x8802050:   5f 56 33 5f 4e 4f 54 49 46 59 5f 43 43 43 44 3a    _V3_NOTIFY_CCCD:
    0x8802060:   20 6e 6f 74 69 66 79 20 25 64 00 00 21 21 21 53     notify %d..!!!S
    0x8802070:   49 4d 50 5f 52 45 41 44 5f 56 33 5f 4e 4f 54 49    IMP_READ_V3_NOTI
    0x8802080:   46 59 5f 43 43 43 44 3a 20 66 61 69 6c 65 64 20    FY_CCCD: failed 
    0x8802090:   63 61 75 73 65 20 30 78 25 78 00 00 21 2a 2a 53    cause 0x%x..!**S
    0x88020a0:   49 4d 50 5f 52 45 41 44 5f 56 34 5f 49 4e 44 49    IMP_READ_V4_INDI
    0x88020b0:   43 41 54 45 5f 43 43 43 44 3a 20 69 6e 64 69 63    CATE_CCCD: indic
    0x88020c0:   61 74 65 20 25 64 00 00 21 21 21 53 49 4d 50 5f    ate %d..!!!SIMP_
    0x88020d0:   52 45 41 44 5f 56 34 5f 49 4e 44 49 43 41 54 45    READ_V4_INDICATE
    0x88020e0:   5f 43 43 43 44 3a 20 66 61 69 6c 65 64 20 63 61    _CCCD: failed ca
    0x88020f0:   75 73 65 20 30 78 25 78 00 00 00 00 21 2a 2a 53    use 0x%x....!**S
    0x8802100:   49 4d 50 5f 57 52 49 54 45 5f 56 32 5f 57 52 49    IMP_WRITE_V2_WRI
    0x8802110:   54 45 3a 20 77 72 69 74 65 20 72 65 73 75 6c 74    TE: write result
    0x8802120:   20 30 78 25 78 00 00 00 21 2a 2a 53 49 4d 50 5f     0x%x...!**SIMP_
    0x8802130:   57 52 49 54 45 5f 56 33 5f 4e 4f 54 49 46 59 5f    WRITE_V3_NOTIFY_
    0x8802140:   43 43 43 44 3a 20 77 72 69 74 65 20 72 65 73 75    CCCD: write resu
    0x8802150:   6c 74 20 30 78 25 78 00 21 2a 2a 53 49 4d 50 5f    lt 0x%x.!**SIMP_
    0x8802160:   57 52 49 54 45 5f 56 34 5f 49 4e 44 49 43 41 54    WRITE_V4_INDICAT
    0x8802170:   45 5f 43 43 43 44 3a 20 77 72 69 74 65 20 72 65    E_CCCD: write re
    0x8802180:   73 75 6c 74 20 30 78 25 78 00 00 00 21 2a 2a 53    sult 0x%x...!**S
    0x8802190:   49 4d 50 5f 56 33 5f 4e 4f 54 49 46 59 3a 20 76    IMP_V3_NOTIFY: v
    0x88021a0:   61 6c 75 65 5f 73 69 7a 65 20 25 64 2c 20 76 61    alue_size %d, va
    0x88021b0:   6c 75 65 20 25 62 00 00 21 2a 2a 53 49 4d 50 5f    lue %b..!**SIMP_
    0x88021c0:   56 34 5f 49 4e 44 49 43 41 54 45 3a 20 76 61 6c    V4_INDICATE: val
    0x88021d0:   75 65 5f 73 69 7a 65 20 25 64 2c 20 76 61 6c 75    ue_size %d, valu
    0x88021e0:   65 20 25 62 00 00 00 00 21 2a 2a 61 70 70 5f 63    e %b....!**app_c
    0x88021f0:   6c 69 65 6e 74 5f 63 61 6c 6c 62 61 63 6b 3a 20    lient_callback: 
    0x8802200:   64 69 73 63 6f 76 65 72 20 62 61 73 20 70 72 6f    discover bas pro
    0x8802210:   63 65 64 75 72 65 20 64 6f 6e 65 00 21 2a 2a 61    cedure done.!**a
    0x8802220:   70 70 5f 63 6c 69 65 6e 74 5f 63 61 6c 6c 62 61    pp_client_callba
    0x8802230:   63 6b 3a 20 64 69 73 63 6f 76 65 72 20 62 61 73    ck: discover bas
    0x8802240:   20 70 72 6f 63 65 64 75 72 65 20 66 61 69 6c 65     procedure faile
    0x8802250:   64 00 00 00 21 2a 2a 42 41 53 5f 52 45 41 44 5f    d...!**BAS_READ_
    0x8802260:   42 41 54 54 45 52 59 5f 4c 45 56 45 4c 3a 20 62    BATTERY_LEVEL: b
    0x8802270:   61 74 74 65 72 79 20 6c 65 76 65 6c 20 25 64 00    attery level %d.
    0x8802280:   21 21 21 42 41 53 5f 52 45 41 44 5f 42 41 54 54    !!!BAS_READ_BATT
    0x8802290:   45 52 59 5f 4c 45 56 45 4c 3a 20 66 61 69 6c 65    ERY_LEVEL: faile
    0x88022a0:   64 20 63 61 75 73 65 20 30 78 25 78 00 00 00 00    d cause 0x%x....
    0x88022b0:   21 2a 2a 42 41 53 5f 52 45 41 44 5f 4e 4f 54 49    !**BAS_READ_NOTI
    0x88022c0:   46 59 3a 20 6e 6f 74 69 66 79 20 25 64 00 00 00    FY: notify %d...
    0x88022d0:   21 21 21 42 41 53 5f 52 45 41 44 5f 4e 4f 54 49    !!!BAS_READ_NOTI
    0x88022e0:   46 59 3a 20 66 61 69 6c 65 64 20 63 61 75 73 65    FY: failed cause
    0x88022f0:   20 30 78 25 78 00 00 00 21 2a 2a 42 41 53 5f 57     0x%x...!**BAS_W
    0x8802300:   52 49 54 45 5f 4e 4f 54 49 46 59 5f 45 4e 41 42    RITE_NOTIFY_ENAB
    0x8802310:   4c 45 3a 20 77 72 69 74 65 20 72 65 73 75 6c 74    LE: write result
    0x8802320:   20 30 78 25 78 00 00 00 21 2a 2a 42 41 53 5f 57     0x%x...!**BAS_W
    0x8802330:   52 49 54 45 5f 4e 4f 54 49 46 59 5f 44 49 53 41    RITE_NOTIFY_DISA
    0x8802340:   42 4c 45 3a 20 77 72 69 74 65 20 72 65 73 75 6c    BLE: write resul
    0x8802350:   74 20 30 78 25 78 00 00 21 2a 2a 42 41 53 5f 43    t 0x%x..!**BAS_C
    0x8802360:   4c 49 45 4e 54 5f 43 42 5f 54 59 50 45 5f 4e 4f    LIENT_CB_TYPE_NO
    0x8802370:   54 49 46 5f 49 4e 44 5f 52 45 53 55 4c 54 3a 20    TIF_IND_RESULT: 
    0x8802380:   62 61 74 74 65 72 79 20 6c 65 76 65 6c 20 25 64    battery level %d
    0x8802390:   00 00 00 00 21 21 21 67 61 70 5f 63 6f 6e 66 69    ....!!!gap_confi
    0x88023a0:   67 5f 70 72 69 6e 74 5f 63 6f 6e 66 69 67 5f 70    g_print_config_p
    0x88023b0:   61 72 61 6d 3a 20 67 61 74 74 5f 63 63 63 64 5f    aram: gatt_cccd_
    0x88023c0:   6e 6f 74 5f 63 68 65 63 6b 20 25 64 2c 20 6c 65    not_check %d, le
    0x88023d0:   5f 6d 69 6e 5f 72 65 6d 5f 73 63 61 5f 66 6c 61    _min_rem_sca_fla
    0x88023e0:   67 20 25 64 2c 20 6c 65 5f 6d 69 6e 5f 72 65 6d    g %d, le_min_rem
    0x88023f0:   5f 73 63 61 5f 65 6e 63 6f 64 69 6e 67 20 25 64    _sca_encoding %d
    0x8802400:   2c 20 62 74 5f 72 65 70 6f 72 74 5f 62 75 66 5f    , bt_report_buf_
    0x8802410:   6e 75 6d 20 25 64 2c 20 67 61 74 74 5f 73 65 72    num %d, gatt_ser
    0x8802420:   76 65 72 5f 63 63 63 5f 62 69 74 73 5f 63 6f 75    ver_ccc_bits_cou
    0x8802430:   6e 74 20 25 64 2c 20 67 61 74 74 5f 73 74 6f 72    nt %d, gatt_stor
    0x8802440:   61 67 65 5f 63 63 63 5f 62 69 74 73 5f 63 6f 75    age_ccc_bits_cou
    0x8802450:   6e 74 20 25 64 2c 20 67 61 74 74 5f 6d 61 78 5f    nt %d, gatt_max_
    0x8802460:   61 74 74 72 69 62 75 74 65 5f 74 61 62 6c 65 5f    attribute_table_
    0x8802470:   63 6f 75 6e 74 20 25 64 2c 20 61 74 74 5f 6d 61    count %d, att_ma
    0x8802480:   78 5f 6d 74 75 5f 73 69 7a 65 20 25 64 00 00 00    x_mtu_size %d...
    0x8802490:   21 21 21 67 61 70 5f 63 6f 6e 66 69 67 5f 70 72    !!!gap_config_pr
    0x88024a0:   69 6e 74 5f 63 6f 6e 66 69 67 5f 70 61 72 61 6d    int_config_param
    0x88024b0:   3a 20 6c 65 5f 6b 65 79 5f 73 74 6f 72 61 67 65    : le_key_storage
    0x88024c0:   5f 66 6c 61 67 20 30 78 25 78 2c 20 6d 61 78 5f    _flag 0x%x, max_
    0x88024d0:   6c 65 5f 70 61 69 72 65 64 5f 64 65 76 69 63 65    le_paired_device
    0x88024e0:   20 25 64 2c 20 62 74 65 5f 70 6f 6f 6c 5f 73 69     %d, bte_pool_si
    0x88024f0:   7a 65 20 25 64 00 00 00 21 21 21 67 61 70 5f 63    ze %d...!!!gap_c
    0x8802500:   6f 6e 66 69 67 5f 70 72 69 6e 74 5f 63 6f 6e 66    onfig_print_conf
    0x8802510:   69 67 5f 70 61 72 61 6d 3a 62 74 5f 62 64 5f 61    ig_param:bt_bd_a
    0x8802520:   64 64 72 20 25 73 00 00 21 21 21 67 61 70 5f 6c    ddr %s..!!!gap_l
    0x8802530:   69 62 5f 69 6e 69 74 3a 20 76 65 72 20 25 64 2c    ib_init: ver %d,
    0x8802540:   20 46 5f 42 54 5f 4c 45 5f 35 5f 30 5f 53 55 50     F_BT_LE_5_0_SUP
    0x8802550:   50 4f 52 54 20 25 64 2c 20 46 5f 42 54 5f 4c 45    PORT %d, F_BT_LE
    0x8802560:   5f 35 5f 30 5f 41 45 5f 41 44 56 5f 53 55 50 50    _5_0_AE_ADV_SUPP
    0x8802570:   4f 52 54 20 25 64 2c 20 46 5f 42 54 5f 4c 45 5f    ORT %d, F_BT_LE_
    0x8802580:   35 5f 30 5f 41 45 5f 53 43 41 4e 5f 53 55 50 50    5_0_AE_SCAN_SUPP
    0x8802590:   4f 52 54 20 25 64 2c 20 46 5f 42 54 5f 4c 45 5f    ORT %d, F_BT_LE_
    0x88025a0:   34 5f 31 5f 43 42 43 5f 53 55 50 50 4f 52 54 20    4_1_CBC_SUPPORT 
    0x88025b0:   25 64 2c 20 46 5f 42 54 5f 56 45 4e 44 4f 52 5f    %d, F_BT_VENDOR_
    0x88025c0:   46 45 41 54 55 52 45 5f 53 55 50 50 4f 52 54 20    FEATURE_SUPPORT 
    0x88025d0:   25 64 2c 20 46 5f 42 54 5f 4c 45 5f 36 5f 30 5f    %d, F_BT_LE_6_0_
    0x88025e0:   41 4f 41 5f 41 4f 44 5f 53 55 50 50 4f 52 54 20    AOA_AOD_SUPPORT 
    0x88025f0:   25 64 2c 20 46 5f 42 54 5f 4c 45 5f 36 5f 30 5f    %d, F_BT_LE_6_0_
    0x8802600:   41 4f 58 5f 43 4f 4e 4e 4c 45 53 53 5f 53 55 50    AOX_CONNLESS_SUP
    0x8802610:   50 4f 52 54 20 25 64 00 21 21 21 67 61 70 5f 6c    PORT %d.!!!gap_l
    0x8802620:   69 62 5f 69 6e 69 74 3a 20 46 5f 42 54 5f 4c 45    ib_init: F_BT_LE
    0x8802630:   5f 53 4d 50 5f 53 43 5f 4f 4f 42 5f 53 55 50 50    _SMP_SC_OOB_SUPP
    0x8802640:   4f 52 54 20 25 64 2c 20 46 5f 42 54 5f 53 57 5f    ORT %d, F_BT_SW_
    0x8802650:   52 45 53 45 54 5f 53 55 50 50 4f 52 54 20 25 64    RESET_SUPPORT %d
    0x8802660:   2c 20 46 5f 42 54 5f 50 41 54 43 48 5f 46 4f 52    , F_BT_PATCH_FOR
    0x8802670:   5f 43 48 41 4e 47 45 5f 41 50 49 20 25 64 2c 20    _CHANGE_API %d, 
    0x8802680:   46 5f 42 54 5f 44 4c 50 53 5f 41 50 49 20 25 64    F_BT_DLPS_API %d
    0x8802690:   2c 20 46 5f 42 54 5f 43 4f 4e 46 49 47 5f 41 50    , F_BT_CONFIG_AP
    0x88026a0:   49 20 25 64 2c 20 46 5f 42 54 5f 56 45 4e 44 4f    I %d, F_BT_VENDO
    0x88026b0:   52 5f 41 50 49 20 25 64 00 00 00 00 21 2a 2a 6c    R_API %d....!**l
    0x88026c0:   65 5f 63 68 65 63 6b 5f 70 72 69 76 61 63 79 5f    e_check_privacy_
    0x88026d0:   62 6f 6e 64 3a 20 69 64 78 20 25 64 20 70 72 69    bond: idx %d pri
    0x88026e0:   76 61 63 79 20 64 65 76 69 63 65 00 21 2a 2a 6c    vacy device.!**l
    0x88026f0:   65 5f 63 68 65 63 6b 5f 70 72 69 76 61 63 79 5f    e_check_privacy_
    0x8802700:   62 6f 6e 64 3a 20 6e 6f 74 20 70 72 69 76 61 63    bond: not privac
    0x8802710:   79 20 64 65 76 69 63 65 2c 20 63 61 75 73 65 20    y device, cause 
    0x8802720:   25 64 00 00 21 2a 2a 6c 65 5f 67 65 6e 5f 72 61    %d..!**le_gen_ra
    0x8802730:   6e 64 5f 61 64 64 72 3a 20 67 61 70 5f 6c 69 62    nd_addr: gap_lib
    0x8802740:   2c 20 72 61 6e 64 6f 6d 20 61 64 64 72 20 25 73    , random addr %s
    0x8802750:   2c 20 61 64 64 72 20 74 79 70 65 20 25 64 00 00    , addr type %d..
    0x8802760:   21 2a 2a 6c 65 5f 62 6f 6e 64 5f 67 65 74 5f 73    !**le_bond_get_s
    0x8802770:   65 63 5f 6c 65 76 65 6c 3a 20 25 64 00 00 00 00    ec_level: %d....


** Section #11 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 1476 bytes


** Section #12 '.debug_frame' (SHT_PROGBITS)
    Size   : 6552 bytes


** Section #13 '.debug_info' (SHT_PROGBITS)
    Size   : 170780 bytes


** Section #14 '.debug_line' (SHT_PROGBITS)
    Size   : 30976 bytes


** Section #15 '.debug_loc' (SHT_PROGBITS)
    Size   : 20016 bytes


** Section #16 '.debug_macinfo' (SHT_PROGBITS)
    Size   : 78536 bytes


** Section #17 '.debug_pubnames' (SHT_PROGBITS)
    Size   : 6223 bytes


** Section #18 '.symtab' (SHT_SYMTAB)
    Size   : 26064 bytes (alignment 4)
    String table #19 '.strtab'
    Last local symbol no. 786


** Section #19 '.strtab' (SHT_STRTAB)
    Size   : 20856 bytes


** Section #20 '.note' (SHT_NOTE)
    Size   : 56 bytes (alignment 4)


** Section #21 '.comment' (SHT_PROGBITS)
    Size   : 23464 bytes


** Section #22 '.shstrtab' (SHT_STRTAB)
    Size   : 276 bytes


address     size       variable name                            type
0x0020d2e8  0x4        mxchp_qc_task                            pointer to unknown Type 

address     size       variable name                            type
0x0020d2e4  0x4        qc_app_task_handle                       pointer to unknown Type 

address     size       variable name                            type
0x0020d2ec  0x4        qc_evt_queue_handle                      pointer to unknown Type 

address     size       variable name                            type
0x0020d2f0  0x4        qc_io_queue_handle                       pointer to unknown Type 

address     size       variable name                            type
0x0020d02c  0x6c       overlay_sections                         array[3] of T_OVERLAY_SECTION

address     size       variable name                            type
0x0020d2dc  0x8        scenario_name                            array[8] of char

address     size       variable name                            type
0x0020d2d4  0x4        h_event_q                                pointer to unknown Type 

address     size       variable name                            type
0x0020d2d8  0x4        h_io_q                                   pointer to unknown Type 

address     size       variable name                            type
0x0020d2ab  0x28       app_link_table                           array[4] of T_APP_LINK

address     size       variable name                            type
0x0020d281  0x2a       dev_list                                 array[6] of T_DEV_INFO

address     size       variable name                            type
0x0020d280  0x1        dev_list_count                           uint8_t

address     size       variable name                            type
0x0020d27f  0x1        bas_client_id                            T_CLIENT_ID

address     size       variable name                            type
0x0020d27c  0x1        gap_dev_state                            T_GAP_DEV_STATE
0x0020d27c  0x1(7:1)   gap_dev_state.gap_init_state             uint8_t
0x0020d27c  0x1(6:1)   gap_dev_state.gap_adv_sub_state          uint8_t
0x0020d27c  0x1(4:2)   gap_dev_state.gap_adv_state              uint8_t
0x0020d27c  0x1(2:2)   gap_dev_state.gap_scan_state             uint8_t
0x0020d27c  0x1(0:2)   gap_dev_state.gap_conn_state             uint8_t

address     size       variable name                            type
0x0020d27e  0x1        gaps_client_id                           T_CLIENT_ID

address     size       variable name                            type
0x0020d27d  0x1        simple_ble_client_id                     T_CLIENT_ID

address     size       variable name                            type
0x0020d270  0x4        app_task_handle                          pointer to unknown Type 

address     size       variable name                            type
0x0020d274  0x4        evt_queue_handle                         pointer to unknown Type 

address     size       variable name                            type
0x0020d278  0x4        io_queue_handle                          pointer to unknown Type 

address     size       variable name                            type
0x0020d0cc  0x1a4      user_cmd_if                              T_USER_CMD_IF
0x0020d0cc  0x66       user_cmd_if.cmdline_buf                  array[102] of char
0x0020d132  0x1        user_cmd_if.cmd_cur                      uint8_t
0x0020d133  0x132      user_cmd_if.cmd_history                  array[3] of array[102] of uint8_t
0x0020d265  0x3        user_cmd_if.cmd_history_len              array[3] of uint8_t
0x0020d268  0x1        user_cmd_if.history_head                 uint8_t
0x0020d269  0x1        user_cmd_if.history_tail                 uint8_t
0x0020d26a  0x1      * user_cmd_if.history_cur                  uint8_t
0x0020d26c  0x4        user_cmd_if.accum_cmd_len                int32_t

address     size       variable name                            type
0x0021c7f4  0x1a0      user_cmd_table                           array[26] of const T_USER_CMD_TABLE_ENTRY

address     size       variable name                            type
0x0020d02a  0x1        gaps_client                              T_CLIENT_ID

address     size       variable name                            type
0x0020d0c4  0x4        gaps_client_cb                           P_FUN_GENERAL_APP_CB

address     size       variable name                            type
0x0021c7cc  0x18       gaps_client_cbs                          const T_FUN_CLIENT_CBS
0x0021c7cc  0x4        gaps_client_cbs.discover_state_cb        P_FUN_DISCOVER_STATE_CB
0x0021c7d0  0x4        gaps_client_cbs.discover_result_cb       P_FUN_DISCOVER_RESULT_CB
0x0021c7d4  0x4        gaps_client_cbs.read_result_cb           P_FUN_READ_RESULT_CB
0x0021c7d8  0x4        gaps_client_cbs.write_result_cb          P_FUN_WRITE_RESULT_CB
0x0021c7dc  0x4        gaps_client_cbs.notify_ind_result_cb     P_FUN_NOTIFY_IND_RESULT_CB
0x0021c7e0  0x4        gaps_client_cbs.disconnect_cb            P_FUN_DISCONNECT_CB

address     size       variable name                            type
0x0020d0c0  0x1        gaps_link_num                            uint8_t

address     size       variable name                            type
0x0020d0c8  0x4        gaps_table                               P_GAPS_LINK

address     size       variable name                            type
0x0020d029  0x1        bas_client                               T_CLIENT_ID

address     size       variable name                            type
0x0020d0b8  0x4        bas_client_cb                            P_FUN_GENERAL_APP_CB

address     size       variable name                            type
0x0021c7a4  0x18       bas_client_cbs                           const T_FUN_CLIENT_CBS
0x0021c7a4  0x4        bas_client_cbs.discover_state_cb         P_FUN_DISCOVER_STATE_CB
0x0021c7a8  0x4        bas_client_cbs.discover_result_cb        P_FUN_DISCOVER_RESULT_CB
0x0021c7ac  0x4        bas_client_cbs.read_result_cb            P_FUN_READ_RESULT_CB
0x0021c7b0  0x4        bas_client_cbs.write_result_cb           P_FUN_WRITE_RESULT_CB
0x0021c7b4  0x4        bas_client_cbs.notify_ind_result_cb      P_FUN_NOTIFY_IND_RESULT_CB
0x0021c7b8  0x4        bas_client_cbs.disconnect_cb             P_FUN_DISCONNECT_CB

address     size       variable name                            type
0x0020d0b4  0x1        bas_link_num                             uint8_t

address     size       variable name                            type
0x0020d0bc  0x4        bas_table                                P_BAS_LINK

address     size       variable name                            type
0x0020c064  0x18       simp_ble_client_cbs                      const T_FUN_CLIENT_CBS
0x0020c064  0x4        simp_ble_client_cbs.discover_state_cb    P_FUN_DISCOVER_STATE_CB
0x0020c068  0x4        simp_ble_client_cbs.discover_result_cb   P_FUN_DISCOVER_RESULT_CB
0x0020c06c  0x4        simp_ble_client_cbs.read_result_cb       P_FUN_READ_RESULT_CB
0x0020c070  0x4        simp_ble_client_cbs.write_result_cb      P_FUN_WRITE_RESULT_CB
0x0020c074  0x4        simp_ble_client_cbs.notify_ind_result_cb P_FUN_NOTIFY_IND_RESULT_CB
0x0020c078  0x4        simp_ble_client_cbs.disconnect_cb        P_FUN_DISCONNECT_CB

address     size       variable name                            type
0x0020d028  0x1        simp_client                              T_CLIENT_ID

address     size       variable name                            type
0x0020d0ac  0x4        simp_client_cb                           P_FUN_GENERAL_APP_CB

address     size       variable name                            type
0x0020d0a8  0x1        simp_link_num                            uint8_t

address     size       variable name                            type
0x0020d0b0  0x4        simp_table                               P_SIMP_LINK

address     size       variable name                            type
0x0020bf38  0x20       app_cb_table                             const T_APP_CB_TABLE
0x0020bf38  0x4        app_cb_table.app_cb_signature            uint32_t
0x0020bf3c  0x4        app_cb_table.app_cb_numbers              uint32_t
0x0020bf40  0x18       app_cb_table.app_cb_addr                 array[6] of uint32_t

address     size       variable name                            type
0x0020d0a0  0x4        app_pre_main_cb                          USER_CALL_BACK

address     size       variable name                            type
0x0080e1e0  0x220      auth_header                              const T_AUTH_HEADER_FORMAT
0x0080e1e0  0x100      auth_header.payload_signature            array[256] of uint8_t
0x0080e2e0  0x10       auth_header.payload_mac                  array[16] of uint8_t
0x0080e2f0  0x100      auth_header.header_signature             array[256] of uint8_t
0x0080e3f0  0x10       auth_header.header_mac                   array[16] of uint8_t

address     size       variable name                            type
0x0020d024  0x4        check_reset_ram                          T_CHECK_RESET_RAM_RECORD
0x0020d024  0x4(8:24)  check_reset_ram.check_reset_ram_pattern  uint32_t
0x0020d024  0x4(0:8)   check_reset_ram.check_reset_ram_type     uint32_t

address     size       variable name                            type
0x0080e000  0x1e0      img_header                               const T_IMG_HEADER_FORMAT
0x0080e000  0xc        img_header.ctrl_header                   T_IMG_CTRL_HEADER_FORMAT
0x0080e000  0x1        img_header.ctrl_header.ic_type           uint8_t
0x0080e001  0x1        img_header.ctrl_header.secure_version    uint8_t
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag         anonymous
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag.value   uint16_t
0x0080e002  0x2        img_header.ctrl_header.ctrl_flag.flag_value anonymous
0x0080e002  0x2(15:1)  img_header.ctrl_header.ctrl_flag.flag_value.xip uint16_t
0x0080e002  0x2(14:1)  img_header.ctrl_header.ctrl_flag.flag_value.enc uint16_t
0x0080e002  0x2(13:1)  img_header.ctrl_header.ctrl_flag.flag_value.load_when_boot uint16_t
0x0080e002  0x2(12:1)  img_header.ctrl_header.ctrl_flag.flag_value.enc_load uint16_t
0x0080e002  0x2(9:3)   img_header.ctrl_header.ctrl_flag.flag_value.enc_key_select uint16_t
0x0080e002  0x2(8:1)   img_header.ctrl_header.ctrl_flag.flag_value.not_ready uint16_t
0x0080e002  0x2(7:1)   img_header.ctrl_header.ctrl_flag.flag_value.not_obsolete uint16_t
0x0080e002  0x2(6:1)   img_header.ctrl_header.ctrl_flag.flag_value.integrity_check_en_in_boot uint16_t
0x0080e002  0x2(0:6)   img_header.ctrl_header.ctrl_flag.flag_value.rsvd uint16_t
0x0080e004  0x2        img_header.ctrl_header.image_id          uint16_t
0x0080e006  0x2        img_header.ctrl_header.crc16             uint16_t
0x0080e008  0x4        img_header.ctrl_header.payload_len       uint32_t
0x0080e00c  0x10       img_header.uuid                          array[16] of uint8_t
0x0080e01c  0x4        img_header.exe_base                      uint32_t
0x0080e020  0x4        img_header.load_base                     uint32_t
0x0080e024  0x4        img_header.load_len                      uint32_t
0x0080e028  0x4        img_header.img_base                      uint32_t
0x0080e02c  0x4        img_header.rsvd0                         array[4] of uint8_t
0x0080e030  0x4        img_header.magic_pattern                 uint32_t
0x0080e034  0x10       img_header.dec_key                       array[16] of uint8_t
0x0080e044  0x1c       img_header.rsvd1                         array[28] of uint8_t
0x0080e060  0x10       img_header.git_ver                       T_VERSION_FORMAT
0x0080e060  0x4        img_header.git_ver.ver_info              anonymous
0x0080e060  0x4        img_header.git_ver.ver_info.version      uint32_t
0x0080e060  0x4        img_header.git_ver.ver_info.sub_version  anonymous
0x0080e060  0x4(28:4)  img_header.git_ver.ver_info.sub_version._version_major uint32_t
0x0080e060  0x4(20:8)  img_header.git_ver.ver_info.sub_version._version_minor uint32_t
0x0080e060  0x4(5:15)  img_header.git_ver.ver_info.sub_version._version_revision uint32_t
0x0080e060  0x4(0:5)   img_header.git_ver.ver_info.sub_version._version_reserve uint32_t
0x0080e064  0x4        img_header.git_ver._version_commitid     uint32_t
0x0080e068  0x8        img_header.git_ver._customer_name        array[8] of uint8_t
0x0080e070  0x104      img_header.rsaPubKey                     T_RSA_PUBLIC_KEY
0x0080e070  0x100      img_header.rsaPubKey.N                   array[256] of uint8_t
0x0080e170  0x4        img_header.rsaPubKey.E                   array[4] of uint8_t
0x0080e174  0x20       img_header.sha256                        array[32] of uint8_t
0x0080e194  0x44       img_header.rsvd2                         array[68] of uint8_t
0x0080e1d8  0x4        img_header.app_cb_signature              uint32_t
0x0080e1dc  0x4        img_header.app_cb_table_base_address     uint32_t

address     size       variable name                            type
0x0020d0a4  0x4        random_seed_value                        uint32_t

address     size       variable name                            type
0x0020d09c  0x4        user_dfu_status_cb                       BOOL_DFU_STATUS_CB

address     size       variable name                            type
0x0020d098  0x4        user_wdg_cb                              BOOL_WDG_CB

